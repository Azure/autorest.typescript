/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import {CloudErrorMapper, BaseResourceMapper } from "ms-rest-azure-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const StorageAccountCheckNameAvailabilityParameters = {
  required: false,
  serializedName: 'StorageAccountCheckNameAvailabilityParameters',
  type: {
    name: 'Composite',
    className: 'StorageAccountCheckNameAvailabilityParameters',
    modelProperties: {
      name: {
        required: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'type',
        defaultValue: 'Microsoft.Storage/storageAccounts',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult = {
  required: false,
  serializedName: 'CheckNameAvailabilityResult',
  type: {
    name: 'Composite',
    className: 'CheckNameAvailabilityResult',
    modelProperties: {
      nameAvailable: {
        required: false,
        serializedName: 'nameAvailable',
        type: {
          name: 'Boolean'
        }
      },
      reason: {
        required: false,
        serializedName: 'reason',
        type: {
          name: 'Enum',
          allowedValues: [ 'AccountNameInvalid', 'AlreadyExists' ]
        }
      },
      message: {
        required: false,
        serializedName: 'message',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const Resource = {
  required: false,
  serializedName: 'Resource',
  type: {
    name: 'Composite',
    className: 'Resource',
    modelProperties: {
      id: {
        required: false,
        readOnly: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      name: {
        required: false,
        readOnly: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        readOnly: true,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      location: {
        required: true,
        serializedName: 'location',
        type: {
          name: 'String'
        }
      },
      tags: {
        required: false,
        serializedName: 'tags',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const StorageAccountCreateParameters = {
  required: false,
  serializedName: 'StorageAccountCreateParameters',
  type: {
    name: 'Composite',
    className: 'StorageAccountCreateParameters',
    modelProperties: {
      id: {
        required: false,
        readOnly: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      name: {
        required: false,
        readOnly: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        readOnly: true,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      location: {
        required: true,
        serializedName: 'location',
        type: {
          name: 'String'
        }
      },
      tags: {
        required: false,
        serializedName: 'tags',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      accountType: {
        required: false,
        serializedName: 'properties.accountType',
        type: {
          name: 'Enum',
          allowedValues: [ 'Standard_LRS', 'Standard_ZRS', 'Standard_GRS', 'Standard_RAGRS', 'Premium_LRS' ]
        }
      }
    }
  }
};

export const Bar = {
  required: false,
  serializedName: 'Bar',
  type: {
    name: 'Composite',
    className: 'Bar',
    modelProperties: {
      recursivePoint: {
        required: false,
        serializedName: 'RecursivePoint',
        type: {
          name: 'Composite',
          className: 'Endpoints'
        }
      }
    }
  }
};

export const Foo = {
  required: false,
  serializedName: 'Foo',
  type: {
    name: 'Composite',
    className: 'Foo',
    modelProperties: {
      barPoint: {
        required: false,
        serializedName: 'Bar\\.Point',
        type: {
          name: 'Composite',
          className: 'Bar'
        }
      }
    }
  }
};

export const Endpoints = {
  required: false,
  serializedName: 'Endpoints',
  type: {
    name: 'Composite',
    className: 'Endpoints',
    modelProperties: {
      blob: {
        required: false,
        serializedName: 'blob',
        type: {
          name: 'String'
        }
      },
      queue: {
        required: false,
        serializedName: 'queue',
        type: {
          name: 'String'
        }
      },
      table: {
        required: false,
        serializedName: 'table',
        type: {
          name: 'String'
        }
      },
      dummyEndPoint: {
        required: false,
        serializedName: 'dummyEndPoint',
        type: {
          name: 'Composite',
          className: 'Endpoints'
        }
      },
      fooPoint: {
        required: false,
        serializedName: 'FooPoint',
        type: {
          name: 'Composite',
          className: 'Foo'
        }
      }
    }
  }
};

export const CustomDomain = {
  required: false,
  serializedName: 'CustomDomain',
  type: {
    name: 'Composite',
    className: 'CustomDomain',
    modelProperties: {
      name: {
        required: false,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      useSubDomain: {
        required: false,
        serializedName: 'useSubDomain',
        type: {
          name: 'Boolean'
        }
      }
    }
  }
};

export const StorageAccount = {
  required: false,
  serializedName: 'StorageAccount',
  type: {
    name: 'Composite',
    className: 'StorageAccount',
    modelProperties: {
      id: {
        required: false,
        readOnly: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      name: {
        required: false,
        readOnly: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        readOnly: true,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      location: {
        required: true,
        serializedName: 'location',
        type: {
          name: 'String'
        }
      },
      tags: {
        required: false,
        serializedName: 'tags',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      provisioningState: {
        required: false,
        serializedName: 'properties.provisioningState',
        type: {
          name: 'Enum',
          allowedValues: [ 'Creating', 'ResolvingDNS', 'Succeeded' ]
        }
      },
      accountType: {
        required: false,
        serializedName: 'properties.accountType',
        type: {
          name: 'Enum',
          allowedValues: [ 'Standard_LRS', 'Standard_ZRS', 'Standard_GRS', 'Standard_RAGRS', 'Premium_LRS' ]
        }
      },
      primaryEndpoints: {
        required: false,
        serializedName: 'properties.primaryEndpoints',
        type: {
          name: 'Composite',
          className: 'Endpoints'
        }
      },
      primaryLocation: {
        required: false,
        serializedName: 'properties.primaryLocation',
        type: {
          name: 'String'
        }
      },
      statusOfPrimary: {
        required: false,
        serializedName: 'properties.statusOfPrimary',
        type: {
          name: 'Enum',
          allowedValues: [ 'Available', 'Unavailable' ]
        }
      },
      lastGeoFailoverTime: {
        required: false,
        serializedName: 'properties.lastGeoFailoverTime',
        type: {
          name: 'DateTime'
        }
      },
      secondaryLocation: {
        required: false,
        serializedName: 'properties.secondaryLocation',
        type: {
          name: 'String'
        }
      },
      statusOfSecondary: {
        required: false,
        serializedName: 'properties.statusOfSecondary',
        type: {
          name: 'Enum',
          allowedValues: [ 'Available', 'Unavailable' ]
        }
      },
      creationTime: {
        required: false,
        serializedName: 'properties.creationTime',
        type: {
          name: 'DateTime'
        }
      },
      customDomain: {
        required: false,
        serializedName: 'properties.customDomain',
        type: {
          name: 'Composite',
          className: 'CustomDomain'
        }
      },
      secondaryEndpoints: {
        required: false,
        serializedName: 'properties.secondaryEndpoints',
        type: {
          name: 'Composite',
          className: 'Endpoints'
        }
      }
    }
  }
};

export const StorageAccountKeys = {
  required: false,
  serializedName: 'StorageAccountKeys',
  type: {
    name: 'Composite',
    className: 'StorageAccountKeys',
    modelProperties: {
      key1: {
        required: false,
        serializedName: 'key1',
        type: {
          name: 'String'
        }
      },
      key2: {
        required: false,
        serializedName: 'key2',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const StorageAccountUpdateParameters = {
  required: false,
  serializedName: 'StorageAccountUpdateParameters',
  type: {
    name: 'Composite',
    className: 'StorageAccountUpdateParameters',
    modelProperties: {
      id: {
        required: false,
        readOnly: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      name: {
        required: false,
        readOnly: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        readOnly: true,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      location: {
        required: true,
        serializedName: 'location',
        type: {
          name: 'String'
        }
      },
      tags: {
        required: false,
        serializedName: 'tags',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      accountType: {
        required: false,
        serializedName: 'properties.accountType',
        type: {
          name: 'Enum',
          allowedValues: [ 'Standard_LRS', 'Standard_ZRS', 'Standard_GRS', 'Standard_RAGRS', 'Premium_LRS' ]
        }
      },
      customDomain: {
        required: false,
        serializedName: 'properties.customDomain',
        type: {
          name: 'Composite',
          className: 'CustomDomain'
        }
      }
    }
  }
};

export const StorageAccountRegenerateKeyParameters = {
  required: false,
  serializedName: 'StorageAccountRegenerateKeyParameters',
  type: {
    name: 'Composite',
    className: 'StorageAccountRegenerateKeyParameters',
    modelProperties: {
      keyName: {
        required: false,
        serializedName: 'keyName',
        type: {
          name: 'Enum',
          allowedValues: [ 'key1', 'key2' ]
        }
      }
    }
  }
};

export const UsageName = {
  required: false,
  serializedName: 'UsageName',
  type: {
    name: 'Composite',
    className: 'UsageName',
    modelProperties: {
      value: {
        required: false,
        serializedName: 'value',
        type: {
          name: 'String'
        }
      },
      localizedValue: {
        required: false,
        serializedName: 'localizedValue',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const Usage = {
  required: false,
  serializedName: 'Usage',
  type: {
    name: 'Composite',
    className: 'Usage',
    modelProperties: {
      unit: {
        required: false,
        serializedName: 'unit',
        type: {
          name: 'Enum',
          allowedValues: [ 'Count', 'Bytes', 'Seconds', 'Percent', 'CountsPerSecond', 'BytesPerSecond' ]
        }
      },
      currentValue: {
        required: false,
        serializedName: 'currentValue',
        type: {
          name: 'Number'
        }
      },
      limit: {
        required: false,
        serializedName: 'limit',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'name',
        type: {
          name: 'Composite',
          className: 'UsageName'
        }
      }
    }
  }
};

export const UsageListResult = {
  required: false,
  serializedName: 'UsageListResult',
  type: {
    name: 'Composite',
    className: 'UsageListResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: 'value',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'UsageElementType',
              type: {
                name: 'Composite',
                className: 'Usage'
              }
          }
        }
      }
    }
  }
};

export const SubResource = {
  required: false,
  serializedName: 'SubResource',
  type: {
    name: 'Composite',
    className: 'SubResource',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const StorageAccountsRegenerateKeyOptionalParams = {
  required: false,
  serializedName: 'RegenerateKeyOptions',
  type: {
    name: 'Composite',
    className: 'StorageAccountsRegenerateKeyOptionalParams',
    modelProperties: {
      keyName: {
        required: false,
        serializedName: 'keyName',
        type: {
          name: 'Enum',
          allowedValues: [ 'key1', 'key2' ]
        }
      }
    }
  }
};

export const StorageAccountListResult = {
  required: false,
  serializedName: 'StorageAccountListResult',
  type: {
    name: 'Composite',
    className: 'StorageAccountListResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'StorageAccountElementType',
              type: {
                name: 'Composite',
                className: 'StorageAccount'
              }
          }
        }
      }
    }
  }
};
