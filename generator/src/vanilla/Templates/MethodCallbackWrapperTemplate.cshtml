@using System
@using System.Globalization
@using System.Linq;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.TypeScript
@using AutoRest.TypeScript.Model
@using AutoRest.TypeScript.vanilla.Templates
@inherits AutoRest.Core.Template<MethodTS>

@(Model.GenerateMethodDocumentation(MethodTS.MethodFlavor.Callback))
@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationTS(false, false))): Promise<@(Model.ReturnTypeTSString)>;
@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationTS(true, false))): Promise<@(Model.ReturnTypeTSString)>;
@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationWithCallbackTS(includeOptions: false))): void;
@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationWithCallbackTS(true, true))): void;
@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationTS(true, true)), callback?: msRest.ServiceCallback<@(Model.ReturnTypeTSString)>): any {
  if (!callback && typeof options === 'function') {
    callback = options;
    options = undefined;
  }
  let cb = callback as msRest.ServiceCallback<@(Model.ReturnTypeTSString)>;
  if (!callback) {
    return this.@(Model.Name.ToCamelCase())WithHttpOperationResponse(@(Model.MethodParameterDeclaration)).then((operationRes: msRest.HttpOperationResponse) => {
      return Promise.resolve(@(Model.BuildResultInitialization("operationRes")));
    }).catch((err: Error) => {
      return Promise.reject(err);
    });
  } else {
    msRest.promiseToCallback(this.@(Model.Name.ToCamelCase())WithHttpOperationResponse(@(Model.MethodParameterDeclaration)))((err: Error, data: msRest.HttpOperationResponse) => {
      if (err) {
        return cb(err);
      }
      let result = @(Model.BuildResultInitialization("data"));
      return cb(err, result, data.request, data);
    });
  }
}