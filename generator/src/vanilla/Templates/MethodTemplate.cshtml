@using System
@using System.Globalization
@using System.Linq;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.TypeScript
@using AutoRest.TypeScript.Model
@using AutoRest.TypeScript.vanilla.Templates
@inherits AutoRest.Core.Template<MethodTS>

@(Model.GenerateMethodDocumentation(MethodTS.MethodFlavor.HttpOperationResponse))
async @(Model.Name.ToCamelCase())WithHttpOperationResponse(@(Model.MethodParameterDeclarationTS(true, true))): Promise<msRest.HttpOperationResponse> {
  let client = @(Model.ClientReference);

  @if (Model.OptionsParameterModelType.Properties.Count > 0)
  {
  @:@(Model.BuildOptionalMappings())
  }

  @foreach(var parameter in Model.ParameterTemplateModels)
  {
    if (parameter.IsConstant && !parameter.IsClientProperty)
    {
  @:let @(parameter.Name) = @(parameter.DefaultValue);
    }

    if (parameter.ModelType is CompositeType
      && !parameter.IsConstant
      && parameter.IsRequired
      && !parameter.IsClientProperty
      && ((CompositeType)parameter.ModelType).ContainsConstantProperties)
    {
  @:if (@(parameter.Name) === null || @(parameter.Name) === undefined)
  @:{
  @:  @(parameter.Name) = {} as any;
  @:}
    }
  }

  @if (Model.ParameterTemplateModels.Any())
  {
      var validationBlock = Model.ValidationString;
  if (!string.IsNullOrWhiteSpace(validationBlock))
  {
  <text>
  // Validate
  try {
    @(validationBlock)
  } catch (error) {
    return Promise.reject(error);
  }
  </text>
  }
  }
@(Model.BuildInputMappings())
  @EmptyLine
  // Construct URL
  @if (Model.IsAbsoluteUrl)
  {
  <text>
  const requestUrl: msRest.URLBuilder = msRest.URLBuilder.parse("@(Model.Url)");
  </text>
  }
  else
  {
  <text>
  const requestUrl: msRest.URLBuilder = msRest.URLBuilder.parse(@(Model.ClientReference).baseUri);
  requestUrl.setPath("@(Model.Url)");
  </text>
  }
@(Model.BuildUrl("requestUrl"))
  @EmptyLine
  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = '@(Model.HttpMethod.ToString().ToUpper())';
  httpRequest.url = requestUrl.toString();
  httpRequest.headers = {};

  // Set Headers
  httpRequest.headers['Content-Type'] = '@(Model.RequestContentType)';
  @(Model.SetDefaultHeaders)
  @foreach (var parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.Header))
  {
  @:if (@(parameter.Name) !== undefined && @(parameter.Name) !== null) {
  @:  httpRequest.headers['@(parameter.SerializedName)'] = @parameter.ModelType.ToString(parameter.Name);
  @:}
  }
  if(options && options.customHeaders) {
    for(let headerName in options.customHeaders) {
      if (options.customHeaders.hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options.customHeaders[headerName];
      }
    }
  }

  @if (Model.RequestBody != null)
  {
      if (Model.RequestBody.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
      {
  <text>
  // Serialize Request
  let requestContent = @(Model.RequestBody.Name);
  httpRequest.body = requestContent;
  </text>
      }
      else
      {
  <text>
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (@(Model.RequestBody.Name) !== null && @(Model.RequestBody.Name) !== undefined) {
      @(Model.ConstructRequestBodyMapper)
      requestModel = client.serializer.serialize(requestModelMapper, @(Model.RequestBody.Name), '@(Model.RequestBody.Name)');
      @if (Model.CodeModel.ShouldGenerateXmlSerialization)
      {
        if (Model.RequestBody.ModelType is SequenceType sequenceType)
        {
@:      requestContent = msRest.stringifyXML(msRest.prepareXMLRootList(requestModel, '@(sequenceType.ElementXmlName)'), { rootName: '@(Model.RequestBody.ModelType.XmlName)' });
        }
        else
        {
@:      requestContent = msRest.stringifyXML(requestModel, { rootName: '@(Model.RequestBody.ModelType.XmlName)' });
        }

      }
      else
      {
@:      requestContent = JSON.stringify(requestModel);
      }
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(@(Model.RequestBody.Name), null, 2)}.`);
    return Promise.reject(serializationError);
  }

  httpRequest.body = requestContent;
  </text>
      }
  }
  else if (Model.LogicalParameters.Where(p => p.Location == ParameterLocation.FormData).Any())
  {
  <text>
  // Serialize Request
  let formData: any = {};
      @foreach (var parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.FormData))
      {
  @:if (@(parameter.Name) !== undefined && @(parameter.Name) !== null) {
          if (parameter.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
          {
    @:formData['@(parameter.SerializedName)'] = @(parameter.Name);
          }
          else
          {
    @:formData['@(parameter.SerializedName)'] = @parameter.ModelType.ToString(parameter.Name);
          }
  @:}
      }
  httpRequest.formData = formData;
  </text>
  }

  @if (Model.Responses.Any(r => r.Value.Body.IsPrimaryType(KnownPrimaryType.Stream)))
  {
@:  @Include(new MethodStreamPipelineTemplate(), Model)
  }
  else
  {
@:  @Include(new MethodJsonPipelineTemplate(), Model)
  }
}
