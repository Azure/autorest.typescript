@using System.Linq;
@inherits AutoRest.Core.Template<AutoRest.TypeScript.Model.MethodTS>
// Send Request
httpRequest.rawResponse = true;
let operationRes: msRest.HttpOperationResponse;
try {
  operationRes = await client.sendRequest(httpRequest);
  let statusCode = operationRes.status;
  @EmptyLine
  if (@(Model.FailureStatusCodePredicate)) {
    let error = new msRest.RestError(`Unexpected status code: ${statusCode}`);
    error.statusCode = operationRes.status;
    error.request = msRest.stripRequest(httpRequest);
    error.response = msRest.stripResponse(operationRes);
    let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
    try {
      if (parsedErrorResponse) {
        @(Model.PopulateErrorCodeAndMessage())
      }
  @if (Model.DefaultResponse.Body != null)
  {
      var deserializeErrorBody = Model.GetDeserializationString(Model.DefaultResponse.Body, "error.body", "parsedErrorResponse");
      if (!string.IsNullOrWhiteSpace(deserializeErrorBody))
      {
@:      if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
@:        @(deserializeErrorBody)
@:      }
      }
  }
    } catch (defaultError) {
      error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                       `- "${operationRes.bodyAsText}" for the default response.`;
      return Promise.reject(error);
    }
    @EmptyLine
    return Promise.reject(error);
  }
@EmptyLine
} catch(error) {
  return Promise.reject(error);
}
@EmptyLine
return Promise.resolve(operationRes);