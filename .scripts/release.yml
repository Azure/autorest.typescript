parameters:
  - name: DependsOn
    type: string
    default: Build

  - name: LinuxPool
    type: string
    default: azsdk-pool-mms-ubuntu-1804-general

  - name: OSVmImage
    type: string
    default: ubuntu-18.04

stages:
  - ? ${{if and(eq(variables['Build.Reason'], 'Manual'), eq(variables['System.TeamProject'], 'internal'))}}
    : - stage: Release
        displayName: "Release: @autorest/typescript"
        dependsOn: ${{parameters.DependsOn}}
        jobs:
          - deployment: TagRepository
            displayName: "Create release tag"
            condition: and(ne(variables['Skip.TagRepository'], 'true'), ne(variables['SetDevVersion'], 'true'))
            environment: github

            pool:
              name: ${{ parameters.LinuxPool }}
              vmImage: ${{ parameters.OSVmImage }}

            variables:
              MAIN_VERSION: $[ stageDependencies.BuildStage.Build.outputs['PackArtifacts.MAIN_VERSION'] ]

            strategy:
              runOnce:
                deploy:
                  steps:
                    - task: NodeTool@0
                      inputs:
                        versionSpec: "14.x"
                      displayName: "Install Node.js"
                    - script: |
                        cd package
                        npx publish-release --token $(azuresdk-github-pat) --repo autorest.typescript --owner azure --name v$(MAIN_VERSION) --tag v$(MAIN_VERSION) --notes='release  build' --prerelease --editRelease false --assets $(Pipeline.Workspace)/packages/$(TAR_NAME) --target_commitish $(Build.SourceBranchName)
                      displayName: "Publish to GitHub"
          - deployment: PublishToNpm
            variables:
              TAR_NAME: $[ stageDependencies.BuildStage.Build.outputs['PackArtifacts.TAR_NAME'] ]
            environment: npm
            displayName: Publish NPM
            condition: ne(variables['SetDevVersion'], 'true')
            pool:
              name: ${{ parameters.LinuxPool }}
              vmImage: ${{ parameters.OSVmImage }}
            strategy:
              runOnce:
                deploy:
                  steps:
                    - task: NodeTool@0
                      inputs:
                        versionSpec: "14.x"
                      displayName: "Install Node.js"
                    - script: |
                        cd $(Pipeline.Workspace)/packages
                        npm config set //registry.npmjs.org/:_authToken=$(azure-sdk-npm-token)
                        npm publish $(TAR_NAME) --access public --tag latest
                        npm config delete //registry.npmjs.org/:_authToken
                      displayName: "Publish to NPM"

  - stage: Integration
    dependsOn: ${{parameters.DependsOn}}
    jobs:
      - deployment: PublishToGithub
        condition: or(eq(variables['SetDevVersion'], 'true'), and(eq(variables['SetDevVersion'], ''), eq(variables['Build.Reason'],'Schedule'), eq(variables['System.TeamProject'], 'internal')))
        variables:
          TAR_NAME: $[ stageDependencies.BuildStage.Build.outputs['PackArtifacts.TAR_NAME'] ]
          DEV_VERSION: $[ stageDependencies.BuildStage.Build.outputs['PackArtifacts.DEV_VERSION'] ]
        environment: githubtsjssdk
        displayName: Publish dev version to GitHub
        pool:
          name: ${{ parameters.LinuxPool }}
          vmImage: ${{ parameters.OSVmImage }}
        strategy:
          runOnce:
            deploy:
              steps:
                - task: NodeTool@0
                  inputs:
                    versionSpec: "14.x"
                  displayName: "Install Node.js"
                - script: |
                    tar zxvf $(Pipeline.Workspace)/packages/$(TAR_NAME)
                - script: |
                    cd package
                    tree .
                    npx publish-release --token $(azuresdk-github-pat) --repo autorest.typescript --owner azure --name v$(DEV_VERSION) --tag v$(DEV_VERSION) --notes='prerelease build' --prerelease --editRelease false --assets $(Pipeline.Workspace)/packages/$(TAR_NAME) --target_commitish $(Build.SourceBranchName)
                  displayName: "Publish to GitHub"
      - deployment: PublishToNpm
        condition: or(eq(variables['SetDevVersion'], 'true'), and(eq(variables['SetDevVersion'], ''), eq(variables['Build.Reason'],'Schedule'), eq(variables['System.TeamProject'], 'internal')))
        variables:
          TAR_NAME: $[ stageDependencies.BuildStage.Build.outputs['PackArtifacts.TAR_NAME'] ]
        environment: npmtsjssdk
        displayName: Publish dev version to NPM
        pool:
          name: ${{ parameters.LinuxPool }}
          vmImage: ${{ parameters.OSVmImage }}
        strategy:
          runOnce:
            deploy:
              steps:
                - task: NodeTool@0
                  inputs:
                    versionSpec: "14.x"
                  displayName: "Install Node.js"
                - script: |
                    cd $(Pipeline.Workspace)/packages
                    npm config set //registry.npmjs.org/:_authToken=$(azure-sdk-npm-token)
                    npm publish $(TAR_NAME) --access public --tag dev
                    npm config delete //registry.npmjs.org/:_authToken
                  displayName: "Publish to NPM"
