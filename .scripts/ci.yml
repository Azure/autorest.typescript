trigger:
  - v6

parameters:
  - name: LinuxPool
    type: string
    default: azsdk-pool-mms-ubuntu-1804-general
  - name: IncludeRelease
    type: boolean
    default: true
  - name: OSVmImage
    type: string
    default: ubuntu-18.04

variables:
  AUTOREST_TESTSERVER_COVERAGE_DIRECTORY: "$(Build.SourcesDirectory)/coverage/"

pool:
  vmImage: ubuntu-18.04

stages:
  - stage: BuildStage
    jobs:
      - job: Build
        steps:
          - template: build.yml
          - script: |
              export MAIN_VERSION=$(node -p -e "require('./package.json').version")
              echo "##vso[task.setvariable variable=MAIN_VERSION;isOutput=true;]MAIN_VERSION"
            name: SetMainVersion
          - script: |
              export DEV_VERSION=$(node -p -e "require('./package.json').version.replace('beta', 'alpha')").$(Build.BuildNumber)
              echo "##vso[task.setvariable variable=DEV_VERSION;isOutput=true;]$DEV_VERSION"
              npm version --no-git-tag-version $DEV_VERSION
            condition: or(eq(variables['SetDevVersion'], 'true'), and(eq(variables['SetDevVersion'], ''), eq(variables['Build.Reason'],'Schedule'), eq(variables['System.TeamProject'], 'internal')))
            name: SetDevVersion
          - script: |
              export TAR_NAME=$(npm pack -q)
              echo "##vso[task.setvariable variable=TAR_NAME;isOutput=true;]$TAR_NAME"
            name: PackArtifacts
          - task: CopyFiles@2
            inputs:
              contents: "*.tgz"
              targetFolder: $(Build.ArtifactStagingDirectory)
              flattenFolders: true
            displayName: "Copy packages"

          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            displayName: "Publish artifacts"
            inputs:
              artifactName: packages
              path: $(Build.ArtifactStagingDirectory)
      - job: HLC_Generation
        dependsOn: Build
        strategy:
          matrix:
            macOS_Node12:
              Pool:
              OSVmImage: "macOS-10.15"
              NodeTestVersion: "12.x"
            Browser_Linux_Node12:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage:
              NodeTestVersion: "12.x"
            Linux_Node14:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-18.04"
              NodeTestVersion: "14.x"
            Linux_Node16:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-18.04"
              NodeTestVersion: "16.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - script: npm run generate-swaggers
            displayName: "Generate HLC Test Clients"
          - script: npm run check:tree
            displayName: "Check git Tree"            

      - job: RLC_Generation
        dependsOn: Build
        strategy:
          matrix:
            macOS_Node12:
              Pool:
              OSVmImage: "macOS-10.15"
              NodeTestVersion: "12.x"
            Browser_Linux_Node12:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage:
              NodeTestVersion: "12.x"
            Linux_Node14:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-18.04"
              NodeTestVersion: "14.x"
            Linux_Node16:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-18.04"
              NodeTestVersion: "16.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - script: npm run rlc-generate-swaggers
            displayName: "Generate RLC Test Clients"
          - script: npm run generate-version-tolerance
            displayName: "Generate RLC version tolerance initial version"
          - script: npm run generate-version-tolerance:tests
            displayName: "Generate RLC version tolerance update version"  
          - script: npm run check:tree
            displayName: "Check git Tree"  
      - job: Test
        dependsOn: Build
        strategy:
          matrix:
            macOS_Node12:
              Pool:
              OSVmImage: "macOS-10.15"
              NodeTestVersion: "12.x"
            Browser_Linux_Node12:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage:
              NodeTestVersion: "12.x"
            Linux_Node14:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-18.04"
              NodeTestVersion: "14.x"
            Linux_Node16:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-18.04"
              NodeTestVersion: "16.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - task: NodeTool@0
            inputs:
              versionSpec: $(NodeTestVersion)
            displayName: "Use Node $(NodeTestVersion)"
          - script: npm run start-test-server:v2 &
            displayName: "Start Test Server"     
          - script: npm run test:node:alone
            displayName: "Run Node Tests"
          - script: npm run test:browser:alone
            displayName: "Run Browser Tests"
          - script: npm run stop-test-server
            displayName: "Stop Test Server"   
          - script: npm run check:tree
            displayName: "Check git Tree"
          - script: |
              npm run coverage -- publish --repo=$(Build.Repository.Name) --ref=$(Build.SourceBranch) --githubToken=$(github-token) --azStorageAccount=$(storage-coverage-user) --azStorageAccessKey=$(storage-coverage-pass) --coverageDirectory=$(AUTOREST_TESTSERVER_COVERAGE_DIRECTORY)
            workingDirectory: node_modules/@microsoft.azure/autorest.testserver
            displayName: "Upload Coverage Report"
            condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))

      # We are splitting smoke test validation in buckets to help reduce the overall run time by running each bucket in parallel
      - template: smoke-test.yml
        parameters:
          name: SmokeTest_1
          tag: ci_1
      - template: smoke-test.yml
        parameters:
          name: SmokeTest_2
          tag: ci_2
      - template: smoke-test.yml
        parameters:
          name: SmokeTest_3
          tag: ci_3
      - template: smoke-test.yml
        parameters:
          name: SmokeTest_RLC
          tag: ci_rlc

  # The Prerelease and Release stages are conditioned on whether we are building a pull request and the branch.
  - ? ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'), eq(parameters.IncludeRelease,true))}}
    : - template: release.yml
        parameters:
          DependsOn: BuildStage
