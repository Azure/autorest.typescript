trigger:
  - v6

parameters:
  - name: LinuxPool
    type: string
    default: azsdk-pool-mms-ubuntu-2004-general
  - name: IncludeRelease
    type: boolean
    default: true
  - name: OSVmImage
    type: string
    default: ubuntu-20.04
  - name: Windows_Latest
    type: string
    default: "Windows-latest"

variables:
  AUTOREST_TESTSERVER_COVERAGE_DIRECTORY: "$(Build.SourcesDirectory)/packages/autorest.typescript/coverage/"
  TypeSpec_TESTSERVER_COVERAGE_RLC_AZURE_REPORT: "$(Build.SourcesDirectory)/packages/typespec-ts/coverage/spector-coverage-typescript-rlc-azure.json"
  TypeSpec_TESTSERVER_COVERAGE_RLC_STANDARD_REPORT: "$(Build.SourcesDirectory)/packages/typespec-ts/coverage/spector-coverage-typescript-rlc-standard.json"
  TypeSpec_TESTSERVER_COVERAGE_MODULAR_AZURE_REPORT: "$(Build.SourcesDirectory)/packages/typespec-ts/coverage/spector-coverage-typescript-modular-azure.json"
  TypeSpec_TESTSERVER_COVERAGE_MODULAR_STANDARD_REPORT: "$(Build.SourcesDirectory)/packages/typespec-ts/coverage/spector-coverage-typescript-modular-standard.json"

stages:
  - stage: BuildStage
    jobs:
      - job: Build
        pool:
          name: ${{ parameters.LinuxPool }}
          vmImage: ${{ parameters.OSVmImage }}
        steps:
          - template: build.yml
          - script: |
              export MAIN_VERSION=$(node -p -e "require('./package.json').version")
              echo "##vso[task.setvariable variable=MAIN_VERSION;isOutput=true;]MAIN_VERSION"
            name: SetAutorestTypescriptMainVersion
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
          - script: |
              export MAIN_VERSION=$(node -p -e "require('./package.json').version")
              echo "##vso[task.setvariable variable=MAIN_VERSION;isOutput=true;]MAIN_VERSION"
            name: SetTypeSpecTSMainVersion
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
          - script: |
              export MAIN_VERSION=$(node -p -e "require('./package.json').version")
              echo "##vso[task.setvariable variable=MAIN_VERSION;isOutput=true;]MAIN_VERSION"
            name: SetRLCCommonMainVersion
            workingDirectory: $(Build.SourcesDirectory)/packages/rlc-common
          - script: |
              export DEV_VERSION=$(node -p -e "require('./package.json').version.replace(/-beta.*/g, '') + '-alpha'").$(Build.BuildNumber)
              echo "##vso[task.setvariable variable=DEV_VERSION;isOutput=true;]$DEV_VERSION"
              npm version --no-git-tag-version $DEV_VERSION
            condition: or(eq(variables['SetDevVersion'], 'true'), and(eq(variables['SetDevVersion'], ''), eq(variables['Build.Reason'],'Schedule'), eq(variables['System.TeamProject'], 'internal')))
            name: SetAutorestTypescriptDevVersion
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
          - script: |
              export DEV_VERSION=$(node -p -e "require('./package.json').version.replace(/-beta.*/g, '') + '-alpha'").$(Build.BuildNumber)
              echo "##vso[task.setvariable variable=DEV_VERSION;isOutput=true;]$DEV_VERSION"
              npm version --no-git-tag-version $DEV_VERSION
            condition: or(eq(variables['SetDevVersion'], 'true'), and(eq(variables['SetDevVersion'], ''), eq(variables['Build.Reason'],'Schedule'), eq(variables['System.TeamProject'], 'internal')))
            name: SetTypeSpecTSDevVersion
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
          - script: |
              export DEV_VERSION=$(node -p -e "require('./package.json').version.replace(/-beta.*/g, '') + '-alpha'").$(Build.BuildNumber)
              echo "##vso[task.setvariable variable=DEV_VERSION;isOutput=true;]$DEV_VERSION"
              npm version --no-git-tag-version $DEV_VERSION
            condition: or(eq(variables['SetDevVersion'], 'true'), and(eq(variables['SetDevVersion'], ''), eq(variables['Build.Reason'],'Schedule'), eq(variables['System.TeamProject'], 'internal')))
            name: SetRLCCommonDevVersion
            workingDirectory: $(Build.SourcesDirectory)/packages/rlc-common
          - script: |
              export DEV_VERSION=$(node -p -e "require('../rlc-common/package.json').version")
              jq --arg DEV_VERSION "$DEV_VERSION" '.dependencies["@azure-tools/rlc-common"] = $DEV_VERSION' package.json > temp.json
              mv temp.json package.json
            condition: or(eq(variables['SetDevVersion'], 'true'), and(eq(variables['SetDevVersion'], ''), eq(variables['Build.Reason'],'Schedule'), eq(variables['System.TeamProject'], 'internal')))
            name: UpdateRLCCommonDevVersionInAutorestTypescript
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
          - script: |
              export DEV_VERSION=$(node -p -e "require('../rlc-common/package.json').version")
              jq --arg DEV_VERSION "$DEV_VERSION" '.dependencies["@azure-tools/rlc-common"] = $DEV_VERSION' package.json > temp.json
              mv temp.json package.json
            condition: or(eq(variables['SetDevVersion'], 'true'), and(eq(variables['SetDevVersion'], ''), eq(variables['Build.Reason'],'Schedule'), eq(variables['System.TeamProject'], 'internal')))
            name: UpdateRLCCommonDevVersionInTypesSpecTs
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
          - script: |
              export TAR_NAME=$(node ../../common/scripts/install-run-rush-pnpm.js pack -q)
              echo $TAR_NAME
              echo "##vso[task.setvariable variable=TAR_NAME;isOutput=true;]$TAR_NAME"
            name: PackAutorestTypescriptArtifacts
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
          - script: |
              export TAR_NAME=$(node ../../common/scripts/install-run-rush-pnpm.js pack -q)
              echo $TAR_NAME
              echo "##vso[task.setvariable variable=TAR_NAME;isOutput=true;]$TAR_NAME"
            name: PackTypeSpecTSArtifacts
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
          - script: |
              export TAR_NAME=$(node ../../common/scripts/install-run-rush-pnpm.js pack -q)
              echo $TAR_NAME
              echo "##vso[task.setvariable variable=TAR_NAME;isOutput=true;]$TAR_NAME"
            name: PackRLCCommonArtifacts
            workingDirectory: $(Build.SourcesDirectory)/packages/rlc-common
          - task: CopyFiles@2
            inputs:
              contents: "$(Build.SourcesDirectory)/packages/*/*.tgz"
              targetFolder: $(Build.ArtifactStagingDirectory)
              flattenFolders: true
            displayName: "Copy packages"

          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            displayName: "Publish artifacts"
            inputs:
              artifactName: packages
              path: $(Build.ArtifactStagingDirectory)
      - job: HLC_Generation
        dependsOn: Build
        variables:
          - template: globals.yml
        strategy:
          matrix:
            Linux_Node18:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-20.04"
              NodeTestVersion: "18.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - script: npm run generate-swaggers
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Generate HLC Test Clients"
          - script: npm run check:tree
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Check git Tree"

      - job: RLC_Generation
        dependsOn: Build
        variables:
          - template: globals.yml
        strategy:
          matrix:
            Linux_Node18:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-20.04"
              NodeTestVersion: "18.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - script: npm run rlc-generate-swaggers
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Generate RLC Test Clients"
          - script: npm run generate-version-tolerance
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Generate RLC version tolerance initial version"
          - script: npm run generate-version-tolerance:tests
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Generate RLC version tolerance update version"
          - script: npm run check:tree
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Check git Tree"
      - job: Autorest_Typescript_Test
        dependsOn: Build
        variables:
          - template: globals.yml
        strategy:
          matrix:
            macOS_Node18:
              Pool:
              OSVmImage: "macOS-latest"
              NodeTestVersion: "18.x"
            Linux_Node18:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-20.04"
              NodeTestVersion: "18.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - task: NodeTool@0
            inputs:
              versionSpec: $(NodeTestVersion)
            displayName: "Use Node $(NodeTestVersion)"
          - script: npm run start-test-server:v2 &
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Start Test Server"
          - script: npm run test:node:alone
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Run Node Tests"
          - script: npm run test:browser:alone
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Run Browser Tests"
          - script: npm run stop-test-server
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Stop Test Server"
          - script: npm run check:tree
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Check git Tree"

      # We are splitting smoke test validation in buckets to help reduce the overall run time by running each bucket in parallel
      - template: smoke-test.yml
        parameters:
          name: SmokeTest_1
          tag: ci_1
      - template: smoke-test.yml
        parameters:
          name: SmokeTest_2
          tag: ci_2
      - template: smoke-test.yml
        parameters:
          name: SmokeTest_3
          tag: ci_3
      - template: smoke-test.yml
        parameters:
          name: SmokeTest_RLC
          tag: ci_rlc

      - job: TypeSpec_Smoke_Test
        dependsOn: Build
        variables:
          - template: globals.yml
        strategy:
          matrix:
            Linux_Node20:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-20.04"
              NodeTestVersion: "20.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - script: node $(Build.SourcesDirectory)/common/scripts/install-run-rushx.js smoke-test
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-test
            displayName: "Generate Code From TypeSpec"
          - script: npm run check:tree
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-test
            displayName: "Check git Tree"

      - job: TypeSpec_Environment_Check
        dependsOn: Build
        variables:
          - template: globals.yml
        strategy:
          matrix:
            Windows_Latest:
              Pool:
              OSVmImage: ${{ parameters.Windows_Latest }}
              NodeTestVersion: "20.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - script: node $(Build.SourcesDirectory)/common/scripts/install-run-rushx.js smoke-test:contoso && node $(Build.SourcesDirectory)/common/scripts/install-run-rushx.js smoke-test:todo
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-test
            displayName: "Generate Contoso Code From TypeSpec"

      - job: Spector_Standard_Test
        dependsOn: Build
        variables:
          - template: globals.yml
        strategy:
          matrix:
            macOS_Node20:
              Pool:
              OSVmImage: "macOS-latest"
              NodeTestVersion: "20.x"
            Linux_Node20:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-20.04"
              NodeTestVersion: "20.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - script: npm run check-format
            workingDirectory: $(Build.SourcesDirectory)/packages/rlc-common
            displayName: "Check format for rlc common lib"
          - script: npm run lint
            workingDirectory: $(Build.SourcesDirectory)/packages/rlc-common
            displayName: "Lint check for rlc common lib"
          - script: npm run test
            workingDirectory: $(Build.SourcesDirectory)/packages/rlc-common
            displayName: "Run test cases for rlc common lib"
          - script: npm run lint
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            displayName: "Lint check for TypeSpec emitter"
          - script: npm run check-format
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            displayName: "Format check for TypeSpec emitter"
          - script: npm run test:standard
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            displayName: "Generate standard Test Clients from Spector"
          - script: npm run check:tree
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            displayName: "Check git Tree"
          - script: npx tsp-spector check-coverage ./node_modules/@typespec/http-specs/specs --coverageFiles [$(TypeSpec_TESTSERVER_COVERAGE_RLC_STANDARD_REPORT)]
            displayName: "Check Coverage RLC Standard"
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            condition: eq(variables['Agent.OS'], 'Linux')
            continueOnError: true
          - script: npx tsp-spector check-coverage ./node_modules/@typespec/http-specs/specs --coverageFiles [$(TypeSpec_TESTSERVER_COVERAGE_MODULAR_STANDARD_REPORT)]
            displayName: "Check Coverage Modular Standard"
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            condition: eq(variables['Agent.OS'], 'Linux')
            continueOnError: true
          - publish: $(TypeSpec_TESTSERVER_COVERAGE_MODULAR_STANDARD_REPORT)
            artifact: ModularStandardCoverageReport
            displayName: "Publish modular standard coverage report"
            condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'), eq( variables['Agent.OS'], 'Linux'))
          - publish: $(TypeSpec_TESTSERVER_COVERAGE_RLC_STANDARD_REPORT)
            artifact: RLCStandardCoverageReport
            displayName: "Publish rlc standard coverage report"
            condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'), eq( variables['Agent.OS'], 'Windows'))
          - ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))}}:
              - task: AzureCLI@2
                displayName: "Upload to TypeSpec Coverage Standard Report"
                inputs:
                  azureSubscription: "TypeSpec Storage"
                  scriptType: "bash"
                  scriptLocation: "inlineScript"
                  workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
                  inlineScript: |
                    npx tsp-spector upload-coverage --coverageFile $(TypeSpec_TESTSERVER_COVERAGE_MODULAR_STANDARD_REPORT) --generatorName @azure-tools/typespec-ts-modular --storageAccountName typespec --containerName=coverages --generatorVersion $(node -p -e "require('./package.json').version") --generatorMode standard
                    npx tsp-spector upload-coverage --coverageFile $(TypeSpec_TESTSERVER_COVERAGE_RLC_STANDARD_REPORT) --generatorName @azure-tools/typespec-ts-rlc --storageAccountName typespec --containerName=coverages --generatorVersion $(node -p -e "require('./package.json').version") --generatorMode standard

      - job: Spector_Azure_Test
        dependsOn: Build
        variables:
          - template: globals.yml
        strategy:
          matrix:
            macOS_Node20:
              Pool:
              OSVmImage: "macOS-latest"
              NodeTestVersion: "20.x"
            Linux_Node20:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-20.04"
              NodeTestVersion: "20.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - script: npm run test:azure
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            displayName: "Generate Azure Test Clients from Spector"
          - script: npm run check:tree
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            displayName: "Check git Tree"
          - script: npx tsp-spector check-coverage ./node_modules/@azure-tools/azure-http-specs/specs ./node_modules/@typespec/http-specs/specs --coverageFiles [$(TypeSpec_TESTSERVER_COVERAGE_MODULAR_AZURE_REPORT)]
            displayName: "Check Coverage Modular azure"
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            condition: eq(variables['Agent.OS'], 'Linux')
            continueOnError: true
          - script: npx tsp-spector check-coverage ./node_modules/@azure-tools/azure-http-specs/specs ./node_modules/@typespec/http-specs/specs --coverageFiles [$(TypeSpec_TESTSERVER_COVERAGE_RLC_AZURE_REPORT)]
            displayName: "Check Coverage RLC Azure"
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            condition: eq(variables['Agent.OS'], 'Linux')
            continueOnError: true
          - publish: $(TypeSpec_TESTSERVER_COVERAGE_MODULAR_AZURE_REPORT)
            artifact: ModularAzureCoverageReport
            displayName: "Publish modular azure coverage report"
            condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'), eq( variables['Agent.OS'], 'Linux'))
          - publish: $(TypeSpec_TESTSERVER_COVERAGE_RLC_AZURE_REPORT)
            artifact: rlcAzureCoverageReport
            displayName: "Publish RLC azure coverage report"
            condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'), eq( variables['Agent.OS'], 'Windows'))
          - ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))}}:
              - task: AzureCLI@2
                displayName: "Upload to TypeSpec Coverage Report"
                inputs:
                  azureSubscription: "TypeSpec Storage"
                  scriptType: "bash"
                  scriptLocation: "inlineScript"
                  workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
                  inlineScript: |
                    npx tsp-spector upload-coverage --coverageFile $(TypeSpec_TESTSERVER_COVERAGE_MODULAR_AZURE_REPORT) --generatorName @azure-tools/typespec-ts-modular --storageAccountName typespec --containerName=coverages --generatorVersion $(node -p -e "require('./package.json').version") --generatorMode azure
                    npx tsp-spector upload-coverage --coverageFile $(TypeSpec_TESTSERVER_COVERAGE_RLC_AZURE_REPORT) --generatorName @azure-tools/typespec-ts-rlc --storageAccountName typespec --containerName=coverages --generatorVersion $(node -p -e "require('./package.json').version") --generatorMode azure
  # The Prerelease and Release stages are conditioned on whether we are building a pull request and the branch.
  - ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'), eq(parameters.IncludeRelease,true))}}:
      - template: release.yml
        parameters:
          DependsOn: BuildStage
