trigger:
  - v6

parameters:
  - name: LinuxPool
    type: string
    default: azsdk-pool-mms-ubuntu-2004-general
  - name: IncludeRelease
    type: boolean
    default: true
  - name: OSVmImage
    type: string
    default: ubuntu-20.04

variables:
  AUTOREST_TESTSERVER_COVERAGE_DIRECTORY: "$(Build.SourcesDirectory)/packages/autorest.typescript/coverage/"
  TypeSpec_TESTSERVER_COVERAGE_RLC_REPORT: "$(Build.SourcesDirectory)/packages/typespec-ts/coverage/cadl-ranch-coverage-typescript-rlc.json"
  TypeSpec_TESTSERVER_COVERAGE_MODULAR_REPORT: "$(Build.SourcesDirectory)/packages/typespec-ts/coverage/cadl-ranch-coverage-typescript-modular.json"

pool:
  vmImage: ubuntu-20.04

stages:
  - stage: BuildStage
    jobs:
      - job: Build
        steps:
          - template: build.yml
          - script: |
              export MAIN_VERSION=$(node -p -e "require('./package.json').version")
              echo "##vso[task.setvariable variable=MAIN_VERSION;isOutput=true;]MAIN_VERSION"
            name: SetAutorestTypescriptMainVersion
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
          - script: |
              export MAIN_VERSION=$(node -p -e "require('./package.json').version")
              echo "##vso[task.setvariable variable=MAIN_VERSION;isOutput=true;]MAIN_VERSION"
            name: SetTypeSpecTSMainVersion
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
          - script: |
              export MAIN_VERSION=$(node -p -e "require('./package.json').version")
              echo "##vso[task.setvariable variable=MAIN_VERSION;isOutput=true;]MAIN_VERSION"
            name: SetRLCCommonMainVersion
            workingDirectory: $(Build.SourcesDirectory)/packages/rlc-common
          - script: |
              export DEV_VERSION=$(node -p -e "require('./package.json').version.replace(/-beta.*/g, '') + '-alpha'").$(Build.BuildNumber)
              echo "##vso[task.setvariable variable=DEV_VERSION;isOutput=true;]$DEV_VERSION"
              npm version --no-git-tag-version $DEV_VERSION
            condition: or(eq(variables['SetDevVersion'], 'true'), and(eq(variables['SetDevVersion'], ''), eq(variables['Build.Reason'],'Schedule'), eq(variables['System.TeamProject'], 'internal')))
            name: SetAutorestTypescriptDevVersion
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
          - script: |
              export DEV_VERSION=$(node -p -e "require('./package.json').version.replace(/-beta.*/g, '') + '-alpha'").$(Build.BuildNumber)
              echo "##vso[task.setvariable variable=DEV_VERSION;isOutput=true;]$DEV_VERSION"
              npm version --no-git-tag-version $DEV_VERSION
            condition: or(eq(variables['SetDevVersion'], 'true'), and(eq(variables['SetDevVersion'], ''), eq(variables['Build.Reason'],'Schedule'), eq(variables['System.TeamProject'], 'internal')))
            name: SetTypeSpecTSDevVersion
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
          - script: |
              export DEV_VERSION=$(node -p -e "require('./package.json').version.replace(/-beta.*/g, '') + '-alpha'").$(Build.BuildNumber)
              echo "##vso[task.setvariable variable=DEV_VERSION;isOutput=true;]$DEV_VERSION"
              npm version --no-git-tag-version $DEV_VERSION
            condition: or(eq(variables['SetDevVersion'], 'true'), and(eq(variables['SetDevVersion'], ''), eq(variables['Build.Reason'],'Schedule'), eq(variables['System.TeamProject'], 'internal')))
            name: SetRLCCommonDevVersion
            workingDirectory: $(Build.SourcesDirectory)/packages/rlc-common
          - script: |
              export TAR_NAME=$(node ../../common/scripts/install-run-rush-pnpm.js pack -q)
              echo $TAR_NAME
              echo "##vso[task.setvariable variable=TAR_NAME;isOutput=true;]$TAR_NAME"
            name: PackAutorestTypescriptArtifacts
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
          - script: |
              export TAR_NAME=$(node ../../common/scripts/install-run-rush-pnpm.js pack -q)
              echo $TAR_NAME
              echo "##vso[task.setvariable variable=TAR_NAME;isOutput=true;]$TAR_NAME"
            name: PackTypeSpecTSArtifacts
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
          - script: |
              export TAR_NAME=$(node ../../common/scripts/install-run-rush-pnpm.js pack -q)
              echo $TAR_NAME
              echo "##vso[task.setvariable variable=TAR_NAME;isOutput=true;]$TAR_NAME"
            name: PackRLCCommonArtifacts
            workingDirectory: $(Build.SourcesDirectory)/packages/rlc-common
          - task: CopyFiles@2
            inputs:
              contents: "$(Build.SourcesDirectory)/packages/*/*.tgz"
              targetFolder: $(Build.ArtifactStagingDirectory)
              flattenFolders: true
            displayName: "Copy packages"

          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            displayName: "Publish artifacts"
            inputs:
              artifactName: packages
              path: $(Build.ArtifactStagingDirectory)
      - job: HLC_Generation
        dependsOn: Build
        variables:
          - template: globals.yml
        strategy:
          matrix:
            macOS_Node16:
              Pool:
              OSVmImage: "macOS-latest"
              NodeTestVersion: "16.x"
            Linux_Node16:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-20.04"
              NodeTestVersion: "16.x"
            Windows_Latest:
              Pool:
              OSVmImage: "Windows-latest"
              NodeTestVersion: "16.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - script: npm run generate-swaggers
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Generate HLC Test Clients"
          - script: npm run check:tree
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Check git Tree"

      - job: RLC_Generation
        dependsOn: Build
        variables:
          - template: globals.yml
        strategy:
          matrix:
            macOS_Node16:
              Pool:
              OSVmImage: "macOS-latest"
              NodeTestVersion: "16.x"
            Linux_Node16:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-20.04"
              NodeTestVersion: "16.x"
            Windows_Latest:
              Pool:
              OSVmImage: "Windows-latest"
              NodeTestVersion: "16.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - script: npm run rlc-generate-swaggers
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Generate RLC Test Clients"
          - script: npm run generate-version-tolerance
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Generate RLC version tolerance initial version"
          - script: npm run generate-version-tolerance:tests
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Generate RLC version tolerance update version"
          - script: npm run check:tree
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Check git Tree"
      - job: Autorest_Typescript_Test
        dependsOn: Build
        variables:
          - template: globals.yml
        strategy:
          matrix:
            macOS_Node16:
              Pool:
              OSVmImage: "macOS-latest"
              NodeTestVersion: "16.x"
            Linux_Node16:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-20.04"
              NodeTestVersion: "16.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - task: NodeTool@0
            inputs:
              versionSpec: $(NodeTestVersion)
            displayName: "Use Node $(NodeTestVersion)"
          - script: npm run start-test-server:v2 &
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Start Test Server"
          - script: npm run test:node:alone
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Run Node Tests"
          - script: npm run test:browser:alone
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Run Browser Tests"
          - script: npm run stop-test-server
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Stop Test Server"
          - script: npm run check:tree
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript
            displayName: "Check git Tree"
          - script: |
              npm run coverage -- publish --repo=$(Build.Repository.Name) --ref=$(Build.SourceBranch) --githubToken=$(github-token) --azStorageAccount=$(storage-coverage-user) --azStorageAccessKey=$(storage-coverage-pass) --coverageDirectory=$(AUTOREST_TESTSERVER_COVERAGE_DIRECTORY)
            workingDirectory: $(Build.SourcesDirectory)/packages/autorest.typescript/node_modules/@microsoft.azure/autorest.testserver
            displayName: "Upload Coverage Report"
            condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))

      # We are splitting smoke test validation in buckets to help reduce the overall run time by running each bucket in parallel
      - template: smoke-test.yml
        parameters:
          name: SmokeTest_1
          tag: ci_1
      - template: smoke-test.yml
        parameters:
          name: SmokeTest_2
          tag: ci_2
      - template: smoke-test.yml
        parameters:
          name: SmokeTest_3
          tag: ci_3
      - template: smoke-test.yml
        parameters:
          name: SmokeTest_RLC
          tag: ci_rlc

      - job: TypeSpec_Smoke_Test
        dependsOn: Build
        variables:
          - template: globals.yml
        strategy:
          matrix:
            macOS_Node16:
              Pool:
              OSVmImage: "macOS-latest"
              NodeTestVersion: "16.x"
            Linux_Node16:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-20.04"
              NodeTestVersion: "16.x"
            Windows_Latest:
              Pool:
              OSVmImage: "Windows-latest"
              NodeTestVersion: "16.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - script: node $(Build.SourcesDirectory)/common/scripts/install-run-rushx.js smoke-test
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-test
            displayName: "Generate Code From TypeSpec"
          - script: npm run check:tree
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-test
            displayName: "Check git Tree"

      - job: Cadl_Ranch_Test
        dependsOn: Build
        variables:
          - template: globals.yml
        strategy:
          matrix:
            macOS_Node16:
              Pool:
              OSVmImage: "macOS-latest"
              NodeTestVersion: "16.x"
            Linux_Node16:
              Pool: ${{ parameters.LinuxPool }}
              OSVmImage: "ubuntu-20.04"
              NodeTestVersion: "16.x"
            # Windows_Latest:
            #   Pool:
            #   OSVmImage: "Windows-latest"
            #   NodeTestVersion: "16.x"
        pool:
          name: $[coalesce(variables['Pool'], '')]
          vmImage: $[coalesce(variables['OSVmImage'], '')]
        steps:
          - template: build.yml
          - script: npm run check-format
            workingDirectory: $(Build.SourcesDirectory)/packages/rlc-common
            displayName: "Check format for rlc common lib"
          - script: npm run lint
            workingDirectory: $(Build.SourcesDirectory)/packages/rlc-common
            displayName: "Lint check for rlc common lib"
          - script: npm run test
            workingDirectory: $(Build.SourcesDirectory)/packages/rlc-common
            displayName: "Run test cases for rlc common lib"
          - script: npm run lint
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            displayName: "Lint check for TypeSpec emitter"
          - script: npm run check-format
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            displayName: "Format check for TypeSpec emitter"
          - script: npm run test
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            displayName: "Generate RLC Test Clients from Cadl-ranch"
          - script: npm run check:tree
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            displayName: "Check git Tree"
          - script: npx cadl-ranch check-coverage ./node_modules/@azure-tools/cadl-ranch-specs/http --coverageFiles $(TypeSpec_TESTSERVER_COVERAGE_RLC_REPORT) --coverageFiles $(TypeSpec_TESTSERVER_COVERAGE_MODULAR_REPORT)
            displayName: "Check Coverage"
            workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
            continueOnError: true
          - publish: $(TypeSpec_TESTSERVER_COVERAGE_RLC_REPORT)
            artifact: RLCCoverageReport
            displayName: "Publish rlc coverage report"
            condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'), eq( variables['Agent.OS'], 'Linux'))
          - publish: $(TypeSpec_TESTSERVER_COVERAGE_MODULAR_REPORT)
            artifact: ModularCoverageReport
            displayName: "Publish modular coverage report"
            condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'), eq( variables['Agent.OS'], 'Linux'))
          - ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))}}:
              - task: AzureCLI@2
                displayName: "Upload to Cadl Ranch Coverage Report"
                inputs:
                  azureSubscription: "Cadl Ranch Storage"
                  scriptType: "bash"
                  scriptLocation: "inlineScript"
                  workingDirectory: $(Build.SourcesDirectory)/packages/typespec-ts
                  inlineScript: |
                    npx cadl-ranch upload-coverage --coverageFile $(TypeSpec_TESTSERVER_COVERAGE_RLC_REPORT) --generatorName typescript/rlc --storageAccountName azuresdkcadlranch --generatorVersion $(node -p -e "require('./package.json').version")
                    npx cadl-ranch upload-coverage --coverageFile $(TypeSpec_TESTSERVER_COVERAGE_MODULAR_REPORT) --generatorName typescript/modular --storageAccountName azuresdkcadlranch --generatorVersion $(node -p -e "require('./package.json').version")

  # The Prerelease and Release stages are conditioned on whether we are building a pull request and the branch.
  - ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'), eq(parameters.IncludeRelease,true))}}:
      - template: release.yml
        parameters:
          DependsOn: BuildStage
