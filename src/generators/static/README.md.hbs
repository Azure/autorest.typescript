# {{ clientDescriptiveName }} library for JavaScript

This package contains an isomorphic SDK (runs both in Node.js and in browsers) for {{ clientDescriptiveName }}.

{{ description }}

{{#if packageSourceURL}}
[Source code]({{ packageSourceURL }}) |
{{/if}}
{{#if packageNPMURL}}
[Package (NPM)]({{ packageNPMURL }}) |
{{/if}}
{{#if apiRefURL}}
[API reference documentation]({{ apiRefURL }}) |
{{/if}}
{{#if samplesURL}}
[Samples]({{samplesURL}})
{{/if}}

## Getting started

### Currently supported environments

- [LTS versions of Node.js](https://nodejs.org/about/releases/)
- Latest versions of Safari, Chrome, Edge and Firefox.

{{#if azure}}
### Prerequisites

- An [Azure subscription][azure_sub].
{{/if}}

### Install the `{{ clientPackageName }}` package

Install the {{ clientDescriptiveName }} library for JavaScript with `npm`:

```bash
npm install {{ clientPackageName }}
```

{{#if azure}}
{{#if addCredentials}}
### Create and authenticate a `{{ clientClassName}}`

To create a client object to access the {{ serviceName }} API, you will need the `endpoint` of your {{ serviceName }} resource and a `credential`. The {{ clientDescriptiveName }} can use Azure Active Directory credentials to authenticate.
You can find the endpoint for your {{ serviceName }} resource in the [Azure Portal][azure_portal].

#### Using an Azure Active Directory Credential

You can authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:

```bash
npm install @azure/identity
```

You will also need to register a new AAD application and grant access to {{ serviceName}} by assigning the suitable role to your service principal (note: roles such as `"Owner"` will not grant the necessary permissions).
Set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.

```javascript
const { {{ clientClassName }} } = require("{{ clientPackageName }}");
const { DefaultAzureCredential } = require("@azure/identity");
const client = new {{ clientClassName }}("<endpoint>", new DefaultAzureCredential());
```
{{/if}}{{/if}}
## Key concepts

### {{ clientClassName }}

`{{ clientClassName }}` is the primary interface for developers using the {{ clientDescriptiveName }} library. Explore the methods on this client object to understand the different features of the {{ serviceName }} service that you can access.

{{#if azure}}
## Troubleshooting

### Logging

Enabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:

```javascript
import { setLogLevel } from "@azure/logger";
setLogLevel("info");
```

For more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs]({{ repoURL }}/tree/master/sdk/core/logger).

{{#if samplesURL}}
## Next steps

Please take a look at the [samples]({{ samplesURL }}) directory for detailed examples on how to use this library.
{{/if}}

## Contributing

If you'd like to contribute to this library, please read the [contributing guide]({{ contributingGuideURL }}) to learn more about how to build and test the code.

## Related projects

- [{{ projectName }}]({{ repoURL }})

{{#if impressionURL}}![Impressions]({{ impressionURL }})
{{/if}}

[azure_cli]: https://docs.microsoft.com/cli/azure
[azure_sub]: https://azure.microsoft.com/free/
[azure_sub]: https://azure.microsoft.com/free/
[azure_portal]: https://portal.azure.com
{{#if identityPackageURL}}[azure_identity]: {{ identityPackageURL }}
{{/if}}[defaultazurecredential]: {{ identityPackageURL }}#defaultazurecredential
{{/if}}