@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.TypeScript.Azure.Model
@inherits AutoRest.Core.Template<MethodTSa>

@if (!Model.IsLongRunningOperation)
{
@(Model.GenerateWithHttpOperationResponseMethod(EmptyLine))
}
else
{
<text>
@EmptyLine
@(Model.GenerateWithHttpOperationResponseMethodComment())
@(Model.Name.ToCamelCase())@(Model.ResponseMethodSuffix)(@(Model.MethodParameterDeclarationTS(true, true))): Promise<@(Model.HttpResponseReferenceName)> {
  return this.begin@(Model.Name.ToPascalCase())@(Model.ResponseMethodSuffix)(@(Model.MethodParameterDeclaration))
    .then(initialResult => @(Model.ClientReference).getLongRunningOperationResult(initialResult, options))
    .then(operationRes => {
@if (Model.ReturnType.Body != null)
{
@:      let httpRequest = operationRes.request;
}
      @EmptyLine
      // Deserialize Response
@if (Model.ReturnType.Body != null)
{
@:      @(Model.DeserializeResponse(Model.ReturnType.Body))
}
@if (Model.ReturnType.Body != null && Model.DefaultResponse.Body != null && !Model.Responses.Any())
{
@:      @(Model.DeserializeResponse(Model.DefaultResponse.Body))
}
      return operationRes;
@if (Model.HasCustomHttpResponseType)
{
@:    }) as Promise<@(Model.HttpResponseReferenceName)>;
}
else
{
@:    });
}
}
</text>
}