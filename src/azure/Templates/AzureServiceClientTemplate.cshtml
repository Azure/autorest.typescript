@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.TypeScript.vanilla.Templates
@using AutoRest.TypeScript
@using AutoRest.TypeScript.Azure.Model
@inherits AutoRest.Core.Template<CodeModelTSa>
/*
@Header(" * ")
 */
@EmptyLine
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as msRest from "ms-rest-js";
@{
bool usesAzureOptionsType = Model.OptionalParameterTypeForClientConstructor == "AzureServiceClientOptions";
if (usesAzureOptionsType)
{
@:import * as msRestAzure from "ms-rest-azure-js";
}
}
import { @(Model.ContextName) } from "./@(Model.ContextName.ToCamelCase())";
@if (Model.MethodGroupModels.Any()) {
@:import * as operations from "./operations";
}
@if (Model.MethodTemplateModels.Any())
{
@:const WebResource = msRest.WebResource;
}
@EmptyLine
@{var requiredParameters = Model.Properties.Where(p => p.IsRequired && !p.IsConstant && string.IsNullOrEmpty(p.DefaultValue));}
@{var optionalParameters = Model.Properties.Where(p => (!p.IsRequired || p.IsRequired && !string.IsNullOrEmpty(p.DefaultValue)) && !p.IsConstant && !p.Name.EqualsIgnoreCase("apiVersion"));}
@EmptyLine
class @(Model.Name) extends @(Model.ContextName) {
@{ var serializerArgs = Model.ShouldGenerateXmlSerialization ? "Mappers, true" : "Mappers"; }
  serializer = new msRest.Serializer(@serializerArgs);
@if (Model.MethodGroupModels.Any())
{
  @EmptyLine
  @:// Operation groups
foreach (var methodGroup in Model.MethodGroupModels)
{
  @:@(methodGroup.NameForProperty): operations.@(methodGroup.TypeName);
}
}
  @EmptyLine
  /**
   * @@class
   * Initializes a new instance of the @Model.Name class.
   * @@constructor
   *
@foreach (var param in requiredParameters)
{
   @:* @@param {@param.ModelType.Name.ToCamelCase()} @param.Name - @param.Documentation
   @:*
}
@if(!Model.IsCustomBaseUri)
{
   @:* @@param {string} [baseUri] - The base URI of the service.
   @:*
}
   * @@param {object} [options] - The parameter options
   *
   * @@param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @@param {object} [options.requestOptions] - The request options. Detailed info can be found at
   * {@@link https://github.github.io/fetch/#Request Options doc}
   *
   * @@param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
@foreach (var param in optionalParameters)
{
   @:* @@param {@param.ModelType.Name.ToCamelCase()} [options.@param.Name] - @param.Documentation
   @:*
}
   */
@{ var clientOptionType = Model.OptionalParameterTypeForClientConstructor == "AzureServiceClientOptions" ? "msRestAzure.AzureServiceClientOptions" : Model.OptionalParameterTypeForClientConstructor;}
  constructor(@(!string.IsNullOrEmpty(Model.RequiredConstructorParametersTS) ? Model.RequiredConstructorParametersTS + ", " : "")options?: @clientOptionType) {
    super(@(!string.IsNullOrEmpty(Model.RequiredConstructorParameters) ? Model.RequiredConstructorParameters + ", " : "")options);
  @foreach (var methodGroup in Model.MethodGroupModels)
  {
    @:this.@(methodGroup.NameForProperty) = new operations.@(methodGroup.TypeName)(this);
  }
  }
@foreach (var method in Model.MethodTemplateModels)
{
  @:// methods on the client.
  @EmptyLine
  @:@(Include(new MethodTemplate(), method))
}
@foreach (var method in Model.MethodWrappableTemplateModels)
{
  @EmptyLine
  @:@(Include(new MethodCallbackWrapperTemplate(), method))
}
}
@EmptyLine
export { @(Model.Name), Models as @(Model.ClientPrefix)Models, Mappers as @(Model.ClientPrefix)Mappers };
