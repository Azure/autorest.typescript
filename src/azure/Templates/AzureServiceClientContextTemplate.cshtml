@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.TypeScript.Azure.Model
@inherits AutoRest.Core.Template<CodeModelTSa>
/*
@Header(" * ")
 */
@EmptyLine
@{
bool usesCustomOptionsType = Model.OptionalParameterTypeForClientConstructor != "AzureServiceClientOptions";
if (usesCustomOptionsType)
{
@:import * as Models from "./models";
}
}
import * as msRest from "@@azure/ms-rest-js";
import * as msRestAzure from "@@azure/ms-rest-azure-js";
@EmptyLine
const packageName = "@Model.Settings.PackageName";
const packageVersion = "@Model.Settings.PackageVersion";
@{var requiredParameters = Model.Properties.Where(p => p.IsRequired && !p.IsConstant && string.IsNullOrEmpty(p.DefaultValue));}
@{var optionalParameters = Model.Properties.Where(p => (!p.IsRequired || p.IsRequired && !string.IsNullOrEmpty(p.DefaultValue)) && !p.IsConstant && !p.Name.EqualsIgnoreCase("apiVersion"));}
@EmptyLine
export class @(Model.ContextName) extends msRestAzure.AzureServiceClient {
  @(Model.GenerateClassProperties(EmptyLine))
  @EmptyLine
  @(Model.GenerateConstructorComment(Model.Name))
@{ var clientOptionType = Model.OptionalParameterTypeForClientConstructor == "AzureServiceClientOptions" ? "msRestAzure.AzureServiceClientOptions" : Model.OptionalParameterTypeForClientConstructor;}
  constructor(@(!string.IsNullOrEmpty(Model.RequiredConstructorParametersTS) ? Model.RequiredConstructorParametersTS + ", " : "")options?: @clientOptionType) {
@foreach (var param in requiredParameters)
{
  @:  if (@(param.Name) == undefined) {
  @:    throw new Error('\'@(param.Name)\' cannot be null.');
  @:  }
}
    @EmptyLine
    if (!options) {
      options = {};
    }

    if(!options.userAgent) {
      const defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;
    }
    @EmptyLine
    super(@(requiredParameters.Any(p => p.ModelType.IsPrimaryType(KnownPrimaryType.Credentials)) ? "credentials" : "undefined"), options);
    @EmptyLine
@foreach (var property in Model.Properties.Where(p => p.DefaultValue != null && p.Name != "generateClientRequestId"))
{
    @:this.@(property.Name) = @(property.DefaultValue);
}

    @Model.GenerateBaseUri()
@if (!string.IsNullOrEmpty(Model.RequestContentType))
{
<text>
    this.requestContentType = "@(Model.RequestContentType)";
</text>
}

@foreach (var param in requiredParameters)
{
  @:  this.@(param.Name) = @(param.Name);
}
  @EmptyLine
  @foreach (var property in optionalParameters.Where(p => p.Name != "generateClientRequestId"))
  {
    @:if(options.@(property.Name) !== null && options.@(property.Name) !== undefined) {
    @:  this.@(property.Name) = options.@(property.Name);
    @:}
  }
  }
}
