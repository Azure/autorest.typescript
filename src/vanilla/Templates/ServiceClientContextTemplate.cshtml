@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@inherits AutoRest.Core.Template<AutoRest.TypeScript.Model.CodeModelTS>
/*
@Header(" * ")
 */
@EmptyLine
import * as msRest from "@@azure/ms-rest-js";
@{
bool usesCustomOptionsType = Model.OptionalParameterTypeForClientConstructor != "ServiceClientOptions";
if (usesCustomOptionsType)
{
@:import * as Models from "./models";
}
}
@EmptyLine

const packageName = "@Model.Settings.PackageName";
const packageVersion = "@Model.Settings.PackageVersion";
@EmptyLine
export class @(Model.ContextName) extends msRest.ServiceClient {
  @(Model.GenerateClassProperties(EmptyLine))
@EmptyLine
  @(Model.GenerateConstructorComment(Model.ContextName))
@{ var clientOptionType = Model.OptionalParameterTypeForClientConstructor == "ServiceClientOptions" ? "msRest.ServiceClientOptions" : Model.OptionalParameterTypeForClientConstructor;}
  constructor(@(!string.IsNullOrEmpty(Model.RequiredConstructorParametersTS) ? Model.RequiredConstructorParametersTS + ", " : "")options?: @clientOptionType) {
@foreach (var param in Model.RequiredParameters)
{
<text>
    if (@(param.Name) === null || @(param.Name) === undefined) {
      throw new Error('\'@(param.Name)\' cannot be null.');
    }
</text>
}
@EmptyLine
    if (!options) {
      options = {};
    }
@EmptyLine
    if (!options.userAgent) {
      const defaultUserAgent = msRest.getDefaultUserAgentValue();
      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;
    }
    @(Model.GenerateCustomServiceClientOptions(@EmptyLine))
@EmptyLine
    super(@(Model.RequiredParameters.Any(p => p.ModelType.IsPrimaryType(KnownPrimaryType.Credentials)) ? "credentials" : "undefined"), options);
    @EmptyLine
@foreach (var property in Model.Properties.Where(p => p.DefaultValue != null))
{
<text>
    this.@(property.Name) = @(property.DefaultValue);
</text>
}
    @Model.GenerateBaseUri()
@if (!string.IsNullOrEmpty(Model.RequestContentType))
{
<text>
    this.requestContentType = "@(Model.RequestContentType)";
</text>
}

@foreach (var param in Model.RequiredParameters)
{
<text>
    this.@(param.Name) = @(param.Name);
</text>
}
@if (Model.OptionalParameters.Where(p => p.Name != "generatedClientRequestId").Any())
{
@EmptyLine
}
@foreach (var property in Model.OptionalParameters.Where(p => p.Name != "generatedClientRequestId"))
{
<text>
    if(options.@(property.Name) !== null && options.@(property.Name) !== undefined) {
      this.@(property.Name) = options.@(property.Name);
    }
</text>
}
  }
}
