@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.TypeScript
@using AutoRest.TypeScript.vanilla.Templates
@inherits AutoRest.Core.Template<AutoRest.TypeScript.Model.CodeModelTS>
/*
@Header(" * ")
 */
@EmptyLine
import * as msRest from "ms-rest-js";
@{
bool usesCustomOptionsType = Model.OptionalParameterTypeForClientConstructor != "ServiceClientOptions";
if (usesCustomOptionsType)
{
@:import * as Models from "./models";
}
}
@EmptyLine

const packageName = "@Model.PackageName";
const packageVersion = "@Model.PackageVersion";
@{var requiredParameters = Model.Properties.Where(p => p.IsRequired && !p.IsConstant && string.IsNullOrEmpty(p.DefaultValue));}
@{var optionalParameters = Model.Properties.Where(p => (!p.IsRequired || p.IsRequired && !string.IsNullOrEmpty(p.DefaultValue)) && !p.IsConstant);}
@EmptyLine
export class @(Model.ContextName) extends msRest.ServiceClient {
@foreach (var property in Model.Properties)
{
    if (property.IsRequired)
    {
  @:@(property.Name): @property.ModelType.TSType(false);
    }
    else
    {
  @:@(property.Name)?: @property.ModelType.TSType(false);
    }
}
@EmptyLine
  /**
   * @@class
   * Initializes a new instance of the @(Model.ContextName) class.
   * @@constructor
   *
@foreach (var param in requiredParameters)
{
<text>
   * @@param {@param.ModelType.Name.ToCamelCase()} @param.Name - @param.Documentation
   *
</text>
}
@if (!Model.IsCustomBaseUri)
{
<text>
   * @@param {string} [baseUri] - The base URI of the service.
   *
</text>
}
   * @@param {object} [options] - The parameter options
   *
   * @@param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @@param {object} [options.requestOptions] - The request options. Detailed info can be found at
   * {@@link https://github.github.io/fetch/#Request Options doc}
   *
   * @@param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
@foreach (var param in optionalParameters)
{
<text>
   * @@param {@param.ModelType.Name.ToCamelCase()} [options.@param.Name] - @param.Documentation
   *
</text>
}
   */
@{ var clientOptionType = Model.OptionalParameterTypeForClientConstructor == "ServiceClientOptions" ? "msRest.ServiceClientOptions" : Model.OptionalParameterTypeForClientConstructor;}
  constructor(@(!string.IsNullOrEmpty(Model.RequiredConstructorParametersTS) ? Model.RequiredConstructorParametersTS + ", " : "")options?: @clientOptionType) {
@foreach (var param in requiredParameters)
{
<text>
    if (@(param.Name) === null || @(param.Name) === undefined) {
      throw new Error('\'@(param.Name)\' cannot be null.');
    }
</text>
}
@EmptyLine
    if (!options) {
      options = {};
    }
@EmptyLine
    super(@(requiredParameters.Any(p => p.ModelType.IsPrimaryType(KnownPrimaryType.Credentials)) ? "credentials" : "undefined"), options);
    @EmptyLine
@foreach (var property in Model.Properties.Where(p => p.DefaultValue != null))
{
<text>
    this.@(property.Name) = @(property.DefaultValue);
</text>
}

@if (!Model.IsCustomBaseUri)
{
<text>
    this.baseUri = baseUri as string;

    if (!this.baseUri) {
      this.baseUri = "@Model.SchemeHostAndPort";
    }
</text>
}
else
{
<text>
    this.baseUri = "@Model.SchemeHostAndPort";
</text>
}

@if (!string.IsNullOrEmpty(Model.RequestContentType))
{
<text>
    this.requestContentType = "@(Model.RequestContentType)";
</text>
}

@foreach (var param in requiredParameters)
{
<text>
    this.@(param.Name) = @(param.Name);
</text>
}
@EmptyLine
    this.addUserAgentInfo(`${packageName}/${packageVersion}`);
@foreach (var property in optionalParameters.Where(p => p.Name != "generatedClientRequestId"))
{
<text>
    if(options.@(property.Name) !== null && options.@(property.Name) !== undefined) {
      this.@(property.Name) = options.@(property.Name);
    }
</text>
}
  }
}
