@using System.Linq
@using AutoRest.TypeScript.vanilla.Templates
@using AutoRest.Core.Utilities
@inherits AutoRest.Core.Template<AutoRest.TypeScript.Model.MethodGroupTS>
/*
@Header(" * ")
 */
@EmptyLine
import * as msRest from "ms-rest-js";
@if (Model.ContainsCompositeOrEnumTypeInParametersOrReturnType())
{
@:import * as Models from "../models";
}
import * as Mappers from "../models/@(Model.MappersModuleName)";
import { @(Model.CodeModelTS.ContextName) } from "../@(Model.CodeModelTS.ContextName.ToCamelCase())";
@EmptyLine
const WebResource = msRest.WebResource;
@EmptyLine
/** Class representing a @(Model.TypeName). */
export class @(Model.TypeName) {
  private readonly client: @(Model.CodeModelTS.ContextName);
  @Model.SerializerPropertyDeclaration
  /**
   * Create a @Model.TypeName.
   * @@param {@Model.CodeModelTS.ContextName} client Reference to the service client.
   */
  constructor(client: @(Model.CodeModelTS.ContextName)) {
    this.client = client;
  }
@EmptyLine
@foreach (var method in Model.MethodTemplateModels)
{
  @:@(Include(new MethodTemplate(), method))
  @EmptyLine
}
@foreach (var method in Model.MethodWrappableTemplateModels)
{
  @:@(Include(new MethodCallbackWrapperTemplate(), method))
  @EmptyLine
}
}
