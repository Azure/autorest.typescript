@using System
@using System.Linq
@using System.Collections.Generic
@using AutoRest.TypeScript.Model
@using AutoRest.Core.Model
@inherits AutoRest.Core.Template<CompositeTypeTS>

@{
  var propertyList = new List<Property>(Model.InterfaceProperties);
  var propertiesAdded = new HashSet<string>();
}

@if (Model.ImmediatePolymorphicSubtypes.Any())
{
<text>
/**
 * Contains the possible cases for @(Model.Name).
 */
@Model.PolymorphicUnionDeclaration
@EmptyLine
</text>
}

/**
 * @@interface
 * An interface representing @(Model.Name).
@if (!String.IsNullOrEmpty(Model.Summary))
{
  @WrapComment(" * ", "@summary " + Model.Summary)@:
@: *
}
@if (!String.IsNullOrEmpty(Model.Documentation))
{
  @WrapComment(" * ", Model.Documentation)@:
@: *
}
@{
    if (Model.BaseModelType != null && !Model.BaseIsPolymorphic)
    {
@: * @@extends @(Model.BaseModelType.Name)
@: */
@:export interface @(Model.Name) extends @(Model.BaseModelType.Name == "RequestOptionsBase" ? "msRest.RequestOptionsBase" : Model.BaseModelType.Name.ToString()) {
    }
    else
    {
@: */
@:export interface @(Model.Name) {
    }
    for (int i = 0; i < propertyList.Count; i++)
    {
        @if (!propertiesAdded.Contains(propertyList[i].Name))
        {
            @{ propertiesAdded.Add(propertyList[i].Name); }
  @:/**
  @:@(CompositeTypeTS.ConstructPropertyDocumentation(
                  WrapComment(" * ", "@member {" + propertyList[i].ModelType.TSType(true)
                                                  + "} " + CompositeTypeTS.GetPropertyDocumentationName(propertyList[i])
                                                  + " " + CompositeTypeTS.GetPropertyDocumentationString(propertyList[i]))))
   @:*/
  @:@(@Model.PropertyTS(propertyList[i], inModelsModule: true));
        }
    }

@:}
}