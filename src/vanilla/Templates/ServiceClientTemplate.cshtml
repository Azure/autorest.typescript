@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.TypeScript.vanilla.Templates
@inherits AutoRest.Core.Template<AutoRest.TypeScript.Model.CodeModelTS>
/*
@Header(" * ")
 */
@EmptyLine
@(Model.GenerateServiceClientImports())
@{var optionalParameters = Model.Properties.Where(p => (!p.IsRequired || p.IsRequired && !string.IsNullOrEmpty(p.DefaultValue)) && !p.IsConstant);}
@EmptyLine
class @(Model.Name) extends @(Model.ContextName) {
@if (Model.MethodGroupModels.Any())
{
<text>
  // Operation groups
@foreach (var methodGroup in Model.MethodGroupModels)
{
<text>
  @(methodGroup.NameForProperty): operations.@(methodGroup.TypeName);
</text>
}
@EmptyLine
</text>
}
  /**
   * @@class
   * Initializes a new instance of the @Model.Name class.
   * @@constructor
   *
@if (!Model.IsCustomBaseUri)
{
<text>
   * @@param {string} [baseUri] - The base URI of the service.
   *
</text>
}
   * @@param {object} [options] - The parameter options
   *
   * @@param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @@param {object} [options.requestOptions] - The request options. Detailed info can be found at
   * {@@link https://github.github.io/fetch/#Request Options doc}
   *
   * @@param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
@foreach (var param in optionalParameters)
{
<text>
   * @@param {@param.ModelType.Name.ToCamelCase()} [options.@param.Name] - @param.Documentation
   *
</text>
}
   */
@{ var clientOptionType = Model.OptionalParameterTypeForClientConstructor == "ServiceClientOptions" ? "msRest.ServiceClientOptions" : Model.OptionalParameterTypeForClientConstructor;}
  constructor(@(!string.IsNullOrEmpty(Model.RequiredConstructorParametersTS) ? Model.RequiredConstructorParametersTS + ", " : "")options?: @clientOptionType) {
    super(@(!string.IsNullOrEmpty(Model.RequiredConstructorParameters) ? Model.RequiredConstructorParameters + ", " : "")options);
@foreach (var methodGroup in Model.MethodGroupModels)
{
<text>
    this.@(methodGroup.NameForProperty) = new operations.@(methodGroup.TypeName)(this);
</text>
}
  }
@foreach (var method in Model.MethodTemplateModels)
{
@:  // methods on the client.
@EmptyLine
@:  @(method.GenerateWithHttpOperationResponseMethod(EmptyLine))
}
@if (@Model.GenerateBodyMethods)
{
foreach (var method in Model.MethodWrappableTemplateModels)
{
<text>
@EmptyLine
  @(Include(new MethodCallbackWrapperTemplate(), method))
</text>
}
}
}
@EmptyLine
@(Model.GenerateOperationSpecDefinitions(EmptyLine))
@EmptyLine
@(Model.GenerateServiceClientExports())
