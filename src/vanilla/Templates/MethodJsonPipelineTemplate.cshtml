@using System.Linq;
@using AutoRest.Core.Model
@using AutoRest.TypeScript.Model
@inherits AutoRest.Core.Template<AutoRest.TypeScript.Model.MethodTS>
// Send Request
let operationRes: msRest.HttpOperationResponse;
try {
@if (Model.RequestBody != null)
{
<text>
  @(Model.ConstructRequestBodyMapper)
</text>
}
  operationRes = await client.sendOperationRequest(
    httpRequest,
    {
      arguments: {
@foreach (Parameter parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.Header))
{
<text>
        "@(parameter.Name)": @(parameter.Name),
</text>
}
      },
      customHeaders: new msRest.HttpHeaders(options && options.customHeaders)
    },
    {
      httpMethod: "@(Model.HttpMethod.ToString().ToUpper())",
@if (Model.LogicalParameters.Any(p => p.Location == ParameterLocation.Header))
{
<text>
      headerParameters: [
@foreach (ParameterTS parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.Header))
{
<text>
        {
          parameterName: "@(parameter.Name)",
@if (parameter.Name != parameter.SerializedName)
{
<text>
          headerName: "@(parameter.SerializedName)",
</text>
}
@if (parameter.OperationType != null)
{
<text>
          type: msRest.OperationParameterType.@(parameter.OperationType),
</text>    
}
        },
</text>
}
      ],
</text>
}
@if (Model.RequestBody != null)
{
<text>
      requestBodyMapper: requestModelMapper,
      requestBodyName: "@(Model.RequestBody.Name)",
</text>
@if (Model.CodeModel.ShouldGenerateXmlSerialization)
{
<text>
      isXML: true,
</text>
}
}
    });
  let statusCode = operationRes.status;
  if (@(Model.FailureStatusCodePredicate)) {
    let error = new msRest.RestError(operationRes.bodyAsText as string);
    error.statusCode = operationRes.status;
    error.request = msRest.stripRequest(httpRequest);
    error.response = msRest.stripResponse(operationRes);
    let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
    try {
      if (parsedErrorResponse) {
        @(Model.PopulateErrorCodeAndMessage())
      }
  @if (Model.DefaultResponse.Body != null)
  {
      var deserializeErrorBody = Model.GetDeserializationString(Model.DefaultResponse.Body, "error.body", "parsedErrorResponse");
      if (!string.IsNullOrWhiteSpace(deserializeErrorBody))
      {
@:      if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
@:        @(deserializeErrorBody)
@:      }
      }
  }
    } catch (defaultError) {
      error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                       `- "${operationRes.bodyAsText}" for the default response.`;
      return Promise.reject(error);
    }
    return Promise.reject(error);
  }
  @Model.InitializeResult
  @foreach (var responsePair in Model.Responses.Where(r => r.Value.Body != null || r.Value.Headers != null))
  {
      <text>
  // Deserialize Response
  if (statusCode === @MethodTS.GetStatusCodeReference(responsePair.Key)) {
@if (responsePair.Value.Body != null) {
@:    @(Model.DeserializeResponse(responsePair.Value.Body, "operationRes.parsedBody"))
}
@if (responsePair.Value.Headers != null) {
@:    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.@(responsePair.Value.Headers.Name), operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
}
  }
      </text>
  }
  @if (Model.ReturnType.Body != null && Model.DefaultResponse.Body != null && !Model.Responses.Any())
  {
    @(Model.DeserializeResponse(Model.DefaultResponse.Body, "operationRes.parsedBody"))
  }
@EmptyLine
} catch(err) {
  return Promise.reject(err);
}
@EmptyLine
return Promise.resolve(operationRes);