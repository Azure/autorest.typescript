/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import { BodyStringClient } from "../bodyStringClient";

/**
 * Class representing a Enum.
 */
export class Enum {
  private readonly client: BodyStringClient;

  /**
   * Initialize a new instance of the class Enum class.
   * @param client Reference to the service client
   */
  constructor(client: BodyStringClient) {
    this.client = client;
  }

  /**
   * Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
   * @param options The options parameters.
   */
  getNotExpandable(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getNotExpandable(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getNotExpandable(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getNotExpandable(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getNotExpandableOperationSpec,
      callback
    );
  }

  /**
   * Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
   * @param stringBody
   * @param options The options parameters.
   */
  putNotExpandable(
    stringBody: Models.Colors,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param stringBody
   * @param callback The callback.
   */
  putNotExpandable(
    stringBody: Models.Colors,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param stringBody
   * @param options The options parameters.
   * @param callback The callback.
   */
  putNotExpandable(
    stringBody: Models.Colors,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putNotExpandable(
    stringBody: Models.Colors,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { stringBody, options },
      putNotExpandableOperationSpec,
      callback
    );
  }

  /**
   * Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
   * @param options The options parameters.
   */
  getReferenced(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getReferenced(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getReferenced(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getReferenced(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getReferencedOperationSpec,
      callback
    );
  }

  /**
   * Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
   * @param enumStringBody
   * @param options The options parameters.
   */
  putReferenced(
    enumStringBody: Models.Colors,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param enumStringBody
   * @param callback The callback.
   */
  putReferenced(
    enumStringBody: Models.Colors,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param enumStringBody
   * @param options The options parameters.
   * @param callback The callback.
   */
  putReferenced(
    enumStringBody: Models.Colors,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putReferenced(
    enumStringBody: Models.Colors,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { enumStringBody, options },
      putReferencedOperationSpec,
      callback
    );
  }

  /**
   * Get value 'green-color' from the constant.
   * @param options The options parameters.
   */
  getReferencedConstant(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getReferencedConstant(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getReferencedConstant(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getReferencedConstant(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getReferencedConstantOperationSpec,
      callback
    );
  }

  /**
   * Sends value 'green-color' from a constant
   * @param enumStringBody
   * @param options The options parameters.
   */
  putReferencedConstant(
    enumStringBody: Models.RefColorConstant,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param enumStringBody
   * @param callback The callback.
   */
  putReferencedConstant(
    enumStringBody: Models.RefColorConstant,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param enumStringBody
   * @param options The options parameters.
   * @param callback The callback.
   */
  putReferencedConstant(
    enumStringBody: Models.RefColorConstant,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putReferencedConstant(
    enumStringBody: Models.RefColorConstant,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { enumStringBody, options },
      putReferencedConstantOperationSpec,
      callback
    );
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers);

const getNotExpandableOperationSpec: coreHttp.OperationSpec = {
  path: "/string/enum/notExpandable",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Enum",
          allowedValues: ["red color", "green-color", "blue_color"]
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putNotExpandableOperationSpec: coreHttp.OperationSpec = {
  path: "/string/enum/notExpandable",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "stringBody",
    mapper: {
      type: {
        name: "Enum",
        allowedValues: ["red color", "green-color", "blue_color"]
      }
    }
  },
  serializer
};
const getReferencedOperationSpec: coreHttp.OperationSpec = {
  path: "/string/enum/Referenced",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Enum",
          allowedValues: ["red color", "green-color", "blue_color"]
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putReferencedOperationSpec: coreHttp.OperationSpec = {
  path: "/string/enum/Referenced",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "enumStringBody",
    mapper: {
      type: {
        name: "Enum",
        allowedValues: ["red color", "green-color", "blue_color"]
      }
    }
  },
  serializer
};
const getReferencedConstantOperationSpec: coreHttp.OperationSpec = {
  path: "/string/enum/ReferencedConstant",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RefColorConstant
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putReferencedConstantOperationSpec: coreHttp.OperationSpec = {
  path: "/string/enum/ReferencedConstant",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "enumStringBody",
    mapper: Mappers.RefColorConstant
  },
  serializer
};
