/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import { BodyStringClient } from "../bodyStringClient";

/**
 * Class representing a String.
 */
export class String {
  private readonly client: BodyStringClient;

  /**
   * Initialize a new instance of the class String class.
   * @param client Reference to the service client
   */
  constructor(client: BodyStringClient) {
    this.client = client;
  }

  /**
   * Get null string value value
   * @param options The options parameters.
   */
  getNull(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getNull(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<any>): void;
  getNull(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest({ options }, getNullOperationSpec, callback);
  }

  /**
   * Set string value null
   * @param options The options parameters.
   */
  putNull(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  putNull(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  putNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<any>): void;
  putNull(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest({ options }, putNullOperationSpec, callback);
  }

  /**
   * Get empty string value value ''
   * @param options The options parameters.
   */
  getEmpty(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getEmpty(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<any>): void;
  getEmpty(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest({ options }, getEmptyOperationSpec, callback);
  }

  /**
   * Set string value empty ''
   * @param stringBody
   * @param options The options parameters.
   */
  putEmpty(stringBody: string, options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param stringBody
   * @param callback The callback.
   */
  putEmpty(stringBody: string, callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param stringBody
   * @param options The options parameters.
   * @param callback The callback.
   */
  putEmpty(
    stringBody: string,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putEmpty(
    stringBody: string,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { stringBody, options },
      putEmptyOperationSpec,
      callback
    );
  }

  /**
   * Get mbcs string value '啊齄丂狛狜隣郎隣兀﨩ˊ〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€'
   * @param options The options parameters.
   */
  getMbcs(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getMbcs(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getMbcs(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<any>): void;
  getMbcs(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest({ options }, getMbcsOperationSpec, callback);
  }

  /**
   * Set string value mbcs '啊齄丂狛狜隣郎隣兀﨩ˊ〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€'
   * @param options The options parameters.
   */
  putMbcs(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  putMbcs(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  putMbcs(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<any>): void;
  putMbcs(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest({ options }, putMbcsOperationSpec, callback);
  }

  /**
   * Get string value with leading and trailing whitespace '<tab><space><space>Now is the time for all good men to come to the aid of their country<tab><space><space>'
   * @param options The options parameters.
   */
  getWhitespace(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getWhitespace(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getWhitespace(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getWhitespace(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest({ options }, getWhitespaceOperationSpec, callback);
  }

  /**
   * Set String value with leading and trailing whitespace '<tab><space><space>Now is the time for all good men to come to the aid of their country<tab><space><space>'
   * @param options The options parameters.
   */
  putWhitespace(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  putWhitespace(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  putWhitespace(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putWhitespace(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest({ options }, putWhitespaceOperationSpec, callback);
  }

  /**
   * Get String value when no string value is sent in response payload
   * @param options The options parameters.
   */
  getNotProvided(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getNotProvided(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getNotProvided(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getNotProvided(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest({ options }, getNotProvidedOperationSpec, callback);
  }

  /**
   * Get value that is base64 encoded
   * @param options The options parameters.
   */
  getBase64Encoded(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getBase64Encoded(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getBase64Encoded(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getBase64Encoded(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest({ options }, getBase64EncodedOperationSpec, callback);
  }

  /**
   * Get value that is base64url encoded
   * @param options The options parameters.
   */
  getBase64UrlEncoded(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getBase64UrlEncoded(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getBase64UrlEncoded(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getBase64UrlEncoded(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getBase64UrlEncodedOperationSpec,
      callback
    );
  }

  /**
   * Put value that is base64url encoded
   * @param stringBody
   * @param options The options parameters.
   */
  putBase64UrlEncoded(stringBody: Uint8Array, options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param stringBody
   * @param callback The callback.
   */
  putBase64UrlEncoded(stringBody: Uint8Array, callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param stringBody
   * @param options The options parameters.
   * @param callback The callback.
   */
  putBase64UrlEncoded(
    stringBody: Uint8Array,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putBase64UrlEncoded(
    stringBody: Uint8Array,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { stringBody, options },
      putBase64UrlEncodedOperationSpec,
      callback
    );
  }

  /**
   * Get null value that is expected to be base64url encoded
   * @param options The options parameters.
   */
  getNullBase64UrlEncoded(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getNullBase64UrlEncoded(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getNullBase64UrlEncoded(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getNullBase64UrlEncoded(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getNullBase64UrlEncodedOperationSpec,
      callback
    );
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers);

const getNullOperationSpec: coreHttp.OperationSpec = {
  path: "/string/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putNullOperationSpec: coreHttp.OperationSpec = {
  path: "/string/null",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "stringBody",
    mapper: { type: { name: "String" }, isConstant: true, defaultValue: "" }
  },
  serializer
};
const getEmptyOperationSpec: coreHttp.OperationSpec = {
  path: "/string/empty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putEmptyOperationSpec: coreHttp.OperationSpec = {
  path: "/string/empty",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "stringBody",
    mapper: { type: { name: "String" }, isConstant: true, defaultValue: "" }
  },
  serializer
};
const getMbcsOperationSpec: coreHttp.OperationSpec = {
  path: "/string/mbcs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putMbcsOperationSpec: coreHttp.OperationSpec = {
  path: "/string/mbcs",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "stringBody",
    mapper: {
      type: { name: "String" },
      isConstant: true,
      defaultValue:
        "啊齄丂狛狜隣郎隣兀﨩ˊ〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€"
    }
  },
  serializer
};
const getWhitespaceOperationSpec: coreHttp.OperationSpec = {
  path: "/string/whitespace",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putWhitespaceOperationSpec: coreHttp.OperationSpec = {
  path: "/string/whitespace",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "stringBody",
    mapper: {
      type: { name: "String" },
      isConstant: true,
      defaultValue: "    Now is the time for all good men to come to the aid of their country    "
    }
  },
  serializer
};
const getNotProvidedOperationSpec: coreHttp.OperationSpec = {
  path: "/string/notProvided",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const getBase64EncodedOperationSpec: coreHttp.OperationSpec = {
  path: "/string/base64Encoding",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Base64Url" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const getBase64UrlEncodedOperationSpec: coreHttp.OperationSpec = {
  path: "/string/base64UrlEncoding",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Base64Url" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putBase64UrlEncodedOperationSpec: coreHttp.OperationSpec = {
  path: "/string/base64UrlEncoding",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "stringBody",
    mapper: { type: { name: "Base64Url" } }
  },
  serializer
};
const getNullBase64UrlEncodedOperationSpec: coreHttp.OperationSpec = {
  path: "/string/nullBase64UrlEncoding",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Base64Url" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
