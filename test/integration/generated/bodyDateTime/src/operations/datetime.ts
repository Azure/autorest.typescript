/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Datetime } from "../operationsInterfaces";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BodyDateTimeClientContext } from "../bodyDateTimeClientContext";
import {
  DatetimeGetNullOptionalParams,
  DatetimeGetNullResponse,
  DatetimeGetInvalidOptionalParams,
  DatetimeGetInvalidResponse,
  DatetimeGetOverflowOptionalParams,
  DatetimeGetOverflowResponse,
  DatetimeGetUnderflowOptionalParams,
  DatetimeGetUnderflowResponse,
  DatetimePutUtcMaxDateTimeOptionalParams,
  DatetimePutUtcMaxDateTime7DigitsOptionalParams,
  DatetimeGetUtcLowercaseMaxDateTimeOptionalParams,
  DatetimeGetUtcLowercaseMaxDateTimeResponse,
  DatetimeGetUtcUppercaseMaxDateTimeOptionalParams,
  DatetimeGetUtcUppercaseMaxDateTimeResponse,
  DatetimeGetUtcUppercaseMaxDateTime7DigitsOptionalParams,
  DatetimeGetUtcUppercaseMaxDateTime7DigitsResponse,
  DatetimePutLocalPositiveOffsetMaxDateTimeOptionalParams,
  DatetimeGetLocalPositiveOffsetLowercaseMaxDateTimeOptionalParams,
  DatetimeGetLocalPositiveOffsetLowercaseMaxDateTimeResponse,
  DatetimeGetLocalPositiveOffsetUppercaseMaxDateTimeOptionalParams,
  DatetimeGetLocalPositiveOffsetUppercaseMaxDateTimeResponse,
  DatetimePutLocalNegativeOffsetMaxDateTimeOptionalParams,
  DatetimeGetLocalNegativeOffsetUppercaseMaxDateTimeOptionalParams,
  DatetimeGetLocalNegativeOffsetUppercaseMaxDateTimeResponse,
  DatetimeGetLocalNegativeOffsetLowercaseMaxDateTimeOptionalParams,
  DatetimeGetLocalNegativeOffsetLowercaseMaxDateTimeResponse,
  DatetimePutUtcMinDateTimeOptionalParams,
  DatetimeGetUtcMinDateTimeOptionalParams,
  DatetimeGetUtcMinDateTimeResponse,
  DatetimePutLocalPositiveOffsetMinDateTimeOptionalParams,
  DatetimeGetLocalPositiveOffsetMinDateTimeOptionalParams,
  DatetimeGetLocalPositiveOffsetMinDateTimeResponse,
  DatetimePutLocalNegativeOffsetMinDateTimeOptionalParams,
  DatetimeGetLocalNegativeOffsetMinDateTimeOptionalParams,
  DatetimeGetLocalNegativeOffsetMinDateTimeResponse,
  DatetimeGetLocalNoOffsetMinDateTimeOptionalParams,
  DatetimeGetLocalNoOffsetMinDateTimeResponse
} from "../models";

/** Class representing a Datetime. */
export class DatetimeImpl implements Datetime {
  private readonly client: BodyDateTimeClientContext;

  /**
   * Initialize a new instance of the class Datetime class.
   * @param client Reference to the service client
   */
  constructor(client: BodyDateTimeClientContext) {
    this.client = client;
  }

  /**
   * Get null datetime value
   * @param options The options parameters.
   */
  getNull(
    options?: DatetimeGetNullOptionalParams
  ): Promise<DatetimeGetNullResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getNullOperationSpec
    ) as Promise<DatetimeGetNullResponse>;
  }

  /**
   * Get invalid datetime value
   * @param options The options parameters.
   */
  getInvalid(
    options?: DatetimeGetInvalidOptionalParams
  ): Promise<DatetimeGetInvalidResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getInvalidOperationSpec
    ) as Promise<DatetimeGetInvalidResponse>;
  }

  /**
   * Get overflow datetime value
   * @param options The options parameters.
   */
  getOverflow(
    options?: DatetimeGetOverflowOptionalParams
  ): Promise<DatetimeGetOverflowResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOverflowOperationSpec
    ) as Promise<DatetimeGetOverflowResponse>;
  }

  /**
   * Get underflow datetime value
   * @param options The options parameters.
   */
  getUnderflow(
    options?: DatetimeGetUnderflowOptionalParams
  ): Promise<DatetimeGetUnderflowResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getUnderflowOperationSpec
    ) as Promise<DatetimeGetUnderflowResponse>;
  }

  /**
   * Put max datetime value 9999-12-31T23:59:59.999Z
   * @param datetimeBody datetime body
   * @param options The options parameters.
   */
  putUtcMaxDateTime(
    datetimeBody: Date,
    options?: DatetimePutUtcMaxDateTimeOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      datetimeBody,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      putUtcMaxDateTimeOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * This is against the recommendation that asks for 3 digits, but allow to test what happens in that
   * scenario
   * @param datetimeBody datetime body
   * @param options The options parameters.
   */
  putUtcMaxDateTime7Digits(
    datetimeBody: Date,
    options?: DatetimePutUtcMaxDateTime7DigitsOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      datetimeBody,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      putUtcMaxDateTime7DigitsOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get max datetime value 9999-12-31t23:59:59.999z
   * @param options The options parameters.
   */
  getUtcLowercaseMaxDateTime(
    options?: DatetimeGetUtcLowercaseMaxDateTimeOptionalParams
  ): Promise<DatetimeGetUtcLowercaseMaxDateTimeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getUtcLowercaseMaxDateTimeOperationSpec
    ) as Promise<DatetimeGetUtcLowercaseMaxDateTimeResponse>;
  }

  /**
   * Get max datetime value 9999-12-31T23:59:59.999Z
   * @param options The options parameters.
   */
  getUtcUppercaseMaxDateTime(
    options?: DatetimeGetUtcUppercaseMaxDateTimeOptionalParams
  ): Promise<DatetimeGetUtcUppercaseMaxDateTimeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getUtcUppercaseMaxDateTimeOperationSpec
    ) as Promise<DatetimeGetUtcUppercaseMaxDateTimeResponse>;
  }

  /**
   * This is against the recommendation that asks for 3 digits, but allow to test what happens in that
   * scenario
   * @param options The options parameters.
   */
  getUtcUppercaseMaxDateTime7Digits(
    options?: DatetimeGetUtcUppercaseMaxDateTime7DigitsOptionalParams
  ): Promise<DatetimeGetUtcUppercaseMaxDateTime7DigitsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getUtcUppercaseMaxDateTime7DigitsOperationSpec
    ) as Promise<DatetimeGetUtcUppercaseMaxDateTime7DigitsResponse>;
  }

  /**
   * Put max datetime value with positive numoffset 9999-12-31t23:59:59.999+14:00
   * @param datetimeBody datetime body
   * @param options The options parameters.
   */
  putLocalPositiveOffsetMaxDateTime(
    datetimeBody: Date,
    options?: DatetimePutLocalPositiveOffsetMaxDateTimeOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      datetimeBody,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      putLocalPositiveOffsetMaxDateTimeOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get max datetime value with positive num offset 9999-12-31t23:59:59.999+14:00
   * @param options The options parameters.
   */
  getLocalPositiveOffsetLowercaseMaxDateTime(
    options?: DatetimeGetLocalPositiveOffsetLowercaseMaxDateTimeOptionalParams
  ): Promise<DatetimeGetLocalPositiveOffsetLowercaseMaxDateTimeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getLocalPositiveOffsetLowercaseMaxDateTimeOperationSpec
    ) as Promise<DatetimeGetLocalPositiveOffsetLowercaseMaxDateTimeResponse>;
  }

  /**
   * Get max datetime value with positive num offset 9999-12-31T23:59:59.999+14:00
   * @param options The options parameters.
   */
  getLocalPositiveOffsetUppercaseMaxDateTime(
    options?: DatetimeGetLocalPositiveOffsetUppercaseMaxDateTimeOptionalParams
  ): Promise<DatetimeGetLocalPositiveOffsetUppercaseMaxDateTimeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getLocalPositiveOffsetUppercaseMaxDateTimeOperationSpec
    ) as Promise<DatetimeGetLocalPositiveOffsetUppercaseMaxDateTimeResponse>;
  }

  /**
   * Put max datetime value with positive numoffset 9999-12-31t23:59:59.999-14:00
   * @param datetimeBody datetime body
   * @param options The options parameters.
   */
  putLocalNegativeOffsetMaxDateTime(
    datetimeBody: Date,
    options?: DatetimePutLocalNegativeOffsetMaxDateTimeOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      datetimeBody,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      putLocalNegativeOffsetMaxDateTimeOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get max datetime value with positive num offset 9999-12-31T23:59:59.999-14:00
   * @param options The options parameters.
   */
  getLocalNegativeOffsetUppercaseMaxDateTime(
    options?: DatetimeGetLocalNegativeOffsetUppercaseMaxDateTimeOptionalParams
  ): Promise<DatetimeGetLocalNegativeOffsetUppercaseMaxDateTimeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getLocalNegativeOffsetUppercaseMaxDateTimeOperationSpec
    ) as Promise<DatetimeGetLocalNegativeOffsetUppercaseMaxDateTimeResponse>;
  }

  /**
   * Get max datetime value with positive num offset 9999-12-31t23:59:59.999-14:00
   * @param options The options parameters.
   */
  getLocalNegativeOffsetLowercaseMaxDateTime(
    options?: DatetimeGetLocalNegativeOffsetLowercaseMaxDateTimeOptionalParams
  ): Promise<DatetimeGetLocalNegativeOffsetLowercaseMaxDateTimeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getLocalNegativeOffsetLowercaseMaxDateTimeOperationSpec
    ) as Promise<DatetimeGetLocalNegativeOffsetLowercaseMaxDateTimeResponse>;
  }

  /**
   * Put min datetime value 0001-01-01T00:00:00Z
   * @param datetimeBody datetime body
   * @param options The options parameters.
   */
  putUtcMinDateTime(
    datetimeBody: Date,
    options?: DatetimePutUtcMinDateTimeOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      datetimeBody,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      putUtcMinDateTimeOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get min datetime value 0001-01-01T00:00:00Z
   * @param options The options parameters.
   */
  getUtcMinDateTime(
    options?: DatetimeGetUtcMinDateTimeOptionalParams
  ): Promise<DatetimeGetUtcMinDateTimeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getUtcMinDateTimeOperationSpec
    ) as Promise<DatetimeGetUtcMinDateTimeResponse>;
  }

  /**
   * Put min datetime value 0001-01-01T00:00:00+14:00
   * @param datetimeBody datetime body
   * @param options The options parameters.
   */
  putLocalPositiveOffsetMinDateTime(
    datetimeBody: Date,
    options?: DatetimePutLocalPositiveOffsetMinDateTimeOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      datetimeBody,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      putLocalPositiveOffsetMinDateTimeOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get min datetime value 0001-01-01T00:00:00+14:00
   * @param options The options parameters.
   */
  getLocalPositiveOffsetMinDateTime(
    options?: DatetimeGetLocalPositiveOffsetMinDateTimeOptionalParams
  ): Promise<DatetimeGetLocalPositiveOffsetMinDateTimeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getLocalPositiveOffsetMinDateTimeOperationSpec
    ) as Promise<DatetimeGetLocalPositiveOffsetMinDateTimeResponse>;
  }

  /**
   * Put min datetime value 0001-01-01T00:00:00-14:00
   * @param datetimeBody datetime body
   * @param options The options parameters.
   */
  putLocalNegativeOffsetMinDateTime(
    datetimeBody: Date,
    options?: DatetimePutLocalNegativeOffsetMinDateTimeOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      datetimeBody,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      putLocalNegativeOffsetMinDateTimeOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get min datetime value 0001-01-01T00:00:00-14:00
   * @param options The options parameters.
   */
  getLocalNegativeOffsetMinDateTime(
    options?: DatetimeGetLocalNegativeOffsetMinDateTimeOptionalParams
  ): Promise<DatetimeGetLocalNegativeOffsetMinDateTimeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getLocalNegativeOffsetMinDateTimeOperationSpec
    ) as Promise<DatetimeGetLocalNegativeOffsetMinDateTimeResponse>;
  }

  /**
   * Get min datetime value 0001-01-01T00:00:00
   * @param options The options parameters.
   */
  getLocalNoOffsetMinDateTime(
    options?: DatetimeGetLocalNoOffsetMinDateTimeOptionalParams
  ): Promise<DatetimeGetLocalNoOffsetMinDateTimeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getLocalNoOffsetMinDateTimeOperationSpec
    ) as Promise<DatetimeGetLocalNoOffsetMinDateTimeResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getNullOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getInvalidOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/invalid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getOverflowOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/overflow",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getUnderflowOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/underflow",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putUtcMaxDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/max/utc",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.datetimeBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const putUtcMaxDateTime7DigitsOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/max/utc7ms",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.datetimeBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getUtcLowercaseMaxDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/max/utc/lowercase",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getUtcUppercaseMaxDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/max/utc/uppercase",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getUtcUppercaseMaxDateTime7DigitsOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/max/utc7ms/uppercase",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putLocalPositiveOffsetMaxDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/max/localpositiveoffset",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.datetimeBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getLocalPositiveOffsetLowercaseMaxDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/max/localpositiveoffset/lowercase",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getLocalPositiveOffsetUppercaseMaxDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/max/localpositiveoffset/uppercase",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putLocalNegativeOffsetMaxDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/max/localnegativeoffset",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.datetimeBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getLocalNegativeOffsetUppercaseMaxDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/max/localnegativeoffset/uppercase",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getLocalNegativeOffsetLowercaseMaxDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/max/localnegativeoffset/lowercase",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putUtcMinDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/min/utc",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.datetimeBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getUtcMinDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/min/utc",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putLocalPositiveOffsetMinDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/min/localpositiveoffset",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.datetimeBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getLocalPositiveOffsetMinDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/min/localpositiveoffset",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putLocalNegativeOffsetMinDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/min/localnegativeoffset",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.datetimeBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getLocalNegativeOffsetMinDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/min/localnegativeoffset",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getLocalNoOffsetMinDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/datetime/min/localnooffset",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "DateTime" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
