/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BodyNumberClient } from "../bodyNumberClient";
import {
  NumberOperationGroupGetNullResponse,
  NumberOperationGroupGetInvalidFloatResponse,
  NumberOperationGroupGetInvalidDoubleResponse,
  NumberOperationGroupGetInvalidDecimalResponse,
  NumberOperationGroupGetBigFloatResponse,
  NumberOperationGroupGetBigDoubleResponse,
  NumberOperationGroupGetBigDoublePositiveDecimalResponse,
  NumberOperationGroupGetBigDoubleNegativeDecimalResponse,
  NumberOperationGroupGetBigDecimalResponse,
  NumberOperationGroupGetBigDecimalPositiveDecimalResponse,
  NumberOperationGroupGetBigDecimalNegativeDecimalResponse,
  NumberOperationGroupGetSmallFloatResponse,
  NumberOperationGroupGetSmallDoubleResponse,
  NumberOperationGroupGetSmallDecimalResponse
} from "../models";

/**
 * Class representing a NumberOperationGroup.
 */
export class NumberOperationGroup {
  private readonly client: BodyNumberClient;

  /**
   * Initialize a new instance of the class NumberOperationGroup class.
   * @param client Reference to the service client
   */
  constructor(client: BodyNumberClient) {
    this.client = client;
  }

  /**
   * Get null Number value
   * @param options The options parameters.
   */
  getNull(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetNullResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getNullOperationSpec
    ) as Promise<NumberOperationGroupGetNullResponse>;
  }

  /**
   * Get invalid float Number value
   * @param options The options parameters.
   */
  getInvalidFloat(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetInvalidFloatResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getInvalidFloatOperationSpec
    ) as Promise<NumberOperationGroupGetInvalidFloatResponse>;
  }

  /**
   * Get invalid double Number value
   * @param options The options parameters.
   */
  getInvalidDouble(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetInvalidDoubleResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getInvalidDoubleOperationSpec
    ) as Promise<NumberOperationGroupGetInvalidDoubleResponse>;
  }

  /**
   * Get invalid decimal Number value
   * @param options The options parameters.
   */
  getInvalidDecimal(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetInvalidDecimalResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getInvalidDecimalOperationSpec
    ) as Promise<NumberOperationGroupGetInvalidDecimalResponse>;
  }

  /**
   * Put big float value 3.402823e+20
   * @param numberBody
   * @param options The options parameters.
   */
  putBigFloat(
    numberBody: number,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { numberBody, options: operationOptions },
      putBigFloatOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get big float value 3.402823e+20
   * @param options The options parameters.
   */
  getBigFloat(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetBigFloatResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getBigFloatOperationSpec
    ) as Promise<NumberOperationGroupGetBigFloatResponse>;
  }

  /**
   * Put big double value 2.5976931e+101
   * @param numberBody
   * @param options The options parameters.
   */
  putBigDouble(
    numberBody: number,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { numberBody, options: operationOptions },
      putBigDoubleOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get big double value 2.5976931e+101
   * @param options The options parameters.
   */
  getBigDouble(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetBigDoubleResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getBigDoubleOperationSpec
    ) as Promise<NumberOperationGroupGetBigDoubleResponse>;
  }

  /**
   * Put big double value 99999999.99
   * @param options The options parameters.
   */
  putBigDoublePositiveDecimal(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      putBigDoublePositiveDecimalOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get big double value 99999999.99
   * @param options The options parameters.
   */
  getBigDoublePositiveDecimal(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetBigDoublePositiveDecimalResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getBigDoublePositiveDecimalOperationSpec
    ) as Promise<NumberOperationGroupGetBigDoublePositiveDecimalResponse>;
  }

  /**
   * Put big double value -99999999.99
   * @param options The options parameters.
   */
  putBigDoubleNegativeDecimal(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      putBigDoubleNegativeDecimalOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get big double value -99999999.99
   * @param options The options parameters.
   */
  getBigDoubleNegativeDecimal(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetBigDoubleNegativeDecimalResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getBigDoubleNegativeDecimalOperationSpec
    ) as Promise<NumberOperationGroupGetBigDoubleNegativeDecimalResponse>;
  }

  /**
   * Put big decimal value 2.5976931e+101
   * @param numberBody
   * @param options The options parameters.
   */
  putBigDecimal(
    numberBody: number,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { numberBody, options: operationOptions },
      putBigDecimalOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get big decimal value 2.5976931e+101
   * @param options The options parameters.
   */
  getBigDecimal(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetBigDecimalResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getBigDecimalOperationSpec
    ) as Promise<NumberOperationGroupGetBigDecimalResponse>;
  }

  /**
   * Put big decimal value 99999999.99
   * @param options The options parameters.
   */
  putBigDecimalPositiveDecimal(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      putBigDecimalPositiveDecimalOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get big decimal value 99999999.99
   * @param options The options parameters.
   */
  getBigDecimalPositiveDecimal(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetBigDecimalPositiveDecimalResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getBigDecimalPositiveDecimalOperationSpec
    ) as Promise<NumberOperationGroupGetBigDecimalPositiveDecimalResponse>;
  }

  /**
   * Put big decimal value -99999999.99
   * @param options The options parameters.
   */
  putBigDecimalNegativeDecimal(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      putBigDecimalNegativeDecimalOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get big decimal value -99999999.99
   * @param options The options parameters.
   */
  getBigDecimalNegativeDecimal(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetBigDecimalNegativeDecimalResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getBigDecimalNegativeDecimalOperationSpec
    ) as Promise<NumberOperationGroupGetBigDecimalNegativeDecimalResponse>;
  }

  /**
   * Put small float value 3.402823e-20
   * @param numberBody
   * @param options The options parameters.
   */
  putSmallFloat(
    numberBody: number,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { numberBody, options: operationOptions },
      putSmallFloatOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get big double value 3.402823e-20
   * @param options The options parameters.
   */
  getSmallFloat(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetSmallFloatResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getSmallFloatOperationSpec
    ) as Promise<NumberOperationGroupGetSmallFloatResponse>;
  }

  /**
   * Put small double value 2.5976931e-101
   * @param numberBody
   * @param options The options parameters.
   */
  putSmallDouble(
    numberBody: number,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { numberBody, options: operationOptions },
      putSmallDoubleOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get big double value 2.5976931e-101
   * @param options The options parameters.
   */
  getSmallDouble(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetSmallDoubleResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getSmallDoubleOperationSpec
    ) as Promise<NumberOperationGroupGetSmallDoubleResponse>;
  }

  /**
   * Put small decimal value 2.5976931e-101
   * @param numberBody
   * @param options The options parameters.
   */
  putSmallDecimal(
    numberBody: number,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { numberBody, options: operationOptions },
      putSmallDecimalOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get small decimal value 2.5976931e-101
   * @param options The options parameters.
   */
  getSmallDecimal(
    options?: coreHttp.OperationOptions
  ): Promise<NumberOperationGroupGetSmallDecimalResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getSmallDecimalOperationSpec
    ) as Promise<NumberOperationGroupGetSmallDecimalResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getNullOperationSpec: coreHttp.OperationSpec = {
  path: "/number/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const getInvalidFloatOperationSpec: coreHttp.OperationSpec = {
  path: "/number/invalidfloat",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const getInvalidDoubleOperationSpec: coreHttp.OperationSpec = {
  path: "/number/invaliddouble",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const getInvalidDecimalOperationSpec: coreHttp.OperationSpec = {
  path: "/number/invaliddecimal",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putBigFloatOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/float/3.402823e+20",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.numberBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const getBigFloatOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/float/3.402823e+20",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putBigDoubleOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/double/2.5976931e+101",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.numberBody1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const getBigDoubleOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/double/2.5976931e+101",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putBigDoublePositiveDecimalOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/double/99999999.99",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.numberBody2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const getBigDoublePositiveDecimalOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/double/99999999.99",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putBigDoubleNegativeDecimalOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/double/-99999999.99",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.numberBody3,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const getBigDoubleNegativeDecimalOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/double/-99999999.99",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putBigDecimalOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/decimal/2.5976931e+101",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.numberBody4,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const getBigDecimalOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/decimal/2.5976931e+101",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putBigDecimalPositiveDecimalOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/decimal/99999999.99",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.numberBody5,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const getBigDecimalPositiveDecimalOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/decimal/99999999.99",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putBigDecimalNegativeDecimalOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/decimal/-99999999.99",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.numberBody6,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const getBigDecimalNegativeDecimalOperationSpec: coreHttp.OperationSpec = {
  path: "/number/big/decimal/-99999999.99",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putSmallFloatOperationSpec: coreHttp.OperationSpec = {
  path: "/number/small/float/3.402823e-20",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.numberBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const getSmallFloatOperationSpec: coreHttp.OperationSpec = {
  path: "/number/small/float/3.402823e-20",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putSmallDoubleOperationSpec: coreHttp.OperationSpec = {
  path: "/number/small/double/2.5976931e-101",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.numberBody1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const getSmallDoubleOperationSpec: coreHttp.OperationSpec = {
  path: "/number/small/double/2.5976931e-101",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putSmallDecimalOperationSpec: coreHttp.OperationSpec = {
  path: "/number/small/decimal/2.5976931e-101",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.numberBody4,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const getSmallDecimalOperationSpec: coreHttp.OperationSpec = {
  path: "/number/small/decimal/2.5976931e-101",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Number" }, serializedName: "Number" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
