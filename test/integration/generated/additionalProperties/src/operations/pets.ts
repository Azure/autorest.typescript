/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Pets } from "../operationsInterfaces";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AdditionalPropertiesClientContext } from "../additionalPropertiesClientContext";
import {
  PetAPTrue,
  PetsCreateAPTrueOptionalParams,
  PetsCreateAPTrueResponse,
  CatAPTrue,
  PetsCreateCatAPTrueOptionalParams,
  PetsCreateCatAPTrueResponse,
  PetAPObject,
  PetsCreateAPObjectOptionalParams,
  PetsCreateAPObjectResponse,
  PetAPString,
  PetsCreateAPStringOptionalParams,
  PetsCreateAPStringResponse,
  PetAPInProperties,
  PetsCreateAPInPropertiesOptionalParams,
  PetsCreateAPInPropertiesResponse,
  PetAPInPropertiesWithAPString,
  PetsCreateAPInPropertiesWithAPStringOptionalParams,
  PetsCreateAPInPropertiesWithAPStringResponse
} from "../models";

/** Class representing a Pets. */
export class PetsImpl implements Pets {
  private readonly client: AdditionalPropertiesClientContext;

  /**
   * Initialize a new instance of the class Pets class.
   * @param client Reference to the service client
   */
  constructor(client: AdditionalPropertiesClientContext) {
    this.client = client;
  }

  /**
   * Create a Pet which contains more properties than what is defined.
   * @param createParameters
   * @param options The options parameters.
   */
  createAPTrue(
    createParameters: PetAPTrue,
    options?: PetsCreateAPTrueOptionalParams
  ): Promise<PetsCreateAPTrueResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      createParameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createAPTrueOperationSpec
    ) as Promise<PetsCreateAPTrueResponse>;
  }

  /**
   * Create a CatAPTrue which contains more properties than what is defined.
   * @param createParameters
   * @param options The options parameters.
   */
  createCatAPTrue(
    createParameters: CatAPTrue,
    options?: PetsCreateCatAPTrueOptionalParams
  ): Promise<PetsCreateCatAPTrueResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      createParameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createCatAPTrueOperationSpec
    ) as Promise<PetsCreateCatAPTrueResponse>;
  }

  /**
   * Create a Pet which contains more properties than what is defined.
   * @param createParameters
   * @param options The options parameters.
   */
  createAPObject(
    createParameters: PetAPObject,
    options?: PetsCreateAPObjectOptionalParams
  ): Promise<PetsCreateAPObjectResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      createParameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createAPObjectOperationSpec
    ) as Promise<PetsCreateAPObjectResponse>;
  }

  /**
   * Create a Pet which contains more properties than what is defined.
   * @param createParameters
   * @param options The options parameters.
   */
  createAPString(
    createParameters: PetAPString,
    options?: PetsCreateAPStringOptionalParams
  ): Promise<PetsCreateAPStringResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      createParameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createAPStringOperationSpec
    ) as Promise<PetsCreateAPStringResponse>;
  }

  /**
   * Create a Pet which contains more properties than what is defined.
   * @param createParameters
   * @param options The options parameters.
   */
  createAPInProperties(
    createParameters: PetAPInProperties,
    options?: PetsCreateAPInPropertiesOptionalParams
  ): Promise<PetsCreateAPInPropertiesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      createParameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createAPInPropertiesOperationSpec
    ) as Promise<PetsCreateAPInPropertiesResponse>;
  }

  /**
   * Create a Pet which contains more properties than what is defined.
   * @param createParameters
   * @param options The options parameters.
   */
  createAPInPropertiesWithAPString(
    createParameters: PetAPInPropertiesWithAPString,
    options?: PetsCreateAPInPropertiesWithAPStringOptionalParams
  ): Promise<PetsCreateAPInPropertiesWithAPStringResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      createParameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createAPInPropertiesWithAPStringOperationSpec
    ) as Promise<PetsCreateAPInPropertiesWithAPStringResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createAPTrueOperationSpec: coreHttp.OperationSpec = {
  path: "/additionalProperties/true",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PetAPTrue
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.createParameters,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const createCatAPTrueOperationSpec: coreHttp.OperationSpec = {
  path: "/additionalProperties/true-subclass",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CatAPTrue
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.createParameters1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const createAPObjectOperationSpec: coreHttp.OperationSpec = {
  path: "/additionalProperties/type/object",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PetAPObject
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.createParameters2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const createAPStringOperationSpec: coreHttp.OperationSpec = {
  path: "/additionalProperties/type/string",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PetAPString
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.createParameters3,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const createAPInPropertiesOperationSpec: coreHttp.OperationSpec = {
  path: "/additionalProperties/in/properties",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PetAPInProperties
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.createParameters4,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const createAPInPropertiesWithAPStringOperationSpec: coreHttp.OperationSpec = {
  path: "/additionalProperties/in/properties/with/additionalProperties/string",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PetAPInPropertiesWithAPString
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.createParameters5,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
