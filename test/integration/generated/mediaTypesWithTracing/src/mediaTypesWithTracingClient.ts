/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import { CanonicalCode } from "@opentelemetry/api";
import { createSpan } from "./tracing";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { MediaTypesWithTracingClientContext } from "./mediaTypesWithTracingClientContext";
import {
  MediaTypesWithTracingClientOptionalParams,
  ContentType,
  MediaTypesWithTracingClientAnalyzeBody$binaryOptionalParams,
  MediaTypesWithTracingClientAnalyzeBody$jsonOptionalParams,
  MediaTypesWithTracingClientAnalyzeBodyResponse,
  MediaTypesWithTracingClientContentTypeWithEncodingOptionalParams,
  MediaTypesWithTracingClientContentTypeWithEncodingResponse
} from "./models";

export class MediaTypesWithTracingClient extends MediaTypesWithTracingClientContext {
  /**
   * Initializes a new instance of the MediaTypesWithTracingClient class.
   * @param options The parameter options
   */
  constructor(options?: MediaTypesWithTracingClientOptionalParams) {
    super(options);
  }

  /**
   * Analyze body, that could be different media types.
   * @param contentType Upload file type
   * @param options The options parameters.
   */
  analyzeBody(
    contentType: ContentType,
    options?: MediaTypesWithTracingClientAnalyzeBody$binaryOptionalParams
  ): Promise<MediaTypesWithTracingClientAnalyzeBodyResponse>;
  /**
   * Analyze body, that could be different media types.
   * @param contentType Body Parameter content-type
   * @param options The options parameters.
   */
  analyzeBody(
    contentType: "application/json",
    options?: MediaTypesWithTracingClientAnalyzeBody$jsonOptionalParams
  ): Promise<MediaTypesWithTracingClientAnalyzeBodyResponse>;
  /**
   * Analyze body, that could be different media types.
   * @param args Includes all the parameters for this operation.
   */
  async analyzeBody(
    ...args:
      | [
          ContentType,
          MediaTypesWithTracingClientAnalyzeBody$binaryOptionalParams?
        ]
      | [
          "application/json",
          MediaTypesWithTracingClientAnalyzeBody$jsonOptionalParams?
        ]
  ): Promise<MediaTypesWithTracingClientAnalyzeBodyResponse> {
    let operationSpec: coreHttp.OperationSpec;
    let operationArguments: coreHttp.OperationArguments;
    if (
      args[0] === "application/pdf" ||
      args[0] === "image/jpeg" ||
      args[0] === "image/png" ||
      args[0] === "image/tiff"
    ) {
      operationSpec = analyzeBody$binaryOperationSpec;
      operationArguments = { contentType: args[0], options: args[1] };
    } else if (args[0] === "application/json") {
      operationSpec = analyzeBody$jsonOperationSpec;
      operationArguments = { contentType: args[0], options: args[1] };
    } else {
      throw new TypeError(
        `"contentType" must be a valid value but instead was "${args[0]}".`
      );
    }
    const { span, updatedOptions } = createSpan(
      "MediaTypesWithTracingClient-analyzeBody",
      coreHttp.operationOptionsToRequestOptionsBase(
        operationArguments.options || {}
      )
    );
    operationArguments.options = updatedOptions;
    try {
      const result = await this.sendOperationRequest(
        operationArguments,
        operationSpec
      );
      return result as MediaTypesWithTracingClientAnalyzeBodyResponse;
    } catch (error) {
      span.setStatus({
        code: CanonicalCode.UNKNOWN,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Pass in contentType 'text/plain; encoding=UTF-8' to pass test. Value for input does not matter
   * @param options The options parameters.
   */
  async contentTypeWithEncoding(
    options?: MediaTypesWithTracingClientContentTypeWithEncodingOptionalParams
  ): Promise<MediaTypesWithTracingClientContentTypeWithEncodingResponse> {
    const { span, updatedOptions } = createSpan(
      "MediaTypesWithTracingClient-contentTypeWithEncoding",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      options: updatedOptions
    };
    try {
      const result = await this.sendOperationRequest(
        operationArguments,
        contentTypeWithEncodingOperationSpec
      );
      return result as MediaTypesWithTracingClientContentTypeWithEncodingResponse;
    } catch (error) {
      span.setStatus({
        code: CanonicalCode.UNKNOWN,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const analyzeBody$binaryOperationSpec: coreHttp.OperationSpec = {
  path: "/mediatypes/analyze",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    }
  },
  requestBody: Parameters.input,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "binary",
  serializer
};
const analyzeBody$jsonOperationSpec: coreHttp.OperationSpec = {
  path: "/mediatypes/analyze",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    }
  },
  requestBody: Parameters.input1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "json",
  serializer
};
const contentTypeWithEncodingOperationSpec: coreHttp.OperationSpec = {
  path: "/mediatypes/contentTypeWithEncoding",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    }
  },
  requestBody: Parameters.input2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType2, Parameters.accept2],
  mediaType: "text",
  serializer
};
