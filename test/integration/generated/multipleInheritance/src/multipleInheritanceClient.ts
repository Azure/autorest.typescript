/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { MultipleInheritanceClientContext } from "./multipleInheritanceClientContext";
import {
  MultipleInheritanceClientOptionalParams,
  MultipleInheritanceClientGetHorseResponse,
  Horse,
  MultipleInheritanceClientPutHorseResponse,
  MultipleInheritanceClientGetPetResponse,
  Pet,
  MultipleInheritanceClientPutPetResponse,
  MultipleInheritanceClientGetFelineResponse,
  Feline,
  MultipleInheritanceClientPutFelineResponse,
  MultipleInheritanceClientGetCatResponse,
  Cat,
  MultipleInheritanceClientPutCatResponse,
  MultipleInheritanceClientGetKittenResponse,
  Kitten,
  MultipleInheritanceClientPutKittenResponse
} from "./models";

class MultipleInheritanceClient extends MultipleInheritanceClientContext {
  /**
   * Initializes a new instance of the MultipleInheritanceClient class.
   * @param options The parameter options
   */
  constructor(options?: MultipleInheritanceClientOptionalParams) {
    super(options);
  }

  /**
   * Get a horse with name 'Fred' and isAShowHorse true
   * @param options The options parameters.
   */
  getHorse(
    options?: coreHttp.OperationOptions
  ): Promise<MultipleInheritanceClientGetHorseResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      getHorseOperationSpec
    ) as Promise<MultipleInheritanceClientGetHorseResponse>;
  }

  /**
   * Put a horse with name 'General' and isAShowHorse false
   * @param horse Put a horse with name 'General' and isAShowHorse false
   * @param options The options parameters.
   */
  putHorse(
    horse: Horse,
    options?: coreHttp.OperationOptions
  ): Promise<MultipleInheritanceClientPutHorseResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { horse, options: operationOptions },
      putHorseOperationSpec
    ) as Promise<MultipleInheritanceClientPutHorseResponse>;
  }

  /**
   * Get a pet with name 'Peanut'
   * @param options The options parameters.
   */
  getPet(
    options?: coreHttp.OperationOptions
  ): Promise<MultipleInheritanceClientGetPetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      getPetOperationSpec
    ) as Promise<MultipleInheritanceClientGetPetResponse>;
  }

  /**
   * Put a pet with name 'Butter'
   * @param pet Put a pet with name 'Butter'
   * @param options The options parameters.
   */
  putPet(
    pet: Pet,
    options?: coreHttp.OperationOptions
  ): Promise<MultipleInheritanceClientPutPetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { pet, options: operationOptions },
      putPetOperationSpec
    ) as Promise<MultipleInheritanceClientPutPetResponse>;
  }

  /**
   * Get a feline where meows and hisses are true
   * @param options The options parameters.
   */
  getFeline(
    options?: coreHttp.OperationOptions
  ): Promise<MultipleInheritanceClientGetFelineResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      getFelineOperationSpec
    ) as Promise<MultipleInheritanceClientGetFelineResponse>;
  }

  /**
   * Put a feline who hisses and doesn't meow
   * @param feline Put a feline who hisses and doesn't meow
   * @param options The options parameters.
   */
  putFeline(
    feline: Feline,
    options?: coreHttp.OperationOptions
  ): Promise<MultipleInheritanceClientPutFelineResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { feline, options: operationOptions },
      putFelineOperationSpec
    ) as Promise<MultipleInheritanceClientPutFelineResponse>;
  }

  /**
   * Get a cat with name 'Whiskers' where likesMilk, meows, and hisses is true
   * @param options The options parameters.
   */
  getCat(
    options?: coreHttp.OperationOptions
  ): Promise<MultipleInheritanceClientGetCatResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      getCatOperationSpec
    ) as Promise<MultipleInheritanceClientGetCatResponse>;
  }

  /**
   * Put a cat with name 'Boots' where likesMilk and hisses is false, meows is true
   * @param cat Put a cat with name 'Boots' where likesMilk and hisses is false, meows is true
   * @param options The options parameters.
   */
  putCat(
    cat: Cat,
    options?: coreHttp.OperationOptions
  ): Promise<MultipleInheritanceClientPutCatResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { cat, options: operationOptions },
      putCatOperationSpec
    ) as Promise<MultipleInheritanceClientPutCatResponse>;
  }

  /**
   * Get a kitten with name 'Gatito' where likesMilk and meows is true, and hisses and eatsMiceYet is
   * false
   * @param options The options parameters.
   */
  getKitten(
    options?: coreHttp.OperationOptions
  ): Promise<MultipleInheritanceClientGetKittenResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      getKittenOperationSpec
    ) as Promise<MultipleInheritanceClientGetKittenResponse>;
  }

  /**
   * Put a kitten with name 'Kitty' where likesMilk and hisses is false, meows and eatsMiceYet is true
   * @param kitten Put a kitten with name 'Kitty' where likesMilk and hisses is false, meows and
   *               eatsMiceYet is true
   * @param options The options parameters.
   */
  putKitten(
    kitten: Kitten,
    options?: coreHttp.OperationOptions
  ): Promise<MultipleInheritanceClientPutKittenResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { kitten, options: operationOptions },
      putKittenOperationSpec
    ) as Promise<MultipleInheritanceClientPutKittenResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getHorseOperationSpec: coreHttp.OperationSpec = {
  path: "/multipleInheritance/horse",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Horse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putHorseOperationSpec: coreHttp.OperationSpec = {
  path: "/multipleInheritance/horse",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    }
  },
  requestBody: Parameters.horse,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getPetOperationSpec: coreHttp.OperationSpec = {
  path: "/multipleInheritance/pet",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Pet
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putPetOperationSpec: coreHttp.OperationSpec = {
  path: "/multipleInheritance/pet",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    }
  },
  requestBody: Parameters.pet,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getFelineOperationSpec: coreHttp.OperationSpec = {
  path: "/multipleInheritance/feline",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Feline
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putFelineOperationSpec: coreHttp.OperationSpec = {
  path: "/multipleInheritance/feline",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    }
  },
  requestBody: Parameters.feline,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getCatOperationSpec: coreHttp.OperationSpec = {
  path: "/multipleInheritance/cat",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Cat
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putCatOperationSpec: coreHttp.OperationSpec = {
  path: "/multipleInheritance/cat",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    }
  },
  requestBody: Parameters.cat,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getKittenOperationSpec: coreHttp.OperationSpec = {
  path: "/multipleInheritance/kitten",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Kitten
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putKittenOperationSpec: coreHttp.OperationSpec = {
  path: "/multipleInheritance/kitten",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    }
  },
  requestBody: Parameters.kitten,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};

// Operation Specifications

export {
  MultipleInheritanceClient,
  MultipleInheritanceClientContext,
  Models as MultipleInheritanceModels,
  Mappers as MultipleInheritanceMappers
};
