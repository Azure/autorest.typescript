/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RequiredOptionalClient } from "../requiredOptionalClient";
import {
  ExplicitPostOptionalIntegerParameterOptionalParams,
  IntWrapper,
  ExplicitPostOptionalIntegerPropertyOptionalParams,
  ExplicitPostOptionalIntegerHeaderOptionalParams,
  ExplicitPostOptionalStringParameterOptionalParams,
  StringWrapper,
  ExplicitPostOptionalStringPropertyOptionalParams,
  ExplicitPostOptionalStringHeaderOptionalParams,
  Product,
  ExplicitPostOptionalClassParameterOptionalParams,
  ClassWrapper,
  ExplicitPostOptionalClassPropertyOptionalParams,
  ExplicitPostOptionalArrayParameterOptionalParams,
  ArrayWrapper,
  ExplicitPostOptionalArrayPropertyOptionalParams,
  ExplicitPostOptionalArrayHeaderOptionalParams
} from "../models";

/**
 * Class representing a Explicit.
 */
export class Explicit {
  private readonly client: RequiredOptionalClient;

  /**
   * Initialize a new instance of the class Explicit class.
   * @param client Reference to the service client
   */
  constructor(client: RequiredOptionalClient) {
    this.client = client;
  }

  /**
   * Test explicitly required integer. Please put null and the client library should throw before the
   * request is sent.
   * @param bodyParameter
   * @param options The options parameters.
   */
  postRequiredIntegerParameter(
    bodyParameter: number,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { bodyParameter, options: operationOptions },
      postRequiredIntegerParameterOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly optional integer. Please put null.
   * @param options The options parameters.
   */
  postOptionalIntegerParameter(
    options?: ExplicitPostOptionalIntegerParameterOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      postOptionalIntegerParameterOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client
   * library should throw before the request is sent.
   * @param bodyParameter
   * @param options The options parameters.
   */
  postRequiredIntegerProperty(
    bodyParameter: IntWrapper,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { bodyParameter, options: operationOptions },
      postRequiredIntegerPropertyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
   * @param options The options parameters.
   */
  postOptionalIntegerProperty(
    options?: ExplicitPostOptionalIntegerPropertyOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      postOptionalIntegerPropertyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly required integer. Please put a header 'headerParameter' => null and the client
   * library should throw before the request is sent.
   * @param headerParameter
   * @param options The options parameters.
   */
  postRequiredIntegerHeader(
    headerParameter: number,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { headerParameter, options: operationOptions },
      postRequiredIntegerHeaderOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly optional integer. Please put a header 'headerParameter' => null.
   * @param options The options parameters.
   */
  postOptionalIntegerHeader(
    options?: ExplicitPostOptionalIntegerHeaderOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      postOptionalIntegerHeaderOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly required string. Please put null and the client library should throw before the
   * request is sent.
   * @param bodyParameter
   * @param options The options parameters.
   */
  postRequiredStringParameter(
    bodyParameter: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { bodyParameter, options: operationOptions },
      postRequiredStringParameterOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly optional string. Please put null.
   * @param options The options parameters.
   */
  postOptionalStringParameter(
    options?: ExplicitPostOptionalStringParameterOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      postOptionalStringParameterOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the
   * client library should throw before the request is sent.
   * @param bodyParameter
   * @param options The options parameters.
   */
  postRequiredStringProperty(
    bodyParameter: StringWrapper,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { bodyParameter, options: operationOptions },
      postRequiredStringPropertyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
   * @param options The options parameters.
   */
  postOptionalStringProperty(
    options?: ExplicitPostOptionalStringPropertyOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      postOptionalStringPropertyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly required string. Please put a header 'headerParameter' => null and the client
   * library should throw before the request is sent.
   * @param headerParameter
   * @param options The options parameters.
   */
  postRequiredStringHeader(
    headerParameter: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { headerParameter, options: operationOptions },
      postRequiredStringHeaderOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly optional string. Please put a header 'headerParameter' => null.
   * @param options The options parameters.
   */
  postOptionalStringHeader(
    options?: ExplicitPostOptionalStringHeaderOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      postOptionalStringHeaderOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly required complex object. Please put null and the client library should throw before
   * the request is sent.
   * @param bodyParameter
   * @param options The options parameters.
   */
  postRequiredClassParameter(
    bodyParameter: Product,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { bodyParameter, options: operationOptions },
      postRequiredClassParameterOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly optional complex object. Please put null.
   * @param options The options parameters.
   */
  postOptionalClassParameter(
    options?: ExplicitPostOptionalClassParameterOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      postOptionalClassParameterOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and
   * the client library should throw before the request is sent.
   * @param bodyParameter
   * @param options The options parameters.
   */
  postRequiredClassProperty(
    bodyParameter: ClassWrapper,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { bodyParameter, options: operationOptions },
      postRequiredClassPropertyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
   * @param options The options parameters.
   */
  postOptionalClassProperty(
    options?: ExplicitPostOptionalClassPropertyOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      postOptionalClassPropertyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly required array. Please put null and the client library should throw before the
   * request is sent.
   * @param bodyParameter Array of PostContentSchemaItem
   * @param options The options parameters.
   */
  postRequiredArrayParameter(
    bodyParameter: string[],
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { bodyParameter, options: operationOptions },
      postRequiredArrayParameterOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly optional array. Please put null.
   * @param options The options parameters.
   */
  postOptionalArrayParameter(
    options?: ExplicitPostOptionalArrayParameterOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      postOptionalArrayParameterOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client
   * library should throw before the request is sent.
   * @param bodyParameter
   * @param options The options parameters.
   */
  postRequiredArrayProperty(
    bodyParameter: ArrayWrapper,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { bodyParameter, options: operationOptions },
      postRequiredArrayPropertyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
   * @param options The options parameters.
   */
  postOptionalArrayProperty(
    options?: ExplicitPostOptionalArrayPropertyOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      postOptionalArrayPropertyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly required array. Please put a header 'headerParameter' => null and the client library
   * should throw before the request is sent.
   * @param headerParameter Array of Post0ItemsItem
   * @param options The options parameters.
   */
  postRequiredArrayHeader(
    headerParameter: string[],
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { headerParameter, options: operationOptions },
      postRequiredArrayHeaderOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Test explicitly optional integer. Please put a header 'headerParameter' => null.
   * @param options The options parameters.
   */
  postOptionalArrayHeader(
    options?: ExplicitPostOptionalArrayHeaderOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      postOptionalArrayHeaderOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const postRequiredIntegerParameterOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/requied/integer/parameter",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postOptionalIntegerParameterOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/optional/integer/parameter",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postRequiredIntegerPropertyOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/requied/integer/property",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter3,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postOptionalIntegerPropertyOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/optional/integer/property",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter4,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postRequiredIntegerHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/requied/integer/header",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.headerParameter],
  serializer
};
const postOptionalIntegerHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/optional/integer/header",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.headerParameter1],
  serializer
};
const postRequiredStringParameterOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/requied/string/parameter",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter5,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postOptionalStringParameterOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/optional/string/parameter",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postRequiredStringPropertyOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/requied/string/property",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter6,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postOptionalStringPropertyOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/optional/string/property",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter7,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postRequiredStringHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/requied/string/header",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.headerParameter2],
  serializer
};
const postOptionalStringHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/optional/string/header",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.bodyParameter8],
  serializer
};
const postRequiredClassParameterOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/requied/class/parameter",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter9,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postOptionalClassParameterOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/optional/class/parameter",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter10,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postRequiredClassPropertyOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/requied/class/property",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter11,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postOptionalClassPropertyOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/optional/class/property",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter12,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postRequiredArrayParameterOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/requied/array/parameter",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter13,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postOptionalArrayParameterOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/optional/array/parameter",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter14,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postRequiredArrayPropertyOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/requied/array/property",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter15,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postOptionalArrayPropertyOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/optional/array/property",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.bodyParameter16,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const postRequiredArrayHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/requied/array/header",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.headerParameter3],
  serializer
};
const postOptionalArrayHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/reqopt/optional/array/header",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.headerParameter4],
  serializer
};
