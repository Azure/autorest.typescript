/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import { LROClientOptionalParams } from "./models";
import { lroPolicy } from "./lro";

const packageName = "lro";
const packageVersion = "1.0.0-preview1";

export class LROClientContext extends coreHttp.ServiceClient {
  $host: string;

  /**
   * Initializes a new instance of the LROClientContext class.
   * @param options The parameter options
   */
  constructor(options?: LROClientOptionalParams) {
    // Initializing default values for options
    if (!options) {
      options = {};
    }

    if (!options.userAgent) {
      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();
      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;
    }

    const defaultPipelines = coreHttp.createPipelineFromOptions(options)
      .requestPolicyFactories as coreHttp.RequestPolicyFactory[];

    options = {
      ...options,
      requestPolicyFactories: [lroPolicy(), ...defaultPipelines]
    };

    super(undefined, options);

    this.requestContentType = "application/json; charset=utf-8";

    this.baseUri = options.endpoint || "http://localhost:3000";

    // Assigning values to Constant parameters
    this.$host = options.$host || "http://localhost:3000";
  }
}
