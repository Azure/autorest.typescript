/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LROClient } from "../lROClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  LROsCustomHeaderPutAsyncRetrySucceededOptionalParams,
  LROsCustomHeaderPutAsyncRetrySucceededResponse,
  LROsCustomHeaderPut201CreatingSucceeded200OptionalParams,
  LROsCustomHeaderPut201CreatingSucceeded200Response,
  LROsCustomHeaderPost202Retry200OptionalParams,
  LROsCustomHeaderPost202Retry200Response,
  LROsCustomHeaderPostAsyncRetrySucceededOptionalParams,
  LROsCustomHeaderPostAsyncRetrySucceededResponse
} from "../models";

/**
 * Class representing a LROsCustomHeader.
 */
export class LROsCustomHeader {
  private readonly client: LROClient;

  /**
   * Initialize a new instance of the class LROsCustomHeader class.
   * @param client Reference to the service client
   */
  constructor(client: LROClient) {
    this.client = client;
  }

  /**
   * x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required message header for all
   * requests. Long running put request, service returns a 200 to the initial request, with an entity
   * that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async putAsyncRetrySucceeded(
    options?: LROsCustomHeaderPutAsyncRetrySucceededOptionalParams
  ): Promise<LROPoller<LROsCustomHeaderPutAsyncRetrySucceededResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LROsCustomHeaderPutAsyncRetrySucceededResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      putAsyncRetrySucceededOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: putAsyncRetrySucceededOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required message header for all
   * requests. Long running put request, service returns a 201 to the initial request, with an entity
   * that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  async put201CreatingSucceeded200(
    options?: LROsCustomHeaderPut201CreatingSucceeded200OptionalParams
  ): Promise<LROPoller<LROsCustomHeaderPut201CreatingSucceeded200Response>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LROsCustomHeaderPut201CreatingSucceeded200Response
      >;
    const initialOperationResult = await sendOperation(
      args,
      put201CreatingSucceeded200OperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: put201CreatingSucceeded200OperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required message header for all
   * requests. Long running post request, service returns a 202 to the initial request, with 'Location'
   * and 'Retry-After' headers, Polls return a 200 with a response body after success
   * @param options The options parameters.
   */
  async post202Retry200(
    options?: LROsCustomHeaderPost202Retry200OptionalParams
  ): Promise<LROPoller<LROsCustomHeaderPost202Retry200Response>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LROsCustomHeaderPost202Retry200Response
      >;
    const initialOperationResult = await sendOperation(
      args,
      post202Retry200OperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: post202Retry200OperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required message header for all
   * requests. Long running post request, service returns a 202 to the initial request, with an entity
   * that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async postAsyncRetrySucceeded(
    options?: LROsCustomHeaderPostAsyncRetrySucceededOptionalParams
  ): Promise<LROPoller<LROsCustomHeaderPostAsyncRetrySucceededResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LROsCustomHeaderPostAsyncRetrySucceededResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      postAsyncRetrySucceededOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: postAsyncRetrySucceededOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const putAsyncRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/customheader/putasync/retry/succeeded",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsCustomHeaderPutAsyncRetrySucceededHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsCustomHeaderPutAsyncRetrySucceededHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsCustomHeaderPutAsyncRetrySucceededHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsCustomHeaderPutAsyncRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const put201CreatingSucceeded200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/customheader/put/201/creating/succeeded/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const post202Retry200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/customheader/post/202/retry/200",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LROsCustomHeaderPost202Retry200Headers
    },
    201: {
      headersMapper: Mappers.LROsCustomHeaderPost202Retry200Headers
    },
    202: {
      headersMapper: Mappers.LROsCustomHeaderPost202Retry200Headers
    },
    204: {
      headersMapper: Mappers.LROsCustomHeaderPost202Retry200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const postAsyncRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/customheader/postasync/retry/succeeded",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LROsCustomHeaderPostAsyncRetrySucceededHeaders
    },
    201: {
      headersMapper: Mappers.LROsCustomHeaderPostAsyncRetrySucceededHeaders
    },
    202: {
      headersMapper: Mappers.LROsCustomHeaderPostAsyncRetrySucceededHeaders
    },
    204: {
      headersMapper: Mappers.LROsCustomHeaderPostAsyncRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
