/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroClient } from "../lroClient";
import {
  LROsPut200SucceededOptionalParams,
  LROsPut200SucceededResponse,
  LROsPut200SucceededNoStateOptionalParams,
  LROsPut200SucceededNoStateResponse,
  LROsPut202Retry200OptionalParams,
  LROsPut202Retry200Response,
  LROsPut201CreatingSucceeded200OptionalParams,
  LROsPut201CreatingSucceeded200Response,
  LROsPut200UpdatingSucceeded204OptionalParams,
  LROsPut200UpdatingSucceeded204Response,
  LROsPut201CreatingFailed200OptionalParams,
  LROsPut201CreatingFailed200Response,
  LROsPut200Acceptedcanceled200OptionalParams,
  LROsPut200Acceptedcanceled200Response,
  LROsPutNoHeaderInRetryOptionalParams,
  LROsPutNoHeaderInRetryResponse,
  LROsPutAsyncRetrySucceededOptionalParams,
  LROsPutAsyncRetrySucceededResponse,
  LROsPutAsyncNoRetrySucceededOptionalParams,
  LROsPutAsyncNoRetrySucceededResponse,
  LROsPutAsyncRetryFailedOptionalParams,
  LROsPutAsyncRetryFailedResponse,
  LROsPutAsyncNoRetrycanceledOptionalParams,
  LROsPutAsyncNoRetrycanceledResponse,
  LROsPutAsyncNoHeaderInRetryOptionalParams,
  LROsPutAsyncNoHeaderInRetryResponse,
  LROsPutNonResourceOptionalParams,
  LROsPutNonResourceResponse,
  LROsPutAsyncNonResourceOptionalParams,
  LROsPutAsyncNonResourceResponse,
  LROsPutSubResourceOptionalParams,
  LROsPutSubResourceResponse,
  LROsPutAsyncSubResourceOptionalParams,
  LROsPutAsyncSubResourceResponse,
  LROsDeleteProvisioning202Accepted200SucceededResponse,
  LROsDeleteProvisioning202DeletingFailed200Response,
  LROsDeleteProvisioning202Deletingcanceled200Response,
  LROsDelete202Retry200Response,
  LROsDelete202NoRetry204Response,
  LROsDeleteNoHeaderInRetryResponse,
  LROsDeleteAsyncNoHeaderInRetryResponse,
  LROsDeleteAsyncRetrySucceededResponse,
  LROsDeleteAsyncNoRetrySucceededResponse,
  LROsDeleteAsyncRetryFailedResponse,
  LROsDeleteAsyncRetrycanceledResponse,
  LROsPost200WithPayloadResponse,
  LROsPost202Retry200OptionalParams,
  LROsPost202Retry200Response,
  LROsPost202NoRetry204OptionalParams,
  LROsPost202NoRetry204Response,
  LROsPostDoubleHeadersFinalLocationGetResponse,
  LROsPostDoubleHeadersFinalAzureHeaderGetResponse,
  LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse,
  LROsPostAsyncRetrySucceededOptionalParams,
  LROsPostAsyncRetrySucceededResponse,
  LROsPostAsyncNoRetrySucceededOptionalParams,
  LROsPostAsyncNoRetrySucceededResponse,
  LROsPostAsyncRetryFailedOptionalParams,
  LROsPostAsyncRetryFailedResponse,
  LROsPostAsyncRetrycanceledOptionalParams,
  LROsPostAsyncRetrycanceledResponse
} from "../models";

import { LROPoller } from "../lro/LROPoller";

/**
 * Class representing a LROs.
 */
export class LROs {
  private readonly client: LroClient;

  /**
   * Initialize a new instance of the class LROs class.
   * @param client Reference to the service client
   */
  constructor(client: LroClient) {
    this.client = client;
  }

/**
 * 
 *  START PROTOTYPE
 * 
 */

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Succeeded’.
   * @param options The options parameters.
   */
  async put200Succeeded(
    options?: LROsPut200SucceededOptionalParams
  ): Promise<LROPoller<LROsPut200SucceededResponse>> {
    const poller = new LROPoller<LROsPut200SucceededResponse>({
      initialOperationArguments: { options },
      initialOperationSpec: put200SucceededOperationSpec,
      sendOperationRequest: (
        args: coreHttp.OperationArguments,
        spec: coreHttp.OperationSpec
      ) => this.client.sendOperationRequest(args, spec) as any
    });

    console.log("Running inital poll");
    await poller.poll();
    console.log("Returning poller");
    return poller;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that does not
   * contain ProvisioningState=’Succeeded’.
   * @param options The options parameters.
   */
  async put200SucceededNoState(
    options?: LROsPut200SucceededNoStateOptionalParams
  ): Promise<LROPoller<LROsPut200SucceededNoStateResponse>> {
    const poller = new LROPoller<LROsPut200SucceededNoStateResponse>({
      initialOperationArguments: { options },
      initialOperationSpec: put200SucceededNoStateOperationSpec,
      sendOperationRequest: (
        args: coreHttp.OperationArguments,
        spec: coreHttp.OperationSpec
      ) => this.client.sendOperationRequest(args, spec) as any
    });

    await poller.poll();
    return poller;
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
   * ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  async put201CreatingSucceeded200(
    options?: LROsPut201CreatingSucceeded200OptionalParams
  ): Promise<LROPoller<LROsPut201CreatingSucceeded200Response>> {
    const poller = new LROPoller<LROsPut201CreatingSucceeded200Response>({
      initialOperationArguments: { options },
      initialOperationSpec: put201CreatingSucceeded200OperationSpec,
      sendOperationRequest: (
        args: coreHttp.OperationArguments,
        spec: coreHttp.OperationSpec
      ) => this.client.sendOperationRequest(args, spec) as any
    });

    await poller.poll();
    return poller;
  }

  /**
 * 
 *  PROTOTYPE END
 * 
 */


   /**
   * Long running put request, service returns a 202 to the initial request, with a location header that
   * points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
   * @param options The options parameters.
   */
  put202Retry200(
    options?: LROsPut202Retry200OptionalParams
  ): Promise<LROsPut202Retry200Response> {
    return this.client.sendOperationRequest(
      { options },
      put202Retry200OperationSpec
    ) as Promise<LROsPut202Retry200Response>;
  }


  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that contains
   * ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with
   * ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  put200UpdatingSucceeded204(
    options?: LROsPut200UpdatingSucceeded204OptionalParams
  ): Promise<LROsPut200UpdatingSucceeded204Response> {
    return this.client.sendOperationRequest(
      { options },
      put200UpdatingSucceeded204OperationSpec
    ) as Promise<LROsPut200UpdatingSucceeded204Response>;
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that contains
   * ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with
   * ProvisioningState=’Failed’
   * @param options The options parameters.
   */
  put201CreatingFailed200(
    options?: LROsPut201CreatingFailed200OptionalParams
  ): Promise<LROsPut201CreatingFailed200Response> {
    return this.client.sendOperationRequest(
      { options },
      put201CreatingFailed200OperationSpec
    ) as Promise<LROsPut201CreatingFailed200Response>;
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
   * ProvisioningState=’Canceled’
   * @param options The options parameters.
   */
  put200Acceptedcanceled200(
    options?: LROsPut200Acceptedcanceled200OptionalParams
  ): Promise<LROsPut200Acceptedcanceled200Response> {
    return this.client.sendOperationRequest(
      { options },
      put200Acceptedcanceled200OperationSpec
    ) as Promise<LROsPut200Acceptedcanceled200Response>;
  }

  /**
   * Long running put request, service returns a 202 to the initial request with location header.
   * Subsequent calls to operation status do not contain location header.
   * @param options The options parameters.
   */
  putNoHeaderInRetry(
    options?: LROsPutNoHeaderInRetryOptionalParams
  ): Promise<LROsPutNoHeaderInRetryResponse> {
    return this.client.sendOperationRequest(
      { options },
      putNoHeaderInRetryOperationSpec
    ) as Promise<LROsPutNoHeaderInRetryResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  putAsyncRetrySucceeded(
    options?: LROsPutAsyncRetrySucceededOptionalParams
  ): Promise<LROsPutAsyncRetrySucceededResponse> {
    return this.client.sendOperationRequest(
      { options },
      putAsyncRetrySucceededOperationSpec
    ) as Promise<LROsPutAsyncRetrySucceededResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  putAsyncNoRetrySucceeded(
    options?: LROsPutAsyncNoRetrySucceededOptionalParams
  ): Promise<LROsPutAsyncNoRetrySucceededResponse> {
    return this.client.sendOperationRequest(
      { options },
      putAsyncNoRetrySucceededOperationSpec
    ) as Promise<LROsPutAsyncNoRetrySucceededResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  putAsyncRetryFailed(
    options?: LROsPutAsyncRetryFailedOptionalParams
  ): Promise<LROsPutAsyncRetryFailedResponse> {
    return this.client.sendOperationRequest(
      { options },
      putAsyncRetryFailedOperationSpec
    ) as Promise<LROsPutAsyncRetryFailedResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  putAsyncNoRetrycanceled(
    options?: LROsPutAsyncNoRetrycanceledOptionalParams
  ): Promise<LROsPutAsyncNoRetrycanceledResponse> {
    return this.client.sendOperationRequest(
      { options },
      putAsyncNoRetrycanceledOperationSpec
    ) as Promise<LROsPutAsyncNoRetrycanceledResponse>;
  }

  /**
   * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation
   * header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   * @param options The options parameters.
   */
  putAsyncNoHeaderInRetry(
    options?: LROsPutAsyncNoHeaderInRetryOptionalParams
  ): Promise<LROsPutAsyncNoHeaderInRetryResponse> {
    return this.client.sendOperationRequest(
      { options },
      putAsyncNoHeaderInRetryOperationSpec
    ) as Promise<LROsPutAsyncNoHeaderInRetryResponse>;
  }

  /**
   * Long running put request with non resource.
   * @param options The options parameters.
   */
  putNonResource(
    options?: LROsPutNonResourceOptionalParams
  ): Promise<LROsPutNonResourceResponse> {
    return this.client.sendOperationRequest(
      { options },
      putNonResourceOperationSpec
    ) as Promise<LROsPutNonResourceResponse>;
  }

  /**
   * Long running put request with non resource.
   * @param options The options parameters.
   */
  putAsyncNonResource(
    options?: LROsPutAsyncNonResourceOptionalParams
  ): Promise<LROsPutAsyncNonResourceResponse> {
    return this.client.sendOperationRequest(
      { options },
      putAsyncNonResourceOperationSpec
    ) as Promise<LROsPutAsyncNonResourceResponse>;
  }

  /**
   * Long running put request with sub resource.
   * @param options The options parameters.
   */
  putSubResource(
    options?: LROsPutSubResourceOptionalParams
  ): Promise<LROsPutSubResourceResponse> {
    return this.client.sendOperationRequest(
      { options },
      putSubResourceOperationSpec
    ) as Promise<LROsPutSubResourceResponse>;
  }

  /**
   * Long running put request with sub resource.
   * @param options The options parameters.
   */
  putAsyncSubResource(
    options?: LROsPutAsyncSubResourceOptionalParams
  ): Promise<LROsPutAsyncSubResourceResponse> {
    return this.client.sendOperationRequest(
      { options },
      putAsyncSubResourceOperationSpec
    ) as Promise<LROsPutAsyncSubResourceResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’
   * with ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  deleteProvisioning202Accepted200Succeeded(
    options?: coreHttp.OperationOptions
  ): Promise<LROsDeleteProvisioning202Accepted200SucceededResponse> {
    return this.client.sendOperationRequest(
      { options },
      deleteProvisioning202Accepted200SucceededOperationSpec
    ) as Promise<LROsDeleteProvisioning202Accepted200SucceededResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’
   * with ProvisioningState=’Failed’
   * @param options The options parameters.
   */
  deleteProvisioning202DeletingFailed200(
    options?: coreHttp.OperationOptions
  ): Promise<LROsDeleteProvisioning202DeletingFailed200Response> {
    return this.client.sendOperationRequest(
      { options },
      deleteProvisioning202DeletingFailed200OperationSpec
    ) as Promise<LROsDeleteProvisioning202DeletingFailed200Response>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’
   * with ProvisioningState=’Canceled’
   * @param options The options parameters.
   */
  deleteProvisioning202Deletingcanceled200(
    options?: coreHttp.OperationOptions
  ): Promise<LROsDeleteProvisioning202Deletingcanceled200Response> {
    return this.client.sendOperationRequest(
      { options },
      deleteProvisioning202Deletingcanceled200OperationSpec
    ) as Promise<LROsDeleteProvisioning202Deletingcanceled200Response>;
  }

  /**
   * Long running delete succeeds and returns right away
   * @param options The options parameters.
   */
  delete204Succeeded(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      { options },
      delete204SucceededOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this value
   * until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  delete202Retry200(
    options?: coreHttp.OperationOptions
  ): Promise<LROsDelete202Retry200Response> {
    return this.client.sendOperationRequest(
      { options },
      delete202Retry200OperationSpec
    ) as Promise<LROsDelete202Retry200Response>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this value
   * until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  delete202NoRetry204(
    options?: coreHttp.OperationOptions
  ): Promise<LROsDelete202NoRetry204Response> {
    return this.client.sendOperationRequest(
      { options },
      delete202NoRetry204OperationSpec
    ) as Promise<LROsDelete202NoRetry204Response>;
  }

  /**
   * Long running delete request, service returns a location header in the initial request. Subsequent
   * calls to operation status do not contain location header.
   * @param options The options parameters.
   */
  deleteNoHeaderInRetry(
    options?: coreHttp.OperationOptions
  ): Promise<LROsDeleteNoHeaderInRetryResponse> {
    return this.client.sendOperationRequest(
      { options },
      deleteNoHeaderInRetryOperationSpec
    ) as Promise<LROsDeleteNoHeaderInRetryResponse>;
  }

  /**
   * Long running delete request, service returns an Azure-AsyncOperation header in the initial request.
   * Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   * @param options The options parameters.
   */
  deleteAsyncNoHeaderInRetry(
    options?: coreHttp.OperationOptions
  ): Promise<LROsDeleteAsyncNoHeaderInRetryResponse> {
    return this.client.sendOperationRequest(
      { options },
      deleteAsyncNoHeaderInRetryOperationSpec
    ) as Promise<LROsDeleteAsyncNoHeaderInRetryResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  deleteAsyncRetrySucceeded(
    options?: coreHttp.OperationOptions
  ): Promise<LROsDeleteAsyncRetrySucceededResponse> {
    return this.client.sendOperationRequest(
      { options },
      deleteAsyncRetrySucceededOperationSpec
    ) as Promise<LROsDeleteAsyncRetrySucceededResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  deleteAsyncNoRetrySucceeded(
    options?: coreHttp.OperationOptions
  ): Promise<LROsDeleteAsyncNoRetrySucceededResponse> {
    return this.client.sendOperationRequest(
      { options },
      deleteAsyncNoRetrySucceededOperationSpec
    ) as Promise<LROsDeleteAsyncNoRetrySucceededResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  deleteAsyncRetryFailed(
    options?: coreHttp.OperationOptions
  ): Promise<LROsDeleteAsyncRetryFailedResponse> {
    return this.client.sendOperationRequest(
      { options },
      deleteAsyncRetryFailedOperationSpec
    ) as Promise<LROsDeleteAsyncRetryFailedResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  deleteAsyncRetrycanceled(
    options?: coreHttp.OperationOptions
  ): Promise<LROsDeleteAsyncRetrycanceledResponse> {
    return this.client.sendOperationRequest(
      { options },
      deleteAsyncRetrycanceledOperationSpec
    ) as Promise<LROsDeleteAsyncRetrycanceledResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header.
   * Poll returns a 200 with a response body after success.
   * @param options The options parameters.
   */
  post200WithPayload(
    options?: coreHttp.OperationOptions
  ): Promise<LROsPost200WithPayloadResponse> {
    return this.client.sendOperationRequest(
      { options },
      post200WithPayloadOperationSpec
    ) as Promise<LROsPost200WithPayloadResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' and
   * 'Retry-After' headers, Polls return a 200 with a response body after success
   * @param options The options parameters.
   */
  post202Retry200(
    options?: LROsPost202Retry200OptionalParams
  ): Promise<LROsPost202Retry200Response> {
    return this.client.sendOperationRequest(
      { options },
      post202Retry200OperationSpec
    ) as Promise<LROsPost202Retry200Response>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204
   * with noresponse body after success
   * @param options The options parameters.
   */
  post202NoRetry204(
    options?: LROsPost202NoRetry204OptionalParams
  ): Promise<LROsPost202NoRetry204Response> {
    return this.client.sendOperationRequest(
      { options },
      post202NoRetry204OperationSpec
    ) as Promise<LROsPost202NoRetry204Response>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should poll Location to get the final object
   * @param options The options parameters.
   */
  postDoubleHeadersFinalLocationGet(
    options?: coreHttp.OperationOptions
  ): Promise<LROsPostDoubleHeadersFinalLocationGetResponse> {
    return this.client.sendOperationRequest(
      { options },
      postDoubleHeadersFinalLocationGetOperationSpec
    ) as Promise<LROsPostDoubleHeadersFinalLocationGetResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object
   * @param options The options parameters.
   */
  postDoubleHeadersFinalAzureHeaderGet(
    options?: coreHttp.OperationOptions
  ): Promise<LROsPostDoubleHeadersFinalAzureHeaderGetResponse> {
    return this.client.sendOperationRequest(
      { options },
      postDoubleHeadersFinalAzureHeaderGetOperationSpec
    ) as Promise<LROsPostDoubleHeadersFinalAzureHeaderGetResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object if you support initial Autorest behavior.
   * @param options The options parameters.
   */
  postDoubleHeadersFinalAzureHeaderGetDefault(
    options?: coreHttp.OperationOptions
  ): Promise<LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse> {
    return this.client.sendOperationRequest(
      { options },
      postDoubleHeadersFinalAzureHeaderGetDefaultOperationSpec
    ) as Promise<LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  postAsyncRetrySucceeded(
    options?: LROsPostAsyncRetrySucceededOptionalParams
  ): Promise<LROsPostAsyncRetrySucceededResponse> {
    return this.client.sendOperationRequest(
      { options },
      postAsyncRetrySucceededOperationSpec
    ) as Promise<LROsPostAsyncRetrySucceededResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  postAsyncNoRetrySucceeded(
    options?: LROsPostAsyncNoRetrySucceededOptionalParams
  ): Promise<LROsPostAsyncNoRetrySucceededResponse> {
    return this.client.sendOperationRequest(
      { options },
      postAsyncNoRetrySucceededOperationSpec
    ) as Promise<LROsPostAsyncNoRetrySucceededResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  postAsyncRetryFailed(
    options?: LROsPostAsyncRetryFailedOptionalParams
  ): Promise<LROsPostAsyncRetryFailedResponse> {
    return this.client.sendOperationRequest(
      { options },
      postAsyncRetryFailedOperationSpec
    ) as Promise<LROsPostAsyncRetryFailedResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  postAsyncRetrycanceled(
    options?: LROsPostAsyncRetrycanceledOptionalParams
  ): Promise<LROsPostAsyncRetrycanceledResponse> {
    return this.client.sendOperationRequest(
      { options },
      postAsyncRetrycanceledOperationSpec
    ) as Promise<LROsPostAsyncRetrycanceledResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const put200SucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/200/succeeded",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const put200SucceededNoStateOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/200/succeeded/nostate",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const put202Retry200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/202/retry/200",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const put201CreatingSucceeded200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/201/creating/succeeded/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const put200UpdatingSucceeded204OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/200/updating/succeeded/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const put201CreatingFailed200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/201/created/failed/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const put200Acceptedcanceled200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/200/accepted/canceled/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putNoHeaderInRetryOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/noheader/202/200",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putAsyncRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putasync/retry/succeeded",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putAsyncNoRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putasync/noretry/succeeded",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putAsyncRetryFailedOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putasync/retry/failed",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetryFailedHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putAsyncNoRetrycanceledOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putasync/noretry/canceled",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrycanceledHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putAsyncNoHeaderInRetryOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putasync/noheader/201/200",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putNonResourceOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putnonresource/202/200",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.Sku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.sku,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putAsyncNonResourceOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putnonresourceasync/202/200",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.Sku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.sku1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putSubResourceOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putsubresource/202/200",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.SubProduct
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putAsyncSubResourceOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putsubresourceasync/202/200",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.SubProduct
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteProvisioning202Accepted200SucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/provisioning/202/accepted/200/succeeded",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper:
        Mappers.LROsDeleteProvisioning202Accepted200SucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteProvisioning202DeletingFailed200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/provisioning/202/deleting/200/failed",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202DeletingFailed200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteProvisioning202Deletingcanceled200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/provisioning/202/deleting/200/canceled",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202Deletingcanceled200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const delete204SucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/204/succeeded",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const delete202Retry200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/202/retry/200",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    202: {
      headersMapper: Mappers.LROsDelete202Retry200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const delete202NoRetry204OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/202/noretry/204",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    202: {
      headersMapper: Mappers.LROsDelete202NoRetry204Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteNoHeaderInRetryOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/noheader",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteNoHeaderInRetryHeaders
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteAsyncNoHeaderInRetryOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/deleteasync/noheader/202/204",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncNoHeaderInRetryHeaders
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteAsyncRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/deleteasync/retry/succeeded",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteAsyncNoRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/deleteasync/noretry/succeeded",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncNoRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteAsyncRetryFailedOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/deleteasync/retry/failed",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncRetryFailedHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteAsyncRetrycanceledOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/deleteasync/retry/canceled",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncRetrycanceledHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const post200WithPayloadOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/post/payload/200",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Sku
    },
    202: {
      bodyMapper: Mappers.Sku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const post202Retry200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/post/202/retry/200",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.LROsPost202Retry200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const post202NoRetry204OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/post/202/noretry/204",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPost202NoRetry204Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const postDoubleHeadersFinalLocationGetOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/LROPostDoubleHeadersFinalLocationGet",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const postDoubleHeadersFinalAzureHeaderGetOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/LROPostDoubleHeadersFinalAzureHeaderGet",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const postDoubleHeadersFinalAzureHeaderGetDefaultOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/LROPostDoubleHeadersFinalAzureHeaderGetDefault",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const postAsyncRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/postasync/retry/succeeded",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    202: {
      headersMapper: Mappers.LROsPostAsyncRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const postAsyncNoRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/postasync/noretry/succeeded",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    202: {
      headersMapper: Mappers.LROsPostAsyncNoRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const postAsyncRetryFailedOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/postasync/retry/failed",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.LROsPostAsyncRetryFailedHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const postAsyncRetrycanceledOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/postasync/retry/canceled",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.LROsPostAsyncRetrycanceledHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
