/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { LROs } from "../operationsInterfaces";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LROClientContext } from "../lROClientContext";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  LROsPut200SucceededOptionalParams,
  LROsPut200SucceededResponse,
  LROsPut201SucceededOptionalParams,
  LROsPut201SucceededResponse,
  LROsPost202ListOptionalParams,
  LROsPost202ListResponse,
  LROsPut200SucceededNoStateOptionalParams,
  LROsPut200SucceededNoStateResponse,
  LROsPut202Retry200OptionalParams,
  LROsPut202Retry200Response,
  LROsPut201CreatingSucceeded200OptionalParams,
  LROsPut201CreatingSucceeded200Response,
  LROsPut200UpdatingSucceeded204OptionalParams,
  LROsPut200UpdatingSucceeded204Response,
  LROsPut201CreatingFailed200OptionalParams,
  LROsPut201CreatingFailed200Response,
  LROsPut200Acceptedcanceled200OptionalParams,
  LROsPut200Acceptedcanceled200Response,
  LROsPutNoHeaderInRetryOptionalParams,
  LROsPutNoHeaderInRetryResponse,
  LROsPutAsyncRetrySucceededOptionalParams,
  LROsPutAsyncRetrySucceededResponse,
  LROsPutAsyncNoRetrySucceededOptionalParams,
  LROsPutAsyncNoRetrySucceededResponse,
  LROsPutAsyncRetryFailedOptionalParams,
  LROsPutAsyncRetryFailedResponse,
  LROsPutAsyncNoRetrycanceledOptionalParams,
  LROsPutAsyncNoRetrycanceledResponse,
  LROsPutAsyncNoHeaderInRetryOptionalParams,
  LROsPutAsyncNoHeaderInRetryResponse,
  LROsPutNonResourceOptionalParams,
  LROsPutNonResourceResponse,
  LROsPutAsyncNonResourceOptionalParams,
  LROsPutAsyncNonResourceResponse,
  LROsPutSubResourceOptionalParams,
  LROsPutSubResourceResponse,
  LROsPutAsyncSubResourceOptionalParams,
  LROsPutAsyncSubResourceResponse,
  LROsDeleteProvisioning202Accepted200SucceededOptionalParams,
  LROsDeleteProvisioning202Accepted200SucceededResponse,
  LROsDeleteProvisioning202DeletingFailed200OptionalParams,
  LROsDeleteProvisioning202DeletingFailed200Response,
  LROsDeleteProvisioning202Deletingcanceled200OptionalParams,
  LROsDeleteProvisioning202Deletingcanceled200Response,
  LROsDelete204SucceededOptionalParams,
  LROsDelete202Retry200OptionalParams,
  LROsDelete202Retry200Response,
  LROsDelete202NoRetry204OptionalParams,
  LROsDelete202NoRetry204Response,
  LROsDeleteNoHeaderInRetryOptionalParams,
  LROsDeleteNoHeaderInRetryResponse,
  LROsDeleteAsyncNoHeaderInRetryOptionalParams,
  LROsDeleteAsyncNoHeaderInRetryResponse,
  LROsDeleteAsyncRetrySucceededOptionalParams,
  LROsDeleteAsyncRetrySucceededResponse,
  LROsDeleteAsyncNoRetrySucceededOptionalParams,
  LROsDeleteAsyncNoRetrySucceededResponse,
  LROsDeleteAsyncRetryFailedOptionalParams,
  LROsDeleteAsyncRetryFailedResponse,
  LROsDeleteAsyncRetrycanceledOptionalParams,
  LROsDeleteAsyncRetrycanceledResponse,
  LROsPost200WithPayloadOptionalParams,
  LROsPost200WithPayloadResponse,
  LROsPost202Retry200OptionalParams,
  LROsPost202Retry200Response,
  LROsPost202NoRetry204OptionalParams,
  LROsPost202NoRetry204Response,
  LROsPostDoubleHeadersFinalLocationGetOptionalParams,
  LROsPostDoubleHeadersFinalLocationGetResponse,
  LROsPostDoubleHeadersFinalAzureHeaderGetOptionalParams,
  LROsPostDoubleHeadersFinalAzureHeaderGetResponse,
  LROsPostDoubleHeadersFinalAzureHeaderGetDefaultOptionalParams,
  LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse,
  LROsPostAsyncRetrySucceededOptionalParams,
  LROsPostAsyncRetrySucceededResponse,
  LROsPostAsyncNoRetrySucceededOptionalParams,
  LROsPostAsyncNoRetrySucceededResponse,
  LROsPostAsyncRetryFailedOptionalParams,
  LROsPostAsyncRetryFailedResponse,
  LROsPostAsyncRetrycanceledOptionalParams,
  LROsPostAsyncRetrycanceledResponse
} from "../models";

/** Class representing a LROs. */
export class LROsImpl implements LROs {
  private readonly client: LROClientContext;

  /**
   * Initialize a new instance of the class LROs class.
   * @param client Reference to the service client
   */
  constructor(client: LROClientContext) {
    this.client = client;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Succeeded’.
   * @param options The options parameters.
   */
  async put200Succeeded(
    options?: LROsPut200SucceededOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPut200SucceededResponse>,
      LROsPut200SucceededResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPut200SucceededResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      put200SucceededOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that contains
   * ProvisioningState=’Succeeded’.
   * @param options The options parameters.
   */
  async put201Succeeded(
    options?: LROsPut201SucceededOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPut201SucceededResponse>,
      LROsPut201SucceededResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPut201SucceededResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      put201SucceededOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 202 with empty body to first request, returns a 200 with
   * body [{ 'id': '100', 'name': 'foo' }].
   * @param options The options parameters.
   */
  async post202List(
    options?: LROsPost202ListOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPost202ListResponse>,
      LROsPost202ListResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPost202ListResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      post202ListOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that does not
   * contain ProvisioningState=’Succeeded’.
   * @param options The options parameters.
   */
  async put200SucceededNoState(
    options?: LROsPut200SucceededNoStateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPut200SucceededNoStateResponse>,
      LROsPut200SucceededNoStateResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPut200SucceededNoStateResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      put200SucceededNoStateOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 202 to the initial request, with a location header that
   * points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
   * @param options The options parameters.
   */
  async put202Retry200(
    options?: LROsPut202Retry200OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPut202Retry200Response>,
      LROsPut202Retry200Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPut202Retry200Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      put202Retry200OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
   * ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  async put201CreatingSucceeded200(
    options?: LROsPut201CreatingSucceeded200OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPut201CreatingSucceeded200Response>,
      LROsPut201CreatingSucceeded200Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPut201CreatingSucceeded200Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      put201CreatingSucceeded200OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that contains
   * ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with
   * ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  async put200UpdatingSucceeded204(
    options?: LROsPut200UpdatingSucceeded204OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPut200UpdatingSucceeded204Response>,
      LROsPut200UpdatingSucceeded204Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPut200UpdatingSucceeded204Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      put200UpdatingSucceeded204OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that contains
   * ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with
   * ProvisioningState=’Failed’
   * @param options The options parameters.
   */
  async put201CreatingFailed200(
    options?: LROsPut201CreatingFailed200OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPut201CreatingFailed200Response>,
      LROsPut201CreatingFailed200Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPut201CreatingFailed200Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      put201CreatingFailed200OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
   * ProvisioningState=’Canceled’
   * @param options The options parameters.
   */
  async put200Acceptedcanceled200(
    options?: LROsPut200Acceptedcanceled200OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPut200Acceptedcanceled200Response>,
      LROsPut200Acceptedcanceled200Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPut200Acceptedcanceled200Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      put200Acceptedcanceled200OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 202 to the initial request with location header.
   * Subsequent calls to operation status do not contain location header.
   * @param options The options parameters.
   */
  async putNoHeaderInRetry(
    options?: LROsPutNoHeaderInRetryOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPutNoHeaderInRetryResponse>,
      LROsPutNoHeaderInRetryResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPutNoHeaderInRetryResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putNoHeaderInRetryOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  async putAsyncRetrySucceeded(
    options?: LROsPutAsyncRetrySucceededOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPutAsyncRetrySucceededResponse>,
      LROsPutAsyncRetrySucceededResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPutAsyncRetrySucceededResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putAsyncRetrySucceededOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  async putAsyncNoRetrySucceeded(
    options?: LROsPutAsyncNoRetrySucceededOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPutAsyncNoRetrySucceededResponse>,
      LROsPutAsyncNoRetrySucceededResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPutAsyncNoRetrySucceededResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putAsyncNoRetrySucceededOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  async putAsyncRetryFailed(
    options?: LROsPutAsyncRetryFailedOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPutAsyncRetryFailedResponse>,
      LROsPutAsyncRetryFailedResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPutAsyncRetryFailedResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putAsyncRetryFailedOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  async putAsyncNoRetrycanceled(
    options?: LROsPutAsyncNoRetrycanceledOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPutAsyncNoRetrycanceledResponse>,
      LROsPutAsyncNoRetrycanceledResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPutAsyncNoRetrycanceledResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putAsyncNoRetrycanceledOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation
   * header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   * @param options The options parameters.
   */
  async putAsyncNoHeaderInRetry(
    options?: LROsPutAsyncNoHeaderInRetryOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPutAsyncNoHeaderInRetryResponse>,
      LROsPutAsyncNoHeaderInRetryResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPutAsyncNoHeaderInRetryResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putAsyncNoHeaderInRetryOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request with non resource.
   * @param options The options parameters.
   */
  async putNonResource(
    options?: LROsPutNonResourceOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPutNonResourceResponse>,
      LROsPutNonResourceResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPutNonResourceResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putNonResourceOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request with non resource.
   * @param options The options parameters.
   */
  async putAsyncNonResource(
    options?: LROsPutAsyncNonResourceOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPutAsyncNonResourceResponse>,
      LROsPutAsyncNonResourceResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPutAsyncNonResourceResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putAsyncNonResourceOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request with sub resource.
   * @param options The options parameters.
   */
  async putSubResource(
    options?: LROsPutSubResourceOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPutSubResourceResponse>,
      LROsPutSubResourceResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPutSubResourceResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putSubResourceOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request with sub resource.
   * @param options The options parameters.
   */
  async putAsyncSubResource(
    options?: LROsPutAsyncSubResourceOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPutAsyncSubResourceResponse>,
      LROsPutAsyncSubResourceResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPutAsyncSubResourceResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putAsyncSubResourceOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’
   * with ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  async deleteProvisioning202Accepted200Succeeded(
    options?: LROsDeleteProvisioning202Accepted200SucceededOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsDeleteProvisioning202Accepted200SucceededResponse>,
      LROsDeleteProvisioning202Accepted200SucceededResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsDeleteProvisioning202Accepted200SucceededResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteProvisioning202Accepted200SucceededOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’
   * with ProvisioningState=’Failed’
   * @param options The options parameters.
   */
  async deleteProvisioning202DeletingFailed200(
    options?: LROsDeleteProvisioning202DeletingFailed200OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsDeleteProvisioning202DeletingFailed200Response>,
      LROsDeleteProvisioning202DeletingFailed200Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsDeleteProvisioning202DeletingFailed200Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteProvisioning202DeletingFailed200OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’
   * with ProvisioningState=’Canceled’
   * @param options The options parameters.
   */
  async deleteProvisioning202Deletingcanceled200(
    options?: LROsDeleteProvisioning202Deletingcanceled200OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsDeleteProvisioning202Deletingcanceled200Response>,
      LROsDeleteProvisioning202Deletingcanceled200Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsDeleteProvisioning202Deletingcanceled200Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteProvisioning202Deletingcanceled200OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete succeeds and returns right away
   * @param options The options parameters.
   */
  async delete204Succeeded(
    options?: LROsDelete204SucceededOptionalParams
  ): Promise<
    PollerLike<PollOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      delete204SucceededOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this value
   * until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  async delete202Retry200(
    options?: LROsDelete202Retry200OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsDelete202Retry200Response>,
      LROsDelete202Retry200Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsDelete202Retry200Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      delete202Retry200OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this value
   * until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  async delete202NoRetry204(
    options?: LROsDelete202NoRetry204OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsDelete202NoRetry204Response>,
      LROsDelete202NoRetry204Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsDelete202NoRetry204Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      delete202NoRetry204OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a location header in the initial request. Subsequent
   * calls to operation status do not contain location header.
   * @param options The options parameters.
   */
  async deleteNoHeaderInRetry(
    options?: LROsDeleteNoHeaderInRetryOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsDeleteNoHeaderInRetryResponse>,
      LROsDeleteNoHeaderInRetryResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsDeleteNoHeaderInRetryResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteNoHeaderInRetryOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns an Azure-AsyncOperation header in the initial request.
   * Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   * @param options The options parameters.
   */
  async deleteAsyncNoHeaderInRetry(
    options?: LROsDeleteAsyncNoHeaderInRetryOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsDeleteAsyncNoHeaderInRetryResponse>,
      LROsDeleteAsyncNoHeaderInRetryResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsDeleteAsyncNoHeaderInRetryResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteAsyncNoHeaderInRetryOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async deleteAsyncRetrySucceeded(
    options?: LROsDeleteAsyncRetrySucceededOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsDeleteAsyncRetrySucceededResponse>,
      LROsDeleteAsyncRetrySucceededResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsDeleteAsyncRetrySucceededResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteAsyncRetrySucceededOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async deleteAsyncNoRetrySucceeded(
    options?: LROsDeleteAsyncNoRetrySucceededOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsDeleteAsyncNoRetrySucceededResponse>,
      LROsDeleteAsyncNoRetrySucceededResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsDeleteAsyncNoRetrySucceededResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteAsyncNoRetrySucceededOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async deleteAsyncRetryFailed(
    options?: LROsDeleteAsyncRetryFailedOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsDeleteAsyncRetryFailedResponse>,
      LROsDeleteAsyncRetryFailedResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsDeleteAsyncRetryFailedResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteAsyncRetryFailedOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async deleteAsyncRetrycanceled(
    options?: LROsDeleteAsyncRetrycanceledOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsDeleteAsyncRetrycanceledResponse>,
      LROsDeleteAsyncRetrycanceledResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsDeleteAsyncRetrycanceledResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteAsyncRetrycanceledOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header.
   * Poll returns a 200 with a response body after success.
   * @param options The options parameters.
   */
  async post200WithPayload(
    options?: LROsPost200WithPayloadOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPost200WithPayloadResponse>,
      LROsPost200WithPayloadResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPost200WithPayloadResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      post200WithPayloadOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' and
   * 'Retry-After' headers, Polls return a 200 with a response body after success
   * @param options The options parameters.
   */
  async post202Retry200(
    options?: LROsPost202Retry200OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPost202Retry200Response>,
      LROsPost202Retry200Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPost202Retry200Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      post202Retry200OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204
   * with noresponse body after success
   * @param options The options parameters.
   */
  async post202NoRetry204(
    options?: LROsPost202NoRetry204OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPost202NoRetry204Response>,
      LROsPost202NoRetry204Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPost202NoRetry204Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      post202NoRetry204OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should poll Location to get the final object
   * @param options The options parameters.
   */
  async postDoubleHeadersFinalLocationGet(
    options?: LROsPostDoubleHeadersFinalLocationGetOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPostDoubleHeadersFinalLocationGetResponse>,
      LROsPostDoubleHeadersFinalLocationGetResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPostDoubleHeadersFinalLocationGetResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      postDoubleHeadersFinalLocationGetOperationSpec,
      sendOperation,
      "location"
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object
   * @param options The options parameters.
   */
  async postDoubleHeadersFinalAzureHeaderGet(
    options?: LROsPostDoubleHeadersFinalAzureHeaderGetOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPostDoubleHeadersFinalAzureHeaderGetResponse>,
      LROsPostDoubleHeadersFinalAzureHeaderGetResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "azure-async-operation")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPostDoubleHeadersFinalAzureHeaderGetResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      postDoubleHeadersFinalAzureHeaderGetOperationSpec,
      sendOperation,
      "azure-async-operation"
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object if you support initial Autorest behavior.
   * @param options The options parameters.
   */
  async postDoubleHeadersFinalAzureHeaderGetDefault(
    options?: LROsPostDoubleHeadersFinalAzureHeaderGetDefaultOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse
      >,
      LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      postDoubleHeadersFinalAzureHeaderGetDefaultOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async postAsyncRetrySucceeded(
    options?: LROsPostAsyncRetrySucceededOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPostAsyncRetrySucceededResponse>,
      LROsPostAsyncRetrySucceededResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPostAsyncRetrySucceededResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      postAsyncRetrySucceededOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async postAsyncNoRetrySucceeded(
    options?: LROsPostAsyncNoRetrySucceededOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPostAsyncNoRetrySucceededResponse>,
      LROsPostAsyncNoRetrySucceededResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPostAsyncNoRetrySucceededResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      postAsyncNoRetrySucceededOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async postAsyncRetryFailed(
    options?: LROsPostAsyncRetryFailedOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPostAsyncRetryFailedResponse>,
      LROsPostAsyncRetryFailedResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPostAsyncRetryFailedResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      postAsyncRetryFailedOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async postAsyncRetrycanceled(
    options?: LROsPostAsyncRetrycanceledOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LROsPostAsyncRetrycanceledResponse>,
      LROsPostAsyncRetrycanceledResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LROsPostAsyncRetrycanceledResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      postAsyncRetrycanceledOperationSpec,
      sendOperation
    );
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const put200SucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/200/succeeded",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const put201SucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/201/succeeded",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const post202ListOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Product" } }
        }
      }
    },
    201: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Product" } }
        }
      }
    },
    202: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Product" } }
        }
      }
    },
    204: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Product" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const put200SucceededNoStateOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/200/succeeded/nostate",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const put202Retry200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/202/retry/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const put201CreatingSucceeded200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/201/creating/succeeded/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const put200UpdatingSucceeded204OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/200/updating/succeeded/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const put201CreatingFailed200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/201/created/failed/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const put200Acceptedcanceled200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/200/accepted/canceled/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putNoHeaderInRetryOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/put/noheader/202/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutNoHeaderInRetryHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutNoHeaderInRetryHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutNoHeaderInRetryHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putAsyncRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putasync/retry/succeeded",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetrySucceededHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetrySucceededHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetrySucceededHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putAsyncNoRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putasync/noretry/succeeded",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrySucceededHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrySucceededHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrySucceededHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putAsyncRetryFailedOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putasync/retry/failed",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetryFailedHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetryFailedHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetryFailedHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetryFailedHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putAsyncNoRetrycanceledOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putasync/noretry/canceled",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrycanceledHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrycanceledHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrycanceledHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrycanceledHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putAsyncNoHeaderInRetryOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putasync/noheader/201/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoHeaderInRetryHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoHeaderInRetryHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoHeaderInRetryHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putNonResourceOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putnonresource/202/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Sku
    },
    201: {
      bodyMapper: Mappers.Sku
    },
    202: {
      bodyMapper: Mappers.Sku
    },
    204: {
      bodyMapper: Mappers.Sku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.sku,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putAsyncNonResourceOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putnonresourceasync/202/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Sku
    },
    201: {
      bodyMapper: Mappers.Sku
    },
    202: {
      bodyMapper: Mappers.Sku
    },
    204: {
      bodyMapper: Mappers.Sku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.sku,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putSubResourceOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putsubresource/202/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SubProduct
    },
    201: {
      bodyMapper: Mappers.SubProduct
    },
    202: {
      bodyMapper: Mappers.SubProduct
    },
    204: {
      bodyMapper: Mappers.SubProduct
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putAsyncSubResourceOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/putsubresourceasync/202/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SubProduct
    },
    201: {
      bodyMapper: Mappers.SubProduct
    },
    202: {
      bodyMapper: Mappers.SubProduct
    },
    204: {
      bodyMapper: Mappers.SubProduct
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteProvisioning202Accepted200SucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/provisioning/202/accepted/200/succeeded",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteProvisioning202DeletingFailed200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/provisioning/202/deleting/200/failed",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteProvisioning202Deletingcanceled200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/provisioning/202/deleting/200/canceled",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const delete204SucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/204/succeeded",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const delete202Retry200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/202/retry/200",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const delete202NoRetry204OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/202/noretry/204",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteNoHeaderInRetryOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/delete/noheader",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LROsDeleteNoHeaderInRetryHeaders
    },
    201: {
      headersMapper: Mappers.LROsDeleteNoHeaderInRetryHeaders
    },
    202: {
      headersMapper: Mappers.LROsDeleteNoHeaderInRetryHeaders
    },
    204: {
      headersMapper: Mappers.LROsDeleteNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAsyncNoHeaderInRetryOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/deleteasync/noheader/202/204",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LROsDeleteAsyncNoHeaderInRetryHeaders
    },
    201: {
      headersMapper: Mappers.LROsDeleteAsyncNoHeaderInRetryHeaders
    },
    202: {
      headersMapper: Mappers.LROsDeleteAsyncNoHeaderInRetryHeaders
    },
    204: {
      headersMapper: Mappers.LROsDeleteAsyncNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAsyncRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/deleteasync/retry/succeeded",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LROsDeleteAsyncRetrySucceededHeaders
    },
    201: {
      headersMapper: Mappers.LROsDeleteAsyncRetrySucceededHeaders
    },
    202: {
      headersMapper: Mappers.LROsDeleteAsyncRetrySucceededHeaders
    },
    204: {
      headersMapper: Mappers.LROsDeleteAsyncRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAsyncNoRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/deleteasync/noretry/succeeded",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LROsDeleteAsyncNoRetrySucceededHeaders
    },
    201: {
      headersMapper: Mappers.LROsDeleteAsyncNoRetrySucceededHeaders
    },
    202: {
      headersMapper: Mappers.LROsDeleteAsyncNoRetrySucceededHeaders
    },
    204: {
      headersMapper: Mappers.LROsDeleteAsyncNoRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAsyncRetryFailedOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/deleteasync/retry/failed",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LROsDeleteAsyncRetryFailedHeaders
    },
    201: {
      headersMapper: Mappers.LROsDeleteAsyncRetryFailedHeaders
    },
    202: {
      headersMapper: Mappers.LROsDeleteAsyncRetryFailedHeaders
    },
    204: {
      headersMapper: Mappers.LROsDeleteAsyncRetryFailedHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAsyncRetrycanceledOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/deleteasync/retry/canceled",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LROsDeleteAsyncRetrycanceledHeaders
    },
    201: {
      headersMapper: Mappers.LROsDeleteAsyncRetrycanceledHeaders
    },
    202: {
      headersMapper: Mappers.LROsDeleteAsyncRetrycanceledHeaders
    },
    204: {
      headersMapper: Mappers.LROsDeleteAsyncRetrycanceledHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const post200WithPayloadOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/post/payload/200",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Sku
    },
    201: {
      bodyMapper: Mappers.Sku
    },
    202: {
      bodyMapper: Mappers.Sku
    },
    204: {
      bodyMapper: Mappers.Sku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const post202Retry200OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/post/202/retry/200",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LROsPost202Retry200Headers
    },
    201: {
      headersMapper: Mappers.LROsPost202Retry200Headers
    },
    202: {
      headersMapper: Mappers.LROsPost202Retry200Headers
    },
    204: {
      headersMapper: Mappers.LROsPost202Retry200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const post202NoRetry204OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/post/202/noretry/204",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPost202NoRetry204Headers
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPost202NoRetry204Headers
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPost202NoRetry204Headers
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPost202NoRetry204Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const postDoubleHeadersFinalLocationGetOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/LROPostDoubleHeadersFinalLocationGet",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const postDoubleHeadersFinalAzureHeaderGetOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/LROPostDoubleHeadersFinalAzureHeaderGet",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const postDoubleHeadersFinalAzureHeaderGetDefaultOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/LROPostDoubleHeadersFinalAzureHeaderGetDefault",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const postAsyncRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/postasync/retry/succeeded",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const postAsyncNoRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/postasync/noretry/succeeded",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const postAsyncRetryFailedOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/postasync/retry/failed",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LROsPostAsyncRetryFailedHeaders
    },
    201: {
      headersMapper: Mappers.LROsPostAsyncRetryFailedHeaders
    },
    202: {
      headersMapper: Mappers.LROsPostAsyncRetryFailedHeaders
    },
    204: {
      headersMapper: Mappers.LROsPostAsyncRetryFailedHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const postAsyncRetrycanceledOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/postasync/retry/canceled",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LROsPostAsyncRetrycanceledHeaders
    },
    201: {
      headersMapper: Mappers.LROsPostAsyncRetrycanceledHeaders
    },
    202: {
      headersMapper: Mappers.LROsPostAsyncRetrycanceledHeaders
    },
    204: {
      headersMapper: Mappers.LROsPostAsyncRetrycanceledHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
