/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroClient } from "../lroClient";
import {
  LrosaDsPutNonRetry400OptionalParams,
  LrosaDsPutNonRetry400Response,
  LrosaDsPutNonRetry201Creating400OptionalParams,
  LrosaDsPutNonRetry201Creating400Response,
  LrosaDsPutNonRetry201Creating400InvalidJsonOptionalParams,
  LrosaDsPutNonRetry201Creating400InvalidJsonResponse,
  LrosaDsPutAsyncRelativeRetry400OptionalParams,
  LrosaDsPutAsyncRelativeRetry400Response,
  LrosaDsDeleteNonRetry400Response,
  LrosaDsDelete202NonRetry400Response,
  LrosaDsDeleteAsyncRelativeRetry400Response,
  LrosaDsPostNonRetry400OptionalParams,
  LrosaDsPostNonRetry400Response,
  LrosaDsPost202NonRetry400OptionalParams,
  LrosaDsPost202NonRetry400Response,
  LrosaDsPostAsyncRelativeRetry400OptionalParams,
  LrosaDsPostAsyncRelativeRetry400Response,
  LrosaDsPutError201NoProvisioningStatePayloadOptionalParams,
  LrosaDsPutError201NoProvisioningStatePayloadResponse,
  LrosaDsPutAsyncRelativeRetryNoStatusOptionalParams,
  LrosaDsPutAsyncRelativeRetryNoStatusResponse,
  LrosaDsPutAsyncRelativeRetryNoStatusPayloadOptionalParams,
  LrosaDsPutAsyncRelativeRetryNoStatusPayloadResponse,
  LrosaDsDeleteAsyncRelativeRetryNoStatusResponse,
  LrosaDsPost202NoLocationOptionalParams,
  LrosaDsPost202NoLocationResponse,
  LrosaDsPostAsyncRelativeRetryNoPayloadOptionalParams,
  LrosaDsPostAsyncRelativeRetryNoPayloadResponse,
  LrosaDsPut200InvalidJsonOptionalParams,
  LrosaDsPut200InvalidJsonResponse,
  LrosaDsPutAsyncRelativeRetryInvalidHeaderOptionalParams,
  LrosaDsPutAsyncRelativeRetryInvalidHeaderResponse,
  LrosaDsPutAsyncRelativeRetryInvalidJsonPollingOptionalParams,
  LrosaDsPutAsyncRelativeRetryInvalidJsonPollingResponse,
  LrosaDsDelete202RetryInvalidHeaderResponse,
  LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse,
  LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingResponse,
  LrosaDsPost202RetryInvalidHeaderOptionalParams,
  LrosaDsPost202RetryInvalidHeaderResponse,
  LrosaDsPostAsyncRelativeRetryInvalidHeaderOptionalParams,
  LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse,
  LrosaDsPostAsyncRelativeRetryInvalidJsonPollingOptionalParams,
  LrosaDsPostAsyncRelativeRetryInvalidJsonPollingResponse
} from "../models";

/**
 * Class representing a LrosaDs.
 */
export class LrosaDs {
  private readonly client: LroClient;

  /**
   * Initialize a new instance of the class LrosaDs class.
   * @param client Reference to the service client
   */
  constructor(client: LroClient) {
    this.client = client;
  }

  /**
   * Long running put request, service returns a 400 to the initial request
   * @param options The options parameters.
   */
  putNonRetry400(
    options?: LrosaDsPutNonRetry400OptionalParams
  ): Promise<LrosaDsPutNonRetry400Response> {
    return this.client.sendOperationRequest(
      { options },
      putNonRetry400OperationSpec
    ) as Promise<LrosaDsPutNonRetry400Response>;
  }

  /**
   * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201
   * response code
   * @param options The options parameters.
   */
  putNonRetry201Creating400(
    options?: LrosaDsPutNonRetry201Creating400OptionalParams
  ): Promise<LrosaDsPutNonRetry201Creating400Response> {
    return this.client.sendOperationRequest(
      { options },
      putNonRetry201Creating400OperationSpec
    ) as Promise<LrosaDsPutNonRetry201Creating400Response>;
  }

  /**
   * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201
   * response code
   * @param options The options parameters.
   */
  putNonRetry201Creating400InvalidJson(
    options?: LrosaDsPutNonRetry201Creating400InvalidJsonOptionalParams
  ): Promise<LrosaDsPutNonRetry201Creating400InvalidJsonResponse> {
    return this.client.sendOperationRequest(
      { options },
      putNonRetry201Creating400InvalidJsonOperationSpec
    ) as Promise<LrosaDsPutNonRetry201Creating400InvalidJsonResponse>;
  }

  /**
   * Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  putAsyncRelativeRetry400(
    options?: LrosaDsPutAsyncRelativeRetry400OptionalParams
  ): Promise<LrosaDsPutAsyncRelativeRetry400Response> {
    return this.client.sendOperationRequest(
      { options },
      putAsyncRelativeRetry400OperationSpec
    ) as Promise<LrosaDsPutAsyncRelativeRetry400Response>;
  }

  /**
   * Long running delete request, service returns a 400 with an error body
   * @param options The options parameters.
   */
  deleteNonRetry400(
    options?: coreHttp.OperationOptions
  ): Promise<LrosaDsDeleteNonRetry400Response> {
    return this.client.sendOperationRequest(
      { options },
      deleteNonRetry400OperationSpec
    ) as Promise<LrosaDsDeleteNonRetry400Response>;
  }

  /**
   * Long running delete request, service returns a 202 with a location header
   * @param options The options parameters.
   */
  delete202NonRetry400(
    options?: coreHttp.OperationOptions
  ): Promise<LrosaDsDelete202NonRetry400Response> {
    return this.client.sendOperationRequest(
      { options },
      delete202NonRetry400OperationSpec
    ) as Promise<LrosaDsDelete202NonRetry400Response>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  deleteAsyncRelativeRetry400(
    options?: coreHttp.OperationOptions
  ): Promise<LrosaDsDeleteAsyncRelativeRetry400Response> {
    return this.client.sendOperationRequest(
      { options },
      deleteAsyncRelativeRetry400OperationSpec
    ) as Promise<LrosaDsDeleteAsyncRelativeRetry400Response>;
  }

  /**
   * Long running post request, service returns a 400 with no error body
   * @param options The options parameters.
   */
  postNonRetry400(
    options?: LrosaDsPostNonRetry400OptionalParams
  ): Promise<LrosaDsPostNonRetry400Response> {
    return this.client.sendOperationRequest(
      { options },
      postNonRetry400OperationSpec
    ) as Promise<LrosaDsPostNonRetry400Response>;
  }

  /**
   * Long running post request, service returns a 202 with a location header
   * @param options The options parameters.
   */
  post202NonRetry400(
    options?: LrosaDsPost202NonRetry400OptionalParams
  ): Promise<LrosaDsPost202NonRetry400Response> {
    return this.client.sendOperationRequest(
      { options },
      post202NonRetry400OperationSpec
    ) as Promise<LrosaDsPost202NonRetry400Response>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request Poll the endpoint indicated
   * in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  postAsyncRelativeRetry400(
    options?: LrosaDsPostAsyncRelativeRetry400OptionalParams
  ): Promise<LrosaDsPostAsyncRelativeRetry400Response> {
    return this.client.sendOperationRequest(
      { options },
      postAsyncRelativeRetry400OperationSpec
    ) as Promise<LrosaDsPostAsyncRelativeRetry400Response>;
  }

  /**
   * Long running put request, service returns a 201 to the initial request with no payload
   * @param options The options parameters.
   */
  putError201NoProvisioningStatePayload(
    options?: LrosaDsPutError201NoProvisioningStatePayloadOptionalParams
  ): Promise<LrosaDsPutError201NoProvisioningStatePayloadResponse> {
    return this.client.sendOperationRequest(
      { options },
      putError201NoProvisioningStatePayloadOperationSpec
    ) as Promise<LrosaDsPutError201NoProvisioningStatePayloadResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  putAsyncRelativeRetryNoStatus(
    options?: LrosaDsPutAsyncRelativeRetryNoStatusOptionalParams
  ): Promise<LrosaDsPutAsyncRelativeRetryNoStatusResponse> {
    return this.client.sendOperationRequest(
      { options },
      putAsyncRelativeRetryNoStatusOperationSpec
    ) as Promise<LrosaDsPutAsyncRelativeRetryNoStatusResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  putAsyncRelativeRetryNoStatusPayload(
    options?: LrosaDsPutAsyncRelativeRetryNoStatusPayloadOptionalParams
  ): Promise<LrosaDsPutAsyncRelativeRetryNoStatusPayloadResponse> {
    return this.client.sendOperationRequest(
      { options },
      putAsyncRelativeRetryNoStatusPayloadOperationSpec
    ) as Promise<LrosaDsPutAsyncRelativeRetryNoStatusPayloadResponse>;
  }

  /**
   * Long running delete request, service returns a 204 to the initial request, indicating success.
   * @param options The options parameters.
   */
  delete204Succeeded(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      { options },
      delete204SucceededOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  deleteAsyncRelativeRetryNoStatus(
    options?: coreHttp.OperationOptions
  ): Promise<LrosaDsDeleteAsyncRelativeRetryNoStatusResponse> {
    return this.client.sendOperationRequest(
      { options },
      deleteAsyncRelativeRetryNoStatusOperationSpec
    ) as Promise<LrosaDsDeleteAsyncRelativeRetryNoStatusResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, without a location header.
   * @param options The options parameters.
   */
  post202NoLocation(
    options?: LrosaDsPost202NoLocationOptionalParams
  ): Promise<LrosaDsPost202NoLocationResponse> {
    return this.client.sendOperationRequest(
      { options },
      post202NoLocationOperationSpec
    ) as Promise<LrosaDsPost202NoLocationResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  postAsyncRelativeRetryNoPayload(
    options?: LrosaDsPostAsyncRelativeRetryNoPayloadOptionalParams
  ): Promise<LrosaDsPostAsyncRelativeRetryNoPayloadResponse> {
    return this.client.sendOperationRequest(
      { options },
      postAsyncRelativeRetryNoPayloadOperationSpec
    ) as Promise<LrosaDsPostAsyncRelativeRetryNoPayloadResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that is not a
   * valid json
   * @param options The options parameters.
   */
  put200InvalidJson(
    options?: LrosaDsPut200InvalidJsonOptionalParams
  ): Promise<LrosaDsPut200InvalidJsonResponse> {
    return this.client.sendOperationRequest(
      { options },
      put200InvalidJsonOperationSpec
    ) as Promise<LrosaDsPut200InvalidJsonResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
   * @param options The options parameters.
   */
  putAsyncRelativeRetryInvalidHeader(
    options?: LrosaDsPutAsyncRelativeRetryInvalidHeaderOptionalParams
  ): Promise<LrosaDsPutAsyncRelativeRetryInvalidHeaderResponse> {
    return this.client.sendOperationRequest(
      { options },
      putAsyncRelativeRetryInvalidHeaderOperationSpec
    ) as Promise<LrosaDsPutAsyncRelativeRetryInvalidHeaderResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  putAsyncRelativeRetryInvalidJsonPolling(
    options?: LrosaDsPutAsyncRelativeRetryInvalidJsonPollingOptionalParams
  ): Promise<LrosaDsPutAsyncRelativeRetryInvalidJsonPollingResponse> {
    return this.client.sendOperationRequest(
      { options },
      putAsyncRelativeRetryInvalidJsonPollingOperationSpec
    ) as Promise<LrosaDsPutAsyncRelativeRetryInvalidJsonPollingResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request receing a reponse with an
   * invalid 'Location' and 'Retry-After' headers
   * @param options The options parameters.
   */
  delete202RetryInvalidHeader(
    options?: coreHttp.OperationOptions
  ): Promise<LrosaDsDelete202RetryInvalidHeaderResponse> {
    return this.client.sendOperationRequest(
      { options },
      delete202RetryInvalidHeaderOperationSpec
    ) as Promise<LrosaDsDelete202RetryInvalidHeaderResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. The endpoint indicated in
   * the Azure-AsyncOperation header is invalid
   * @param options The options parameters.
   */
  deleteAsyncRelativeRetryInvalidHeader(
    options?: coreHttp.OperationOptions
  ): Promise<LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse> {
    return this.client.sendOperationRequest(
      { options },
      deleteAsyncRelativeRetryInvalidHeaderOperationSpec
    ) as Promise<LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  deleteAsyncRelativeRetryInvalidJsonPolling(
    options?: coreHttp.OperationOptions
  ): Promise<LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingResponse> {
    return this.client.sendOperationRequest(
      { options },
      deleteAsyncRelativeRetryInvalidJsonPollingOperationSpec
    ) as Promise<LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with invalid 'Location' and
   * 'Retry-After' headers.
   * @param options The options parameters.
   */
  post202RetryInvalidHeader(
    options?: LrosaDsPost202RetryInvalidHeaderOptionalParams
  ): Promise<LrosaDsPost202RetryInvalidHeaderResponse> {
    return this.client.sendOperationRequest(
      { options },
      post202RetryInvalidHeaderOperationSpec
    ) as Promise<LrosaDsPost202RetryInvalidHeaderResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is
   * invalid.
   * @param options The options parameters.
   */
  postAsyncRelativeRetryInvalidHeader(
    options?: LrosaDsPostAsyncRelativeRetryInvalidHeaderOptionalParams
  ): Promise<LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse> {
    return this.client.sendOperationRequest(
      { options },
      postAsyncRelativeRetryInvalidHeaderOperationSpec
    ) as Promise<LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  postAsyncRelativeRetryInvalidJsonPolling(
    options?: LrosaDsPostAsyncRelativeRetryInvalidJsonPollingOptionalParams
  ): Promise<LrosaDsPostAsyncRelativeRetryInvalidJsonPollingResponse> {
    return this.client.sendOperationRequest(
      { options },
      postAsyncRelativeRetryInvalidJsonPollingOperationSpec
    ) as Promise<LrosaDsPostAsyncRelativeRetryInvalidJsonPollingResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const putNonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/put/400",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putNonRetry201Creating400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/put/201/creating/400",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putNonRetry201Creating400InvalidJsonOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/put/201/creating/400/invalidjson",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putAsyncRelativeRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/putasync/retry/400",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteNonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/delete/400",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.LrosaDsDeleteNonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const delete202NonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/delete/202/retry/400",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.LrosaDsDelete202NonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteAsyncRelativeRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/deleteasync/retry/400",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const postNonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/post/400",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.LrosaDsPostNonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const post202NonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/post/202/retry/400",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.LrosaDsPost202NonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const postAsyncRelativeRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/postasync/retry/400",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putError201NoProvisioningStatePayloadOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/put/201/noprovisioningstatepayload",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putAsyncRelativeRetryNoStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/putasync/retry/nostatus",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putAsyncRelativeRetryNoStatusPayloadOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/putasync/retry/nostatuspayload",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusPayloadHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const delete204SucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/delete/204/nolocation",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteAsyncRelativeRetryNoStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/deleteasync/retry/nostatus",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryNoStatusHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const post202NoLocationOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/post/202/nolocation",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.LrosaDsPost202NoLocationHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const postAsyncRelativeRetryNoPayloadOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/postasync/retry/nopayload",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryNoPayloadHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const put200InvalidJsonOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/put/200/invalidjson",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putAsyncRelativeRetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/putasync/retry/invalidheader",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const putAsyncRelativeRetryInvalidJsonPollingOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/putasync/retry/invalidjsonpolling",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper:
        Mappers.LrosaDsPutAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const delete202RetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/delete/202/retry/invalidheader",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.LrosaDsDelete202RetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteAsyncRelativeRetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/deleteasync/retry/invalidheader",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteAsyncRelativeRetryInvalidJsonPollingOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/deleteasync/retry/invalidjsonpolling",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper:
        Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const post202RetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/post/202/retry/invalidheader",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.LrosaDsPost202RetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const postAsyncRelativeRetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/postasync/retry/invalidheader",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const postAsyncRelativeRetryInvalidJsonPollingOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/postasync/retry/invalidjsonpolling",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper:
        Mappers.LrosaDsPostAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
