/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { LrosaDs } from "../operationsInterfaces";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LROClientContext } from "../lROClientContext";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  LrosaDsPutNonRetry400OptionalParams,
  LrosaDsPutNonRetry400Response,
  LrosaDsPutNonRetry201Creating400OptionalParams,
  LrosaDsPutNonRetry201Creating400Response,
  LrosaDsPutNonRetry201Creating400InvalidJsonOptionalParams,
  LrosaDsPutNonRetry201Creating400InvalidJsonResponse,
  LrosaDsPutAsyncRelativeRetry400OptionalParams,
  LrosaDsPutAsyncRelativeRetry400Response,
  LrosaDsDeleteNonRetry400OptionalParams,
  LrosaDsDeleteNonRetry400Response,
  LrosaDsDelete202NonRetry400OptionalParams,
  LrosaDsDelete202NonRetry400Response,
  LrosaDsDeleteAsyncRelativeRetry400OptionalParams,
  LrosaDsDeleteAsyncRelativeRetry400Response,
  LrosaDsPostNonRetry400OptionalParams,
  LrosaDsPostNonRetry400Response,
  LrosaDsPost202NonRetry400OptionalParams,
  LrosaDsPost202NonRetry400Response,
  LrosaDsPostAsyncRelativeRetry400OptionalParams,
  LrosaDsPostAsyncRelativeRetry400Response,
  LrosaDsPutError201NoProvisioningStatePayloadOptionalParams,
  LrosaDsPutError201NoProvisioningStatePayloadResponse,
  LrosaDsPutAsyncRelativeRetryNoStatusOptionalParams,
  LrosaDsPutAsyncRelativeRetryNoStatusResponse,
  LrosaDsPutAsyncRelativeRetryNoStatusPayloadOptionalParams,
  LrosaDsPutAsyncRelativeRetryNoStatusPayloadResponse,
  LrosaDsDelete204SucceededOptionalParams,
  LrosaDsDeleteAsyncRelativeRetryNoStatusOptionalParams,
  LrosaDsDeleteAsyncRelativeRetryNoStatusResponse,
  LrosaDsPost202NoLocationOptionalParams,
  LrosaDsPost202NoLocationResponse,
  LrosaDsPostAsyncRelativeRetryNoPayloadOptionalParams,
  LrosaDsPostAsyncRelativeRetryNoPayloadResponse,
  LrosaDsPut200InvalidJsonOptionalParams,
  LrosaDsPut200InvalidJsonResponse,
  LrosaDsPutAsyncRelativeRetryInvalidHeaderOptionalParams,
  LrosaDsPutAsyncRelativeRetryInvalidHeaderResponse,
  LrosaDsPutAsyncRelativeRetryInvalidJsonPollingOptionalParams,
  LrosaDsPutAsyncRelativeRetryInvalidJsonPollingResponse,
  LrosaDsDelete202RetryInvalidHeaderOptionalParams,
  LrosaDsDelete202RetryInvalidHeaderResponse,
  LrosaDsDeleteAsyncRelativeRetryInvalidHeaderOptionalParams,
  LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse,
  LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingOptionalParams,
  LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingResponse,
  LrosaDsPost202RetryInvalidHeaderOptionalParams,
  LrosaDsPost202RetryInvalidHeaderResponse,
  LrosaDsPostAsyncRelativeRetryInvalidHeaderOptionalParams,
  LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse,
  LrosaDsPostAsyncRelativeRetryInvalidJsonPollingOptionalParams,
  LrosaDsPostAsyncRelativeRetryInvalidJsonPollingResponse
} from "../models";

/** Class representing a LrosaDs. */
export class LrosaDsImpl implements LrosaDs {
  private readonly client: LROClientContext;

  /**
   * Initialize a new instance of the class LrosaDs class.
   * @param client Reference to the service client
   */
  constructor(client: LROClientContext) {
    this.client = client;
  }

  /**
   * Long running put request, service returns a 400 to the initial request
   * @param options The options parameters.
   */
  async beginPutNonRetry400(
    options?: LrosaDsPutNonRetry400OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPutNonRetry400Response>,
      LrosaDsPutNonRetry400Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutNonRetry400Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putNonRetry400OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201
   * response code
   * @param options The options parameters.
   */
  async beginPutNonRetry201Creating400(
    options?: LrosaDsPutNonRetry201Creating400OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPutNonRetry201Creating400Response>,
      LrosaDsPutNonRetry201Creating400Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutNonRetry201Creating400Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putNonRetry201Creating400OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201
   * response code
   * @param options The options parameters.
   */
  async beginPutNonRetry201Creating400InvalidJson(
    options?: LrosaDsPutNonRetry201Creating400InvalidJsonOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPutNonRetry201Creating400InvalidJsonResponse>,
      LrosaDsPutNonRetry201Creating400InvalidJsonResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutNonRetry201Creating400InvalidJsonResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putNonRetry201Creating400InvalidJsonOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async beginPutAsyncRelativeRetry400(
    options?: LrosaDsPutAsyncRelativeRetry400OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPutAsyncRelativeRetry400Response>,
      LrosaDsPutAsyncRelativeRetry400Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutAsyncRelativeRetry400Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putAsyncRelativeRetry400OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 400 with an error body
   * @param options The options parameters.
   */
  async beginDeleteNonRetry400(
    options?: LrosaDsDeleteNonRetry400OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsDeleteNonRetry400Response>,
      LrosaDsDeleteNonRetry400Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDeleteNonRetry400Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteNonRetry400OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 with a location header
   * @param options The options parameters.
   */
  async beginDelete202NonRetry400(
    options?: LrosaDsDelete202NonRetry400OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsDelete202NonRetry400Response>,
      LrosaDsDelete202NonRetry400Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDelete202NonRetry400Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      delete202NonRetry400OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async beginDeleteAsyncRelativeRetry400(
    options?: LrosaDsDeleteAsyncRelativeRetry400OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsDeleteAsyncRelativeRetry400Response>,
      LrosaDsDeleteAsyncRelativeRetry400Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDeleteAsyncRelativeRetry400Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteAsyncRelativeRetry400OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 400 with no error body
   * @param options The options parameters.
   */
  async beginPostNonRetry400(
    options?: LrosaDsPostNonRetry400OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPostNonRetry400Response>,
      LrosaDsPostNonRetry400Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPostNonRetry400Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      postNonRetry400OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 with a location header
   * @param options The options parameters.
   */
  async beginPost202NonRetry400(
    options?: LrosaDsPost202NonRetry400OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPost202NonRetry400Response>,
      LrosaDsPost202NonRetry400Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPost202NonRetry400Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      post202NonRetry400OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request Poll the endpoint indicated
   * in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async beginPostAsyncRelativeRetry400(
    options?: LrosaDsPostAsyncRelativeRetry400OptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPostAsyncRelativeRetry400Response>,
      LrosaDsPostAsyncRelativeRetry400Response
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPostAsyncRelativeRetry400Response
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      postAsyncRelativeRetry400OperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 201 to the initial request with no payload
   * @param options The options parameters.
   */
  async beginPutError201NoProvisioningStatePayload(
    options?: LrosaDsPutError201NoProvisioningStatePayloadOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPutError201NoProvisioningStatePayloadResponse>,
      LrosaDsPutError201NoProvisioningStatePayloadResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutError201NoProvisioningStatePayloadResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putError201NoProvisioningStatePayloadOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  async beginPutAsyncRelativeRetryNoStatus(
    options?: LrosaDsPutAsyncRelativeRetryNoStatusOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPutAsyncRelativeRetryNoStatusResponse>,
      LrosaDsPutAsyncRelativeRetryNoStatusResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutAsyncRelativeRetryNoStatusResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putAsyncRelativeRetryNoStatusOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  async beginPutAsyncRelativeRetryNoStatusPayload(
    options?: LrosaDsPutAsyncRelativeRetryNoStatusPayloadOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPutAsyncRelativeRetryNoStatusPayloadResponse>,
      LrosaDsPutAsyncRelativeRetryNoStatusPayloadResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutAsyncRelativeRetryNoStatusPayloadResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putAsyncRelativeRetryNoStatusPayloadOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 204 to the initial request, indicating success.
   * @param options The options parameters.
   */
  async beginDelete204Succeeded(
    options?: LrosaDsDelete204SucceededOptionalParams
  ): Promise<
    PollerLike<PollOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      delete204SucceededOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async beginDeleteAsyncRelativeRetryNoStatus(
    options?: LrosaDsDeleteAsyncRelativeRetryNoStatusOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsDeleteAsyncRelativeRetryNoStatusResponse>,
      LrosaDsDeleteAsyncRelativeRetryNoStatusResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDeleteAsyncRelativeRetryNoStatusResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteAsyncRelativeRetryNoStatusOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request, without a location header.
   * @param options The options parameters.
   */
  async beginPost202NoLocation(
    options?: LrosaDsPost202NoLocationOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPost202NoLocationResponse>,
      LrosaDsPost202NoLocationResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPost202NoLocationResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      post202NoLocationOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async beginPostAsyncRelativeRetryNoPayload(
    options?: LrosaDsPostAsyncRelativeRetryNoPayloadOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPostAsyncRelativeRetryNoPayloadResponse>,
      LrosaDsPostAsyncRelativeRetryNoPayloadResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPostAsyncRelativeRetryNoPayloadResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      postAsyncRelativeRetryNoPayloadOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that is not a
   * valid json
   * @param options The options parameters.
   */
  async beginPut200InvalidJson(
    options?: LrosaDsPut200InvalidJsonOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPut200InvalidJsonResponse>,
      LrosaDsPut200InvalidJsonResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPut200InvalidJsonResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      put200InvalidJsonOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
   * @param options The options parameters.
   */
  async beginPutAsyncRelativeRetryInvalidHeader(
    options?: LrosaDsPutAsyncRelativeRetryInvalidHeaderOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPutAsyncRelativeRetryInvalidHeaderResponse>,
      LrosaDsPutAsyncRelativeRetryInvalidHeaderResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutAsyncRelativeRetryInvalidHeaderResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putAsyncRelativeRetryInvalidHeaderOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  async beginPutAsyncRelativeRetryInvalidJsonPolling(
    options?: LrosaDsPutAsyncRelativeRetryInvalidJsonPollingOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        LrosaDsPutAsyncRelativeRetryInvalidJsonPollingResponse
      >,
      LrosaDsPutAsyncRelativeRetryInvalidJsonPollingResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutAsyncRelativeRetryInvalidJsonPollingResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      putAsyncRelativeRetryInvalidJsonPollingOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request receing a reponse with an
   * invalid 'Location' and 'Retry-After' headers
   * @param options The options parameters.
   */
  async beginDelete202RetryInvalidHeader(
    options?: LrosaDsDelete202RetryInvalidHeaderOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsDelete202RetryInvalidHeaderResponse>,
      LrosaDsDelete202RetryInvalidHeaderResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDelete202RetryInvalidHeaderResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      delete202RetryInvalidHeaderOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. The endpoint indicated in
   * the Azure-AsyncOperation header is invalid
   * @param options The options parameters.
   */
  async beginDeleteAsyncRelativeRetryInvalidHeader(
    options?: LrosaDsDeleteAsyncRelativeRetryInvalidHeaderOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse>,
      LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteAsyncRelativeRetryInvalidHeaderOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async beginDeleteAsyncRelativeRetryInvalidJsonPolling(
    options?: LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingResponse
      >,
      LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteAsyncRelativeRetryInvalidJsonPollingOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with invalid 'Location' and
   * 'Retry-After' headers.
   * @param options The options parameters.
   */
  async beginPost202RetryInvalidHeader(
    options?: LrosaDsPost202RetryInvalidHeaderOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPost202RetryInvalidHeaderResponse>,
      LrosaDsPost202RetryInvalidHeaderResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPost202RetryInvalidHeaderResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      post202RetryInvalidHeaderOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is
   * invalid.
   * @param options The options parameters.
   */
  async beginPostAsyncRelativeRetryInvalidHeader(
    options?: LrosaDsPostAsyncRelativeRetryInvalidHeaderOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse>,
      LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      postAsyncRelativeRetryInvalidHeaderOperationSpec,
      sendOperation
    );
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async beginPostAsyncRelativeRetryInvalidJsonPolling(
    options?: LrosaDsPostAsyncRelativeRetryInvalidJsonPollingOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        LrosaDsPostAsyncRelativeRetryInvalidJsonPollingResponse
      >,
      LrosaDsPostAsyncRelativeRetryInvalidJsonPollingResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPostAsyncRelativeRetryInvalidJsonPollingResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      postAsyncRelativeRetryInvalidJsonPollingOperationSpec,
      sendOperation
    );
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const putNonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/put/400",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putNonRetry201Creating400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/put/201/creating/400",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putNonRetry201Creating400InvalidJsonOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/put/201/creating/400/invalidjson",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putAsyncRelativeRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/putasync/retry/400",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetry400Headers
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetry400Headers
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetry400Headers
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteNonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/delete/400",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsDeleteNonRetry400Headers
    },
    201: {
      headersMapper: Mappers.LrosaDsDeleteNonRetry400Headers
    },
    202: {
      headersMapper: Mappers.LrosaDsDeleteNonRetry400Headers
    },
    204: {
      headersMapper: Mappers.LrosaDsDeleteNonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const delete202NonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/delete/202/retry/400",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsDelete202NonRetry400Headers
    },
    201: {
      headersMapper: Mappers.LrosaDsDelete202NonRetry400Headers
    },
    202: {
      headersMapper: Mappers.LrosaDsDelete202NonRetry400Headers
    },
    204: {
      headersMapper: Mappers.LrosaDsDelete202NonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAsyncRelativeRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/deleteasync/retry/400",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetry400Headers
    },
    201: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetry400Headers
    },
    202: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetry400Headers
    },
    204: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const postNonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/post/400",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPostNonRetry400Headers
    },
    201: {
      headersMapper: Mappers.LrosaDsPostNonRetry400Headers
    },
    202: {
      headersMapper: Mappers.LrosaDsPostNonRetry400Headers
    },
    204: {
      headersMapper: Mappers.LrosaDsPostNonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const post202NonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/post/202/retry/400",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPost202NonRetry400Headers
    },
    201: {
      headersMapper: Mappers.LrosaDsPost202NonRetry400Headers
    },
    202: {
      headersMapper: Mappers.LrosaDsPost202NonRetry400Headers
    },
    204: {
      headersMapper: Mappers.LrosaDsPost202NonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const postAsyncRelativeRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/postasync/retry/400",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetry400Headers
    },
    201: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetry400Headers
    },
    202: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetry400Headers
    },
    204: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putError201NoProvisioningStatePayloadOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/put/201/noprovisioningstatepayload",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putAsyncRelativeRetryNoStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/putasync/retry/nostatus",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putAsyncRelativeRetryNoStatusPayloadOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/putasync/retry/nostatuspayload",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusPayloadHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusPayloadHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusPayloadHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusPayloadHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const delete204SucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/delete/204/nolocation",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAsyncRelativeRetryNoStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/deleteasync/retry/nostatus",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryNoStatusHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryNoStatusHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryNoStatusHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryNoStatusHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const post202NoLocationOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/post/202/nolocation",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPost202NoLocationHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsPost202NoLocationHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsPost202NoLocationHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsPost202NoLocationHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const postAsyncRelativeRetryNoPayloadOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/postasync/retry/nopayload",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryNoPayloadHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryNoPayloadHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryNoPayloadHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryNoPayloadHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const put200InvalidJsonOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/put/200/invalidjson",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putAsyncRelativeRetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/putasync/retry/invalidheader",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryInvalidHeaderHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryInvalidHeaderHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryInvalidHeaderHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const putAsyncRelativeRetryInvalidJsonPollingOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/putasync/retry/invalidjsonpolling",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper:
        Mappers.LrosaDsPutAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper:
        Mappers.LrosaDsPutAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper:
        Mappers.LrosaDsPutAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper:
        Mappers.LrosaDsPutAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const delete202RetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/delete/202/retry/invalidheader",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsDelete202RetryInvalidHeaderHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsDelete202RetryInvalidHeaderHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsDelete202RetryInvalidHeaderHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsDelete202RetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAsyncRelativeRetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/deleteasync/retry/invalidheader",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidHeaderHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidHeaderHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidHeaderHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAsyncRelativeRetryInvalidJsonPollingOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/deleteasync/retry/invalidjsonpolling",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper:
        Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    201: {
      headersMapper:
        Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    202: {
      headersMapper:
        Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    204: {
      headersMapper:
        Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const post202RetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/post/202/retry/invalidheader",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPost202RetryInvalidHeaderHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsPost202RetryInvalidHeaderHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsPost202RetryInvalidHeaderHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsPost202RetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const postAsyncRelativeRetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/postasync/retry/invalidheader",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryInvalidHeaderHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryInvalidHeaderHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryInvalidHeaderHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const postAsyncRelativeRetryInvalidJsonPollingOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/postasync/retry/invalidjsonpolling",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper:
        Mappers.LrosaDsPostAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    201: {
      headersMapper:
        Mappers.LrosaDsPostAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    202: {
      headersMapper:
        Mappers.LrosaDsPostAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    204: {
      headersMapper:
        Mappers.LrosaDsPostAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
