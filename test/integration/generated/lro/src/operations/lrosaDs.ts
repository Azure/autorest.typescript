/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LROClient } from "../lROClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  LrosaDsPutNonRetry400OptionalParams,
  LrosaDsPutNonRetry400Response,
  LrosaDsPutNonRetry201Creating400OptionalParams,
  LrosaDsPutNonRetry201Creating400Response,
  LrosaDsPutNonRetry201Creating400InvalidJsonOptionalParams,
  LrosaDsPutNonRetry201Creating400InvalidJsonResponse,
  LrosaDsPutAsyncRelativeRetry400OptionalParams,
  LrosaDsPutAsyncRelativeRetry400Response,
  LrosaDsDeleteNonRetry400Response,
  LrosaDsDelete202NonRetry400Response,
  LrosaDsDeleteAsyncRelativeRetry400Response,
  LrosaDsPostNonRetry400OptionalParams,
  LrosaDsPostNonRetry400Response,
  LrosaDsPost202NonRetry400OptionalParams,
  LrosaDsPost202NonRetry400Response,
  LrosaDsPostAsyncRelativeRetry400OptionalParams,
  LrosaDsPostAsyncRelativeRetry400Response,
  LrosaDsPutError201NoProvisioningStatePayloadOptionalParams,
  LrosaDsPutError201NoProvisioningStatePayloadResponse,
  LrosaDsPutAsyncRelativeRetryNoStatusOptionalParams,
  LrosaDsPutAsyncRelativeRetryNoStatusResponse,
  LrosaDsPutAsyncRelativeRetryNoStatusPayloadOptionalParams,
  LrosaDsPutAsyncRelativeRetryNoStatusPayloadResponse,
  LrosaDsDeleteAsyncRelativeRetryNoStatusResponse,
  LrosaDsPost202NoLocationOptionalParams,
  LrosaDsPost202NoLocationResponse,
  LrosaDsPostAsyncRelativeRetryNoPayloadOptionalParams,
  LrosaDsPostAsyncRelativeRetryNoPayloadResponse,
  LrosaDsPut200InvalidJsonOptionalParams,
  LrosaDsPut200InvalidJsonResponse,
  LrosaDsPutAsyncRelativeRetryInvalidHeaderOptionalParams,
  LrosaDsPutAsyncRelativeRetryInvalidHeaderResponse,
  LrosaDsPutAsyncRelativeRetryInvalidJsonPollingOptionalParams,
  LrosaDsPutAsyncRelativeRetryInvalidJsonPollingResponse,
  LrosaDsDelete202RetryInvalidHeaderResponse,
  LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse,
  LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingResponse,
  LrosaDsPost202RetryInvalidHeaderOptionalParams,
  LrosaDsPost202RetryInvalidHeaderResponse,
  LrosaDsPostAsyncRelativeRetryInvalidHeaderOptionalParams,
  LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse,
  LrosaDsPostAsyncRelativeRetryInvalidJsonPollingOptionalParams,
  LrosaDsPostAsyncRelativeRetryInvalidJsonPollingResponse
} from "../models";

/**
 * Class representing a LrosaDs.
 */
export class LrosaDs {
  private readonly client: LROClient;

  /**
   * Initialize a new instance of the class LrosaDs class.
   * @param client Reference to the service client
   */
  constructor(client: LROClient) {
    this.client = client;
  }

  /**
   * Long running put request, service returns a 400 to the initial request
   * @param options The options parameters.
   */
  async putNonRetry400(
    options?: LrosaDsPutNonRetry400OptionalParams
  ): Promise<LROPoller<LrosaDsPutNonRetry400Response>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutNonRetry400Response
      >;
    const initialOperationResult = await sendOperation(
      args,
      putNonRetry400OperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: putNonRetry400OperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201
   * response code
   * @param options The options parameters.
   */
  async putNonRetry201Creating400(
    options?: LrosaDsPutNonRetry201Creating400OptionalParams
  ): Promise<LROPoller<LrosaDsPutNonRetry201Creating400Response>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutNonRetry201Creating400Response
      >;
    const initialOperationResult = await sendOperation(
      args,
      putNonRetry201Creating400OperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: putNonRetry201Creating400OperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201
   * response code
   * @param options The options parameters.
   */
  async putNonRetry201Creating400InvalidJson(
    options?: LrosaDsPutNonRetry201Creating400InvalidJsonOptionalParams
  ): Promise<LROPoller<LrosaDsPutNonRetry201Creating400InvalidJsonResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutNonRetry201Creating400InvalidJsonResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      putNonRetry201Creating400InvalidJsonOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: putNonRetry201Creating400InvalidJsonOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async putAsyncRelativeRetry400(
    options?: LrosaDsPutAsyncRelativeRetry400OptionalParams
  ): Promise<LROPoller<LrosaDsPutAsyncRelativeRetry400Response>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutAsyncRelativeRetry400Response
      >;
    const initialOperationResult = await sendOperation(
      args,
      putAsyncRelativeRetry400OperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: putAsyncRelativeRetry400OperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running delete request, service returns a 400 with an error body
   * @param options The options parameters.
   */
  async deleteNonRetry400(
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<LrosaDsDeleteNonRetry400Response>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDeleteNonRetry400Response
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteNonRetry400OperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteNonRetry400OperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running delete request, service returns a 202 with a location header
   * @param options The options parameters.
   */
  async delete202NonRetry400(
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<LrosaDsDelete202NonRetry400Response>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDelete202NonRetry400Response
      >;
    const initialOperationResult = await sendOperation(
      args,
      delete202NonRetry400OperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: delete202NonRetry400OperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async deleteAsyncRelativeRetry400(
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<LrosaDsDeleteAsyncRelativeRetry400Response>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDeleteAsyncRelativeRetry400Response
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteAsyncRelativeRetry400OperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteAsyncRelativeRetry400OperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running post request, service returns a 400 with no error body
   * @param options The options parameters.
   */
  async postNonRetry400(
    options?: LrosaDsPostNonRetry400OptionalParams
  ): Promise<LROPoller<LrosaDsPostNonRetry400Response>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPostNonRetry400Response
      >;
    const initialOperationResult = await sendOperation(
      args,
      postNonRetry400OperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: postNonRetry400OperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running post request, service returns a 202 with a location header
   * @param options The options parameters.
   */
  async post202NonRetry400(
    options?: LrosaDsPost202NonRetry400OptionalParams
  ): Promise<LROPoller<LrosaDsPost202NonRetry400Response>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPost202NonRetry400Response
      >;
    const initialOperationResult = await sendOperation(
      args,
      post202NonRetry400OperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: post202NonRetry400OperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running post request, service returns a 202 to the initial request Poll the endpoint indicated
   * in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async postAsyncRelativeRetry400(
    options?: LrosaDsPostAsyncRelativeRetry400OptionalParams
  ): Promise<LROPoller<LrosaDsPostAsyncRelativeRetry400Response>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPostAsyncRelativeRetry400Response
      >;
    const initialOperationResult = await sendOperation(
      args,
      postAsyncRelativeRetry400OperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: postAsyncRelativeRetry400OperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running put request, service returns a 201 to the initial request with no payload
   * @param options The options parameters.
   */
  async putError201NoProvisioningStatePayload(
    options?: LrosaDsPutError201NoProvisioningStatePayloadOptionalParams
  ): Promise<LROPoller<LrosaDsPutError201NoProvisioningStatePayloadResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutError201NoProvisioningStatePayloadResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      putError201NoProvisioningStatePayloadOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: putError201NoProvisioningStatePayloadOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  async putAsyncRelativeRetryNoStatus(
    options?: LrosaDsPutAsyncRelativeRetryNoStatusOptionalParams
  ): Promise<LROPoller<LrosaDsPutAsyncRelativeRetryNoStatusResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutAsyncRelativeRetryNoStatusResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      putAsyncRelativeRetryNoStatusOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: putAsyncRelativeRetryNoStatusOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  async putAsyncRelativeRetryNoStatusPayload(
    options?: LrosaDsPutAsyncRelativeRetryNoStatusPayloadOptionalParams
  ): Promise<LROPoller<LrosaDsPutAsyncRelativeRetryNoStatusPayloadResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutAsyncRelativeRetryNoStatusPayloadResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      putAsyncRelativeRetryNoStatusPayloadOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: putAsyncRelativeRetryNoStatusPayloadOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running delete request, service returns a 204 to the initial request, indicating success.
   * @param options The options parameters.
   */
  async delete204Succeeded(
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      delete204SucceededOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: delete204SucceededOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async deleteAsyncRelativeRetryNoStatus(
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<LrosaDsDeleteAsyncRelativeRetryNoStatusResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDeleteAsyncRelativeRetryNoStatusResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteAsyncRelativeRetryNoStatusOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteAsyncRelativeRetryNoStatusOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running post request, service returns a 202 to the initial request, without a location header.
   * @param options The options parameters.
   */
  async post202NoLocation(
    options?: LrosaDsPost202NoLocationOptionalParams
  ): Promise<LROPoller<LrosaDsPost202NoLocationResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPost202NoLocationResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      post202NoLocationOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: post202NoLocationOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async postAsyncRelativeRetryNoPayload(
    options?: LrosaDsPostAsyncRelativeRetryNoPayloadOptionalParams
  ): Promise<LROPoller<LrosaDsPostAsyncRelativeRetryNoPayloadResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPostAsyncRelativeRetryNoPayloadResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      postAsyncRelativeRetryNoPayloadOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: postAsyncRelativeRetryNoPayloadOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that is not a
   * valid json
   * @param options The options parameters.
   */
  async put200InvalidJson(
    options?: LrosaDsPut200InvalidJsonOptionalParams
  ): Promise<LROPoller<LrosaDsPut200InvalidJsonResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPut200InvalidJsonResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      put200InvalidJsonOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: put200InvalidJsonOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
   * @param options The options parameters.
   */
  async putAsyncRelativeRetryInvalidHeader(
    options?: LrosaDsPutAsyncRelativeRetryInvalidHeaderOptionalParams
  ): Promise<LROPoller<LrosaDsPutAsyncRelativeRetryInvalidHeaderResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutAsyncRelativeRetryInvalidHeaderResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      putAsyncRelativeRetryInvalidHeaderOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: putAsyncRelativeRetryInvalidHeaderOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that contains
   * ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for
   * operation status
   * @param options The options parameters.
   */
  async putAsyncRelativeRetryInvalidJsonPolling(
    options?: LrosaDsPutAsyncRelativeRetryInvalidJsonPollingOptionalParams
  ): Promise<
    LROPoller<LrosaDsPutAsyncRelativeRetryInvalidJsonPollingResponse>
  > {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPutAsyncRelativeRetryInvalidJsonPollingResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      putAsyncRelativeRetryInvalidJsonPollingOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: putAsyncRelativeRetryInvalidJsonPollingOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running delete request, service returns a 202 to the initial request receing a reponse with an
   * invalid 'Location' and 'Retry-After' headers
   * @param options The options parameters.
   */
  async delete202RetryInvalidHeader(
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<LrosaDsDelete202RetryInvalidHeaderResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDelete202RetryInvalidHeaderResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      delete202RetryInvalidHeaderOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: delete202RetryInvalidHeaderOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. The endpoint indicated in
   * the Azure-AsyncOperation header is invalid
   * @param options The options parameters.
   */
  async deleteAsyncRelativeRetryInvalidHeader(
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteAsyncRelativeRetryInvalidHeaderOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteAsyncRelativeRetryInvalidHeaderOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  async deleteAsyncRelativeRetryInvalidJsonPolling(
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingResponse>
  > {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteAsyncRelativeRetryInvalidJsonPollingOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteAsyncRelativeRetryInvalidJsonPollingOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with invalid 'Location' and
   * 'Retry-After' headers.
   * @param options The options parameters.
   */
  async post202RetryInvalidHeader(
    options?: LrosaDsPost202RetryInvalidHeaderOptionalParams
  ): Promise<LROPoller<LrosaDsPost202RetryInvalidHeaderResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPost202RetryInvalidHeaderResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      post202RetryInvalidHeaderOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: post202RetryInvalidHeaderOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is
   * invalid.
   * @param options The options parameters.
   */
  async postAsyncRelativeRetryInvalidHeader(
    options?: LrosaDsPostAsyncRelativeRetryInvalidHeaderOptionalParams
  ): Promise<LROPoller<LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      postAsyncRelativeRetryInvalidHeaderOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: postAsyncRelativeRetryInvalidHeaderOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async postAsyncRelativeRetryInvalidJsonPolling(
    options?: LrosaDsPostAsyncRelativeRetryInvalidJsonPollingOptionalParams
  ): Promise<
    LROPoller<LrosaDsPostAsyncRelativeRetryInvalidJsonPollingResponse>
  > {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LrosaDsPostAsyncRelativeRetryInvalidJsonPollingResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      postAsyncRelativeRetryInvalidJsonPollingOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: postAsyncRelativeRetryInvalidJsonPollingOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const putNonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/put/400",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const putNonRetry201Creating400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/put/201/creating/400",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const putNonRetry201Creating400InvalidJsonOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/put/201/creating/400/invalidjson",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const putAsyncRelativeRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/putasync/retry/400",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetry400Headers
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetry400Headers
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetry400Headers
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteNonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/delete/400",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsDeleteNonRetry400Headers
    },
    201: {
      headersMapper: Mappers.LrosaDsDeleteNonRetry400Headers
    },
    202: {
      headersMapper: Mappers.LrosaDsDeleteNonRetry400Headers
    },
    204: {
      headersMapper: Mappers.LrosaDsDeleteNonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const delete202NonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/delete/202/retry/400",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsDelete202NonRetry400Headers
    },
    201: {
      headersMapper: Mappers.LrosaDsDelete202NonRetry400Headers
    },
    202: {
      headersMapper: Mappers.LrosaDsDelete202NonRetry400Headers
    },
    204: {
      headersMapper: Mappers.LrosaDsDelete202NonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteAsyncRelativeRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/deleteasync/retry/400",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetry400Headers
    },
    201: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetry400Headers
    },
    202: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetry400Headers
    },
    204: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const postNonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/post/400",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPostNonRetry400Headers
    },
    201: {
      headersMapper: Mappers.LrosaDsPostNonRetry400Headers
    },
    202: {
      headersMapper: Mappers.LrosaDsPostNonRetry400Headers
    },
    204: {
      headersMapper: Mappers.LrosaDsPostNonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const post202NonRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/post/202/retry/400",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPost202NonRetry400Headers
    },
    201: {
      headersMapper: Mappers.LrosaDsPost202NonRetry400Headers
    },
    202: {
      headersMapper: Mappers.LrosaDsPost202NonRetry400Headers
    },
    204: {
      headersMapper: Mappers.LrosaDsPost202NonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const postAsyncRelativeRetry400OperationSpec: coreHttp.OperationSpec = {
  path: "/lro/nonretryerror/postasync/retry/400",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetry400Headers
    },
    201: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetry400Headers
    },
    202: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetry400Headers
    },
    204: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const putError201NoProvisioningStatePayloadOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/put/201/noprovisioningstatepayload",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const putAsyncRelativeRetryNoStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/putasync/retry/nostatus",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const putAsyncRelativeRetryNoStatusPayloadOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/putasync/retry/nostatuspayload",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusPayloadHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusPayloadHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusPayloadHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryNoStatusPayloadHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const delete204SucceededOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/delete/204/nolocation",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteAsyncRelativeRetryNoStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/deleteasync/retry/nostatus",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryNoStatusHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryNoStatusHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryNoStatusHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryNoStatusHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const post202NoLocationOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/post/202/nolocation",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPost202NoLocationHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsPost202NoLocationHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsPost202NoLocationHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsPost202NoLocationHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const postAsyncRelativeRetryNoPayloadOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/postasync/retry/nopayload",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryNoPayloadHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryNoPayloadHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryNoPayloadHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryNoPayloadHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const put200InvalidJsonOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/put/200/invalidjson",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    202: {
      bodyMapper: Mappers.Product
    },
    204: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const putAsyncRelativeRetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/putasync/retry/invalidheader",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryInvalidHeaderHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryInvalidHeaderHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryInvalidHeaderHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LrosaDsPutAsyncRelativeRetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const putAsyncRelativeRetryInvalidJsonPollingOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/putasync/retry/invalidjsonpolling",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper:
        Mappers.LrosaDsPutAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper:
        Mappers.LrosaDsPutAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper:
        Mappers.LrosaDsPutAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper:
        Mappers.LrosaDsPutAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const delete202RetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/delete/202/retry/invalidheader",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsDelete202RetryInvalidHeaderHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsDelete202RetryInvalidHeaderHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsDelete202RetryInvalidHeaderHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsDelete202RetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteAsyncRelativeRetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/deleteasync/retry/invalidheader",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidHeaderHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidHeaderHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidHeaderHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const deleteAsyncRelativeRetryInvalidJsonPollingOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/deleteasync/retry/invalidjsonpolling",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper:
        Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    201: {
      headersMapper:
        Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    202: {
      headersMapper:
        Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    204: {
      headersMapper:
        Mappers.LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const post202RetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/post/202/retry/invalidheader",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPost202RetryInvalidHeaderHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsPost202RetryInvalidHeaderHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsPost202RetryInvalidHeaderHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsPost202RetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const postAsyncRelativeRetryInvalidHeaderOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/postasync/retry/invalidheader",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryInvalidHeaderHeaders
    },
    201: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryInvalidHeaderHeaders
    },
    202: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryInvalidHeaderHeaders
    },
    204: {
      headersMapper: Mappers.LrosaDsPostAsyncRelativeRetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const postAsyncRelativeRetryInvalidJsonPollingOperationSpec: coreHttp.OperationSpec = {
  path: "/lro/error/postasync/retry/invalidjsonpolling",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper:
        Mappers.LrosaDsPostAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    201: {
      headersMapper:
        Mappers.LrosaDsPostAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    202: {
      headersMapper:
        Mappers.LrosaDsPostAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    204: {
      headersMapper:
        Mappers.LrosaDsPostAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
