/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export interface Resource {
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource Type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
  /** Resource Location */
  location?: string;
  /**
   * Resource Name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
}

export interface CloudError {
  code?: number;
  message?: string;
}

export interface Sku {
  name?: string;
  id?: string;
}

export interface SubResource {
  /**
   * Sub Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

export interface OperationResult {
  /** The status of the request */
  status?: OperationResultStatus;
  error?: OperationResultError;
}

export interface OperationResultError {
  /** The error code for an operation failure */
  code?: number;
  /** The detailed arror message */
  message?: string;
}

export interface Product extends Resource {
  provisioningState?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningStateValues?: ProductPropertiesProvisioningStateValues;
}

export interface SubProduct extends SubResource {
  provisioningState?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningStateValues?: SubProductPropertiesProvisioningStateValues;
}

/** Defines headers for LROs_patch200SucceededIgnoreHeaders operation. */
export interface LROsPatch200SucceededIgnoreHeadersHeaders {
  /** This header should be ignored in this case */
  azureAsyncOperation?: string;
}

/** Defines headers for LROs_patch201RetryWithAsyncHeader operation. */
export interface LROsPatch201RetryWithAsyncHeaderHeaders {
  /** Location to poll for result status: will be set to /lro/patch/201/retry/onlyAsyncHeader/operationStatuses/201 */
  azureAsyncOperation?: string;
}

/** Defines headers for LROs_patch202RetryWithAsyncAndLocationHeader operation. */
export interface LROsPatch202RetryWithAsyncAndLocationHeaderHeaders {
  /** Location to poll for result status: will be set to /lro/patch/202/retry/asyncAndLocationHeader/operationResults/202 */
  azureAsyncOperation?: string;
  /** Location to poll for final status: will be set to /lro/patch/202/retry/asyncAndLocationHeader/operationResults/202/finalResults/202 */
  location?: string;
}

/** Defines headers for LROs_post202List operation. */
export interface LROsPost202ListHeaders {
  /** Location to poll for result status: will be set to /lro/list/pollingGet */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/list/finalGet */
  location?: string;
}

/** Defines headers for LROs_putNoHeaderInRetry operation. */
export interface LROsPutNoHeaderInRetryHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/noheader/202/200/operationResults */
  location?: string;
}

/** Defines headers for LROs_putAsyncRetrySucceeded operation. */
export interface LROsPutAsyncRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_putAsyncNoRetrySucceeded operation. */
export interface LROsPutAsyncNoRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/noretry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/noretry/succeeded/operationResults/200 */
  location?: string;
}

/** Defines headers for LROs_putAsyncRetryFailed operation. */
export interface LROsPutAsyncRetryFailedHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/failed/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/failed/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_putAsyncNoRetrycanceled operation. */
export interface LROsPutAsyncNoRetrycanceledHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/noretry/canceled/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/noretry/canceled/operationResults/200 */
  location?: string;
}

/** Defines headers for LROs_putAsyncNoHeaderInRetry operation. */
export interface LROsPutAsyncNoHeaderInRetryHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for LROs_deleteProvisioning202Accepted200Succeeded operation. */
export interface LROsDeleteProvisioning202Accepted200SucceededHeaders {
  /** Location to poll for result status: will be set to /lro/delete/provisioning/202/accepted/200/succeeded */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_deleteProvisioning202DeletingFailed200 operation. */
export interface LROsDeleteProvisioning202DeletingFailed200Headers {
  /** Location to poll for result status: will be set to /lro/delete/provisioning/202/deleting/200/failed */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_deleteProvisioning202Deletingcanceled200 operation. */
export interface LROsDeleteProvisioning202Deletingcanceled200Headers {
  /** Location to poll for result status: will be set to /lro/delete/provisioning/202/deleting/200/canceled */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_delete202Retry200 operation. */
export interface LROsDelete202Retry200Headers {
  /** Location to poll for result status: will be set to /lro/delete/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_delete202NoRetry204 operation. */
export interface LROsDelete202NoRetry204Headers {
  /** Location to poll for result status: will be set to /lro/delete/202/noretry/204 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_deleteNoHeaderInRetry operation. */
export interface LROsDeleteNoHeaderInRetryHeaders {
  /** Location to poll for result status: will be set to /lro/put/noheader/202/204/operationresults */
  location?: string;
}

/** Defines headers for LROs_deleteAsyncNoHeaderInRetry operation. */
export interface LROsDeleteAsyncNoHeaderInRetryHeaders {
  /** Location to poll for result status: will be set to /lro/put/noheader/202/204/operationresults */
  location?: string;
}

/** Defines headers for LROs_deleteAsyncRetrySucceeded operation. */
export interface LROsDeleteAsyncRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_deleteAsyncNoRetrySucceeded operation. */
export interface LROsDeleteAsyncNoRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/deleteasync/noretry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/deleteasync/noretry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_deleteAsyncRetryFailed operation. */
export interface LROsDeleteAsyncRetryFailedHeaders {
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/failed/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/failed/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_deleteAsyncRetrycanceled operation. */
export interface LROsDeleteAsyncRetrycanceledHeaders {
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/canceled/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/canceled/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_post202Retry200 operation. */
export interface LROsPost202Retry200Headers {
  /** Location to poll for result status: will be set to /lro/post/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_post202NoRetry204 operation. */
export interface LROsPost202NoRetry204Headers {
  /** Location to poll for result status: will be set to /lro/post/202/noretry/204 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_postAsyncRetrySucceeded operation. */
export interface LROsPostAsyncRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_postAsyncNoRetrySucceeded operation. */
export interface LROsPostAsyncNoRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_postAsyncRetryFailed operation. */
export interface LROsPostAsyncRetryFailedHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/failed/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/failed/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROs_postAsyncRetrycanceled operation. */
export interface LROsPostAsyncRetrycanceledHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/canceled/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/canceled/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LRORetrys_putAsyncRelativeRetrySucceeded operation. */
export interface LRORetrysPutAsyncRelativeRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/retryerror/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/retryerror/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LRORetrys_deleteProvisioning202Accepted200Succeeded operation. */
export interface LRORetrysDeleteProvisioning202Accepted200SucceededHeaders {
  /** Location to poll for result status: will be set to /lro/retryerror/delete/provisioning/202/accepted/200/succeeded */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LRORetrys_delete202Retry200 operation. */
export interface LRORetrysDelete202Retry200Headers {
  /** Location to poll for result status: will be set to /lro/retryerror/delete/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LRORetrys_deleteAsyncRelativeRetrySucceeded operation. */
export interface LRORetrysDeleteAsyncRelativeRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/retryerror/deleteasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/retryerror/deleteasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LRORetrys_post202Retry200 operation. */
export interface LRORetrysPost202Retry200Headers {
  /** Location to poll for result status: will be set to /lro/retryerror/post/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LRORetrys_postAsyncRelativeRetrySucceeded operation. */
export interface LRORetrysPostAsyncRelativeRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/retryerror/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/retryerror/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_putAsyncRelativeRetry400 operation. */
export interface LrosaDsPutAsyncRelativeRetry400Headers {
  /** Location to poll for result status: will be set to /lro/nonretryerror/putasync/retry/operationResults/400 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/nonretryerror/putasync/retry/operationResults/400 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_deleteNonRetry400 operation. */
export interface LrosaDsDeleteNonRetry400Headers {
  /** Location to poll for result status: will be set to /lro/retryerror/delete/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_delete202NonRetry400 operation. */
export interface LrosaDsDelete202NonRetry400Headers {
  /** Location to poll for result status: will be set to /lro/retryerror/delete/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_deleteAsyncRelativeRetry400 operation. */
export interface LrosaDsDeleteAsyncRelativeRetry400Headers {
  /** Location to poll for result status: will be set to /lro/nonretryerror/deleteasync/retry/operationResults/400 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/nonretryerror/deleteasync/retry/operationResults/400 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_postNonRetry400 operation. */
export interface LrosaDsPostNonRetry400Headers {
  /** Location to poll for result status: will be set to /lro/retryerror/post/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_post202NonRetry400 operation. */
export interface LrosaDsPost202NonRetry400Headers {
  /** Location to poll for result status: will be set to /lro/retryerror/post/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_postAsyncRelativeRetry400 operation. */
export interface LrosaDsPostAsyncRelativeRetry400Headers {
  /** Location to poll for result status: will be set to /lro/nonretryerror/putasync/retry/operationResults/400 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/nonretryerror/putasync/retry/operationResults/400 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_putAsyncRelativeRetryNoStatus operation. */
export interface LrosaDsPutAsyncRelativeRetryNoStatusHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_putAsyncRelativeRetryNoStatusPayload operation. */
export interface LrosaDsPutAsyncRelativeRetryNoStatusPayloadHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_deleteAsyncRelativeRetryNoStatus operation. */
export interface LrosaDsDeleteAsyncRelativeRetryNoStatusHeaders {
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_post202NoLocation operation. */
export interface LrosaDsPost202NoLocationHeaders {
  /** Location to poll for result status: will not be set */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_postAsyncRelativeRetryNoPayload operation. */
export interface LrosaDsPostAsyncRelativeRetryNoPayloadHeaders {
  /** Location to poll for result status: will be set to /lro/error/putasync/retry/failed/operationResults/nopayload */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/error/putasync/retry/failed/operationResults/nopayload */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_putAsyncRelativeRetryInvalidHeader operation. */
export interface LrosaDsPutAsyncRelativeRetryInvalidHeaderHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_putAsyncRelativeRetryInvalidJsonPolling operation. */
export interface LrosaDsPutAsyncRelativeRetryInvalidJsonPollingHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/failed/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/failed/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_delete202RetryInvalidHeader operation. */
export interface LrosaDsDelete202RetryInvalidHeaderHeaders {
  /** Location to poll for result status: will be set to /foo */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to /bar */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_deleteAsyncRelativeRetryInvalidHeader operation. */
export interface LrosaDsDeleteAsyncRelativeRetryInvalidHeaderHeaders {
  /** Location to poll for result status: will be set to /foo */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /foo */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to /bar */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_deleteAsyncRelativeRetryInvalidJsonPolling operation. */
export interface LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders {
  /** Location to poll for result status: will be set to /lro/error/deleteasync/retry/failed/operationResults/invalidjsonpolling */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/error/deleteasync/retry/failed/operationResults/invalidjsonpolling */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_post202RetryInvalidHeader operation. */
export interface LrosaDsPost202RetryInvalidHeaderHeaders {
  /** Location to poll for result status: will be set to /foo */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to /bar */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_postAsyncRelativeRetryInvalidHeader operation. */
export interface LrosaDsPostAsyncRelativeRetryInvalidHeaderHeaders {
  /** Location to poll for result status: will be set to foo */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to foo */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to /bar */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_postAsyncRelativeRetryInvalidJsonPolling operation. */
export interface LrosaDsPostAsyncRelativeRetryInvalidJsonPollingHeaders {
  /** Location to poll for result status: will be set to /lro/error/postasync/retry/failed/operationResults/invalidjsonpolling */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/error/postasync/retry/failed/operationResults/invalidjsonpolling */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROsCustomHeader_putAsyncRetrySucceeded operation. */
export interface LROsCustomHeaderPutAsyncRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/customheader/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/customheader/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROsCustomHeader_post202Retry200 operation. */
export interface LROsCustomHeaderPost202Retry200Headers {
  /** Location to poll for result status: will be set to /lro/customheader/post/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LROsCustomHeader_postAsyncRetrySucceeded operation. */
export interface LROsCustomHeaderPostAsyncRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/customheader/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/customheader/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Known values of {@link ProductPropertiesProvisioningStateValues} that the service accepts. */
export enum KnownProductPropertiesProvisioningStateValues {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "canceled",
  /** Accepted */
  Accepted = "Accepted",
  /** Creating */
  Creating = "Creating",
  /** Created */
  Created = "Created",
  /** Updating */
  Updating = "Updating",
  /** Updated */
  Updated = "Updated",
  /** Deleting */
  Deleting = "Deleting",
  /** Deleted */
  Deleted = "Deleted",
  /** OK */
  OK = "OK"
}

/**
 * Defines values for ProductPropertiesProvisioningStateValues. \
 * {@link KnownProductPropertiesProvisioningStateValues} can be used interchangeably with ProductPropertiesProvisioningStateValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **canceled** \
 * **Accepted** \
 * **Creating** \
 * **Created** \
 * **Updating** \
 * **Updated** \
 * **Deleting** \
 * **Deleted** \
 * **OK**
 */
export type ProductPropertiesProvisioningStateValues = string;

/** Known values of {@link SubProductPropertiesProvisioningStateValues} that the service accepts. */
export enum KnownSubProductPropertiesProvisioningStateValues {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "canceled",
  /** Accepted */
  Accepted = "Accepted",
  /** Creating */
  Creating = "Creating",
  /** Created */
  Created = "Created",
  /** Updating */
  Updating = "Updating",
  /** Updated */
  Updated = "Updated",
  /** Deleting */
  Deleting = "Deleting",
  /** Deleted */
  Deleted = "Deleted",
  /** OK */
  OK = "OK"
}

/**
 * Defines values for SubProductPropertiesProvisioningStateValues. \
 * {@link KnownSubProductPropertiesProvisioningStateValues} can be used interchangeably with SubProductPropertiesProvisioningStateValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **canceled** \
 * **Accepted** \
 * **Creating** \
 * **Created** \
 * **Updating** \
 * **Updated** \
 * **Deleting** \
 * **Deleted** \
 * **OK**
 */
export type SubProductPropertiesProvisioningStateValues = string;

/** Known values of {@link OperationResultStatus} that the service accepts. */
export enum KnownOperationResultStatus {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "canceled",
  /** Accepted */
  Accepted = "Accepted",
  /** Creating */
  Creating = "Creating",
  /** Created */
  Created = "Created",
  /** Updating */
  Updating = "Updating",
  /** Updated */
  Updated = "Updated",
  /** Deleting */
  Deleting = "Deleting",
  /** Deleted */
  Deleted = "Deleted",
  /** OK */
  OK = "OK"
}

/**
 * Defines values for OperationResultStatus. \
 * {@link KnownOperationResultStatus} can be used interchangeably with OperationResultStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **canceled** \
 * **Accepted** \
 * **Creating** \
 * **Created** \
 * **Updating** \
 * **Updated** \
 * **Deleting** \
 * **Deleted** \
 * **OK**
 */
export type OperationResultStatus = string;

/** Optional parameters. */
export interface LROsPut200SucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put200Succeeded operation. */
export type LROsPut200SucceededResponse = Product;

/** Optional parameters. */
export interface LROsPatch200SucceededIgnoreHeadersOptionalParams
  extends coreClient.OperationOptions {
  /** Product to patch */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the patch200SucceededIgnoreHeaders operation. */
export type LROsPatch200SucceededIgnoreHeadersResponse = LROsPatch200SucceededIgnoreHeadersHeaders &
  Product;

/** Optional parameters. */
export interface LROsPatch201RetryWithAsyncHeaderOptionalParams
  extends coreClient.OperationOptions {
  /** Product to patch */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the patch201RetryWithAsyncHeader operation. */
export type LROsPatch201RetryWithAsyncHeaderResponse = Product;

/** Optional parameters. */
export interface LROsPatch202RetryWithAsyncAndLocationHeaderOptionalParams
  extends coreClient.OperationOptions {
  /** Product to patch */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the patch202RetryWithAsyncAndLocationHeader operation. */
export type LROsPatch202RetryWithAsyncAndLocationHeaderResponse = Product;

/** Optional parameters. */
export interface LROsPut201SucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put201Succeeded operation. */
export type LROsPut201SucceededResponse = Product;

/** Optional parameters. */
export interface LROsPost202ListOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202List operation. */
export type LROsPost202ListResponse = Product[];

/** Optional parameters. */
export interface LROsPut200SucceededNoStateOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put200SucceededNoState operation. */
export type LROsPut200SucceededNoStateResponse = Product;

/** Optional parameters. */
export interface LROsPut202Retry200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put202Retry200 operation. */
export type LROsPut202Retry200Response = Product;

/** Optional parameters. */
export interface LROsPut201CreatingSucceeded200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put201CreatingSucceeded200 operation. */
export type LROsPut201CreatingSucceeded200Response = Product;

/** Optional parameters. */
export interface LROsPut200UpdatingSucceeded204OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put200UpdatingSucceeded204 operation. */
export type LROsPut200UpdatingSucceeded204Response = Product;

/** Optional parameters. */
export interface LROsPut201CreatingFailed200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put201CreatingFailed200 operation. */
export type LROsPut201CreatingFailed200Response = Product;

/** Optional parameters. */
export interface LROsPut200Acceptedcanceled200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put200Acceptedcanceled200 operation. */
export type LROsPut200Acceptedcanceled200Response = Product;

/** Optional parameters. */
export interface LROsPutNoHeaderInRetryOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putNoHeaderInRetry operation. */
export type LROsPutNoHeaderInRetryResponse = LROsPutNoHeaderInRetryHeaders &
  Product;

/** Optional parameters. */
export interface LROsPutAsyncRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRetrySucceeded operation. */
export type LROsPutAsyncRetrySucceededResponse = LROsPutAsyncRetrySucceededHeaders &
  Product;

/** Optional parameters. */
export interface LROsPutAsyncNoRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncNoRetrySucceeded operation. */
export type LROsPutAsyncNoRetrySucceededResponse = LROsPutAsyncNoRetrySucceededHeaders &
  Product;

/** Optional parameters. */
export interface LROsPutAsyncRetryFailedOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRetryFailed operation. */
export type LROsPutAsyncRetryFailedResponse = LROsPutAsyncRetryFailedHeaders &
  Product;

/** Optional parameters. */
export interface LROsPutAsyncNoRetrycanceledOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncNoRetrycanceled operation. */
export type LROsPutAsyncNoRetrycanceledResponse = LROsPutAsyncNoRetrycanceledHeaders &
  Product;

/** Optional parameters. */
export interface LROsPutAsyncNoHeaderInRetryOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncNoHeaderInRetry operation. */
export type LROsPutAsyncNoHeaderInRetryResponse = LROsPutAsyncNoHeaderInRetryHeaders &
  Product;

/** Optional parameters. */
export interface LROsPutNonResourceOptionalParams
  extends coreClient.OperationOptions {
  /** sku to put */
  sku?: Sku;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putNonResource operation. */
export type LROsPutNonResourceResponse = Sku;

/** Optional parameters. */
export interface LROsPutAsyncNonResourceOptionalParams
  extends coreClient.OperationOptions {
  /** Sku to put */
  sku?: Sku;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncNonResource operation. */
export type LROsPutAsyncNonResourceResponse = Sku;

/** Optional parameters. */
export interface LROsPutSubResourceOptionalParams
  extends coreClient.OperationOptions {
  /** Sub Product to put */
  product?: SubProduct;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putSubResource operation. */
export type LROsPutSubResourceResponse = SubProduct;

/** Optional parameters. */
export interface LROsPutAsyncSubResourceOptionalParams
  extends coreClient.OperationOptions {
  /** Sub Product to put */
  product?: SubProduct;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncSubResource operation. */
export type LROsPutAsyncSubResourceResponse = SubProduct;

/** Optional parameters. */
export interface LROsDeleteProvisioning202Accepted200SucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteProvisioning202Accepted200Succeeded operation. */
export type LROsDeleteProvisioning202Accepted200SucceededResponse = Product;

/** Optional parameters. */
export interface LROsDeleteProvisioning202DeletingFailed200OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteProvisioning202DeletingFailed200 operation. */
export type LROsDeleteProvisioning202DeletingFailed200Response = Product;

/** Optional parameters. */
export interface LROsDeleteProvisioning202Deletingcanceled200OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteProvisioning202Deletingcanceled200 operation. */
export type LROsDeleteProvisioning202Deletingcanceled200Response = Product;

/** Optional parameters. */
export interface LROsDelete204SucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LROsDelete202Retry200OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete202Retry200 operation. */
export type LROsDelete202Retry200Response = Product;

/** Optional parameters. */
export interface LROsDelete202NoRetry204OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete202NoRetry204 operation. */
export type LROsDelete202NoRetry204Response = Product;

/** Optional parameters. */
export interface LROsDeleteNoHeaderInRetryOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteNoHeaderInRetry operation. */
export type LROsDeleteNoHeaderInRetryResponse = LROsDeleteNoHeaderInRetryHeaders;

/** Optional parameters. */
export interface LROsDeleteAsyncNoHeaderInRetryOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncNoHeaderInRetry operation. */
export type LROsDeleteAsyncNoHeaderInRetryResponse = LROsDeleteAsyncNoHeaderInRetryHeaders;

/** Optional parameters. */
export interface LROsDeleteAsyncRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRetrySucceeded operation. */
export type LROsDeleteAsyncRetrySucceededResponse = LROsDeleteAsyncRetrySucceededHeaders;

/** Optional parameters. */
export interface LROsDeleteAsyncNoRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncNoRetrySucceeded operation. */
export type LROsDeleteAsyncNoRetrySucceededResponse = LROsDeleteAsyncNoRetrySucceededHeaders;

/** Optional parameters. */
export interface LROsDeleteAsyncRetryFailedOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRetryFailed operation. */
export type LROsDeleteAsyncRetryFailedResponse = LROsDeleteAsyncRetryFailedHeaders;

/** Optional parameters. */
export interface LROsDeleteAsyncRetrycanceledOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRetrycanceled operation. */
export type LROsDeleteAsyncRetrycanceledResponse = LROsDeleteAsyncRetrycanceledHeaders;

/** Optional parameters. */
export interface LROsPost200WithPayloadOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post200WithPayload operation. */
export type LROsPost200WithPayloadResponse = Sku;

/** Optional parameters. */
export interface LROsPost202Retry200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202Retry200 operation. */
export type LROsPost202Retry200Response = LROsPost202Retry200Headers;

/** Optional parameters. */
export interface LROsPost202NoRetry204OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202NoRetry204 operation. */
export type LROsPost202NoRetry204Response = LROsPost202NoRetry204Headers &
  Product;

/** Optional parameters. */
export interface LROsPostDoubleHeadersFinalLocationGetOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postDoubleHeadersFinalLocationGet operation. */
export type LROsPostDoubleHeadersFinalLocationGetResponse = Product;

/** Optional parameters. */
export interface LROsPostDoubleHeadersFinalAzureHeaderGetOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postDoubleHeadersFinalAzureHeaderGet operation. */
export type LROsPostDoubleHeadersFinalAzureHeaderGetResponse = Product;

/** Optional parameters. */
export interface LROsPostDoubleHeadersFinalAzureHeaderGetDefaultOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postDoubleHeadersFinalAzureHeaderGetDefault operation. */
export type LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse = Product;

/** Optional parameters. */
export interface LROsPostAsyncRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRetrySucceeded operation. */
export type LROsPostAsyncRetrySucceededResponse = Product;

/** Optional parameters. */
export interface LROsPostAsyncNoRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncNoRetrySucceeded operation. */
export type LROsPostAsyncNoRetrySucceededResponse = Product;

/** Optional parameters. */
export interface LROsPostAsyncRetryFailedOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRetryFailed operation. */
export type LROsPostAsyncRetryFailedResponse = LROsPostAsyncRetryFailedHeaders;

/** Optional parameters. */
export interface LROsPostAsyncRetrycanceledOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRetrycanceled operation. */
export type LROsPostAsyncRetrycanceledResponse = LROsPostAsyncRetrycanceledHeaders;

/** Optional parameters. */
export interface LRORetrysPut201CreatingSucceeded200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put201CreatingSucceeded200 operation. */
export type LRORetrysPut201CreatingSucceeded200Response = Product;

/** Optional parameters. */
export interface LRORetrysPutAsyncRelativeRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRelativeRetrySucceeded operation. */
export type LRORetrysPutAsyncRelativeRetrySucceededResponse = LRORetrysPutAsyncRelativeRetrySucceededHeaders &
  Product;

/** Optional parameters. */
export interface LRORetrysDeleteProvisioning202Accepted200SucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteProvisioning202Accepted200Succeeded operation. */
export type LRORetrysDeleteProvisioning202Accepted200SucceededResponse = Product;

/** Optional parameters. */
export interface LRORetrysDelete202Retry200OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete202Retry200 operation. */
export type LRORetrysDelete202Retry200Response = LRORetrysDelete202Retry200Headers;

/** Optional parameters. */
export interface LRORetrysDeleteAsyncRelativeRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRelativeRetrySucceeded operation. */
export type LRORetrysDeleteAsyncRelativeRetrySucceededResponse = LRORetrysDeleteAsyncRelativeRetrySucceededHeaders;

/** Optional parameters. */
export interface LRORetrysPost202Retry200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202Retry200 operation. */
export type LRORetrysPost202Retry200Response = LRORetrysPost202Retry200Headers;

/** Optional parameters. */
export interface LRORetrysPostAsyncRelativeRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRelativeRetrySucceeded operation. */
export type LRORetrysPostAsyncRelativeRetrySucceededResponse = LRORetrysPostAsyncRelativeRetrySucceededHeaders;

/** Optional parameters. */
export interface LrosaDsPutNonRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putNonRetry400 operation. */
export type LrosaDsPutNonRetry400Response = Product;

/** Optional parameters. */
export interface LrosaDsPutNonRetry201Creating400OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putNonRetry201Creating400 operation. */
export type LrosaDsPutNonRetry201Creating400Response = Product;

/** Optional parameters. */
export interface LrosaDsPutNonRetry201Creating400InvalidJsonOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putNonRetry201Creating400InvalidJson operation. */
export type LrosaDsPutNonRetry201Creating400InvalidJsonResponse = Product;

/** Optional parameters. */
export interface LrosaDsPutAsyncRelativeRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRelativeRetry400 operation. */
export type LrosaDsPutAsyncRelativeRetry400Response = LrosaDsPutAsyncRelativeRetry400Headers &
  Product;

/** Optional parameters. */
export interface LrosaDsDeleteNonRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteNonRetry400 operation. */
export type LrosaDsDeleteNonRetry400Response = LrosaDsDeleteNonRetry400Headers;

/** Optional parameters. */
export interface LrosaDsDelete202NonRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete202NonRetry400 operation. */
export type LrosaDsDelete202NonRetry400Response = LrosaDsDelete202NonRetry400Headers;

/** Optional parameters. */
export interface LrosaDsDeleteAsyncRelativeRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRelativeRetry400 operation. */
export type LrosaDsDeleteAsyncRelativeRetry400Response = LrosaDsDeleteAsyncRelativeRetry400Headers;

/** Optional parameters. */
export interface LrosaDsPostNonRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postNonRetry400 operation. */
export type LrosaDsPostNonRetry400Response = LrosaDsPostNonRetry400Headers;

/** Optional parameters. */
export interface LrosaDsPost202NonRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202NonRetry400 operation. */
export type LrosaDsPost202NonRetry400Response = LrosaDsPost202NonRetry400Headers;

/** Optional parameters. */
export interface LrosaDsPostAsyncRelativeRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRelativeRetry400 operation. */
export type LrosaDsPostAsyncRelativeRetry400Response = LrosaDsPostAsyncRelativeRetry400Headers;

/** Optional parameters. */
export interface LrosaDsPutError201NoProvisioningStatePayloadOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putError201NoProvisioningStatePayload operation. */
export type LrosaDsPutError201NoProvisioningStatePayloadResponse = Product;

/** Optional parameters. */
export interface LrosaDsPutAsyncRelativeRetryNoStatusOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRelativeRetryNoStatus operation. */
export type LrosaDsPutAsyncRelativeRetryNoStatusResponse = LrosaDsPutAsyncRelativeRetryNoStatusHeaders &
  Product;

/** Optional parameters. */
export interface LrosaDsPutAsyncRelativeRetryNoStatusPayloadOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRelativeRetryNoStatusPayload operation. */
export type LrosaDsPutAsyncRelativeRetryNoStatusPayloadResponse = LrosaDsPutAsyncRelativeRetryNoStatusPayloadHeaders &
  Product;

/** Optional parameters. */
export interface LrosaDsDelete204SucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LrosaDsDeleteAsyncRelativeRetryNoStatusOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRelativeRetryNoStatus operation. */
export type LrosaDsDeleteAsyncRelativeRetryNoStatusResponse = LrosaDsDeleteAsyncRelativeRetryNoStatusHeaders;

/** Optional parameters. */
export interface LrosaDsPost202NoLocationOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202NoLocation operation. */
export type LrosaDsPost202NoLocationResponse = LrosaDsPost202NoLocationHeaders;

/** Optional parameters. */
export interface LrosaDsPostAsyncRelativeRetryNoPayloadOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRelativeRetryNoPayload operation. */
export type LrosaDsPostAsyncRelativeRetryNoPayloadResponse = LrosaDsPostAsyncRelativeRetryNoPayloadHeaders;

/** Optional parameters. */
export interface LrosaDsPut200InvalidJsonOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put200InvalidJson operation. */
export type LrosaDsPut200InvalidJsonResponse = Product;

/** Optional parameters. */
export interface LrosaDsPutAsyncRelativeRetryInvalidHeaderOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRelativeRetryInvalidHeader operation. */
export type LrosaDsPutAsyncRelativeRetryInvalidHeaderResponse = LrosaDsPutAsyncRelativeRetryInvalidHeaderHeaders &
  Product;

/** Optional parameters. */
export interface LrosaDsPutAsyncRelativeRetryInvalidJsonPollingOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRelativeRetryInvalidJsonPolling operation. */
export type LrosaDsPutAsyncRelativeRetryInvalidJsonPollingResponse = LrosaDsPutAsyncRelativeRetryInvalidJsonPollingHeaders &
  Product;

/** Optional parameters. */
export interface LrosaDsDelete202RetryInvalidHeaderOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete202RetryInvalidHeader operation. */
export type LrosaDsDelete202RetryInvalidHeaderResponse = LrosaDsDelete202RetryInvalidHeaderHeaders;

/** Optional parameters. */
export interface LrosaDsDeleteAsyncRelativeRetryInvalidHeaderOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRelativeRetryInvalidHeader operation. */
export type LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse = LrosaDsDeleteAsyncRelativeRetryInvalidHeaderHeaders;

/** Optional parameters. */
export interface LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRelativeRetryInvalidJsonPolling operation. */
export type LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingResponse = LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders;

/** Optional parameters. */
export interface LrosaDsPost202RetryInvalidHeaderOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202RetryInvalidHeader operation. */
export type LrosaDsPost202RetryInvalidHeaderResponse = LrosaDsPost202RetryInvalidHeaderHeaders;

/** Optional parameters. */
export interface LrosaDsPostAsyncRelativeRetryInvalidHeaderOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRelativeRetryInvalidHeader operation. */
export type LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse = LrosaDsPostAsyncRelativeRetryInvalidHeaderHeaders;

/** Optional parameters. */
export interface LrosaDsPostAsyncRelativeRetryInvalidJsonPollingOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRelativeRetryInvalidJsonPolling operation. */
export type LrosaDsPostAsyncRelativeRetryInvalidJsonPollingResponse = LrosaDsPostAsyncRelativeRetryInvalidJsonPollingHeaders;

/** Optional parameters. */
export interface LROsCustomHeaderPutAsyncRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRetrySucceeded operation. */
export type LROsCustomHeaderPutAsyncRetrySucceededResponse = LROsCustomHeaderPutAsyncRetrySucceededHeaders &
  Product;

/** Optional parameters. */
export interface LROsCustomHeaderPut201CreatingSucceeded200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put201CreatingSucceeded200 operation. */
export type LROsCustomHeaderPut201CreatingSucceeded200Response = Product;

/** Optional parameters. */
export interface LROsCustomHeaderPost202Retry200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202Retry200 operation. */
export type LROsCustomHeaderPost202Retry200Response = LROsCustomHeaderPost202Retry200Headers;

/** Optional parameters. */
export interface LROsCustomHeaderPostAsyncRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRetrySucceeded operation. */
export type LROsCustomHeaderPostAsyncRetrySucceededResponse = LROsCustomHeaderPostAsyncRetrySucceededHeaders;

/** Optional parameters. */
export interface LROClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
