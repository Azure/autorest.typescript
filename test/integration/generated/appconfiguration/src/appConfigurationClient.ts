/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { AppConfigurationClientContext } from "./appConfigurationClientContext";
import {
  AppConfigurationClientOptionalParams,
  Key,
  AppConfigurationClientGetKeysNextOptionalParams,
  AppConfigurationClientGetKeysOptionalParams,
  KeyValue,
  AppConfigurationClientGetKeyValuesNextOptionalParams,
  AppConfigurationClientGetKeyValuesOptionalParams,
  Label,
  AppConfigurationClientGetLabelsNextOptionalParams,
  AppConfigurationClientGetLabelsOptionalParams,
  AppConfigurationClientGetRevisionsNextOptionalParams,
  AppConfigurationClientGetRevisionsOptionalParams,
  AppConfigurationClientGetKeysResponse,
  AppConfigurationClientCheckKeysOptionalParams,
  AppConfigurationClientCheckKeysResponse,
  AppConfigurationClientGetKeyValuesResponse,
  AppConfigurationClientCheckKeyValuesOptionalParams,
  AppConfigurationClientCheckKeyValuesResponse,
  AppConfigurationClientGetKeyValueOptionalParams,
  AppConfigurationClientGetKeyValueResponse,
  AppConfigurationClientPutKeyValueOptionalParams,
  AppConfigurationClientPutKeyValueResponse,
  AppConfigurationClientDeleteKeyValueOptionalParams,
  AppConfigurationClientDeleteKeyValueResponse,
  AppConfigurationClientCheckKeyValueOptionalParams,
  AppConfigurationClientCheckKeyValueResponse,
  AppConfigurationClientGetLabelsResponse,
  AppConfigurationClientCheckLabelsOptionalParams,
  AppConfigurationClientCheckLabelsResponse,
  AppConfigurationClientPutLockOptionalParams,
  AppConfigurationClientPutLockResponse,
  AppConfigurationClientDeleteLockOptionalParams,
  AppConfigurationClientDeleteLockResponse,
  AppConfigurationClientGetRevisionsResponse,
  AppConfigurationClientCheckRevisionsOptionalParams,
  AppConfigurationClientCheckRevisionsResponse,
  AppConfigurationClientGetKeysNextResponse,
  AppConfigurationClientGetKeyValuesNextResponse,
  AppConfigurationClientGetLabelsNextResponse,
  AppConfigurationClientGetRevisionsNextResponse
} from "./models";

/// <reference lib="esnext.asynciterable" />
export class AppConfigurationClient extends AppConfigurationClientContext {
  /**
   * Initializes a new instance of the AppConfigurationClient class.
   * @param endpoint The endpoint of the App Configuration instance to send requests to.
   * @param options The parameter options
   */
  constructor(
    endpoint: string,
    options?: AppConfigurationClientOptionalParams
  ) {
    super(endpoint, options);
  }

  /**
   * Gets a list of keys.
   * @param options The options parameters.
   */
  public listKeys(
    options?: AppConfigurationClientGetKeysOptionalParams
  ): PagedAsyncIterableIterator<Key> {
    const iter = this.getKeysPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getKeysPagingPage(options);
      }
    };
  }

  private async *getKeysPagingPage(
    options?: AppConfigurationClientGetKeysOptionalParams
  ): AsyncIterableIterator<Key[]> {
    let result = await this._getKeys(options);
    yield result.items || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getKeysNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.items || [];
    }
  }

  private async *getKeysPagingAll(
    options?: AppConfigurationClientGetKeysOptionalParams
  ): AsyncIterableIterator<Key> {
    for await (const page of this.getKeysPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of key-values.
   * @param options The options parameters.
   */
  public listKeyValues(
    options?: AppConfigurationClientGetKeyValuesOptionalParams
  ): PagedAsyncIterableIterator<KeyValue> {
    const iter = this.getKeyValuesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getKeyValuesPagingPage(options);
      }
    };
  }

  private async *getKeyValuesPagingPage(
    options?: AppConfigurationClientGetKeyValuesOptionalParams
  ): AsyncIterableIterator<KeyValue[]> {
    let result = await this._getKeyValues(options);
    yield result.items || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getKeyValuesNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.items || [];
    }
  }

  private async *getKeyValuesPagingAll(
    options?: AppConfigurationClientGetKeyValuesOptionalParams
  ): AsyncIterableIterator<KeyValue> {
    for await (const page of this.getKeyValuesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of labels.
   * @param options The options parameters.
   */
  public listLabels(
    options?: AppConfigurationClientGetLabelsOptionalParams
  ): PagedAsyncIterableIterator<Label> {
    const iter = this.getLabelsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getLabelsPagingPage(options);
      }
    };
  }

  private async *getLabelsPagingPage(
    options?: AppConfigurationClientGetLabelsOptionalParams
  ): AsyncIterableIterator<Label[]> {
    let result = await this._getLabels(options);
    yield result.items || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getLabelsNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.items || [];
    }
  }

  private async *getLabelsPagingAll(
    options?: AppConfigurationClientGetLabelsOptionalParams
  ): AsyncIterableIterator<Label> {
    for await (const page of this.getLabelsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of key-value revisions.
   * @param options The options parameters.
   */
  public listRevisions(
    options?: AppConfigurationClientGetRevisionsOptionalParams
  ): PagedAsyncIterableIterator<KeyValue> {
    const iter = this.getRevisionsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getRevisionsPagingPage(options);
      }
    };
  }

  private async *getRevisionsPagingPage(
    options?: AppConfigurationClientGetRevisionsOptionalParams
  ): AsyncIterableIterator<KeyValue[]> {
    let result = await this._getRevisions(options);
    yield result.items || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getRevisionsNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.items || [];
    }
  }

  private async *getRevisionsPagingAll(
    options?: AppConfigurationClientGetRevisionsOptionalParams
  ): AsyncIterableIterator<KeyValue> {
    for await (const page of this.getRevisionsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of keys.
   * @param options The options parameters.
   */
  private _getKeys(
    options?: AppConfigurationClientGetKeysOptionalParams
  ): Promise<AppConfigurationClientGetKeysResponse> {
    return this.sendOperationRequest({ options }, getKeysOperationSpec);
  }

  /**
   * Requests the headers and status of the given resource.
   * @param options The options parameters.
   */
  checkKeys(
    options?: AppConfigurationClientCheckKeysOptionalParams
  ): Promise<AppConfigurationClientCheckKeysResponse> {
    return this.sendOperationRequest({ options }, checkKeysOperationSpec);
  }

  /**
   * Gets a list of key-values.
   * @param options The options parameters.
   */
  private _getKeyValues(
    options?: AppConfigurationClientGetKeyValuesOptionalParams
  ): Promise<AppConfigurationClientGetKeyValuesResponse> {
    return this.sendOperationRequest({ options }, getKeyValuesOperationSpec);
  }

  /**
   * Requests the headers and status of the given resource.
   * @param options The options parameters.
   */
  checkKeyValues(
    options?: AppConfigurationClientCheckKeyValuesOptionalParams
  ): Promise<AppConfigurationClientCheckKeyValuesResponse> {
    return this.sendOperationRequest({ options }, checkKeyValuesOperationSpec);
  }

  /**
   * Gets a single key-value.
   * @param key The key of the key-value to retrieve.
   * @param options The options parameters.
   */
  getKeyValue(
    key: string,
    options?: AppConfigurationClientGetKeyValueOptionalParams
  ): Promise<AppConfigurationClientGetKeyValueResponse> {
    return this.sendOperationRequest(
      { key, options },
      getKeyValueOperationSpec
    );
  }

  /**
   * Creates a key-value.
   * @param key The key of the key-value to create.
   * @param options The options parameters.
   */
  putKeyValue(
    key: string,
    options?: AppConfigurationClientPutKeyValueOptionalParams
  ): Promise<AppConfigurationClientPutKeyValueResponse> {
    return this.sendOperationRequest(
      { key, options },
      putKeyValueOperationSpec
    );
  }

  /**
   * Deletes a key-value.
   * @param key The key of the key-value to delete.
   * @param options The options parameters.
   */
  deleteKeyValue(
    key: string,
    options?: AppConfigurationClientDeleteKeyValueOptionalParams
  ): Promise<AppConfigurationClientDeleteKeyValueResponse> {
    return this.sendOperationRequest(
      { key, options },
      deleteKeyValueOperationSpec
    );
  }

  /**
   * Requests the headers and status of the given resource.
   * @param key The key of the key-value to retrieve.
   * @param options The options parameters.
   */
  checkKeyValue(
    key: string,
    options?: AppConfigurationClientCheckKeyValueOptionalParams
  ): Promise<AppConfigurationClientCheckKeyValueResponse> {
    return this.sendOperationRequest(
      { key, options },
      checkKeyValueOperationSpec
    );
  }

  /**
   * Gets a list of labels.
   * @param options The options parameters.
   */
  private _getLabels(
    options?: AppConfigurationClientGetLabelsOptionalParams
  ): Promise<AppConfigurationClientGetLabelsResponse> {
    return this.sendOperationRequest({ options }, getLabelsOperationSpec);
  }

  /**
   * Requests the headers and status of the given resource.
   * @param options The options parameters.
   */
  checkLabels(
    options?: AppConfigurationClientCheckLabelsOptionalParams
  ): Promise<AppConfigurationClientCheckLabelsResponse> {
    return this.sendOperationRequest({ options }, checkLabelsOperationSpec);
  }

  /**
   * Locks a key-value.
   * @param key The key of the key-value to lock.
   * @param options The options parameters.
   */
  putLock(
    key: string,
    options?: AppConfigurationClientPutLockOptionalParams
  ): Promise<AppConfigurationClientPutLockResponse> {
    return this.sendOperationRequest({ key, options }, putLockOperationSpec);
  }

  /**
   * Unlocks a key-value.
   * @param key The key of the key-value to unlock.
   * @param options The options parameters.
   */
  deleteLock(
    key: string,
    options?: AppConfigurationClientDeleteLockOptionalParams
  ): Promise<AppConfigurationClientDeleteLockResponse> {
    return this.sendOperationRequest({ key, options }, deleteLockOperationSpec);
  }

  /**
   * Gets a list of key-value revisions.
   * @param options The options parameters.
   */
  private _getRevisions(
    options?: AppConfigurationClientGetRevisionsOptionalParams
  ): Promise<AppConfigurationClientGetRevisionsResponse> {
    return this.sendOperationRequest({ options }, getRevisionsOperationSpec);
  }

  /**
   * Requests the headers and status of the given resource.
   * @param options The options parameters.
   */
  checkRevisions(
    options?: AppConfigurationClientCheckRevisionsOptionalParams
  ): Promise<AppConfigurationClientCheckRevisionsResponse> {
    return this.sendOperationRequest({ options }, checkRevisionsOperationSpec);
  }

  /**
   * GetKeysNext
   * @param nextLink The nextLink from the previous successful call to the GetKeys method.
   * @param options The options parameters.
   */
  private _getKeysNext(
    nextLink: string,
    options?: AppConfigurationClientGetKeysNextOptionalParams
  ): Promise<AppConfigurationClientGetKeysNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      getKeysNextOperationSpec
    );
  }

  /**
   * GetKeyValuesNext
   * @param nextLink The nextLink from the previous successful call to the GetKeyValues method.
   * @param options The options parameters.
   */
  private _getKeyValuesNext(
    nextLink: string,
    options?: AppConfigurationClientGetKeyValuesNextOptionalParams
  ): Promise<AppConfigurationClientGetKeyValuesNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      getKeyValuesNextOperationSpec
    );
  }

  /**
   * GetLabelsNext
   * @param nextLink The nextLink from the previous successful call to the GetLabels method.
   * @param options The options parameters.
   */
  private _getLabelsNext(
    nextLink: string,
    options?: AppConfigurationClientGetLabelsNextOptionalParams
  ): Promise<AppConfigurationClientGetLabelsNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      getLabelsNextOperationSpec
    );
  }

  /**
   * GetRevisionsNext
   * @param nextLink The nextLink from the previous successful call to the GetRevisions method.
   * @param options The options parameters.
   */
  private _getRevisionsNext(
    nextLink: string,
    options?: AppConfigurationClientGetRevisionsNextOptionalParams
  ): Promise<AppConfigurationClientGetRevisionsNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      getRevisionsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getKeysOperationSpec: coreClient.OperationSpec = {
  path: "/keys",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult,
      headersMapper: Mappers.AppConfigurationClientGetKeysHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.accept,
    Parameters.syncToken,
    Parameters.acceptDatetime
  ],
  serializer
};
const checkKeysOperationSpec: coreClient.OperationSpec = {
  path: "/keys",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AppConfigurationClientCheckKeysHeaders
    },
    default: {}
  },
  queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const getKeyValuesOperationSpec: coreClient.OperationSpec = {
  path: "/kv",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.AppConfigurationClientGetKeyValuesHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept1
  ],
  serializer
};
const checkKeyValuesOperationSpec: coreClient.OperationSpec = {
  path: "/kv",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AppConfigurationClientCheckKeyValuesHeaders
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select1
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const getKeyValueOperationSpec: coreClient.OperationSpec = {
  path: "/kv/{key}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AppConfigurationClientGetKeyValueHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.label,
    Parameters.select2
  ],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept2,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const putKeyValueOperationSpec: coreClient.OperationSpec = {
  path: "/kv/{key}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AppConfigurationClientPutKeyValueHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.entity,
  queryParameters: [Parameters.apiVersion, Parameters.label],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.accept2,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.contentType
  ],
  mediaType: "json",
  serializer
};
const deleteKeyValueOperationSpec: coreClient.OperationSpec = {
  path: "/kv/{key}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AppConfigurationClientDeleteKeyValueHeaders
    },
    204: {
      headersMapper: Mappers.AppConfigurationClientDeleteKeyValueHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.label],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.accept2,
    Parameters.ifMatch
  ],
  serializer
};
const checkKeyValueOperationSpec: coreClient.OperationSpec = {
  path: "/kv/{key}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AppConfigurationClientCheckKeyValueHeaders
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.label,
    Parameters.select3
  ],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const getLabelsOperationSpec: coreClient.OperationSpec = {
  path: "/labels",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LabelListResult,
      headersMapper: Mappers.AppConfigurationClientGetLabelsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.name,
    Parameters.apiVersion,
    Parameters.after,
    Parameters.select4
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept3
  ],
  serializer
};
const checkLabelsOperationSpec: coreClient.OperationSpec = {
  path: "/labels",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AppConfigurationClientCheckLabelsHeaders
    },
    default: {}
  },
  queryParameters: [
    Parameters.name,
    Parameters.apiVersion,
    Parameters.after,
    Parameters.select4
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const putLockOperationSpec: coreClient.OperationSpec = {
  path: "/locks/{key}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AppConfigurationClientPutLockHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.label],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.accept2,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const deleteLockOperationSpec: coreClient.OperationSpec = {
  path: "/locks/{key}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AppConfigurationClientDeleteLockHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.label],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.accept2,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const getRevisionsOperationSpec: coreClient.OperationSpec = {
  path: "/revisions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.AppConfigurationClientGetRevisionsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select5
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept1
  ],
  serializer
};
const checkRevisionsOperationSpec: coreClient.OperationSpec = {
  path: "/revisions",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AppConfigurationClientCheckRevisionsHeaders
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select6
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const getKeysNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult,
      headersMapper: Mappers.AppConfigurationClientGetKeysNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [
    Parameters.accept,
    Parameters.syncToken,
    Parameters.acceptDatetime
  ],
  serializer
};
const getKeyValuesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.AppConfigurationClientGetKeyValuesNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select
  ],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept1
  ],
  serializer
};
const getLabelsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LabelListResult,
      headersMapper: Mappers.AppConfigurationClientGetLabelsNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.name,
    Parameters.apiVersion,
    Parameters.after,
    Parameters.select4
  ],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept3
  ],
  serializer
};
const getRevisionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.AppConfigurationClientGetRevisionsNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select5
  ],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.accept1
  ],
  serializer
};
