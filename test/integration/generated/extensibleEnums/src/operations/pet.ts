/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Pet } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ExtensibleEnumsClient } from "../extensibleEnumsClient";
import {
  PetGetByPetIdOptionalParams,
  PetGetByPetIdResponse,
  PetAddPetOptionalParams,
  PetAddPetResponse
} from "../models";

/** Class containing Pet operations. */
export class PetImpl implements Pet {
  private readonly client: ExtensibleEnumsClient;

  /**
   * Initialize a new instance of the class Pet class.
   * @param client Reference to the service client
   */
  constructor(client: ExtensibleEnumsClient) {
    this.client = client;
  }

  /**
   * get pet by id
   * @param petId Pet id
   * @param options The options parameters.
   */
  getByPetId(
    petId: string,
    options?: PetGetByPetIdOptionalParams
  ): Promise<PetGetByPetIdResponse> {
    return this.client.sendOperationRequest(
      { petId, options },
      getByPetIdOperationSpec
    );
  }

  /**
   * add pet
   * @param options The options parameters.
   */
  addPet(options?: PetAddPetOptionalParams): Promise<PetAddPetResponse> {
    return this.client.sendOperationRequest({ options }, addPetOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getByPetIdOperationSpec: coreClient.OperationSpec = {
  path: "/extensibleenums/pet/{petId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PetDef
    }
  },
  urlParameters: [Parameters.$host, Parameters.petId],
  headerParameters: [Parameters.accept],
  serializer
};
const addPetOperationSpec: coreClient.OperationSpec = {
  path: "/extensibleenums/pet/addPet",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PetDef
    }
  },
  requestBody: Parameters.petParam,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
