/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureSpecialPropertiesClient } from "../azureSpecialPropertiesClient";
import {
  HeaderCustomNamedRequestIdResponse,
  HeaderCustomNamedRequestIdParamGroupingParameters,
  HeaderCustomNamedRequestIdParamGroupingResponse,
  HeaderCustomNamedRequestIdHeadResponse
} from "../models";

/**
 * Class representing a Header.
 */
export class Header {
  private readonly client: AzureSpecialPropertiesClient;

  /**
   * Initialize a new instance of the class Header class.
   * @param client Reference to the service client
   */
  constructor(client: AzureSpecialPropertiesClient) {
    this.client = client;
  }

  /**
   * Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
   * @param fooClientRequestId The fooRequestId
   * @param options The options parameters.
   */
  customNamedRequestId(
    fooClientRequestId: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderCustomNamedRequestIdResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { fooClientRequestId, options: operationOptions },
      customNamedRequestIdOperationSpec
    ) as Promise<HeaderCustomNamedRequestIdResponse>;
  }

  /**
   * Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request, via
   * a parameter group
   * @param headerCustomNamedRequestIdParamGroupingParameters Parameter group
   * @param options The options parameters.
   */
  customNamedRequestIdParamGrouping(
    headerCustomNamedRequestIdParamGroupingParameters: HeaderCustomNamedRequestIdParamGroupingParameters,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderCustomNamedRequestIdParamGroupingResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        headerCustomNamedRequestIdParamGroupingParameters,
        options: operationOptions
      },
      customNamedRequestIdParamGroupingOperationSpec
    ) as Promise<HeaderCustomNamedRequestIdParamGroupingResponse>;
  }

  /**
   * Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
   * @param fooClientRequestId The fooRequestId
   * @param options The options parameters.
   */
  customNamedRequestIdHead(
    fooClientRequestId: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderCustomNamedRequestIdHeadResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { fooClientRequestId, options: operationOptions },
      customNamedRequestIdHeadOperationSpec
    ) as Promise<HeaderCustomNamedRequestIdHeadResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const customNamedRequestIdOperationSpec: coreHttp.OperationSpec = {
  path: "/azurespecials/customNamedRequestId",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderCustomNamedRequestIdHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.fooClientRequestId],
  serializer
};
const customNamedRequestIdParamGroupingOperationSpec: coreHttp.OperationSpec = {
  path: "/azurespecials/customNamedRequestIdParamGrouping",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderCustomNamedRequestIdParamGroupingHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.fooClientRequestId1],
  serializer
};
const customNamedRequestIdHeadOperationSpec: coreHttp.OperationSpec = {
  path: "/azurespecials/customNamedRequestIdHead",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.HeaderCustomNamedRequestIdHeadHeaders
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.fooClientRequestId],
  serializer
};
