/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ApiVersionDefault } from "../operationsInterfaces";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureSpecialPropertiesClientContext } from "../azureSpecialPropertiesClientContext";
import {
  ApiVersionDefaultGetMethodGlobalValidOptionalParams,
  ApiVersionDefaultGetMethodGlobalNotProvidedValidOptionalParams,
  ApiVersionDefaultGetPathGlobalValidOptionalParams,
  ApiVersionDefaultGetSwaggerGlobalValidOptionalParams
} from "../models";

/** Class representing a ApiVersionDefault. */
export class ApiVersionDefaultImpl implements ApiVersionDefault {
  private readonly client: AzureSpecialPropertiesClientContext;

  /**
   * Initialize a new instance of the class ApiVersionDefault class.
   * @param client Reference to the service client
   */
  constructor(client: AzureSpecialPropertiesClientContext) {
    this.client = client;
  }

  /**
   * GET method with api-version modeled in global settings.
   * @param options The options parameters.
   */
  getMethodGlobalValid(
    options?: ApiVersionDefaultGetMethodGlobalValidOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMethodGlobalValidOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * GET method with api-version modeled in global settings.
   * @param options The options parameters.
   */
  getMethodGlobalNotProvidedValid(
    options?: ApiVersionDefaultGetMethodGlobalNotProvidedValidOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMethodGlobalNotProvidedValidOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * GET method with api-version modeled in global settings.
   * @param options The options parameters.
   */
  getPathGlobalValid(
    options?: ApiVersionDefaultGetPathGlobalValidOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getPathGlobalValidOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * GET method with api-version modeled in global settings.
   * @param options The options parameters.
   */
  getSwaggerGlobalValid(
    options?: ApiVersionDefaultGetSwaggerGlobalValidOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getSwaggerGlobalValidOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getMethodGlobalValidOperationSpec: coreHttp.OperationSpec = {
  path:
    "/azurespecials/apiVersion/method/string/none/query/global/2015-07-01-preview",
  httpMethod: "GET",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getMethodGlobalNotProvidedValidOperationSpec: coreHttp.OperationSpec = {
  path:
    "/azurespecials/apiVersion/method/string/none/query/globalNotProvided/2015-07-01-preview",
  httpMethod: "GET",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getPathGlobalValidOperationSpec: coreHttp.OperationSpec = {
  path:
    "/azurespecials/apiVersion/path/string/none/query/global/2015-07-01-preview",
  httpMethod: "GET",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getSwaggerGlobalValidOperationSpec: coreHttp.OperationSpec = {
  path:
    "/azurespecials/apiVersion/swagger/string/none/query/global/2015-07-01-preview",
  httpMethod: "GET",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
