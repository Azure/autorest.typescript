/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SubscriptionInCredentials } from "../operationsInterfaces";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureSpecialPropertiesClientContext } from "../azureSpecialPropertiesClientContext";
import {
  SubscriptionInCredentialsPostMethodGlobalValidOptionalParams,
  SubscriptionInCredentialsPostMethodGlobalNullOptionalParams,
  SubscriptionInCredentialsPostMethodGlobalNotProvidedValidOptionalParams,
  SubscriptionInCredentialsPostPathGlobalValidOptionalParams,
  SubscriptionInCredentialsPostSwaggerGlobalValidOptionalParams
} from "../models";

/** Class representing a SubscriptionInCredentials. */
export class SubscriptionInCredentialsImpl
  implements SubscriptionInCredentials {
  private readonly client: AzureSpecialPropertiesClientContext;

  /**
   * Initialize a new instance of the class SubscriptionInCredentials class.
   * @param client Reference to the service client
   */
  constructor(client: AzureSpecialPropertiesClientContext) {
    this.client = client;
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * '1234-5678-9012-3456' to succeed
   * @param options The options parameters.
   */
  postMethodGlobalValid(
    options?: SubscriptionInCredentialsPostMethodGlobalValidOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      postMethodGlobalValidOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to null,
   * and client-side validation should prevent you from making this call
   * @param options The options parameters.
   */
  postMethodGlobalNull(
    options?: SubscriptionInCredentialsPostMethodGlobalNullOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      postMethodGlobalNullOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * '1234-5678-9012-3456' to succeed
   * @param options The options parameters.
   */
  postMethodGlobalNotProvidedValid(
    options?: SubscriptionInCredentialsPostMethodGlobalNotProvidedValidOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      postMethodGlobalNotProvidedValidOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * '1234-5678-9012-3456' to succeed
   * @param options The options parameters.
   */
  postPathGlobalValid(
    options?: SubscriptionInCredentialsPostPathGlobalValidOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      postPathGlobalValidOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * '1234-5678-9012-3456' to succeed
   * @param options The options parameters.
   */
  postSwaggerGlobalValid(
    options?: SubscriptionInCredentialsPostSwaggerGlobalValidOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      postSwaggerGlobalValidOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const postMethodGlobalValidOperationSpec: coreHttp.OperationSpec = {
  path:
    "/azurespecials/subscriptionId/method/string/none/path/global/1234-5678-9012-3456/{subscriptionId}",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const postMethodGlobalNullOperationSpec: coreHttp.OperationSpec = {
  path:
    "/azurespecials/subscriptionId/method/string/none/path/global/null/{subscriptionId}",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const postMethodGlobalNotProvidedValidOperationSpec: coreHttp.OperationSpec = {
  path:
    "/azurespecials/subscriptionId/method/string/none/path/globalNotProvided/1234-5678-9012-3456/{subscriptionId}",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const postPathGlobalValidOperationSpec: coreHttp.OperationSpec = {
  path:
    "/azurespecials/subscriptionId/path/string/none/path/global/1234-5678-9012-3456/{subscriptionId}",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const postSwaggerGlobalValidOperationSpec: coreHttp.OperationSpec = {
  path:
    "/azurespecials/subscriptionId/swagger/string/none/path/global/1234-5678-9012-3456/{subscriptionId}",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
