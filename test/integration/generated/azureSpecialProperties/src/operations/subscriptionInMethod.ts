/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SubscriptionInMethod } from "../operationsInterfaces";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureSpecialPropertiesClientContext } from "../azureSpecialPropertiesClientContext";
import {
  SubscriptionInMethodPostMethodLocalValidOptionalParams,
  SubscriptionInMethodPostMethodLocalNullOptionalParams,
  SubscriptionInMethodPostPathLocalValidOptionalParams,
  SubscriptionInMethodPostSwaggerLocalValidOptionalParams
} from "../models";

/** Class representing a SubscriptionInMethod. */
export class SubscriptionInMethodImpl implements SubscriptionInMethod {
  private readonly client: AzureSpecialPropertiesClientContext;

  /**
   * Initialize a new instance of the class SubscriptionInMethod class.
   * @param client Reference to the service client
   */
  constructor(client: AzureSpecialPropertiesClientContext) {
    this.client = client;
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id =
   * '1234-5678-9012-3456' to succeed
   * @param subscriptionId This should appear as a method parameter, use value '1234-5678-9012-3456'
   * @param options The options parameters.
   */
  postMethodLocalValid(
    subscriptionId: string,
    options?: SubscriptionInMethodPostMethodLocalValidOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      subscriptionId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      postMethodLocalValidOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id = null, client-side
   * validation should prevent you from making this call
   * @param subscriptionId This should appear as a method parameter, use value null, client-side
   *                       validation should prvenet the call
   * @param options The options parameters.
   */
  postMethodLocalNull(
    subscriptionId: string,
    options?: SubscriptionInMethodPostMethodLocalNullOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      subscriptionId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      postMethodLocalNullOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id =
   * '1234-5678-9012-3456' to succeed
   * @param subscriptionId Should appear as a method parameter -use value '1234-5678-9012-3456'
   * @param options The options parameters.
   */
  postPathLocalValid(
    subscriptionId: string,
    options?: SubscriptionInMethodPostPathLocalValidOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      subscriptionId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      postPathLocalValidOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id =
   * '1234-5678-9012-3456' to succeed
   * @param subscriptionId The subscriptionId, which appears in the path, the value is always
   *                       '1234-5678-9012-3456'
   * @param options The options parameters.
   */
  postSwaggerLocalValid(
    subscriptionId: string,
    options?: SubscriptionInMethodPostSwaggerLocalValidOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      subscriptionId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      postSwaggerLocalValidOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const postMethodLocalValidOperationSpec: coreHttp.OperationSpec = {
  path:
    "/azurespecials/subscriptionId/method/string/none/path/local/1234-5678-9012-3456/{subscriptionId}",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host, Parameters.subscriptionId1],
  headerParameters: [Parameters.accept],
  serializer
};
const postMethodLocalNullOperationSpec: coreHttp.OperationSpec = {
  path:
    "/azurespecials/subscriptionId/method/string/none/path/local/null/{subscriptionId}",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host, Parameters.subscriptionId1],
  headerParameters: [Parameters.accept],
  serializer
};
const postPathLocalValidOperationSpec: coreHttp.OperationSpec = {
  path:
    "/azurespecials/subscriptionId/path/string/none/path/local/1234-5678-9012-3456/{subscriptionId}",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host, Parameters.subscriptionId1],
  headerParameters: [Parameters.accept],
  serializer
};
const postSwaggerLocalValidOperationSpec: coreHttp.OperationSpec = {
  path:
    "/azurespecials/subscriptionId/swagger/string/none/path/local/1234-5678-9012-3456/{subscriptionId}",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host, Parameters.subscriptionId1],
  headerParameters: [Parameters.accept],
  serializer
};
