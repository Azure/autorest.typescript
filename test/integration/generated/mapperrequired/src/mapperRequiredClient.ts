/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { MapperRequiredClientContext } from "./mapperRequiredClientContext";
import {
  MapperRequiredClientOptionalParams,
  MapperRequiredClientUpdateCertificateIssuerOptionalParams,
  MapperRequiredClientUpdateCertificateIssuerResponse
} from "./models";

export class MapperRequiredClient extends MapperRequiredClientContext {
  /**
   * Initializes a new instance of the MapperRequiredClient class.
   * @param $host server parameter
   * @param options The parameter options
   */
  constructor($host: string, options?: MapperRequiredClientOptionalParams) {
    super($host, options);
  }

  /**
   * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity.
   * This operation requires the certificates/setissuers permission.
   * @param issuerName The name of the issuer.
   * @param options The options parameters.
   */
  updateCertificateIssuer(
    issuerName: string,
    options?: MapperRequiredClientUpdateCertificateIssuerOptionalParams
  ): Promise<MapperRequiredClientUpdateCertificateIssuerResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      issuerName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateCertificateIssuerOperationSpec
    ) as Promise<MapperRequiredClientUpdateCertificateIssuerResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const updateCertificateIssuerOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/issuers/{issuer-name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    }
  },
  requestBody: {
    parameterPath: { provider: ["options", "provider"] },
    mapper: { ...Mappers.CertificateIssuerUpdateParameters, required: true }
  },
  urlParameters: [Parameters.$host, Parameters.issuerName],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
