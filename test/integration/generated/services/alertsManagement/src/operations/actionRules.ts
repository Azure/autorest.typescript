/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AlertsManagementClient } from "../alertsManagementClient";
import {
  ActionRulesListBySubscriptionOptionalParams,
  ActionRulesListBySubscriptionResponse,
  ActionRulesListByResourceGroupOptionalParams,
  ActionRulesListByResourceGroupResponse,
  ActionRulesGetByNameResponse,
  ActionRule,
  ActionRulesCreateUpdateResponse,
  ActionRulesDeleteResponse,
  PatchObject,
  ActionRulesUpdateResponse,
  ActionRulesListBySubscriptionNextOptionalParams,
  ActionRulesListBySubscriptionNextResponse,
  ActionRulesListByResourceGroupNextOptionalParams,
  ActionRulesListByResourceGroupNextResponse
} from "../models";

/**
 * Class representing a ActionRules.
 */
export class ActionRules {
  private readonly client: AlertsManagementClient;

  /**
   * Initialize a new instance of the class ActionRules class.
   * @param client Reference to the service client
   */
  constructor(client: AlertsManagementClient) {
    this.client = client;
  }

  /**
   * List all action rules of the subscription and given input filters
   * @param options The options parameters.
   */
  listBySubscription(
    options?: ActionRulesListBySubscriptionOptionalParams
  ): Promise<ActionRulesListBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listBySubscriptionOperationSpec
    ) as Promise<ActionRulesListBySubscriptionResponse>;
  }

  /**
   * List all action rules of the subscription, created in given resource group and given input filters
   * @param resourceGroupName Resource group name where the resource is created.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: ActionRulesListByResourceGroupOptionalParams
  ): Promise<ActionRulesListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<ActionRulesListByResourceGroupResponse>;
  }

  /**
   * Get a specific action rule
   * @param resourceGroupName Resource group name where the resource is created.
   * @param actionRuleName The name of action rule that needs to be fetched
   * @param options The options parameters.
   */
  getByName(
    resourceGroupName: string,
    actionRuleName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ActionRulesGetByNameResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, actionRuleName, options: operationOptions },
      getByNameOperationSpec
    ) as Promise<ActionRulesGetByNameResponse>;
  }

  /**
   * Creates/Updates a specific action rule
   * @param resourceGroupName Resource group name where the resource is created.
   * @param actionRule action rule to be created/updated
   * @param actionRuleName The name of action rule that needs to be created/updated
   * @param options The options parameters.
   */
  createUpdate(
    resourceGroupName: string,
    actionRule: ActionRule,
    actionRuleName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ActionRulesCreateUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        actionRule,
        actionRuleName,
        options: operationOptions
      },
      createUpdateOperationSpec
    ) as Promise<ActionRulesCreateUpdateResponse>;
  }

  /**
   * Deletes a given action rule
   * @param resourceGroupName Resource group name where the resource is created.
   * @param actionRuleName The name that needs to be deleted
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    actionRuleName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ActionRulesDeleteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, actionRuleName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<ActionRulesDeleteResponse>;
  }

  /**
   * Update enabled flag and/or tags for the given action rule
   * @param resourceGroupName Resource group name where the resource is created.
   * @param actionRulePatch Parameters supplied to the operation.
   * @param actionRuleName The name that needs to be updated
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    actionRulePatch: PatchObject,
    actionRuleName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ActionRulesUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        actionRulePatch,
        actionRuleName,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<ActionRulesUpdateResponse>;
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  listBySubscriptionNext(
    nextLink: string,
    options?: ActionRulesListBySubscriptionNextOptionalParams
  ): Promise<ActionRulesListBySubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listBySubscriptionNextOperationSpec
    ) as Promise<ActionRulesListBySubscriptionNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Resource group name where the resource is created.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ActionRulesListByResourceGroupNextOptionalParams
  ): Promise<ActionRulesListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<ActionRulesListByResourceGroupNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/actionRules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ActionRulesList,
      headersMapper: Mappers.ActionRulesListBySubscriptionHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.targetResource,
    Parameters.targetResourceType,
    Parameters.targetResourceGroup,
    Parameters.monitorService,
    Parameters.severity,
    Parameters.impactedScope,
    Parameters.description,
    Parameters.alertRuleId,
    Parameters.actionGroup,
    Parameters.name
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ActionRulesList,
      headersMapper: Mappers.ActionRulesListByResourceGroupHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.targetResource,
    Parameters.targetResourceType,
    Parameters.targetResourceGroup,
    Parameters.monitorService,
    Parameters.severity,
    Parameters.impactedScope,
    Parameters.description,
    Parameters.alertRuleId,
    Parameters.actionGroup,
    Parameters.name
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const getByNameOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ActionRule,
      headersMapper: Mappers.ActionRulesGetByNameHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.actionRuleName
  ],
  serializer
};
const createUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ActionRule,
      headersMapper: Mappers.ActionRulesCreateUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.actionRule,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.actionRuleName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: { type: { name: "Boolean" }, serializedName: "Boolean" },
      headersMapper: Mappers.ActionRulesDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.actionRuleName2
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ActionRule,
      headersMapper: Mappers.ActionRulesUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.actionRulePatch,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.actionRuleName3
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ActionRulesList,
      headersMapper: Mappers.ActionRulesListBySubscriptionNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.targetResource,
    Parameters.targetResourceType,
    Parameters.targetResourceGroup,
    Parameters.monitorService,
    Parameters.severity,
    Parameters.impactedScope,
    Parameters.description,
    Parameters.alertRuleId,
    Parameters.actionGroup,
    Parameters.name
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink2
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ActionRulesList,
      headersMapper: Mappers.ActionRulesListByResourceGroupNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.targetResource,
    Parameters.targetResourceType,
    Parameters.targetResourceGroup,
    Parameters.monitorService,
    Parameters.severity,
    Parameters.impactedScope,
    Parameters.description,
    Parameters.alertRuleId,
    Parameters.actionGroup,
    Parameters.name
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink3
  ],
  serializer
};
