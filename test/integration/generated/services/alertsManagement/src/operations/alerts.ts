/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AlertsManagementClient } from "../alertsManagementClient";
import {
  AlertsMetaDataResponse,
  AlertsGetAllOptionalParams,
  AlertsGetAllResponse,
  AlertsGetByIdResponse,
  AlertState,
  AlertsChangeStateResponse,
  AlertsGetHistoryResponse,
  AlertsSummaryGroupByFields,
  AlertsGetSummaryOptionalParams,
  AlertsGetSummaryResponse,
  AlertsGetAllNextOptionalParams,
  AlertsGetAllNextResponse
} from "../models";

/**
 * Class representing a Alerts.
 */
export class Alerts {
  private readonly client: AlertsManagementClient;

  /**
   * Initialize a new instance of the class Alerts class.
   * @param client Reference to the service client
   */
  constructor(client: AlertsManagementClient) {
    this.client = client;
  }

  /**
   * List alerts meta data information based on value of identifier parameter.
   * @param options The options parameters.
   */
  metaData(
    options?: coreHttp.OperationOptions
  ): Promise<AlertsMetaDataResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      metaDataOperationSpec
    ) as Promise<AlertsMetaDataResponse>;
  }

  /**
   * List all existing alerts, where the results can be filtered on the basis of multiple parameters
   * (e.g. time range). The results can then be sorted on the basis specific fields, with the default
   * being lastModifiedDateTime.
   * @param options The options parameters.
   */
  getAll(options?: AlertsGetAllOptionalParams): Promise<AlertsGetAllResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getAllOperationSpec
    ) as Promise<AlertsGetAllResponse>;
  }

  /**
   * Get information related to a specific alert
   * @param alertId Unique ID of an alert instance.
   * @param options The options parameters.
   */
  getById(
    alertId: string,
    options?: coreHttp.OperationOptions
  ): Promise<AlertsGetByIdResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { alertId, options: operationOptions },
      getByIdOperationSpec
    ) as Promise<AlertsGetByIdResponse>;
  }

  /**
   * Change the state of an alert.
   * @param alertId Unique ID of an alert instance.
   * @param newState New state of the alert.
   * @param options The options parameters.
   */
  changeState(
    alertId: string,
    newState: AlertState,
    options?: coreHttp.OperationOptions
  ): Promise<AlertsChangeStateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { alertId, newState, options: operationOptions },
      changeStateOperationSpec
    ) as Promise<AlertsChangeStateResponse>;
  }

  /**
   * Get the history of an alert, which captures any monitor condition changes (Fired/Resolved) and alert
   * state changes (New/Acknowledged/Closed).
   * @param alertId Unique ID of an alert instance.
   * @param options The options parameters.
   */
  getHistory(
    alertId: string,
    options?: coreHttp.OperationOptions
  ): Promise<AlertsGetHistoryResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { alertId, options: operationOptions },
      getHistoryOperationSpec
    ) as Promise<AlertsGetHistoryResponse>;
  }

  /**
   * Get a summarized count of your alerts grouped by various parameters (e.g. grouping by 'Severity'
   * returns the count of alerts for each severity).
   * @param groupby This parameter allows the result set to be grouped by input fields (Maximum 2 comma
   *                separated fields supported). For example, groupby=severity or groupby=severity,alertstate.
   * @param options The options parameters.
   */
  getSummary(
    groupby: AlertsSummaryGroupByFields,
    options?: AlertsGetSummaryOptionalParams
  ): Promise<AlertsGetSummaryResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { groupby, options: operationOptions },
      getSummaryOperationSpec
    ) as Promise<AlertsGetSummaryResponse>;
  }

  /**
   * GetAllNext
   * @param nextLink The nextLink from the previous successful call to the GetAll method.
   * @param options The options parameters.
   */
  getAllNext(
    nextLink: string,
    options?: AlertsGetAllNextOptionalParams
  ): Promise<AlertsGetAllNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      getAllNextOperationSpec
    ) as Promise<AlertsGetAllNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const metaDataOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.AlertsManagement/alertsMetaData",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertsMetaData
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.identifier],
  urlParameters: [Parameters.$host],
  serializer
};
const getAllOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.targetResource,
    Parameters.targetResourceType,
    Parameters.targetResourceGroup,
    Parameters.monitorService,
    Parameters.monitorCondition,
    Parameters.severity,
    Parameters.alertState,
    Parameters.alertRule,
    Parameters.smartGroupId,
    Parameters.includeContext,
    Parameters.includeEgressConfig,
    Parameters.pageCount,
    Parameters.sortBy,
    Parameters.sortOrder,
    Parameters.select,
    Parameters.timeRange,
    Parameters.customTimeRange
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const getByIdOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Alert
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.alertId
  ],
  serializer
};
const changeStateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/changestate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Alert
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.newState],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.alertId
  ],
  serializer
};
const getHistoryOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertModification
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.alertId
  ],
  serializer
};
const getSummaryOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alertsSummary",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertsSummary
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.targetResource,
    Parameters.targetResourceType,
    Parameters.targetResourceGroup,
    Parameters.monitorService,
    Parameters.monitorCondition,
    Parameters.severity,
    Parameters.alertState,
    Parameters.alertRule,
    Parameters.timeRange,
    Parameters.customTimeRange,
    Parameters.groupby,
    Parameters.includeSmartGroupsCount
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const getAllNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.targetResource,
    Parameters.targetResourceType,
    Parameters.targetResourceGroup,
    Parameters.monitorService,
    Parameters.monitorCondition,
    Parameters.severity,
    Parameters.alertState,
    Parameters.alertRule,
    Parameters.smartGroupId,
    Parameters.includeContext,
    Parameters.includeEgressConfig,
    Parameters.pageCount,
    Parameters.sortBy,
    Parameters.sortOrder,
    Parameters.select,
    Parameters.timeRange,
    Parameters.customTimeRange
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink1
  ],
  serializer
};
