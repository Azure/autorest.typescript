/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AlertsManagementClient } from "../alertsManagementClient";
import {
  SmartGroupsGetAllOptionalParams,
  SmartGroupsGetAllResponse,
  SmartGroupsGetByIdResponse,
  AlertState,
  SmartGroupsChangeStateResponse,
  SmartGroupsGetHistoryResponse,
  SmartGroupsGetAllNextOptionalParams,
  SmartGroupsGetAllNextResponse
} from "../models";

/**
 * Class representing a SmartGroups.
 */
export class SmartGroups {
  private readonly client: AlertsManagementClient;

  /**
   * Initialize a new instance of the class SmartGroups class.
   * @param client Reference to the service client
   */
  constructor(client: AlertsManagementClient) {
    this.client = client;
  }

  /**
   * List all the Smart Groups within a specified subscription.
   * @param options The options parameters.
   */
  getAll(
    options?: SmartGroupsGetAllOptionalParams
  ): Promise<SmartGroupsGetAllResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getAllOperationSpec
    ) as Promise<SmartGroupsGetAllResponse>;
  }

  /**
   * Get information related to a specific Smart Group.
   * @param smartGroupId Smart group unique id.
   * @param options The options parameters.
   */
  getById(
    smartGroupId: string,
    options?: coreHttp.OperationOptions
  ): Promise<SmartGroupsGetByIdResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { smartGroupId, options: operationOptions },
      getByIdOperationSpec
    ) as Promise<SmartGroupsGetByIdResponse>;
  }

  /**
   * Change the state of a Smart Group.
   * @param newState New state of the alert.
   * @param smartGroupId Smart group unique id.
   * @param options The options parameters.
   */
  changeState(
    newState: AlertState,
    smartGroupId: string,
    options?: coreHttp.OperationOptions
  ): Promise<SmartGroupsChangeStateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { newState, smartGroupId, options: operationOptions },
      changeStateOperationSpec
    ) as Promise<SmartGroupsChangeStateResponse>;
  }

  /**
   * Get the history a smart group, which captures any Smart Group state changes
   * (New/Acknowledged/Closed) .
   * @param smartGroupId Smart group unique id.
   * @param options The options parameters.
   */
  getHistory(
    smartGroupId: string,
    options?: coreHttp.OperationOptions
  ): Promise<SmartGroupsGetHistoryResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { smartGroupId, options: operationOptions },
      getHistoryOperationSpec
    ) as Promise<SmartGroupsGetHistoryResponse>;
  }

  /**
   * GetAllNext
   * @param nextLink The nextLink from the previous successful call to the GetAll method.
   * @param options The options parameters.
   */
  getAllNext(
    nextLink: string,
    options?: SmartGroupsGetAllNextOptionalParams
  ): Promise<SmartGroupsGetAllNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      getAllNextOperationSpec
    ) as Promise<SmartGroupsGetAllNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getAllOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SmartGroupsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.targetResource,
    Parameters.targetResourceType,
    Parameters.targetResourceGroup,
    Parameters.monitorService,
    Parameters.monitorCondition,
    Parameters.severity,
    Parameters.pageCount,
    Parameters.sortOrder,
    Parameters.timeRange,
    Parameters.smartGroupState,
    Parameters.sortBy1
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const getByIdOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SmartGroup,
      headersMapper: Mappers.SmartGroupsGetByIdHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.smartGroupId1
  ],
  serializer
};
const changeStateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/changeState",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SmartGroup,
      headersMapper: Mappers.SmartGroupsChangeStateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.newState],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.smartGroupId1
  ],
  serializer
};
const getHistoryOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/history",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SmartGroupModification
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.smartGroupId1
  ],
  serializer
};
const getAllNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SmartGroupsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.targetResource,
    Parameters.targetResourceType,
    Parameters.targetResourceGroup,
    Parameters.monitorService,
    Parameters.monitorCondition,
    Parameters.severity,
    Parameters.pageCount,
    Parameters.sortOrder,
    Parameters.timeRange,
    Parameters.smartGroupState,
    Parameters.sortBy1
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink1
  ],
  serializer
};
