/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type AlertsMetaDataPropertiesUnion =
  | AlertsMetaDataProperties
  | MonitorServiceList;
export type ActionRulePropertiesUnion =
  | ActionRuleProperties
  | Suppression
  | ActionGroup
  | Diagnostics;

/**
 * Lists the operations available in the AlertsManagement RP.
 */
export interface OperationsList {
  /**
   * URL to fetch the next set of alerts.
   */
  nextLink?: string;
  /**
   * Array of operations
   */
  value: Operation[];
}

/**
 * Operation provided by provider
 */
export interface Operation {
  /**
   * Name of the operation
   */
  name?: string;
  /**
   * Properties of the operation
   */
  display?: OperationDisplay;
}

/**
 * Properties of the operation
 */
export interface OperationDisplay {
  /**
   * Provider name
   */
  provider?: string;
  /**
   * Resource name
   */
  resource?: string;
  /**
   * Operation name
   */
  operation?: string;
  /**
   * Description of the operation
   */
  description?: string;
}

/**
 * alert meta data information.
 */
export interface AlertsMetaData {
  /**
   * alert meta data property bag
   */
  properties?: AlertsMetaDataPropertiesUnion;
}

/**
 * alert meta data property bag
 */
export interface AlertsMetaDataProperties {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  metadataIdentifier: "MonitorServiceList";
}

/**
 * List the alerts.
 */
export interface AlertsList {
  /**
   * URL to fetch the next set of alerts.
   */
  nextLink?: string;
  /**
   * List of alerts
   */
  value?: Alert[];
}

/**
 * An azure resource object
 */
export interface Resource {
  /**
   * Azure resource Id
   */
  readonly id?: string;
  /**
   * Azure resource type
   */
  readonly type?: string;
  /**
   * Azure resource name
   */
  readonly name?: string;
}

/**
 * An alert created in alert management service.
 */
export type Alert = Resource & {
  /**
   * Alert property bag
   */
  properties?: AlertProperties;
};

/**
 * Alert property bag
 */
export interface AlertProperties {
  /**
   * This object contains consistent fields across different monitor services.
   */
  essentials?: Essentials;
  /**
   * Any object
   */
  readonly context?: any;
  /**
   * Any object
   */
  readonly egressConfig?: any;
}

/**
 * This object contains consistent fields across different monitor services.
 */
export interface Essentials {
  /**
   * Severity of alert Sev0 being highest and Sev4 being lowest.
   */
  readonly severity?: Severity;
  /**
   * The type of signal the alert is based on, which could be metrics, logs or activity logs.
   */
  readonly signalType?: SignalType;
  /**
   * Alert object state, which can be modified by the user.
   */
  readonly alertState?: AlertState;
  /**
   * Condition of the rule at the monitor service. It represents whether the underlying conditions have crossed the defined alert rule thresholds.
   */
  readonly monitorCondition?: MonitorCondition;
  /**
   * Target ARM resource, on which alert got created.
   */
  targetResource?: string;
  /**
   * Name of the target ARM resource name, on which alert got created.
   */
  targetResourceName?: string;
  /**
   * Resource group of target ARM resource, on which alert got created.
   */
  targetResourceGroup?: string;
  /**
   * Resource type of target ARM resource, on which alert got created.
   */
  targetResourceType?: string;
  /**
   * Monitor service on which the rule(monitor) is set.
   */
  readonly monitorService?: MonitorService;
  /**
   * Rule(monitor) which fired alert instance. Depending on the monitor service,  this would be ARM id or name of the rule.
   */
  readonly alertRule?: string;
  /**
   * Unique Id created by monitor service for each alert instance. This could be used to track the issue at the monitor service, in case of Nagios, Zabbix, SCOM etc.
   */
  readonly sourceCreatedId?: string;
  /**
   * Unique Id of the smart group
   */
  readonly smartGroupId?: string;
  /**
   * Verbose reason describing the reason why this alert instance is added to a smart group
   */
  readonly smartGroupingReason?: string;
  /**
   * Creation time(ISO-8601 format) of alert instance.
   */
  readonly startDateTime?: Date;
  /**
   * Last modification time(ISO-8601 format) of alert instance.
   */
  readonly lastModifiedDateTime?: Date;
  /**
   * Resolved time(ISO-8601 format) of alert instance. This will be updated when monitor service resolves the alert instance because the rule condition is no longer met.
   */
  readonly monitorConditionResolvedDateTime?: Date;
  /**
   * User who last modified the alert, in case of monitor service updates user would be 'system', otherwise name of the user.
   */
  readonly lastModifiedUserName?: string;
}

/**
 * An error response from the service.
 */
export interface ErrorResponse {
  /**
   * Details of error response.
   */
  error?: ErrorResponseBody;
}

/**
 * Details of error response.
 */
export interface ErrorResponseBody {
  /**
   * Error code, intended to be consumed programmatically.
   */
  code?: string;
  /**
   * Description of the error, intended for display in user interface.
   */
  message?: string;
  /**
   * Target of the particular error, for example name of the property.
   */
  target?: string;
  /**
   * A list of additional details about the error.
   */
  details?: ErrorResponseBody[];
}

/**
 * Alert Modification details
 */
export type AlertModification = Resource & {
  /**
   * Properties of the alert modification item.
   */
  properties?: AlertModificationProperties;
};

/**
 * Properties of the alert modification item.
 */
export interface AlertModificationProperties {
  /**
   * Unique Id of the alert for which the history is being retrieved
   */
  readonly alertId?: string;
  /**
   * Modification details
   */
  modifications?: AlertModificationItem[];
}

/**
 * Alert modification item.
 */
export interface AlertModificationItem {
  /**
   * Reason for the modification
   */
  modificationEvent?: AlertModificationEvent;
  /**
   * Old value
   */
  oldValue?: string;
  /**
   * New value
   */
  newValue?: string;
  /**
   * Modified date and time
   */
  modifiedAt?: string;
  /**
   * Modified user details (Principal client name)
   */
  modifiedBy?: string;
  /**
   * Modification comments
   */
  comments?: string;
  /**
   * Description of the modification
   */
  description?: string;
}

/**
 * Summary of alerts based on the input filters and 'groupby' parameters.
 */
export type AlertsSummary = Resource & {
  /**
   * Group the result set.
   */
  properties?: AlertsSummaryGroup;
};

/**
 * Group the result set.
 */
export interface AlertsSummaryGroup {
  /**
   * Total count of the result set.
   */
  total?: number;
  /**
   * Total count of the smart groups.
   */
  smartGroupsCount?: number;
  /**
   * Name of the field aggregated
   */
  groupedby?: string;
  /**
   * List of the items
   */
  values?: AlertsSummaryGroupItem[];
}

/**
 * Alerts summary group item
 */
export interface AlertsSummaryGroupItem {
  /**
   * Value of the aggregated field
   */
  name?: string;
  /**
   * Count of the aggregated field
   */
  count?: number;
  /**
   * Name of the field aggregated
   */
  groupedby?: string;
  /**
   * List of the items
   */
  values?: AlertsSummaryGroupItem[];
}

/**
 * List the alerts.
 */
export interface SmartGroupsList {
  /**
   * URL to fetch the next set of alerts.
   */
  nextLink?: string;
  /**
   * List of alerts
   */
  value?: SmartGroup[];
}

/**
 * Set of related alerts grouped together smartly by AMS.
 */
export type SmartGroup = Resource & {
  /**
   * Total number of alerts in smart group
   */
  alertsCount?: number;
  /**
   * Smart group state
   */
  readonly smartGroupState?: State;
  /**
   * Severity of smart group is the highest(Sev0 >... > Sev4) severity of all the alerts in the group.
   */
  readonly severity?: Severity;
  /**
   * Creation time of smart group. Date-Time in ISO-8601 format.
   */
  readonly startDateTime?: Date;
  /**
   * Last updated time of smart group. Date-Time in ISO-8601 format.
   */
  readonly lastModifiedDateTime?: Date;
  /**
   * Last modified by user name.
   */
  readonly lastModifiedUserName?: string;
  /**
   * Summary of target resources in the smart group
   */
  resources?: SmartGroupAggregatedProperty[];
  /**
   * Summary of target resource types in the smart group
   */
  resourceTypes?: SmartGroupAggregatedProperty[];
  /**
   * Summary of target resource groups in the smart group
   */
  resourceGroups?: SmartGroupAggregatedProperty[];
  /**
   * Summary of monitorServices in the smart group
   */
  monitorServices?: SmartGroupAggregatedProperty[];
  /**
   * Summary of monitorConditions in the smart group
   */
  monitorConditions?: SmartGroupAggregatedProperty[];
  /**
   * Summary of alertStates in the smart group
   */
  alertStates?: SmartGroupAggregatedProperty[];
  /**
   * Summary of alertSeverities in the smart group
   */
  alertSeverities?: SmartGroupAggregatedProperty[];
  /**
   * The URI to fetch the next page of alerts. Call ListNext() with this URI to fetch the next page alerts.
   */
  nextLink?: string;
};

/**
 * Aggregated property of each type
 */
export interface SmartGroupAggregatedProperty {
  /**
   * Name of the type.
   */
  name?: string;
  /**
   * Total number of items of type.
   */
  count?: number;
}

/**
 * Alert Modification details
 */
export type SmartGroupModification = Resource & {
  /**
   * Properties of the smartGroup modification item.
   */
  properties?: SmartGroupModificationProperties;
};

/**
 * Properties of the smartGroup modification item.
 */
export interface SmartGroupModificationProperties {
  /**
   * Unique Id of the smartGroup for which the history is being retrieved
   */
  readonly smartGroupId?: string;
  /**
   * Modification details
   */
  modifications?: SmartGroupModificationItem[];
  /**
   * URL to fetch the next set of results.
   */
  nextLink?: string;
}

/**
 * smartGroup modification item.
 */
export interface SmartGroupModificationItem {
  /**
   * Reason for the modification
   */
  modificationEvent?: SmartGroupModificationEvent;
  /**
   * Old value
   */
  oldValue?: string;
  /**
   * New value
   */
  newValue?: string;
  /**
   * Modified date and time
   */
  modifiedAt?: string;
  /**
   * Modified user details (Principal client name)
   */
  modifiedBy?: string;
  /**
   * Modification comments
   */
  comments?: string;
  /**
   * Description of the modification
   */
  description?: string;
}

/**
 * List of action rules
 */
export interface ActionRulesList {
  /**
   * URL to fetch the next set of action rules
   */
  nextLink?: string;
  /**
   * List of action rules
   */
  value?: ActionRule[];
}

/**
 * An azure managed resource object
 */
export type ManagedResource = Resource & {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
};

/**
 * Action rule object containing target scope, conditions and suppression logic
 */
export type ActionRule = ManagedResource & {
  /**
   * action rule properties
   */
  properties?: ActionRulePropertiesUnion;
};

/**
 * Action rule properties defining scope, conditions, suppression logic for action rule
 */
export interface ActionRuleProperties {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  type: "Suppression" | "ActionGroup" | "Diagnostics";
  /**
   * scope on which action rule will apply
   */
  scope?: Scope;
  /**
   * conditions on which alerts will be filtered
   */
  conditions?: Conditions;
  /**
   * Description of action rule
   */
  description?: string;
  /**
   * Creation time of action rule. Date-Time in ISO-8601 format.
   */
  readonly createdAt?: Date;
  /**
   * Last updated time of action rule. Date-Time in ISO-8601 format.
   */
  readonly lastModifiedAt?: Date;
  /**
   * Created by user name.
   */
  readonly createdBy?: string;
  /**
   * Last modified by user name.
   */
  readonly lastModifiedBy?: string;
  /**
   * Indicates if the given action rule is enabled or disabled
   */
  status?: ActionRuleStatus;
}

/**
 * Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
 */
export interface Scope {
  /**
   * type of target scope
   */
  scopeType?: ScopeType;
  /**
   * list of ARM IDs of the given scope type which will be the target of the given action rule.
   */
  values?: string[];
}

/**
 * Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
 */
export interface Conditions {
  /**
   * filter alerts by severity
   */
  severity?: Condition;
  /**
   * filter alerts by monitor service
   */
  monitorService?: Condition;
  /**
   * filter alerts by monitor condition
   */
  monitorCondition?: Condition;
  /**
   * filter alerts by target resource type
   */
  targetResourceType?: Condition;
  /**
   * filter alerts by alert rule id
   */
  alertRuleId?: Condition;
  /**
   * filter alerts by alert rule description
   */
  description?: Condition;
  /**
   * filter alerts by alert context (payload)
   */
  alertContext?: Condition;
}

/**
 * condition to trigger an action rule
 */
export interface Condition {
  /**
   * operator for a given condition
   */
  operator?: Operator;
  /**
   * list of values to match for a given condition.
   */
  values?: string[];
}

/**
 * Data contract for patch
 */
export interface PatchObject {
  /**
   * tags to be updated
   */
  tags?: any;
  /**
   * Indicates if the given action rule is enabled or disabled
   */
  status?: ActionRuleStatus;
}

/**
 * Suppression logic for a given action rule
 */
export interface SuppressionConfig {
  /**
   * Specifies when the suppression should be applied
   */
  recurrenceType: SuppressionType;
  /**
   * suppression schedule configuration
   */
  schedule?: SuppressionSchedule;
}

/**
 * Schedule for a given suppression configuration.
 */
export interface SuppressionSchedule {
  /**
   * Start date for suppression
   */
  startDate?: string;
  /**
   * End date for suppression
   */
  endDate?: string;
  /**
   * Start time for suppression
   */
  startTime?: string;
  /**
   * End date for suppression
   */
  endTime?: string;
  /**
   * Specifies the values for recurrence pattern
   */
  recurrenceValues?: number[];
}

/**
 * Action rule with suppression configuration
 */
export type Suppression = ActionRuleProperties & {
  /**
   * suppression configuration for the action rule
   */
  suppressionConfig: SuppressionConfig;
};

/**
 * Action rule with action group configuration
 */
export type ActionGroup = ActionRuleProperties & {
  /**
   * Action group to trigger if action rule matches
   */
  actionGroupId: string;
};

/**
 * Action rule with diagnostics configuration
 */
export type Diagnostics = ActionRuleProperties & {};

/**
 * Monitor service details
 */
export type MonitorServiceList = AlertsMetaDataProperties & {
  /**
   * Array of operations
   */
  data: MonitorServiceDetails[];
};

/**
 * Details of a monitor service
 */
export interface MonitorServiceDetails {
  /**
   * Monitor service name
   */
  name?: string;
  /**
   * Monitor service display name
   */
  displayName?: string;
}

/**
 * Defines headers for smartGroups_getById operation.
 */
export interface SmartGroupsGetByIdHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for smartGroups_changeState operation.
 */
export interface SmartGroupsChangeStateHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for actionRules_listBySubscription operation.
 */
export interface ActionRulesListBySubscriptionHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for actionRules_listByResourceGroup operation.
 */
export interface ActionRulesListByResourceGroupHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for actionRules_getByName operation.
 */
export interface ActionRulesGetByNameHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for actionRules_createUpdate operation.
 */
export interface ActionRulesCreateUpdateHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for actionRules_delete operation.
 */
export interface ActionRulesDeleteHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for actionRules_update operation.
 */
export interface ActionRulesUpdateHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for actionRules_listBySubscriptionNext operation.
 */
export interface ActionRulesListBySubscriptionNextHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for actionRules_listByResourceGroupNext operation.
 */
export interface ActionRulesListByResourceGroupNextHeaders {
  xMsRequestId?: string;
}

/**
 * Defines values for MonitorService.
 */
export type MonitorService =
  | "Application Insights"
  | "ActivityLog Administrative"
  | "ActivityLog Security"
  | "ActivityLog Recommendation"
  | "ActivityLog Policy"
  | "ActivityLog Autoscale"
  | "Log Analytics"
  | "Nagios"
  | "Platform"
  | "SCOM"
  | "ServiceHealth"
  | "SmartDetector"
  | "VM Insights"
  | "Zabbix";
/**
 * Defines values for MonitorCondition.
 */
export type MonitorCondition = "Fired" | "Resolved";
/**
 * Defines values for Severity.
 */
export type Severity = "Sev0" | "Sev1" | "Sev2" | "Sev3" | "Sev4";
/**
 * Defines values for AlertState.
 */
export type AlertState = "New" | "Acknowledged" | "Closed";
/**
 * Defines values for AlertsSortByFields.
 */
export type AlertsSortByFields =
  | "name"
  | "severity"
  | "alertState"
  | "monitorCondition"
  | "targetResource"
  | "targetResourceName"
  | "targetResourceGroup"
  | "targetResourceType"
  | "startDateTime"
  | "lastModifiedDateTime";
/**
 * Defines values for Enum5.
 */
export type Enum5 = "asc" | "desc";
/**
 * Defines values for TimeRange.
 */
export type TimeRange = "1h" | "1d" | "7d" | "30d";
/**
 * Defines values for SignalType.
 */
export type SignalType = "Metric" | "Log" | "Unknown";
/**
 * Defines values for AlertsSummaryGroupByFields.
 */
export type AlertsSummaryGroupByFields =
  | "severity"
  | "alertState"
  | "monitorCondition"
  | "monitorService"
  | "signalType"
  | "alertRule";
/**
 * Defines values for SmartGroupsSortByFields.
 */
export type SmartGroupsSortByFields =
  | "alertsCount"
  | "state"
  | "severity"
  | "startDateTime"
  | "lastModifiedDateTime";
/**
 * Defines values for State.
 */
export type State = "New" | "Acknowledged" | "Closed";
/**
 * Defines values for ScopeType.
 */
export type ScopeType = "ResourceGroup" | "Resource";
/**
 * Defines values for Operator.
 */
export type Operator = "Equals" | "NotEquals" | "Contains" | "DoesNotContain";
/**
 * Defines values for ActionRuleStatus.
 */
export type ActionRuleStatus = "Enabled" | "Disabled";
/**
 * Defines values for ActionRuleType.
 */
export type ActionRuleType = "Suppression" | "ActionGroup" | "Diagnostics";
/**
 * Defines values for SuppressionType.
 */
export type SuppressionType =
  | "Always"
  | "Once"
  | "Daily"
  | "Weekly"
  | "Monthly";
/**
 * Defines values for AlertModificationEvent.
 */
export type AlertModificationEvent =
  | "AlertCreated"
  | "StateChange"
  | "MonitorConditionChange";
/**
 * Defines values for SmartGroupModificationEvent.
 */
export type SmartGroupModificationEvent =
  | "SmartGroupCreated"
  | "StateChange"
  | "AlertAdded"
  | "AlertRemoved";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationsList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationsList;
  };
};

/**
 * Contains response data for the metaData operation.
 */
export type AlertsMetaDataResponse = AlertsMetaData & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AlertsMetaData;
  };
};

/**
 * Optional parameters.
 */
export interface AlertsGetAllOptionalParams extends coreHttp.OperationOptions {
  /**
   * Filter by target resource( which is full ARM ID) Default value is select all.
   */
  targetResource?: string;
  /**
   * Filter by target resource type. Default value is select all.
   */
  targetResourceType?: string;
  /**
   * Filter by target resource group name. Default value is select all.
   */
  targetResourceGroup?: string;
  /**
   * Filter by monitor service which generates the alert instance. Default value is select all.
   */
  monitorService?: MonitorService;
  /**
   * Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
   */
  monitorCondition?: MonitorCondition;
  /**
   * Filter by severity.  Default value is select all.
   */
  severity?: Severity;
  /**
   * Filter by state of the alert instance. Default value is to select all.
   */
  alertState?: AlertState;
  /**
   * Filter by specific alert rule.  Default value is to select all.
   */
  alertRule?: string;
  /**
   * Filter the alerts list by the Smart Group Id. Default value is none.
   */
  smartGroupId?: string;
  /**
   * Include context which has contextual data specific to the monitor service. Default value is false'
   */
  includeContext?: boolean;
  /**
   * Include egress config which would be used for displaying the content in portal.  Default value is 'false'.
   */
  includeEgressConfig?: boolean;
  /**
   * Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the "includeContent"  filter is selected, maximum value allowed is 25. Default value is 25.
   */
  pageCount?: number;
  /**
   * Sort the query results by input field,  Default value is 'lastModifiedDateTime'.
   */
  sortBy?: AlertsSortByFields;
  /**
   * Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
   */
  sortOrder?: Enum5;
  /**
   * This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section.
   */
  select?: string;
  /**
   * Filter by time range by below listed values. Default value is 1 day.
   */
  timeRange?: TimeRange;
  /**
   * Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.
   */
  customTimeRange?: string;
}

/**
 * Contains response data for the getAll operation.
 */
export type AlertsGetAllResponse = AlertsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AlertsList;
  };
};

/**
 * Contains response data for the getById operation.
 */
export type AlertsGetByIdResponse = Alert & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Alert;
  };
};

/**
 * Contains response data for the changeState operation.
 */
export type AlertsChangeStateResponse = Alert & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Alert;
  };
};

/**
 * Contains response data for the getHistory operation.
 */
export type AlertsGetHistoryResponse = AlertModification & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AlertModification;
  };
};

/**
 * Optional parameters.
 */
export interface AlertsGetSummaryOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter by target resource( which is full ARM ID) Default value is select all.
   */
  targetResource?: string;
  /**
   * Filter by target resource type. Default value is select all.
   */
  targetResourceType?: string;
  /**
   * Filter by target resource group name. Default value is select all.
   */
  targetResourceGroup?: string;
  /**
   * Filter by monitor service which generates the alert instance. Default value is select all.
   */
  monitorService?: MonitorService;
  /**
   * Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
   */
  monitorCondition?: MonitorCondition;
  /**
   * Filter by severity.  Default value is select all.
   */
  severity?: Severity;
  /**
   * Filter by state of the alert instance. Default value is to select all.
   */
  alertState?: AlertState;
  /**
   * Filter by specific alert rule.  Default value is to select all.
   */
  alertRule?: string;
  /**
   * Filter by time range by below listed values. Default value is 1 day.
   */
  timeRange?: TimeRange;
  /**
   * Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.
   */
  customTimeRange?: string;
  /**
   * Include count of the SmartGroups as part of the summary. Default value is 'false'.
   */
  includeSmartGroupsCount?: boolean;
}

/**
 * Contains response data for the getSummary operation.
 */
export type AlertsGetSummaryResponse = AlertsSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AlertsSummary;
  };
};

/**
 * Optional parameters.
 */
export interface AlertsGetAllNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter by target resource( which is full ARM ID) Default value is select all.
   */
  targetResource?: string;
  /**
   * Filter by target resource type. Default value is select all.
   */
  targetResourceType?: string;
  /**
   * Filter by target resource group name. Default value is select all.
   */
  targetResourceGroup?: string;
  /**
   * Filter by monitor service which generates the alert instance. Default value is select all.
   */
  monitorService?: MonitorService;
  /**
   * Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
   */
  monitorCondition?: MonitorCondition;
  /**
   * Filter by severity.  Default value is select all.
   */
  severity?: Severity;
  /**
   * Filter by state of the alert instance. Default value is to select all.
   */
  alertState?: AlertState;
  /**
   * Filter by specific alert rule.  Default value is to select all.
   */
  alertRule?: string;
  /**
   * Filter the alerts list by the Smart Group Id. Default value is none.
   */
  smartGroupId?: string;
  /**
   * Include context which has contextual data specific to the monitor service. Default value is false'
   */
  includeContext?: boolean;
  /**
   * Include egress config which would be used for displaying the content in portal.  Default value is 'false'.
   */
  includeEgressConfig?: boolean;
  /**
   * Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the "includeContent"  filter is selected, maximum value allowed is 25. Default value is 25.
   */
  pageCount?: number;
  /**
   * Sort the query results by input field,  Default value is 'lastModifiedDateTime'.
   */
  sortBy?: AlertsSortByFields;
  /**
   * Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
   */
  sortOrder?: Enum5;
  /**
   * This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section.
   */
  select?: string;
  /**
   * Filter by time range by below listed values. Default value is 1 day.
   */
  timeRange?: TimeRange;
  /**
   * Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.
   */
  customTimeRange?: string;
}

/**
 * Contains response data for the getAllNext operation.
 */
export type AlertsGetAllNextResponse = AlertsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AlertsList;
  };
};

/**
 * Optional parameters.
 */
export interface SmartGroupsGetAllOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter by target resource( which is full ARM ID) Default value is select all.
   */
  targetResource?: string;
  /**
   * Filter by target resource type. Default value is select all.
   */
  targetResourceType?: string;
  /**
   * Filter by target resource group name. Default value is select all.
   */
  targetResourceGroup?: string;
  /**
   * Filter by monitor service which generates the alert instance. Default value is select all.
   */
  monitorService?: MonitorService;
  /**
   * Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
   */
  monitorCondition?: MonitorCondition;
  /**
   * Filter by severity.  Default value is select all.
   */
  severity?: Severity;
  /**
   * Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the "includeContent"  filter is selected, maximum value allowed is 25. Default value is 25.
   */
  pageCount?: number;
  /**
   * Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
   */
  sortOrder?: Enum5;
  /**
   * Filter by time range by below listed values. Default value is 1 day.
   */
  timeRange?: TimeRange;
  /**
   * Filter by state of the smart group. Default value is to select all.
   */
  smartGroupState?: AlertState;
  /**
   * Sort the query results by input field. Default value is sort by 'lastModifiedDateTime'.
   */
  sortBy?: SmartGroupsSortByFields;
}

/**
 * Contains response data for the getAll operation.
 */
export type SmartGroupsGetAllResponse = SmartGroupsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SmartGroupsList;
  };
};

/**
 * Contains response data for the getById operation.
 */
export type SmartGroupsGetByIdResponse = SmartGroupsGetByIdHeaders &
  SmartGroup & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SmartGroup;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: SmartGroupsGetByIdHeaders;
    };
  };

/**
 * Contains response data for the changeState operation.
 */
export type SmartGroupsChangeStateResponse = SmartGroupsChangeStateHeaders &
  SmartGroup & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SmartGroup;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: SmartGroupsChangeStateHeaders;
    };
  };

/**
 * Contains response data for the getHistory operation.
 */
export type SmartGroupsGetHistoryResponse = SmartGroupModification & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SmartGroupModification;
  };
};

/**
 * Optional parameters.
 */
export interface SmartGroupsGetAllNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter by target resource( which is full ARM ID) Default value is select all.
   */
  targetResource?: string;
  /**
   * Filter by target resource type. Default value is select all.
   */
  targetResourceType?: string;
  /**
   * Filter by target resource group name. Default value is select all.
   */
  targetResourceGroup?: string;
  /**
   * Filter by monitor service which generates the alert instance. Default value is select all.
   */
  monitorService?: MonitorService;
  /**
   * Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
   */
  monitorCondition?: MonitorCondition;
  /**
   * Filter by severity.  Default value is select all.
   */
  severity?: Severity;
  /**
   * Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the "includeContent"  filter is selected, maximum value allowed is 25. Default value is 25.
   */
  pageCount?: number;
  /**
   * Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
   */
  sortOrder?: Enum5;
  /**
   * Filter by time range by below listed values. Default value is 1 day.
   */
  timeRange?: TimeRange;
  /**
   * Filter by state of the smart group. Default value is to select all.
   */
  smartGroupState?: AlertState;
  /**
   * Sort the query results by input field. Default value is sort by 'lastModifiedDateTime'.
   */
  sortBy?: SmartGroupsSortByFields;
}

/**
 * Contains response data for the getAllNext operation.
 */
export type SmartGroupsGetAllNextResponse = SmartGroupsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SmartGroupsList;
  };
};

/**
 * Optional parameters.
 */
export interface ActionRulesListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter by target resource( which is full ARM ID) Default value is select all.
   */
  targetResource?: string;
  /**
   * Filter by target resource type. Default value is select all.
   */
  targetResourceType?: string;
  /**
   * Filter by target resource group name. Default value is select all.
   */
  targetResourceGroup?: string;
  /**
   * Filter by monitor service which generates the alert instance. Default value is select all.
   */
  monitorService?: MonitorService;
  /**
   * Filter by severity.  Default value is select all.
   */
  severity?: Severity;
  /**
   * filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope.
   */
  impactedScope?: string;
  /**
   * filter by alert rule description
   */
  description?: string;
  /**
   * filter by alert rule id
   */
  alertRuleId?: string;
  /**
   * filter by action group configured as part of action rule
   */
  actionGroup?: string;
  /**
   * filter by action rule name
   */
  name?: string;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type ActionRulesListBySubscriptionResponse = ActionRulesListBySubscriptionHeaders &
  ActionRulesList & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ActionRulesList;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ActionRulesListBySubscriptionHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ActionRulesListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter by target resource( which is full ARM ID) Default value is select all.
   */
  targetResource?: string;
  /**
   * Filter by target resource type. Default value is select all.
   */
  targetResourceType?: string;
  /**
   * Filter by target resource group name. Default value is select all.
   */
  targetResourceGroup?: string;
  /**
   * Filter by monitor service which generates the alert instance. Default value is select all.
   */
  monitorService?: MonitorService;
  /**
   * Filter by severity.  Default value is select all.
   */
  severity?: Severity;
  /**
   * filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope.
   */
  impactedScope?: string;
  /**
   * filter by alert rule description
   */
  description?: string;
  /**
   * filter by alert rule id
   */
  alertRuleId?: string;
  /**
   * filter by action group configured as part of action rule
   */
  actionGroup?: string;
  /**
   * filter by action rule name
   */
  name?: string;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ActionRulesListByResourceGroupResponse = ActionRulesListByResourceGroupHeaders &
  ActionRulesList & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ActionRulesList;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ActionRulesListByResourceGroupHeaders;
    };
  };

/**
 * Contains response data for the getByName operation.
 */
export type ActionRulesGetByNameResponse = ActionRulesGetByNameHeaders &
  ActionRule & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ActionRule;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ActionRulesGetByNameHeaders;
    };
  };

/**
 * Contains response data for the createUpdate operation.
 */
export type ActionRulesCreateUpdateResponse = ActionRulesCreateUpdateHeaders &
  ActionRule & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ActionRule;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ActionRulesCreateUpdateHeaders;
    };
  };

/**
 * Contains response data for the delete operation.
 */
export type ActionRulesDeleteResponse = ActionRulesDeleteHeaders & {
  /**
   * The parsed response body.
   */
  body: boolean;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: boolean;
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ActionRulesDeleteHeaders;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ActionRulesUpdateResponse = ActionRulesUpdateHeaders &
  ActionRule & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ActionRule;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ActionRulesUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ActionRulesListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter by target resource( which is full ARM ID) Default value is select all.
   */
  targetResource?: string;
  /**
   * Filter by target resource type. Default value is select all.
   */
  targetResourceType?: string;
  /**
   * Filter by target resource group name. Default value is select all.
   */
  targetResourceGroup?: string;
  /**
   * Filter by monitor service which generates the alert instance. Default value is select all.
   */
  monitorService?: MonitorService;
  /**
   * Filter by severity.  Default value is select all.
   */
  severity?: Severity;
  /**
   * filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope.
   */
  impactedScope?: string;
  /**
   * filter by alert rule description
   */
  description?: string;
  /**
   * filter by alert rule id
   */
  alertRuleId?: string;
  /**
   * filter by action group configured as part of action rule
   */
  actionGroup?: string;
  /**
   * filter by action rule name
   */
  name?: string;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type ActionRulesListBySubscriptionNextResponse = ActionRulesListBySubscriptionNextHeaders &
  ActionRulesList & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ActionRulesList;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ActionRulesListBySubscriptionNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ActionRulesListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter by target resource( which is full ARM ID) Default value is select all.
   */
  targetResource?: string;
  /**
   * Filter by target resource type. Default value is select all.
   */
  targetResourceType?: string;
  /**
   * Filter by target resource group name. Default value is select all.
   */
  targetResourceGroup?: string;
  /**
   * Filter by monitor service which generates the alert instance. Default value is select all.
   */
  monitorService?: MonitorService;
  /**
   * Filter by severity.  Default value is select all.
   */
  severity?: Severity;
  /**
   * filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope.
   */
  impactedScope?: string;
  /**
   * filter by alert rule description
   */
  description?: string;
  /**
   * filter by alert rule id
   */
  alertRuleId?: string;
  /**
   * filter by action group configured as part of action rule
   */
  actionGroup?: string;
  /**
   * filter by action rule name
   */
  name?: string;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ActionRulesListByResourceGroupNextResponse = ActionRulesListByResourceGroupNextHeaders &
  ActionRulesList & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ActionRulesList;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ActionRulesListByResourceGroupNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface AlertsManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
