/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationsList: coreHttp.CompositeMapper = {
  serializedName: "OperationsList",
  type: {
    name: "Composite",
    className: "OperationsList",
    modelProperties: {
      nextLink: { type: { name: "String" }, serializedName: "nextLink" },
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        },
        serializedName: "value",
        required: true
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: { type: { name: "String" }, serializedName: "name" },
      display: {
        serializedName: "display",
        type: { name: "Composite", className: "OperationDisplay" }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: { type: { name: "String" }, serializedName: "provider" },
      resource: { type: { name: "String" }, serializedName: "resource" },
      operation: { type: { name: "String" }, serializedName: "operation" },
      description: { type: { name: "String" }, serializedName: "description" }
    }
  }
};

export const AlertsMetaData: coreHttp.CompositeMapper = {
  serializedName: "AlertsMetaData",
  type: {
    name: "Composite",
    className: "AlertsMetaData",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: { name: "Composite", className: "AlertsMetaDataProperties" }
      }
    }
  }
};

export const AlertsMetaDataProperties: coreHttp.CompositeMapper = {
  serializedName: "AlertsMetaDataProperties",
  type: {
    name: "Composite",
    className: "AlertsMetaDataProperties",
    uberParent: "AlertsMetaDataProperties",
    polymorphicDiscriminator: {
      serializedName: "metadataIdentifier",
      clientName: "metadataIdentifier"
    },
    modelProperties: {
      metadataIdentifier: {
        type: { name: "String" },
        serializedName: "metadataIdentifier",
        defaultValue: "MonitorServiceList",
        isConstant: true
      }
    }
  }
};

export const AlertsList: coreHttp.CompositeMapper = {
  serializedName: "AlertsList",
  type: {
    name: "Composite",
    className: "AlertsList",
    modelProperties: {
      nextLink: { type: { name: "String" }, serializedName: "nextLink" },
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Alert" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", readOnly: true },
      type: {
        type: { name: "String" },
        serializedName: "type",
        readOnly: true
      },
      name: { type: { name: "String" }, serializedName: "name", readOnly: true }
    }
  }
};

export const Alert: coreHttp.CompositeMapper = {
  serializedName: "Alert",
  type: {
    name: "Composite",
    className: "Alert",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: { name: "Composite", className: "AlertProperties" }
      }
    }
  }
};

export const AlertProperties: coreHttp.CompositeMapper = {
  serializedName: "AlertProperties",
  type: {
    name: "Composite",
    className: "AlertProperties",
    modelProperties: {
      essentials: {
        serializedName: "essentials",
        type: { name: "Composite", className: "Essentials" }
      },
      context: {
        type: { name: "any" },
        serializedName: "context",
        readOnly: true
      },
      egressConfig: {
        type: { name: "any" },
        serializedName: "egressConfig",
        readOnly: true
      }
    }
  }
};

export const Essentials: coreHttp.CompositeMapper = {
  serializedName: "Essentials",
  type: {
    name: "Composite",
    className: "Essentials",
    modelProperties: {
      severity: {
        type: { name: "String" },
        serializedName: "severity",
        readOnly: true
      },
      signalType: {
        type: { name: "String" },
        serializedName: "signalType",
        readOnly: true
      },
      alertState: {
        type: { name: "String" },
        serializedName: "alertState",
        readOnly: true
      },
      monitorCondition: {
        type: { name: "String" },
        serializedName: "monitorCondition",
        readOnly: true
      },
      targetResource: {
        type: { name: "String" },
        serializedName: "targetResource"
      },
      targetResourceName: {
        type: { name: "String" },
        serializedName: "targetResourceName"
      },
      targetResourceGroup: {
        type: { name: "String" },
        serializedName: "targetResourceGroup"
      },
      targetResourceType: {
        type: { name: "String" },
        serializedName: "targetResourceType"
      },
      monitorService: {
        type: { name: "String" },
        serializedName: "monitorService",
        readOnly: true
      },
      alertRule: {
        type: { name: "String" },
        serializedName: "alertRule",
        readOnly: true
      },
      sourceCreatedId: {
        type: { name: "String" },
        serializedName: "sourceCreatedId",
        readOnly: true
      },
      smartGroupId: {
        type: { name: "String" },
        serializedName: "smartGroupId",
        readOnly: true
      },
      smartGroupingReason: {
        type: { name: "String" },
        serializedName: "smartGroupingReason",
        readOnly: true
      },
      startDateTime: {
        type: { name: "DateTime" },
        serializedName: "startDateTime",
        readOnly: true
      },
      lastModifiedDateTime: {
        type: { name: "DateTime" },
        serializedName: "lastModifiedDateTime",
        readOnly: true
      },
      monitorConditionResolvedDateTime: {
        type: { name: "DateTime" },
        serializedName: "monitorConditionResolvedDateTime",
        readOnly: true
      },
      lastModifiedUserName: {
        type: { name: "String" },
        serializedName: "lastModifiedUserName",
        readOnly: true
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: { name: "Composite", className: "ErrorResponseBody" }
      }
    }
  }
};

export const ErrorResponseBody: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponseBody",
  type: {
    name: "Composite",
    className: "ErrorResponseBody",
    modelProperties: {
      code: { type: { name: "String" }, serializedName: "code" },
      message: { type: { name: "String" }, serializedName: "message" },
      target: { type: { name: "String" }, serializedName: "target" },
      details: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ErrorResponseBody" }
          }
        },
        serializedName: "details"
      }
    }
  }
};

export const AlertModification: coreHttp.CompositeMapper = {
  serializedName: "AlertModification",
  type: {
    name: "Composite",
    className: "AlertModification",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: { name: "Composite", className: "AlertModificationProperties" }
      }
    }
  }
};

export const AlertModificationProperties: coreHttp.CompositeMapper = {
  serializedName: "AlertModificationProperties",
  type: {
    name: "Composite",
    className: "AlertModificationProperties",
    modelProperties: {
      alertId: {
        type: { name: "String" },
        serializedName: "alertId",
        readOnly: true
      },
      modifications: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AlertModificationItem" }
          }
        },
        serializedName: "modifications"
      }
    }
  }
};

export const AlertModificationItem: coreHttp.CompositeMapper = {
  serializedName: "AlertModificationItem",
  type: {
    name: "Composite",
    className: "AlertModificationItem",
    modelProperties: {
      modificationEvent: {
        type: {
          name: "Enum",
          allowedValues: [
            "AlertCreated",
            "StateChange",
            "MonitorConditionChange"
          ]
        },
        serializedName: "modificationEvent"
      },
      oldValue: { type: { name: "String" }, serializedName: "oldValue" },
      newValue: { type: { name: "String" }, serializedName: "newValue" },
      modifiedAt: { type: { name: "String" }, serializedName: "modifiedAt" },
      modifiedBy: { type: { name: "String" }, serializedName: "modifiedBy" },
      comments: { type: { name: "String" }, serializedName: "comments" },
      description: { type: { name: "String" }, serializedName: "description" }
    }
  }
};

export const AlertsSummary: coreHttp.CompositeMapper = {
  serializedName: "AlertsSummary",
  type: {
    name: "Composite",
    className: "AlertsSummary",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: { name: "Composite", className: "AlertsSummaryGroup" }
      }
    }
  }
};

export const AlertsSummaryGroup: coreHttp.CompositeMapper = {
  serializedName: "AlertsSummaryGroup",
  type: {
    name: "Composite",
    className: "AlertsSummaryGroup",
    modelProperties: {
      total: { type: { name: "Number" }, serializedName: "total" },
      smartGroupsCount: {
        type: { name: "Number" },
        serializedName: "smartGroupsCount"
      },
      groupedby: { type: { name: "String" }, serializedName: "groupedby" },
      values: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AlertsSummaryGroupItem" }
          }
        },
        serializedName: "values"
      }
    }
  }
};

export const AlertsSummaryGroupItem: coreHttp.CompositeMapper = {
  serializedName: "AlertsSummaryGroupItem",
  type: {
    name: "Composite",
    className: "AlertsSummaryGroupItem",
    modelProperties: {
      name: { type: { name: "String" }, serializedName: "name" },
      count: { type: { name: "Number" }, serializedName: "count" },
      groupedby: { type: { name: "String" }, serializedName: "groupedby" },
      values: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AlertsSummaryGroupItem" }
          }
        },
        serializedName: "values"
      }
    }
  }
};

export const SmartGroupsList: coreHttp.CompositeMapper = {
  serializedName: "SmartGroupsList",
  type: {
    name: "Composite",
    className: "SmartGroupsList",
    modelProperties: {
      nextLink: { type: { name: "String" }, serializedName: "nextLink" },
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SmartGroup" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const SmartGroup: coreHttp.CompositeMapper = {
  serializedName: "SmartGroup",
  type: {
    name: "Composite",
    className: "SmartGroup",
    modelProperties: {
      ...Resource.type.modelProperties,
      alertsCount: {
        type: { name: "Number" },
        serializedName: "properties.alertsCount"
      },
      smartGroupState: {
        type: { name: "String" },
        serializedName: "properties.smartGroupState",
        readOnly: true
      },
      severity: {
        type: { name: "String" },
        serializedName: "properties.severity",
        readOnly: true
      },
      startDateTime: {
        type: { name: "DateTime" },
        serializedName: "properties.startDateTime",
        readOnly: true
      },
      lastModifiedDateTime: {
        type: { name: "DateTime" },
        serializedName: "properties.lastModifiedDateTime",
        readOnly: true
      },
      lastModifiedUserName: {
        type: { name: "String" },
        serializedName: "properties.lastModifiedUserName",
        readOnly: true
      },
      resources: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SmartGroupAggregatedProperty"
            }
          }
        },
        serializedName: "properties.resources"
      },
      resourceTypes: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SmartGroupAggregatedProperty"
            }
          }
        },
        serializedName: "properties.resourceTypes"
      },
      resourceGroups: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SmartGroupAggregatedProperty"
            }
          }
        },
        serializedName: "properties.resourceGroups"
      },
      monitorServices: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SmartGroupAggregatedProperty"
            }
          }
        },
        serializedName: "properties.monitorServices"
      },
      monitorConditions: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SmartGroupAggregatedProperty"
            }
          }
        },
        serializedName: "properties.monitorConditions"
      },
      alertStates: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SmartGroupAggregatedProperty"
            }
          }
        },
        serializedName: "properties.alertStates"
      },
      alertSeverities: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SmartGroupAggregatedProperty"
            }
          }
        },
        serializedName: "properties.alertSeverities"
      },
      nextLink: {
        type: { name: "String" },
        serializedName: "properties.nextLink"
      }
    }
  }
};

export const SmartGroupAggregatedProperty: coreHttp.CompositeMapper = {
  serializedName: "SmartGroupAggregatedProperty",
  type: {
    name: "Composite",
    className: "SmartGroupAggregatedProperty",
    modelProperties: {
      name: { type: { name: "String" }, serializedName: "name" },
      count: { type: { name: "Number" }, serializedName: "count" }
    }
  }
};

export const SmartGroupModification: coreHttp.CompositeMapper = {
  serializedName: "SmartGroupModification",
  type: {
    name: "Composite",
    className: "SmartGroupModification",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SmartGroupModificationProperties"
        }
      }
    }
  }
};

export const SmartGroupModificationProperties: coreHttp.CompositeMapper = {
  serializedName: "SmartGroupModificationProperties",
  type: {
    name: "Composite",
    className: "SmartGroupModificationProperties",
    modelProperties: {
      smartGroupId: {
        type: { name: "String" },
        serializedName: "smartGroupId",
        readOnly: true
      },
      modifications: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SmartGroupModificationItem" }
          }
        },
        serializedName: "modifications"
      },
      nextLink: { type: { name: "String" }, serializedName: "nextLink" }
    }
  }
};

export const SmartGroupModificationItem: coreHttp.CompositeMapper = {
  serializedName: "SmartGroupModificationItem",
  type: {
    name: "Composite",
    className: "SmartGroupModificationItem",
    modelProperties: {
      modificationEvent: {
        type: {
          name: "Enum",
          allowedValues: [
            "SmartGroupCreated",
            "StateChange",
            "AlertAdded",
            "AlertRemoved"
          ]
        },
        serializedName: "modificationEvent"
      },
      oldValue: { type: { name: "String" }, serializedName: "oldValue" },
      newValue: { type: { name: "String" }, serializedName: "newValue" },
      modifiedAt: { type: { name: "String" }, serializedName: "modifiedAt" },
      modifiedBy: { type: { name: "String" }, serializedName: "modifiedBy" },
      comments: { type: { name: "String" }, serializedName: "comments" },
      description: { type: { name: "String" }, serializedName: "description" }
    }
  }
};

export const ActionRulesList: coreHttp.CompositeMapper = {
  serializedName: "ActionRulesList",
  type: {
    name: "Composite",
    className: "ActionRulesList",
    modelProperties: {
      nextLink: { type: { name: "String" }, serializedName: "nextLink" },
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ActionRule" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const ManagedResource: coreHttp.CompositeMapper = {
  serializedName: "ManagedResource",
  type: {
    name: "Composite",
    className: "ManagedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        type: { name: "String" },
        serializedName: "location",
        required: true
      },
      tags: {
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        },
        serializedName: "tags"
      }
    }
  }
};

export const ActionRule: coreHttp.CompositeMapper = {
  serializedName: "ActionRule",
  type: {
    name: "Composite",
    className: "ActionRule",
    modelProperties: {
      ...ManagedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: { name: "Composite", className: "ActionRuleProperties" }
      }
    }
  }
};

export const ActionRuleProperties: coreHttp.CompositeMapper = {
  serializedName: "ActionRuleProperties",
  type: {
    name: "Composite",
    className: "ActionRuleProperties",
    uberParent: "ActionRuleProperties",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      scope: {
        serializedName: "scope",
        type: { name: "Composite", className: "Scope" }
      },
      conditions: {
        serializedName: "conditions",
        type: { name: "Composite", className: "Conditions" }
      },
      description: { type: { name: "String" }, serializedName: "description" },
      createdAt: {
        type: { name: "DateTime" },
        serializedName: "createdAt",
        readOnly: true
      },
      lastModifiedAt: {
        type: { name: "DateTime" },
        serializedName: "lastModifiedAt",
        readOnly: true
      },
      createdBy: {
        type: { name: "String" },
        serializedName: "createdBy",
        readOnly: true
      },
      lastModifiedBy: {
        type: { name: "String" },
        serializedName: "lastModifiedBy",
        readOnly: true
      },
      status: { type: { name: "String" }, serializedName: "status" },
      type: { type: { name: "String" }, serializedName: "type", required: true }
    }
  }
};

export const Scope: coreHttp.CompositeMapper = {
  serializedName: "Scope",
  type: {
    name: "Composite",
    className: "Scope",
    modelProperties: {
      scopeType: { type: { name: "String" }, serializedName: "scopeType" },
      values: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ScopeValuesItem"
          }
        },
        serializedName: "values"
      }
    }
  }
};

export const Conditions: coreHttp.CompositeMapper = {
  serializedName: "Conditions",
  type: {
    name: "Composite",
    className: "Conditions",
    modelProperties: {
      severity: {
        serializedName: "severity",
        type: { name: "Composite", className: "Condition" }
      },
      monitorService: {
        serializedName: "monitorService",
        type: { name: "Composite", className: "Condition" }
      },
      monitorCondition: {
        serializedName: "monitorCondition",
        type: { name: "Composite", className: "Condition" }
      },
      targetResourceType: {
        serializedName: "targetResourceType",
        type: { name: "Composite", className: "Condition" }
      },
      alertRuleId: {
        serializedName: "alertRuleId",
        type: { name: "Composite", className: "Condition" }
      },
      description: {
        serializedName: "description",
        type: { name: "Composite", className: "Condition" }
      },
      alertContext: {
        serializedName: "alertContext",
        type: { name: "Composite", className: "Condition" }
      }
    }
  }
};

export const Condition: coreHttp.CompositeMapper = {
  serializedName: "Condition",
  type: {
    name: "Composite",
    className: "Condition",
    modelProperties: {
      operator: { type: { name: "String" }, serializedName: "operator" },
      values: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ConditionValuesItem"
          }
        },
        serializedName: "values"
      }
    }
  }
};

export const PatchObject: coreHttp.CompositeMapper = {
  serializedName: "PatchObject",
  type: {
    name: "Composite",
    className: "PatchObject",
    modelProperties: {
      tags: { type: { name: "any" }, serializedName: "tags" },
      status: { type: { name: "String" }, serializedName: "properties.status" }
    }
  }
};

export const SuppressionConfig: coreHttp.CompositeMapper = {
  serializedName: "SuppressionConfig",
  type: {
    name: "Composite",
    className: "SuppressionConfig",
    modelProperties: {
      recurrenceType: {
        type: { name: "String" },
        serializedName: "recurrenceType",
        required: true
      },
      schedule: {
        serializedName: "schedule",
        type: { name: "Composite", className: "SuppressionSchedule" }
      }
    }
  }
};

export const SuppressionSchedule: coreHttp.CompositeMapper = {
  serializedName: "SuppressionSchedule",
  type: {
    name: "Composite",
    className: "SuppressionSchedule",
    modelProperties: {
      startDate: { type: { name: "String" }, serializedName: "startDate" },
      endDate: { type: { name: "String" }, serializedName: "endDate" },
      startTime: { type: { name: "String" }, serializedName: "startTime" },
      endTime: { type: { name: "String" }, serializedName: "endTime" },
      recurrenceValues: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Number" },
            serializedName: "ArrayItemschema"
          }
        },
        serializedName: "recurrenceValues"
      }
    }
  }
};

export const Suppression: coreHttp.CompositeMapper = {
  serializedName: "Suppression",
  type: {
    name: "Composite",
    className: "Suppression",
    uberParent: "ActionRuleProperties",
    polymorphicDiscriminator:
      ActionRuleProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ActionRuleProperties.type.modelProperties,
      ...Any.type.modelProperties,
      suppressionConfig: {
        serializedName: "suppressionConfig",
        type: { name: "Composite", className: "SuppressionConfig" }
      }
    }
  }
};

export const ActionGroup: coreHttp.CompositeMapper = {
  serializedName: "ActionGroup",
  type: {
    name: "Composite",
    className: "ActionGroup",
    uberParent: "ActionRuleProperties",
    polymorphicDiscriminator:
      ActionRuleProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ActionRuleProperties.type.modelProperties,
      ...Any.type.modelProperties,
      actionGroupId: {
        type: { name: "String" },
        serializedName: "actionGroupId",
        required: true
      }
    }
  }
};

export const Diagnostics: coreHttp.CompositeMapper = {
  serializedName: "Diagnostics",
  type: {
    name: "Composite",
    className: "Diagnostics",
    uberParent: "ActionRuleProperties",
    polymorphicDiscriminator:
      ActionRuleProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ActionRuleProperties.type.modelProperties
    }
  }
};

export const MonitorServiceList: coreHttp.CompositeMapper = {
  serializedName: "MonitorServiceList",
  type: {
    name: "Composite",
    className: "MonitorServiceList",
    uberParent: "AlertsMetaDataProperties",
    polymorphicDiscriminator:
      AlertsMetaDataProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...AlertsMetaDataProperties.type.modelProperties,
      ...Any.type.modelProperties,
      data: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MonitorServiceDetails" }
          }
        },
        serializedName: "data",
        required: true
      }
    }
  }
};

export const MonitorServiceDetails: coreHttp.CompositeMapper = {
  serializedName: "MonitorServiceDetails",
  type: {
    name: "Composite",
    className: "MonitorServiceDetails",
    modelProperties: {
      name: { type: { name: "String" }, serializedName: "name" },
      displayName: { type: { name: "String" }, serializedName: "displayName" }
    }
  }
};

export const SmartGroupsGetByIdHeaders: coreHttp.CompositeMapper = {
  serializedName: "smartGroups_getByIdHeaders",
  type: {
    name: "Composite",
    className: "SmartGroupsGetByIdHeaders",
    modelProperties: {
      xMsRequestId: {
        type: { name: "String" },
        serializedName: "x-ms-request-id"
      }
    }
  }
};

export const SmartGroupsChangeStateHeaders: coreHttp.CompositeMapper = {
  serializedName: "smartGroups_changeStateHeaders",
  type: {
    name: "Composite",
    className: "SmartGroupsChangeStateHeaders",
    modelProperties: {
      xMsRequestId: {
        type: { name: "String" },
        serializedName: "x-ms-request-id"
      }
    }
  }
};

export const ActionRulesListBySubscriptionHeaders: coreHttp.CompositeMapper = {
  serializedName: "actionRules_listBySubscriptionHeaders",
  type: {
    name: "Composite",
    className: "ActionRulesListBySubscriptionHeaders",
    modelProperties: {
      xMsRequestId: {
        type: { name: "String" },
        serializedName: "x-ms-request-id"
      }
    }
  }
};

export const ActionRulesListByResourceGroupHeaders: coreHttp.CompositeMapper = {
  serializedName: "actionRules_listByResourceGroupHeaders",
  type: {
    name: "Composite",
    className: "ActionRulesListByResourceGroupHeaders",
    modelProperties: {
      xMsRequestId: {
        type: { name: "String" },
        serializedName: "x-ms-request-id"
      }
    }
  }
};

export const ActionRulesGetByNameHeaders: coreHttp.CompositeMapper = {
  serializedName: "actionRules_getByNameHeaders",
  type: {
    name: "Composite",
    className: "ActionRulesGetByNameHeaders",
    modelProperties: {
      xMsRequestId: {
        type: { name: "String" },
        serializedName: "x-ms-request-id"
      }
    }
  }
};

export const ActionRulesCreateUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "actionRules_createUpdateHeaders",
  type: {
    name: "Composite",
    className: "ActionRulesCreateUpdateHeaders",
    modelProperties: {
      xMsRequestId: {
        type: { name: "String" },
        serializedName: "x-ms-request-id"
      }
    }
  }
};

export const ActionRulesDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "actionRules_deleteHeaders",
  type: {
    name: "Composite",
    className: "ActionRulesDeleteHeaders",
    modelProperties: {
      xMsRequestId: {
        type: { name: "String" },
        serializedName: "x-ms-request-id"
      }
    }
  }
};

export const ActionRulesUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "actionRules_updateHeaders",
  type: {
    name: "Composite",
    className: "ActionRulesUpdateHeaders",
    modelProperties: {
      xMsRequestId: {
        type: { name: "String" },
        serializedName: "x-ms-request-id"
      }
    }
  }
};

export const ActionRulesListBySubscriptionNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "actionRules_listBySubscriptionNextHeaders",
  type: {
    name: "Composite",
    className: "ActionRulesListBySubscriptionNextHeaders",
    modelProperties: {
      xMsRequestId: {
        type: { name: "String" },
        serializedName: "x-ms-request-id"
      }
    }
  }
};

export const ActionRulesListByResourceGroupNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "actionRules_listByResourceGroupNextHeaders",
  type: {
    name: "Composite",
    className: "ActionRulesListByResourceGroupNextHeaders",
    modelProperties: {
      xMsRequestId: {
        type: { name: "String" },
        serializedName: "x-ms-request-id"
      }
    }
  }
};

export let discriminators = {
  AlertsMetaDataProperties: AlertsMetaDataProperties,
  ActionRuleProperties: ActionRuleProperties,
  "ActionRuleProperties.Suppression": Suppression,
  "ActionRuleProperties.ActionGroup": ActionGroup,
  "ActionRuleProperties.Diagnostics": Diagnostics,
  "AlertsMetaDataProperties.MonitorServiceList": MonitorServiceList
};
