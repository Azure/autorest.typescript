/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-05-05-preview",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const identifier: coreHttp.OperationQueryParameter = {
  parameterPath: "identifier",
  mapper: {
    defaultValue: "MonitorServiceList",
    serializedName: "identifier",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    constraints: { MinLength: 1 },
    type: {
      name: "String"
    }
  }
};

export const targetResource: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "targetResource"],
  mapper: {
    serializedName: "targetResource",
    type: {
      name: "String"
    }
  }
};

export const targetResourceType: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "targetResourceType"],
  mapper: {
    serializedName: "targetResourceType",
    type: {
      name: "String"
    }
  }
};

export const targetResourceGroup: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "targetResourceGroup"],
  mapper: {
    serializedName: "targetResourceGroup",
    type: {
      name: "String"
    }
  }
};

export const monitorService: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "monitorService"],
  mapper: {
    serializedName: "monitorService",
    type: {
      name: "String"
    }
  }
};

export const monitorCondition: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "monitorCondition"],
  mapper: {
    serializedName: "monitorCondition",
    type: {
      name: "String"
    }
  }
};

export const severity: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "severity"],
  mapper: {
    serializedName: "severity",
    type: {
      name: "String"
    }
  }
};

export const alertState: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "alertState"],
  mapper: {
    serializedName: "alertState",
    type: {
      name: "String"
    }
  }
};

export const alertRule: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "alertRule"],
  mapper: {
    serializedName: "alertRule",
    type: {
      name: "String"
    }
  }
};

export const smartGroupId: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "smartGroupId"],
  mapper: {
    serializedName: "smartGroupId",
    type: {
      name: "String"
    }
  }
};

export const includeContext: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "includeContext"],
  mapper: {
    serializedName: "includeContext",
    type: {
      name: "Boolean"
    }
  }
};

export const includeEgressConfig: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "includeEgressConfig"],
  mapper: {
    serializedName: "includeEgressConfig",
    type: {
      name: "Boolean"
    }
  }
};

export const pageCount: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "pageCount"],
  mapper: {
    serializedName: "pageCount",
    type: {
      name: "Number"
    }
  }
};

export const sortBy: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "sortBy"],
  mapper: {
    serializedName: "sortBy",
    type: {
      name: "String"
    }
  }
};

export const sortOrder: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "sortOrder"],
  mapper: {
    serializedName: "sortOrder",
    type: {
      name: "String"
    }
  }
};

export const select: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "select"],
  mapper: {
    serializedName: "select",
    type: {
      name: "String"
    }
  }
};

export const timeRange: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "timeRange"],
  mapper: {
    serializedName: "timeRange",
    type: {
      name: "String"
    }
  }
};

export const customTimeRange: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "customTimeRange"],
  mapper: {
    serializedName: "customTimeRange",
    type: {
      name: "String"
    }
  }
};

export const alertId: coreHttp.OperationURLParameter = {
  parameterPath: "alertId",
  mapper: {
    serializedName: "alertId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const newState: coreHttp.OperationQueryParameter = {
  parameterPath: "newState",
  mapper: {
    serializedName: "newState",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const groupby: coreHttp.OperationQueryParameter = {
  parameterPath: "groupby",
  mapper: {
    serializedName: "groupby",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const includeSmartGroupsCount: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "includeSmartGroupsCount"],
  mapper: {
    serializedName: "includeSmartGroupsCount",
    type: {
      name: "Boolean"
    }
  }
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const smartGroupState: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "smartGroupState"],
  mapper: {
    serializedName: "smartGroupState",
    type: {
      name: "String"
    }
  }
};

export const sortBy1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "sortBy"],
  mapper: {
    serializedName: "sortBy",
    type: {
      name: "String"
    }
  }
};

export const smartGroupId1: coreHttp.OperationURLParameter = {
  parameterPath: "smartGroupId",
  mapper: {
    serializedName: "smartGroupId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const impactedScope: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "impactedScope"],
  mapper: {
    serializedName: "impactedScope",
    type: {
      name: "String"
    }
  }
};

export const description: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "description"],
  mapper: {
    serializedName: "description",
    type: {
      name: "String"
    }
  }
};

export const alertRuleId: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "alertRuleId"],
  mapper: {
    serializedName: "alertRuleId",
    type: {
      name: "String"
    }
  }
};

export const actionGroup: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "actionGroup"],
  mapper: {
    serializedName: "actionGroup",
    type: {
      name: "String"
    }
  }
};

export const name: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "name"],
  mapper: {
    serializedName: "name",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const actionRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "actionRuleName",
  mapper: {
    serializedName: "actionRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const actionRule: coreHttp.OperationParameter = {
  parameterPath: "actionRule",
  mapper: Mappers.ActionRule
};

export const actionRuleName1: coreHttp.OperationURLParameter = {
  parameterPath: "actionRuleName",
  mapper: {
    serializedName: "actionRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const actionRuleName2: coreHttp.OperationURLParameter = {
  parameterPath: "actionRuleName",
  mapper: {
    serializedName: "actionRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const actionRulePatch: coreHttp.OperationParameter = {
  parameterPath: "actionRulePatch",
  mapper: Mappers.PatchObject
};

export const actionRuleName3: coreHttp.OperationURLParameter = {
  parameterPath: "actionRuleName",
  mapper: {
    serializedName: "actionRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
