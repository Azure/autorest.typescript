/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  HttpClientFailureHead400OptionalParams,
  HttpClientFailureGet400OptionalParams,
  HttpClientFailureOptions400OptionalParams,
  HttpClientFailurePut400OptionalParams,
  HttpClientFailurePatch400OptionalParams,
  HttpClientFailurePost400OptionalParams,
  HttpClientFailureDelete400OptionalParams,
  HttpClientFailureHead401OptionalParams,
  HttpClientFailureGet402OptionalParams,
  HttpClientFailureOptions403OptionalParams,
  HttpClientFailureGet403OptionalParams,
  HttpClientFailurePut404OptionalParams,
  HttpClientFailurePatch405OptionalParams,
  HttpClientFailurePost406OptionalParams,
  HttpClientFailureDelete407OptionalParams,
  HttpClientFailurePut409OptionalParams,
  HttpClientFailureHead410OptionalParams,
  HttpClientFailureGet411OptionalParams,
  HttpClientFailureOptions412OptionalParams,
  HttpClientFailureGet412OptionalParams,
  HttpClientFailurePut413OptionalParams,
  HttpClientFailurePatch414OptionalParams,
  HttpClientFailurePost415OptionalParams,
  HttpClientFailureGet416OptionalParams,
  HttpClientFailureDelete417OptionalParams,
  HttpClientFailureHead429OptionalParams
} from "../models";

/** Interface representing a HttpClientFailure. */
export interface HttpClientFailure {
  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  head400(options?: HttpClientFailureHead400OptionalParams): Promise<void>;
  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get400(options?: HttpClientFailureGet400OptionalParams): Promise<void>;
  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  options400(
    options?: HttpClientFailureOptions400OptionalParams
  ): Promise<void>;
  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  put400(options?: HttpClientFailurePut400OptionalParams): Promise<void>;
  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  patch400(options?: HttpClientFailurePatch400OptionalParams): Promise<void>;
  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  post400(options?: HttpClientFailurePost400OptionalParams): Promise<void>;
  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  delete400(options?: HttpClientFailureDelete400OptionalParams): Promise<void>;
  /**
   * Return 401 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  head401(options?: HttpClientFailureHead401OptionalParams): Promise<void>;
  /**
   * Return 402 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get402(options?: HttpClientFailureGet402OptionalParams): Promise<void>;
  /**
   * Return 403 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  options403(
    options?: HttpClientFailureOptions403OptionalParams
  ): Promise<void>;
  /**
   * Return 403 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get403(options?: HttpClientFailureGet403OptionalParams): Promise<void>;
  /**
   * Return 404 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  put404(options?: HttpClientFailurePut404OptionalParams): Promise<void>;
  /**
   * Return 405 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  patch405(options?: HttpClientFailurePatch405OptionalParams): Promise<void>;
  /**
   * Return 406 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  post406(options?: HttpClientFailurePost406OptionalParams): Promise<void>;
  /**
   * Return 407 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  delete407(options?: HttpClientFailureDelete407OptionalParams): Promise<void>;
  /**
   * Return 409 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  put409(options?: HttpClientFailurePut409OptionalParams): Promise<void>;
  /**
   * Return 410 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  head410(options?: HttpClientFailureHead410OptionalParams): Promise<void>;
  /**
   * Return 411 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get411(options?: HttpClientFailureGet411OptionalParams): Promise<void>;
  /**
   * Return 412 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  options412(
    options?: HttpClientFailureOptions412OptionalParams
  ): Promise<void>;
  /**
   * Return 412 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get412(options?: HttpClientFailureGet412OptionalParams): Promise<void>;
  /**
   * Return 413 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  put413(options?: HttpClientFailurePut413OptionalParams): Promise<void>;
  /**
   * Return 414 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  patch414(options?: HttpClientFailurePatch414OptionalParams): Promise<void>;
  /**
   * Return 415 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  post415(options?: HttpClientFailurePost415OptionalParams): Promise<void>;
  /**
   * Return 416 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get416(options?: HttpClientFailureGet416OptionalParams): Promise<void>;
  /**
   * Return 417 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  delete417(options?: HttpClientFailureDelete417OptionalParams): Promise<void>;
  /**
   * Return 429 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  head429(options?: HttpClientFailureHead429OptionalParams): Promise<void>;
}
