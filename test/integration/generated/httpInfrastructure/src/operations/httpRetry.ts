/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { HttpRetry } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HttpInfrastructureClient } from "../httpInfrastructureClient";
import {
  HttpRetryHead408OptionalParams,
  HttpRetryPut500OptionalParams,
  HttpRetryPatch500OptionalParams,
  HttpRetryGet502OptionalParams,
  HttpRetryOptions502OptionalParams,
  HttpRetryOptions502Response,
  HttpRetryPost503OptionalParams,
  HttpRetryDelete503OptionalParams,
  HttpRetryPut504OptionalParams,
  HttpRetryPatch504OptionalParams
} from "../models";

/** Class containing HttpRetry operations. */
export class HttpRetryImpl implements HttpRetry {
  private readonly client: HttpInfrastructureClient;

  /**
   * Initialize a new instance of the class HttpRetry class.
   * @param client Reference to the service client
   */
  constructor(client: HttpInfrastructureClient) {
    this.client = client;
  }

  /**
   * Return 408 status code, then 200 after retry
   * @param options The options parameters.
   */
  head408(options?: HttpRetryHead408OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, head408OperationSpec);
  }

  /**
   * Return 500 status code, then 200 after retry
   * @param options The options parameters.
   */
  put500(options?: HttpRetryPut500OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, put500OperationSpec);
  }

  /**
   * Return 500 status code, then 200 after retry
   * @param options The options parameters.
   */
  patch500(options?: HttpRetryPatch500OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, patch500OperationSpec);
  }

  /**
   * Return 502 status code, then 200 after retry
   * @param options The options parameters.
   */
  get502(options?: HttpRetryGet502OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, get502OperationSpec);
  }

  /**
   * Return 502 status code, then 200 after retry
   * @param options The options parameters.
   */
  options502(
    options?: HttpRetryOptions502OptionalParams
  ): Promise<HttpRetryOptions502Response> {
    return this.client.sendOperationRequest(
      { options },
      options502OperationSpec
    );
  }

  /**
   * Return 503 status code, then 200 after retry
   * @param options The options parameters.
   */
  post503(options?: HttpRetryPost503OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, post503OperationSpec);
  }

  /**
   * Return 503 status code, then 200 after retry
   * @param options The options parameters.
   */
  delete503(options?: HttpRetryDelete503OptionalParams): Promise<void> {
    return this.client.sendOperationRequest(
      { options },
      delete503OperationSpec
    );
  }

  /**
   * Return 504 status code, then 200 after retry
   * @param options The options parameters.
   */
  put504(options?: HttpRetryPut504OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, put504OperationSpec);
  }

  /**
   * Return 504 status code, then 200 after retry
   * @param options The options parameters.
   */
  patch504(options?: HttpRetryPatch504OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, patch504OperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const head408OperationSpec: coreClient.OperationSpec = {
  path: "/http/retry/408",
  httpMethod: "HEAD",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const put500OperationSpec: coreClient.OperationSpec = {
  path: "/http/retry/500",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const patch500OperationSpec: coreClient.OperationSpec = {
  path: "/http/retry/500",
  httpMethod: "PATCH",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const get502OperationSpec: coreClient.OperationSpec = {
  path: "/http/retry/502",
  httpMethod: "GET",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const options502OperationSpec: coreClient.OperationSpec = {
  path: "/http/retry/502",
  httpMethod: "OPTIONS",
  responses: {
    200: {
      bodyMapper: { type: { name: "Boolean" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const post503OperationSpec: coreClient.OperationSpec = {
  path: "/http/retry/503",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const delete503OperationSpec: coreClient.OperationSpec = {
  path: "/http/retry/503",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const put504OperationSpec: coreClient.OperationSpec = {
  path: "/http/retry/504",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const patch504OperationSpec: coreClient.OperationSpec = {
  path: "/http/retry/504",
  httpMethod: "PATCH",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
