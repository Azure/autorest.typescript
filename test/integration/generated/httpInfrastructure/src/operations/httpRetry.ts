/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HttpInfrastructureClient } from "../httpInfrastructureClient";
import { HttpRetryOptions502Response } from "../models";

/** Class representing a HttpRetry. */
export class HttpRetry {
  private readonly client: HttpInfrastructureClient;

  /**
   * Initialize a new instance of the class HttpRetry class.
   * @param client Reference to the service client
   */
  constructor(client: HttpInfrastructureClient) {
    this.client = client;
  }

  /**
   * Return 408 status code, then 200 after retry
   * @param options The options parameters.
   */
  head408(options?: coreHttp.OperationOptions): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      head408OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 500 status code, then 200 after retry
   * @param options The options parameters.
   */
  put500(options?: coreHttp.OperationOptions): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      put500OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 500 status code, then 200 after retry
   * @param options The options parameters.
   */
  patch500(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      patch500OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 502 status code, then 200 after retry
   * @param options The options parameters.
   */
  get502(options?: coreHttp.OperationOptions): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      get502OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 502 status code, then 200 after retry
   * @param options The options parameters.
   */
  options502(
    options?: coreHttp.OperationOptions
  ): Promise<HttpRetryOptions502Response> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      options502OperationSpec
    ) as Promise<HttpRetryOptions502Response>;
  }

  /**
   * Return 503 status code, then 200 after retry
   * @param options The options parameters.
   */
  post503(options?: coreHttp.OperationOptions): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      post503OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 503 status code, then 200 after retry
   * @param options The options parameters.
   */
  delete503(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      delete503OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 504 status code, then 200 after retry
   * @param options The options parameters.
   */
  put504(options?: coreHttp.OperationOptions): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      put504OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 504 status code, then 200 after retry
   * @param options The options parameters.
   */
  patch504(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      patch504OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const head408OperationSpec: coreHttp.OperationSpec = {
  path: "/http/retry/408",
  httpMethod: "HEAD",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const put500OperationSpec: coreHttp.OperationSpec = {
  path: "/http/retry/500",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const patch500OperationSpec: coreHttp.OperationSpec = {
  path: "/http/retry/500",
  httpMethod: "PATCH",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const get502OperationSpec: coreHttp.OperationSpec = {
  path: "/http/retry/502",
  httpMethod: "GET",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const options502OperationSpec: coreHttp.OperationSpec = {
  path: "/http/retry/502",
  httpMethod: "OPTIONS",
  responses: {
    200: {
      bodyMapper: { type: { name: "Boolean" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const post503OperationSpec: coreHttp.OperationSpec = {
  path: "/http/retry/503",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const delete503OperationSpec: coreHttp.OperationSpec = {
  path: "/http/retry/503",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const put504OperationSpec: coreHttp.OperationSpec = {
  path: "/http/retry/504",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const patch504OperationSpec: coreHttp.OperationSpec = {
  path: "/http/retry/504",
  httpMethod: "PATCH",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
