/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { HttpClientFailure } from "../operationsInterfaces";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HttpInfrastructureClientContext } from "../httpInfrastructureClientContext";
import {
  HttpClientFailureHead400OptionalParams,
  HttpClientFailureGet400OptionalParams,
  HttpClientFailureOptions400OptionalParams,
  HttpClientFailurePut400OptionalParams,
  HttpClientFailurePatch400OptionalParams,
  HttpClientFailurePost400OptionalParams,
  HttpClientFailureDelete400OptionalParams,
  HttpClientFailureHead401OptionalParams,
  HttpClientFailureGet402OptionalParams,
  HttpClientFailureOptions403OptionalParams,
  HttpClientFailureGet403OptionalParams,
  HttpClientFailurePut404OptionalParams,
  HttpClientFailurePatch405OptionalParams,
  HttpClientFailurePost406OptionalParams,
  HttpClientFailureDelete407OptionalParams,
  HttpClientFailurePut409OptionalParams,
  HttpClientFailureHead410OptionalParams,
  HttpClientFailureGet411OptionalParams,
  HttpClientFailureOptions412OptionalParams,
  HttpClientFailureGet412OptionalParams,
  HttpClientFailurePut413OptionalParams,
  HttpClientFailurePatch414OptionalParams,
  HttpClientFailurePost415OptionalParams,
  HttpClientFailureGet416OptionalParams,
  HttpClientFailureDelete417OptionalParams,
  HttpClientFailureHead429OptionalParams
} from "../models";

/** Class representing a HttpClientFailure. */
export class HttpClientFailureImpl implements HttpClientFailure {
  private readonly client: HttpInfrastructureClientContext;

  /**
   * Initialize a new instance of the class HttpClientFailure class.
   * @param client Reference to the service client
   */
  constructor(client: HttpInfrastructureClientContext) {
    this.client = client;
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  head400(
    options?: HttpClientFailureHead400OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      head400OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get400(
    options?: HttpClientFailureGet400OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      get400OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  options400(
    options?: HttpClientFailureOptions400OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      options400OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  put400(
    options?: HttpClientFailurePut400OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      put400OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  patch400(
    options?: HttpClientFailurePatch400OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      patch400OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  post400(
    options?: HttpClientFailurePost400OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      post400OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  delete400(
    options?: HttpClientFailureDelete400OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      delete400OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 401 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  head401(
    options?: HttpClientFailureHead401OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      head401OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 402 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get402(
    options?: HttpClientFailureGet402OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      get402OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 403 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  options403(
    options?: HttpClientFailureOptions403OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      options403OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 403 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get403(
    options?: HttpClientFailureGet403OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      get403OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 404 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  put404(
    options?: HttpClientFailurePut404OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      put404OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 405 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  patch405(
    options?: HttpClientFailurePatch405OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      patch405OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 406 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  post406(
    options?: HttpClientFailurePost406OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      post406OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 407 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  delete407(
    options?: HttpClientFailureDelete407OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      delete407OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 409 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  put409(
    options?: HttpClientFailurePut409OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      put409OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 410 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  head410(
    options?: HttpClientFailureHead410OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      head410OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 411 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get411(
    options?: HttpClientFailureGet411OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      get411OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 412 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  options412(
    options?: HttpClientFailureOptions412OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      options412OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 412 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get412(
    options?: HttpClientFailureGet412OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      get412OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 413 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  put413(
    options?: HttpClientFailurePut413OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      put413OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 414 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  patch414(
    options?: HttpClientFailurePatch414OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      patch414OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 415 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  post415(
    options?: HttpClientFailurePost415OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      post415OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 416 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get416(
    options?: HttpClientFailureGet416OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      get416OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 417 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  delete417(
    options?: HttpClientFailureDelete417OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      delete417OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Return 429 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  head429(
    options?: HttpClientFailureHead429OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      head429OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const head400OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "HEAD",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const get400OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "GET",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const options400OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "OPTIONS",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const put400OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const patch400OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "PATCH",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const post400OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "POST",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const delete400OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "DELETE",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const head401OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/401",
  httpMethod: "HEAD",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const get402OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/402",
  httpMethod: "GET",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const options403OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/403",
  httpMethod: "OPTIONS",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const get403OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/403",
  httpMethod: "GET",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const put404OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/404",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const patch405OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/405",
  httpMethod: "PATCH",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const post406OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/406",
  httpMethod: "POST",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const delete407OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/407",
  httpMethod: "DELETE",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const put409OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/409",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const head410OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/410",
  httpMethod: "HEAD",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const get411OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/411",
  httpMethod: "GET",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const options412OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/412",
  httpMethod: "OPTIONS",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const get412OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/412",
  httpMethod: "GET",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const put413OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/413",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const patch414OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/414",
  httpMethod: "PATCH",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const post415OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/415",
  httpMethod: "POST",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const get416OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/416",
  httpMethod: "GET",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const delete417OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/417",
  httpMethod: "DELETE",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const head429OperationSpec: coreHttp.OperationSpec = {
  path: "/http/failure/client/429",
  httpMethod: "HEAD",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
