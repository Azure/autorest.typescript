/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HeaderClient } from "../headerClient";
import {
  HeaderResponseExistingKeyResponse,
  HeaderResponseProtectedKeyResponse,
  HeaderResponseIntegerResponse,
  HeaderResponseLongResponse,
  HeaderResponseFloatResponse,
  HeaderResponseDoubleResponse,
  HeaderResponseBoolResponse,
  HeaderParamStringOptionalParams,
  HeaderResponseStringResponse,
  HeaderResponseDateResponse,
  HeaderResponseDatetimeResponse,
  HeaderParamDatetimeRfc1123OptionalParams,
  HeaderResponseDatetimeRfc1123Response,
  HeaderResponseDurationResponse,
  HeaderResponseByteResponse,
  HeaderParamEnumOptionalParams,
  HeaderResponseEnumResponse
} from "../models";

/**
 * Class representing a Header.
 */
export class Header {
  private readonly client: HeaderClient;

  /**
   * Initialize a new instance of the class Header class.
   * @param client Reference to the service client
   */
  constructor(client: HeaderClient) {
    this.client = client;
  }

  /**
   * Send a post request with header value "User-Agent": "overwrite"
   * @param userAgent Send a post request with header value "User-Agent": "overwrite"
   * @param options The options parameters.
   */
  paramExistingKey(
    userAgent: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { userAgent, options: operationOptions },
      paramExistingKeyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header value "User-Agent": "overwrite"
   * @param options The options parameters.
   */
  responseExistingKey(
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseExistingKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      responseExistingKeyOperationSpec
    ) as Promise<HeaderResponseExistingKeyResponse>;
  }

  /**
   * Send a post request with header value "Content-Type": "text/html"
   * @param contentType Send a post request with header value "Content-Type": "text/html"
   * @param options The options parameters.
   */
  paramProtectedKey(
    contentType: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { contentType, options: operationOptions },
      paramProtectedKeyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header value "Content-Type": "text/html"
   * @param options The options parameters.
   */
  responseProtectedKey(
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseProtectedKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      responseProtectedKeyOperationSpec
    ) as Promise<HeaderResponseProtectedKeyResponse>;
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 1 or "scenario": "negative",
   * "value": -2
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 1 or -2
   * @param options The options parameters.
   */
  paramInteger(
    scenario: string,
    value: number,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, value, options: operationOptions },
      paramIntegerOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header value "value": 1 or -2
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param options The options parameters.
   */
  responseInteger(
    scenario: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseIntegerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      responseIntegerOperationSpec
    ) as Promise<HeaderResponseIntegerResponse>;
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 105 or "scenario":
   * "negative", "value": -2
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 105 or -2
   * @param options The options parameters.
   */
  paramLong(
    scenario: string,
    value: number,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, value, options: operationOptions },
      paramLongOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header value "value": 105 or -2
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param options The options parameters.
   */
  responseLong(
    scenario: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseLongResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      responseLongOperationSpec
    ) as Promise<HeaderResponseLongResponse>;
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario":
   * "negative", "value": -3.0
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 0.07 or -3.0
   * @param options The options parameters.
   */
  paramFloat(
    scenario: string,
    value: number,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, value, options: operationOptions },
      paramFloatOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header value "value": 0.07 or -3.0
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param options The options parameters.
   */
  responseFloat(
    scenario: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseFloatResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      responseFloatOperationSpec
    ) as Promise<HeaderResponseFloatResponse>;
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario":
   * "negative", "value": -3.0
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 7e120 or -3.0
   * @param options The options parameters.
   */
  paramDouble(
    scenario: string,
    value: number,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, value, options: operationOptions },
      paramDoubleOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header value "value": 7e120 or -3.0
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param options The options parameters.
   */
  responseDouble(
    scenario: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseDoubleResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      responseDoubleOperationSpec
    ) as Promise<HeaderResponseDoubleResponse>;
  }

  /**
   * Send a post request with header values "scenario": "true", "value": true or "scenario": "false",
   * "value": false
   * @param scenario Send a post request with header values "scenario": "true" or "false"
   * @param value Send a post request with header values true or false
   * @param options The options parameters.
   */
  paramBool(
    scenario: string,
    value: boolean,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, value, options: operationOptions },
      paramBoolOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header value "value": true or false
   * @param scenario Send a post request with header values "scenario": "true" or "false"
   * @param options The options parameters.
   */
  responseBool(
    scenario: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseBoolResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      responseBoolOperationSpec
    ) as Promise<HeaderResponseBoolResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps over
   * the lazy dog" or "scenario": "null", "value": null or "scenario": "empty", "value": ""
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param options The options parameters.
   */
  paramString(
    scenario: string,
    options?: HeaderParamStringOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      paramStringOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header values "The quick brown fox jumps over the lazy dog" or null or ""
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param options The options parameters.
   */
  responseString(
    scenario: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseStringResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      responseStringOperationSpec
    ) as Promise<HeaderResponseStringResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "2010-01-01" or "scenario":
   * "min", "value": "0001-01-01"
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param value Send a post request with header values "2010-01-01" or "0001-01-01"
   * @param options The options parameters.
   */
  paramDate(
    scenario: string,
    value: Date,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, value, options: operationOptions },
      paramDateOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header values "2010-01-01" or "0001-01-01"
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param options The options parameters.
   */
  responseDate(
    scenario: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseDateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      responseDateOperationSpec
    ) as Promise<HeaderResponseDateResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or
   * "scenario": "min", "value": "0001-01-01T00:00:00Z"
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param value Send a post request with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
   * @param options The options parameters.
   */
  paramDatetime(
    scenario: string,
    value: Date,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, value, options: operationOptions },
      paramDatetimeOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param options The options parameters.
   */
  responseDatetime(
    scenario: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseDatetimeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      responseDatetimeOperationSpec
    ) as Promise<HeaderResponseDatetimeResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "Wed, 01 Jan 2010 12:34:56 GMT"
   * or "scenario": "min", "value": "Mon, 01 Jan 0001 00:00:00 GMT"
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param options The options parameters.
   */
  paramDatetimeRfc1123(
    scenario: string,
    options?: HeaderParamDatetimeRfc1123OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      paramDatetimeRfc1123OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param options The options parameters.
   */
  responseDatetimeRfc1123(
    scenario: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseDatetimeRfc1123Response> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      responseDatetimeRfc1123OperationSpec
    ) as Promise<HeaderResponseDatetimeRfc1123Response>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "P123DT22H14M12.011S"
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param value Send a post request with header values "P123DT22H14M12.011S"
   * @param options The options parameters.
   */
  paramDuration(
    scenario: string,
    value: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, value, options: operationOptions },
      paramDurationOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header values "P123DT22H14M12.011S"
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param options The options parameters.
   */
  responseDuration(
    scenario: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseDurationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      responseDurationOperationSpec
    ) as Promise<HeaderResponseDurationResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩"
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param value Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
   * @param options The options parameters.
   */
  paramByte(
    scenario: string,
    value: Uint8Array,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, value, options: operationOptions },
      paramByteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param options The options parameters.
   */
  responseByte(
    scenario: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseByteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      responseByteOperationSpec
    ) as Promise<HeaderResponseByteResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario": "null",
   * "value": null
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param options The options parameters.
   */
  paramEnum(
    scenario: string,
    options?: HeaderParamEnumOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      paramEnumOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a response with header values "GREY" or null
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param options The options parameters.
   */
  responseEnum(
    scenario: string,
    options?: coreHttp.OperationOptions
  ): Promise<HeaderResponseEnumResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scenario, options: operationOptions },
      responseEnumOperationSpec
    ) as Promise<HeaderResponseEnumResponse>;
  }

  /**
   * Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
   * @param options The options parameters.
   */
  customRequestId(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      customRequestIdOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const paramExistingKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/existingkey",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.userAgent],
  serializer
};
const responseExistingKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/existingkey",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseExistingKeyHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const paramProtectedKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/protectedkey",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const responseProtectedKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/protectedkey",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseProtectedKeyHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const paramIntegerOperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/prim/integer",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario, Parameters.value],
  serializer
};
const responseIntegerOperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/prim/integer",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseIntegerHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario],
  serializer
};
const paramLongOperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/prim/long",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario, Parameters.value1],
  serializer
};
const responseLongOperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/prim/long",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseLongHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario],
  serializer
};
const paramFloatOperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/prim/float",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario, Parameters.value2],
  serializer
};
const responseFloatOperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/prim/float",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseFloatHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario],
  serializer
};
const paramDoubleOperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/prim/double",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario, Parameters.value3],
  serializer
};
const responseDoubleOperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/prim/double",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDoubleHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario],
  serializer
};
const paramBoolOperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/prim/bool",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario1, Parameters.value4],
  serializer
};
const responseBoolOperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/prim/bool",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseBoolHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario1],
  serializer
};
const paramStringOperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/prim/string",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario2, Parameters.value5],
  serializer
};
const responseStringOperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/prim/string",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseStringHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario2],
  serializer
};
const paramDateOperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/prim/date",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario3, Parameters.value6],
  serializer
};
const responseDateOperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/prim/date",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario3],
  serializer
};
const paramDatetimeOperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/prim/datetime",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario3, Parameters.value7],
  serializer
};
const responseDatetimeOperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/prim/datetime",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDatetimeHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario3],
  serializer
};
const paramDatetimeRfc1123OperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/prim/datetimerfc1123",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario3, Parameters.value8],
  serializer
};
const responseDatetimeRfc1123OperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/prim/datetimerfc1123",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDatetimeRfc1123Headers
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario3],
  serializer
};
const paramDurationOperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/prim/duration",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario4, Parameters.value9],
  serializer
};
const responseDurationOperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/prim/duration",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDurationHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario4],
  serializer
};
const paramByteOperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/prim/byte",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario4, Parameters.value10],
  serializer
};
const responseByteOperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/prim/byte",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseByteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario4],
  serializer
};
const paramEnumOperationSpec: coreHttp.OperationSpec = {
  path: "/header/param/prim/enum",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario2, Parameters.value11],
  serializer
};
const responseEnumOperationSpec: coreHttp.OperationSpec = {
  path: "/header/response/prim/enum",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseEnumHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.scenario2],
  serializer
};
const customRequestIdOperationSpec: coreHttp.OperationSpec = {
  path:
    "/header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
