/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationURLParameter,
  OperationParameter,
  OperationQueryParameter
} from "@azure/core-http";
import {
  RootWithRefAndNoMeta as RootWithRefAndNoMetaMapper,
  RootWithRefAndMeta as RootWithRefAndMetaMapper,
  Slideshow as SlideshowMapper,
  AppleBarrel as AppleBarrelMapper,
  Banana as BananaMapper,
  StorageServiceProperties as StorageServicePropertiesMapper,
  JsonInput as JsonInputMapper
} from "../models/mappers";

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    xmlName: "$host",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const model: OperationParameter = {
  parameterPath: "model",
  mapper: RootWithRefAndNoMetaMapper
};

export const model1: OperationParameter = {
  parameterPath: "model",
  mapper: RootWithRefAndMetaMapper
};

export const slideshow: OperationParameter = {
  parameterPath: "slideshow",
  mapper: SlideshowMapper
};

export const wrappedLists: OperationParameter = {
  parameterPath: "wrappedLists",
  mapper: AppleBarrelMapper
};

export const appleBarrel: OperationParameter = {
  parameterPath: "appleBarrel",
  mapper: AppleBarrelMapper
};

export const bananas: OperationParameter = {
  parameterPath: "bananas",
  mapper: {
    serializedName: "bananas",
    required: true,
    xmlName: "bananas",
    xmlIsWrapped: true,
    xmlElementName: "banana",
    type: {
      name: "Sequence",
      element: { type: { name: "Composite", className: "Banana" } }
    }
  }
};

export const banana: OperationParameter = {
  parameterPath: "banana",
  mapper: BananaMapper
};

export const comp: OperationQueryParameter = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "list",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};

export const comp1: OperationQueryParameter = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "properties",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};

export const restype: OperationQueryParameter = {
  parameterPath: "restype",
  mapper: {
    defaultValue: "service",
    isConstant: true,
    serializedName: "restype",
    type: {
      name: "String"
    }
  }
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: StorageServicePropertiesMapper
};

export const comp2: OperationQueryParameter = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "acl",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};

export const restype1: OperationQueryParameter = {
  parameterPath: "restype",
  mapper: {
    defaultValue: "container",
    isConstant: true,
    serializedName: "restype",
    type: {
      name: "String"
    }
  }
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: {
    serializedName: "properties",
    required: true,
    xmlName: "SignedIdentifiers",
    xmlIsWrapped: true,
    xmlElementName: "SignedIdentifier",
    type: {
      name: "Sequence",
      element: { type: { name: "Composite", className: "SignedIdentifier" } }
    }
  }
};

export const contentType1: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const properties2: OperationParameter = {
  parameterPath: "properties",
  mapper: JsonInputMapper
};
