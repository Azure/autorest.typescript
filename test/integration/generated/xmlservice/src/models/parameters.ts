/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    xmlName: "$host",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const model: coreHttp.OperationParameter = {
  parameterPath: "model",
  mapper: Mappers.RootWithRefAndNoMeta
};

export const model1: coreHttp.OperationParameter = {
  parameterPath: "model",
  mapper: Mappers.RootWithRefAndMeta
};

export const slideshow: coreHttp.OperationParameter = {
  parameterPath: "slideshow",
  mapper: Mappers.Slideshow
};

export const wrappedLists: coreHttp.OperationParameter = {
  parameterPath: "wrappedLists",
  mapper: Mappers.AppleBarrel
};

export const appleBarrel: coreHttp.OperationParameter = {
  parameterPath: "appleBarrel",
  mapper: Mappers.AppleBarrel
};

export const bananas: coreHttp.OperationParameter = {
  parameterPath: "bananas",
  mapper: {
    serializedName: "bananas",
    required: true,
    xmlName: "bananas",
    xmlIsWrapped: true,
    xmlElementName: "banana",
    type: {
      name: "Sequence",
      element: { type: { name: "Composite", className: "Banana" } }
    }
  }
};

export const banana: coreHttp.OperationParameter = {
  parameterPath: "banana",
  mapper: Mappers.Banana
};

export const comp: coreHttp.OperationQueryParameter = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "list",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};

export const comp1: coreHttp.OperationQueryParameter = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "properties",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};

export const restype: coreHttp.OperationQueryParameter = {
  parameterPath: "restype",
  mapper: {
    defaultValue: "service",
    isConstant: true,
    serializedName: "restype",
    type: {
      name: "String"
    }
  }
};

export const properties: coreHttp.OperationParameter = {
  parameterPath: "properties",
  mapper: Mappers.StorageServiceProperties
};

export const comp2: coreHttp.OperationQueryParameter = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "acl",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};

export const restype1: coreHttp.OperationQueryParameter = {
  parameterPath: "restype",
  mapper: {
    defaultValue: "container",
    isConstant: true,
    serializedName: "restype",
    type: {
      name: "String"
    }
  }
};

export const properties1: coreHttp.OperationParameter = {
  parameterPath: "properties",
  mapper: {
    serializedName: "properties",
    required: true,
    xmlName: "SignedIdentifiers",
    xmlIsWrapped: true,
    xmlElementName: "SignedIdentifier",
    type: {
      name: "Sequence",
      element: { type: { name: "Composite", className: "SignedIdentifier" } }
    }
  }
};

export const contentType1: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const properties2: coreHttp.OperationParameter = {
  parameterPath: "properties",
  mapper: Mappers.JsonInput
};
