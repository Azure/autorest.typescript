/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { createSpan } from "../tracing";
import { Primitive } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as coreTracing from "@azure/core-tracing";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BodyComplexWithTracingContext } from "../bodyComplexWithTracingContext";
import {
  PrimitiveGetIntOptionalParams,
  PrimitiveGetIntResponse,
  IntWrapper,
  PrimitivePutIntOptionalParams,
  PrimitiveGetLongOptionalParams,
  PrimitiveGetLongResponse,
  LongWrapper,
  PrimitivePutLongOptionalParams,
  PrimitiveGetFloatOptionalParams,
  PrimitiveGetFloatResponse,
  FloatWrapper,
  PrimitivePutFloatOptionalParams,
  PrimitiveGetDoubleOptionalParams,
  PrimitiveGetDoubleResponse,
  DoubleWrapper,
  PrimitivePutDoubleOptionalParams,
  PrimitiveGetBoolOptionalParams,
  PrimitiveGetBoolResponse,
  BooleanWrapper,
  PrimitivePutBoolOptionalParams,
  PrimitiveGetStringOptionalParams,
  PrimitiveGetStringResponse,
  StringWrapper,
  PrimitivePutStringOptionalParams,
  PrimitiveGetDateOptionalParams,
  PrimitiveGetDateResponse,
  DateWrapper,
  PrimitivePutDateOptionalParams,
  PrimitiveGetDateTimeOptionalParams,
  PrimitiveGetDateTimeResponse,
  DatetimeWrapper,
  PrimitivePutDateTimeOptionalParams,
  PrimitiveGetDateTimeRfc1123OptionalParams,
  PrimitiveGetDateTimeRfc1123Response,
  Datetimerfc1123Wrapper,
  PrimitivePutDateTimeRfc1123OptionalParams,
  PrimitiveGetDurationOptionalParams,
  PrimitiveGetDurationResponse,
  DurationWrapper,
  PrimitivePutDurationOptionalParams,
  PrimitiveGetByteOptionalParams,
  PrimitiveGetByteResponse,
  ByteWrapper,
  PrimitivePutByteOptionalParams
} from "../models";

/** Class containing Primitive operations. */
export class PrimitiveImpl implements Primitive {
  private readonly client: BodyComplexWithTracingContext;

  /**
   * Initialize a new instance of the class Primitive class.
   * @param client Reference to the service client
   */
  constructor(client: BodyComplexWithTracingContext) {
    this.client = client;
  }

  /**
   * Get complex types with integer properties
   * @param options The options parameters.
   */
  async getInt(
    options?: PrimitiveGetIntOptionalParams
  ): Promise<PrimitiveGetIntResponse> {
    const { span } = createSpan("BodyComplexWithTracing-getInt", options || {});
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getIntOperationSpec
      );
      return result as PrimitiveGetIntResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Put complex types with integer properties
   * @param complexBody Please put -1 and 2
   * @param options The options parameters.
   */
  async putInt(
    complexBody: IntWrapper,
    options?: PrimitivePutIntOptionalParams
  ): Promise<void> {
    const { span } = createSpan("BodyComplexWithTracing-putInt", options || {});
    try {
      const result = await this.client.sendOperationRequest(
        { complexBody, options },
        putIntOperationSpec
      );
      return result as void;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Get complex types with long properties
   * @param options The options parameters.
   */
  async getLong(
    options?: PrimitiveGetLongOptionalParams
  ): Promise<PrimitiveGetLongResponse> {
    const { span } = createSpan(
      "BodyComplexWithTracing-getLong",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getLongOperationSpec
      );
      return result as PrimitiveGetLongResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Put complex types with long properties
   * @param complexBody Please put 1099511627775 and -999511627788
   * @param options The options parameters.
   */
  async putLong(
    complexBody: LongWrapper,
    options?: PrimitivePutLongOptionalParams
  ): Promise<void> {
    const { span } = createSpan(
      "BodyComplexWithTracing-putLong",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { complexBody, options },
        putLongOperationSpec
      );
      return result as void;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Get complex types with float properties
   * @param options The options parameters.
   */
  async getFloat(
    options?: PrimitiveGetFloatOptionalParams
  ): Promise<PrimitiveGetFloatResponse> {
    const { span } = createSpan(
      "BodyComplexWithTracing-getFloat",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getFloatOperationSpec
      );
      return result as PrimitiveGetFloatResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Put complex types with float properties
   * @param complexBody Please put 1.05 and -0.003
   * @param options The options parameters.
   */
  async putFloat(
    complexBody: FloatWrapper,
    options?: PrimitivePutFloatOptionalParams
  ): Promise<void> {
    const { span } = createSpan(
      "BodyComplexWithTracing-putFloat",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { complexBody, options },
        putFloatOperationSpec
      );
      return result as void;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Get complex types with double properties
   * @param options The options parameters.
   */
  async getDouble(
    options?: PrimitiveGetDoubleOptionalParams
  ): Promise<PrimitiveGetDoubleResponse> {
    const { span } = createSpan(
      "BodyComplexWithTracing-getDouble",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getDoubleOperationSpec
      );
      return result as PrimitiveGetDoubleResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Put complex types with double properties
   * @param complexBody Please put 3e-100 and
   *                    -0.000000000000000000000000000000000000000000000000000000005
   * @param options The options parameters.
   */
  async putDouble(
    complexBody: DoubleWrapper,
    options?: PrimitivePutDoubleOptionalParams
  ): Promise<void> {
    const { span } = createSpan(
      "BodyComplexWithTracing-putDouble",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { complexBody, options },
        putDoubleOperationSpec
      );
      return result as void;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Get complex types with bool properties
   * @param options The options parameters.
   */
  async getBool(
    options?: PrimitiveGetBoolOptionalParams
  ): Promise<PrimitiveGetBoolResponse> {
    const { span } = createSpan(
      "BodyComplexWithTracing-getBool",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getBoolOperationSpec
      );
      return result as PrimitiveGetBoolResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Put complex types with bool properties
   * @param complexBody Please put true and false
   * @param options The options parameters.
   */
  async putBool(
    complexBody: BooleanWrapper,
    options?: PrimitivePutBoolOptionalParams
  ): Promise<void> {
    const { span } = createSpan(
      "BodyComplexWithTracing-putBool",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { complexBody, options },
        putBoolOperationSpec
      );
      return result as void;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Get complex types with string properties
   * @param options The options parameters.
   */
  async getString(
    options?: PrimitiveGetStringOptionalParams
  ): Promise<PrimitiveGetStringResponse> {
    const { span } = createSpan(
      "BodyComplexWithTracing-getString",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getStringOperationSpec
      );
      return result as PrimitiveGetStringResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Put complex types with string properties
   * @param complexBody Please put 'goodrequest', '', and null
   * @param options The options parameters.
   */
  async putString(
    complexBody: StringWrapper,
    options?: PrimitivePutStringOptionalParams
  ): Promise<void> {
    const { span } = createSpan(
      "BodyComplexWithTracing-putString",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { complexBody, options },
        putStringOperationSpec
      );
      return result as void;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Get complex types with date properties
   * @param options The options parameters.
   */
  async getDate(
    options?: PrimitiveGetDateOptionalParams
  ): Promise<PrimitiveGetDateResponse> {
    const { span } = createSpan(
      "BodyComplexWithTracing-getDate",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getDateOperationSpec
      );
      return result as PrimitiveGetDateResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Put complex types with date properties
   * @param complexBody Please put '0001-01-01' and '2016-02-29'
   * @param options The options parameters.
   */
  async putDate(
    complexBody: DateWrapper,
    options?: PrimitivePutDateOptionalParams
  ): Promise<void> {
    const { span } = createSpan(
      "BodyComplexWithTracing-putDate",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { complexBody, options },
        putDateOperationSpec
      );
      return result as void;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Get complex types with datetime properties
   * @param options The options parameters.
   */
  async getDateTime(
    options?: PrimitiveGetDateTimeOptionalParams
  ): Promise<PrimitiveGetDateTimeResponse> {
    const { span } = createSpan(
      "BodyComplexWithTracing-getDateTime",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getDateTimeOperationSpec
      );
      return result as PrimitiveGetDateTimeResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Put complex types with datetime properties
   * @param complexBody Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
   * @param options The options parameters.
   */
  async putDateTime(
    complexBody: DatetimeWrapper,
    options?: PrimitivePutDateTimeOptionalParams
  ): Promise<void> {
    const { span } = createSpan(
      "BodyComplexWithTracing-putDateTime",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { complexBody, options },
        putDateTimeOperationSpec
      );
      return result as void;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Get complex types with datetimeRfc1123 properties
   * @param options The options parameters.
   */
  async getDateTimeRfc1123(
    options?: PrimitiveGetDateTimeRfc1123OptionalParams
  ): Promise<PrimitiveGetDateTimeRfc1123Response> {
    const { span } = createSpan(
      "BodyComplexWithTracing-getDateTimeRfc1123",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getDateTimeRfc1123OperationSpec
      );
      return result as PrimitiveGetDateTimeRfc1123Response;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Put complex types with datetimeRfc1123 properties
   * @param complexBody Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
   * @param options The options parameters.
   */
  async putDateTimeRfc1123(
    complexBody: Datetimerfc1123Wrapper,
    options?: PrimitivePutDateTimeRfc1123OptionalParams
  ): Promise<void> {
    const { span } = createSpan(
      "BodyComplexWithTracing-putDateTimeRfc1123",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { complexBody, options },
        putDateTimeRfc1123OperationSpec
      );
      return result as void;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Get complex types with duration properties
   * @param options The options parameters.
   */
  async getDuration(
    options?: PrimitiveGetDurationOptionalParams
  ): Promise<PrimitiveGetDurationResponse> {
    const { span } = createSpan(
      "BodyComplexWithTracing-getDuration",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getDurationOperationSpec
      );
      return result as PrimitiveGetDurationResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Put complex types with duration properties
   * @param complexBody Please put 'P123DT22H14M12.011S'
   * @param options The options parameters.
   */
  async putDuration(
    complexBody: DurationWrapper,
    options?: PrimitivePutDurationOptionalParams
  ): Promise<void> {
    const { span } = createSpan(
      "BodyComplexWithTracing-putDuration",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { complexBody, options },
        putDurationOperationSpec
      );
      return result as void;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Get complex types with byte properties
   * @param options The options parameters.
   */
  async getByte(
    options?: PrimitiveGetByteOptionalParams
  ): Promise<PrimitiveGetByteResponse> {
    const { span } = createSpan(
      "BodyComplexWithTracing-getByte",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getByteOperationSpec
      );
      return result as PrimitiveGetByteResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Put complex types with byte properties
   * @param complexBody Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
   * @param options The options parameters.
   */
  async putByte(
    complexBody: ByteWrapper,
    options?: PrimitivePutByteOptionalParams
  ): Promise<void> {
    const { span } = createSpan(
      "BodyComplexWithTracing-putByte",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { complexBody, options },
        putByteOperationSpec
      );
      return result as void;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getIntOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/integer",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putIntOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/integer",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getLongOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/long",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putLongOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/long",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getFloatOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/float",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FloatWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putFloatOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/float",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody3,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDoubleOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/double",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DoubleWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDoubleOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/double",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody4,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getBoolOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/bool",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BooleanWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putBoolOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/bool",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody5,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getStringOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/string",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StringWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putStringOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/string",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody6,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDateOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/date",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DateWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDateOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/date",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody7,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDateTimeOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/datetime",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DatetimeWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDateTimeOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/datetime",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody8,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDateTimeRfc1123OperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/datetimerfc1123",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Datetimerfc1123Wrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDateTimeRfc1123OperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/datetimerfc1123",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody9,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDurationOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/duration",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DurationWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDurationOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/duration",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody10,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getByteOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/byte",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ByteWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putByteOperationSpec: coreClient.OperationSpec = {
  path: "/complex/primitive/byte",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody11,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
