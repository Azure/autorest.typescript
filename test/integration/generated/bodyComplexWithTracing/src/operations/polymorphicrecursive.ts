/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { Polymorphicrecursive } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BodyComplexWithTracing } from "../bodyComplexWithTracing";
import {
  PolymorphicrecursiveGetValidOptionalParams,
  PolymorphicrecursiveGetValidResponse,
  FishUnion,
  PolymorphicrecursivePutValidOptionalParams
} from "../models";

/** Class containing Polymorphicrecursive operations. */
export class PolymorphicrecursiveImpl implements Polymorphicrecursive {
  private readonly client: BodyComplexWithTracing;

  /**
   * Initialize a new instance of the class Polymorphicrecursive class.
   * @param client Reference to the service client
   */
  constructor(client: BodyComplexWithTracing) {
    this.client = client;
  }

  /**
   * Get complex types that are polymorphic and have recursive references
   * @param options The options parameters.
   */
  async getValid(
    options?: PolymorphicrecursiveGetValidOptionalParams
  ): Promise<PolymorphicrecursiveGetValidResponse> {
    return tracingClient.withSpan(
      "BodyComplexWithTracing.getValid",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getValidOperationSpec
        ) as Promise<PolymorphicrecursiveGetValidResponse>;
      }
    );
  }

  /**
   * Put complex types that are polymorphic and have recursive references
   * @param complexBody Please put a salmon that looks like this:
   *                    {
   *                        "fishtype": "salmon",
   *                        "species": "king",
   *                        "length": 1,
   *                        "age": 1,
   *                        "location": "alaska",
   *                        "iswild": true,
   *                        "siblings": [
   *                            {
   *                                "fishtype": "shark",
   *                                "species": "predator",
   *                                "length": 20,
   *                                "age": 6,
   *                                "siblings": [
   *                                    {
   *                                        "fishtype": "salmon",
   *                                        "species": "coho",
   *                                        "length": 2,
   *                                        "age": 2,
   *                                        "location": "atlantic",
   *                                        "iswild": true,
   *                                        "siblings": [
   *                                            {
   *                                                "fishtype": "shark",
   *                                                "species": "predator",
   *                                                "length": 20,
   *                                                "age": 6
   *                                            },
   *                                            {
   *                                                "fishtype": "sawshark",
   *                                                "species": "dangerous",
   *                                                "length": 10,
   *                                                "age": 105
   *                                            }
   *                                        ]
   *                                    },
   *                                    {
   *                                        "fishtype": "sawshark",
   *                                        "species": "dangerous",
   *                                        "length": 10,
   *                                        "age": 105
   *                                    }
   *                                ]
   *                            },
   *                            {
   *                                "fishtype": "sawshark",
   *                                "species": "dangerous",
   *                                "length": 10,
   *                                "age": 105
   *                            }
   *                        ]
   *                    }
   * @param options The options parameters.
   */
  async putValid(
    complexBody: FishUnion,
    options?: PolymorphicrecursivePutValidOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "BodyComplexWithTracing.putValid",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { complexBody, options },
          putValidOperationSpec
        ) as Promise<void>;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getValidOperationSpec: coreClient.OperationSpec = {
  path: "/complex/polymorphicrecursive/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Fish
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putValidOperationSpec: coreClient.OperationSpec = {
  path: "/complex/polymorphicrecursive/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody15,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
