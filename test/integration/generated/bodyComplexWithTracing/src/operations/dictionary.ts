/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { Dictionary } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BodyComplexWithTracing } from "../bodyComplexWithTracing";
import {
  DictionaryGetValidOptionalParams,
  DictionaryGetValidResponse,
  DictionaryWrapper,
  DictionaryPutValidOptionalParams,
  DictionaryGetEmptyOptionalParams,
  DictionaryGetEmptyResponse,
  DictionaryPutEmptyOptionalParams,
  DictionaryGetNullOptionalParams,
  DictionaryGetNullResponse,
  DictionaryGetNotProvidedOptionalParams,
  DictionaryGetNotProvidedResponse
} from "../models";

/** Class containing Dictionary operations. */
export class DictionaryImpl implements Dictionary {
  private readonly client: BodyComplexWithTracing;

  /**
   * Initialize a new instance of the class Dictionary class.
   * @param client Reference to the service client
   */
  constructor(client: BodyComplexWithTracing) {
    this.client = client;
  }

  /**
   * Get complex types with dictionary property
   * @param options The options parameters.
   */
  async getValid(
    options?: DictionaryGetValidOptionalParams
  ): Promise<DictionaryGetValidResponse> {
    return tracingClient.withSpan(
      "BodyComplexWithTracing.getValid",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getValidOperationSpec
        ) as Promise<DictionaryGetValidResponse>;
      }
    );
  }

  /**
   * Put complex types with dictionary property
   * @param complexBody Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint",
   *                    "xls":"excel", "exe":"", "":null
   * @param options The options parameters.
   */
  async putValid(
    complexBody: DictionaryWrapper,
    options?: DictionaryPutValidOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "BodyComplexWithTracing.putValid",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { complexBody, options },
          putValidOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * Get complex types with dictionary property which is empty
   * @param options The options parameters.
   */
  async getEmpty(
    options?: DictionaryGetEmptyOptionalParams
  ): Promise<DictionaryGetEmptyResponse> {
    return tracingClient.withSpan(
      "BodyComplexWithTracing.getEmpty",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getEmptyOperationSpec
        ) as Promise<DictionaryGetEmptyResponse>;
      }
    );
  }

  /**
   * Put complex types with dictionary property which is empty
   * @param complexBody Please put an empty dictionary
   * @param options The options parameters.
   */
  async putEmpty(
    complexBody: DictionaryWrapper,
    options?: DictionaryPutEmptyOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "BodyComplexWithTracing.putEmpty",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { complexBody, options },
          putEmptyOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * Get complex types with dictionary property which is null
   * @param options The options parameters.
   */
  async getNull(
    options?: DictionaryGetNullOptionalParams
  ): Promise<DictionaryGetNullResponse> {
    return tracingClient.withSpan(
      "BodyComplexWithTracing.getNull",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getNullOperationSpec
        ) as Promise<DictionaryGetNullResponse>;
      }
    );
  }

  /**
   * Get complex types with dictionary property while server doesn't provide a response payload
   * @param options The options parameters.
   */
  async getNotProvided(
    options?: DictionaryGetNotProvidedOptionalParams
  ): Promise<DictionaryGetNotProvidedResponse> {
    return tracingClient.withSpan(
      "BodyComplexWithTracing.getNotProvided",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getNotProvidedOperationSpec
        ) as Promise<DictionaryGetNotProvidedResponse>;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getValidOperationSpec: coreClient.OperationSpec = {
  path: "/complex/dictionary/typed/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DictionaryWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putValidOperationSpec: coreClient.OperationSpec = {
  path: "/complex/dictionary/typed/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody13,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/complex/dictionary/typed/empty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DictionaryWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/complex/dictionary/typed/empty",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody13,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getNullOperationSpec: coreClient.OperationSpec = {
  path: "/complex/dictionary/typed/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DictionaryWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getNotProvidedOperationSpec: coreClient.OperationSpec = {
  path: "/complex/dictionary/typed/notprovided",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DictionaryWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
