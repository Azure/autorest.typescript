/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Blob } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EnumValuesClientContext } from "../enumValuesClientContext";
import {
  CpkInfo,
  BlobDownloadOptionalParams,
  BlobDownloadResponse
} from "../models";

/** Class containing Blob operations. */
export class BlobImpl implements Blob {
  private readonly client: EnumValuesClientContext;

  /**
   * Initialize a new instance of the class Blob class.
   * @param client Reference to the service client
   */
  constructor(client: EnumValuesClientContext) {
    this.client = client;
  }

  /**
   * The Download operation reads or downloads a blob from the system, including its metadata and
   * properties. You can also call Download to read a snapshot.
   * @param cpkInfo Parameter group
   * @param options The options parameters.
   */
  download(
    cpkInfo: CpkInfo,
    options?: BlobDownloadOptionalParams
  ): Promise<BlobDownloadResponse> {
    return this.client.sendOperationRequest(
      { cpkInfo, options },
      downloadOperationSpec
    );
  }
}
// Operation Specifications
const xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);

const downloadOperationSpec: coreClient.OperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.BlobDownloadHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobDownloadExceptionHeaders
    }
  },
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.accept,
    Parameters.encryptionAlgorithm,
    Parameters.encryptionAlgorithmWithTwoValues,
    Parameters.encryptionAlgorithmRequired,
    Parameters.encryptionAlgorithmRequiredWithTwoValues
  ],
  isXML: true,
  serializer: xmlSerializer
};
