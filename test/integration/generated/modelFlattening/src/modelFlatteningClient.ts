/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { ModelFlatteningClientContext } from "./modelFlatteningClientContext";
import {
  ModelFlatteningClientPutArrayOptionalParams,
  ModelFlatteningClientGetArrayResponse,
  ModelFlatteningClientPutWrappedArrayOptionalParams,
  ModelFlatteningClientGetWrappedArrayResponse,
  ModelFlatteningClientPutDictionaryOptionalParams,
  ModelFlatteningClientGetDictionaryResponse,
  ModelFlatteningClientPutResourceCollectionOptionalParams,
  ModelFlatteningClientGetResourceCollectionResponse,
  ModelFlatteningClientPutSimpleProductResponse,
  ModelFlatteningClientPutSimpleProductOptionalParams,
  ModelFlatteningClientPostFlattenedSimpleProductResponse,
  ModelFlatteningClientPostFlattenedSimpleProductOptionalParams,
  ModelFlatteningClientPutSimpleProductWithGroupingResponse,
  ModelFlatteningClientPutSimpleProductWithGroupingOptionalParams
} from "./models";

class ModelFlatteningClient extends ModelFlatteningClientContext {
  /**
   * Initializes a new instance of the ModelFlatteningClient class.
   * @param options The parameter options
   */
  constructor(options?: Models.ModelFlatteningClientOptionalParams) {
    super(options);
  }

  /**
   * Put External Resource as an Array
   * @param options The options parameters.
   */
  putArray(
    options?: ModelFlatteningClientPutArrayOptionalParams
  ): Promise<coreHttp.RestResponse> {
    return this.sendOperationRequest(
      { options },
      putArrayOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get External Resource as an Array
   * @param options The options parameters.
   */
  getArray(
    options?: coreHttp.OperationOptions
  ): Promise<ModelFlatteningClientGetArrayResponse> {
    return this.sendOperationRequest(
      { options },
      getArrayOperationSpec
    ) as Promise<ModelFlatteningClientGetArrayResponse>;
  }

  /**
   * No need to have a route in Express server for this operation. Used to verify the type flattened is
   * not removed if it's referenced in an array
   * @param options The options parameters.
   */
  putWrappedArray(
    options?: ModelFlatteningClientPutWrappedArrayOptionalParams
  ): Promise<coreHttp.RestResponse> {
    return this.sendOperationRequest(
      { options },
      putWrappedArrayOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * No need to have a route in Express server for this operation. Used to verify the type flattened is
   * not removed if it's referenced in an array
   * @param options The options parameters.
   */
  getWrappedArray(
    options?: coreHttp.OperationOptions
  ): Promise<ModelFlatteningClientGetWrappedArrayResponse> {
    return this.sendOperationRequest(
      { options },
      getWrappedArrayOperationSpec
    ) as Promise<ModelFlatteningClientGetWrappedArrayResponse>;
  }

  /**
   * Put External Resource as a Dictionary
   * @param options The options parameters.
   */
  putDictionary(
    options?: ModelFlatteningClientPutDictionaryOptionalParams
  ): Promise<coreHttp.RestResponse> {
    return this.sendOperationRequest(
      { options },
      putDictionaryOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get External Resource as a Dictionary
   * @param options The options parameters.
   */
  getDictionary(
    options?: coreHttp.OperationOptions
  ): Promise<ModelFlatteningClientGetDictionaryResponse> {
    return this.sendOperationRequest(
      { options },
      getDictionaryOperationSpec
    ) as Promise<ModelFlatteningClientGetDictionaryResponse>;
  }

  /**
   * Put External Resource as a ResourceCollection
   * @param options The options parameters.
   */
  putResourceCollection(
    options?: ModelFlatteningClientPutResourceCollectionOptionalParams
  ): Promise<coreHttp.RestResponse> {
    return this.sendOperationRequest(
      { options },
      putResourceCollectionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get External Resource as a ResourceCollection
   * @param options The options parameters.
   */
  getResourceCollection(
    options?: coreHttp.OperationOptions
  ): Promise<ModelFlatteningClientGetResourceCollectionResponse> {
    return this.sendOperationRequest(
      { options },
      getResourceCollectionOperationSpec
    ) as Promise<ModelFlatteningClientGetResourceCollectionResponse>;
  }

  /**
   * Put Simple Product with client flattening true on the model
   * @param options The options parameters.
   */
  putSimpleProduct(
    options?: ModelFlatteningClientPutSimpleProductOptionalParams
  ): Promise<ModelFlatteningClientPutSimpleProductResponse> {
    return this.sendOperationRequest(
      { options },
      putSimpleProductOperationSpec
    ) as Promise<ModelFlatteningClientPutSimpleProductResponse>;
  }

  /**
   * Put Flattened Simple Product with client flattening true on the parameter
   * @param options The options parameters.
   */
  postFlattenedSimpleProduct(
    options?: ModelFlatteningClientPostFlattenedSimpleProductOptionalParams
  ): Promise<ModelFlatteningClientPostFlattenedSimpleProductResponse> {
    return this.sendOperationRequest(
      { options },
      postFlattenedSimpleProductOperationSpec
    ) as Promise<ModelFlatteningClientPostFlattenedSimpleProductResponse>;
  }

  /**
   * Put Simple Product with client flattening true on the model
   * @param name Product name with value 'groupproduct'
   * @param options The options parameters.
   */
  putSimpleProductWithGrouping(
    name: string,
    options?: ModelFlatteningClientPutSimpleProductWithGroupingOptionalParams
  ): Promise<ModelFlatteningClientPutSimpleProductWithGroupingResponse> {
    return this.sendOperationRequest(
      { name, options },
      putSimpleProductWithGroupingOperationSpec
    ) as Promise<ModelFlatteningClientPutSimpleProductWithGroupingResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const putArrayOperationSpec: coreHttp.OperationSpec = {
  path: "/model-flatten/array",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.resourceArray,
  urlParameters: [Parameters.$host],
  serializer
};
const getArrayOperationSpec: coreHttp.OperationSpec = {
  path: "/model-flatten/array",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "FlattenedProduct" }
          }
        },
        serializedName: "ArrayOfFlattenedProduct"
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putWrappedArrayOperationSpec: coreHttp.OperationSpec = {
  path: "/model-flatten/wrappedarray",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.resourceArray1,
  urlParameters: [Parameters.$host],
  serializer
};
const getWrappedArrayOperationSpec: coreHttp.OperationSpec = {
  path: "/model-flatten/wrappedarray",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ProductWrapper" } }
        },
        serializedName: "ArrayOfProductWrapper"
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putDictionaryOperationSpec: coreHttp.OperationSpec = {
  path: "/model-flatten/dictionary",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.resourceDictionary,
  urlParameters: [Parameters.$host],
  serializer
};
const getDictionaryOperationSpec: coreHttp.OperationSpec = {
  path: "/model-flatten/dictionary",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "FlattenedProduct" } }
        },
        serializedName: "DictionaryOfFlattenedProduct"
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putResourceCollectionOperationSpec: coreHttp.OperationSpec = {
  path: "/model-flatten/resourcecollection",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.resourceComplexObject,
  urlParameters: [Parameters.$host],
  serializer
};
const getResourceCollectionOperationSpec: coreHttp.OperationSpec = {
  path: "/model-flatten/resourcecollection",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putSimpleProductOperationSpec: coreHttp.OperationSpec = {
  path: "/model-flatten/customFlattening",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SimpleProduct
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.simpleBodyProduct,
  urlParameters: [Parameters.$host],
  serializer
};
const postFlattenedSimpleProductOperationSpec: coreHttp.OperationSpec = {
  path: "/model-flatten/customFlattening",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SimpleProduct
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.simpleBodyProduct1,
  urlParameters: [Parameters.$host],
  serializer
};
const putSimpleProductWithGroupingOperationSpec: coreHttp.OperationSpec = {
  path: "/model-flatten/customFlattening/parametergrouping/{name}/",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SimpleProduct
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.simpleBodyProduct2,
  urlParameters: [Parameters.$host, Parameters.name],
  serializer
};

// Operation Specifications

export {
  ModelFlatteningClient,
  ModelFlatteningClientContext,
  Models as ModelFlatteningModels,
  Mappers as ModelFlatteningMappers
};
