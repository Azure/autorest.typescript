/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { OperationParameter, OperationURLParameter } from "@azure/core-http";
import {
  ResourceCollection as ResourceCollectionMapper,
  SimpleProduct as SimpleProductMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const resourceArray: OperationParameter = {
  parameterPath: ["options", "resourceArray"],
  mapper: {
    serializedName: "resourceArray",
    type: {
      name: "Sequence",
      element: { type: { name: "Composite", className: "Resource" } }
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceArray1: OperationParameter = {
  parameterPath: ["options", "resourceArray"],
  mapper: {
    serializedName: "resourceArray",
    type: {
      name: "Sequence",
      element: { type: { name: "Composite", className: "WrappedProduct" } }
    }
  }
};

export const resourceDictionary: OperationParameter = {
  parameterPath: ["options", "resourceDictionary"],
  mapper: {
    serializedName: "resourceDictionary",
    type: {
      name: "Dictionary",
      value: { type: { name: "Composite", className: "FlattenedProduct" } }
    }
  }
};

export const resourceComplexObject: OperationParameter = {
  parameterPath: ["options", "resourceComplexObject"],
  mapper: ResourceCollectionMapper
};

export const simpleBodyProduct: OperationParameter = {
  parameterPath: ["options", "simpleBodyProduct"],
  mapper: SimpleProductMapper
};

export const simpleBodyProduct1: OperationParameter = {
  parameterPath: ["options", "flattenParameterGroup", "simpleBodyProduct"],
  mapper: SimpleProductMapper
};

export const name: OperationURLParameter = {
  parameterPath: ["flattenParameterGroup", "name"],
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};
