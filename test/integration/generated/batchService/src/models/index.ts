/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The result of listing the applications available in an Account.
 */
export interface ApplicationListResult {
  /**
   * The list of applications available in the Account.
   */
  value?: ApplicationSummary[];
  /**
   * The URL to get the next set of results.
   */
  odataNextLink?: string;
}

/**
 * Contains information about an application in an Azure Batch Account.
 */
export interface ApplicationSummary {
  /**
   * A string that uniquely identifies the application within the Account.
   */
  id: string;
  /**
   * The display name for the application.
   */
  displayName: string;
  /**
   * The list of available versions of the application.
   */
  versions: string[];
}

/**
 * An error response received from the Azure Batch service.
 */
export interface BatchError {
  /**
   * An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
   */
  code?: string;
  /**
   * An error message received in an Azure Batch error response.
   */
  message?: ErrorMessage;
  /**
   * A collection of key-value pairs containing additional details about the error.
   */
  values?: BatchErrorDetail[];
}

/**
 * An error message received in an Azure Batch error response.
 */
export interface ErrorMessage {
  /**
   * The language code of the error message
   */
  lang?: string;
  /**
   * The text of the message.
   */
  value?: string;
}

/**
 * An item of additional information included in an Azure Batch error response.
 */
export interface BatchErrorDetail {
  /**
   * An identifier specifying the meaning of the Value property.
   */
  key?: string;
  /**
   * The additional information included with the error response.
   */
  value?: string;
}

/**
 * The result of a listing the usage metrics for an Account.
 */
export interface PoolListUsageMetricsResult {
  /**
   * The Pool usage metrics data.
   */
  value?: PoolUsageMetrics[];
  /**
   * The URL to get the next set of results.
   */
  odataNextLink?: string;
}

/**
 * Usage metrics for a Pool across an aggregation interval.
 */
export interface PoolUsageMetrics {
  /**
   * The ID of the Pool whose metrics are aggregated in this entry.
   */
  poolId: string;
  /**
   * The start time of the aggregation interval covered by this entry.
   */
  startTime: Date;
  /**
   * The end time of the aggregation interval covered by this entry.
   */
  endTime: Date;
  /**
   * For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
   */
  vmSize: string;
  /**
   * The total core hours used in the Pool during this aggregation interval.
   */
  totalCoreHours: number;
}

/**
 * The result of listing the supported Virtual Machine Images.
 */
export interface AccountListSupportedImagesResult {
  /**
   * The list of supported Virtual Machine Images.
   */
  value?: ImageInformation[];
  /**
   * The URL to get the next set of results.
   */
  odataNextLink?: string;
}

/**
 * A reference to the Azure Virtual Machines Marketplace Image and additional information about the Image.
 */
export interface ImageInformation {
  /**
   * The ID of the Compute Node agent SKU which the Image supports.
   */
  nodeAgentSKUId: string;
  /**
   * A reference to an Azure Virtual Machines Marketplace Image or a custom Azure Virtual Machine Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the 'List supported Images' operation.
   */
  imageReference: ImageReference;
  /**
   * The type of operating system (e.g. Windows or Linux) of the Image.
   */
  osType: OSType;
  /**
   * Not every capability of the Image is listed. Capabilities in this list are considered of special interest and are generally related to integration with other features in the Azure Batch service.
   */
  capabilities?: string[];
  /**
   * The time when the Azure Batch service will stop accepting create Pool requests for the Image.
   */
  batchSupportEndOfLife?: Date;
  /**
   * Whether the Azure Batch service actively verifies that the Image is compatible with the associated Compute Node agent SKU.
   */
  verificationType: VerificationType;
}

/**
 * A reference to an Azure Virtual Machines Marketplace Image or a custom Azure Virtual Machine Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the 'List supported Images' operation.
 */
export interface ImageReference {
  /**
   * For example, Canonical or MicrosoftWindowsServer.
   */
  publisher?: string;
  /**
   * For example, UbuntuServer or WindowsServer.
   */
  offer?: string;
  /**
   * For example, 18.04-LTS or 2019-Datacenter.
   */
  sku?: string;
  /**
   * A value of 'latest' can be specified to select the latest version of an Image. If omitted, the default is 'latest'.
   */
  version?: string;
  /**
   * This property is mutually exclusive with other ImageReference properties. For Virtual Machine Image it must be in the same region and subscription as the Azure Batch account. The Shared Image Gallery Image must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
   */
  virtualMachineImageId?: string;
}

/**
 * The result of listing the Compute Node counts in the Account.
 */
export interface PoolNodeCountsListResult {
  /**
   * A list of Compute Node counts by Pool.
   */
  value?: PoolNodeCounts[];
  /**
   * The URL to get the next set of results.
   */
  odataNextLink?: string;
}

/**
 * The number of Compute Nodes in each state for a Pool.
 */
export interface PoolNodeCounts {
  /**
   * The ID of the Pool.
   */
  poolId: string;
  /**
   * The number of Compute Nodes in each Compute Node state.
   */
  dedicated?: NodeCounts;
  /**
   * The number of Compute Nodes in each Compute Node state.
   */
  lowPriority?: NodeCounts;
}

/**
 * The number of Compute Nodes in each Compute Node state.
 */
export interface NodeCounts {
  /**
   * The number of Compute Nodes in the creating state.
   */
  creating: number;
  /**
   * The number of Compute Nodes in the idle state.
   */
  idle: number;
  /**
   * The number of Compute Nodes in the offline state.
   */
  offline: number;
  /**
   * The number of Compute Nodes in the preempted state.
   */
  preempted: number;
  /**
   * The count of Compute Nodes in the rebooting state.
   */
  rebooting: number;
  /**
   * The number of Compute Nodes in the reimaging state.
   */
  reimaging: number;
  /**
   * The number of Compute Nodes in the running state.
   */
  running: number;
  /**
   * The number of Compute Nodes in the starting state.
   */
  starting: number;
  /**
   * The number of Compute Nodes in the startTaskFailed state.
   */
  startTaskFailed: number;
  /**
   * The number of Compute Nodes in the leavingPool state.
   */
  leavingPool: number;
  /**
   * The number of Compute Nodes in the unknown state.
   */
  unknown: number;
  /**
   * The number of Compute Nodes in the unusable state.
   */
  unusable: number;
  /**
   * The number of Compute Nodes in the waitingForStartTask state.
   */
  waitingForStartTask: number;
  /**
   * The total number of Compute Nodes.
   */
  total: number;
}

/**
 * Contains utilization and resource usage statistics for the lifetime of a Pool.
 */
export interface PoolStatistics {
  /**
   * The URL for the statistics.
   */
  url: string;
  /**
   * The start time of the time range covered by the statistics.
   */
  startTime: Date;
  /**
   * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
   */
  lastUpdateTime: Date;
  /**
   * Statistics related to Pool usage information.
   */
  usageStats?: UsageStatistics;
  /**
   * Statistics related to resource consumption by Compute Nodes in a Pool.
   */
  resourceStats?: ResourceStatistics;
}

/**
 * Statistics related to Pool usage information.
 */
export interface UsageStatistics {
  /**
   * The start time of the time range covered by the statistics.
   */
  startTime: Date;
  /**
   * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
   */
  lastUpdateTime: Date;
  /**
   * The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
   */
  dedicatedCoreTime: string;
}

/**
 * Statistics related to resource consumption by Compute Nodes in a Pool.
 */
export interface ResourceStatistics {
  /**
   * The start time of the time range covered by the statistics.
   */
  startTime: Date;
  /**
   * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
   */
  lastUpdateTime: Date;
  /**
   * The average CPU usage across all Compute Nodes in the Pool (percentage per node).
   */
  avgCPUPercentage: number;
  /**
   * The average memory usage in GiB across all Compute Nodes in the Pool.
   */
  avgMemoryGiB: number;
  /**
   * The peak memory usage in GiB across all Compute Nodes in the Pool.
   */
  peakMemoryGiB: number;
  /**
   * The average used disk space in GiB across all Compute Nodes in the Pool.
   */
  avgDiskGiB: number;
  /**
   * The peak used disk space in GiB across all Compute Nodes in the Pool.
   */
  peakDiskGiB: number;
  /**
   * The total number of disk read operations across all Compute Nodes in the Pool.
   */
  diskReadIOps: number;
  /**
   * The total number of disk write operations across all Compute Nodes in the Pool.
   */
  diskWriteIOps: number;
  /**
   * The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
   */
  diskReadGiB: number;
  /**
   * The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
   */
  diskWriteGiB: number;
  /**
   * The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
   */
  networkReadGiB: number;
  /**
   * The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
   */
  networkWriteGiB: number;
}

/**
 * Resource usage statistics for a Job.
 */
export interface JobStatistics {
  /**
   * The URL of the statistics.
   */
  url: string;
  /**
   * The start time of the time range covered by the statistics.
   */
  startTime: Date;
  /**
   * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
   */
  lastUpdateTime: Date;
  /**
   * The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.
   */
  userCPUTime: string;
  /**
   * The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.
   */
  kernelCPUTime: string;
  /**
   *  The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task retries.
   */
  wallClockTime: string;
  /**
   * The total number of disk read operations made by all Tasks in the Job.
   */
  readIOps: number;
  /**
   * The total number of disk write operations made by all Tasks in the Job.
   */
  writeIOps: number;
  /**
   * The total amount of data in GiB read from disk by all Tasks in the Job.
   */
  readIOGiB: number;
  /**
   * The total amount of data in GiB written to disk by all Tasks in the Job.
   */
  writeIOGiB: number;
  /**
   * A Task completes successfully if it returns exit code 0.
   */
  numSucceededTasks: number;
  /**
   * A Task fails if it exhausts its maximum retry count without returning exit code 0.
   */
  numFailedTasks: number;
  /**
   * The total number of retries on all the Tasks in the Job during the given time range.
   */
  numTaskRetries: number;
  /**
   * The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.) This value is only reported in the Account lifetime statistics; it is not included in the Job statistics.
   */
  waitTime: string;
}

/**
 * A Certificate that can be installed on Compute Nodes and can be used to authenticate operations on the machine.
 */
export interface CertificateAddParameter {
  /**
   * The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).
   */
  thumbprint: string;
  /**
   * The algorithm used to derive the thumbprint. This must be sha1.
   */
  thumbprintAlgorithm: string;
  /**
   * The base64-encoded contents of the Certificate. The maximum size is 10KB.
   */
  data: string;
  /**
   * The format of the Certificate data.
   */
  certificateFormat?: CertificateFormat;
  /**
   * This must be omitted if the Certificate format is cer.
   */
  password?: string;
}

/**
 * The result of listing the Certificates in the Account.
 */
export interface CertificateListResult {
  /**
   * The list of Certificates.
   */
  value?: Certificate[];
  /**
   * The URL to get the next set of results.
   */
  odataNextLink?: string;
}

/**
 * A Certificate that can be installed on Compute Nodes and can be used to authenticate operations on the machine.
 */
export interface Certificate {
  /**
   * The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits.
   */
  thumbprint?: string;
  /**
   * The algorithm used to derive the thumbprint.
   */
  thumbprintAlgorithm?: string;
  /**
   * The URL of the Certificate.
   */
  url?: string;
  /**
   * The state of the Certificate.
   */
  state?: CertificateState;
  /**
   * The time at which the Certificate entered its current state.
   */
  stateTransitionTime?: Date;
  /**
   * This property is not set if the Certificate is in its initial active state.
   */
  previousState?: CertificateState;
  /**
   * This property is not set if the Certificate is in its initial Active state.
   */
  previousStateTransitionTime?: Date;
  /**
   * The public part of the Certificate as a base-64 encoded .cer file.
   */
  publicData?: string;
  /**
   * This property is set only if the Certificate is in the DeleteFailed state.
   */
  deleteCertificateError?: DeleteCertificateError;
}

/**
 * An error encountered by the Batch service when deleting a Certificate.
 */
export interface DeleteCertificateError {
  /**
   * An identifier for the Certificate deletion error. Codes are invariant and are intended to be consumed programmatically.
   */
  code?: string;
  /**
   * A message describing the Certificate deletion error, intended to be suitable for display in a user interface.
   */
  message?: string;
  /**
   * This list includes details such as the active Pools and Compute Nodes referencing this Certificate. However, if a large number of resources reference the Certificate, the list contains only about the first hundred.
   */
  values?: NameValuePair[];
}

/**
 * Represents a name-value pair.
 */
export interface NameValuePair {
  /**
   * The name in the name-value pair.
   */
  name?: string;
  /**
   * The value in the name-value pair.
   */
  value?: string;
}

/**
 * The result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node.
 */
export interface NodeFileListResult {
  /**
   * The list of files.
   */
  value?: NodeFile[];
  /**
   * The URL to get the next set of results.
   */
  odataNextLink?: string;
}

/**
 * Information about a file or directory on a Compute Node.
 */
export interface NodeFile {
  /**
   * The file path.
   */
  name?: string;
  /**
   * The URL of the file.
   */
  url?: string;
  /**
   * Whether the object represents a directory.
   */
  isDirectory?: boolean;
  /**
   * The properties of a file on a Compute Node.
   */
  properties?: FileProperties;
}

/**
 * The properties of a file on a Compute Node.
 */
export interface FileProperties {
  /**
   * The creation time is not returned for files on Linux Compute Nodes.
   */
  creationTime?: Date;
  /**
   * The time at which the file was last modified.
   */
  lastModified: Date;
  /**
   * The length of the file.
   */
  contentLength: number;
  /**
   * The content type of the file.
   */
  contentType?: string;
  /**
   * The file mode is returned only for files on Linux Compute Nodes.
   */
  fileMode?: string;
}

/**
 * A Job Schedule that allows recurring Jobs by specifying when to run Jobs and a specification used to create each Job.
 */
export interface CloudJobSchedule {
  /**
   * A string that uniquely identifies the schedule within the Account.
   */
  id?: string;
  /**
   * The display name for the schedule.
   */
  displayName?: string;
  /**
   * The URL of the Job Schedule.
   */
  url?: string;
  /**
   * This is an opaque string. You can use it to detect whether the Job Schedule has changed between requests. In particular, you can be pass the ETag with an Update Job Schedule request to specify that your changes should take effect only if nobody else has modified the schedule in the meantime.
   */
  eTag?: string;
  /**
   * This is the last time at which the schedule level data, such as the Job specification or recurrence information, changed. It does not factor in job-level changes such as new Jobs being created or Jobs changing state.
   */
  lastModified?: Date;
  /**
   * The creation time of the Job Schedule.
   */
  creationTime?: Date;
  /**
   * The state of the Job Schedule.
   */
  state?: JobScheduleState;
  /**
   * The time at which the Job Schedule entered the current state.
   */
  stateTransitionTime?: Date;
  /**
   * This property is not present if the Job Schedule is in its initial active state.
   */
  previousState?: JobScheduleState;
  /**
   * This property is not present if the Job Schedule is in its initial active state.
   */
  previousStateTransitionTime?: Date;
  /**
   * The schedule according to which Jobs will be created
   */
  schedule?: Schedule;
  /**
   * Specifies details of the Jobs to be created on a schedule.
   */
  jobSpecification?: JobSpecification;
  /**
   * Contains information about Jobs that have been and will be run under a Job Schedule.
   */
  executionInfo?: JobScheduleExecutionInformation;
  /**
   * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
  /**
   * Resource usage statistics for a Job Schedule.
   */
  stats?: JobScheduleStatistics;
}

/**
 * The schedule according to which Jobs will be created
 */
export interface Schedule {
  /**
   * If you do not specify a doNotRunUntil time, the schedule becomes ready to create Jobs immediately.
   */
  doNotRunUntil?: Date;
  /**
   * If you do not specify a doNotRunAfter time, and you are creating a recurring Job Schedule, the Job Schedule will remain active until you explicitly terminate it.
   */
  doNotRunAfter?: Date;
  /**
   * If a Job is not created within the startWindow interval, then the 'opportunity' is lost; no Job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the Job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  startWindow?: string;
  /**
   * Because a Job Schedule can have at most one active Job under it at any given time, if it is time to create a new Job under a Job Schedule, but the previous Job is still running, the Batch service will not create the new Job until the previous Job finishes. If the previous Job does not finish within the startWindow period of the new recurrenceInterval, then no new Job will be scheduled for that interval. For recurring Jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when Jobs are created, add Tasks to the Jobs and terminate the Jobs ready for the next recurrence. The default is that the schedule does not recur: one Job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that Job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  recurrenceInterval?: string;
}

/**
 * Specifies details of the Jobs to be created on a schedule.
 */
export interface JobSpecification {
  /**
   * Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all Jobs under the Job Schedule. You can update a Job's priority after it has been created using by using the update Job API.
   */
  priority?: number;
  /**
   * The name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * Whether Tasks in the Job can define dependencies on each other. The default is false.
   */
  usesTaskDependencies?: boolean;
  /**
   * Note that if a Job contains no Tasks, then all Tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic Job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete to terminatejob once you have finished adding Tasks. The default is noaction.
   */
  onAllTasksComplete?: OnAllTasksComplete;
  /**
   * The default is noaction.
   */
  onTaskFailure?: OnTaskFailure;
  /**
   * The network configuration for the Job.
   */
  networkConfiguration?: JobNetworkConfiguration;
  /**
   * The execution constraints for a Job.
   */
  constraints?: JobConstraints;
  /**
   * If the Job does not specify a Job Manager Task, the user must explicitly add Tasks to the Job using the Task API. If the Job does specify a Job Manager Task, the Batch service creates the Job Manager Task when the Job is created, and will try to schedule the Job Manager Task before scheduling other Tasks in the Job.
   */
  jobManagerTask?: JobManagerTask;
  /**
   * If a Job has a Job Preparation Task, the Batch service will run the Job Preparation Task on a Node before starting any Tasks of that Job on that Compute Node.
   */
  jobPreparationTask?: JobPreparationTask;
  /**
   * The primary purpose of the Job Release Task is to undo changes to Nodes made by the Job Preparation Task. Example activities include deleting local files, or shutting down services that were started as part of Job preparation. A Job Release Task cannot be specified without also specifying a Job Preparation Task for the Job. The Batch service runs the Job Release Task on the Compute Nodes that have run the Job Preparation Task.
   */
  jobReleaseTask?: JobReleaseTask;
  /**
   * Individual Tasks can override an environment setting specified here by specifying the same setting name with a different value.
   */
  commonEnvironmentSettings?: EnvironmentSetting[];
  /**
   * Specifies how a Job should be assigned to a Pool.
   */
  poolInfo: PoolInformation;
  /**
   * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
}

/**
 * The network configuration for the Job.
 */
export interface JobNetworkConfiguration {
  /**
   * The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for outbound connections for communications to Azure Storage. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
   */
  subnetId: string;
}

/**
 * The execution constraints for a Job.
 */
export interface JobConstraints {
  /**
   * If the Job does not complete within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may run.
   */
  maxWallClockTime?: string;
  /**
   * Note that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1, the Batch service retries Tasks without limit. The default value is 0 (no retries).
   */
  maxTaskRetryCount?: number;
}

/**
 * The Job Manager Task is automatically started when the Job is created. The Batch service tries to schedule the Job Manager Task before any other Tasks in the Job. When shrinking a Pool, the Batch service tries to preserve Nodes where Job Manager Tasks are running for as long as possible (that is, Compute Nodes running 'normal' Tasks are removed before Compute Nodes running Job Manager Tasks). When a Job Manager Task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle Compute Nodes available, the system may terminate one of the running Tasks in the Pool and return it to the queue in order to make room for the Job Manager Task to restart. Note that a Job Manager Task in one Job does not have priority over Tasks in other Jobs. Across Jobs, only Job level priorities are observed. For example, if a Job Manager in a priority 0 Job needs to be restarted, it will not displace Tasks of a priority 1 Job. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing.
 */
export interface JobManagerTask {
  /**
   * The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.
   */
  id: string;
  /**
   * It need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   */
  commandLine: string;
  /**
   * If the Pool that will run this Task has containerConfiguration set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
   */
  containerSettings?: TaskContainerSettings;
  /**
   * Files listed under this element are located in the Task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
   */
  resourceFiles?: ResourceFile[];
  /**
   * For multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.
   */
  outputFiles?: OutputFile[];
  /**
   * A list of environment variable settings for the Job Manager Task.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * Execution constraints to apply to a Task.
   */
  constraints?: TaskConstraints;
  /**
   * If true, when the Job Manager Task completes, the Batch service marks the Job as complete. If any Tasks are still running at this time (other than Job Release), those Tasks are terminated. If false, the completion of the Job Manager Task does not affect the Job status. In this case, you should either use the onAllTasksComplete attribute to terminate the Job, or have a client or user terminate the Job explicitly. An example of this is if the Job Manager creates a set of Tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control Job lifetime, and using the Job Manager Task only to create the Tasks for the Job (not to monitor progress), then it is important to set killJobOnCompletion to false.
   */
  killJobOnCompletion?: boolean;
  /**
   * If omitted, the Task runs as a non-administrative user unique to the Task.
   */
  userIdentity?: UserIdentity;
  /**
   * If true, no other Tasks will run on the same Node for as long as the Job Manager is running. If false, other Tasks can run simultaneously with the Job Manager on a Compute Node. The Job Manager Task counts normally against the Compute Node's concurrent Task limit, so this is only relevant if the Compute Node allows multiple concurrent Tasks. The default value is true.
   */
  runExclusive?: boolean;
  /**
   * Application Packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced Application Package is already on the Compute Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Application Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * If this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job.
   */
  authenticationTokenSettings?: AuthenticationTokenSettings;
  /**
   * The default value is true.
   */
  allowLowPriorityNode?: boolean;
}

/**
 * The container settings for a Task.
 */
export interface TaskContainerSettings {
  /**
   * These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
   */
  containerRunOptions?: string;
  /**
   * This is the full Image reference, as would be specified to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
   */
  imageName: string;
  /**
   * This setting can be omitted if was already provided at Pool creation.
   */
  registry?: ContainerRegistry;
  /**
   * The default is 'taskWorkingDirectory'.
   */
  workingDirectory?: ContainerWorkingDirectory;
}

/**
 * A private container registry.
 */
export interface ContainerRegistry {
  /**
   * If omitted, the default is "docker.io".
   */
  registryServer?: string;
  /**
   * The user name to log into the registry server.
   */
  userName: string;
  /**
   * The password to log into the registry server.
   */
  password: string;
}

/**
 * A single file or multiple files to be downloaded to a Compute Node.
 */
export interface ResourceFile {
  /**
   * The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
   */
  autoStorageContainerName?: string;
  /**
   * The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading blobs from the container. There are two ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, or set the ACL for the container to allow public access.
   */
  storageContainerUrl?: string;
  /**
   * The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
   */
  httpUrl?: string;
  /**
   * The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
   */
  blobPrefix?: string;
  /**
   * If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task's working directory (for example by using '..').
   */
  filePath?: string;
  /**
   * This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.
   */
  fileMode?: string;
}

/**
 * A specification for uploading files from an Azure Batch Compute Node to another location after the Batch service has finished executing the Task process.
 */
export interface OutputFile {
  /**
   * Both relative and absolute paths are supported. Relative paths are relative to the Task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with "." it is ignored by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple example: **\*.txt matches any file that does not start in '.' and ends with .txt in the Task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*] would match a file named abc*). Note that both \ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.
   */
  filePattern: string;
  /**
   * The destination to which a file should be uploaded.
   */
  destination: OutputFileDestination;
  /**
   * Details about an output file upload operation, including under what conditions to perform the upload.
   */
  uploadOptions: OutputFileUploadOptions;
}

/**
 * The destination to which a file should be uploaded.
 */
export interface OutputFileDestination {
  /**
   * Specifies a file upload destination within an Azure blob storage container.
   */
  container?: OutputFileBlobContainerDestination;
}

/**
 * Specifies a file upload destination within an Azure blob storage container.
 */
export interface OutputFileBlobContainerDestination {
  /**
   * If filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name.
   */
  path?: string;
  /**
   * The URL must include a Shared Access Signature (SAS) granting write permissions to the container.
   */
  containerUrl: string;
}

/**
 * Details about an output file upload operation, including under what conditions to perform the upload.
 */
export interface OutputFileUploadOptions {
  /**
   * The default is taskcompletion.
   */
  uploadCondition: OutputFileUploadCondition;
}

/**
 * An environment variable to be set on a Task process.
 */
export interface EnvironmentSetting {
  /**
   * The name of the environment variable.
   */
  name: string;
  /**
   * The value of the environment variable.
   */
  value?: string;
}

/**
 * Execution constraints to apply to a Task.
 */
export interface TaskConstraints {
  /**
   * If this is not specified, there is no time limit on how long the Task may run.
   */
  maxWallClockTime?: string;
  /**
   * The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
   */
  retentionTime?: string;
  /**
   * Note that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without limit.
   */
  maxTaskRetryCount?: number;
}

/**
 * Specify either the userName or autoUser property, but not both.
 */
export interface UserIdentity {
  /**
   * The userName and autoUser properties are mutually exclusive; you must specify one but not both.
   */
  userName?: string;
  /**
   * The userName and autoUser properties are mutually exclusive; you must specify one but not both.
   */
  autoUser?: AutoUserSpecification;
}

/**
 * Specifies the parameters for the auto user that runs a Task on the Batch service.
 */
export interface AutoUserSpecification {
  /**
   * The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.
   */
  scope?: AutoUserScope;
  /**
   * The default value is nonAdmin.
   */
  elevationLevel?: ElevationLevel;
}

/**
 * A reference to an Package to be deployed to Compute Nodes.
 */
export interface ApplicationPackageReference {
  /**
   * The ID of the application to deploy.
   */
  applicationId: string;
  /**
   * If this is omitted on a Pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a Task, and no default version is specified for this application, the Task fails with a pre-processing error.
   */
  version?: string;
}

/**
 * The settings for an authentication token that the Task can use to perform Batch service operations.
 */
export interface AuthenticationTokenSettings {
  /**
   * The authentication token grants access to a limited set of Batch service operations. Currently the only supported value for the access property is 'job', which grants access to all operations related to the Job which contains the Task.
   */
  access?: string[];
}

/**
 * You can use Job Preparation to prepare a Node to run Tasks for the Job. Activities commonly performed in Job Preparation include: Downloading common resource files used by all the Tasks in the Job. The Job Preparation Task can download these common resource files to the shared location on the Node. (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local service on the Node so that all Tasks of that Job can communicate with it. If the Job Preparation Task fails (that is, exhausts its retry count before exiting with exit code 0), Batch will not run Tasks of this Job on the Node. The Compute Node remains ineligible to run Tasks of this Job until it is reimaged. The Compute Node remains active and can be used for other Jobs. The Job Preparation Task can run multiple times on the same Node. Therefore, you should write the Job Preparation Task to handle re-execution. If the Node is rebooted, the Job Preparation Task is run again on the Compute Node before scheduling any other Task of the Job, if rerunOnNodeRebootAfterSuccess is true or if the Job Preparation Task did not previously complete. If the Node is reimaged, the Job Preparation Task is run again before scheduling any Task of the Job. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing.
 */
export interface JobPreparationTask {
  /**
   * The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other Task in the Job can have the same ID as the Job Preparation Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
   */
  id?: string;
  /**
   * The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   */
  commandLine: string;
  /**
   * When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
   */
  containerSettings?: TaskContainerSettings;
  /**
   * Files listed under this element are located in the Task's working directory.  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
   */
  resourceFiles?: ResourceFile[];
  /**
   * A list of environment variable settings for the Job Preparation Task.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * Execution constraints to apply to a Task.
   */
  constraints?: TaskConstraints;
  /**
   * If true and the Job Preparation Task fails on a Node, the Batch service retries the Job Preparation Task up to its maximum retry count (as specified in the constraints element). If the Task has still not completed successfully after all retries, then the Batch service will not schedule Tasks of the Job to the Node. The Node remains active and eligible to run Tasks of other Jobs. If false, the Batch service will not wait for the Job Preparation Task to complete. In this case, other Tasks of the Job can start executing on the Compute Node while the Job Preparation Task is still running; and even if the Job Preparation Task fails, new Tasks will continue to be scheduled on the Compute Node. The default value is true.
   */
  waitForSuccess?: boolean;
  /**
   * If omitted, the Task runs as a non-administrative user unique to the Task on Windows Compute Nodes, or a non-administrative user unique to the Pool on Linux Compute Nodes.
   */
  userIdentity?: UserIdentity;
  /**
   * The Job Preparation Task is always rerun if a Compute Node is reimaged, or if the Job Preparation Task did not complete (e.g. because the reboot occurred while the Task was running). Therefore, you should always write a Job Preparation Task to be idempotent and to behave correctly if run multiple times. The default value is true.
   */
  rerunOnNodeRebootAfterSuccess?: boolean;
}

/**
 * The Job Release Task runs when the Job ends, because of one of the following: The user calls the Terminate Job API, or the Delete Job API while the Job is still active, the Job's maximum wall clock time constraint is reached, and the Job is still active, or the Job's Job Manager Task completed, and the Job is configured to terminate when the Job Manager completes. The Job Release Task runs on each Node where Tasks of the Job have run and the Job Preparation Task ran and completed. If you reimage a Node after it has run the Job Preparation Task, and the Job ends without any further Tasks of the Job running on that Node (and hence the Job Preparation Task does not re-run), then the Job Release Task does not run on that Compute Node. If a Node reboots while the Job Release Task is still running, the Job Release Task runs again when the Compute Node starts up. The Job is not marked as complete until all Job Release Tasks have completed. The Job Release Task runs in the background. It does not occupy a scheduling slot; that is, it does not count towards the maxTasksPerNode limit specified on the Pool.
 */
export interface JobReleaseTask {
  /**
   * The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
   */
  id?: string;
  /**
   * The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   */
  commandLine: string;
  /**
   * When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
   */
  containerSettings?: TaskContainerSettings;
  /**
   * Files listed under this element are located in the Task's working directory.
   */
  resourceFiles?: ResourceFile[];
  /**
   * A list of environment variable settings for the Job Release Task.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes. You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  maxWallClockTime?: string;
  /**
   * The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
   */
  retentionTime?: string;
  /**
   * If omitted, the Task runs as a non-administrative user unique to the Task.
   */
  userIdentity?: UserIdentity;
}

/**
 * Specifies how a Job should be assigned to a Pool.
 */
export interface PoolInformation {
  /**
   * You must ensure that the Pool referenced by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but not both.
   */
  poolId?: string;
  /**
   * If auto Pool creation fails, the Batch service moves the Job to a completed state, and the Pool creation error is set in the Job's scheduling error property. The Batch service manages the lifetime (both creation and, unless keepAlive is specified, deletion) of the auto Pool. Any user actions that affect the lifetime of the auto Pool while the Job is active will result in unexpected behavior. You must specify either the Pool ID or the auto Pool specification, but not both.
   */
  autoPoolSpecification?: AutoPoolSpecification;
}

/**
 * Specifies characteristics for a temporary 'auto pool'. The Batch service will create this auto Pool when the Job is submitted.
 */
export interface AutoPoolSpecification {
  /**
   * The Batch service assigns each auto Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
   */
  autoPoolIdPrefix?: string;
  /**
   * The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.
   */
  poolLifetimeOption: PoolLifetimeOption;
  /**
   * If false, the Batch service deletes the Pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.
   */
  keepAlive?: boolean;
  /**
   * Specification for creating a new Pool.
   */
  pool?: PoolSpecification;
}

/**
 * Specification for creating a new Pool.
 */
export interface PoolSpecification {
  /**
   * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
   */
  vmSize: string;
  /**
   * This property must be specified if the Pool needs to be created with Azure PaaS VMs. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). This property cannot be specified if the Batch Account was created with its poolAllocationMode property set to 'UserSubscription'.
   */
  cloudServiceConfiguration?: CloudServiceConfiguration;
  /**
   * This property must be specified if the Pool needs to be created with Azure IaaS VMs. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  virtualMachineConfiguration?: VirtualMachineConfiguration;
  /**
   * The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the Pool or 256.
   */
  maxTasksPerNode?: number;
  /**
   * If not specified, the default is spread.
   */
  taskSchedulingPolicy?: TaskSchedulingPolicy;
  /**
   * This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  resizeTimeout?: string;
  /**
   * This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
   */
  targetDedicatedNodes?: number;
  /**
   * This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
   */
  targetLowPriorityNodes?: number;
  /**
   * If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula element is required. The Pool automatically resizes according to the formula. The default value is false.
   */
  enableAutoScale?: boolean;
  /**
   * This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the Pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information.
   */
  autoScaleFormula?: string;
  /**
   * The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  autoScaleEvaluationInterval?: string;
  /**
   * Enabling inter-node communication limits the maximum size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching its desired size. The default value is false.
   */
  enableInterNodeCommunication?: boolean;
  /**
   * The network configuration for a Pool.
   */
  networkConfiguration?: NetworkConfiguration;
  /**
   * Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
   */
  startTask?: StartTask;
  /**
   * For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
   */
  certificateReferences?: CertificateReference[];
  /**
   * Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail. The permitted licenses available on the Pool are 'maya', 'vray', '3dsmax', 'arnold'. An additional charge applies for each application license added to the Pool.
   */
  applicationLicenses?: string[];
  /**
   * The list of user Accounts to be created on each Compute Node in the Pool.
   */
  userAccounts?: UserAccount[];
  /**
   * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
  /**
   * This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
   */
  mountConfiguration?: MountConfiguration[];
}

/**
 * The configuration for Compute Nodes in a Pool based on the Azure Cloud Services platform.
 */
export interface CloudServiceConfiguration {
  /**
   * Possible values are:
   * 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1.
   * 3 - OS Family 3, equivalent to Windows Server 2012.
   * 4 - OS Family 4, equivalent to Windows Server 2012 R2.
   * 5 - OS Family 5, equivalent to Windows Server 2016.
   * 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
   */
  osFamily: string;
  /**
   * The default value is * which specifies the latest operating system version for the specified OS family.
   */
  osVersion?: string;
}

/**
 * The configuration for Compute Nodes in a Pool based on the Azure Virtual Machines infrastructure.
 */
export interface VirtualMachineConfiguration {
  /**
   * A reference to an Azure Virtual Machines Marketplace Image or a custom Azure Virtual Machine Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the 'List supported Images' operation.
   */
  imageReference: ImageReference;
  /**
   * The Batch Compute Node agent is a program that runs on each Compute Node in the Pool, and provides the command-and-control interface between the Compute Node and the Batch service. There are different implementations of the Compute Node agent, known as SKUs, for different operating systems. You must specify a Compute Node agent SKU which matches the selected Image reference. To get the list of supported Compute Node agent SKUs along with their list of verified Image references, see the 'List supported Compute Node agent SKUs' operation.
   */
  nodeAgentSKUId: string;
  /**
   * This property must not be specified if the imageReference property specifies a Linux OS Image.
   */
  windowsConfiguration?: WindowsConfiguration;
  /**
   * This property must be specified if the Compute Nodes in the Pool need to have empty data disks attached to them. This cannot be updated. Each Compute Node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the Compute Node is removed from the Pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
   */
  dataDisks?: DataDisk[];
  /**
   * This only applies to Images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the Compute Nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
   *
   *  Windows_Server - The on-premises license is for Windows Server.
   *  Windows_Client - The on-premises license is for Windows Client.
   *
   */
  licenseType?: string;
  /**
   * If specified, setup is performed on each Compute Node in the Pool to allow Tasks to run in containers. All regular Tasks and Job manager Tasks run on this Pool must specify the containerSettings property, and all other Tasks may specify it.
   */
  containerConfiguration?: ContainerConfiguration;
  /**
   * If specified, encryption is performed on each node in the pool during node provisioning.
   */
  diskEncryptionConfiguration?: DiskEncryptionConfiguration;
}

/**
 * Windows operating system settings to apply to the virtual machine.
 */
export interface WindowsConfiguration {
  /**
   * If omitted, the default value is true.
   */
  enableAutomaticUpdates?: boolean;
}

/**
 * Settings which will be used by the data disks associated to Compute Nodes in the Pool. When using attached data disks, you need to mount and format the disks from within a VM to use them.
 */
export interface DataDisk {
  /**
   * The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
   */
  lun: number;
  /**
   * The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
   */
  caching?: CachingType;
  /**
   * The initial disk size in gigabytes.
   */
  diskSizeGB: number;
  /**
   * If omitted, the default is "standard_lrs".
   */
  storageAccountType?: StorageAccountType;
}

/**
 * The configuration for container-enabled Pools.
 */
export interface ContainerConfiguration {
  /**
   * The container technology to be used.
   */
  type: "dockerCompatible";
  /**
   * This is the full Image reference, as would be specified to "docker pull". An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.
   */
  containerImageNames?: string[];
  /**
   * If any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
   */
  containerRegistries?: ContainerRegistry[];
}

/**
 * The disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Shared Image Gallery Image.
 */
export interface DiskEncryptionConfiguration {
  /**
   * If omitted, no disks on the compute nodes in the pool will be encrypted. On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified.
   */
  targets?: DiskEncryptionTarget[];
}

/**
 * Specifies how Tasks should be distributed across Compute Nodes.
 */
export interface TaskSchedulingPolicy {
  /**
   * If not specified, the default is spread.
   */
  nodeFillType: ComputeNodeFillType;
}

/**
 * The network configuration for a Pool.
 */
export interface NetworkConfiguration {
  /**
   * The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with virtualMachineConfiguration only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported, but for Pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For Pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
   */
  subnetId?: string;
  /**
   * The scope of dynamic vnet assignment.
   */
  dynamicVNetAssignmentScope?: DynamicVNetAssignmentScope;
  /**
   * Pool endpoint configuration is only supported on Pools with the virtualMachineConfiguration property.
   */
  endpointConfiguration?: PoolEndpointConfiguration;
  /**
   * Public IP configuration property is only supported on Pools with the virtualMachineConfiguration property.
   */
  publicIPAddressConfiguration?: PublicIPAddressConfiguration;
}

/**
 * The endpoint configuration for a Pool.
 */
export interface PoolEndpointConfiguration {
  /**
   * The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400.
   */
  inboundNATPools: InboundNATPool[];
}

/**
 * A inbound NAT Pool that can be used to address specific ports on Compute Nodes in a Batch Pool externally.
 */
export interface InboundNATPool {
  /**
   * The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
   */
  name: string;
  /**
   * The protocol of the endpoint.
   */
  protocol: InboundEndpointProtocol;
  /**
   * This must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
   */
  backendPort: number;
  /**
   * Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
   */
  frontendPortRangeStart: number;
  /**
   * Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
   */
  frontendPortRangeEnd: number;
  /**
   * The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
   */
  networkSecurityGroupRules?: NetworkSecurityGroupRule[];
}

/**
 * A network security group rule to apply to an inbound endpoint.
 */
export interface NetworkSecurityGroupRule {
  /**
   * Priorities within a Pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
   */
  priority: number;
  /**
   * The action that should be taken for a specified IP address, subnet range or tag.
   */
  access: NetworkSecurityGroupRuleAccess;
  /**
   * Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
   */
  sourceAddressPrefix: string;
  /**
   * Valid values are '*' (for all ports 0 - 65535), a specific port (i.e. 22), or a port range (i.e. 100-200). The ports must be in the range of 0 to 65535. Each entry in this collection must not overlap any other entry (either a range or an individual port). If any other values are provided the request fails with HTTP status code 400. The default value is '*'.
   */
  sourcePortRanges?: string[];
}

/**
 * The public IP Address configuration of the networking configuration of a Pool.
 */
export interface PublicIPAddressConfiguration {
  /**
   * The default value is BatchManaged.
   */
  provision?: IPAddressProvisioningType;
  /**
   * The number of IPs specified here limits the maximum size of the Pool - 50 dedicated nodes or 20 low-priority nodes can be allocated for each public IP. For example, a pool needing 150 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
   */
  ipAddressIds?: string[];
}

/**
 * Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
 */
export interface StartTask {
  /**
   * The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   */
  commandLine: string;
  /**
   * When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
   */
  containerSettings?: TaskContainerSettings;
  /**
   * Files listed under this element are located in the Task's working directory.
   */
  resourceFiles?: ResourceFile[];
  /**
   * A list of environment variable settings for the StartTask.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * If omitted, the Task runs as a non-administrative user unique to the Task.
   */
  userIdentity?: UserIdentity;
  /**
   * The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit.
   */
  maxTaskRetryCount?: number;
  /**
   * If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
   */
  waitForSuccess?: boolean;
}

/**
 * A reference to a Certificate to be installed on Compute Nodes in a Pool.
 */
export interface CertificateReference {
  /**
   * The thumbprint of the Certificate.
   */
  thumbprint: string;
  /**
   * The algorithm with which the thumbprint is associated. This must be sha1.
   */
  thumbprintAlgorithm: string;
  /**
   * The default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
   */
  storeLocation?: CertificateStoreLocation;
  /**
   * This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
   */
  storeName?: string;
  /**
   * You can specify more than one visibility in this collection. The default is all Accounts.
   */
  visibility?: CertificateVisibility[];
}

/**
 * Properties used to create a user used to execute Tasks on an Azure Batch Compute Node.
 */
export interface UserAccount {
  /**
   * The name of the user Account.
   */
  name: string;
  /**
   * The password for the user Account.
   */
  password: string;
  /**
   * The default value is nonAdmin.
   */
  elevationLevel?: ElevationLevel;
  /**
   * This property is ignored if specified on a Windows Pool. If not specified, the user is created with the default options.
   */
  linuxUserConfiguration?: LinuxUserConfiguration;
  /**
   * This property can only be specified if the user is on a Windows Pool. If not specified and on a Windows Pool, the user is created with the default options.
   */
  windowsUserConfiguration?: WindowsUserConfiguration;
}

/**
 * Properties used to create a user Account on a Linux Compute Node.
 */
export interface LinuxUserConfiguration {
  /**
   * The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
   */
  uid?: number;
  /**
   * The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
   */
  gid?: number;
  /**
   * The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user's .ssh directory is done).
   */
  sshPrivateKey?: string;
}

/**
 * Properties used to create a user Account on a Windows Compute Node.
 */
export interface WindowsUserConfiguration {
  /**
   * The default value for VirtualMachineConfiguration Pools is 'batch' and for CloudServiceConfiguration Pools is 'interactive'.
   */
  loginMode?: LoginMode;
}

/**
 * The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
 */
export interface MetadataItem {
  /**
   * The name of the metadata item.
   */
  name: string;
  /**
   * The value of the metadata item.
   */
  value: string;
}

/**
 * The file system to mount on each node.
 */
export interface MountConfiguration {
  /**
   * This property is mutually exclusive with all other properties.
   */
  azureBlobFileSystemConfiguration?: AzureBlobFileSystemConfiguration;
  /**
   * This property is mutually exclusive with all other properties.
   */
  nfsMountConfiguration?: NFSMountConfiguration;
  /**
   * This property is mutually exclusive with all other properties.
   */
  cifsMountConfiguration?: CifsMountConfiguration;
  /**
   * This property is mutually exclusive with all other properties.
   */
  azureFileShareConfiguration?: AzureFileShareConfiguration;
}

/**
 * Information used to connect to an Azure Storage Container using Blobfuse.
 */
export interface AzureBlobFileSystemConfiguration {
  /**
   * The Azure Storage Account name.
   */
  accountName: string;
  /**
   * The Azure Blob Storage Container name.
   */
  containerName: string;
  /**
   * This property is mutually exclusive with sasKey and one must be specified.
   */
  accountKey?: string;
  /**
   * This property is mutually exclusive with accountKey and one must be specified.
   */
  sasKey?: string;
  /**
   * These are 'net use' options in Windows and 'mount' options in Linux.
   */
  blobfuseOptions?: string;
  /**
   * All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
   */
  relativeMountPath: string;
}

/**
 * Information used to connect to an NFS file system.
 */
export interface NFSMountConfiguration {
  /**
   * The URI of the file system to mount.
   */
  source: string;
  /**
   * All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
   */
  relativeMountPath: string;
  /**
   * These are 'net use' options in Windows and 'mount' options in Linux.
   */
  mountOptions?: string;
}

/**
 * Information used to connect to a CIFS file system.
 */
export interface CifsMountConfiguration {
  /**
   * The user to use for authentication against the CIFS file system.
   */
  username: string;
  /**
   * The URI of the file system to mount.
   */
  source: string;
  /**
   * All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
   */
  relativeMountPath: string;
  /**
   * These are 'net use' options in Windows and 'mount' options in Linux.
   */
  mountOptions?: string;
  /**
   * The password to use for authentication against the CIFS file system.
   */
  password: string;
}

/**
 * Information used to connect to an Azure Fileshare.
 */
export interface AzureFileShareConfiguration {
  /**
   * The Azure Storage account name.
   */
  accountName: string;
  /**
   * This is of the form 'https://{account}.file.core.windows.net/'.
   */
  azureFileUrl: string;
  /**
   * The Azure Storage account key.
   */
  accountKey: string;
  /**
   * All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
   */
  relativeMountPath: string;
  /**
   * These are 'net use' options in Windows and 'mount' options in Linux.
   */
  mountOptions?: string;
}

/**
 * Contains information about Jobs that have been and will be run under a Job Schedule.
 */
export interface JobScheduleExecutionInformation {
  /**
   * This property is meaningful only if the schedule is in the active state when the time comes around. For example, if the schedule is disabled, no Job will be created at nextRunTime unless the Job is enabled before then.
   */
  nextRunTime?: Date;
  /**
   * This property is present only if the at least one Job has run under the schedule.
   */
  recentJob?: RecentJob;
  /**
   * This property is set only if the Job Schedule is in the completed state.
   */
  endTime?: Date;
}

/**
 * Information about the most recent Job to run under the Job Schedule.
 */
export interface RecentJob {
  /**
   * The ID of the Job.
   */
  id?: string;
  /**
   * The URL of the Job.
   */
  url?: string;
}

/**
 * Resource usage statistics for a Job Schedule.
 */
export interface JobScheduleStatistics {
  /**
   * The URL of the statistics.
   */
  url: string;
  /**
   * The start time of the time range covered by the statistics.
   */
  startTime: Date;
  /**
   * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
   */
  lastUpdateTime: Date;
  /**
   * The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created under the schedule.
   */
  userCPUTime: string;
  /**
   * The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created under the schedule.
   */
  kernelCPUTime: string;
  /**
   * The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task retries.
   */
  wallClockTime: string;
  /**
   * The total number of disk read operations made by all Tasks in all Jobs created under the schedule.
   */
  readIOps: number;
  /**
   * The total number of disk write operations made by all Tasks in all Jobs created under the schedule.
   */
  writeIOps: number;
  /**
   * The total gibibytes read from disk by all Tasks in all Jobs created under the schedule.
   */
  readIOGiB: number;
  /**
   * The total gibibytes written to disk by all Tasks in all Jobs created under the schedule.
   */
  writeIOGiB: number;
  /**
   * The total number of Tasks successfully completed during the given time range in Jobs created under the schedule. A Task completes successfully if it returns exit code 0.
   */
  numSucceededTasks: number;
  /**
   * The total number of Tasks that failed during the given time range in Jobs created under the schedule. A Task fails if it exhausts its maximum retry count without returning exit code 0.
   */
  numFailedTasks: number;
  /**
   * The total number of retries during the given time range on all Tasks in all Jobs created under the schedule.
   */
  numTaskRetries: number;
  /**
   * This value is only reported in the Account lifetime statistics; it is not included in the Job statistics.
   */
  waitTime: string;
}

/**
 * The set of changes to be made to a Job Schedule.
 */
export interface JobSchedulePatchParameter {
  /**
   * If you do not specify this element, the existing schedule is left unchanged.
   */
  schedule?: Schedule;
  /**
   * Updates affect only Jobs that are started after the update has taken place. Any currently active Job continues with the older specification.
   */
  jobSpecification?: JobSpecification;
  /**
   * If you do not specify this element, existing metadata is left unchanged.
   */
  metadata?: MetadataItem[];
}

/**
 * The set of changes to be made to a Job Schedule.
 */
export interface JobScheduleUpdateParameter {
  /**
   * If you do not specify this element, it is equivalent to passing the default schedule: that is, a single Job scheduled to run immediately.
   */
  schedule: Schedule;
  /**
   * Updates affect only Jobs that are started after the update has taken place. Any currently active Job continues with the older specification.
   */
  jobSpecification: JobSpecification;
  /**
   * If you do not specify this element, it takes the default value of an empty list; in effect, any existing metadata is deleted.
   */
  metadata?: MetadataItem[];
}

/**
 * A Job Schedule that allows recurring Jobs by specifying when to run Jobs and a specification used to create each Job.
 */
export interface JobScheduleAddParameter {
  /**
   * The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).
   */
  id: string;
  /**
   * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * The schedule according to which Jobs will be created
   */
  schedule: Schedule;
  /**
   * Specifies details of the Jobs to be created on a schedule.
   */
  jobSpecification: JobSpecification;
  /**
   * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
}

/**
 * The result of listing the Job Schedules in an Account.
 */
export interface CloudJobScheduleListResult {
  /**
   * The list of Job Schedules.
   */
  value?: CloudJobSchedule[];
  /**
   * The URL to get the next set of results.
   */
  odataNextLink?: string;
}

/**
 * An Azure Batch Job.
 */
export interface CloudJob {
  /**
   * The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).
   */
  id?: string;
  /**
   * The display name for the Job.
   */
  displayName?: string;
  /**
   * Whether Tasks in the Job can define dependencies on each other. The default is false.
   */
  usesTaskDependencies?: boolean;
  /**
   * The URL of the Job.
   */
  url?: string;
  /**
   * This is an opaque string. You can use it to detect whether the Job has changed between requests. In particular, you can be pass the ETag when updating a Job to specify that your changes should take effect only if nobody else has modified the Job in the meantime.
   */
  eTag?: string;
  /**
   * This is the last time at which the Job level data, such as the Job state or priority, changed. It does not factor in task-level changes such as adding new Tasks or Tasks changing state.
   */
  lastModified?: Date;
  /**
   * The creation time of the Job.
   */
  creationTime?: Date;
  /**
   * The state of the Job.
   */
  state?: JobState;
  /**
   * The time at which the Job entered its current state.
   */
  stateTransitionTime?: Date;
  /**
   * This property is not set if the Job is in its initial Active state.
   */
  previousState?: JobState;
  /**
   * This property is not set if the Job is in its initial Active state.
   */
  previousStateTransitionTime?: Date;
  /**
   * Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
   */
  priority?: number;
  /**
   * The execution constraints for a Job.
   */
  constraints?: JobConstraints;
  /**
   * The Job Manager Task is automatically started when the Job is created. The Batch service tries to schedule the Job Manager Task before any other Tasks in the Job. When shrinking a Pool, the Batch service tries to preserve Nodes where Job Manager Tasks are running for as long as possible (that is, Compute Nodes running 'normal' Tasks are removed before Compute Nodes running Job Manager Tasks). When a Job Manager Task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle Compute Nodes available, the system may terminate one of the running Tasks in the Pool and return it to the queue in order to make room for the Job Manager Task to restart. Note that a Job Manager Task in one Job does not have priority over Tasks in other Jobs. Across Jobs, only Job level priorities are observed. For example, if a Job Manager in a priority 0 Job needs to be restarted, it will not displace Tasks of a priority 1 Job. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing.
   */
  jobManagerTask?: JobManagerTask;
  /**
   * The Job Preparation Task is a special Task run on each Compute Node before any other Task of the Job.
   */
  jobPreparationTask?: JobPreparationTask;
  /**
   * The Job Release Task is a special Task run at the end of the Job on each Compute Node that has run any other Task of the Job.
   */
  jobReleaseTask?: JobReleaseTask;
  /**
   * Individual Tasks can override an environment setting specified here by specifying the same setting name with a different value.
   */
  commonEnvironmentSettings?: EnvironmentSetting[];
  /**
   * Specifies how a Job should be assigned to a Pool.
   */
  poolInfo?: PoolInformation;
  /**
   * The default is noaction.
   */
  onAllTasksComplete?: OnAllTasksComplete;
  /**
   * A Task is considered to have failed if has a failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the Task, for example due to a resource file download error. The default is noaction.
   */
  onTaskFailure?: OnTaskFailure;
  /**
   * The network configuration for the Job.
   */
  networkConfiguration?: JobNetworkConfiguration;
  /**
   * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
  /**
   * Contains information about the execution of a Job in the Azure Batch service.
   */
  executionInfo?: JobExecutionInformation;
  /**
   * This property is populated only if the CloudJob was retrieved with an expand clause including the 'stats' attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
   */
  stats?: JobStatistics;
}

/**
 * Contains information about the execution of a Job in the Azure Batch service.
 */
export interface JobExecutionInformation {
  /**
   * This is the time at which the Job was created.
   */
  startTime: Date;
  /**
   * This property is set only if the Job is in the completed state.
   */
  endTime?: Date;
  /**
   * This element contains the actual Pool where the Job is assigned. When you get Job details from the service, they also contain a poolInfo element, which contains the Pool configuration data from when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that auto Pool.
   */
  poolId?: string;
  /**
   * This property is not set if there was no error starting the Job.
   */
  schedulingError?: JobSchedulingError;
  /**
   * This property is set only if the Job is in the completed state. If the Batch service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint. TerminateJobSchedule - the Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the Job's onAllTasksComplete attribute is set to terminatejob, and all Tasks in the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to performExitOptionsJobAction, and a Task in the Job failed with an exit condition that specified a jobAction of terminatejob. Any other string is a user-defined reason specified in a call to the 'Terminate a Job' operation.
   */
  terminateReason?: string;
}

/**
 * An error encountered by the Batch service when scheduling a Job.
 */
export interface JobSchedulingError {
  /**
   * The category of the error.
   */
  category: ErrorCategory;
  /**
   * An identifier for the Job scheduling error. Codes are invariant and are intended to be consumed programmatically.
   */
  code?: string;
  /**
   * A message describing the Job scheduling error, intended to be suitable for display in a user interface.
   */
  message?: string;
  /**
   * A list of additional error details related to the scheduling error.
   */
  details?: NameValuePair[];
}

/**
 * The set of changes to be made to a Job.
 */
export interface JobPatchParameter {
  /**
   * Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, the priority of the Job is left unchanged.
   */
  priority?: number;
  /**
   * If omitted, the completion behavior is left unchanged. You may not change the value from terminatejob to noaction - that is, once you have engaged automatic Job termination, you cannot turn it off again. If you try to do this, the request fails with an 'invalid property value' error response; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  onAllTasksComplete?: OnAllTasksComplete;
  /**
   * If omitted, the existing execution constraints are left unchanged.
   */
  constraints?: JobConstraints;
  /**
   * You may change the Pool for a Job only when the Job is disabled. The Patch Job call will fail if you include the poolInfo element and the Job is not disabled. If you specify an autoPoolSpecification in the poolInfo, only the keepAlive property of the autoPoolSpecification can be updated, and then only if the autoPoolSpecification has a poolLifetimeOption of Job (other job properties can be updated as normal). If omitted, the Job continues to run on its current Pool.
   */
  poolInfo?: PoolInformation;
  /**
   * If omitted, the existing Job metadata is left unchanged.
   */
  metadata?: MetadataItem[];
}

/**
 * The set of changes to be made to a Job.
 */
export interface JobUpdateParameter {
  /**
   * Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, it is set to the default value 0.
   */
  priority?: number;
  /**
   * If omitted, the constraints are cleared.
   */
  constraints?: JobConstraints;
  /**
   * You may change the Pool for a Job only when the Job is disabled. The Update Job call will fail if you include the poolInfo element and the Job is not disabled. If you specify an autoPoolSpecification in the poolInfo, only the keepAlive property of the autoPoolSpecification can be updated, and then only if the autoPoolSpecification has a poolLifetimeOption of Job (other job properties can be updated as normal).
   */
  poolInfo: PoolInformation;
  /**
   * If omitted, it takes the default value of an empty list; in effect, any existing metadata is deleted.
   */
  metadata?: MetadataItem[];
  /**
   * If omitted, the completion behavior is set to noaction. If the current value is terminatejob, this is an error because a Job's completion behavior may not be changed from terminatejob to noaction. You may not change the value from terminatejob to noaction - that is, once you have engaged automatic Job termination, you cannot turn it off again. If you try to do this, the request fails and Batch returns status code 400 (Bad Request) and an 'invalid property value' error response. If you do not specify this element in a PUT request, it is equivalent to passing noaction. This is an error if the current value is terminatejob.
   */
  onAllTasksComplete?: OnAllTasksComplete;
}

/**
 * Options when disabling a Job.
 */
export interface JobDisableParameter {
  /**
   * What to do with active Tasks associated with the Job.
   */
  disableTasks: DisableJobOption;
}

/**
 * Options when terminating a Job.
 */
export interface JobTerminateParameter {
  /**
   * The text you want to appear as the Job's TerminateReason. The default is 'UserTerminate'.
   */
  terminateReason?: string;
}

/**
 * An Azure Batch Job to add.
 */
export interface JobAddParameter {
  /**
   * The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).
   */
  id: string;
  /**
   * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
   */
  priority?: number;
  /**
   * The execution constraints for the Job.
   */
  constraints?: JobConstraints;
  /**
   * If the Job does not specify a Job Manager Task, the user must explicitly add Tasks to the Job. If the Job does specify a Job Manager Task, the Batch service creates the Job Manager Task when the Job is created, and will try to schedule the Job Manager Task before scheduling other Tasks in the Job. The Job Manager Task's typical purpose is to control and/or monitor Job execution, for example by deciding what additional Tasks to run, determining when the work is complete, etc. (However, a Job Manager Task is not restricted to these activities - it is a fully-fledged Task in the system and perform whatever actions are required for the Job.) For example, a Job Manager Task might download a file specified as a parameter, analyze the contents of that file and submit additional Tasks based on those contents.
   */
  jobManagerTask?: JobManagerTask;
  /**
   * If a Job has a Job Preparation Task, the Batch service will run the Job Preparation Task on a Node before starting any Tasks of that Job on that Compute Node.
   */
  jobPreparationTask?: JobPreparationTask;
  /**
   * A Job Release Task cannot be specified without also specifying a Job Preparation Task for the Job. The Batch service runs the Job Release Task on the Nodes that have run the Job Preparation Task. The primary purpose of the Job Release Task is to undo changes to Compute Nodes made by the Job Preparation Task. Example activities include deleting local files, or shutting down services that were started as part of Job preparation.
   */
  jobReleaseTask?: JobReleaseTask;
  /**
   * Individual Tasks can override an environment setting specified here by specifying the same setting name with a different value.
   */
  commonEnvironmentSettings?: EnvironmentSetting[];
  /**
   * Specifies how a Job should be assigned to a Pool.
   */
  poolInfo: PoolInformation;
  /**
   * Note that if a Job contains no Tasks, then all Tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic Job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete to terminatejob once you have finished adding Tasks. The default is noaction.
   */
  onAllTasksComplete?: OnAllTasksComplete;
  /**
   * A Task is considered to have failed if has a failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the Task, for example due to a resource file download error. The default is noaction.
   */
  onTaskFailure?: OnTaskFailure;
  /**
   * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
  /**
   * Whether Tasks in the Job can define dependencies on each other. The default is false.
   */
  usesTaskDependencies?: boolean;
  /**
   * The network configuration for the Job.
   */
  networkConfiguration?: JobNetworkConfiguration;
}

/**
 * The result of listing the Jobs in an Account.
 */
export interface CloudJobListResult {
  /**
   * The list of Jobs.
   */
  value?: CloudJob[];
  /**
   * The URL to get the next set of results.
   */
  odataNextLink?: string;
}

/**
 * The result of listing the status of the Job Preparation and Job Release Tasks for a Job.
 */
export interface CloudJobListPreparationAndReleaseTaskStatusResult {
  /**
   * A list of Job Preparation and Job Release Task execution information.
   */
  value?: JobPreparationAndReleaseTaskExecutionInformation[];
  /**
   * The URL to get the next set of results.
   */
  odataNextLink?: string;
}

/**
 * The status of the Job Preparation and Job Release Tasks on a Compute Node.
 */
export interface JobPreparationAndReleaseTaskExecutionInformation {
  /**
   * The ID of the Pool containing the Compute Node to which this entry refers.
   */
  poolId?: string;
  /**
   * The ID of the Compute Node to which this entry refers.
   */
  nodeId?: string;
  /**
   * The URL of the Compute Node to which this entry refers.
   */
  nodeUrl?: string;
  /**
   * Contains information about the execution of a Job Preparation Task on a Compute Node.
   */
  jobPreparationTaskExecutionInfo?: JobPreparationTaskExecutionInformation;
  /**
   * This property is set only if the Job Release Task has run on the Compute Node.
   */
  jobReleaseTaskExecutionInfo?: JobReleaseTaskExecutionInformation;
}

/**
 * Contains information about the execution of a Job Preparation Task on a Compute Node.
 */
export interface JobPreparationTaskExecutionInformation {
  /**
   * If the Task has been restarted or retried, this is the most recent time at which the Task started running.
   */
  startTime: Date;
  /**
   * This property is set only if the Task is in the Completed state.
   */
  endTime?: Date;
  /**
   * The current state of the Job Preparation Task on the Compute Node.
   */
  state: JobPreparationTaskState;
  /**
   * The root directory of the Job Preparation Task on the Compute Node. You can use this path to retrieve files created by the Task, such as log files.
   */
  taskRootDirectory?: string;
  /**
   * The URL to the root directory of the Job Preparation Task on the Compute Node.
   */
  taskRootDirectoryUrl?: string;
  /**
   * This parameter is returned only if the Task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such as when a process is forcibly terminated.
   */
  exitCode?: number;
  /**
   * This property is set only if the Task runs in a container context.
   */
  containerInfo?: TaskContainerExecutionInformation;
  /**
   * This property is set only if the Task is in the completed state and encountered a failure.
   */
  failureInfo?: TaskFailureInformation;
  /**
   * Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints.
   */
  retryCount: number;
  /**
   * This property is set only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.
   */
  lastRetryTime?: Date;
  /**
   * If the value is 'failed', then the details of the failure can be found in the failureInfo property.
   */
  result?: TaskExecutionResult;
}

/**
 * Contains information about the container which a Task is executing.
 */
export interface TaskContainerExecutionInformation {
  /**
   * The ID of the container.
   */
  containerId?: string;
  /**
   * This is the state of the container according to the Docker service. It is equivalent to the status field returned by "docker inspect".
   */
  state?: string;
  /**
   * This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by "docker inspect".
   */
  error?: string;
}

/**
 * Information about a Task failure.
 */
export interface TaskFailureInformation {
  /**
   * The category of the error.
   */
  category: ErrorCategory;
  /**
   * An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically.
   */
  code?: string;
  /**
   * A message describing the Task error, intended to be suitable for display in a user interface.
   */
  message?: string;
  /**
   * A list of additional details related to the error.
   */
  details?: NameValuePair[];
}

/**
 * Contains information about the execution of a Job Release Task on a Compute Node.
 */
export interface JobReleaseTaskExecutionInformation {
  /**
   * If the Task has been restarted or retried, this is the most recent time at which the Task started running.
   */
  startTime: Date;
  /**
   * This property is set only if the Task is in the Completed state.
   */
  endTime?: Date;
  /**
   * The current state of the Job Release Task on the Compute Node.
   */
  state: JobReleaseTaskState;
  /**
   * The root directory of the Job Release Task on the Compute Node. You can use this path to retrieve files created by the Task, such as log files.
   */
  taskRootDirectory?: string;
  /**
   * The URL to the root directory of the Job Release Task on the Compute Node.
   */
  taskRootDirectoryUrl?: string;
  /**
   * This parameter is returned only if the Task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such as when a process is forcibly terminated.
   */
  exitCode?: number;
  /**
   * This property is set only if the Task runs in a container context.
   */
  containerInfo?: TaskContainerExecutionInformation;
  /**
   * This property is set only if the Task is in the completed state and encountered a failure.
   */
  failureInfo?: TaskFailureInformation;
  /**
   * If the value is 'failed', then the details of the failure can be found in the failureInfo property.
   */
  result?: TaskExecutionResult;
}

/**
 * The Task counts for a Job.
 */
export interface TaskCounts {
  /**
   * The number of Tasks in the active state.
   */
  active: number;
  /**
   * The number of Tasks in the running or preparing state.
   */
  running: number;
  /**
   * The number of Tasks in the completed state.
   */
  completed: number;
  /**
   * The number of Tasks which succeeded. A Task succeeds if its result (found in the executionInfo property) is 'success'.
   */
  succeeded: number;
  /**
   * The number of Tasks which failed. A Task fails if its result (found in the executionInfo property) is 'failure'.
   */
  failed: number;
}

/**
 * A Pool in the Azure Batch service to add.
 */
export interface PoolAddParameter {
  /**
   * The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two Pool IDs within an Account that differ only by case).
   */
  id: string;
  /**
   * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * For information about available sizes of virtual machines for Cloud Services Pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for Pools using Images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
   */
  vmSize: string;
  /**
   * This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch Account was created with its poolAllocationMode property set to 'UserSubscription'.
   */
  cloudServiceConfiguration?: CloudServiceConfiguration;
  /**
   * This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
   */
  virtualMachineConfiguration?: VirtualMachineConfiguration;
  /**
   * This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  resizeTimeout?: string;
  /**
   * This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
   */
  targetDedicatedNodes?: number;
  /**
   * This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
   */
  targetLowPriorityNodes?: number;
  /**
   * If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.
   */
  enableAutoScale?: boolean;
  /**
   * This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the Pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see 'Automatically scale Compute Nodes in an Azure Batch Pool' (https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/).
   */
  autoScaleFormula?: string;
  /**
   * The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  autoScaleEvaluationInterval?: string;
  /**
   * Enabling inter-node communication limits the maximum size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching its desired size. The default value is false.
   */
  enableInterNodeCommunication?: boolean;
  /**
   * The network configuration for a Pool.
   */
  networkConfiguration?: NetworkConfiguration;
  /**
   * The Task runs when the Compute Node is added to the Pool or when the Compute Node is restarted.
   */
  startTask?: StartTask;
  /**
   * For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
   */
  certificateReferences?: CertificateReference[];
  /**
   * Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail.
   */
  applicationLicenses?: string[];
  /**
   * The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the Pool or 256.
   */
  maxTasksPerNode?: number;
  /**
   * If not specified, the default is spread.
   */
  taskSchedulingPolicy?: TaskSchedulingPolicy;
  /**
   * The list of user Accounts to be created on each Compute Node in the Pool.
   */
  userAccounts?: UserAccount[];
  /**
   * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
  /**
   * Mount the storage using Azure fileshare, NFS, CIFS or Blobfuse based file system.
   */
  mountConfiguration?: MountConfiguration[];
}

/**
 * The result of listing the Pools in an Account.
 */
export interface CloudPoolListResult {
  /**
   * The list of Pools.
   */
  value?: CloudPool[];
  /**
   * The URL to get the next set of results.
   */
  odataNextLink?: string;
}

/**
 * A Pool in the Azure Batch service.
 */
export interface CloudPool {
  /**
   * The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).
   */
  id?: string;
  /**
   * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * The URL of the Pool.
   */
  url?: string;
  /**
   * This is an opaque string. You can use it to detect whether the Pool has changed between requests. In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody else has modified the Pool in the meantime.
   */
  eTag?: string;
  /**
   * This is the last time at which the Pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.
   */
  lastModified?: Date;
  /**
   * The creation time of the Pool.
   */
  creationTime?: Date;
  /**
   * The current state of the Pool.
   */
  state?: PoolState;
  /**
   * The time at which the Pool entered its current state.
   */
  stateTransitionTime?: Date;
  /**
   * Whether the Pool is resizing.
   */
  allocationState?: AllocationState;
  /**
   * The time at which the Pool entered its current allocation state.
   */
  allocationStateTransitionTime?: Date;
  /**
   * For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
   */
  vmSize?: string;
  /**
   * This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch Account was created with its poolAllocationMode property set to 'UserSubscription'.
   */
  cloudServiceConfiguration?: CloudServiceConfiguration;
  /**
   * This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
   */
  virtualMachineConfiguration?: VirtualMachineConfiguration;
  /**
   * This is the timeout for the most recent resize operation. (The initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.
   */
  resizeTimeout?: string;
  /**
   * This property is set only if one or more errors occurred during the last Pool resize, and only when the Pool allocationState is Steady.
   */
  resizeErrors?: ResizeError[];
  /**
   * The number of dedicated Compute Nodes currently in the Pool.
   */
  currentDedicatedNodes?: number;
  /**
   * Low-priority Compute Nodes which have been preempted are included in this count.
   */
  currentLowPriorityNodes?: number;
  /**
   * The desired number of dedicated Compute Nodes in the Pool.
   */
  targetDedicatedNodes?: number;
  /**
   * The desired number of low-priority Compute Nodes in the Pool.
   */
  targetLowPriorityNodes?: number;
  /**
   * If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.
   */
  enableAutoScale?: boolean;
  /**
   * This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
   */
  autoScaleFormula?: string;
  /**
   * This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
   */
  autoScaleEvaluationInterval?: string;
  /**
   * This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
   */
  autoScaleRun?: AutoScaleRun;
  /**
   * This imposes restrictions on which Compute Nodes can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be allocated in the Pool.
   */
  enableInterNodeCommunication?: boolean;
  /**
   * The network configuration for a Pool.
   */
  networkConfiguration?: NetworkConfiguration;
  /**
   * Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
   */
  startTask?: StartTask;
  /**
   * For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
   */
  certificateReferences?: CertificateReference[];
  /**
   * Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail.
   */
  applicationLicenses?: string[];
  /**
   * The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the Pool or 256.
   */
  maxTasksPerNode?: number;
  /**
   * If not specified, the default is spread.
   */
  taskSchedulingPolicy?: TaskSchedulingPolicy;
  /**
   * The list of user Accounts to be created on each Compute Node in the Pool.
   */
  userAccounts?: UserAccount[];
  /**
   * A list of name-value pairs associated with the Pool as metadata.
   */
  metadata?: MetadataItem[];
  /**
   * This property is populated only if the CloudPool was retrieved with an expand clause including the 'stats' attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
   */
  stats?: PoolStatistics;
  /**
   * This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
   */
  mountConfiguration?: MountConfiguration[];
}

/**
 * An error that occurred when resizing a Pool.
 */
export interface ResizeError {
  /**
   * An identifier for the Pool resize error. Codes are invariant and are intended to be consumed programmatically.
   */
  code?: string;
  /**
   * A message describing the Pool resize error, intended to be suitable for display in a user interface.
   */
  message?: string;
  /**
   * A list of additional error details related to the Pool resize error.
   */
  values?: NameValuePair[];
}

/**
 * The results and errors from an execution of a Pool autoscale formula.
 */
export interface AutoScaleRun {
  /**
   * The time at which the autoscale formula was last evaluated.
   */
  timestamp: Date;
  /**
   * Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
   */
  results?: string;
  /**
   * An error that occurred when executing or evaluating a Pool autoscale formula.
   */
  error?: AutoScaleRunError;
}

/**
 * An error that occurred when executing or evaluating a Pool autoscale formula.
 */
export interface AutoScaleRunError {
  /**
   * An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
   */
  code?: string;
  /**
   * A message describing the autoscale error, intended to be suitable for display in a user interface.
   */
  message?: string;
  /**
   * A list of additional error details related to the autoscale error.
   */
  values?: NameValuePair[];
}

/**
 * The set of changes to be made to a Pool.
 */
export interface PoolPatchParameter {
  /**
   * If this element is present, it overwrites any existing StartTask. If omitted, any existing StartTask is left unchanged.
   */
  startTask?: StartTask;
  /**
   * If this element is present, it replaces any existing Certificate references configured on the Pool. If omitted, any existing Certificate references are left unchanged. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
   */
  certificateReferences?: CertificateReference[];
  /**
   * Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. If this element is present, it replaces any existing Package references. If you specify an empty collection, then all Package references are removed from the Pool. If omitted, any existing Package references are left unchanged.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * If this element is present, it replaces any existing metadata configured on the Pool. If you specify an empty collection, any metadata is removed from the Pool. If omitted, any existing metadata is left unchanged.
   */
  metadata?: MetadataItem[];
}

/**
 * Options for enabling automatic scaling on a Pool.
 */
export interface PoolEnableAutoScaleParameter {
  /**
   * The formula is checked for validity before it is applied to the Pool. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see Automatically scale Compute Nodes in an Azure Batch Pool (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
   */
  autoScaleFormula?: string;
  /**
   * The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If you specify a new interval, then the existing autoscale evaluation schedule will be stopped and a new autoscale evaluation schedule will be started, with its starting time being the time when this request was issued.
   */
  autoScaleEvaluationInterval?: string;
}

/**
 * Options for evaluating an automatic scaling formula on a Pool.
 */
export interface PoolEvaluateAutoScaleParameter {
  /**
   * The formula is validated and its results calculated, but it is not applied to the Pool. To apply the formula to the Pool, 'Enable automatic scaling on a Pool'. For more information about specifying this formula, see Automatically scale Compute Nodes in an Azure Batch Pool (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
   */
  autoScaleFormula: string;
}

/**
 * Options for changing the size of a Pool.
 */
export interface PoolResizeParameter {
  /**
   * The desired number of dedicated Compute Nodes in the Pool.
   */
  targetDedicatedNodes?: number;
  /**
   * The desired number of low-priority Compute Nodes in the Pool.
   */
  targetLowPriorityNodes?: number;
  /**
   * The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  resizeTimeout?: string;
  /**
   * The default value is requeue.
   */
  nodeDeallocationOption?: ComputeNodeDeallocationOption;
}

/**
 * The set of changes to be made to a Pool.
 */
export interface PoolUpdatePropertiesParameter {
  /**
   * If this element is present, it overwrites any existing StartTask. If omitted, any existing StartTask is removed from the Pool.
   */
  startTask?: StartTask;
  /**
   * This list replaces any existing Certificate references configured on the Pool. If you specify an empty collection, any existing Certificate references are removed from the Pool. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
   */
  certificateReferences: CertificateReference[];
  /**
   * The list replaces any existing Application Package references on the Pool. Changes to Application Package references affect all new Compute Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Application Package references on any given Pool. If omitted, or if you specify an empty collection, any existing Application Packages references are removed from the Pool. A maximum of 10 references may be specified on a given Pool.
   */
  applicationPackageReferences: ApplicationPackageReference[];
  /**
   * This list replaces any existing metadata configured on the Pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the Pool.
   */
  metadata: MetadataItem[];
}

/**
 * Options for removing Compute Nodes from a Pool.
 */
export interface NodeRemoveParameter {
  /**
   * A list containing the IDs of the Compute Nodes to be removed from the specified Pool.
   */
  nodeList: string[];
  /**
   * The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  resizeTimeout?: string;
  /**
   * The default value is requeue.
   */
  nodeDeallocationOption?: ComputeNodeDeallocationOption;
}

/**
 * Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing.
 */
export interface TaskAddParameter {
  /**
   * The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a Job that differ only by case).
   */
  id: string;
  /**
   * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * For multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   */
  commandLine: string;
  /**
   * If the Pool that will run this Task has containerConfiguration set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
   */
  containerSettings?: TaskContainerSettings;
  /**
   * How the Batch service should respond when the Task completes.
   */
  exitConditions?: ExitConditions;
  /**
   * For multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
   */
  resourceFiles?: ResourceFile[];
  /**
   * For multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.
   */
  outputFiles?: OutputFile[];
  /**
   * A list of environment variable settings for the Task.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * A locality hint that can be used by the Batch service to select a Compute Node on which to start a Task.
   */
  affinityInfo?: AffinityInformation;
  /**
   * If you do not specify constraints, the maxTaskRetryCount is the maxTaskRetryCount specified for the Job, the maxWallClockTime is infinite, and the retentionTime is 7 days.
   */
  constraints?: TaskConstraints;
  /**
   * If omitted, the Task runs as a non-administrative user unique to the Task.
   */
  userIdentity?: UserIdentity;
  /**
   * Multi-instance Tasks are commonly used to support MPI Tasks. In the MPI case, if any of the subtasks fail (for example due to exiting with a non-zero exit code) the entire multi-instance Task fails. The multi-instance Task is then terminated and retried, up to its retry limit.
   */
  multiInstanceSettings?: MultiInstanceSettings;
  /**
   * This Task will not be scheduled until all Tasks that it depends on have completed successfully. If any of those Tasks fail and exhaust their retry counts, this Task will never be scheduled. If the Job does not have usesTaskDependencies set to true, and this element is present, the request fails with error code TaskDependenciesNotSpecifiedOnJob.
   */
  dependsOn?: TaskDependencies;
  /**
   * Application packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * If this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job.
   */
  authenticationTokenSettings?: AuthenticationTokenSettings;
}

/**
 * Specifies how the Batch service should respond when the Task completes.
 */
export interface ExitConditions {
  /**
   * A list of individual Task exit codes and how the Batch service should respond to them.
   */
  exitCodes?: ExitCodeMapping[];
  /**
   * A list of Task exit code ranges and how the Batch service should respond to them.
   */
  exitCodeRanges?: ExitCodeRangeMapping[];
  /**
   * Specifies how the Batch service responds to a particular exit condition.
   */
  preProcessingError?: ExitOptions;
  /**
   * If the Task exited with an exit code that was specified via exitCodes or exitCodeRanges, and then encountered a file upload error, then the action specified by the exit code takes precedence.
   */
  fileUploadError?: ExitOptions;
  /**
   * This value is used if the Task exits with any nonzero exit code not listed in the exitCodes or exitCodeRanges collection, with a pre-processing error if the preProcessingError property is not present, or with a file upload error if the fileUploadError property is not present. If you want non-default behavior on exit code 0, you must list it explicitly using the exitCodes or exitCodeRanges collection.
   */
  default?: ExitOptions;
}

/**
 * How the Batch service should respond if a Task exits with a particular exit code.
 */
export interface ExitCodeMapping {
  /**
   * A process exit code.
   */
  code: number;
  /**
   * Specifies how the Batch service responds to a particular exit condition.
   */
  exitOptions: ExitOptions;
}

/**
 * Specifies how the Batch service responds to a particular exit condition.
 */
export interface ExitOptions {
  /**
   * The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  jobAction?: JobAction;
  /**
   * Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.
   */
  dependencyAction?: DependencyAction;
}

/**
 * A range of exit codes and how the Batch service should respond to exit codes within that range.
 */
export interface ExitCodeRangeMapping {
  /**
   * The first exit code in the range.
   */
  start: number;
  /**
   * The last exit code in the range.
   */
  end: number;
  /**
   * Specifies how the Batch service responds to a particular exit condition.
   */
  exitOptions: ExitOptions;
}

/**
 * A locality hint that can be used by the Batch service to select a Compute Node on which to start a Task.
 */
export interface AffinityInformation {
  /**
   * You can pass the affinityId of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.
   */
  affinityId: string;
}

/**
 * Multi-instance Tasks are commonly used to support MPI Tasks. In the MPI case, if any of the subtasks fail (for example due to exiting with a non-zero exit code) the entire multi-instance Task fails. The multi-instance Task is then terminated and retried, up to its retry limit.
 */
export interface MultiInstanceSettings {
  /**
   * If omitted, the default is 1.
   */
  numberOfInstances?: number;
  /**
   * A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages.
   */
  coordinationCommandLine: string;
  /**
   * The difference between common resource files and Task resource files is that common resource files are downloaded for all subtasks including the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above the working directory).  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
   */
  commonResourceFiles?: ResourceFile[];
}

/**
 * Specifies any dependencies of a Task. Any Task that is explicitly specified or within a dependency range must complete before the dependant Task will be scheduled.
 */
export interface TaskDependencies {
  /**
   * The taskIds collection is limited to 64000 characters total (i.e. the combined length of all Task IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong. In this case consider using Task ID ranges instead.
   */
  taskIds?: string[];
  /**
   * The list of Task ID ranges that this Task depends on. All Tasks in all ranges must complete successfully before the dependent Task can be scheduled.
   */
  taskIdRanges?: TaskIdRange[];
}

/**
 * The start and end of the range are inclusive. For example, if a range has start 9 and end 12, then it represents Tasks '9', '10', '11' and '12'.
 */
export interface TaskIdRange {
  /**
   * The first Task ID in the range.
   */
  start: number;
  /**
   * The last Task ID in the range.
   */
  end: number;
}

/**
 * The result of listing the Tasks in a Job.
 */
export interface CloudTaskListResult {
  /**
   * The list of Tasks.
   */
  value?: CloudTask[];
  /**
   * The URL to get the next set of results.
   */
  odataNextLink?: string;
}

/**
 * Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing.
 */
export interface CloudTask {
  /**
   * The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
   */
  id?: string;
  /**
   * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * The URL of the Task.
   */
  url?: string;
  /**
   * This is an opaque string. You can use it to detect whether the Task has changed between requests. In particular, you can be pass the ETag when updating a Task to specify that your changes should take effect only if nobody else has modified the Task in the meantime.
   */
  eTag?: string;
  /**
   * The last modified time of the Task.
   */
  lastModified?: Date;
  /**
   * The creation time of the Task.
   */
  creationTime?: Date;
  /**
   * How the Batch service should respond when the Task completes.
   */
  exitConditions?: ExitConditions;
  /**
   * The state of the Task.
   */
  state?: TaskState;
  /**
   * The time at which the Task entered its current state.
   */
  stateTransitionTime?: Date;
  /**
   * This property is not set if the Task is in its initial Active state.
   */
  previousState?: TaskState;
  /**
   * This property is not set if the Task is in its initial Active state.
   */
  previousStateTransitionTime?: Date;
  /**
   * For multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   */
  commandLine?: string;
  /**
   * If the Pool that will run this Task has containerConfiguration set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
   */
  containerSettings?: TaskContainerSettings;
  /**
   * For multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
   */
  resourceFiles?: ResourceFile[];
  /**
   * For multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.
   */
  outputFiles?: OutputFile[];
  /**
   * A list of environment variable settings for the Task.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * A locality hint that can be used by the Batch service to select a Compute Node on which to start a Task.
   */
  affinityInfo?: AffinityInformation;
  /**
   * Execution constraints to apply to a Task.
   */
  constraints?: TaskConstraints;
  /**
   * If omitted, the Task runs as a non-administrative user unique to the Task.
   */
  userIdentity?: UserIdentity;
  /**
   * Information about the execution of a Task.
   */
  executionInfo?: TaskExecutionInformation;
  /**
   * Information about the Compute Node on which a Task ran.
   */
  nodeInfo?: ComputeNodeInformation;
  /**
   * Multi-instance Tasks are commonly used to support MPI Tasks. In the MPI case, if any of the subtasks fail (for example due to exiting with a non-zero exit code) the entire multi-instance Task fails. The multi-instance Task is then terminated and retried, up to its retry limit.
   */
  multiInstanceSettings?: MultiInstanceSettings;
  /**
   * Resource usage statistics for a Task.
   */
  stats?: TaskStatistics;
  /**
   * This Task will not be scheduled until all Tasks that it depends on have completed successfully. If any of those Tasks fail and exhaust their retry counts, this Task will never be scheduled.
   */
  dependsOn?: TaskDependencies;
  /**
   * Application packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * If this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job.
   */
  authenticationTokenSettings?: AuthenticationTokenSettings;
}

/**
 * Information about the execution of a Task.
 */
export interface TaskExecutionInformation {
  /**
   * 'Running' corresponds to the running state, so if the Task specifies resource files or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If the Task has been restarted or retried, this is the most recent time at which the Task started running. This property is present only for Tasks that are in the running or completed state.
   */
  startTime?: Date;
  /**
   * This property is set only if the Task is in the Completed state.
   */
  endTime?: Date;
  /**
   * This property is set only if the Task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the Task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
   */
  exitCode?: number;
  /**
   * This property is set only if the Task runs in a container context.
   */
  containerInfo?: TaskContainerExecutionInformation;
  /**
   * This property is set only if the Task is in the completed state and encountered a failure.
   */
  failureInfo?: TaskFailureInformation;
  /**
   * Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints.
   */
  retryCount: number;
  /**
   * This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.
   */
  lastRetryTime?: Date;
  /**
   * When the user removes Compute Nodes from a Pool (by resizing/shrinking the pool) or when the Job is being disabled, the user can specify that running Tasks on the Compute Nodes be requeued for execution. This count tracks how many times the Task has been requeued for these reasons.
   */
  requeueCount: number;
  /**
   * This property is set only if the requeueCount is nonzero.
   */
  lastRequeueTime?: Date;
  /**
   * If the value is 'failed', then the details of the failure can be found in the failureInfo property.
   */
  result?: TaskExecutionResult;
}

/**
 * Information about the Compute Node on which a Task ran.
 */
export interface ComputeNodeInformation {
  /**
   * An identifier for the Node on which the Task ran, which can be passed when adding a Task to request that the Task be scheduled on this Compute Node.
   */
  affinityId?: string;
  /**
   * The URL of the Compute Node on which the Task ran.
   */
  nodeUrl?: string;
  /**
   * The ID of the Pool on which the Task ran.
   */
  poolId?: string;
  /**
   * The ID of the Compute Node on which the Task ran.
   */
  nodeId?: string;
  /**
   * The root directory of the Task on the Compute Node.
   */
  taskRootDirectory?: string;
  /**
   * The URL to the root directory of the Task on the Compute Node.
   */
  taskRootDirectoryUrl?: string;
}

/**
 * Resource usage statistics for a Task.
 */
export interface TaskStatistics {
  /**
   * The URL of the statistics.
   */
  url: string;
  /**
   * The start time of the time range covered by the statistics.
   */
  startTime: Date;
  /**
   * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
   */
  lastUpdateTime: Date;
  /**
   * The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
   */
  userCPUTime: string;
  /**
   * The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
   */
  kernelCPUTime: string;
  /**
   * The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If the Task was retried, this includes the wall clock time of all the Task retries.
   */
  wallClockTime: string;
  /**
   * The total number of disk read operations made by the Task.
   */
  readIOps: number;
  /**
   * The total number of disk write operations made by the Task.
   */
  writeIOps: number;
  /**
   * The total gibibytes read from disk by the Task.
   */
  readIOGiB: number;
  /**
   * The total gibibytes written to disk by the Task.
   */
  writeIOGiB: number;
  /**
   * The total wait time of the Task. The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.)
   */
  waitTime: string;
}

/**
 * A collection of Azure Batch Tasks to add.
 */
export interface TaskAddCollectionParameter {
  /**
   * The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks.
   */
  value: TaskAddParameter[];
}

/**
 * The result of adding a collection of Tasks to a Job.
 */
export interface TaskAddCollectionResult {
  /**
   * The results of the add Task collection operation.
   */
  value?: TaskAddResult[];
}

/**
 * Result for a single Task added as part of an add Task collection operation.
 */
export interface TaskAddResult {
  /**
   * The status of the add Task request.
   */
  status: TaskAddStatus;
  /**
   * The ID of the Task for which this is the result.
   */
  taskId: string;
  /**
   * You can use this to detect whether the Task has changed between requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take effect only if nobody else has modified the Job in the meantime.
   */
  eTag?: string;
  /**
   * The last modified time of the Task.
   */
  lastModified?: Date;
  /**
   * The URL of the Task, if the Task was successfully added.
   */
  location?: string;
  /**
   * An error response received from the Azure Batch service.
   */
  error?: BatchError;
}

/**
 * The set of changes to be made to a Task.
 */
export interface TaskUpdateParameter {
  /**
   * If omitted, the Task is given the default constraints. For multi-instance Tasks, updating the retention time applies only to the primary Task and not subtasks.
   */
  constraints?: TaskConstraints;
}

/**
 * The result of listing the subtasks of a Task.
 */
export interface CloudTaskListSubtasksResult {
  /**
   * The list of subtasks.
   */
  value?: SubtaskInformation[];
}

/**
 * Information about an Azure Batch subtask.
 */
export interface SubtaskInformation {
  /**
   * The ID of the subtask.
   */
  id?: number;
  /**
   * Information about the Compute Node on which a Task ran.
   */
  nodeInfo?: ComputeNodeInformation;
  /**
   * The time at which the subtask started running. If the subtask has been restarted or retried, this is the most recent time at which the subtask started running.
   */
  startTime?: Date;
  /**
   * This property is set only if the subtask is in the Completed state.
   */
  endTime?: Date;
  /**
   * This property is set only if the subtask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
   */
  exitCode?: number;
  /**
   * This property is set only if the Task runs in a container context.
   */
  containerInfo?: TaskContainerExecutionInformation;
  /**
   * This property is set only if the Task is in the completed state and encountered a failure.
   */
  failureInfo?: TaskFailureInformation;
  /**
   * The state of the subtask.
   */
  state?: SubtaskState;
  /**
   * The time at which the subtask entered its current state.
   */
  stateTransitionTime?: Date;
  /**
   * This property is not set if the subtask is in its initial running state.
   */
  previousState?: SubtaskState;
  /**
   * This property is not set if the subtask is in its initial running state.
   */
  previousStateTransitionTime?: Date;
  /**
   * If the value is 'failed', then the details of the failure can be found in the failureInfo property.
   */
  result?: TaskExecutionResult;
}

/**
 * A user Account for RDP or SSH access on a Compute Node.
 */
export interface ComputeNodeUser {
  /**
   * The user name of the Account.
   */
  name: string;
  /**
   * The default value is false.
   */
  isAdmin?: boolean;
  /**
   * If omitted, the default is 1 day from the current time. For Linux Compute Nodes, the expiryTime has a precision up to a day.
   */
  expiryTime?: Date;
  /**
   * The password is required for Windows Compute Nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows Image reference). For Linux Compute Nodes, the password can optionally be specified along with the sshPublicKey property.
   */
  password?: string;
  /**
   * The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux Compute Nodes. If this is specified for a Windows Compute Node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  sshPublicKey?: string;
}

/**
 * The set of changes to be made to a user Account on a Compute Node.
 */
export interface NodeUpdateUserParameter {
  /**
   * The password is required for Windows Compute Nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows Image reference). For Linux Compute Nodes, the password can optionally be specified along with the sshPublicKey property. If omitted, any existing password is removed.
   */
  password?: string;
  /**
   * If omitted, the default is 1 day from the current time. For Linux Compute Nodes, the expiryTime has a precision up to a day.
   */
  expiryTime?: Date;
  /**
   * The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux Compute Nodes. If this is specified for a Windows Compute Node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If omitted, any existing SSH public key is removed.
   */
  sshPublicKey?: string;
}

/**
 * A Compute Node in the Batch service.
 */
export interface ComputeNode {
  /**
   * Every Compute Node that is added to a Pool is assigned a unique ID. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new Compute Nodes.
   */
  id?: string;
  /**
   * The URL of the Compute Node.
   */
  url?: string;
  /**
   * The low-priority Compute Node has been preempted. Tasks which were running on the Compute Node when it was preempted will be rescheduled when another Compute Node becomes available.
   */
  state?: ComputeNodeState;
  /**
   * Whether the Compute Node is available for Task scheduling.
   */
  schedulingState?: SchedulingState;
  /**
   * The time at which the Compute Node entered its current state.
   */
  stateTransitionTime?: Date;
  /**
   * This property may not be present if the Compute Node state is unusable.
   */
  lastBootTime?: Date;
  /**
   * This is the time when the Compute Node was initially allocated and doesn't change once set. It is not updated when the Compute Node is service healed or preempted.
   */
  allocationTime?: Date;
  /**
   * Every Compute Node that is added to a Pool is assigned a unique IP address. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and the IP address is reclaimed and could be reused for new Compute Nodes.
   */
  ipAddress?: string;
  /**
   * Note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.
   */
  affinityId?: string;
  /**
   * For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
   */
  vmSize?: string;
  /**
   * The total number of Job Tasks completed on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks.
   */
  totalTasksRun?: number;
  /**
   * The total number of currently running Job Tasks on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks.
   */
  runningTasksCount?: number;
  /**
   * The total number of Job Tasks which completed successfully (with exitCode 0) on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks.
   */
  totalTasksSucceeded?: number;
  /**
   * This property is present only if at least one Task has run on this Compute Node since it was assigned to the Pool.
   */
  recentTasks?: TaskInformation[];
  /**
   * Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
   */
  startTask?: StartTask;
  /**
   * Information about a StartTask running on a Compute Node.
   */
  startTaskInfo?: StartTaskInformation;
  /**
   * For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
   */
  certificateReferences?: CertificateReference[];
  /**
   * The list of errors that are currently being encountered by the Compute Node.
   */
  errors?: ComputeNodeError[];
  /**
   * Whether this Compute Node is a dedicated Compute Node. If false, the Compute Node is a low-priority Compute Node.
   */
  isDedicated?: boolean;
  /**
   * The endpoint configuration for the Compute Node.
   */
  endpointConfiguration?: ComputeNodeEndpointConfiguration;
  /**
   * The Batch Compute Node agent is a program that runs on each Compute Node in the Pool and provides Batch capability on the Compute Node.
   */
  nodeAgentInfo?: NodeAgentInformation;
}

/**
 * Information about a Task running on a Compute Node.
 */
export interface TaskInformation {
  /**
   * The URL of the Task.
   */
  taskUrl?: string;
  /**
   * The ID of the Job to which the Task belongs.
   */
  jobId?: string;
  /**
   * The ID of the Task.
   */
  taskId?: string;
  /**
   * The ID of the subtask if the Task is a multi-instance Task.
   */
  subtaskId?: number;
  /**
   * The state of the Task.
   */
  taskState: TaskState;
  /**
   * Information about the execution of a Task.
   */
  executionInfo?: TaskExecutionInformation;
}

/**
 * Information about a StartTask running on a Compute Node.
 */
export interface StartTaskInformation {
  /**
   * The state of the StartTask on the Compute Node.
   */
  state: StartTaskState;
  /**
   * This value is reset every time the Task is restarted or retried (that is, this is the most recent time at which the StartTask started running).
   */
  startTime: Date;
  /**
   * This is the end time of the most recent run of the StartTask, if that run has completed (even if that run failed and a retry is pending). This element is not present if the StartTask is currently running.
   */
  endTime?: Date;
  /**
   * This property is set only if the StartTask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the StartTask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
   */
  exitCode?: number;
  /**
   * This property is set only if the Task runs in a container context.
   */
  containerInfo?: TaskContainerExecutionInformation;
  /**
   * This property is set only if the Task is in the completed state and encountered a failure.
   */
  failureInfo?: TaskFailureInformation;
  /**
   * Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints.
   */
  retryCount: number;
  /**
   * This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.
   */
  lastRetryTime?: Date;
  /**
   * If the value is 'failed', then the details of the failure can be found in the failureInfo property.
   */
  result?: TaskExecutionResult;
}

/**
 * An error encountered by a Compute Node.
 */
export interface ComputeNodeError {
  /**
   * An identifier for the Compute Node error. Codes are invariant and are intended to be consumed programmatically.
   */
  code?: string;
  /**
   * A message describing the Compute Node error, intended to be suitable for display in a user interface.
   */
  message?: string;
  /**
   * The list of additional error details related to the Compute Node error.
   */
  errorDetails?: NameValuePair[];
}

/**
 * The endpoint configuration for the Compute Node.
 */
export interface ComputeNodeEndpointConfiguration {
  /**
   * The list of inbound endpoints that are accessible on the Compute Node.
   */
  inboundEndpoints: InboundEndpoint[];
}

/**
 * An inbound endpoint on a Compute Node.
 */
export interface InboundEndpoint {
  /**
   * The name of the endpoint.
   */
  name: string;
  /**
   * The protocol of the endpoint.
   */
  protocol: InboundEndpointProtocol;
  /**
   * The public IP address of the Compute Node.
   */
  publicIPAddress: string;
  /**
   * The public fully qualified domain name for the Compute Node.
   */
  publicFqdn: string;
  /**
   * The public port number of the endpoint.
   */
  frontendPort: number;
  /**
   * The backend port number of the endpoint.
   */
  backendPort: number;
}

/**
 * The Batch Compute Node agent is a program that runs on each Compute Node in the Pool and provides Batch capability on the Compute Node.
 */
export interface NodeAgentInformation {
  /**
   * This version number can be checked against the Compute Node agent release notes located at https://github.com/Azure/Batch/blob/master/changelogs/nodeagent/CHANGELOG.md.
   */
  version: string;
  /**
   * This is the most recent time that the Compute Node agent was updated to a new version.
   */
  lastUpdateTime: Date;
}

/**
 * Options for rebooting a Compute Node.
 */
export interface NodeRebootParameter {
  /**
   * The default value is requeue.
   */
  nodeRebootOption?: ComputeNodeRebootOption;
}

/**
 * Options for reimaging a Compute Node.
 */
export interface NodeReimageParameter {
  /**
   * The default value is requeue.
   */
  nodeReimageOption?: ComputeNodeReimageOption;
}

/**
 * Options for disabling scheduling on a Compute Node.
 */
export interface NodeDisableSchedulingParameter {
  /**
   * The default value is requeue.
   */
  nodeDisableSchedulingOption?: DisableComputeNodeSchedulingOption;
}

/**
 * The remote login settings for a Compute Node.
 */
export interface ComputeNodeGetRemoteLoginSettingsResult {
  /**
   * The IP address used for remote login to the Compute Node.
   */
  remoteLoginIPAddress: string;
  /**
   * The port used for remote login to the Compute Node.
   */
  remoteLoginPort: number;
}

/**
 * The Azure Batch service log files upload configuration for a Compute Node.
 */
export interface UploadBatchServiceLogsConfiguration {
  /**
   * The URL must include a Shared Access Signature (SAS) granting write permissions to the container. The SAS duration must allow enough time for the upload to finish. The start time for SAS is optional and recommended to not be specified.
   */
  containerUrl: string;
  /**
   * Any log file containing a log message in the time range will be uploaded. This means that the operation might retrieve more logs than have been requested since the entire log file is always uploaded, but the operation should not retrieve fewer logs than have been requested.
   */
  startTime: Date;
  /**
   * Any log file containing a log message in the time range will be uploaded. This means that the operation might retrieve more logs than have been requested since the entire log file is always uploaded, but the operation should not retrieve fewer logs than have been requested. If omitted, the default is to upload all logs available after the startTime.
   */
  endTime?: Date;
}

/**
 * The result of uploading Batch service log files from a specific Compute Node.
 */
export interface UploadBatchServiceLogsResult {
  /**
   * The virtual directory name is part of the blob name for each log file uploaded, and it is built based poolId, nodeId and a unique identifier.
   */
  virtualDirectoryName: string;
  /**
   * The number of log files which will be uploaded.
   */
  numberOfFilesUploaded: number;
}

/**
 * The result of listing the Compute Nodes in a Pool.
 */
export interface ComputeNodeListResult {
  /**
   * The list of Compute Nodes.
   */
  value?: ComputeNode[];
  /**
   * The URL to get the next set of results.
   */
  odataNextLink?: string;
}

/**
 * Defines headers for application_list operation.
 */
export interface ApplicationListHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for application_get operation.
 */
export interface ApplicationGetHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for application_listNext operation.
 */
export interface ApplicationListNextHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for pool_listUsageMetrics operation.
 */
export interface PoolListUsageMetricsHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for pool_getAllLifetimeStatistics operation.
 */
export interface PoolGetAllLifetimeStatisticsHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for pool_add operation.
 */
export interface PoolAddHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for pool_list operation.
 */
export interface PoolListHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for pool_delete operation.
 */
export interface PoolDeleteHeaders {
  clientRequestId?: string;
  requestId?: string;
}

/**
 * Defines headers for pool_exists operation.
 */
export interface PoolExistsHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for pool_get operation.
 */
export interface PoolGetHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for pool_patch operation.
 */
export interface PoolPatchHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for pool_disableAutoScale operation.
 */
export interface PoolDisableAutoScaleHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for pool_enableAutoScale operation.
 */
export interface PoolEnableAutoScaleHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for pool_evaluateAutoScale operation.
 */
export interface PoolEvaluateAutoScaleHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for pool_resize operation.
 */
export interface PoolResizeHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for pool_stopResize operation.
 */
export interface PoolStopResizeHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for pool_updateProperties operation.
 */
export interface PoolUpdatePropertiesHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for pool_removeNodes operation.
 */
export interface PoolRemoveNodesHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for pool_listUsageMetricsNext operation.
 */
export interface PoolListUsageMetricsNextHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for pool_listNext operation.
 */
export interface PoolListNextHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for account_listSupportedImages operation.
 */
export interface AccountListSupportedImagesHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for account_listPoolNodeCounts operation.
 */
export interface AccountListPoolNodeCountsHeaders {
  clientRequestId?: string;
  requestId?: string;
}

/**
 * Defines headers for account_listSupportedImagesNext operation.
 */
export interface AccountListSupportedImagesNextHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for account_listPoolNodeCountsNext operation.
 */
export interface AccountListPoolNodeCountsNextHeaders {
  clientRequestId?: string;
  requestId?: string;
}

/**
 * Defines headers for job_getAllLifetimeStatistics operation.
 */
export interface JobGetAllLifetimeStatisticsHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for job_delete operation.
 */
export interface JobDeleteHeaders {
  clientRequestId?: string;
  requestId?: string;
}

/**
 * Defines headers for job_get operation.
 */
export interface JobGetHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for job_patch operation.
 */
export interface JobPatchHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for job_update operation.
 */
export interface JobUpdateHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for job_disable operation.
 */
export interface JobDisableHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for job_enable operation.
 */
export interface JobEnableHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for job_terminate operation.
 */
export interface JobTerminateHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for job_add operation.
 */
export interface JobAddHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for job_list operation.
 */
export interface JobListHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for job_listFromJobSchedule operation.
 */
export interface JobListFromJobScheduleHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for job_listPreparationAndReleaseTaskStatus operation.
 */
export interface JobListPreparationAndReleaseTaskStatusHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for job_getTaskCounts operation.
 */
export interface JobGetTaskCountsHeaders {
  clientRequestId?: string;
  requestId?: string;
}

/**
 * Defines headers for job_listNext operation.
 */
export interface JobListNextHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for job_listFromJobScheduleNext operation.
 */
export interface JobListFromJobScheduleNextHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for job_listPreparationAndReleaseTaskStatusNext operation.
 */
export interface JobListPreparationAndReleaseTaskStatusNextHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for certificate_add operation.
 */
export interface CertificateAddHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for certificate_list operation.
 */
export interface CertificateListHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for certificate_cancelDeletion operation.
 */
export interface CertificateCancelDeletionHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for certificate_delete operation.
 */
export interface CertificateDeleteHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for certificate_get operation.
 */
export interface CertificateGetHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for certificate_listNext operation.
 */
export interface CertificateListNextHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for file_deleteFromTask operation.
 */
export interface FileDeleteFromTaskHeaders {
  clientRequestId?: string;
  requestId?: string;
}

/**
 * Defines headers for file_getFromTask operation.
 */
export interface FileGetFromTaskHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  ocpCreationTime?: Date;
  ocpBatchFileIsdirectory?: boolean;
  ocpBatchFileUrl?: string;
  ocpBatchFileMode?: string;
  contentType?: string;
  contentLength?: number;
}

/**
 * Defines headers for file_getPropertiesFromTask operation.
 */
export interface FileGetPropertiesFromTaskHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  ocpCreationTime?: Date;
  ocpBatchFileIsdirectory?: boolean;
  ocpBatchFileUrl?: string;
  ocpBatchFileMode?: string;
  contentType?: string;
  contentLength?: number;
}

/**
 * Defines headers for file_deleteFromComputeNode operation.
 */
export interface FileDeleteFromComputeNodeHeaders {
  clientRequestId?: string;
  requestId?: string;
}

/**
 * Defines headers for file_getFromComputeNode operation.
 */
export interface FileGetFromComputeNodeHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  ocpCreationTime?: Date;
  ocpBatchFileIsdirectory?: boolean;
  ocpBatchFileUrl?: string;
  ocpBatchFileMode?: string;
  contentType?: string;
  contentLength?: number;
}

/**
 * Defines headers for file_getPropertiesFromComputeNode operation.
 */
export interface FileGetPropertiesFromComputeNodeHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  ocpCreationTime?: Date;
  ocpBatchFileIsdirectory?: boolean;
  ocpBatchFileUrl?: string;
  ocpBatchFileMode?: string;
  contentType?: string;
  contentLength?: number;
}

/**
 * Defines headers for file_listFromTask operation.
 */
export interface FileListFromTaskHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for file_listFromComputeNode operation.
 */
export interface FileListFromComputeNodeHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for file_listFromTaskNext operation.
 */
export interface FileListFromTaskNextHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for file_listFromComputeNodeNext operation.
 */
export interface FileListFromComputeNodeNextHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for jobSchedule_exists operation.
 */
export interface JobScheduleExistsHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for jobSchedule_delete operation.
 */
export interface JobScheduleDeleteHeaders {
  clientRequestId?: string;
  requestId?: string;
}

/**
 * Defines headers for jobSchedule_get operation.
 */
export interface JobScheduleGetHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for jobSchedule_patch operation.
 */
export interface JobSchedulePatchHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for jobSchedule_update operation.
 */
export interface JobScheduleUpdateHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for jobSchedule_disable operation.
 */
export interface JobScheduleDisableHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for jobSchedule_enable operation.
 */
export interface JobScheduleEnableHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for jobSchedule_terminate operation.
 */
export interface JobScheduleTerminateHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for jobSchedule_add operation.
 */
export interface JobScheduleAddHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for jobSchedule_list operation.
 */
export interface JobScheduleListHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for jobSchedule_listNext operation.
 */
export interface JobScheduleListNextHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for task_add operation.
 */
export interface TaskAddHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for task_list operation.
 */
export interface TaskListHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for task_addCollection operation.
 */
export interface TaskAddCollectionHeaders {
  clientRequestId?: string;
  requestId?: string;
}

/**
 * Defines headers for task_delete operation.
 */
export interface TaskDeleteHeaders {
  clientRequestId?: string;
  requestId?: string;
}

/**
 * Defines headers for task_get operation.
 */
export interface TaskGetHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for task_update operation.
 */
export interface TaskUpdateHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for task_listSubtasks operation.
 */
export interface TaskListSubtasksHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for task_terminate operation.
 */
export interface TaskTerminateHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for task_reactivate operation.
 */
export interface TaskReactivateHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for task_listNext operation.
 */
export interface TaskListNextHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for computeNode_addUser operation.
 */
export interface ComputeNodeAddUserHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for computeNode_deleteUser operation.
 */
export interface ComputeNodeDeleteUserHeaders {
  clientRequestId?: string;
  requestId?: string;
}

/**
 * Defines headers for computeNode_updateUser operation.
 */
export interface ComputeNodeUpdateUserHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for computeNode_get operation.
 */
export interface ComputeNodeGetHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for computeNode_reboot operation.
 */
export interface ComputeNodeRebootHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for computeNode_reimage operation.
 */
export interface ComputeNodeReimageHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for computeNode_disableScheduling operation.
 */
export interface ComputeNodeDisableSchedulingHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for computeNode_enableScheduling operation.
 */
export interface ComputeNodeEnableSchedulingHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
  dataServiceId?: string;
}

/**
 * Defines headers for computeNode_getRemoteLoginSettings operation.
 */
export interface ComputeNodeGetRemoteLoginSettingsHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for computeNode_getRemoteDesktop operation.
 */
export interface ComputeNodeGetRemoteDesktopHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for computeNode_uploadBatchServiceLogs operation.
 */
export interface ComputeNodeUploadBatchServiceLogsHeaders {
  clientRequestId?: string;
  requestId?: string;
}

/**
 * Defines headers for computeNode_list operation.
 */
export interface ComputeNodeListHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Defines headers for computeNode_listNext operation.
 */
export interface ComputeNodeListNextHeaders {
  clientRequestId?: string;
  requestId?: string;
  eTag?: string;
  lastModified?: Date;
}

/**
 * Parameter group
 */
export interface ApplicationListOptions {
  /**
   * The maximum number of items to return in the response. A maximum of 1000 applications can be returned.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface ApplicationGetOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface PoolListUsageMetricsOptions {
  /**
   * The earliest time from which to include metrics. This must be at least two and a half hours before the current time. If not specified this defaults to the start time of the last aggregation interval currently available.
   */
  startTime?: Date;
  /**
   * The latest time from which to include metrics. This must be at least two hours before the current time. If not specified this defaults to the end time of the last aggregation interval currently available.
   */
  endTime?: Date;
  /**
   * An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.
   */
  filter?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 results will be returned.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface PoolGetAllLifetimeStatisticsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface PoolAddOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface PoolListOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 Pools can be returned.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface PoolDeleteOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface PoolExistsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface PoolGetOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface PoolPatchOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface PoolDisableAutoScaleOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface PoolEnableAutoScaleOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface PoolEvaluateAutoScaleOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface PoolResizeOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface PoolStopResizeOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface PoolUpdatePropertiesOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface PoolRemoveNodesOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface AccountListSupportedImagesOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-support-images.
   */
  filter?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 results will be returned.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface AccountListPoolNodeCountsOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch.
   */
  filter?: string;
  /**
   * The maximum number of items to return in the response.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface JobGetAllLifetimeStatisticsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface JobDeleteOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobGetOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobPatchOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobUpdateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobDisableOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobEnableOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobTerminateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobAddOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface JobListOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface JobListFromJobScheduleOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface JobListPreparationAndReleaseTaskStatusOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 Tasks can be returned.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface JobGetTaskCountsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface CertificateAddOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface CertificateListOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 Certificates can be returned.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface CertificateCancelDeletionOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface CertificateDeleteOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface CertificateGetOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface FileDeleteFromTaskOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface FileGetFromTaskOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes=startRange-endRange.
   */
  ocpRange?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface FileGetPropertiesFromTaskOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface FileDeleteFromComputeNodeOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface FileGetFromComputeNodeOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes=startRange-endRange.
   */
  ocpRange?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface FileGetPropertiesFromComputeNodeOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface FileListFromTaskOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-task-files.
   */
  filter?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 files can be returned.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface FileListFromComputeNodeOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
   */
  filter?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 files can be returned.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface JobScheduleExistsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobScheduleDeleteOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobScheduleGetOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobSchedulePatchOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobScheduleUpdateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobScheduleDisableOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobScheduleEnableOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobScheduleTerminateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface JobScheduleAddOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface JobScheduleListOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 Job Schedules can be returned.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface TaskAddOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface TaskListOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 Tasks can be returned.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface TaskAddCollectionOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface TaskDeleteOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface TaskGetOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface TaskUpdateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface TaskListSubtasksOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface TaskTerminateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface TaskReactivateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Parameter group
 */
export interface ComputeNodeAddUserOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface ComputeNodeDeleteUserOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface ComputeNodeUpdateUserOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface ComputeNodeGetOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface ComputeNodeRebootOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface ComputeNodeReimageOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface ComputeNodeDisableSchedulingOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface ComputeNodeEnableSchedulingOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface ComputeNodeGetRemoteLoginSettingsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface ComputeNodeGetRemoteDesktopOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface ComputeNodeUploadBatchServiceLogsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Parameter group
 */
export interface ComputeNodeListOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 Compute Nodes can be returned.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Defines values for OSType.
 */
export type OSType = "linux" | "windows";
/**
 * Defines values for VerificationType.
 */
export type VerificationType = "verified" | "unverified";
/**
 * Defines values for CertificateFormat.
 */
export type CertificateFormat = "pfx" | "cer";
/**
 * Defines values for CertificateState.
 */
export type CertificateState = "active" | "deleting" | "deletefailed";
/**
 * Defines values for JobScheduleState.
 */
export type JobScheduleState =
  | "active"
  | "completed"
  | "disabled"
  | "terminating"
  | "deleting";
/**
 * Defines values for OnAllTasksComplete.
 */
export type OnAllTasksComplete = "noaction" | "terminatejob";
/**
 * Defines values for OnTaskFailure.
 */
export type OnTaskFailure = "noaction" | "performexitoptionsjobaction";
/**
 * Defines values for ContainerWorkingDirectory.
 */
export type ContainerWorkingDirectory =
  | "taskWorkingDirectory"
  | "containerImageDefault";
/**
 * Defines values for OutputFileUploadCondition.
 */
export type OutputFileUploadCondition =
  | "tasksuccess"
  | "taskfailure"
  | "taskcompletion";
/**
 * Defines values for AutoUserScope.
 */
export type AutoUserScope = "task" | "pool";
/**
 * Defines values for ElevationLevel.
 */
export type ElevationLevel = "nonadmin" | "admin";
/**
 * Defines values for PoolLifetimeOption.
 */
export type PoolLifetimeOption = "jobschedule" | "job";
/**
 * Defines values for CachingType.
 */
export type CachingType = "none" | "readonly" | "readwrite";
/**
 * Defines values for StorageAccountType.
 */
export type StorageAccountType = "standard_lrs" | "premium_lrs";
/**
 * Defines values for DiskEncryptionTarget.
 */
export type DiskEncryptionTarget = "osdisk" | "temporarydisk";
/**
 * Defines values for ComputeNodeFillType.
 */
export type ComputeNodeFillType = "spread" | "pack";
/**
 * Defines values for DynamicVNetAssignmentScope.
 */
export type DynamicVNetAssignmentScope = "none" | "job";
/**
 * Defines values for InboundEndpointProtocol.
 */
export type InboundEndpointProtocol = "tcp" | "udp";
/**
 * Defines values for NetworkSecurityGroupRuleAccess.
 */
export type NetworkSecurityGroupRuleAccess = "allow" | "deny";
/**
 * Defines values for IPAddressProvisioningType.
 */
export type IPAddressProvisioningType =
  | "batchmanaged"
  | "usermanaged"
  | "nopublicipaddresses";
/**
 * Defines values for CertificateStoreLocation.
 */
export type CertificateStoreLocation = "currentuser" | "localmachine";
/**
 * Defines values for CertificateVisibility.
 */
export type CertificateVisibility = "starttask" | "task" | "remoteuser";
/**
 * Defines values for LoginMode.
 */
export type LoginMode = "batch" | "interactive";
/**
 * Defines values for JobState.
 */
export type JobState =
  | "active"
  | "disabling"
  | "disabled"
  | "enabling"
  | "terminating"
  | "completed"
  | "deleting";
/**
 * Defines values for ErrorCategory.
 */
export type ErrorCategory = "usererror" | "servererror";
/**
 * Defines values for DisableJobOption.
 */
export type DisableJobOption = "requeue" | "terminate" | "wait";
/**
 * Defines values for JobPreparationTaskState.
 */
export type JobPreparationTaskState = "running" | "completed";
/**
 * Defines values for TaskExecutionResult.
 */
export type TaskExecutionResult = "success" | "failure";
/**
 * Defines values for JobReleaseTaskState.
 */
export type JobReleaseTaskState = "running" | "completed";
/**
 * Defines values for PoolState.
 */
export type PoolState = "active" | "deleting";
/**
 * Defines values for AllocationState.
 */
export type AllocationState = "steady" | "resizing" | "stopping";
/**
 * Defines values for ComputeNodeDeallocationOption.
 */
export type ComputeNodeDeallocationOption =
  | "requeue"
  | "terminate"
  | "taskcompletion"
  | "retaineddata";
/**
 * Defines values for JobAction.
 */
export type JobAction = "none" | "disable" | "terminate";
/**
 * Defines values for DependencyAction.
 */
export type DependencyAction = "satisfy" | "block";
/**
 * Defines values for TaskState.
 */
export type TaskState = "active" | "preparing" | "running" | "completed";
/**
 * Defines values for TaskAddStatus.
 */
export type TaskAddStatus = "success" | "clienterror" | "servererror";
/**
 * Defines values for SubtaskState.
 */
export type SubtaskState = "preparing" | "running" | "completed";
/**
 * Defines values for ComputeNodeState.
 */
export type ComputeNodeState =
  | "idle"
  | "rebooting"
  | "reimaging"
  | "running"
  | "unusable"
  | "creating"
  | "starting"
  | "waitingforstarttask"
  | "starttaskfailed"
  | "unknown"
  | "leavingpool"
  | "offline"
  | "preempted";
/**
 * Defines values for SchedulingState.
 */
export type SchedulingState = "enabled" | "disabled";
/**
 * Defines values for StartTaskState.
 */
export type StartTaskState = "running" | "completed";
/**
 * Defines values for ComputeNodeRebootOption.
 */
export type ComputeNodeRebootOption =
  | "requeue"
  | "terminate"
  | "taskcompletion"
  | "retaineddata";
/**
 * Defines values for ComputeNodeReimageOption.
 */
export type ComputeNodeReimageOption =
  | "requeue"
  | "terminate"
  | "taskcompletion"
  | "retaineddata";
/**
 * Defines values for DisableComputeNodeSchedulingOption.
 */
export type DisableComputeNodeSchedulingOption =
  | "requeue"
  | "terminate"
  | "taskcompletion";

/**
 * Optional parameters.
 */
export interface ApplicationListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  applicationListOptions?: ApplicationListOptions;
}

/**
 * Contains response data for the list operation.
 */
export type ApplicationListResponse = ApplicationListHeaders &
  ApplicationListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApplicationListHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApplicationGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  applicationGetOptions?: ApplicationGetOptions;
}

/**
 * Contains response data for the get operation.
 */
export type ApplicationGetResponse = ApplicationGetHeaders &
  ApplicationSummary & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationSummary;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApplicationGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApplicationListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  applicationListOptions?: ApplicationListOptions;
}

/**
 * Contains response data for the listNext operation.
 */
export type ApplicationListNextResponse = ApplicationListNextHeaders &
  ApplicationListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApplicationListNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface PoolListUsageMetricsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolListUsageMetricsOptions?: PoolListUsageMetricsOptions;
}

/**
 * Contains response data for the listUsageMetrics operation.
 */
export type PoolListUsageMetricsResponse = PoolListUsageMetricsHeaders &
  PoolListUsageMetricsResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PoolListUsageMetricsResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolListUsageMetricsHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface PoolGetAllLifetimeStatisticsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolGetAllLifetimeStatisticsOptions?: PoolGetAllLifetimeStatisticsOptions;
}

/**
 * Contains response data for the getAllLifetimeStatistics operation.
 */
export type PoolGetAllLifetimeStatisticsResponse = PoolGetAllLifetimeStatisticsHeaders &
  PoolStatistics & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PoolStatistics;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolGetAllLifetimeStatisticsHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface PoolAddOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolAddOptions?: PoolAddOptions;
}

/**
 * Contains response data for the add operation.
 */
export type PoolAddResponse = PoolAddHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: PoolAddHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface PoolListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolListOptions?: PoolListOptions;
}

/**
 * Contains response data for the list operation.
 */
export type PoolListResponse = PoolListHeaders &
  CloudPoolListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudPoolListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolListHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface PoolDeleteOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolDeleteOptions?: PoolDeleteOptions;
}

/**
 * Contains response data for the delete operation.
 */
export type PoolDeleteResponse = PoolDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: PoolDeleteHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface PoolExistsOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolExistsOptions?: PoolExistsOptions;
}

/**
 * Contains response data for the exists operation.
 */
export type PoolExistsResponse = PoolExistsHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: PoolExistsHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface PoolGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolGetOptions?: PoolGetOptions;
}

/**
 * Contains response data for the get operation.
 */
export type PoolGetResponse = PoolGetHeaders &
  CloudPool & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudPool;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface PoolPatchOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolPatchOptions?: PoolPatchOptions;
}

/**
 * Contains response data for the patch operation.
 */
export type PoolPatchResponse = PoolPatchHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: PoolPatchHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface PoolDisableAutoScaleOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolDisableAutoScaleOptions?: PoolDisableAutoScaleOptions;
}

/**
 * Contains response data for the disableAutoScale operation.
 */
export type PoolDisableAutoScaleResponse = PoolDisableAutoScaleHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: PoolDisableAutoScaleHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface PoolEnableAutoScaleOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolEnableAutoScaleOptions?: PoolEnableAutoScaleOptions;
}

/**
 * Contains response data for the enableAutoScale operation.
 */
export type PoolEnableAutoScaleResponse = PoolEnableAutoScaleHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: PoolEnableAutoScaleHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface PoolEvaluateAutoScaleOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolEvaluateAutoScaleOptions?: PoolEvaluateAutoScaleOptions;
}

/**
 * Contains response data for the evaluateAutoScale operation.
 */
export type PoolEvaluateAutoScaleResponse = PoolEvaluateAutoScaleHeaders &
  AutoScaleRun & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AutoScaleRun;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolEvaluateAutoScaleHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface PoolResizeOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolResizeOptions?: PoolResizeOptions;
}

/**
 * Contains response data for the resize operation.
 */
export type PoolResizeResponse = PoolResizeHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: PoolResizeHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface PoolStopResizeOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolStopResizeOptions?: PoolStopResizeOptions;
}

/**
 * Contains response data for the stopResize operation.
 */
export type PoolStopResizeResponse = PoolStopResizeHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: PoolStopResizeHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface PoolUpdatePropertiesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolUpdatePropertiesOptions?: PoolUpdatePropertiesOptions;
}

/**
 * Contains response data for the updateProperties operation.
 */
export type PoolUpdatePropertiesResponse = PoolUpdatePropertiesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: PoolUpdatePropertiesHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface PoolRemoveNodesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolRemoveNodesOptions?: PoolRemoveNodesOptions;
}

/**
 * Contains response data for the removeNodes operation.
 */
export type PoolRemoveNodesResponse = PoolRemoveNodesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: PoolRemoveNodesHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface PoolListUsageMetricsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolListUsageMetricsOptions?: PoolListUsageMetricsOptions;
}

/**
 * Contains response data for the listUsageMetricsNext operation.
 */
export type PoolListUsageMetricsNextResponse = PoolListUsageMetricsNextHeaders &
  PoolListUsageMetricsResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PoolListUsageMetricsResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolListUsageMetricsNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface PoolListNextOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  poolListOptions?: PoolListOptions;
}

/**
 * Contains response data for the listNext operation.
 */
export type PoolListNextResponse = PoolListNextHeaders &
  CloudPoolListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudPoolListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolListNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface AccountListSupportedImagesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  accountListSupportedImagesOptions?: AccountListSupportedImagesOptions;
}

/**
 * Contains response data for the listSupportedImages operation.
 */
export type AccountListSupportedImagesResponse = AccountListSupportedImagesHeaders &
  AccountListSupportedImagesResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccountListSupportedImagesResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: AccountListSupportedImagesHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface AccountListPoolNodeCountsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  accountListPoolNodeCountsOptions?: AccountListPoolNodeCountsOptions;
}

/**
 * Contains response data for the listPoolNodeCounts operation.
 */
export type AccountListPoolNodeCountsResponse = AccountListPoolNodeCountsHeaders &
  PoolNodeCountsListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PoolNodeCountsListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: AccountListPoolNodeCountsHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface AccountListSupportedImagesNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  accountListSupportedImagesOptions?: AccountListSupportedImagesOptions;
}

/**
 * Contains response data for the listSupportedImagesNext operation.
 */
export type AccountListSupportedImagesNextResponse = AccountListSupportedImagesNextHeaders &
  AccountListSupportedImagesResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccountListSupportedImagesResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: AccountListSupportedImagesNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface AccountListPoolNodeCountsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  accountListPoolNodeCountsOptions?: AccountListPoolNodeCountsOptions;
}

/**
 * Contains response data for the listPoolNodeCountsNext operation.
 */
export type AccountListPoolNodeCountsNextResponse = AccountListPoolNodeCountsNextHeaders &
  PoolNodeCountsListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PoolNodeCountsListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: AccountListPoolNodeCountsNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface JobGetAllLifetimeStatisticsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobGetAllLifetimeStatisticsOptions?: JobGetAllLifetimeStatisticsOptions;
}

/**
 * Contains response data for the getAllLifetimeStatistics operation.
 */
export type JobGetAllLifetimeStatisticsResponse = JobGetAllLifetimeStatisticsHeaders &
  JobStatistics & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobStatistics;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobGetAllLifetimeStatisticsHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface JobDeleteOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobDeleteOptions?: JobDeleteOptions;
}

/**
 * Contains response data for the delete operation.
 */
export type JobDeleteResponse = JobDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobDeleteHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobGetOptions?: JobGetOptions;
}

/**
 * Contains response data for the get operation.
 */
export type JobGetResponse = JobGetHeaders &
  CloudJob & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJob;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface JobPatchOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobPatchOptions?: JobPatchOptions;
}

/**
 * Contains response data for the patch operation.
 */
export type JobPatchResponse = JobPatchHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobPatchHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobUpdateOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobUpdateOptions?: JobUpdateOptions;
}

/**
 * Contains response data for the update operation.
 */
export type JobUpdateResponse = JobUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobUpdateHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobDisableOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobDisableOptions?: JobDisableOptions;
}

/**
 * Contains response data for the disable operation.
 */
export type JobDisableResponse = JobDisableHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobDisableHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobEnableOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobEnableOptions?: JobEnableOptions;
}

/**
 * Contains response data for the enable operation.
 */
export type JobEnableResponse = JobEnableHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobEnableHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobTerminateOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobTerminateOptions?: JobTerminateOptions;
  /**
   * The parameters for the request.
   */
  jobTerminateParameter?: JobTerminateParameter;
}

/**
 * Contains response data for the terminate operation.
 */
export type JobTerminateResponse = JobTerminateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobTerminateHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobAddOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobAddOptions?: JobAddOptions;
}

/**
 * Contains response data for the add operation.
 */
export type JobAddResponse = JobAddHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobAddHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobListOptions?: JobListOptions;
}

/**
 * Contains response data for the list operation.
 */
export type JobListResponse = JobListHeaders &
  CloudJobListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobListHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface JobListFromJobScheduleOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobListFromJobScheduleOptions?: JobListFromJobScheduleOptions;
}

/**
 * Contains response data for the listFromJobSchedule operation.
 */
export type JobListFromJobScheduleResponse = JobListFromJobScheduleHeaders &
  CloudJobListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobListFromJobScheduleHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface JobListPreparationAndReleaseTaskStatusOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobListPreparationAndReleaseTaskStatusOptions?: JobListPreparationAndReleaseTaskStatusOptions;
}

/**
 * Contains response data for the listPreparationAndReleaseTaskStatus operation.
 */
export type JobListPreparationAndReleaseTaskStatusResponse = JobListPreparationAndReleaseTaskStatusHeaders &
  CloudJobListPreparationAndReleaseTaskStatusResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobListPreparationAndReleaseTaskStatusResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobListPreparationAndReleaseTaskStatusHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface JobGetTaskCountsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobGetTaskCountsOptions?: JobGetTaskCountsOptions;
}

/**
 * Contains response data for the getTaskCounts operation.
 */
export type JobGetTaskCountsResponse = JobGetTaskCountsHeaders &
  TaskCounts & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskCounts;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobGetTaskCountsHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface JobListNextOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobListOptions?: JobListOptions;
}

/**
 * Contains response data for the listNext operation.
 */
export type JobListNextResponse = JobListNextHeaders &
  CloudJobListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobListNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface JobListFromJobScheduleNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobListFromJobScheduleOptions?: JobListFromJobScheduleOptions;
}

/**
 * Contains response data for the listFromJobScheduleNext operation.
 */
export type JobListFromJobScheduleNextResponse = JobListFromJobScheduleNextHeaders &
  CloudJobListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobListFromJobScheduleNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface JobListPreparationAndReleaseTaskStatusNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobListPreparationAndReleaseTaskStatusOptions?: JobListPreparationAndReleaseTaskStatusOptions;
}

/**
 * Contains response data for the listPreparationAndReleaseTaskStatusNext operation.
 */
export type JobListPreparationAndReleaseTaskStatusNextResponse = JobListPreparationAndReleaseTaskStatusNextHeaders &
  CloudJobListPreparationAndReleaseTaskStatusResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobListPreparationAndReleaseTaskStatusResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobListPreparationAndReleaseTaskStatusNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface CertificateAddOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  certificateAddOptions?: CertificateAddOptions;
}

/**
 * Contains response data for the add operation.
 */
export type CertificateAddResponse = CertificateAddHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: CertificateAddHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface CertificateListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  certificateListOptions?: CertificateListOptions;
}

/**
 * Contains response data for the list operation.
 */
export type CertificateListResponse = CertificateListHeaders &
  CertificateListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CertificateListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateListHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface CertificateCancelDeletionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  certificateCancelDeletionOptions?: CertificateCancelDeletionOptions;
}

/**
 * Contains response data for the cancelDeletion operation.
 */
export type CertificateCancelDeletionResponse = CertificateCancelDeletionHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: CertificateCancelDeletionHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface CertificateDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  certificateDeleteOptions?: CertificateDeleteOptions;
}

/**
 * Contains response data for the delete operation.
 */
export type CertificateDeleteResponse = CertificateDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: CertificateDeleteHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface CertificateGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  certificateGetOptions?: CertificateGetOptions;
}

/**
 * Contains response data for the get operation.
 */
export type CertificateGetResponse = CertificateGetHeaders &
  Certificate & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Certificate;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface CertificateListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  certificateListOptions?: CertificateListOptions;
}

/**
 * Contains response data for the listNext operation.
 */
export type CertificateListNextResponse = CertificateListNextHeaders &
  CertificateListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CertificateListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateListNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface FileDeleteFromTaskOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  fileDeleteFromTaskOptions?: FileDeleteFromTaskOptions;
  /**
   * Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
   */
  recursive?: boolean;
}

/**
 * Contains response data for the deleteFromTask operation.
 */
export type FileDeleteFromTaskResponse = FileDeleteFromTaskHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: FileDeleteFromTaskHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface FileGetFromTaskOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  fileGetFromTaskOptions?: FileGetFromTaskOptions;
}

/**
 * Contains response data for the getFromTask operation.
 */
export type FileGetFromTaskResponse = FileGetFromTaskHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: FileGetFromTaskHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface FileGetPropertiesFromTaskOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  fileGetPropertiesFromTaskOptions?: FileGetPropertiesFromTaskOptions;
}

/**
 * Contains response data for the getPropertiesFromTask operation.
 */
export type FileGetPropertiesFromTaskResponse = FileGetPropertiesFromTaskHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: FileGetPropertiesFromTaskHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface FileDeleteFromComputeNodeOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  fileDeleteFromComputeNodeOptions?: FileDeleteFromComputeNodeOptions;
  /**
   * Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
   */
  recursive?: boolean;
}

/**
 * Contains response data for the deleteFromComputeNode operation.
 */
export type FileDeleteFromComputeNodeResponse = FileDeleteFromComputeNodeHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: FileDeleteFromComputeNodeHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface FileGetFromComputeNodeOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  fileGetFromComputeNodeOptions?: FileGetFromComputeNodeOptions;
}

/**
 * Contains response data for the getFromComputeNode operation.
 */
export type FileGetFromComputeNodeResponse = FileGetFromComputeNodeHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: FileGetFromComputeNodeHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface FileGetPropertiesFromComputeNodeOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  fileGetPropertiesFromComputeNodeOptions?: FileGetPropertiesFromComputeNodeOptions;
}

/**
 * Contains response data for the getPropertiesFromComputeNode operation.
 */
export type FileGetPropertiesFromComputeNodeResponse = FileGetPropertiesFromComputeNodeHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: FileGetPropertiesFromComputeNodeHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface FileListFromTaskOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  fileListFromTaskOptions?: FileListFromTaskOptions;
  /**
   * Whether to list children of the Task directory. This parameter can be used in combination with the filter parameter to list specific type of files.
   */
  recursive?: boolean;
}

/**
 * Contains response data for the listFromTask operation.
 */
export type FileListFromTaskResponse = FileListFromTaskHeaders &
  NodeFileListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NodeFileListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileListFromTaskHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface FileListFromComputeNodeOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  fileListFromComputeNodeOptions?: FileListFromComputeNodeOptions;
  /**
   * Whether to list children of a directory.
   */
  recursive?: boolean;
}

/**
 * Contains response data for the listFromComputeNode operation.
 */
export type FileListFromComputeNodeResponse = FileListFromComputeNodeHeaders &
  NodeFileListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NodeFileListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileListFromComputeNodeHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface FileListFromTaskNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  fileListFromTaskOptions?: FileListFromTaskOptions;
  /**
   * Whether to list children of the Task directory. This parameter can be used in combination with the filter parameter to list specific type of files.
   */
  recursive?: boolean;
}

/**
 * Contains response data for the listFromTaskNext operation.
 */
export type FileListFromTaskNextResponse = FileListFromTaskNextHeaders &
  NodeFileListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NodeFileListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileListFromTaskNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface FileListFromComputeNodeNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  fileListFromComputeNodeOptions?: FileListFromComputeNodeOptions;
  /**
   * Whether to list children of a directory.
   */
  recursive?: boolean;
}

/**
 * Contains response data for the listFromComputeNodeNext operation.
 */
export type FileListFromComputeNodeNextResponse = FileListFromComputeNodeNextHeaders &
  NodeFileListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NodeFileListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileListFromComputeNodeNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface JobScheduleExistsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobScheduleExistsOptions?: JobScheduleExistsOptions;
}

/**
 * Contains response data for the exists operation.
 */
export type JobScheduleExistsResponse = JobScheduleExistsHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobScheduleExistsHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobScheduleDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobScheduleDeleteOptions?: JobScheduleDeleteOptions;
}

/**
 * Contains response data for the delete operation.
 */
export type JobScheduleDeleteResponse = JobScheduleDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobScheduleDeleteHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobScheduleGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobScheduleGetOptions?: JobScheduleGetOptions;
}

/**
 * Contains response data for the get operation.
 */
export type JobScheduleGetResponse = JobScheduleGetHeaders &
  CloudJobSchedule & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobSchedule;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobScheduleGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface JobSchedulePatchOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobSchedulePatchOptions?: JobSchedulePatchOptions;
}

/**
 * Contains response data for the patch operation.
 */
export type JobSchedulePatchResponse = JobSchedulePatchHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobSchedulePatchHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobScheduleUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobScheduleUpdateOptions?: JobScheduleUpdateOptions;
}

/**
 * Contains response data for the update operation.
 */
export type JobScheduleUpdateResponse = JobScheduleUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobScheduleUpdateHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobScheduleDisableOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobScheduleDisableOptions?: JobScheduleDisableOptions;
}

/**
 * Contains response data for the disable operation.
 */
export type JobScheduleDisableResponse = JobScheduleDisableHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobScheduleDisableHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobScheduleEnableOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobScheduleEnableOptions?: JobScheduleEnableOptions;
}

/**
 * Contains response data for the enable operation.
 */
export type JobScheduleEnableResponse = JobScheduleEnableHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobScheduleEnableHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobScheduleTerminateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobScheduleTerminateOptions?: JobScheduleTerminateOptions;
}

/**
 * Contains response data for the terminate operation.
 */
export type JobScheduleTerminateResponse = JobScheduleTerminateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobScheduleTerminateHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobScheduleAddOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobScheduleAddOptions?: JobScheduleAddOptions;
}

/**
 * Contains response data for the add operation.
 */
export type JobScheduleAddResponse = JobScheduleAddHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: JobScheduleAddHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface JobScheduleListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobScheduleListOptions?: JobScheduleListOptions;
}

/**
 * Contains response data for the list operation.
 */
export type JobScheduleListResponse = JobScheduleListHeaders &
  CloudJobScheduleListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobScheduleListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobScheduleListHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface JobScheduleListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  jobScheduleListOptions?: JobScheduleListOptions;
}

/**
 * Contains response data for the listNext operation.
 */
export type JobScheduleListNextResponse = JobScheduleListNextHeaders &
  CloudJobScheduleListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobScheduleListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobScheduleListNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TaskAddOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  taskAddOptions?: TaskAddOptions;
}

/**
 * Contains response data for the add operation.
 */
export type TaskAddResponse = TaskAddHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: TaskAddHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface TaskListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  taskListOptions?: TaskListOptions;
}

/**
 * Contains response data for the list operation.
 */
export type TaskListResponse = TaskListHeaders &
  CloudTaskListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudTaskListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskListHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TaskAddCollectionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  taskAddCollectionOptions?: TaskAddCollectionOptions;
}

/**
 * Contains response data for the addCollection operation.
 */
export type TaskAddCollectionResponse = TaskAddCollectionHeaders &
  TaskAddCollectionResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskAddCollectionResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskAddCollectionHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TaskDeleteOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  taskDeleteOptions?: TaskDeleteOptions;
}

/**
 * Contains response data for the delete operation.
 */
export type TaskDeleteResponse = TaskDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: TaskDeleteHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface TaskGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  taskGetOptions?: TaskGetOptions;
}

/**
 * Contains response data for the get operation.
 */
export type TaskGetResponse = TaskGetHeaders &
  CloudTask & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudTask;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TaskUpdateOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  taskUpdateOptions?: TaskUpdateOptions;
}

/**
 * Contains response data for the update operation.
 */
export type TaskUpdateResponse = TaskUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: TaskUpdateHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface TaskListSubtasksOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  taskListSubtasksOptions?: TaskListSubtasksOptions;
}

/**
 * Contains response data for the listSubtasks operation.
 */
export type TaskListSubtasksResponse = TaskListSubtasksHeaders &
  CloudTaskListSubtasksResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudTaskListSubtasksResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskListSubtasksHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TaskTerminateOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  taskTerminateOptions?: TaskTerminateOptions;
}

/**
 * Contains response data for the terminate operation.
 */
export type TaskTerminateResponse = TaskTerminateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: TaskTerminateHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface TaskReactivateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  taskReactivateOptions?: TaskReactivateOptions;
}

/**
 * Contains response data for the reactivate operation.
 */
export type TaskReactivateResponse = TaskReactivateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: TaskReactivateHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface TaskListNextOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  taskListOptions?: TaskListOptions;
}

/**
 * Contains response data for the listNext operation.
 */
export type TaskListNextResponse = TaskListNextHeaders &
  CloudTaskListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudTaskListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskListNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ComputeNodeAddUserOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  computeNodeAddUserOptions?: ComputeNodeAddUserOptions;
}

/**
 * Contains response data for the addUser operation.
 */
export type ComputeNodeAddUserResponse = ComputeNodeAddUserHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ComputeNodeAddUserHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface ComputeNodeDeleteUserOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  computeNodeDeleteUserOptions?: ComputeNodeDeleteUserOptions;
}

/**
 * Contains response data for the deleteUser operation.
 */
export type ComputeNodeDeleteUserResponse = ComputeNodeDeleteUserHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ComputeNodeDeleteUserHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface ComputeNodeUpdateUserOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  computeNodeUpdateUserOptions?: ComputeNodeUpdateUserOptions;
}

/**
 * Contains response data for the updateUser operation.
 */
export type ComputeNodeUpdateUserResponse = ComputeNodeUpdateUserHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ComputeNodeUpdateUserHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface ComputeNodeGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  computeNodeGetOptions?: ComputeNodeGetOptions;
}

/**
 * Contains response data for the get operation.
 */
export type ComputeNodeGetResponse = ComputeNodeGetHeaders &
  ComputeNode & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ComputeNode;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ComputeNodeRebootOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  computeNodeRebootOptions?: ComputeNodeRebootOptions;
  /**
   * The parameters for the request.
   */
  nodeRebootParameter?: NodeRebootParameter;
}

/**
 * Contains response data for the reboot operation.
 */
export type ComputeNodeRebootResponse = ComputeNodeRebootHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ComputeNodeRebootHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface ComputeNodeReimageOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  computeNodeReimageOptions?: ComputeNodeReimageOptions;
  /**
   * The parameters for the request.
   */
  nodeReimageParameter?: NodeReimageParameter;
}

/**
 * Contains response data for the reimage operation.
 */
export type ComputeNodeReimageResponse = ComputeNodeReimageHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ComputeNodeReimageHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface ComputeNodeDisableSchedulingOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  computeNodeDisableSchedulingOptions?: ComputeNodeDisableSchedulingOptions;
  /**
   * The parameters for the request.
   */
  nodeDisableSchedulingParameter?: NodeDisableSchedulingParameter;
}

/**
 * Contains response data for the disableScheduling operation.
 */
export type ComputeNodeDisableSchedulingResponse = ComputeNodeDisableSchedulingHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ComputeNodeDisableSchedulingHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface ComputeNodeEnableSchedulingOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  computeNodeEnableSchedulingOptions?: ComputeNodeEnableSchedulingOptions;
}

/**
 * Contains response data for the enableScheduling operation.
 */
export type ComputeNodeEnableSchedulingResponse = ComputeNodeEnableSchedulingHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ComputeNodeEnableSchedulingHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface ComputeNodeGetRemoteLoginSettingsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  computeNodeGetRemoteLoginSettingsOptions?: ComputeNodeGetRemoteLoginSettingsOptions;
}

/**
 * Contains response data for the getRemoteLoginSettings operation.
 */
export type ComputeNodeGetRemoteLoginSettingsResponse = ComputeNodeGetRemoteLoginSettingsHeaders &
  ComputeNodeGetRemoteLoginSettingsResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ComputeNodeGetRemoteLoginSettingsResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeGetRemoteLoginSettingsHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ComputeNodeGetRemoteDesktopOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  computeNodeGetRemoteDesktopOptions?: ComputeNodeGetRemoteDesktopOptions;
}

/**
 * Contains response data for the getRemoteDesktop operation.
 */
export type ComputeNodeGetRemoteDesktopResponse = ComputeNodeGetRemoteDesktopHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ComputeNodeGetRemoteDesktopHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface ComputeNodeUploadBatchServiceLogsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  computeNodeUploadBatchServiceLogsOptions?: ComputeNodeUploadBatchServiceLogsOptions;
}

/**
 * Contains response data for the uploadBatchServiceLogs operation.
 */
export type ComputeNodeUploadBatchServiceLogsResponse = ComputeNodeUploadBatchServiceLogsHeaders &
  UploadBatchServiceLogsResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UploadBatchServiceLogsResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeUploadBatchServiceLogsHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ComputeNodeListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  computeNodeListOptions?: ComputeNodeListOptions;
}

/**
 * Contains response data for the list operation.
 */
export type ComputeNodeListResponse = ComputeNodeListHeaders &
  ComputeNodeListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ComputeNodeListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeListHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ComputeNodeListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  computeNodeListOptions?: ComputeNodeListOptions;
}

/**
 * Contains response data for the listNext operation.
 */
export type ComputeNodeListNextResponse = ComputeNodeListNextHeaders &
  ComputeNodeListResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ComputeNodeListResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeListNextHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface BatchServiceClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
