/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const batchUrl: coreHttp.OperationURLParameter = {
  parameterPath: "batchUrl",
  mapper: {
    serializedName: "batchUrl",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const maxresults: coreHttp.OperationQueryParameter = {
  parameterPath: ["applicationListOptions", "maxResults"],
  mapper: {
    defaultValue: 1000,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 1000, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout: coreHttp.OperationQueryParameter = {
  parameterPath: ["applicationListOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId: coreHttp.OperationParameter = {
  parameterPath: ["applicationListOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId: coreHttp.OperationParameter = {
  parameterPath: ["applicationListOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate: coreHttp.OperationParameter = {
  parameterPath: ["applicationListOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2020-03-01.11.0",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const applicationId: coreHttp.OperationURLParameter = {
  parameterPath: "applicationId",
  mapper: {
    serializedName: "applicationId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout1: coreHttp.OperationQueryParameter = {
  parameterPath: ["applicationGetOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId1: coreHttp.OperationParameter = {
  parameterPath: ["applicationGetOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId1: coreHttp.OperationParameter = {
  parameterPath: ["applicationGetOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate1: coreHttp.OperationParameter = {
  parameterPath: ["applicationGetOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const starttime: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolListUsageMetricsOptions", "startTime"],
  mapper: {
    serializedName: "starttime",
    type: {
      name: "DateTime"
    }
  }
};

export const endtime: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolListUsageMetricsOptions", "endTime"],
  mapper: {
    serializedName: "endtime",
    type: {
      name: "DateTime"
    }
  }
};

export const $filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolListUsageMetricsOptions", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const maxresults1: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolListUsageMetricsOptions", "maxResults"],
  mapper: {
    defaultValue: 1000,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 1000, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout2: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolListUsageMetricsOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId2: coreHttp.OperationParameter = {
  parameterPath: ["poolListUsageMetricsOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId2: coreHttp.OperationParameter = {
  parameterPath: ["poolListUsageMetricsOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate2: coreHttp.OperationParameter = {
  parameterPath: ["poolListUsageMetricsOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const timeout3: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolGetAllLifetimeStatisticsOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId3: coreHttp.OperationParameter = {
  parameterPath: ["poolGetAllLifetimeStatisticsOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId3: coreHttp.OperationParameter = {
  parameterPath: [
    "poolGetAllLifetimeStatisticsOptions",
    "returnClientRequestId"
  ],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate3: coreHttp.OperationParameter = {
  parameterPath: ["poolGetAllLifetimeStatisticsOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json; odata=minimalmetadata",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const pool: coreHttp.OperationParameter = {
  parameterPath: "pool",
  mapper: Mappers.PoolAddParameter
};

export const timeout4: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolAddOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId4: coreHttp.OperationParameter = {
  parameterPath: ["poolAddOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId4: coreHttp.OperationParameter = {
  parameterPath: ["poolAddOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate4: coreHttp.OperationParameter = {
  parameterPath: ["poolAddOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const $filter1: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolListOptions", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const $select: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolListOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const $expand: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolListOptions", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const maxresults2: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolListOptions", "maxResults"],
  mapper: {
    defaultValue: 1000,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 1000, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout5: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolListOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId5: coreHttp.OperationParameter = {
  parameterPath: ["poolListOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId5: coreHttp.OperationParameter = {
  parameterPath: ["poolListOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate5: coreHttp.OperationParameter = {
  parameterPath: ["poolListOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const poolId: coreHttp.OperationURLParameter = {
  parameterPath: "poolId",
  mapper: {
    serializedName: "poolId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout6: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolDeleteOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId6: coreHttp.OperationParameter = {
  parameterPath: ["poolDeleteOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId6: coreHttp.OperationParameter = {
  parameterPath: ["poolDeleteOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate6: coreHttp.OperationParameter = {
  parameterPath: ["poolDeleteOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch: coreHttp.OperationParameter = {
  parameterPath: ["poolDeleteOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch: coreHttp.OperationParameter = {
  parameterPath: ["poolDeleteOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince: coreHttp.OperationParameter = {
  parameterPath: ["poolDeleteOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince: coreHttp.OperationParameter = {
  parameterPath: ["poolDeleteOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const poolId1: coreHttp.OperationURLParameter = {
  parameterPath: "poolId",
  mapper: {
    serializedName: "poolId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout7: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolExistsOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId7: coreHttp.OperationParameter = {
  parameterPath: ["poolExistsOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId7: coreHttp.OperationParameter = {
  parameterPath: ["poolExistsOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate7: coreHttp.OperationParameter = {
  parameterPath: ["poolExistsOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch1: coreHttp.OperationParameter = {
  parameterPath: ["poolExistsOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch1: coreHttp.OperationParameter = {
  parameterPath: ["poolExistsOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince1: coreHttp.OperationParameter = {
  parameterPath: ["poolExistsOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince1: coreHttp.OperationParameter = {
  parameterPath: ["poolExistsOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const $select1: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolGetOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const $expand1: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolGetOptions", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const timeout8: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolGetOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId8: coreHttp.OperationParameter = {
  parameterPath: ["poolGetOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId8: coreHttp.OperationParameter = {
  parameterPath: ["poolGetOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate8: coreHttp.OperationParameter = {
  parameterPath: ["poolGetOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch2: coreHttp.OperationParameter = {
  parameterPath: ["poolGetOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch2: coreHttp.OperationParameter = {
  parameterPath: ["poolGetOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince2: coreHttp.OperationParameter = {
  parameterPath: ["poolGetOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince2: coreHttp.OperationParameter = {
  parameterPath: ["poolGetOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const poolPatchParameter: coreHttp.OperationParameter = {
  parameterPath: "poolPatchParameter",
  mapper: Mappers.PoolPatchParameter
};

export const poolId2: coreHttp.OperationURLParameter = {
  parameterPath: "poolId",
  mapper: {
    serializedName: "poolId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout9: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolPatchOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId9: coreHttp.OperationParameter = {
  parameterPath: ["poolPatchOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId9: coreHttp.OperationParameter = {
  parameterPath: ["poolPatchOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate9: coreHttp.OperationParameter = {
  parameterPath: ["poolPatchOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch3: coreHttp.OperationParameter = {
  parameterPath: ["poolPatchOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch3: coreHttp.OperationParameter = {
  parameterPath: ["poolPatchOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince3: coreHttp.OperationParameter = {
  parameterPath: ["poolPatchOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince3: coreHttp.OperationParameter = {
  parameterPath: ["poolPatchOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const poolId3: coreHttp.OperationURLParameter = {
  parameterPath: "poolId",
  mapper: {
    serializedName: "poolId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout10: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolDisableAutoScaleOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId10: coreHttp.OperationParameter = {
  parameterPath: ["poolDisableAutoScaleOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId10: coreHttp.OperationParameter = {
  parameterPath: ["poolDisableAutoScaleOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate10: coreHttp.OperationParameter = {
  parameterPath: ["poolDisableAutoScaleOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const poolEnableAutoScaleParameter: coreHttp.OperationParameter = {
  parameterPath: "poolEnableAutoScaleParameter",
  mapper: Mappers.PoolEnableAutoScaleParameter
};

export const poolId4: coreHttp.OperationURLParameter = {
  parameterPath: "poolId",
  mapper: {
    serializedName: "poolId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout11: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolEnableAutoScaleOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId11: coreHttp.OperationParameter = {
  parameterPath: ["poolEnableAutoScaleOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId11: coreHttp.OperationParameter = {
  parameterPath: ["poolEnableAutoScaleOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate11: coreHttp.OperationParameter = {
  parameterPath: ["poolEnableAutoScaleOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch4: coreHttp.OperationParameter = {
  parameterPath: ["poolEnableAutoScaleOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch4: coreHttp.OperationParameter = {
  parameterPath: ["poolEnableAutoScaleOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince4: coreHttp.OperationParameter = {
  parameterPath: ["poolEnableAutoScaleOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince4: coreHttp.OperationParameter = {
  parameterPath: ["poolEnableAutoScaleOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const poolEvaluateAutoScaleParameter: coreHttp.OperationParameter = {
  parameterPath: "poolEvaluateAutoScaleParameter",
  mapper: Mappers.PoolEvaluateAutoScaleParameter
};

export const poolId5: coreHttp.OperationURLParameter = {
  parameterPath: "poolId",
  mapper: {
    serializedName: "poolId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout12: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolEvaluateAutoScaleOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId12: coreHttp.OperationParameter = {
  parameterPath: ["poolEvaluateAutoScaleOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId12: coreHttp.OperationParameter = {
  parameterPath: ["poolEvaluateAutoScaleOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate12: coreHttp.OperationParameter = {
  parameterPath: ["poolEvaluateAutoScaleOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const poolResizeParameter: coreHttp.OperationParameter = {
  parameterPath: "poolResizeParameter",
  mapper: Mappers.PoolResizeParameter
};

export const poolId6: coreHttp.OperationURLParameter = {
  parameterPath: "poolId",
  mapper: {
    serializedName: "poolId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout13: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolResizeOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId13: coreHttp.OperationParameter = {
  parameterPath: ["poolResizeOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId13: coreHttp.OperationParameter = {
  parameterPath: ["poolResizeOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate13: coreHttp.OperationParameter = {
  parameterPath: ["poolResizeOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch5: coreHttp.OperationParameter = {
  parameterPath: ["poolResizeOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch5: coreHttp.OperationParameter = {
  parameterPath: ["poolResizeOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince5: coreHttp.OperationParameter = {
  parameterPath: ["poolResizeOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince5: coreHttp.OperationParameter = {
  parameterPath: ["poolResizeOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const poolId7: coreHttp.OperationURLParameter = {
  parameterPath: "poolId",
  mapper: {
    serializedName: "poolId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout14: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolStopResizeOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId14: coreHttp.OperationParameter = {
  parameterPath: ["poolStopResizeOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId14: coreHttp.OperationParameter = {
  parameterPath: ["poolStopResizeOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate14: coreHttp.OperationParameter = {
  parameterPath: ["poolStopResizeOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch6: coreHttp.OperationParameter = {
  parameterPath: ["poolStopResizeOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch6: coreHttp.OperationParameter = {
  parameterPath: ["poolStopResizeOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince6: coreHttp.OperationParameter = {
  parameterPath: ["poolStopResizeOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince6: coreHttp.OperationParameter = {
  parameterPath: ["poolStopResizeOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const poolUpdatePropertiesParameter: coreHttp.OperationParameter = {
  parameterPath: "poolUpdatePropertiesParameter",
  mapper: Mappers.PoolUpdatePropertiesParameter
};

export const timeout15: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolUpdatePropertiesOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId15: coreHttp.OperationParameter = {
  parameterPath: ["poolUpdatePropertiesOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId15: coreHttp.OperationParameter = {
  parameterPath: ["poolUpdatePropertiesOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate15: coreHttp.OperationParameter = {
  parameterPath: ["poolUpdatePropertiesOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nodeRemoveParameter: coreHttp.OperationParameter = {
  parameterPath: "nodeRemoveParameter",
  mapper: Mappers.NodeRemoveParameter
};

export const poolId8: coreHttp.OperationURLParameter = {
  parameterPath: "poolId",
  mapper: {
    serializedName: "poolId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout16: coreHttp.OperationQueryParameter = {
  parameterPath: ["poolRemoveNodesOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId16: coreHttp.OperationParameter = {
  parameterPath: ["poolRemoveNodesOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId16: coreHttp.OperationParameter = {
  parameterPath: ["poolRemoveNodesOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate16: coreHttp.OperationParameter = {
  parameterPath: ["poolRemoveNodesOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch7: coreHttp.OperationParameter = {
  parameterPath: ["poolRemoveNodesOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch7: coreHttp.OperationParameter = {
  parameterPath: ["poolRemoveNodesOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince7: coreHttp.OperationParameter = {
  parameterPath: ["poolRemoveNodesOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince7: coreHttp.OperationParameter = {
  parameterPath: ["poolRemoveNodesOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const $filter2: coreHttp.OperationQueryParameter = {
  parameterPath: ["accountListSupportedImagesOptions", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const maxresults3: coreHttp.OperationQueryParameter = {
  parameterPath: ["accountListSupportedImagesOptions", "maxResults"],
  mapper: {
    defaultValue: 1000,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 1000, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout17: coreHttp.OperationQueryParameter = {
  parameterPath: ["accountListSupportedImagesOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId17: coreHttp.OperationParameter = {
  parameterPath: ["accountListSupportedImagesOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId17: coreHttp.OperationParameter = {
  parameterPath: ["accountListSupportedImagesOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate17: coreHttp.OperationParameter = {
  parameterPath: ["accountListSupportedImagesOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const $filter3: coreHttp.OperationQueryParameter = {
  parameterPath: ["accountListPoolNodeCountsOptions", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const maxresults4: coreHttp.OperationQueryParameter = {
  parameterPath: ["accountListPoolNodeCountsOptions", "maxResults"],
  mapper: {
    defaultValue: 10,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 10, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout18: coreHttp.OperationQueryParameter = {
  parameterPath: ["accountListPoolNodeCountsOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId18: coreHttp.OperationParameter = {
  parameterPath: ["accountListPoolNodeCountsOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId18: coreHttp.OperationParameter = {
  parameterPath: ["accountListPoolNodeCountsOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate18: coreHttp.OperationParameter = {
  parameterPath: ["accountListPoolNodeCountsOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const timeout19: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobGetAllLifetimeStatisticsOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId19: coreHttp.OperationParameter = {
  parameterPath: ["jobGetAllLifetimeStatisticsOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId19: coreHttp.OperationParameter = {
  parameterPath: [
    "jobGetAllLifetimeStatisticsOptions",
    "returnClientRequestId"
  ],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate19: coreHttp.OperationParameter = {
  parameterPath: ["jobGetAllLifetimeStatisticsOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobId: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout20: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobDeleteOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId20: coreHttp.OperationParameter = {
  parameterPath: ["jobDeleteOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId20: coreHttp.OperationParameter = {
  parameterPath: ["jobDeleteOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate20: coreHttp.OperationParameter = {
  parameterPath: ["jobDeleteOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch8: coreHttp.OperationParameter = {
  parameterPath: ["jobDeleteOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch8: coreHttp.OperationParameter = {
  parameterPath: ["jobDeleteOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince8: coreHttp.OperationParameter = {
  parameterPath: ["jobDeleteOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince8: coreHttp.OperationParameter = {
  parameterPath: ["jobDeleteOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobId1: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const $select2: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobGetOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const $expand2: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobGetOptions", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const timeout21: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobGetOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId21: coreHttp.OperationParameter = {
  parameterPath: ["jobGetOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId21: coreHttp.OperationParameter = {
  parameterPath: ["jobGetOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate21: coreHttp.OperationParameter = {
  parameterPath: ["jobGetOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch9: coreHttp.OperationParameter = {
  parameterPath: ["jobGetOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch9: coreHttp.OperationParameter = {
  parameterPath: ["jobGetOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince9: coreHttp.OperationParameter = {
  parameterPath: ["jobGetOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince9: coreHttp.OperationParameter = {
  parameterPath: ["jobGetOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobPatchParameter: coreHttp.OperationParameter = {
  parameterPath: "jobPatchParameter",
  mapper: Mappers.JobPatchParameter
};

export const jobId2: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout22: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobPatchOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId22: coreHttp.OperationParameter = {
  parameterPath: ["jobPatchOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId22: coreHttp.OperationParameter = {
  parameterPath: ["jobPatchOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate22: coreHttp.OperationParameter = {
  parameterPath: ["jobPatchOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch10: coreHttp.OperationParameter = {
  parameterPath: ["jobPatchOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch10: coreHttp.OperationParameter = {
  parameterPath: ["jobPatchOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince10: coreHttp.OperationParameter = {
  parameterPath: ["jobPatchOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince10: coreHttp.OperationParameter = {
  parameterPath: ["jobPatchOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobUpdateParameter: coreHttp.OperationParameter = {
  parameterPath: "jobUpdateParameter",
  mapper: Mappers.JobUpdateParameter
};

export const timeout23: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobUpdateOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId23: coreHttp.OperationParameter = {
  parameterPath: ["jobUpdateOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId23: coreHttp.OperationParameter = {
  parameterPath: ["jobUpdateOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate23: coreHttp.OperationParameter = {
  parameterPath: ["jobUpdateOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch11: coreHttp.OperationParameter = {
  parameterPath: ["jobUpdateOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch11: coreHttp.OperationParameter = {
  parameterPath: ["jobUpdateOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince11: coreHttp.OperationParameter = {
  parameterPath: ["jobUpdateOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince11: coreHttp.OperationParameter = {
  parameterPath: ["jobUpdateOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobDisableParameter: coreHttp.OperationParameter = {
  parameterPath: "jobDisableParameter",
  mapper: Mappers.JobDisableParameter
};

export const jobId3: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout24: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobDisableOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId24: coreHttp.OperationParameter = {
  parameterPath: ["jobDisableOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId24: coreHttp.OperationParameter = {
  parameterPath: ["jobDisableOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate24: coreHttp.OperationParameter = {
  parameterPath: ["jobDisableOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch12: coreHttp.OperationParameter = {
  parameterPath: ["jobDisableOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch12: coreHttp.OperationParameter = {
  parameterPath: ["jobDisableOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince12: coreHttp.OperationParameter = {
  parameterPath: ["jobDisableOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince12: coreHttp.OperationParameter = {
  parameterPath: ["jobDisableOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobId4: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout25: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobEnableOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId25: coreHttp.OperationParameter = {
  parameterPath: ["jobEnableOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId25: coreHttp.OperationParameter = {
  parameterPath: ["jobEnableOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate25: coreHttp.OperationParameter = {
  parameterPath: ["jobEnableOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch13: coreHttp.OperationParameter = {
  parameterPath: ["jobEnableOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch13: coreHttp.OperationParameter = {
  parameterPath: ["jobEnableOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince13: coreHttp.OperationParameter = {
  parameterPath: ["jobEnableOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince13: coreHttp.OperationParameter = {
  parameterPath: ["jobEnableOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobTerminateParameter: coreHttp.OperationParameter = {
  parameterPath: ["options", "jobTerminateParameter"],
  mapper: Mappers.JobTerminateParameter
};

export const jobId5: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout26: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobTerminateOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId26: coreHttp.OperationParameter = {
  parameterPath: ["jobTerminateOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId26: coreHttp.OperationParameter = {
  parameterPath: ["jobTerminateOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate26: coreHttp.OperationParameter = {
  parameterPath: ["jobTerminateOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch14: coreHttp.OperationParameter = {
  parameterPath: ["jobTerminateOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch14: coreHttp.OperationParameter = {
  parameterPath: ["jobTerminateOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince14: coreHttp.OperationParameter = {
  parameterPath: ["jobTerminateOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince14: coreHttp.OperationParameter = {
  parameterPath: ["jobTerminateOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const job: coreHttp.OperationParameter = {
  parameterPath: "job",
  mapper: Mappers.JobAddParameter
};

export const timeout27: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobAddOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId27: coreHttp.OperationParameter = {
  parameterPath: ["jobAddOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId27: coreHttp.OperationParameter = {
  parameterPath: ["jobAddOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate27: coreHttp.OperationParameter = {
  parameterPath: ["jobAddOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const $filter4: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobListOptions", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const $select3: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobListOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const $expand3: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobListOptions", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const maxresults5: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobListOptions", "maxResults"],
  mapper: {
    defaultValue: 1000,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 1000, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout28: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobListOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId28: coreHttp.OperationParameter = {
  parameterPath: ["jobListOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId28: coreHttp.OperationParameter = {
  parameterPath: ["jobListOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate28: coreHttp.OperationParameter = {
  parameterPath: ["jobListOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobScheduleId: coreHttp.OperationURLParameter = {
  parameterPath: "jobScheduleId",
  mapper: {
    serializedName: "jobScheduleId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const $filter5: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobListFromJobScheduleOptions", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const $select4: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobListFromJobScheduleOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const $expand4: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobListFromJobScheduleOptions", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const maxresults6: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobListFromJobScheduleOptions", "maxResults"],
  mapper: {
    defaultValue: 1000,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 1000, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout29: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobListFromJobScheduleOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId29: coreHttp.OperationParameter = {
  parameterPath: ["jobListFromJobScheduleOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId29: coreHttp.OperationParameter = {
  parameterPath: ["jobListFromJobScheduleOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate29: coreHttp.OperationParameter = {
  parameterPath: ["jobListFromJobScheduleOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const $filter6: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobListPreparationAndReleaseTaskStatusOptions", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const $select5: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobListPreparationAndReleaseTaskStatusOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const maxresults7: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "jobListPreparationAndReleaseTaskStatusOptions",
    "maxResults"
  ],
  mapper: {
    defaultValue: 1000,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 1000, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout30: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobListPreparationAndReleaseTaskStatusOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId30: coreHttp.OperationParameter = {
  parameterPath: [
    "jobListPreparationAndReleaseTaskStatusOptions",
    "clientRequestId"
  ],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId30: coreHttp.OperationParameter = {
  parameterPath: [
    "jobListPreparationAndReleaseTaskStatusOptions",
    "returnClientRequestId"
  ],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate30: coreHttp.OperationParameter = {
  parameterPath: ["jobListPreparationAndReleaseTaskStatusOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const timeout31: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobGetTaskCountsOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId31: coreHttp.OperationParameter = {
  parameterPath: ["jobGetTaskCountsOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId31: coreHttp.OperationParameter = {
  parameterPath: ["jobGetTaskCountsOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate31: coreHttp.OperationParameter = {
  parameterPath: ["jobGetTaskCountsOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nextLink4: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink5: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const certificate: coreHttp.OperationParameter = {
  parameterPath: "certificate",
  mapper: Mappers.CertificateAddParameter
};

export const timeout32: coreHttp.OperationQueryParameter = {
  parameterPath: ["certificateAddOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId32: coreHttp.OperationParameter = {
  parameterPath: ["certificateAddOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId32: coreHttp.OperationParameter = {
  parameterPath: ["certificateAddOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate32: coreHttp.OperationParameter = {
  parameterPath: ["certificateAddOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const $filter7: coreHttp.OperationQueryParameter = {
  parameterPath: ["certificateListOptions", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const $select6: coreHttp.OperationQueryParameter = {
  parameterPath: ["certificateListOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const maxresults8: coreHttp.OperationQueryParameter = {
  parameterPath: ["certificateListOptions", "maxResults"],
  mapper: {
    defaultValue: 1000,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 1000, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout33: coreHttp.OperationQueryParameter = {
  parameterPath: ["certificateListOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId33: coreHttp.OperationParameter = {
  parameterPath: ["certificateListOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId33: coreHttp.OperationParameter = {
  parameterPath: ["certificateListOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate33: coreHttp.OperationParameter = {
  parameterPath: ["certificateListOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const thumbprintAlgorithm: coreHttp.OperationURLParameter = {
  parameterPath: "thumbprintAlgorithm",
  mapper: {
    serializedName: "thumbprintAlgorithm",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const thumbprint: coreHttp.OperationURLParameter = {
  parameterPath: "thumbprint",
  mapper: {
    serializedName: "thumbprint",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout34: coreHttp.OperationQueryParameter = {
  parameterPath: ["certificateCancelDeletionOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId34: coreHttp.OperationParameter = {
  parameterPath: ["certificateCancelDeletionOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId34: coreHttp.OperationParameter = {
  parameterPath: ["certificateCancelDeletionOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate34: coreHttp.OperationParameter = {
  parameterPath: ["certificateCancelDeletionOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const thumbprint1: coreHttp.OperationURLParameter = {
  parameterPath: "thumbprint",
  mapper: {
    serializedName: "thumbprint",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout35: coreHttp.OperationQueryParameter = {
  parameterPath: ["certificateDeleteOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId35: coreHttp.OperationParameter = {
  parameterPath: ["certificateDeleteOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId35: coreHttp.OperationParameter = {
  parameterPath: ["certificateDeleteOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate35: coreHttp.OperationParameter = {
  parameterPath: ["certificateDeleteOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const thumbprint2: coreHttp.OperationURLParameter = {
  parameterPath: "thumbprint",
  mapper: {
    serializedName: "thumbprint",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const $select7: coreHttp.OperationQueryParameter = {
  parameterPath: ["certificateGetOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const timeout36: coreHttp.OperationQueryParameter = {
  parameterPath: ["certificateGetOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId36: coreHttp.OperationParameter = {
  parameterPath: ["certificateGetOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId36: coreHttp.OperationParameter = {
  parameterPath: ["certificateGetOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate36: coreHttp.OperationParameter = {
  parameterPath: ["certificateGetOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobId6: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const taskId: coreHttp.OperationURLParameter = {
  parameterPath: "taskId",
  mapper: {
    serializedName: "taskId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filePath: coreHttp.OperationURLParameter = {
  parameterPath: "filePath",
  mapper: {
    serializedName: "filePath",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const recursive: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "recursive"],
  mapper: {
    serializedName: "recursive",
    type: {
      name: "Boolean"
    }
  }
};

export const timeout37: coreHttp.OperationQueryParameter = {
  parameterPath: ["fileDeleteFromTaskOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId37: coreHttp.OperationParameter = {
  parameterPath: ["fileDeleteFromTaskOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId37: coreHttp.OperationParameter = {
  parameterPath: ["fileDeleteFromTaskOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate37: coreHttp.OperationParameter = {
  parameterPath: ["fileDeleteFromTaskOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobId7: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const taskId1: coreHttp.OperationURLParameter = {
  parameterPath: "taskId",
  mapper: {
    serializedName: "taskId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filePath1: coreHttp.OperationURLParameter = {
  parameterPath: "filePath",
  mapper: {
    serializedName: "filePath",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout38: coreHttp.OperationQueryParameter = {
  parameterPath: ["fileGetFromTaskOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId38: coreHttp.OperationParameter = {
  parameterPath: ["fileGetFromTaskOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId38: coreHttp.OperationParameter = {
  parameterPath: ["fileGetFromTaskOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate38: coreHttp.OperationParameter = {
  parameterPath: ["fileGetFromTaskOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ocpRange: coreHttp.OperationParameter = {
  parameterPath: ["fileGetFromTaskOptions", "ocpRange"],
  mapper: {
    serializedName: "ocp-range",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince15: coreHttp.OperationParameter = {
  parameterPath: ["fileGetFromTaskOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince15: coreHttp.OperationParameter = {
  parameterPath: ["fileGetFromTaskOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const taskId2: coreHttp.OperationURLParameter = {
  parameterPath: "taskId",
  mapper: {
    serializedName: "taskId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filePath2: coreHttp.OperationURLParameter = {
  parameterPath: "filePath",
  mapper: {
    serializedName: "filePath",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout39: coreHttp.OperationQueryParameter = {
  parameterPath: ["fileGetPropertiesFromTaskOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId39: coreHttp.OperationParameter = {
  parameterPath: ["fileGetPropertiesFromTaskOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId39: coreHttp.OperationParameter = {
  parameterPath: ["fileGetPropertiesFromTaskOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate39: coreHttp.OperationParameter = {
  parameterPath: ["fileGetPropertiesFromTaskOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifModifiedSince16: coreHttp.OperationParameter = {
  parameterPath: ["fileGetPropertiesFromTaskOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince16: coreHttp.OperationParameter = {
  parameterPath: ["fileGetPropertiesFromTaskOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const poolId9: coreHttp.OperationURLParameter = {
  parameterPath: "poolId",
  mapper: {
    serializedName: "poolId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nodeId: coreHttp.OperationURLParameter = {
  parameterPath: "nodeId",
  mapper: {
    serializedName: "nodeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filePath3: coreHttp.OperationURLParameter = {
  parameterPath: "filePath",
  mapper: {
    serializedName: "filePath",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout40: coreHttp.OperationQueryParameter = {
  parameterPath: ["fileDeleteFromComputeNodeOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId40: coreHttp.OperationParameter = {
  parameterPath: ["fileDeleteFromComputeNodeOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId40: coreHttp.OperationParameter = {
  parameterPath: ["fileDeleteFromComputeNodeOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate40: coreHttp.OperationParameter = {
  parameterPath: ["fileDeleteFromComputeNodeOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const poolId10: coreHttp.OperationURLParameter = {
  parameterPath: "poolId",
  mapper: {
    serializedName: "poolId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nodeId1: coreHttp.OperationURLParameter = {
  parameterPath: "nodeId",
  mapper: {
    serializedName: "nodeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filePath4: coreHttp.OperationURLParameter = {
  parameterPath: "filePath",
  mapper: {
    serializedName: "filePath",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout41: coreHttp.OperationQueryParameter = {
  parameterPath: ["fileGetFromComputeNodeOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId41: coreHttp.OperationParameter = {
  parameterPath: ["fileGetFromComputeNodeOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId41: coreHttp.OperationParameter = {
  parameterPath: ["fileGetFromComputeNodeOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate41: coreHttp.OperationParameter = {
  parameterPath: ["fileGetFromComputeNodeOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ocpRange1: coreHttp.OperationParameter = {
  parameterPath: ["fileGetFromComputeNodeOptions", "ocpRange"],
  mapper: {
    serializedName: "ocp-range",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince17: coreHttp.OperationParameter = {
  parameterPath: ["fileGetFromComputeNodeOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince17: coreHttp.OperationParameter = {
  parameterPath: ["fileGetFromComputeNodeOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const filePath5: coreHttp.OperationURLParameter = {
  parameterPath: "filePath",
  mapper: {
    serializedName: "filePath",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout42: coreHttp.OperationQueryParameter = {
  parameterPath: ["fileGetPropertiesFromComputeNodeOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId42: coreHttp.OperationParameter = {
  parameterPath: ["fileGetPropertiesFromComputeNodeOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId42: coreHttp.OperationParameter = {
  parameterPath: [
    "fileGetPropertiesFromComputeNodeOptions",
    "returnClientRequestId"
  ],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate42: coreHttp.OperationParameter = {
  parameterPath: ["fileGetPropertiesFromComputeNodeOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifModifiedSince18: coreHttp.OperationParameter = {
  parameterPath: ["fileGetPropertiesFromComputeNodeOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince18: coreHttp.OperationParameter = {
  parameterPath: [
    "fileGetPropertiesFromComputeNodeOptions",
    "ifUnmodifiedSince"
  ],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const taskId3: coreHttp.OperationURLParameter = {
  parameterPath: "taskId",
  mapper: {
    serializedName: "taskId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const $filter8: coreHttp.OperationQueryParameter = {
  parameterPath: ["fileListFromTaskOptions", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const recursive1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "recursive"],
  mapper: {
    serializedName: "recursive",
    type: {
      name: "Boolean"
    }
  }
};

export const maxresults9: coreHttp.OperationQueryParameter = {
  parameterPath: ["fileListFromTaskOptions", "maxResults"],
  mapper: {
    defaultValue: 1000,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 1000, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout43: coreHttp.OperationQueryParameter = {
  parameterPath: ["fileListFromTaskOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId43: coreHttp.OperationParameter = {
  parameterPath: ["fileListFromTaskOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId43: coreHttp.OperationParameter = {
  parameterPath: ["fileListFromTaskOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate43: coreHttp.OperationParameter = {
  parameterPath: ["fileListFromTaskOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nodeId2: coreHttp.OperationURLParameter = {
  parameterPath: "nodeId",
  mapper: {
    serializedName: "nodeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const $filter9: coreHttp.OperationQueryParameter = {
  parameterPath: ["fileListFromComputeNodeOptions", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const recursive2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "recursive"],
  mapper: {
    serializedName: "recursive",
    type: {
      name: "Boolean"
    }
  }
};

export const maxresults10: coreHttp.OperationQueryParameter = {
  parameterPath: ["fileListFromComputeNodeOptions", "maxResults"],
  mapper: {
    defaultValue: 1000,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 1000, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout44: coreHttp.OperationQueryParameter = {
  parameterPath: ["fileListFromComputeNodeOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId44: coreHttp.OperationParameter = {
  parameterPath: ["fileListFromComputeNodeOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId44: coreHttp.OperationParameter = {
  parameterPath: ["fileListFromComputeNodeOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate44: coreHttp.OperationParameter = {
  parameterPath: ["fileListFromComputeNodeOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nextLink6: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink7: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const jobScheduleId1: coreHttp.OperationURLParameter = {
  parameterPath: "jobScheduleId",
  mapper: {
    serializedName: "jobScheduleId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout45: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleExistsOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId45: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleExistsOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId45: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleExistsOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate45: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleExistsOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch15: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleExistsOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch15: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleExistsOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince19: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleExistsOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince19: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleExistsOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobScheduleId2: coreHttp.OperationURLParameter = {
  parameterPath: "jobScheduleId",
  mapper: {
    serializedName: "jobScheduleId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout46: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleDeleteOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId46: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDeleteOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId46: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDeleteOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate46: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDeleteOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch16: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDeleteOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch16: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDeleteOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince20: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDeleteOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince20: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDeleteOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobScheduleId3: coreHttp.OperationURLParameter = {
  parameterPath: "jobScheduleId",
  mapper: {
    serializedName: "jobScheduleId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const $select8: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleGetOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const $expand5: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleGetOptions", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const timeout47: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleGetOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId47: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleGetOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId47: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleGetOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate47: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleGetOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch17: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleGetOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch17: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleGetOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince21: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleGetOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince21: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleGetOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobSchedulePatchParameter: coreHttp.OperationParameter = {
  parameterPath: "jobSchedulePatchParameter",
  mapper: Mappers.JobSchedulePatchParameter
};

export const jobScheduleId4: coreHttp.OperationURLParameter = {
  parameterPath: "jobScheduleId",
  mapper: {
    serializedName: "jobScheduleId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout48: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobSchedulePatchOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId48: coreHttp.OperationParameter = {
  parameterPath: ["jobSchedulePatchOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId48: coreHttp.OperationParameter = {
  parameterPath: ["jobSchedulePatchOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate48: coreHttp.OperationParameter = {
  parameterPath: ["jobSchedulePatchOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch18: coreHttp.OperationParameter = {
  parameterPath: ["jobSchedulePatchOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch18: coreHttp.OperationParameter = {
  parameterPath: ["jobSchedulePatchOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince22: coreHttp.OperationParameter = {
  parameterPath: ["jobSchedulePatchOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince22: coreHttp.OperationParameter = {
  parameterPath: ["jobSchedulePatchOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobScheduleUpdateParameter: coreHttp.OperationParameter = {
  parameterPath: "jobScheduleUpdateParameter",
  mapper: Mappers.JobScheduleUpdateParameter
};

export const timeout49: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleUpdateOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId49: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleUpdateOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId49: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleUpdateOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate49: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleUpdateOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch19: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleUpdateOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch19: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleUpdateOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince23: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleUpdateOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince23: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleUpdateOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobScheduleId5: coreHttp.OperationURLParameter = {
  parameterPath: "jobScheduleId",
  mapper: {
    serializedName: "jobScheduleId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout50: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleDisableOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId50: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDisableOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId50: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDisableOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate50: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDisableOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch20: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDisableOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch20: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDisableOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince24: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDisableOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince24: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleDisableOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobScheduleId6: coreHttp.OperationURLParameter = {
  parameterPath: "jobScheduleId",
  mapper: {
    serializedName: "jobScheduleId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout51: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleEnableOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId51: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleEnableOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId51: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleEnableOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate51: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleEnableOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch21: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleEnableOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch21: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleEnableOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince25: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleEnableOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince25: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleEnableOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobScheduleId7: coreHttp.OperationURLParameter = {
  parameterPath: "jobScheduleId",
  mapper: {
    serializedName: "jobScheduleId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout52: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleTerminateOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId52: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleTerminateOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId52: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleTerminateOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate52: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleTerminateOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch22: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleTerminateOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch22: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleTerminateOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince26: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleTerminateOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince26: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleTerminateOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const cloudJobSchedule: coreHttp.OperationParameter = {
  parameterPath: "cloudJobSchedule",
  mapper: Mappers.JobScheduleAddParameter
};

export const timeout53: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleAddOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId53: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleAddOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId53: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleAddOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate53: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleAddOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const $filter10: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleListOptions", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const $select9: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleListOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const $expand6: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleListOptions", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const maxresults11: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleListOptions", "maxResults"],
  mapper: {
    defaultValue: 1000,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 1000, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout54: coreHttp.OperationQueryParameter = {
  parameterPath: ["jobScheduleListOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId54: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleListOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId54: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleListOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate54: coreHttp.OperationParameter = {
  parameterPath: ["jobScheduleListOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const task: coreHttp.OperationParameter = {
  parameterPath: "task",
  mapper: Mappers.TaskAddParameter
};

export const jobId8: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout55: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskAddOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId55: coreHttp.OperationParameter = {
  parameterPath: ["taskAddOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId55: coreHttp.OperationParameter = {
  parameterPath: ["taskAddOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate55: coreHttp.OperationParameter = {
  parameterPath: ["taskAddOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const $filter11: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskListOptions", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const $select10: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskListOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const $expand7: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskListOptions", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const maxresults12: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskListOptions", "maxResults"],
  mapper: {
    defaultValue: 1000,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 1000, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout56: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskListOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId56: coreHttp.OperationParameter = {
  parameterPath: ["taskListOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId56: coreHttp.OperationParameter = {
  parameterPath: ["taskListOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate56: coreHttp.OperationParameter = {
  parameterPath: ["taskListOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const taskCollection: coreHttp.OperationParameter = {
  parameterPath: "taskCollection",
  mapper: Mappers.TaskAddCollectionParameter
};

export const jobId9: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout57: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskAddCollectionOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId57: coreHttp.OperationParameter = {
  parameterPath: ["taskAddCollectionOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId57: coreHttp.OperationParameter = {
  parameterPath: ["taskAddCollectionOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate57: coreHttp.OperationParameter = {
  parameterPath: ["taskAddCollectionOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const jobId10: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const taskId4: coreHttp.OperationURLParameter = {
  parameterPath: "taskId",
  mapper: {
    serializedName: "taskId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout58: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskDeleteOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId58: coreHttp.OperationParameter = {
  parameterPath: ["taskDeleteOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId58: coreHttp.OperationParameter = {
  parameterPath: ["taskDeleteOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate58: coreHttp.OperationParameter = {
  parameterPath: ["taskDeleteOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch23: coreHttp.OperationParameter = {
  parameterPath: ["taskDeleteOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch23: coreHttp.OperationParameter = {
  parameterPath: ["taskDeleteOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince27: coreHttp.OperationParameter = {
  parameterPath: ["taskDeleteOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince27: coreHttp.OperationParameter = {
  parameterPath: ["taskDeleteOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const taskId5: coreHttp.OperationURLParameter = {
  parameterPath: "taskId",
  mapper: {
    serializedName: "taskId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const $select11: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskGetOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const $expand8: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskGetOptions", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const timeout59: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskGetOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId59: coreHttp.OperationParameter = {
  parameterPath: ["taskGetOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId59: coreHttp.OperationParameter = {
  parameterPath: ["taskGetOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate59: coreHttp.OperationParameter = {
  parameterPath: ["taskGetOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch24: coreHttp.OperationParameter = {
  parameterPath: ["taskGetOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch24: coreHttp.OperationParameter = {
  parameterPath: ["taskGetOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince28: coreHttp.OperationParameter = {
  parameterPath: ["taskGetOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince28: coreHttp.OperationParameter = {
  parameterPath: ["taskGetOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const taskUpdateParameter: coreHttp.OperationParameter = {
  parameterPath: "taskUpdateParameter",
  mapper: Mappers.TaskUpdateParameter
};

export const jobId11: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const taskId6: coreHttp.OperationURLParameter = {
  parameterPath: "taskId",
  mapper: {
    serializedName: "taskId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout60: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskUpdateOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId60: coreHttp.OperationParameter = {
  parameterPath: ["taskUpdateOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId60: coreHttp.OperationParameter = {
  parameterPath: ["taskUpdateOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate60: coreHttp.OperationParameter = {
  parameterPath: ["taskUpdateOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch25: coreHttp.OperationParameter = {
  parameterPath: ["taskUpdateOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch25: coreHttp.OperationParameter = {
  parameterPath: ["taskUpdateOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince29: coreHttp.OperationParameter = {
  parameterPath: ["taskUpdateOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince29: coreHttp.OperationParameter = {
  parameterPath: ["taskUpdateOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const taskId7: coreHttp.OperationURLParameter = {
  parameterPath: "taskId",
  mapper: {
    serializedName: "taskId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const $select12: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskListSubtasksOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const timeout61: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskListSubtasksOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId61: coreHttp.OperationParameter = {
  parameterPath: ["taskListSubtasksOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId61: coreHttp.OperationParameter = {
  parameterPath: ["taskListSubtasksOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate61: coreHttp.OperationParameter = {
  parameterPath: ["taskListSubtasksOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const taskId8: coreHttp.OperationURLParameter = {
  parameterPath: "taskId",
  mapper: {
    serializedName: "taskId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout62: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskTerminateOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId62: coreHttp.OperationParameter = {
  parameterPath: ["taskTerminateOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId62: coreHttp.OperationParameter = {
  parameterPath: ["taskTerminateOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate62: coreHttp.OperationParameter = {
  parameterPath: ["taskTerminateOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch26: coreHttp.OperationParameter = {
  parameterPath: ["taskTerminateOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch26: coreHttp.OperationParameter = {
  parameterPath: ["taskTerminateOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince30: coreHttp.OperationParameter = {
  parameterPath: ["taskTerminateOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince30: coreHttp.OperationParameter = {
  parameterPath: ["taskTerminateOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const taskId9: coreHttp.OperationURLParameter = {
  parameterPath: "taskId",
  mapper: {
    serializedName: "taskId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout63: coreHttp.OperationQueryParameter = {
  parameterPath: ["taskReactivateOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId63: coreHttp.OperationParameter = {
  parameterPath: ["taskReactivateOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId63: coreHttp.OperationParameter = {
  parameterPath: ["taskReactivateOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate63: coreHttp.OperationParameter = {
  parameterPath: ["taskReactivateOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifMatch27: coreHttp.OperationParameter = {
  parameterPath: ["taskReactivateOptions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch27: coreHttp.OperationParameter = {
  parameterPath: ["taskReactivateOptions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const ifModifiedSince31: coreHttp.OperationParameter = {
  parameterPath: ["taskReactivateOptions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const ifUnmodifiedSince31: coreHttp.OperationParameter = {
  parameterPath: ["taskReactivateOptions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const user: coreHttp.OperationParameter = {
  parameterPath: "user",
  mapper: Mappers.ComputeNodeUser
};

export const nodeId3: coreHttp.OperationURLParameter = {
  parameterPath: "nodeId",
  mapper: {
    serializedName: "nodeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout64: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeAddUserOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId64: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeAddUserOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId64: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeAddUserOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate64: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeAddUserOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nodeId4: coreHttp.OperationURLParameter = {
  parameterPath: "nodeId",
  mapper: {
    serializedName: "nodeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const userName: coreHttp.OperationURLParameter = {
  parameterPath: "userName",
  mapper: {
    serializedName: "userName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout65: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeDeleteUserOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId65: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeDeleteUserOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId65: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeDeleteUserOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate65: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeDeleteUserOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nodeUpdateUserParameter: coreHttp.OperationParameter = {
  parameterPath: "nodeUpdateUserParameter",
  mapper: Mappers.NodeUpdateUserParameter
};

export const nodeId5: coreHttp.OperationURLParameter = {
  parameterPath: "nodeId",
  mapper: {
    serializedName: "nodeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const userName1: coreHttp.OperationURLParameter = {
  parameterPath: "userName",
  mapper: {
    serializedName: "userName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout66: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeUpdateUserOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId66: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeUpdateUserOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId66: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeUpdateUserOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate66: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeUpdateUserOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nodeId6: coreHttp.OperationURLParameter = {
  parameterPath: "nodeId",
  mapper: {
    serializedName: "nodeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const $select13: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeGetOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const timeout67: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeGetOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId67: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeGetOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId67: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeGetOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate67: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeGetOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nodeRebootParameter: coreHttp.OperationParameter = {
  parameterPath: ["options", "nodeRebootParameter"],
  mapper: Mappers.NodeRebootParameter
};

export const nodeId7: coreHttp.OperationURLParameter = {
  parameterPath: "nodeId",
  mapper: {
    serializedName: "nodeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout68: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeRebootOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId68: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeRebootOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId68: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeRebootOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate68: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeRebootOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nodeReimageParameter: coreHttp.OperationParameter = {
  parameterPath: ["options", "nodeReimageParameter"],
  mapper: Mappers.NodeReimageParameter
};

export const timeout69: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeReimageOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId69: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeReimageOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId69: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeReimageOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate69: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeReimageOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nodeDisableSchedulingParameter: coreHttp.OperationParameter = {
  parameterPath: ["options", "nodeDisableSchedulingParameter"],
  mapper: Mappers.NodeDisableSchedulingParameter
};

export const nodeId8: coreHttp.OperationURLParameter = {
  parameterPath: "nodeId",
  mapper: {
    serializedName: "nodeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout70: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeDisableSchedulingOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId70: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeDisableSchedulingOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId70: coreHttp.OperationParameter = {
  parameterPath: [
    "computeNodeDisableSchedulingOptions",
    "returnClientRequestId"
  ],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate70: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeDisableSchedulingOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nodeId9: coreHttp.OperationURLParameter = {
  parameterPath: "nodeId",
  mapper: {
    serializedName: "nodeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout71: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeEnableSchedulingOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId71: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeEnableSchedulingOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId71: coreHttp.OperationParameter = {
  parameterPath: [
    "computeNodeEnableSchedulingOptions",
    "returnClientRequestId"
  ],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate71: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeEnableSchedulingOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nodeId10: coreHttp.OperationURLParameter = {
  parameterPath: "nodeId",
  mapper: {
    serializedName: "nodeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout72: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeGetRemoteLoginSettingsOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId72: coreHttp.OperationParameter = {
  parameterPath: [
    "computeNodeGetRemoteLoginSettingsOptions",
    "clientRequestId"
  ],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId72: coreHttp.OperationParameter = {
  parameterPath: [
    "computeNodeGetRemoteLoginSettingsOptions",
    "returnClientRequestId"
  ],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate72: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeGetRemoteLoginSettingsOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const nodeId11: coreHttp.OperationURLParameter = {
  parameterPath: "nodeId",
  mapper: {
    serializedName: "nodeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout73: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeGetRemoteDesktopOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId73: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeGetRemoteDesktopOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId73: coreHttp.OperationParameter = {
  parameterPath: [
    "computeNodeGetRemoteDesktopOptions",
    "returnClientRequestId"
  ],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate73: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeGetRemoteDesktopOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const uploadBatchServiceLogsConfiguration: coreHttp.OperationParameter = {
  parameterPath: "uploadBatchServiceLogsConfiguration",
  mapper: Mappers.UploadBatchServiceLogsConfiguration
};

export const nodeId12: coreHttp.OperationURLParameter = {
  parameterPath: "nodeId",
  mapper: {
    serializedName: "nodeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timeout74: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeUploadBatchServiceLogsOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId74: coreHttp.OperationParameter = {
  parameterPath: [
    "computeNodeUploadBatchServiceLogsOptions",
    "clientRequestId"
  ],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId74: coreHttp.OperationParameter = {
  parameterPath: [
    "computeNodeUploadBatchServiceLogsOptions",
    "returnClientRequestId"
  ],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate74: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeUploadBatchServiceLogsOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};

export const poolId11: coreHttp.OperationURLParameter = {
  parameterPath: "poolId",
  mapper: {
    serializedName: "poolId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const $filter12: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeListOptions", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const $select14: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeListOptions", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const maxresults13: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeListOptions", "maxResults"],
  mapper: {
    defaultValue: 1000,
    serializedName: "maxresults",
    constraints: { InclusiveMaximum: 1000, InclusiveMinimum: 1 },
    type: {
      name: "Number"
    }
  }
};

export const timeout75: coreHttp.OperationQueryParameter = {
  parameterPath: ["computeNodeListOptions", "timeout"],
  mapper: {
    defaultValue: 30,
    serializedName: "timeout",
    type: {
      name: "Number"
    }
  }
};

export const clientRequestId75: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeListOptions", "clientRequestId"],
  mapper: {
    serializedName: "client-request-id",
    type: {
      name: "Uuid"
    }
  }
};

export const returnClientRequestId75: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeListOptions", "returnClientRequestId"],
  mapper: {
    serializedName: "return-client-request-id",
    type: {
      name: "Boolean"
    }
  }
};

export const ocpDate75: coreHttp.OperationParameter = {
  parameterPath: ["computeNodeListOptions", "ocpDate"],
  mapper: {
    serializedName: "ocp-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
