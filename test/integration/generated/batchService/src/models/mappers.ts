/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const ApplicationListResult: coreHttp.CompositeMapper = {
  serializedName: "ApplicationListResult",
  type: {
    name: "Composite",
    className: "ApplicationListResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ApplicationSummary" }
          }
        },
        serializedName: "value"
      },
      odataNextLink: {
        type: { name: "String" },
        serializedName: "odata\\.nextLink"
      }
    }
  }
};

export const ApplicationSummary: coreHttp.CompositeMapper = {
  serializedName: "ApplicationSummary",
  type: {
    name: "Composite",
    className: "ApplicationSummary",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      displayName: {
        type: { name: "String" },
        serializedName: "displayName",
        required: true
      },
      versions: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ApplicationSummaryVersionsItem"
          }
        },
        serializedName: "versions",
        required: true
      }
    }
  }
};

export const BatchError: coreHttp.CompositeMapper = {
  serializedName: "BatchError",
  type: {
    name: "Composite",
    className: "BatchError",
    modelProperties: {
      code: { type: { name: "String" }, serializedName: "code" },
      message: {
        serializedName: "message",
        type: { name: "Composite", className: "ErrorMessage" }
      },
      values: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "BatchErrorDetail" }
          }
        },
        serializedName: "values"
      }
    }
  }
};

export const ErrorMessage: coreHttp.CompositeMapper = {
  serializedName: "ErrorMessage",
  type: {
    name: "Composite",
    className: "ErrorMessage",
    modelProperties: {
      lang: { type: { name: "String" }, serializedName: "lang" },
      value: { type: { name: "String" }, serializedName: "value" }
    }
  }
};

export const BatchErrorDetail: coreHttp.CompositeMapper = {
  serializedName: "BatchErrorDetail",
  type: {
    name: "Composite",
    className: "BatchErrorDetail",
    modelProperties: {
      key: { type: { name: "String" }, serializedName: "key" },
      value: { type: { name: "String" }, serializedName: "value" }
    }
  }
};

export const PoolListUsageMetricsResult: coreHttp.CompositeMapper = {
  serializedName: "PoolListUsageMetricsResult",
  type: {
    name: "Composite",
    className: "PoolListUsageMetricsResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PoolUsageMetrics" }
          }
        },
        serializedName: "value"
      },
      odataNextLink: {
        type: { name: "String" },
        serializedName: "odata\\.nextLink"
      }
    }
  }
};

export const PoolUsageMetrics: coreHttp.CompositeMapper = {
  serializedName: "PoolUsageMetrics",
  type: {
    name: "Composite",
    className: "PoolUsageMetrics",
    modelProperties: {
      poolId: {
        type: { name: "String" },
        serializedName: "poolId",
        required: true
      },
      startTime: {
        type: { name: "DateTime" },
        serializedName: "startTime",
        required: true
      },
      endTime: {
        type: { name: "DateTime" },
        serializedName: "endTime",
        required: true
      },
      vmSize: {
        type: { name: "String" },
        serializedName: "vmSize",
        required: true
      },
      totalCoreHours: {
        type: { name: "Number" },
        serializedName: "totalCoreHours",
        required: true
      }
    }
  }
};

export const AccountListSupportedImagesResult: coreHttp.CompositeMapper = {
  serializedName: "AccountListSupportedImagesResult",
  type: {
    name: "Composite",
    className: "AccountListSupportedImagesResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ImageInformation" }
          }
        },
        serializedName: "value"
      },
      odataNextLink: {
        type: { name: "String" },
        serializedName: "odata\\.nextLink"
      }
    }
  }
};

export const ImageInformation: coreHttp.CompositeMapper = {
  serializedName: "ImageInformation",
  type: {
    name: "Composite",
    className: "ImageInformation",
    modelProperties: {
      nodeAgentSKUId: {
        type: { name: "String" },
        serializedName: "nodeAgentSKUId",
        required: true
      },
      imageReference: {
        serializedName: "imageReference",
        type: { name: "Composite", className: "ImageReference" }
      },
      osType: {
        type: { name: "Enum", allowedValues: ["linux", "windows"] },
        serializedName: "osType",
        required: true
      },
      capabilities: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ImageInformationCapabilitiesItem"
          }
        },
        serializedName: "capabilities"
      },
      batchSupportEndOfLife: {
        type: { name: "DateTime" },
        serializedName: "batchSupportEndOfLife"
      },
      verificationType: {
        type: { name: "Enum", allowedValues: ["verified", "unverified"] },
        serializedName: "verificationType",
        required: true
      }
    }
  }
};

export const ImageReference: coreHttp.CompositeMapper = {
  serializedName: "ImageReference",
  type: {
    name: "Composite",
    className: "ImageReference",
    modelProperties: {
      publisher: { type: { name: "String" }, serializedName: "publisher" },
      offer: { type: { name: "String" }, serializedName: "offer" },
      sku: { type: { name: "String" }, serializedName: "sku" },
      version: { type: { name: "String" }, serializedName: "version" },
      virtualMachineImageId: {
        type: { name: "String" },
        serializedName: "virtualMachineImageId"
      }
    }
  }
};

export const PoolNodeCountsListResult: coreHttp.CompositeMapper = {
  serializedName: "PoolNodeCountsListResult",
  type: {
    name: "Composite",
    className: "PoolNodeCountsListResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PoolNodeCounts" } }
        },
        serializedName: "value"
      },
      odataNextLink: {
        type: { name: "String" },
        serializedName: "odata\\.nextLink"
      }
    }
  }
};

export const PoolNodeCounts: coreHttp.CompositeMapper = {
  serializedName: "PoolNodeCounts",
  type: {
    name: "Composite",
    className: "PoolNodeCounts",
    modelProperties: {
      poolId: {
        type: { name: "String" },
        serializedName: "poolId",
        required: true
      },
      dedicated: {
        serializedName: "dedicated",
        type: { name: "Composite", className: "NodeCounts" }
      },
      lowPriority: {
        serializedName: "lowPriority",
        type: { name: "Composite", className: "NodeCounts" }
      }
    }
  }
};

export const NodeCounts: coreHttp.CompositeMapper = {
  serializedName: "NodeCounts",
  type: {
    name: "Composite",
    className: "NodeCounts",
    modelProperties: {
      creating: {
        type: { name: "Number" },
        serializedName: "creating",
        required: true
      },
      idle: {
        type: { name: "Number" },
        serializedName: "idle",
        required: true
      },
      offline: {
        type: { name: "Number" },
        serializedName: "offline",
        required: true
      },
      preempted: {
        type: { name: "Number" },
        serializedName: "preempted",
        required: true
      },
      rebooting: {
        type: { name: "Number" },
        serializedName: "rebooting",
        required: true
      },
      reimaging: {
        type: { name: "Number" },
        serializedName: "reimaging",
        required: true
      },
      running: {
        type: { name: "Number" },
        serializedName: "running",
        required: true
      },
      starting: {
        type: { name: "Number" },
        serializedName: "starting",
        required: true
      },
      startTaskFailed: {
        type: { name: "Number" },
        serializedName: "startTaskFailed",
        required: true
      },
      leavingPool: {
        type: { name: "Number" },
        serializedName: "leavingPool",
        required: true
      },
      unknown: {
        type: { name: "Number" },
        serializedName: "unknown",
        required: true
      },
      unusable: {
        type: { name: "Number" },
        serializedName: "unusable",
        required: true
      },
      waitingForStartTask: {
        type: { name: "Number" },
        serializedName: "waitingForStartTask",
        required: true
      },
      total: {
        type: { name: "Number" },
        serializedName: "total",
        required: true
      }
    }
  }
};

export const PoolStatistics: coreHttp.CompositeMapper = {
  serializedName: "PoolStatistics",
  type: {
    name: "Composite",
    className: "PoolStatistics",
    modelProperties: {
      url: { type: { name: "String" }, serializedName: "url", required: true },
      startTime: {
        type: { name: "DateTime" },
        serializedName: "startTime",
        required: true
      },
      lastUpdateTime: {
        type: { name: "DateTime" },
        serializedName: "lastUpdateTime",
        required: true
      },
      usageStats: {
        serializedName: "usageStats",
        type: { name: "Composite", className: "UsageStatistics" }
      },
      resourceStats: {
        serializedName: "resourceStats",
        type: { name: "Composite", className: "ResourceStatistics" }
      }
    }
  }
};

export const UsageStatistics: coreHttp.CompositeMapper = {
  serializedName: "UsageStatistics",
  type: {
    name: "Composite",
    className: "UsageStatistics",
    modelProperties: {
      startTime: {
        type: { name: "DateTime" },
        serializedName: "startTime",
        required: true
      },
      lastUpdateTime: {
        type: { name: "DateTime" },
        serializedName: "lastUpdateTime",
        required: true
      },
      dedicatedCoreTime: {
        type: { name: "TimeSpan" },
        serializedName: "dedicatedCoreTime",
        required: true
      }
    }
  }
};

export const ResourceStatistics: coreHttp.CompositeMapper = {
  serializedName: "ResourceStatistics",
  type: {
    name: "Composite",
    className: "ResourceStatistics",
    modelProperties: {
      startTime: {
        type: { name: "DateTime" },
        serializedName: "startTime",
        required: true
      },
      lastUpdateTime: {
        type: { name: "DateTime" },
        serializedName: "lastUpdateTime",
        required: true
      },
      avgCPUPercentage: {
        type: { name: "Number" },
        serializedName: "avgCPUPercentage",
        required: true
      },
      avgMemoryGiB: {
        type: { name: "Number" },
        serializedName: "avgMemoryGiB",
        required: true
      },
      peakMemoryGiB: {
        type: { name: "Number" },
        serializedName: "peakMemoryGiB",
        required: true
      },
      avgDiskGiB: {
        type: { name: "Number" },
        serializedName: "avgDiskGiB",
        required: true
      },
      peakDiskGiB: {
        type: { name: "Number" },
        serializedName: "peakDiskGiB",
        required: true
      },
      diskReadIOps: {
        type: { name: "Number" },
        serializedName: "diskReadIOps",
        required: true
      },
      diskWriteIOps: {
        type: { name: "Number" },
        serializedName: "diskWriteIOps",
        required: true
      },
      diskReadGiB: {
        type: { name: "Number" },
        serializedName: "diskReadGiB",
        required: true
      },
      diskWriteGiB: {
        type: { name: "Number" },
        serializedName: "diskWriteGiB",
        required: true
      },
      networkReadGiB: {
        type: { name: "Number" },
        serializedName: "networkReadGiB",
        required: true
      },
      networkWriteGiB: {
        type: { name: "Number" },
        serializedName: "networkWriteGiB",
        required: true
      }
    }
  }
};

export const JobStatistics: coreHttp.CompositeMapper = {
  serializedName: "JobStatistics",
  type: {
    name: "Composite",
    className: "JobStatistics",
    modelProperties: {
      url: { type: { name: "String" }, serializedName: "url", required: true },
      startTime: {
        type: { name: "DateTime" },
        serializedName: "startTime",
        required: true
      },
      lastUpdateTime: {
        type: { name: "DateTime" },
        serializedName: "lastUpdateTime",
        required: true
      },
      userCPUTime: {
        type: { name: "TimeSpan" },
        serializedName: "userCPUTime",
        required: true
      },
      kernelCPUTime: {
        type: { name: "TimeSpan" },
        serializedName: "kernelCPUTime",
        required: true
      },
      wallClockTime: {
        type: { name: "TimeSpan" },
        serializedName: "wallClockTime",
        required: true
      },
      readIOps: {
        type: { name: "Number" },
        serializedName: "readIOps",
        required: true
      },
      writeIOps: {
        type: { name: "Number" },
        serializedName: "writeIOps",
        required: true
      },
      readIOGiB: {
        type: { name: "Number" },
        serializedName: "readIOGiB",
        required: true
      },
      writeIOGiB: {
        type: { name: "Number" },
        serializedName: "writeIOGiB",
        required: true
      },
      numSucceededTasks: {
        type: { name: "Number" },
        serializedName: "numSucceededTasks",
        required: true
      },
      numFailedTasks: {
        type: { name: "Number" },
        serializedName: "numFailedTasks",
        required: true
      },
      numTaskRetries: {
        type: { name: "Number" },
        serializedName: "numTaskRetries",
        required: true
      },
      waitTime: {
        type: { name: "TimeSpan" },
        serializedName: "waitTime",
        required: true
      }
    }
  }
};

export const CertificateAddParameter: coreHttp.CompositeMapper = {
  serializedName: "CertificateAddParameter",
  type: {
    name: "Composite",
    className: "CertificateAddParameter",
    modelProperties: {
      thumbprint: {
        type: { name: "String" },
        serializedName: "thumbprint",
        required: true
      },
      thumbprintAlgorithm: {
        type: { name: "String" },
        serializedName: "thumbprintAlgorithm",
        required: true
      },
      data: {
        type: { name: "String" },
        serializedName: "data",
        required: true
      },
      certificateFormat: {
        type: { name: "Enum", allowedValues: ["pfx", "cer"] },
        serializedName: "certificateFormat"
      },
      password: { type: { name: "String" }, serializedName: "password" }
    }
  }
};

export const CertificateListResult: coreHttp.CompositeMapper = {
  serializedName: "CertificateListResult",
  type: {
    name: "Composite",
    className: "CertificateListResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Certificate" } }
        },
        serializedName: "value"
      },
      odataNextLink: {
        type: { name: "String" },
        serializedName: "odata\\.nextLink"
      }
    }
  }
};

export const Certificate: coreHttp.CompositeMapper = {
  serializedName: "Certificate",
  type: {
    name: "Composite",
    className: "Certificate",
    modelProperties: {
      thumbprint: { type: { name: "String" }, serializedName: "thumbprint" },
      thumbprintAlgorithm: {
        type: { name: "String" },
        serializedName: "thumbprintAlgorithm"
      },
      url: { type: { name: "String" }, serializedName: "url" },
      state: {
        type: {
          name: "Enum",
          allowedValues: ["active", "deleting", "deletefailed"]
        },
        serializedName: "state"
      },
      stateTransitionTime: {
        type: { name: "DateTime" },
        serializedName: "stateTransitionTime"
      },
      previousState: {
        type: {
          name: "Enum",
          allowedValues: ["active", "deleting", "deletefailed"]
        },
        serializedName: "previousState"
      },
      previousStateTransitionTime: {
        type: { name: "DateTime" },
        serializedName: "previousStateTransitionTime"
      },
      publicData: { type: { name: "String" }, serializedName: "publicData" },
      deleteCertificateError: {
        serializedName: "deleteCertificateError",
        type: { name: "Composite", className: "DeleteCertificateError" }
      }
    }
  }
};

export const DeleteCertificateError: coreHttp.CompositeMapper = {
  serializedName: "DeleteCertificateError",
  type: {
    name: "Composite",
    className: "DeleteCertificateError",
    modelProperties: {
      code: { type: { name: "String" }, serializedName: "code" },
      message: { type: { name: "String" }, serializedName: "message" },
      values: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NameValuePair" } }
        },
        serializedName: "values"
      }
    }
  }
};

export const NameValuePair: coreHttp.CompositeMapper = {
  serializedName: "NameValuePair",
  type: {
    name: "Composite",
    className: "NameValuePair",
    modelProperties: {
      name: { type: { name: "String" }, serializedName: "name" },
      value: { type: { name: "String" }, serializedName: "value" }
    }
  }
};

export const NodeFileListResult: coreHttp.CompositeMapper = {
  serializedName: "NodeFileListResult",
  type: {
    name: "Composite",
    className: "NodeFileListResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NodeFile" } }
        },
        serializedName: "value"
      },
      odataNextLink: {
        type: { name: "String" },
        serializedName: "odata\\.nextLink"
      }
    }
  }
};

export const NodeFile: coreHttp.CompositeMapper = {
  serializedName: "NodeFile",
  type: {
    name: "Composite",
    className: "NodeFile",
    modelProperties: {
      name: { type: { name: "String" }, serializedName: "name" },
      url: { type: { name: "String" }, serializedName: "url" },
      isDirectory: { type: { name: "Boolean" }, serializedName: "isDirectory" },
      properties: {
        serializedName: "properties",
        type: { name: "Composite", className: "FileProperties" }
      }
    }
  }
};

export const FileProperties: coreHttp.CompositeMapper = {
  serializedName: "FileProperties",
  type: {
    name: "Composite",
    className: "FileProperties",
    modelProperties: {
      creationTime: {
        type: { name: "DateTime" },
        serializedName: "creationTime"
      },
      lastModified: {
        type: { name: "DateTime" },
        serializedName: "lastModified",
        required: true
      },
      contentLength: {
        type: { name: "Number" },
        serializedName: "contentLength",
        required: true
      },
      contentType: { type: { name: "String" }, serializedName: "contentType" },
      fileMode: { type: { name: "String" }, serializedName: "fileMode" }
    }
  }
};

export const CloudJobSchedule: coreHttp.CompositeMapper = {
  serializedName: "CloudJobSchedule",
  type: {
    name: "Composite",
    className: "CloudJobSchedule",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      url: { type: { name: "String" }, serializedName: "url" },
      eTag: { type: { name: "String" }, serializedName: "eTag" },
      lastModified: {
        type: { name: "DateTime" },
        serializedName: "lastModified"
      },
      creationTime: {
        type: { name: "DateTime" },
        serializedName: "creationTime"
      },
      state: {
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "completed",
            "disabled",
            "terminating",
            "deleting"
          ]
        },
        serializedName: "state"
      },
      stateTransitionTime: {
        type: { name: "DateTime" },
        serializedName: "stateTransitionTime"
      },
      previousState: {
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "completed",
            "disabled",
            "terminating",
            "deleting"
          ]
        },
        serializedName: "previousState"
      },
      previousStateTransitionTime: {
        type: { name: "DateTime" },
        serializedName: "previousStateTransitionTime"
      },
      schedule: {
        serializedName: "schedule",
        type: { name: "Composite", className: "Schedule" }
      },
      jobSpecification: {
        serializedName: "jobSpecification",
        type: { name: "Composite", className: "JobSpecification" }
      },
      executionInfo: {
        serializedName: "executionInfo",
        type: {
          name: "Composite",
          className: "JobScheduleExecutionInformation"
        }
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata"
      },
      stats: {
        serializedName: "stats",
        type: { name: "Composite", className: "JobScheduleStatistics" }
      }
    }
  }
};

export const Schedule: coreHttp.CompositeMapper = {
  serializedName: "Schedule",
  type: {
    name: "Composite",
    className: "Schedule",
    modelProperties: {
      doNotRunUntil: {
        type: { name: "DateTime" },
        serializedName: "doNotRunUntil"
      },
      doNotRunAfter: {
        type: { name: "DateTime" },
        serializedName: "doNotRunAfter"
      },
      startWindow: {
        type: { name: "TimeSpan" },
        serializedName: "startWindow"
      },
      recurrenceInterval: {
        type: { name: "TimeSpan" },
        serializedName: "recurrenceInterval"
      }
    }
  }
};

export const JobSpecification: coreHttp.CompositeMapper = {
  serializedName: "JobSpecification",
  type: {
    name: "Composite",
    className: "JobSpecification",
    modelProperties: {
      priority: { type: { name: "Number" }, serializedName: "priority" },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      usesTaskDependencies: {
        type: { name: "Boolean" },
        serializedName: "usesTaskDependencies"
      },
      onAllTasksComplete: {
        type: { name: "Enum", allowedValues: ["noaction", "terminatejob"] },
        serializedName: "onAllTasksComplete"
      },
      onTaskFailure: {
        type: {
          name: "Enum",
          allowedValues: ["noaction", "performexitoptionsjobaction"]
        },
        serializedName: "onTaskFailure"
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: { name: "Composite", className: "JobNetworkConfiguration" }
      },
      constraints: {
        serializedName: "constraints",
        type: { name: "Composite", className: "JobConstraints" }
      },
      jobManagerTask: {
        serializedName: "jobManagerTask",
        type: { name: "Composite", className: "JobManagerTask" }
      },
      jobPreparationTask: {
        serializedName: "jobPreparationTask",
        type: { name: "Composite", className: "JobPreparationTask" }
      },
      jobReleaseTask: {
        serializedName: "jobReleaseTask",
        type: { name: "Composite", className: "JobReleaseTask" }
      },
      commonEnvironmentSettings: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentSetting" }
          }
        },
        serializedName: "commonEnvironmentSettings"
      },
      poolInfo: {
        serializedName: "poolInfo",
        type: { name: "Composite", className: "PoolInformation" }
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata"
      }
    }
  }
};

export const JobNetworkConfiguration: coreHttp.CompositeMapper = {
  serializedName: "JobNetworkConfiguration",
  type: {
    name: "Composite",
    className: "JobNetworkConfiguration",
    modelProperties: {
      subnetId: {
        type: { name: "String" },
        serializedName: "subnetId",
        required: true
      }
    }
  }
};

export const JobConstraints: coreHttp.CompositeMapper = {
  serializedName: "JobConstraints",
  type: {
    name: "Composite",
    className: "JobConstraints",
    modelProperties: {
      maxWallClockTime: {
        type: { name: "TimeSpan" },
        serializedName: "maxWallClockTime"
      },
      maxTaskRetryCount: {
        type: { name: "Number" },
        serializedName: "maxTaskRetryCount"
      }
    }
  }
};

export const JobManagerTask: coreHttp.CompositeMapper = {
  serializedName: "JobManagerTask",
  type: {
    name: "Composite",
    className: "JobManagerTask",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      commandLine: {
        type: { name: "String" },
        serializedName: "commandLine",
        required: true
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: { name: "Composite", className: "TaskContainerSettings" }
      },
      resourceFiles: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceFile" } }
        },
        serializedName: "resourceFiles"
      },
      outputFiles: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OutputFile" } }
        },
        serializedName: "outputFiles"
      },
      environmentSettings: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentSetting" }
          }
        },
        serializedName: "environmentSettings"
      },
      constraints: {
        serializedName: "constraints",
        type: { name: "Composite", className: "TaskConstraints" }
      },
      killJobOnCompletion: {
        type: { name: "Boolean" },
        serializedName: "killJobOnCompletion"
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: { name: "Composite", className: "UserIdentity" }
      },
      runExclusive: {
        type: { name: "Boolean" },
        serializedName: "runExclusive"
      },
      applicationPackageReferences: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        },
        serializedName: "applicationPackageReferences"
      },
      authenticationTokenSettings: {
        serializedName: "authenticationTokenSettings",
        type: { name: "Composite", className: "AuthenticationTokenSettings" }
      },
      allowLowPriorityNode: {
        type: { name: "Boolean" },
        serializedName: "allowLowPriorityNode"
      }
    }
  }
};

export const TaskContainerSettings: coreHttp.CompositeMapper = {
  serializedName: "TaskContainerSettings",
  type: {
    name: "Composite",
    className: "TaskContainerSettings",
    modelProperties: {
      containerRunOptions: {
        type: { name: "String" },
        serializedName: "containerRunOptions"
      },
      imageName: {
        type: { name: "String" },
        serializedName: "imageName",
        required: true
      },
      registry: {
        serializedName: "registry",
        type: { name: "Composite", className: "ContainerRegistry" }
      },
      workingDirectory: {
        type: {
          name: "Enum",
          allowedValues: ["taskWorkingDirectory", "containerImageDefault"]
        },
        serializedName: "workingDirectory"
      }
    }
  }
};

export const ContainerRegistry: coreHttp.CompositeMapper = {
  serializedName: "ContainerRegistry",
  type: {
    name: "Composite",
    className: "ContainerRegistry",
    modelProperties: {
      registryServer: {
        type: { name: "String" },
        serializedName: "registryServer"
      },
      userName: {
        type: { name: "String" },
        serializedName: "username",
        required: true
      },
      password: {
        type: { name: "String" },
        serializedName: "password",
        required: true
      }
    }
  }
};

export const ResourceFile: coreHttp.CompositeMapper = {
  serializedName: "ResourceFile",
  type: {
    name: "Composite",
    className: "ResourceFile",
    modelProperties: {
      autoStorageContainerName: {
        type: { name: "String" },
        serializedName: "autoStorageContainerName"
      },
      storageContainerUrl: {
        type: { name: "String" },
        serializedName: "storageContainerUrl"
      },
      httpUrl: { type: { name: "String" }, serializedName: "httpUrl" },
      blobPrefix: { type: { name: "String" }, serializedName: "blobPrefix" },
      filePath: { type: { name: "String" }, serializedName: "filePath" },
      fileMode: { type: { name: "String" }, serializedName: "fileMode" }
    }
  }
};

export const OutputFile: coreHttp.CompositeMapper = {
  serializedName: "OutputFile",
  type: {
    name: "Composite",
    className: "OutputFile",
    modelProperties: {
      filePattern: {
        type: { name: "String" },
        serializedName: "filePattern",
        required: true
      },
      destination: {
        serializedName: "destination",
        type: { name: "Composite", className: "OutputFileDestination" }
      },
      uploadOptions: {
        serializedName: "uploadOptions",
        type: { name: "Composite", className: "OutputFileUploadOptions" }
      }
    }
  }
};

export const OutputFileDestination: coreHttp.CompositeMapper = {
  serializedName: "OutputFileDestination",
  type: {
    name: "Composite",
    className: "OutputFileDestination",
    modelProperties: {
      container: {
        serializedName: "container",
        type: {
          name: "Composite",
          className: "OutputFileBlobContainerDestination"
        }
      }
    }
  }
};

export const OutputFileBlobContainerDestination: coreHttp.CompositeMapper = {
  serializedName: "OutputFileBlobContainerDestination",
  type: {
    name: "Composite",
    className: "OutputFileBlobContainerDestination",
    modelProperties: {
      path: { type: { name: "String" }, serializedName: "path" },
      containerUrl: {
        type: { name: "String" },
        serializedName: "containerUrl",
        required: true
      }
    }
  }
};

export const OutputFileUploadOptions: coreHttp.CompositeMapper = {
  serializedName: "OutputFileUploadOptions",
  type: {
    name: "Composite",
    className: "OutputFileUploadOptions",
    modelProperties: {
      uploadCondition: {
        type: {
          name: "Enum",
          allowedValues: ["tasksuccess", "taskfailure", "taskcompletion"]
        },
        serializedName: "uploadCondition",
        required: true
      }
    }
  }
};

export const EnvironmentSetting: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentSetting",
  type: {
    name: "Composite",
    className: "EnvironmentSetting",
    modelProperties: {
      name: {
        type: { name: "String" },
        serializedName: "name",
        required: true
      },
      value: { type: { name: "String" }, serializedName: "value" }
    }
  }
};

export const TaskConstraints: coreHttp.CompositeMapper = {
  serializedName: "TaskConstraints",
  type: {
    name: "Composite",
    className: "TaskConstraints",
    modelProperties: {
      maxWallClockTime: {
        type: { name: "TimeSpan" },
        serializedName: "maxWallClockTime"
      },
      retentionTime: {
        type: { name: "TimeSpan" },
        serializedName: "retentionTime"
      },
      maxTaskRetryCount: {
        type: { name: "Number" },
        serializedName: "maxTaskRetryCount"
      }
    }
  }
};

export const UserIdentity: coreHttp.CompositeMapper = {
  serializedName: "UserIdentity",
  type: {
    name: "Composite",
    className: "UserIdentity",
    modelProperties: {
      userName: { type: { name: "String" }, serializedName: "username" },
      autoUser: {
        serializedName: "autoUser",
        type: { name: "Composite", className: "AutoUserSpecification" }
      }
    }
  }
};

export const AutoUserSpecification: coreHttp.CompositeMapper = {
  serializedName: "AutoUserSpecification",
  type: {
    name: "Composite",
    className: "AutoUserSpecification",
    modelProperties: {
      scope: {
        type: { name: "Enum", allowedValues: ["task", "pool"] },
        serializedName: "scope"
      },
      elevationLevel: {
        type: { name: "Enum", allowedValues: ["nonadmin", "admin"] },
        serializedName: "elevationLevel"
      }
    }
  }
};

export const ApplicationPackageReference: coreHttp.CompositeMapper = {
  serializedName: "ApplicationPackageReference",
  type: {
    name: "Composite",
    className: "ApplicationPackageReference",
    modelProperties: {
      applicationId: {
        type: { name: "String" },
        serializedName: "applicationId",
        required: true
      },
      version: { type: { name: "String" }, serializedName: "version" }
    }
  }
};

export const AuthenticationTokenSettings: coreHttp.CompositeMapper = {
  serializedName: "AuthenticationTokenSettings",
  type: {
    name: "Composite",
    className: "AuthenticationTokenSettings",
    modelProperties: {
      access: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AccessScope",
            defaultValue: "job",
            isConstant: true
          }
        },
        serializedName: "access"
      }
    }
  }
};

export const JobPreparationTask: coreHttp.CompositeMapper = {
  serializedName: "JobPreparationTask",
  type: {
    name: "Composite",
    className: "JobPreparationTask",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      commandLine: {
        type: { name: "String" },
        serializedName: "commandLine",
        required: true
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: { name: "Composite", className: "TaskContainerSettings" }
      },
      resourceFiles: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceFile" } }
        },
        serializedName: "resourceFiles"
      },
      environmentSettings: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentSetting" }
          }
        },
        serializedName: "environmentSettings"
      },
      constraints: {
        serializedName: "constraints",
        type: { name: "Composite", className: "TaskConstraints" }
      },
      waitForSuccess: {
        type: { name: "Boolean" },
        serializedName: "waitForSuccess"
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: { name: "Composite", className: "UserIdentity" }
      },
      rerunOnNodeRebootAfterSuccess: {
        type: { name: "Boolean" },
        serializedName: "rerunOnNodeRebootAfterSuccess"
      }
    }
  }
};

export const JobReleaseTask: coreHttp.CompositeMapper = {
  serializedName: "JobReleaseTask",
  type: {
    name: "Composite",
    className: "JobReleaseTask",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      commandLine: {
        type: { name: "String" },
        serializedName: "commandLine",
        required: true
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: { name: "Composite", className: "TaskContainerSettings" }
      },
      resourceFiles: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceFile" } }
        },
        serializedName: "resourceFiles"
      },
      environmentSettings: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentSetting" }
          }
        },
        serializedName: "environmentSettings"
      },
      maxWallClockTime: {
        type: { name: "TimeSpan" },
        serializedName: "maxWallClockTime"
      },
      retentionTime: {
        type: { name: "TimeSpan" },
        serializedName: "retentionTime"
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: { name: "Composite", className: "UserIdentity" }
      }
    }
  }
};

export const PoolInformation: coreHttp.CompositeMapper = {
  serializedName: "PoolInformation",
  type: {
    name: "Composite",
    className: "PoolInformation",
    modelProperties: {
      poolId: { type: { name: "String" }, serializedName: "poolId" },
      autoPoolSpecification: {
        serializedName: "autoPoolSpecification",
        type: { name: "Composite", className: "AutoPoolSpecification" }
      }
    }
  }
};

export const AutoPoolSpecification: coreHttp.CompositeMapper = {
  serializedName: "AutoPoolSpecification",
  type: {
    name: "Composite",
    className: "AutoPoolSpecification",
    modelProperties: {
      autoPoolIdPrefix: {
        type: { name: "String" },
        serializedName: "autoPoolIdPrefix"
      },
      poolLifetimeOption: {
        type: { name: "Enum", allowedValues: ["jobschedule", "job"] },
        serializedName: "poolLifetimeOption",
        required: true
      },
      keepAlive: { type: { name: "Boolean" }, serializedName: "keepAlive" },
      pool: {
        serializedName: "pool",
        type: { name: "Composite", className: "PoolSpecification" }
      }
    }
  }
};

export const PoolSpecification: coreHttp.CompositeMapper = {
  serializedName: "PoolSpecification",
  type: {
    name: "Composite",
    className: "PoolSpecification",
    modelProperties: {
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      vmSize: {
        type: { name: "String" },
        serializedName: "vmSize",
        required: true
      },
      cloudServiceConfiguration: {
        serializedName: "cloudServiceConfiguration",
        type: { name: "Composite", className: "CloudServiceConfiguration" }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: { name: "Composite", className: "VirtualMachineConfiguration" }
      },
      maxTasksPerNode: {
        type: { name: "Number" },
        serializedName: "maxTasksPerNode"
      },
      taskSchedulingPolicy: {
        serializedName: "taskSchedulingPolicy",
        type: { name: "Composite", className: "TaskSchedulingPolicy" }
      },
      resizeTimeout: {
        type: { name: "TimeSpan" },
        serializedName: "resizeTimeout"
      },
      targetDedicatedNodes: {
        type: { name: "Number" },
        serializedName: "targetDedicatedNodes"
      },
      targetLowPriorityNodes: {
        type: { name: "Number" },
        serializedName: "targetLowPriorityNodes"
      },
      enableAutoScale: {
        type: { name: "Boolean" },
        serializedName: "enableAutoScale"
      },
      autoScaleFormula: {
        type: { name: "String" },
        serializedName: "autoScaleFormula"
      },
      autoScaleEvaluationInterval: {
        type: { name: "TimeSpan" },
        serializedName: "autoScaleEvaluationInterval"
      },
      enableInterNodeCommunication: {
        type: { name: "Boolean" },
        serializedName: "enableInterNodeCommunication"
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: { name: "Composite", className: "NetworkConfiguration" }
      },
      startTask: {
        serializedName: "startTask",
        type: { name: "Composite", className: "StartTask" }
      },
      certificateReferences: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CertificateReference" }
          }
        },
        serializedName: "certificateReferences"
      },
      applicationPackageReferences: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        },
        serializedName: "applicationPackageReferences"
      },
      applicationLicenses: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PoolSpecificationApplicationLicensesItem"
          }
        },
        serializedName: "applicationLicenses"
      },
      userAccounts: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UserAccount" } }
        },
        serializedName: "userAccounts"
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata"
      },
      mountConfiguration: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MountConfiguration" }
          }
        },
        serializedName: "mountConfiguration"
      }
    }
  }
};

export const CloudServiceConfiguration: coreHttp.CompositeMapper = {
  serializedName: "CloudServiceConfiguration",
  type: {
    name: "Composite",
    className: "CloudServiceConfiguration",
    modelProperties: {
      osFamily: {
        type: { name: "String" },
        serializedName: "osFamily",
        required: true
      },
      osVersion: { type: { name: "String" }, serializedName: "osVersion" }
    }
  }
};

export const VirtualMachineConfiguration: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachineConfiguration",
  type: {
    name: "Composite",
    className: "VirtualMachineConfiguration",
    modelProperties: {
      imageReference: {
        serializedName: "imageReference",
        type: { name: "Composite", className: "ImageReference" }
      },
      nodeAgentSKUId: {
        type: { name: "String" },
        serializedName: "nodeAgentSKUId",
        required: true
      },
      windowsConfiguration: {
        serializedName: "windowsConfiguration",
        type: { name: "Composite", className: "WindowsConfiguration" }
      },
      dataDisks: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DataDisk" } }
        },
        serializedName: "dataDisks"
      },
      licenseType: { type: { name: "String" }, serializedName: "licenseType" },
      containerConfiguration: {
        serializedName: "containerConfiguration",
        type: { name: "Composite", className: "ContainerConfiguration" }
      },
      diskEncryptionConfiguration: {
        serializedName: "diskEncryptionConfiguration",
        type: { name: "Composite", className: "DiskEncryptionConfiguration" }
      }
    }
  }
};

export const WindowsConfiguration: coreHttp.CompositeMapper = {
  serializedName: "WindowsConfiguration",
  type: {
    name: "Composite",
    className: "WindowsConfiguration",
    modelProperties: {
      enableAutomaticUpdates: {
        type: { name: "Boolean" },
        serializedName: "enableAutomaticUpdates"
      }
    }
  }
};

export const DataDisk: coreHttp.CompositeMapper = {
  serializedName: "DataDisk",
  type: {
    name: "Composite",
    className: "DataDisk",
    modelProperties: {
      lun: { type: { name: "Number" }, serializedName: "lun", required: true },
      caching: {
        type: {
          name: "Enum",
          allowedValues: ["none", "readonly", "readwrite"]
        },
        serializedName: "caching"
      },
      diskSizeGB: {
        type: { name: "Number" },
        serializedName: "diskSizeGB",
        required: true
      },
      storageAccountType: {
        type: { name: "Enum", allowedValues: ["standard_lrs", "premium_lrs"] },
        serializedName: "storageAccountType"
      }
    }
  }
};

export const ContainerConfiguration: coreHttp.CompositeMapper = {
  serializedName: "ContainerConfiguration",
  type: {
    name: "Composite",
    className: "ContainerConfiguration",
    modelProperties: {
      type: {
        type: { name: "String" },
        serializedName: "type",
        defaultValue: "dockerCompatible",
        isConstant: true
      },
      containerImageNames: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ContainerConfigurationContainerImageNamesItem"
          }
        },
        serializedName: "containerImageNames"
      },
      containerRegistries: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ContainerRegistry" }
          }
        },
        serializedName: "containerRegistries"
      }
    }
  }
};

export const DiskEncryptionConfiguration: coreHttp.CompositeMapper = {
  serializedName: "DiskEncryptionConfiguration",
  type: {
    name: "Composite",
    className: "DiskEncryptionConfiguration",
    modelProperties: {
      targets: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Enum", allowedValues: ["osdisk", "temporarydisk"] },
            serializedName: "DiskEncryptionTarget"
          }
        },
        serializedName: "targets"
      }
    }
  }
};

export const TaskSchedulingPolicy: coreHttp.CompositeMapper = {
  serializedName: "TaskSchedulingPolicy",
  type: {
    name: "Composite",
    className: "TaskSchedulingPolicy",
    modelProperties: {
      nodeFillType: {
        type: { name: "Enum", allowedValues: ["spread", "pack"] },
        serializedName: "nodeFillType",
        required: true
      }
    }
  }
};

export const NetworkConfiguration: coreHttp.CompositeMapper = {
  serializedName: "NetworkConfiguration",
  type: {
    name: "Composite",
    className: "NetworkConfiguration",
    modelProperties: {
      subnetId: { type: { name: "String" }, serializedName: "subnetId" },
      dynamicVNetAssignmentScope: {
        type: { name: "Enum", allowedValues: ["none", "job"] },
        serializedName: "dynamicVNetAssignmentScope"
      },
      endpointConfiguration: {
        serializedName: "endpointConfiguration",
        type: { name: "Composite", className: "PoolEndpointConfiguration" }
      },
      publicIPAddressConfiguration: {
        serializedName: "publicIPAddressConfiguration",
        type: { name: "Composite", className: "PublicIPAddressConfiguration" }
      }
    }
  }
};

export const PoolEndpointConfiguration: coreHttp.CompositeMapper = {
  serializedName: "PoolEndpointConfiguration",
  type: {
    name: "Composite",
    className: "PoolEndpointConfiguration",
    modelProperties: {
      inboundNATPools: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InboundNATPool" } }
        },
        serializedName: "inboundNATPools",
        required: true
      }
    }
  }
};

export const InboundNATPool: coreHttp.CompositeMapper = {
  serializedName: "InboundNATPool",
  type: {
    name: "Composite",
    className: "InboundNATPool",
    modelProperties: {
      name: {
        type: { name: "String" },
        serializedName: "name",
        required: true
      },
      protocol: {
        type: { name: "Enum", allowedValues: ["tcp", "udp"] },
        serializedName: "protocol",
        required: true
      },
      backendPort: {
        type: { name: "Number" },
        serializedName: "backendPort",
        required: true
      },
      frontendPortRangeStart: {
        type: { name: "Number" },
        serializedName: "frontendPortRangeStart",
        required: true
      },
      frontendPortRangeEnd: {
        type: { name: "Number" },
        serializedName: "frontendPortRangeEnd",
        required: true
      },
      networkSecurityGroupRules: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NetworkSecurityGroupRule" }
          }
        },
        serializedName: "networkSecurityGroupRules"
      }
    }
  }
};

export const NetworkSecurityGroupRule: coreHttp.CompositeMapper = {
  serializedName: "NetworkSecurityGroupRule",
  type: {
    name: "Composite",
    className: "NetworkSecurityGroupRule",
    modelProperties: {
      priority: {
        type: { name: "Number" },
        serializedName: "priority",
        required: true
      },
      access: {
        type: { name: "Enum", allowedValues: ["allow", "deny"] },
        serializedName: "access",
        required: true
      },
      sourceAddressPrefix: {
        type: { name: "String" },
        serializedName: "sourceAddressPrefix",
        required: true
      },
      sourcePortRanges: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "NetworkSecurityGroupRuleSourcePortRangesItem"
          }
        },
        serializedName: "sourcePortRanges"
      }
    }
  }
};

export const PublicIPAddressConfiguration: coreHttp.CompositeMapper = {
  serializedName: "PublicIPAddressConfiguration",
  type: {
    name: "Composite",
    className: "PublicIPAddressConfiguration",
    modelProperties: {
      provision: {
        type: {
          name: "Enum",
          allowedValues: ["batchmanaged", "usermanaged", "nopublicipaddresses"]
        },
        serializedName: "provision"
      },
      ipAddressIds: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PublicIPAddressConfigurationIpAddressIdsItem"
          }
        },
        serializedName: "ipAddressIds"
      }
    }
  }
};

export const StartTask: coreHttp.CompositeMapper = {
  serializedName: "StartTask",
  type: {
    name: "Composite",
    className: "StartTask",
    modelProperties: {
      commandLine: {
        type: { name: "String" },
        serializedName: "commandLine",
        required: true
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: { name: "Composite", className: "TaskContainerSettings" }
      },
      resourceFiles: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceFile" } }
        },
        serializedName: "resourceFiles"
      },
      environmentSettings: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentSetting" }
          }
        },
        serializedName: "environmentSettings"
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: { name: "Composite", className: "UserIdentity" }
      },
      maxTaskRetryCount: {
        type: { name: "Number" },
        serializedName: "maxTaskRetryCount"
      },
      waitForSuccess: {
        type: { name: "Boolean" },
        serializedName: "waitForSuccess"
      }
    }
  }
};

export const CertificateReference: coreHttp.CompositeMapper = {
  serializedName: "CertificateReference",
  type: {
    name: "Composite",
    className: "CertificateReference",
    modelProperties: {
      thumbprint: {
        type: { name: "String" },
        serializedName: "thumbprint",
        required: true
      },
      thumbprintAlgorithm: {
        type: { name: "String" },
        serializedName: "thumbprintAlgorithm",
        required: true
      },
      storeLocation: {
        type: { name: "Enum", allowedValues: ["currentuser", "localmachine"] },
        serializedName: "storeLocation"
      },
      storeName: { type: { name: "String" }, serializedName: "storeName" },
      visibility: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["starttask", "task", "remoteuser"]
            },
            serializedName: "CertificateVisibility"
          }
        },
        serializedName: "visibility"
      }
    }
  }
};

export const UserAccount: coreHttp.CompositeMapper = {
  serializedName: "UserAccount",
  type: {
    name: "Composite",
    className: "UserAccount",
    modelProperties: {
      name: {
        type: { name: "String" },
        serializedName: "name",
        required: true
      },
      password: {
        type: { name: "String" },
        serializedName: "password",
        required: true
      },
      elevationLevel: {
        type: { name: "Enum", allowedValues: ["nonadmin", "admin"] },
        serializedName: "elevationLevel"
      },
      linuxUserConfiguration: {
        serializedName: "linuxUserConfiguration",
        type: { name: "Composite", className: "LinuxUserConfiguration" }
      },
      windowsUserConfiguration: {
        serializedName: "windowsUserConfiguration",
        type: { name: "Composite", className: "WindowsUserConfiguration" }
      }
    }
  }
};

export const LinuxUserConfiguration: coreHttp.CompositeMapper = {
  serializedName: "LinuxUserConfiguration",
  type: {
    name: "Composite",
    className: "LinuxUserConfiguration",
    modelProperties: {
      uid: { type: { name: "Number" }, serializedName: "uid" },
      gid: { type: { name: "Number" }, serializedName: "gid" },
      sshPrivateKey: {
        type: { name: "String" },
        serializedName: "sshPrivateKey"
      }
    }
  }
};

export const WindowsUserConfiguration: coreHttp.CompositeMapper = {
  serializedName: "WindowsUserConfiguration",
  type: {
    name: "Composite",
    className: "WindowsUserConfiguration",
    modelProperties: {
      loginMode: {
        type: { name: "Enum", allowedValues: ["batch", "interactive"] },
        serializedName: "loginMode"
      }
    }
  }
};

export const MetadataItem: coreHttp.CompositeMapper = {
  serializedName: "MetadataItem",
  type: {
    name: "Composite",
    className: "MetadataItem",
    modelProperties: {
      name: {
        type: { name: "String" },
        serializedName: "name",
        required: true
      },
      value: {
        type: { name: "String" },
        serializedName: "value",
        required: true
      }
    }
  }
};

export const MountConfiguration: coreHttp.CompositeMapper = {
  serializedName: "MountConfiguration",
  type: {
    name: "Composite",
    className: "MountConfiguration",
    modelProperties: {
      azureBlobFileSystemConfiguration: {
        serializedName: "azureBlobFileSystemConfiguration",
        type: {
          name: "Composite",
          className: "AzureBlobFileSystemConfiguration"
        }
      },
      nfsMountConfiguration: {
        serializedName: "nfsMountConfiguration",
        type: { name: "Composite", className: "NFSMountConfiguration" }
      },
      cifsMountConfiguration: {
        serializedName: "cifsMountConfiguration",
        type: { name: "Composite", className: "CifsMountConfiguration" }
      },
      azureFileShareConfiguration: {
        serializedName: "azureFileShareConfiguration",
        type: { name: "Composite", className: "AzureFileShareConfiguration" }
      }
    }
  }
};

export const AzureBlobFileSystemConfiguration: coreHttp.CompositeMapper = {
  serializedName: "AzureBlobFileSystemConfiguration",
  type: {
    name: "Composite",
    className: "AzureBlobFileSystemConfiguration",
    modelProperties: {
      accountName: {
        type: { name: "String" },
        serializedName: "accountName",
        required: true
      },
      containerName: {
        type: { name: "String" },
        serializedName: "containerName",
        required: true
      },
      accountKey: { type: { name: "String" }, serializedName: "accountKey" },
      sasKey: { type: { name: "String" }, serializedName: "sasKey" },
      blobfuseOptions: {
        type: { name: "String" },
        serializedName: "blobfuseOptions"
      },
      relativeMountPath: {
        type: { name: "String" },
        serializedName: "relativeMountPath",
        required: true
      }
    }
  }
};

export const NFSMountConfiguration: coreHttp.CompositeMapper = {
  serializedName: "NFSMountConfiguration",
  type: {
    name: "Composite",
    className: "NFSMountConfiguration",
    modelProperties: {
      source: {
        type: { name: "String" },
        serializedName: "source",
        required: true
      },
      relativeMountPath: {
        type: { name: "String" },
        serializedName: "relativeMountPath",
        required: true
      },
      mountOptions: { type: { name: "String" }, serializedName: "mountOptions" }
    }
  }
};

export const CifsMountConfiguration: coreHttp.CompositeMapper = {
  serializedName: "CifsMountConfiguration",
  type: {
    name: "Composite",
    className: "CifsMountConfiguration",
    modelProperties: {
      username: {
        type: { name: "String" },
        serializedName: "username",
        required: true
      },
      source: {
        type: { name: "String" },
        serializedName: "source",
        required: true
      },
      relativeMountPath: {
        type: { name: "String" },
        serializedName: "relativeMountPath",
        required: true
      },
      mountOptions: {
        type: { name: "String" },
        serializedName: "mountOptions"
      },
      password: {
        type: { name: "String" },
        serializedName: "password",
        required: true
      }
    }
  }
};

export const AzureFileShareConfiguration: coreHttp.CompositeMapper = {
  serializedName: "AzureFileShareConfiguration",
  type: {
    name: "Composite",
    className: "AzureFileShareConfiguration",
    modelProperties: {
      accountName: {
        type: { name: "String" },
        serializedName: "accountName",
        required: true
      },
      azureFileUrl: {
        type: { name: "String" },
        serializedName: "azureFileUrl",
        required: true
      },
      accountKey: {
        type: { name: "String" },
        serializedName: "accountKey",
        required: true
      },
      relativeMountPath: {
        type: { name: "String" },
        serializedName: "relativeMountPath",
        required: true
      },
      mountOptions: { type: { name: "String" }, serializedName: "mountOptions" }
    }
  }
};

export const JobScheduleExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "JobScheduleExecutionInformation",
  type: {
    name: "Composite",
    className: "JobScheduleExecutionInformation",
    modelProperties: {
      nextRunTime: {
        type: { name: "DateTime" },
        serializedName: "nextRunTime"
      },
      recentJob: {
        serializedName: "recentJob",
        type: { name: "Composite", className: "RecentJob" }
      },
      endTime: { type: { name: "DateTime" }, serializedName: "endTime" }
    }
  }
};

export const RecentJob: coreHttp.CompositeMapper = {
  serializedName: "RecentJob",
  type: {
    name: "Composite",
    className: "RecentJob",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      url: { type: { name: "String" }, serializedName: "url" }
    }
  }
};

export const JobScheduleStatistics: coreHttp.CompositeMapper = {
  serializedName: "JobScheduleStatistics",
  type: {
    name: "Composite",
    className: "JobScheduleStatistics",
    modelProperties: {
      url: { type: { name: "String" }, serializedName: "url", required: true },
      startTime: {
        type: { name: "DateTime" },
        serializedName: "startTime",
        required: true
      },
      lastUpdateTime: {
        type: { name: "DateTime" },
        serializedName: "lastUpdateTime",
        required: true
      },
      userCPUTime: {
        type: { name: "TimeSpan" },
        serializedName: "userCPUTime",
        required: true
      },
      kernelCPUTime: {
        type: { name: "TimeSpan" },
        serializedName: "kernelCPUTime",
        required: true
      },
      wallClockTime: {
        type: { name: "TimeSpan" },
        serializedName: "wallClockTime",
        required: true
      },
      readIOps: {
        type: { name: "Number" },
        serializedName: "readIOps",
        required: true
      },
      writeIOps: {
        type: { name: "Number" },
        serializedName: "writeIOps",
        required: true
      },
      readIOGiB: {
        type: { name: "Number" },
        serializedName: "readIOGiB",
        required: true
      },
      writeIOGiB: {
        type: { name: "Number" },
        serializedName: "writeIOGiB",
        required: true
      },
      numSucceededTasks: {
        type: { name: "Number" },
        serializedName: "numSucceededTasks",
        required: true
      },
      numFailedTasks: {
        type: { name: "Number" },
        serializedName: "numFailedTasks",
        required: true
      },
      numTaskRetries: {
        type: { name: "Number" },
        serializedName: "numTaskRetries",
        required: true
      },
      waitTime: {
        type: { name: "TimeSpan" },
        serializedName: "waitTime",
        required: true
      }
    }
  }
};

export const JobSchedulePatchParameter: coreHttp.CompositeMapper = {
  serializedName: "JobSchedulePatchParameter",
  type: {
    name: "Composite",
    className: "JobSchedulePatchParameter",
    modelProperties: {
      schedule: {
        serializedName: "schedule",
        type: { name: "Composite", className: "Schedule" }
      },
      jobSpecification: {
        serializedName: "jobSpecification",
        type: { name: "Composite", className: "JobSpecification" }
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata"
      }
    }
  }
};

export const JobScheduleUpdateParameter: coreHttp.CompositeMapper = {
  serializedName: "JobScheduleUpdateParameter",
  type: {
    name: "Composite",
    className: "JobScheduleUpdateParameter",
    modelProperties: {
      schedule: {
        serializedName: "schedule",
        type: { name: "Composite", className: "Schedule" }
      },
      jobSpecification: {
        serializedName: "jobSpecification",
        type: { name: "Composite", className: "JobSpecification" }
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata"
      }
    }
  }
};

export const JobScheduleAddParameter: coreHttp.CompositeMapper = {
  serializedName: "JobScheduleAddParameter",
  type: {
    name: "Composite",
    className: "JobScheduleAddParameter",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      schedule: {
        serializedName: "schedule",
        type: { name: "Composite", className: "Schedule" }
      },
      jobSpecification: {
        serializedName: "jobSpecification",
        type: { name: "Composite", className: "JobSpecification" }
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata"
      }
    }
  }
};

export const CloudJobScheduleListResult: coreHttp.CompositeMapper = {
  serializedName: "CloudJobScheduleListResult",
  type: {
    name: "Composite",
    className: "CloudJobScheduleListResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CloudJobSchedule" }
          }
        },
        serializedName: "value"
      },
      odataNextLink: {
        type: { name: "String" },
        serializedName: "odata\\.nextLink"
      }
    }
  }
};

export const CloudJob: coreHttp.CompositeMapper = {
  serializedName: "CloudJob",
  type: {
    name: "Composite",
    className: "CloudJob",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      usesTaskDependencies: {
        type: { name: "Boolean" },
        serializedName: "usesTaskDependencies"
      },
      url: { type: { name: "String" }, serializedName: "url" },
      eTag: { type: { name: "String" }, serializedName: "eTag" },
      lastModified: {
        type: { name: "DateTime" },
        serializedName: "lastModified"
      },
      creationTime: {
        type: { name: "DateTime" },
        serializedName: "creationTime"
      },
      state: {
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "disabling",
            "disabled",
            "enabling",
            "terminating",
            "completed",
            "deleting"
          ]
        },
        serializedName: "state"
      },
      stateTransitionTime: {
        type: { name: "DateTime" },
        serializedName: "stateTransitionTime"
      },
      previousState: {
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "disabling",
            "disabled",
            "enabling",
            "terminating",
            "completed",
            "deleting"
          ]
        },
        serializedName: "previousState"
      },
      previousStateTransitionTime: {
        type: { name: "DateTime" },
        serializedName: "previousStateTransitionTime"
      },
      priority: { type: { name: "Number" }, serializedName: "priority" },
      constraints: {
        serializedName: "constraints",
        type: { name: "Composite", className: "JobConstraints" }
      },
      jobManagerTask: {
        serializedName: "jobManagerTask",
        type: { name: "Composite", className: "JobManagerTask" }
      },
      jobPreparationTask: {
        serializedName: "jobPreparationTask",
        type: { name: "Composite", className: "JobPreparationTask" }
      },
      jobReleaseTask: {
        serializedName: "jobReleaseTask",
        type: { name: "Composite", className: "JobReleaseTask" }
      },
      commonEnvironmentSettings: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentSetting" }
          }
        },
        serializedName: "commonEnvironmentSettings"
      },
      poolInfo: {
        serializedName: "poolInfo",
        type: { name: "Composite", className: "PoolInformation" }
      },
      onAllTasksComplete: {
        type: { name: "Enum", allowedValues: ["noaction", "terminatejob"] },
        serializedName: "onAllTasksComplete"
      },
      onTaskFailure: {
        type: {
          name: "Enum",
          allowedValues: ["noaction", "performexitoptionsjobaction"]
        },
        serializedName: "onTaskFailure"
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: { name: "Composite", className: "JobNetworkConfiguration" }
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata"
      },
      executionInfo: {
        serializedName: "executionInfo",
        type: { name: "Composite", className: "JobExecutionInformation" }
      },
      stats: {
        serializedName: "stats",
        type: { name: "Composite", className: "JobStatistics" }
      }
    }
  }
};

export const JobExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "JobExecutionInformation",
  type: {
    name: "Composite",
    className: "JobExecutionInformation",
    modelProperties: {
      startTime: {
        type: { name: "DateTime" },
        serializedName: "startTime",
        required: true
      },
      endTime: { type: { name: "DateTime" }, serializedName: "endTime" },
      poolId: { type: { name: "String" }, serializedName: "poolId" },
      schedulingError: {
        serializedName: "schedulingError",
        type: { name: "Composite", className: "JobSchedulingError" }
      },
      terminateReason: {
        type: { name: "String" },
        serializedName: "terminateReason"
      }
    }
  }
};

export const JobSchedulingError: coreHttp.CompositeMapper = {
  serializedName: "JobSchedulingError",
  type: {
    name: "Composite",
    className: "JobSchedulingError",
    modelProperties: {
      category: {
        type: { name: "Enum", allowedValues: ["usererror", "servererror"] },
        serializedName: "category",
        required: true
      },
      code: { type: { name: "String" }, serializedName: "code" },
      message: { type: { name: "String" }, serializedName: "message" },
      details: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NameValuePair" } }
        },
        serializedName: "details"
      }
    }
  }
};

export const JobPatchParameter: coreHttp.CompositeMapper = {
  serializedName: "JobPatchParameter",
  type: {
    name: "Composite",
    className: "JobPatchParameter",
    modelProperties: {
      priority: { type: { name: "Number" }, serializedName: "priority" },
      onAllTasksComplete: {
        type: { name: "Enum", allowedValues: ["noaction", "terminatejob"] },
        serializedName: "onAllTasksComplete"
      },
      constraints: {
        serializedName: "constraints",
        type: { name: "Composite", className: "JobConstraints" }
      },
      poolInfo: {
        serializedName: "poolInfo",
        type: { name: "Composite", className: "PoolInformation" }
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata"
      }
    }
  }
};

export const JobUpdateParameter: coreHttp.CompositeMapper = {
  serializedName: "JobUpdateParameter",
  type: {
    name: "Composite",
    className: "JobUpdateParameter",
    modelProperties: {
      priority: { type: { name: "Number" }, serializedName: "priority" },
      constraints: {
        serializedName: "constraints",
        type: { name: "Composite", className: "JobConstraints" }
      },
      poolInfo: {
        serializedName: "poolInfo",
        type: { name: "Composite", className: "PoolInformation" }
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata"
      },
      onAllTasksComplete: {
        type: { name: "Enum", allowedValues: ["noaction", "terminatejob"] },
        serializedName: "onAllTasksComplete"
      }
    }
  }
};

export const JobDisableParameter: coreHttp.CompositeMapper = {
  serializedName: "JobDisableParameter",
  type: {
    name: "Composite",
    className: "JobDisableParameter",
    modelProperties: {
      disableTasks: {
        type: { name: "Enum", allowedValues: ["requeue", "terminate", "wait"] },
        serializedName: "disableTasks",
        required: true
      }
    }
  }
};

export const JobTerminateParameter: coreHttp.CompositeMapper = {
  serializedName: "JobTerminateParameter",
  type: {
    name: "Composite",
    className: "JobTerminateParameter",
    modelProperties: {
      terminateReason: {
        type: { name: "String" },
        serializedName: "terminateReason"
      }
    }
  }
};

export const JobAddParameter: coreHttp.CompositeMapper = {
  serializedName: "JobAddParameter",
  type: {
    name: "Composite",
    className: "JobAddParameter",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      priority: { type: { name: "Number" }, serializedName: "priority" },
      constraints: {
        serializedName: "constraints",
        type: { name: "Composite", className: "JobConstraints" }
      },
      jobManagerTask: {
        serializedName: "jobManagerTask",
        type: { name: "Composite", className: "JobManagerTask" }
      },
      jobPreparationTask: {
        serializedName: "jobPreparationTask",
        type: { name: "Composite", className: "JobPreparationTask" }
      },
      jobReleaseTask: {
        serializedName: "jobReleaseTask",
        type: { name: "Composite", className: "JobReleaseTask" }
      },
      commonEnvironmentSettings: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentSetting" }
          }
        },
        serializedName: "commonEnvironmentSettings"
      },
      poolInfo: {
        serializedName: "poolInfo",
        type: { name: "Composite", className: "PoolInformation" }
      },
      onAllTasksComplete: {
        type: { name: "Enum", allowedValues: ["noaction", "terminatejob"] },
        serializedName: "onAllTasksComplete"
      },
      onTaskFailure: {
        type: {
          name: "Enum",
          allowedValues: ["noaction", "performexitoptionsjobaction"]
        },
        serializedName: "onTaskFailure"
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata"
      },
      usesTaskDependencies: {
        type: { name: "Boolean" },
        serializedName: "usesTaskDependencies"
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: { name: "Composite", className: "JobNetworkConfiguration" }
      }
    }
  }
};

export const CloudJobListResult: coreHttp.CompositeMapper = {
  serializedName: "CloudJobListResult",
  type: {
    name: "Composite",
    className: "CloudJobListResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudJob" } }
        },
        serializedName: "value"
      },
      odataNextLink: {
        type: { name: "String" },
        serializedName: "odata\\.nextLink"
      }
    }
  }
};

export const CloudJobListPreparationAndReleaseTaskStatusResult: coreHttp.CompositeMapper = {
  serializedName: "CloudJobListPreparationAndReleaseTaskStatusResult",
  type: {
    name: "Composite",
    className: "CloudJobListPreparationAndReleaseTaskStatusResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobPreparationAndReleaseTaskExecutionInformation"
            }
          }
        },
        serializedName: "value"
      },
      odataNextLink: {
        type: { name: "String" },
        serializedName: "odata\\.nextLink"
      }
    }
  }
};

export const JobPreparationAndReleaseTaskExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "JobPreparationAndReleaseTaskExecutionInformation",
  type: {
    name: "Composite",
    className: "JobPreparationAndReleaseTaskExecutionInformation",
    modelProperties: {
      poolId: { type: { name: "String" }, serializedName: "poolId" },
      nodeId: { type: { name: "String" }, serializedName: "nodeId" },
      nodeUrl: { type: { name: "String" }, serializedName: "nodeUrl" },
      jobPreparationTaskExecutionInfo: {
        serializedName: "jobPreparationTaskExecutionInfo",
        type: {
          name: "Composite",
          className: "JobPreparationTaskExecutionInformation"
        }
      },
      jobReleaseTaskExecutionInfo: {
        serializedName: "jobReleaseTaskExecutionInfo",
        type: {
          name: "Composite",
          className: "JobReleaseTaskExecutionInformation"
        }
      }
    }
  }
};

export const JobPreparationTaskExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "JobPreparationTaskExecutionInformation",
  type: {
    name: "Composite",
    className: "JobPreparationTaskExecutionInformation",
    modelProperties: {
      startTime: {
        type: { name: "DateTime" },
        serializedName: "startTime",
        required: true
      },
      endTime: { type: { name: "DateTime" }, serializedName: "endTime" },
      state: {
        type: { name: "Enum", allowedValues: ["running", "completed"] },
        serializedName: "state",
        required: true
      },
      taskRootDirectory: {
        type: { name: "String" },
        serializedName: "taskRootDirectory"
      },
      taskRootDirectoryUrl: {
        type: { name: "String" },
        serializedName: "taskRootDirectoryUrl"
      },
      exitCode: { type: { name: "Number" }, serializedName: "exitCode" },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: { name: "Composite", className: "TaskFailureInformation" }
      },
      retryCount: {
        type: { name: "Number" },
        serializedName: "retryCount",
        required: true
      },
      lastRetryTime: {
        type: { name: "DateTime" },
        serializedName: "lastRetryTime"
      },
      result: {
        type: { name: "Enum", allowedValues: ["success", "failure"] },
        serializedName: "result"
      }
    }
  }
};

export const TaskContainerExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "TaskContainerExecutionInformation",
  type: {
    name: "Composite",
    className: "TaskContainerExecutionInformation",
    modelProperties: {
      containerId: { type: { name: "String" }, serializedName: "containerId" },
      state: { type: { name: "String" }, serializedName: "state" },
      error: { type: { name: "String" }, serializedName: "error" }
    }
  }
};

export const TaskFailureInformation: coreHttp.CompositeMapper = {
  serializedName: "TaskFailureInformation",
  type: {
    name: "Composite",
    className: "TaskFailureInformation",
    modelProperties: {
      category: {
        type: { name: "Enum", allowedValues: ["usererror", "servererror"] },
        serializedName: "category",
        required: true
      },
      code: { type: { name: "String" }, serializedName: "code" },
      message: { type: { name: "String" }, serializedName: "message" },
      details: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NameValuePair" } }
        },
        serializedName: "details"
      }
    }
  }
};

export const JobReleaseTaskExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "JobReleaseTaskExecutionInformation",
  type: {
    name: "Composite",
    className: "JobReleaseTaskExecutionInformation",
    modelProperties: {
      startTime: {
        type: { name: "DateTime" },
        serializedName: "startTime",
        required: true
      },
      endTime: { type: { name: "DateTime" }, serializedName: "endTime" },
      state: {
        type: { name: "Enum", allowedValues: ["running", "completed"] },
        serializedName: "state",
        required: true
      },
      taskRootDirectory: {
        type: { name: "String" },
        serializedName: "taskRootDirectory"
      },
      taskRootDirectoryUrl: {
        type: { name: "String" },
        serializedName: "taskRootDirectoryUrl"
      },
      exitCode: { type: { name: "Number" }, serializedName: "exitCode" },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: { name: "Composite", className: "TaskFailureInformation" }
      },
      result: {
        type: { name: "Enum", allowedValues: ["success", "failure"] },
        serializedName: "result"
      }
    }
  }
};

export const TaskCounts: coreHttp.CompositeMapper = {
  serializedName: "TaskCounts",
  type: {
    name: "Composite",
    className: "TaskCounts",
    modelProperties: {
      active: {
        type: { name: "Number" },
        serializedName: "active",
        required: true
      },
      running: {
        type: { name: "Number" },
        serializedName: "running",
        required: true
      },
      completed: {
        type: { name: "Number" },
        serializedName: "completed",
        required: true
      },
      succeeded: {
        type: { name: "Number" },
        serializedName: "succeeded",
        required: true
      },
      failed: {
        type: { name: "Number" },
        serializedName: "failed",
        required: true
      }
    }
  }
};

export const PoolAddParameter: coreHttp.CompositeMapper = {
  serializedName: "PoolAddParameter",
  type: {
    name: "Composite",
    className: "PoolAddParameter",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      vmSize: {
        type: { name: "String" },
        serializedName: "vmSize",
        required: true
      },
      cloudServiceConfiguration: {
        serializedName: "cloudServiceConfiguration",
        type: { name: "Composite", className: "CloudServiceConfiguration" }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: { name: "Composite", className: "VirtualMachineConfiguration" }
      },
      resizeTimeout: {
        type: { name: "TimeSpan" },
        serializedName: "resizeTimeout"
      },
      targetDedicatedNodes: {
        type: { name: "Number" },
        serializedName: "targetDedicatedNodes"
      },
      targetLowPriorityNodes: {
        type: { name: "Number" },
        serializedName: "targetLowPriorityNodes"
      },
      enableAutoScale: {
        type: { name: "Boolean" },
        serializedName: "enableAutoScale"
      },
      autoScaleFormula: {
        type: { name: "String" },
        serializedName: "autoScaleFormula"
      },
      autoScaleEvaluationInterval: {
        type: { name: "TimeSpan" },
        serializedName: "autoScaleEvaluationInterval"
      },
      enableInterNodeCommunication: {
        type: { name: "Boolean" },
        serializedName: "enableInterNodeCommunication"
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: { name: "Composite", className: "NetworkConfiguration" }
      },
      startTask: {
        serializedName: "startTask",
        type: { name: "Composite", className: "StartTask" }
      },
      certificateReferences: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CertificateReference" }
          }
        },
        serializedName: "certificateReferences"
      },
      applicationPackageReferences: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        },
        serializedName: "applicationPackageReferences"
      },
      applicationLicenses: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PoolAddParameterApplicationLicensesItem"
          }
        },
        serializedName: "applicationLicenses"
      },
      maxTasksPerNode: {
        type: { name: "Number" },
        serializedName: "maxTasksPerNode"
      },
      taskSchedulingPolicy: {
        serializedName: "taskSchedulingPolicy",
        type: { name: "Composite", className: "TaskSchedulingPolicy" }
      },
      userAccounts: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UserAccount" } }
        },
        serializedName: "userAccounts"
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata"
      },
      mountConfiguration: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MountConfiguration" }
          }
        },
        serializedName: "mountConfiguration"
      }
    }
  }
};

export const CloudPoolListResult: coreHttp.CompositeMapper = {
  serializedName: "CloudPoolListResult",
  type: {
    name: "Composite",
    className: "CloudPoolListResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudPool" } }
        },
        serializedName: "value"
      },
      odataNextLink: {
        type: { name: "String" },
        serializedName: "odata\\.nextLink"
      }
    }
  }
};

export const CloudPool: coreHttp.CompositeMapper = {
  serializedName: "CloudPool",
  type: {
    name: "Composite",
    className: "CloudPool",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      url: { type: { name: "String" }, serializedName: "url" },
      eTag: { type: { name: "String" }, serializedName: "eTag" },
      lastModified: {
        type: { name: "DateTime" },
        serializedName: "lastModified"
      },
      creationTime: {
        type: { name: "DateTime" },
        serializedName: "creationTime"
      },
      state: {
        type: { name: "Enum", allowedValues: ["active", "deleting"] },
        serializedName: "state"
      },
      stateTransitionTime: {
        type: { name: "DateTime" },
        serializedName: "stateTransitionTime"
      },
      allocationState: {
        type: {
          name: "Enum",
          allowedValues: ["steady", "resizing", "stopping"]
        },
        serializedName: "allocationState"
      },
      allocationStateTransitionTime: {
        type: { name: "DateTime" },
        serializedName: "allocationStateTransitionTime"
      },
      vmSize: { type: { name: "String" }, serializedName: "vmSize" },
      cloudServiceConfiguration: {
        serializedName: "cloudServiceConfiguration",
        type: { name: "Composite", className: "CloudServiceConfiguration" }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: { name: "Composite", className: "VirtualMachineConfiguration" }
      },
      resizeTimeout: {
        type: { name: "TimeSpan" },
        serializedName: "resizeTimeout"
      },
      resizeErrors: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResizeError" } }
        },
        serializedName: "resizeErrors"
      },
      currentDedicatedNodes: {
        type: { name: "Number" },
        serializedName: "currentDedicatedNodes"
      },
      currentLowPriorityNodes: {
        type: { name: "Number" },
        serializedName: "currentLowPriorityNodes"
      },
      targetDedicatedNodes: {
        type: { name: "Number" },
        serializedName: "targetDedicatedNodes"
      },
      targetLowPriorityNodes: {
        type: { name: "Number" },
        serializedName: "targetLowPriorityNodes"
      },
      enableAutoScale: {
        type: { name: "Boolean" },
        serializedName: "enableAutoScale"
      },
      autoScaleFormula: {
        type: { name: "String" },
        serializedName: "autoScaleFormula"
      },
      autoScaleEvaluationInterval: {
        type: { name: "TimeSpan" },
        serializedName: "autoScaleEvaluationInterval"
      },
      autoScaleRun: {
        serializedName: "autoScaleRun",
        type: { name: "Composite", className: "AutoScaleRun" }
      },
      enableInterNodeCommunication: {
        type: { name: "Boolean" },
        serializedName: "enableInterNodeCommunication"
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: { name: "Composite", className: "NetworkConfiguration" }
      },
      startTask: {
        serializedName: "startTask",
        type: { name: "Composite", className: "StartTask" }
      },
      certificateReferences: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CertificateReference" }
          }
        },
        serializedName: "certificateReferences"
      },
      applicationPackageReferences: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        },
        serializedName: "applicationPackageReferences"
      },
      applicationLicenses: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "CloudPoolApplicationLicensesItem"
          }
        },
        serializedName: "applicationLicenses"
      },
      maxTasksPerNode: {
        type: { name: "Number" },
        serializedName: "maxTasksPerNode"
      },
      taskSchedulingPolicy: {
        serializedName: "taskSchedulingPolicy",
        type: { name: "Composite", className: "TaskSchedulingPolicy" }
      },
      userAccounts: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UserAccount" } }
        },
        serializedName: "userAccounts"
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata"
      },
      stats: {
        serializedName: "stats",
        type: { name: "Composite", className: "PoolStatistics" }
      },
      mountConfiguration: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MountConfiguration" }
          }
        },
        serializedName: "mountConfiguration"
      }
    }
  }
};

export const ResizeError: coreHttp.CompositeMapper = {
  serializedName: "ResizeError",
  type: {
    name: "Composite",
    className: "ResizeError",
    modelProperties: {
      code: { type: { name: "String" }, serializedName: "code" },
      message: { type: { name: "String" }, serializedName: "message" },
      values: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NameValuePair" } }
        },
        serializedName: "values"
      }
    }
  }
};

export const AutoScaleRun: coreHttp.CompositeMapper = {
  serializedName: "AutoScaleRun",
  type: {
    name: "Composite",
    className: "AutoScaleRun",
    modelProperties: {
      timestamp: {
        type: { name: "DateTime" },
        serializedName: "timestamp",
        required: true
      },
      results: { type: { name: "String" }, serializedName: "results" },
      error: {
        serializedName: "error",
        type: { name: "Composite", className: "AutoScaleRunError" }
      }
    }
  }
};

export const AutoScaleRunError: coreHttp.CompositeMapper = {
  serializedName: "AutoScaleRunError",
  type: {
    name: "Composite",
    className: "AutoScaleRunError",
    modelProperties: {
      code: { type: { name: "String" }, serializedName: "code" },
      message: { type: { name: "String" }, serializedName: "message" },
      values: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NameValuePair" } }
        },
        serializedName: "values"
      }
    }
  }
};

export const PoolPatchParameter: coreHttp.CompositeMapper = {
  serializedName: "PoolPatchParameter",
  type: {
    name: "Composite",
    className: "PoolPatchParameter",
    modelProperties: {
      startTask: {
        serializedName: "startTask",
        type: { name: "Composite", className: "StartTask" }
      },
      certificateReferences: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CertificateReference" }
          }
        },
        serializedName: "certificateReferences"
      },
      applicationPackageReferences: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        },
        serializedName: "applicationPackageReferences"
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata"
      }
    }
  }
};

export const PoolEnableAutoScaleParameter: coreHttp.CompositeMapper = {
  serializedName: "PoolEnableAutoScaleParameter",
  type: {
    name: "Composite",
    className: "PoolEnableAutoScaleParameter",
    modelProperties: {
      autoScaleFormula: {
        type: { name: "String" },
        serializedName: "autoScaleFormula"
      },
      autoScaleEvaluationInterval: {
        type: { name: "TimeSpan" },
        serializedName: "autoScaleEvaluationInterval"
      }
    }
  }
};

export const PoolEvaluateAutoScaleParameter: coreHttp.CompositeMapper = {
  serializedName: "PoolEvaluateAutoScaleParameter",
  type: {
    name: "Composite",
    className: "PoolEvaluateAutoScaleParameter",
    modelProperties: {
      autoScaleFormula: {
        type: { name: "String" },
        serializedName: "autoScaleFormula",
        required: true
      }
    }
  }
};

export const PoolResizeParameter: coreHttp.CompositeMapper = {
  serializedName: "PoolResizeParameter",
  type: {
    name: "Composite",
    className: "PoolResizeParameter",
    modelProperties: {
      targetDedicatedNodes: {
        type: { name: "Number" },
        serializedName: "targetDedicatedNodes"
      },
      targetLowPriorityNodes: {
        type: { name: "Number" },
        serializedName: "targetLowPriorityNodes"
      },
      resizeTimeout: {
        type: { name: "TimeSpan" },
        serializedName: "resizeTimeout"
      },
      nodeDeallocationOption: {
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "taskcompletion",
            "retaineddata"
          ]
        },
        serializedName: "nodeDeallocationOption"
      }
    }
  }
};

export const PoolUpdatePropertiesParameter: coreHttp.CompositeMapper = {
  serializedName: "PoolUpdatePropertiesParameter",
  type: {
    name: "Composite",
    className: "PoolUpdatePropertiesParameter",
    modelProperties: {
      startTask: {
        serializedName: "startTask",
        type: { name: "Composite", className: "StartTask" }
      },
      certificateReferences: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CertificateReference" }
          }
        },
        serializedName: "certificateReferences",
        required: true
      },
      applicationPackageReferences: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        },
        serializedName: "applicationPackageReferences",
        required: true
      },
      metadata: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        },
        serializedName: "metadata",
        required: true
      }
    }
  }
};

export const NodeRemoveParameter: coreHttp.CompositeMapper = {
  serializedName: "NodeRemoveParameter",
  type: {
    name: "Composite",
    className: "NodeRemoveParameter",
    modelProperties: {
      nodeList: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "NodeRemoveParameterNodeListItem"
          }
        },
        serializedName: "nodeList",
        required: true,
        constraints: { MaxItems: 100 }
      },
      resizeTimeout: {
        type: { name: "TimeSpan" },
        serializedName: "resizeTimeout"
      },
      nodeDeallocationOption: {
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "taskcompletion",
            "retaineddata"
          ]
        },
        serializedName: "nodeDeallocationOption"
      }
    }
  }
};

export const TaskAddParameter: coreHttp.CompositeMapper = {
  serializedName: "TaskAddParameter",
  type: {
    name: "Composite",
    className: "TaskAddParameter",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      commandLine: {
        type: { name: "String" },
        serializedName: "commandLine",
        required: true
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: { name: "Composite", className: "TaskContainerSettings" }
      },
      exitConditions: {
        serializedName: "exitConditions",
        type: { name: "Composite", className: "ExitConditions" }
      },
      resourceFiles: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceFile" } }
        },
        serializedName: "resourceFiles"
      },
      outputFiles: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OutputFile" } }
        },
        serializedName: "outputFiles"
      },
      environmentSettings: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentSetting" }
          }
        },
        serializedName: "environmentSettings"
      },
      affinityInfo: {
        serializedName: "affinityInfo",
        type: { name: "Composite", className: "AffinityInformation" }
      },
      constraints: {
        serializedName: "constraints",
        type: { name: "Composite", className: "TaskConstraints" }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: { name: "Composite", className: "UserIdentity" }
      },
      multiInstanceSettings: {
        serializedName: "multiInstanceSettings",
        type: { name: "Composite", className: "MultiInstanceSettings" }
      },
      dependsOn: {
        serializedName: "dependsOn",
        type: { name: "Composite", className: "TaskDependencies" }
      },
      applicationPackageReferences: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        },
        serializedName: "applicationPackageReferences"
      },
      authenticationTokenSettings: {
        serializedName: "authenticationTokenSettings",
        type: { name: "Composite", className: "AuthenticationTokenSettings" }
      }
    }
  }
};

export const ExitConditions: coreHttp.CompositeMapper = {
  serializedName: "ExitConditions",
  type: {
    name: "Composite",
    className: "ExitConditions",
    modelProperties: {
      exitCodes: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ExitCodeMapping" } }
        },
        serializedName: "exitCodes"
      },
      exitCodeRanges: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExitCodeRangeMapping" }
          }
        },
        serializedName: "exitCodeRanges"
      },
      preProcessingError: {
        serializedName: "preProcessingError",
        type: { name: "Composite", className: "ExitOptions" }
      },
      fileUploadError: {
        serializedName: "fileUploadError",
        type: { name: "Composite", className: "ExitOptions" }
      },
      default: {
        serializedName: "default",
        type: { name: "Composite", className: "ExitOptions" }
      }
    }
  }
};

export const ExitCodeMapping: coreHttp.CompositeMapper = {
  serializedName: "ExitCodeMapping",
  type: {
    name: "Composite",
    className: "ExitCodeMapping",
    modelProperties: {
      code: {
        type: { name: "Number" },
        serializedName: "code",
        required: true
      },
      exitOptions: {
        serializedName: "exitOptions",
        type: { name: "Composite", className: "ExitOptions" }
      }
    }
  }
};

export const ExitOptions: coreHttp.CompositeMapper = {
  serializedName: "ExitOptions",
  type: {
    name: "Composite",
    className: "ExitOptions",
    modelProperties: {
      jobAction: {
        type: { name: "Enum", allowedValues: ["none", "disable", "terminate"] },
        serializedName: "jobAction"
      },
      dependencyAction: {
        type: { name: "Enum", allowedValues: ["satisfy", "block"] },
        serializedName: "dependencyAction"
      }
    }
  }
};

export const ExitCodeRangeMapping: coreHttp.CompositeMapper = {
  serializedName: "ExitCodeRangeMapping",
  type: {
    name: "Composite",
    className: "ExitCodeRangeMapping",
    modelProperties: {
      start: {
        type: { name: "Number" },
        serializedName: "start",
        required: true
      },
      end: { type: { name: "Number" }, serializedName: "end", required: true },
      exitOptions: {
        serializedName: "exitOptions",
        type: { name: "Composite", className: "ExitOptions" }
      }
    }
  }
};

export const AffinityInformation: coreHttp.CompositeMapper = {
  serializedName: "AffinityInformation",
  type: {
    name: "Composite",
    className: "AffinityInformation",
    modelProperties: {
      affinityId: {
        type: { name: "String" },
        serializedName: "affinityId",
        required: true
      }
    }
  }
};

export const MultiInstanceSettings: coreHttp.CompositeMapper = {
  serializedName: "MultiInstanceSettings",
  type: {
    name: "Composite",
    className: "MultiInstanceSettings",
    modelProperties: {
      numberOfInstances: {
        type: { name: "Number" },
        serializedName: "numberOfInstances"
      },
      coordinationCommandLine: {
        type: { name: "String" },
        serializedName: "coordinationCommandLine",
        required: true
      },
      commonResourceFiles: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceFile" } }
        },
        serializedName: "commonResourceFiles"
      }
    }
  }
};

export const TaskDependencies: coreHttp.CompositeMapper = {
  serializedName: "TaskDependencies",
  type: {
    name: "Composite",
    className: "TaskDependencies",
    modelProperties: {
      taskIds: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "TaskDependenciesTaskIdsItem"
          }
        },
        serializedName: "taskIds"
      },
      taskIdRanges: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TaskIdRange" } }
        },
        serializedName: "taskIdRanges"
      }
    }
  }
};

export const TaskIdRange: coreHttp.CompositeMapper = {
  serializedName: "TaskIdRange",
  type: {
    name: "Composite",
    className: "TaskIdRange",
    modelProperties: {
      start: {
        type: { name: "Number" },
        serializedName: "start",
        required: true
      },
      end: { type: { name: "Number" }, serializedName: "end", required: true }
    }
  }
};

export const CloudTaskListResult: coreHttp.CompositeMapper = {
  serializedName: "CloudTaskListResult",
  type: {
    name: "Composite",
    className: "CloudTaskListResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudTask" } }
        },
        serializedName: "value"
      },
      odataNextLink: {
        type: { name: "String" },
        serializedName: "odata\\.nextLink"
      }
    }
  }
};

export const CloudTask: coreHttp.CompositeMapper = {
  serializedName: "CloudTask",
  type: {
    name: "Composite",
    className: "CloudTask",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      url: { type: { name: "String" }, serializedName: "url" },
      eTag: { type: { name: "String" }, serializedName: "eTag" },
      lastModified: {
        type: { name: "DateTime" },
        serializedName: "lastModified"
      },
      creationTime: {
        type: { name: "DateTime" },
        serializedName: "creationTime"
      },
      exitConditions: {
        serializedName: "exitConditions",
        type: { name: "Composite", className: "ExitConditions" }
      },
      state: {
        type: {
          name: "Enum",
          allowedValues: ["active", "preparing", "running", "completed"]
        },
        serializedName: "state"
      },
      stateTransitionTime: {
        type: { name: "DateTime" },
        serializedName: "stateTransitionTime"
      },
      previousState: {
        type: {
          name: "Enum",
          allowedValues: ["active", "preparing", "running", "completed"]
        },
        serializedName: "previousState"
      },
      previousStateTransitionTime: {
        type: { name: "DateTime" },
        serializedName: "previousStateTransitionTime"
      },
      commandLine: { type: { name: "String" }, serializedName: "commandLine" },
      containerSettings: {
        serializedName: "containerSettings",
        type: { name: "Composite", className: "TaskContainerSettings" }
      },
      resourceFiles: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceFile" } }
        },
        serializedName: "resourceFiles"
      },
      outputFiles: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OutputFile" } }
        },
        serializedName: "outputFiles"
      },
      environmentSettings: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentSetting" }
          }
        },
        serializedName: "environmentSettings"
      },
      affinityInfo: {
        serializedName: "affinityInfo",
        type: { name: "Composite", className: "AffinityInformation" }
      },
      constraints: {
        serializedName: "constraints",
        type: { name: "Composite", className: "TaskConstraints" }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: { name: "Composite", className: "UserIdentity" }
      },
      executionInfo: {
        serializedName: "executionInfo",
        type: { name: "Composite", className: "TaskExecutionInformation" }
      },
      nodeInfo: {
        serializedName: "nodeInfo",
        type: { name: "Composite", className: "ComputeNodeInformation" }
      },
      multiInstanceSettings: {
        serializedName: "multiInstanceSettings",
        type: { name: "Composite", className: "MultiInstanceSettings" }
      },
      stats: {
        serializedName: "stats",
        type: { name: "Composite", className: "TaskStatistics" }
      },
      dependsOn: {
        serializedName: "dependsOn",
        type: { name: "Composite", className: "TaskDependencies" }
      },
      applicationPackageReferences: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        },
        serializedName: "applicationPackageReferences"
      },
      authenticationTokenSettings: {
        serializedName: "authenticationTokenSettings",
        type: { name: "Composite", className: "AuthenticationTokenSettings" }
      }
    }
  }
};

export const TaskExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "TaskExecutionInformation",
  type: {
    name: "Composite",
    className: "TaskExecutionInformation",
    modelProperties: {
      startTime: { type: { name: "DateTime" }, serializedName: "startTime" },
      endTime: { type: { name: "DateTime" }, serializedName: "endTime" },
      exitCode: { type: { name: "Number" }, serializedName: "exitCode" },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: { name: "Composite", className: "TaskFailureInformation" }
      },
      retryCount: {
        type: { name: "Number" },
        serializedName: "retryCount",
        required: true
      },
      lastRetryTime: {
        type: { name: "DateTime" },
        serializedName: "lastRetryTime"
      },
      requeueCount: {
        type: { name: "Number" },
        serializedName: "requeueCount",
        required: true
      },
      lastRequeueTime: {
        type: { name: "DateTime" },
        serializedName: "lastRequeueTime"
      },
      result: {
        type: { name: "Enum", allowedValues: ["success", "failure"] },
        serializedName: "result"
      }
    }
  }
};

export const ComputeNodeInformation: coreHttp.CompositeMapper = {
  serializedName: "ComputeNodeInformation",
  type: {
    name: "Composite",
    className: "ComputeNodeInformation",
    modelProperties: {
      affinityId: { type: { name: "String" }, serializedName: "affinityId" },
      nodeUrl: { type: { name: "String" }, serializedName: "nodeUrl" },
      poolId: { type: { name: "String" }, serializedName: "poolId" },
      nodeId: { type: { name: "String" }, serializedName: "nodeId" },
      taskRootDirectory: {
        type: { name: "String" },
        serializedName: "taskRootDirectory"
      },
      taskRootDirectoryUrl: {
        type: { name: "String" },
        serializedName: "taskRootDirectoryUrl"
      }
    }
  }
};

export const TaskStatistics: coreHttp.CompositeMapper = {
  serializedName: "TaskStatistics",
  type: {
    name: "Composite",
    className: "TaskStatistics",
    modelProperties: {
      url: { type: { name: "String" }, serializedName: "url", required: true },
      startTime: {
        type: { name: "DateTime" },
        serializedName: "startTime",
        required: true
      },
      lastUpdateTime: {
        type: { name: "DateTime" },
        serializedName: "lastUpdateTime",
        required: true
      },
      userCPUTime: {
        type: { name: "TimeSpan" },
        serializedName: "userCPUTime",
        required: true
      },
      kernelCPUTime: {
        type: { name: "TimeSpan" },
        serializedName: "kernelCPUTime",
        required: true
      },
      wallClockTime: {
        type: { name: "TimeSpan" },
        serializedName: "wallClockTime",
        required: true
      },
      readIOps: {
        type: { name: "Number" },
        serializedName: "readIOps",
        required: true
      },
      writeIOps: {
        type: { name: "Number" },
        serializedName: "writeIOps",
        required: true
      },
      readIOGiB: {
        type: { name: "Number" },
        serializedName: "readIOGiB",
        required: true
      },
      writeIOGiB: {
        type: { name: "Number" },
        serializedName: "writeIOGiB",
        required: true
      },
      waitTime: {
        type: { name: "TimeSpan" },
        serializedName: "waitTime",
        required: true
      }
    }
  }
};

export const TaskAddCollectionParameter: coreHttp.CompositeMapper = {
  serializedName: "TaskAddCollectionParameter",
  type: {
    name: "Composite",
    className: "TaskAddCollectionParameter",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TaskAddParameter" }
          }
        },
        serializedName: "value",
        required: true,
        constraints: { MaxItems: 100 }
      }
    }
  }
};

export const TaskAddCollectionResult: coreHttp.CompositeMapper = {
  serializedName: "TaskAddCollectionResult",
  type: {
    name: "Composite",
    className: "TaskAddCollectionResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TaskAddResult" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const TaskAddResult: coreHttp.CompositeMapper = {
  serializedName: "TaskAddResult",
  type: {
    name: "Composite",
    className: "TaskAddResult",
    modelProperties: {
      status: {
        type: {
          name: "Enum",
          allowedValues: ["success", "clienterror", "servererror"]
        },
        serializedName: "status",
        required: true
      },
      taskId: {
        type: { name: "String" },
        serializedName: "taskId",
        required: true
      },
      eTag: { type: { name: "String" }, serializedName: "eTag" },
      lastModified: {
        type: { name: "DateTime" },
        serializedName: "lastModified"
      },
      location: { type: { name: "String" }, serializedName: "location" },
      error: {
        serializedName: "error",
        type: { name: "Composite", className: "BatchError" }
      }
    }
  }
};

export const TaskUpdateParameter: coreHttp.CompositeMapper = {
  serializedName: "TaskUpdateParameter",
  type: {
    name: "Composite",
    className: "TaskUpdateParameter",
    modelProperties: {
      constraints: {
        serializedName: "constraints",
        type: { name: "Composite", className: "TaskConstraints" }
      }
    }
  }
};

export const CloudTaskListSubtasksResult: coreHttp.CompositeMapper = {
  serializedName: "CloudTaskListSubtasksResult",
  type: {
    name: "Composite",
    className: "CloudTaskListSubtasksResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SubtaskInformation" }
          }
        },
        serializedName: "value"
      }
    }
  }
};

export const SubtaskInformation: coreHttp.CompositeMapper = {
  serializedName: "SubtaskInformation",
  type: {
    name: "Composite",
    className: "SubtaskInformation",
    modelProperties: {
      id: { type: { name: "Number" }, serializedName: "id" },
      nodeInfo: {
        serializedName: "nodeInfo",
        type: { name: "Composite", className: "ComputeNodeInformation" }
      },
      startTime: { type: { name: "DateTime" }, serializedName: "startTime" },
      endTime: { type: { name: "DateTime" }, serializedName: "endTime" },
      exitCode: { type: { name: "Number" }, serializedName: "exitCode" },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: { name: "Composite", className: "TaskFailureInformation" }
      },
      state: {
        type: {
          name: "Enum",
          allowedValues: ["preparing", "running", "completed"]
        },
        serializedName: "state"
      },
      stateTransitionTime: {
        type: { name: "DateTime" },
        serializedName: "stateTransitionTime"
      },
      previousState: {
        type: {
          name: "Enum",
          allowedValues: ["preparing", "running", "completed"]
        },
        serializedName: "previousState"
      },
      previousStateTransitionTime: {
        type: { name: "DateTime" },
        serializedName: "previousStateTransitionTime"
      },
      result: {
        type: { name: "Enum", allowedValues: ["success", "failure"] },
        serializedName: "result"
      }
    }
  }
};

export const ComputeNodeUser: coreHttp.CompositeMapper = {
  serializedName: "ComputeNodeUser",
  type: {
    name: "Composite",
    className: "ComputeNodeUser",
    modelProperties: {
      name: {
        type: { name: "String" },
        serializedName: "name",
        required: true
      },
      isAdmin: { type: { name: "Boolean" }, serializedName: "isAdmin" },
      expiryTime: { type: { name: "DateTime" }, serializedName: "expiryTime" },
      password: { type: { name: "String" }, serializedName: "password" },
      sshPublicKey: { type: { name: "String" }, serializedName: "sshPublicKey" }
    }
  }
};

export const NodeUpdateUserParameter: coreHttp.CompositeMapper = {
  serializedName: "NodeUpdateUserParameter",
  type: {
    name: "Composite",
    className: "NodeUpdateUserParameter",
    modelProperties: {
      password: { type: { name: "String" }, serializedName: "password" },
      expiryTime: { type: { name: "DateTime" }, serializedName: "expiryTime" },
      sshPublicKey: { type: { name: "String" }, serializedName: "sshPublicKey" }
    }
  }
};

export const ComputeNode: coreHttp.CompositeMapper = {
  serializedName: "ComputeNode",
  type: {
    name: "Composite",
    className: "ComputeNode",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      url: { type: { name: "String" }, serializedName: "url" },
      state: {
        type: {
          name: "Enum",
          allowedValues: [
            "idle",
            "rebooting",
            "reimaging",
            "running",
            "unusable",
            "creating",
            "starting",
            "waitingforstarttask",
            "starttaskfailed",
            "unknown",
            "leavingpool",
            "offline",
            "preempted"
          ]
        },
        serializedName: "state"
      },
      schedulingState: {
        type: { name: "Enum", allowedValues: ["enabled", "disabled"] },
        serializedName: "schedulingState"
      },
      stateTransitionTime: {
        type: { name: "DateTime" },
        serializedName: "stateTransitionTime"
      },
      lastBootTime: {
        type: { name: "DateTime" },
        serializedName: "lastBootTime"
      },
      allocationTime: {
        type: { name: "DateTime" },
        serializedName: "allocationTime"
      },
      ipAddress: { type: { name: "String" }, serializedName: "ipAddress" },
      affinityId: { type: { name: "String" }, serializedName: "affinityId" },
      vmSize: { type: { name: "String" }, serializedName: "vmSize" },
      totalTasksRun: {
        type: { name: "Number" },
        serializedName: "totalTasksRun"
      },
      runningTasksCount: {
        type: { name: "Number" },
        serializedName: "runningTasksCount"
      },
      totalTasksSucceeded: {
        type: { name: "Number" },
        serializedName: "totalTasksSucceeded"
      },
      recentTasks: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TaskInformation" } }
        },
        serializedName: "recentTasks"
      },
      startTask: {
        serializedName: "startTask",
        type: { name: "Composite", className: "StartTask" }
      },
      startTaskInfo: {
        serializedName: "startTaskInfo",
        type: { name: "Composite", className: "StartTaskInformation" }
      },
      certificateReferences: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CertificateReference" }
          }
        },
        serializedName: "certificateReferences"
      },
      errors: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ComputeNodeError" }
          }
        },
        serializedName: "errors"
      },
      isDedicated: { type: { name: "Boolean" }, serializedName: "isDedicated" },
      endpointConfiguration: {
        serializedName: "endpointConfiguration",
        type: {
          name: "Composite",
          className: "ComputeNodeEndpointConfiguration"
        }
      },
      nodeAgentInfo: {
        serializedName: "nodeAgentInfo",
        type: { name: "Composite", className: "NodeAgentInformation" }
      }
    }
  }
};

export const TaskInformation: coreHttp.CompositeMapper = {
  serializedName: "TaskInformation",
  type: {
    name: "Composite",
    className: "TaskInformation",
    modelProperties: {
      taskUrl: { type: { name: "String" }, serializedName: "taskUrl" },
      jobId: { type: { name: "String" }, serializedName: "jobId" },
      taskId: { type: { name: "String" }, serializedName: "taskId" },
      subtaskId: { type: { name: "Number" }, serializedName: "subtaskId" },
      taskState: {
        type: {
          name: "Enum",
          allowedValues: ["active", "preparing", "running", "completed"]
        },
        serializedName: "taskState",
        required: true
      },
      executionInfo: {
        serializedName: "executionInfo",
        type: { name: "Composite", className: "TaskExecutionInformation" }
      }
    }
  }
};

export const StartTaskInformation: coreHttp.CompositeMapper = {
  serializedName: "StartTaskInformation",
  type: {
    name: "Composite",
    className: "StartTaskInformation",
    modelProperties: {
      state: {
        type: { name: "Enum", allowedValues: ["running", "completed"] },
        serializedName: "state",
        required: true
      },
      startTime: {
        type: { name: "DateTime" },
        serializedName: "startTime",
        required: true
      },
      endTime: { type: { name: "DateTime" }, serializedName: "endTime" },
      exitCode: { type: { name: "Number" }, serializedName: "exitCode" },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: { name: "Composite", className: "TaskFailureInformation" }
      },
      retryCount: {
        type: { name: "Number" },
        serializedName: "retryCount",
        required: true
      },
      lastRetryTime: {
        type: { name: "DateTime" },
        serializedName: "lastRetryTime"
      },
      result: {
        type: { name: "Enum", allowedValues: ["success", "failure"] },
        serializedName: "result"
      }
    }
  }
};

export const ComputeNodeError: coreHttp.CompositeMapper = {
  serializedName: "ComputeNodeError",
  type: {
    name: "Composite",
    className: "ComputeNodeError",
    modelProperties: {
      code: { type: { name: "String" }, serializedName: "code" },
      message: { type: { name: "String" }, serializedName: "message" },
      errorDetails: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NameValuePair" } }
        },
        serializedName: "errorDetails"
      }
    }
  }
};

export const ComputeNodeEndpointConfiguration: coreHttp.CompositeMapper = {
  serializedName: "ComputeNodeEndpointConfiguration",
  type: {
    name: "Composite",
    className: "ComputeNodeEndpointConfiguration",
    modelProperties: {
      inboundEndpoints: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InboundEndpoint" } }
        },
        serializedName: "inboundEndpoints",
        required: true
      }
    }
  }
};

export const InboundEndpoint: coreHttp.CompositeMapper = {
  serializedName: "InboundEndpoint",
  type: {
    name: "Composite",
    className: "InboundEndpoint",
    modelProperties: {
      name: {
        type: { name: "String" },
        serializedName: "name",
        required: true
      },
      protocol: {
        type: { name: "Enum", allowedValues: ["tcp", "udp"] },
        serializedName: "protocol",
        required: true
      },
      publicIPAddress: {
        type: { name: "String" },
        serializedName: "publicIPAddress",
        required: true
      },
      publicFqdn: {
        type: { name: "String" },
        serializedName: "publicFQDN",
        required: true
      },
      frontendPort: {
        type: { name: "Number" },
        serializedName: "frontendPort",
        required: true
      },
      backendPort: {
        type: { name: "Number" },
        serializedName: "backendPort",
        required: true
      }
    }
  }
};

export const NodeAgentInformation: coreHttp.CompositeMapper = {
  serializedName: "NodeAgentInformation",
  type: {
    name: "Composite",
    className: "NodeAgentInformation",
    modelProperties: {
      version: {
        type: { name: "String" },
        serializedName: "version",
        required: true
      },
      lastUpdateTime: {
        type: { name: "DateTime" },
        serializedName: "lastUpdateTime",
        required: true
      }
    }
  }
};

export const NodeRebootParameter: coreHttp.CompositeMapper = {
  serializedName: "NodeRebootParameter",
  type: {
    name: "Composite",
    className: "NodeRebootParameter",
    modelProperties: {
      nodeRebootOption: {
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "taskcompletion",
            "retaineddata"
          ]
        },
        serializedName: "nodeRebootOption"
      }
    }
  }
};

export const NodeReimageParameter: coreHttp.CompositeMapper = {
  serializedName: "NodeReimageParameter",
  type: {
    name: "Composite",
    className: "NodeReimageParameter",
    modelProperties: {
      nodeReimageOption: {
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "taskcompletion",
            "retaineddata"
          ]
        },
        serializedName: "nodeReimageOption"
      }
    }
  }
};

export const NodeDisableSchedulingParameter: coreHttp.CompositeMapper = {
  serializedName: "NodeDisableSchedulingParameter",
  type: {
    name: "Composite",
    className: "NodeDisableSchedulingParameter",
    modelProperties: {
      nodeDisableSchedulingOption: {
        type: {
          name: "Enum",
          allowedValues: ["requeue", "terminate", "taskcompletion"]
        },
        serializedName: "nodeDisableSchedulingOption"
      }
    }
  }
};

export const ComputeNodeGetRemoteLoginSettingsResult: coreHttp.CompositeMapper = {
  serializedName: "ComputeNodeGetRemoteLoginSettingsResult",
  type: {
    name: "Composite",
    className: "ComputeNodeGetRemoteLoginSettingsResult",
    modelProperties: {
      remoteLoginIPAddress: {
        type: { name: "String" },
        serializedName: "remoteLoginIPAddress",
        required: true
      },
      remoteLoginPort: {
        type: { name: "Number" },
        serializedName: "remoteLoginPort",
        required: true
      }
    }
  }
};

export const UploadBatchServiceLogsConfiguration: coreHttp.CompositeMapper = {
  serializedName: "UploadBatchServiceLogsConfiguration",
  type: {
    name: "Composite",
    className: "UploadBatchServiceLogsConfiguration",
    modelProperties: {
      containerUrl: {
        type: { name: "String" },
        serializedName: "containerUrl",
        required: true
      },
      startTime: {
        type: { name: "DateTime" },
        serializedName: "startTime",
        required: true
      },
      endTime: { type: { name: "DateTime" }, serializedName: "endTime" }
    }
  }
};

export const UploadBatchServiceLogsResult: coreHttp.CompositeMapper = {
  serializedName: "UploadBatchServiceLogsResult",
  type: {
    name: "Composite",
    className: "UploadBatchServiceLogsResult",
    modelProperties: {
      virtualDirectoryName: {
        type: { name: "String" },
        serializedName: "virtualDirectoryName",
        required: true
      },
      numberOfFilesUploaded: {
        type: { name: "Number" },
        serializedName: "numberOfFilesUploaded",
        required: true
      }
    }
  }
};

export const ComputeNodeListResult: coreHttp.CompositeMapper = {
  serializedName: "ComputeNodeListResult",
  type: {
    name: "Composite",
    className: "ComputeNodeListResult",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ComputeNode" } }
        },
        serializedName: "value"
      },
      odataNextLink: {
        type: { name: "String" },
        serializedName: "odata\\.nextLink"
      }
    }
  }
};

export const ApplicationListHeaders: coreHttp.CompositeMapper = {
  serializedName: "application_listHeaders",
  type: {
    name: "Composite",
    className: "ApplicationListHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const ApplicationGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "application_getHeaders",
  type: {
    name: "Composite",
    className: "ApplicationGetHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const ApplicationListNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "application_listNextHeaders",
  type: {
    name: "Composite",
    className: "ApplicationListNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const PoolListUsageMetricsHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_listUsageMetricsHeaders",
  type: {
    name: "Composite",
    className: "PoolListUsageMetricsHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const PoolGetAllLifetimeStatisticsHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_getAllLifetimeStatisticsHeaders",
  type: {
    name: "Composite",
    className: "PoolGetAllLifetimeStatisticsHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const PoolAddHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_addHeaders",
  type: {
    name: "Composite",
    className: "PoolAddHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const PoolListHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_listHeaders",
  type: {
    name: "Composite",
    className: "PoolListHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const PoolDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_deleteHeaders",
  type: {
    name: "Composite",
    className: "PoolDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "String" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "String" }, serializedName: "request-id" }
    }
  }
};

export const PoolExistsHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_existsHeaders",
  type: {
    name: "Composite",
    className: "PoolExistsHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const PoolGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_getHeaders",
  type: {
    name: "Composite",
    className: "PoolGetHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const PoolPatchHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_patchHeaders",
  type: {
    name: "Composite",
    className: "PoolPatchHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const PoolDisableAutoScaleHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_disableAutoScaleHeaders",
  type: {
    name: "Composite",
    className: "PoolDisableAutoScaleHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const PoolEnableAutoScaleHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_enableAutoScaleHeaders",
  type: {
    name: "Composite",
    className: "PoolEnableAutoScaleHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const PoolEvaluateAutoScaleHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_evaluateAutoScaleHeaders",
  type: {
    name: "Composite",
    className: "PoolEvaluateAutoScaleHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const PoolResizeHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_resizeHeaders",
  type: {
    name: "Composite",
    className: "PoolResizeHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const PoolStopResizeHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_stopResizeHeaders",
  type: {
    name: "Composite",
    className: "PoolStopResizeHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const PoolUpdatePropertiesHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_updatePropertiesHeaders",
  type: {
    name: "Composite",
    className: "PoolUpdatePropertiesHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const PoolRemoveNodesHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_removeNodesHeaders",
  type: {
    name: "Composite",
    className: "PoolRemoveNodesHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const PoolListUsageMetricsNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_listUsageMetricsNextHeaders",
  type: {
    name: "Composite",
    className: "PoolListUsageMetricsNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const PoolListNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_listNextHeaders",
  type: {
    name: "Composite",
    className: "PoolListNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const AccountListSupportedImagesHeaders: coreHttp.CompositeMapper = {
  serializedName: "account_listSupportedImagesHeaders",
  type: {
    name: "Composite",
    className: "AccountListSupportedImagesHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const AccountListPoolNodeCountsHeaders: coreHttp.CompositeMapper = {
  serializedName: "account_listPoolNodeCountsHeaders",
  type: {
    name: "Composite",
    className: "AccountListPoolNodeCountsHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" }
    }
  }
};

export const AccountListSupportedImagesNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "account_listSupportedImagesNextHeaders",
  type: {
    name: "Composite",
    className: "AccountListSupportedImagesNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const AccountListPoolNodeCountsNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "account_listPoolNodeCountsNextHeaders",
  type: {
    name: "Composite",
    className: "AccountListPoolNodeCountsNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" }
    }
  }
};

export const JobGetAllLifetimeStatisticsHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_getAllLifetimeStatisticsHeaders",
  type: {
    name: "Composite",
    className: "JobGetAllLifetimeStatisticsHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const JobDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_deleteHeaders",
  type: {
    name: "Composite",
    className: "JobDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "String" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "String" }, serializedName: "request-id" }
    }
  }
};

export const JobGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_getHeaders",
  type: {
    name: "Composite",
    className: "JobGetHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const JobPatchHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_patchHeaders",
  type: {
    name: "Composite",
    className: "JobPatchHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const JobUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_updateHeaders",
  type: {
    name: "Composite",
    className: "JobUpdateHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const JobDisableHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_disableHeaders",
  type: {
    name: "Composite",
    className: "JobDisableHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const JobEnableHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_enableHeaders",
  type: {
    name: "Composite",
    className: "JobEnableHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const JobTerminateHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_terminateHeaders",
  type: {
    name: "Composite",
    className: "JobTerminateHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const JobAddHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_addHeaders",
  type: {
    name: "Composite",
    className: "JobAddHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const JobListHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_listHeaders",
  type: {
    name: "Composite",
    className: "JobListHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const JobListFromJobScheduleHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_listFromJobScheduleHeaders",
  type: {
    name: "Composite",
    className: "JobListFromJobScheduleHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const JobListPreparationAndReleaseTaskStatusHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_listPreparationAndReleaseTaskStatusHeaders",
  type: {
    name: "Composite",
    className: "JobListPreparationAndReleaseTaskStatusHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const JobGetTaskCountsHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_getTaskCountsHeaders",
  type: {
    name: "Composite",
    className: "JobGetTaskCountsHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" }
    }
  }
};

export const JobListNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_listNextHeaders",
  type: {
    name: "Composite",
    className: "JobListNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const JobListFromJobScheduleNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_listFromJobScheduleNextHeaders",
  type: {
    name: "Composite",
    className: "JobListFromJobScheduleNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const JobListPreparationAndReleaseTaskStatusNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "job_listPreparationAndReleaseTaskStatusNextHeaders",
  type: {
    name: "Composite",
    className: "JobListPreparationAndReleaseTaskStatusNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const CertificateAddHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate_addHeaders",
  type: {
    name: "Composite",
    className: "CertificateAddHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const CertificateListHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate_listHeaders",
  type: {
    name: "Composite",
    className: "CertificateListHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const CertificateCancelDeletionHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate_cancelDeletionHeaders",
  type: {
    name: "Composite",
    className: "CertificateCancelDeletionHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const CertificateDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate_deleteHeaders",
  type: {
    name: "Composite",
    className: "CertificateDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const CertificateGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate_getHeaders",
  type: {
    name: "Composite",
    className: "CertificateGetHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const CertificateListNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate_listNextHeaders",
  type: {
    name: "Composite",
    className: "CertificateListNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const FileDeleteFromTaskHeaders: coreHttp.CompositeMapper = {
  serializedName: "file_deleteFromTaskHeaders",
  type: {
    name: "Composite",
    className: "FileDeleteFromTaskHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "String" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "String" }, serializedName: "request-id" }
    }
  }
};

export const FileGetFromTaskHeaders: coreHttp.CompositeMapper = {
  serializedName: "file_getFromTaskHeaders",
  type: {
    name: "Composite",
    className: "FileGetFromTaskHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      ocpCreationTime: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "ocp-creation-time"
      },
      ocpBatchFileIsdirectory: {
        type: { name: "Boolean" },
        serializedName: "ocp-batch-file-isdirectory"
      },
      ocpBatchFileUrl: {
        type: { name: "String" },
        serializedName: "ocp-batch-file-url"
      },
      ocpBatchFileMode: {
        type: { name: "String" },
        serializedName: "ocp-batch-file-mode"
      },
      contentType: { type: { name: "String" }, serializedName: "content-type" },
      contentLength: {
        type: { name: "Number" },
        serializedName: "content-length"
      }
    }
  }
};

export const FileGetPropertiesFromTaskHeaders: coreHttp.CompositeMapper = {
  serializedName: "file_getPropertiesFromTaskHeaders",
  type: {
    name: "Composite",
    className: "FileGetPropertiesFromTaskHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      ocpCreationTime: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "ocp-creation-time"
      },
      ocpBatchFileIsdirectory: {
        type: { name: "Boolean" },
        serializedName: "ocp-batch-file-isdirectory"
      },
      ocpBatchFileUrl: {
        type: { name: "String" },
        serializedName: "ocp-batch-file-url"
      },
      ocpBatchFileMode: {
        type: { name: "String" },
        serializedName: "ocp-batch-file-mode"
      },
      contentType: { type: { name: "String" }, serializedName: "content-type" },
      contentLength: {
        type: { name: "Number" },
        serializedName: "content-length"
      }
    }
  }
};

export const FileDeleteFromComputeNodeHeaders: coreHttp.CompositeMapper = {
  serializedName: "file_deleteFromComputeNodeHeaders",
  type: {
    name: "Composite",
    className: "FileDeleteFromComputeNodeHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "String" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "String" }, serializedName: "request-id" }
    }
  }
};

export const FileGetFromComputeNodeHeaders: coreHttp.CompositeMapper = {
  serializedName: "file_getFromComputeNodeHeaders",
  type: {
    name: "Composite",
    className: "FileGetFromComputeNodeHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      ocpCreationTime: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "ocp-creation-time"
      },
      ocpBatchFileIsdirectory: {
        type: { name: "Boolean" },
        serializedName: "ocp-batch-file-isdirectory"
      },
      ocpBatchFileUrl: {
        type: { name: "String" },
        serializedName: "ocp-batch-file-url"
      },
      ocpBatchFileMode: {
        type: { name: "String" },
        serializedName: "ocp-batch-file-mode"
      },
      contentType: { type: { name: "String" }, serializedName: "content-type" },
      contentLength: {
        type: { name: "Number" },
        serializedName: "content-length"
      }
    }
  }
};

export const FileGetPropertiesFromComputeNodeHeaders: coreHttp.CompositeMapper = {
  serializedName: "file_getPropertiesFromComputeNodeHeaders",
  type: {
    name: "Composite",
    className: "FileGetPropertiesFromComputeNodeHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      ocpCreationTime: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "ocp-creation-time"
      },
      ocpBatchFileIsdirectory: {
        type: { name: "Boolean" },
        serializedName: "ocp-batch-file-isdirectory"
      },
      ocpBatchFileUrl: {
        type: { name: "String" },
        serializedName: "ocp-batch-file-url"
      },
      ocpBatchFileMode: {
        type: { name: "String" },
        serializedName: "ocp-batch-file-mode"
      },
      contentType: { type: { name: "String" }, serializedName: "content-type" },
      contentLength: {
        type: { name: "Number" },
        serializedName: "content-length"
      }
    }
  }
};

export const FileListFromTaskHeaders: coreHttp.CompositeMapper = {
  serializedName: "file_listFromTaskHeaders",
  type: {
    name: "Composite",
    className: "FileListFromTaskHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const FileListFromComputeNodeHeaders: coreHttp.CompositeMapper = {
  serializedName: "file_listFromComputeNodeHeaders",
  type: {
    name: "Composite",
    className: "FileListFromComputeNodeHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const FileListFromTaskNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "file_listFromTaskNextHeaders",
  type: {
    name: "Composite",
    className: "FileListFromTaskNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const FileListFromComputeNodeNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "file_listFromComputeNodeNextHeaders",
  type: {
    name: "Composite",
    className: "FileListFromComputeNodeNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const JobScheduleExistsHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobSchedule_existsHeaders",
  type: {
    name: "Composite",
    className: "JobScheduleExistsHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const JobScheduleDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobSchedule_deleteHeaders",
  type: {
    name: "Composite",
    className: "JobScheduleDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "String" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "String" }, serializedName: "request-id" }
    }
  }
};

export const JobScheduleGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobSchedule_getHeaders",
  type: {
    name: "Composite",
    className: "JobScheduleGetHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const JobSchedulePatchHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobSchedule_patchHeaders",
  type: {
    name: "Composite",
    className: "JobSchedulePatchHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const JobScheduleUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobSchedule_updateHeaders",
  type: {
    name: "Composite",
    className: "JobScheduleUpdateHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const JobScheduleDisableHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobSchedule_disableHeaders",
  type: {
    name: "Composite",
    className: "JobScheduleDisableHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const JobScheduleEnableHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobSchedule_enableHeaders",
  type: {
    name: "Composite",
    className: "JobScheduleEnableHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const JobScheduleTerminateHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobSchedule_terminateHeaders",
  type: {
    name: "Composite",
    className: "JobScheduleTerminateHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const JobScheduleAddHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobSchedule_addHeaders",
  type: {
    name: "Composite",
    className: "JobScheduleAddHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const JobScheduleListHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobSchedule_listHeaders",
  type: {
    name: "Composite",
    className: "JobScheduleListHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const JobScheduleListNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobSchedule_listNextHeaders",
  type: {
    name: "Composite",
    className: "JobScheduleListNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const TaskAddHeaders: coreHttp.CompositeMapper = {
  serializedName: "task_addHeaders",
  type: {
    name: "Composite",
    className: "TaskAddHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const TaskListHeaders: coreHttp.CompositeMapper = {
  serializedName: "task_listHeaders",
  type: {
    name: "Composite",
    className: "TaskListHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const TaskAddCollectionHeaders: coreHttp.CompositeMapper = {
  serializedName: "task_addCollectionHeaders",
  type: {
    name: "Composite",
    className: "TaskAddCollectionHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "String" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "String" }, serializedName: "request-id" }
    }
  }
};

export const TaskDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "task_deleteHeaders",
  type: {
    name: "Composite",
    className: "TaskDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "String" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "String" }, serializedName: "request-id" }
    }
  }
};

export const TaskGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "task_getHeaders",
  type: {
    name: "Composite",
    className: "TaskGetHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const TaskUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "task_updateHeaders",
  type: {
    name: "Composite",
    className: "TaskUpdateHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const TaskListSubtasksHeaders: coreHttp.CompositeMapper = {
  serializedName: "task_listSubtasksHeaders",
  type: {
    name: "Composite",
    className: "TaskListSubtasksHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const TaskTerminateHeaders: coreHttp.CompositeMapper = {
  serializedName: "task_terminateHeaders",
  type: {
    name: "Composite",
    className: "TaskTerminateHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const TaskReactivateHeaders: coreHttp.CompositeMapper = {
  serializedName: "task_reactivateHeaders",
  type: {
    name: "Composite",
    className: "TaskReactivateHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const TaskListNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "task_listNextHeaders",
  type: {
    name: "Composite",
    className: "TaskListNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const ComputeNodeAddUserHeaders: coreHttp.CompositeMapper = {
  serializedName: "computeNode_addUserHeaders",
  type: {
    name: "Composite",
    className: "ComputeNodeAddUserHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const ComputeNodeDeleteUserHeaders: coreHttp.CompositeMapper = {
  serializedName: "computeNode_deleteUserHeaders",
  type: {
    name: "Composite",
    className: "ComputeNodeDeleteUserHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "String" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "String" }, serializedName: "request-id" }
    }
  }
};

export const ComputeNodeUpdateUserHeaders: coreHttp.CompositeMapper = {
  serializedName: "computeNode_updateUserHeaders",
  type: {
    name: "Composite",
    className: "ComputeNodeUpdateUserHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const ComputeNodeGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "computeNode_getHeaders",
  type: {
    name: "Composite",
    className: "ComputeNodeGetHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const ComputeNodeRebootHeaders: coreHttp.CompositeMapper = {
  serializedName: "computeNode_rebootHeaders",
  type: {
    name: "Composite",
    className: "ComputeNodeRebootHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const ComputeNodeReimageHeaders: coreHttp.CompositeMapper = {
  serializedName: "computeNode_reimageHeaders",
  type: {
    name: "Composite",
    className: "ComputeNodeReimageHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const ComputeNodeDisableSchedulingHeaders: coreHttp.CompositeMapper = {
  serializedName: "computeNode_disableSchedulingHeaders",
  type: {
    name: "Composite",
    className: "ComputeNodeDisableSchedulingHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const ComputeNodeEnableSchedulingHeaders: coreHttp.CompositeMapper = {
  serializedName: "computeNode_enableSchedulingHeaders",
  type: {
    name: "Composite",
    className: "ComputeNodeEnableSchedulingHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      },
      dataServiceId: {
        type: { name: "String" },
        serializedName: "dataserviceid"
      }
    }
  }
};

export const ComputeNodeGetRemoteLoginSettingsHeaders: coreHttp.CompositeMapper = {
  serializedName: "computeNode_getRemoteLoginSettingsHeaders",
  type: {
    name: "Composite",
    className: "ComputeNodeGetRemoteLoginSettingsHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const ComputeNodeGetRemoteDesktopHeaders: coreHttp.CompositeMapper = {
  serializedName: "computeNode_getRemoteDesktopHeaders",
  type: {
    name: "Composite",
    className: "ComputeNodeGetRemoteDesktopHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const ComputeNodeUploadBatchServiceLogsHeaders: coreHttp.CompositeMapper = {
  serializedName: "computeNode_uploadBatchServiceLogsHeaders",
  type: {
    name: "Composite",
    className: "ComputeNodeUploadBatchServiceLogsHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" }
    }
  }
};

export const ComputeNodeListHeaders: coreHttp.CompositeMapper = {
  serializedName: "computeNode_listHeaders",
  type: {
    name: "Composite",
    className: "ComputeNodeListHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};

export const ComputeNodeListNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "computeNode_listNextHeaders",
  type: {
    name: "Composite",
    className: "ComputeNodeListNextHeaders",
    modelProperties: {
      clientRequestId: {
        type: { name: "Uuid" },
        serializedName: "client-request-id"
      },
      requestId: { type: { name: "Uuid" }, serializedName: "request-id" },
      eTag: { type: { name: "String" }, serializedName: "etag" },
      lastModified: {
        type: { name: "DateTimeRfc1123" },
        serializedName: "last-modified"
      }
    }
  }
};
