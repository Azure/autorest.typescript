/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const body: OperationParameter = {
  parameterPath: ["parameterGroupingPostRequiredParameters", "body"],
  mapper: {
    serializedName: "body",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const customHeader: OperationParameter = {
  parameterPath: ["parameterGroupingPostRequiredParameters", "customHeader"],
  mapper: {
    serializedName: "customHeader",
    type: {
      name: "String"
    }
  }
};

export const query: OperationQueryParameter = {
  parameterPath: ["parameterGroupingPostRequiredParameters", "query"],
  mapper: {
    defaultValue: 30,
    serializedName: "query",
    type: {
      name: "Number"
    }
  }
};

export const path: OperationURLParameter = {
  parameterPath: ["parameterGroupingPostRequiredParameters", "path"],
  mapper: {
    serializedName: "path",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const customHeader1: OperationParameter = {
  parameterPath: [
    "options",
    "parameterGroupingPostOptionalParameters",
    "customHeader"
  ],
  mapper: {
    serializedName: "customHeader",
    type: {
      name: "String"
    }
  }
};

export const query1: OperationQueryParameter = {
  parameterPath: [
    "options",
    "parameterGroupingPostOptionalParameters",
    "query"
  ],
  mapper: {
    defaultValue: 30,
    serializedName: "query",
    type: {
      name: "Number"
    }
  }
};

export const fromParam: OperationQueryParameter = {
  parameterPath: [
    "options",
    "parameterGroupingPostReservedWordsParameters",
    "from"
  ],
  mapper: {
    serializedName: "from",
    type: {
      name: "String"
    }
  }
};

export const accept1: OperationQueryParameter = {
  parameterPath: [
    "options",
    "parameterGroupingPostReservedWordsParameters",
    "accept"
  ],
  mapper: {
    serializedName: "accept",
    type: {
      name: "String"
    }
  }
};

export const headerOne: OperationParameter = {
  parameterPath: ["options", "firstParameterGroup", "headerOne"],
  mapper: {
    serializedName: "header-one",
    type: {
      name: "String"
    }
  }
};

export const queryOne: OperationQueryParameter = {
  parameterPath: ["options", "firstParameterGroup", "queryOne"],
  mapper: {
    defaultValue: 30,
    serializedName: "query-one",
    type: {
      name: "Number"
    }
  }
};

export const headerTwo: OperationParameter = {
  parameterPath: [
    "options",
    "parameterGroupingPostMultiParamGroupsSecondParamGroup",
    "headerTwo"
  ],
  mapper: {
    serializedName: "header-two",
    type: {
      name: "String"
    }
  }
};

export const queryTwo: OperationQueryParameter = {
  parameterPath: [
    "options",
    "parameterGroupingPostMultiParamGroupsSecondParamGroup",
    "queryTwo"
  ],
  mapper: {
    defaultValue: 30,
    serializedName: "query-two",
    type: {
      name: "Number"
    }
  }
};

export const groupedConstant: OperationParameter = {
  parameterPath: ["options", "grouper", "groupedConstant"],
  mapper: {
    defaultValue: "foo",
    isConstant: true,
    serializedName: "groupedConstant",
    type: {
      name: "String"
    }
  }
};

export const groupedParameter: OperationParameter = {
  parameterPath: ["options", "grouper", "groupedParameter"],
  mapper: {
    serializedName: "groupedParameter",
    type: {
      name: "String"
    }
  }
};
