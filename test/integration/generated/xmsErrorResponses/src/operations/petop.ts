/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { XmsErrorResponsesClient } from "../xmsErrorResponsesClient";
import {
  PetopGetPetByIdResponse,
  PetopDoSomethingResponse,
  PetopHasModelsParamOptionalParams
} from "../models";

/**
 * Class representing a Petop.
 */
export class Petop {
  private readonly client: XmsErrorResponsesClient;

  /**
   * Initialize a new instance of the class Petop class.
   * @param client Reference to the service client
   */
  constructor(client: XmsErrorResponsesClient) {
    this.client = client;
  }

  /**
   * Gets pets by id.
   * @param petId pet id
   * @param options The options parameters.
   */
  getPetById(
    petId: string,
    options?: coreHttp.OperationOptions
  ): Promise<PetopGetPetByIdResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      petId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getPetByIdOperationSpec
    ) as Promise<PetopGetPetByIdResponse>;
  }

  /**
   * Asks pet to do something
   * @param whatAction what action the pet should do
   * @param options The options parameters.
   */
  doSomething(
    whatAction: string,
    options?: coreHttp.OperationOptions
  ): Promise<PetopDoSomethingResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      whatAction,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      doSomethingOperationSpec
    ) as Promise<PetopDoSomethingResponse>;
  }

  /**
   * Ensure you can correctly deserialize the returned PetActionError and deserialization doesn't
   * conflict with the input param name 'models'
   * @param options The options parameters.
   */
  hasModelsParam(
    options?: PetopHasModelsParamOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      hasModelsParamOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getPetByIdOperationSpec: coreHttp.OperationSpec = {
  path: "/errorStatusCodes/Pets/{petId}/GetPet",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Pet
    },
    202: {},
    400: {
      bodyMapper: { type: { name: "String" } },
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundErrorBase,
      isError: true
    },
    501: {
      bodyMapper: { type: { name: "Number" } },
      isError: true
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.petId],
  headerParameters: [Parameters.accept],
  serializer
};
const doSomethingOperationSpec: coreHttp.OperationSpec = {
  path: "/errorStatusCodes/Pets/doSomething/{whatAction}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PetAction
    },
    500: {
      bodyMapper: Mappers.PetActionError,
      isError: true
    },
    default: {
      bodyMapper: Mappers.PetActionError
    }
  },
  urlParameters: [Parameters.$host, Parameters.whatAction],
  headerParameters: [Parameters.accept],
  serializer
};
const hasModelsParamOperationSpec: coreHttp.OperationSpec = {
  path: "/errorStatusCodes/Pets/hasModelsParam",
  httpMethod: "POST",
  responses: {
    200: {},
    500: {
      bodyMapper: Mappers.PetActionError,
      isError: true
    },
    default: {
      bodyMapper: Mappers.PetActionError
    }
  },
  queryParameters: [Parameters.models],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
