/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PagingClient } from "../pagingClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  Product,
  PagingGetMultiplePagesOptionalParams,
  PagingGetOdataMultiplePagesOptionalParams,
  PagingGetMultiplePagesWithOffsetOptions,
  PagingGetMultiplePagesWithOffsetOptionalParams,
  CustomParameterGroup,
  PagingGetMultiplePagesLROOptionalParams,
  PagingGetMultiplePagesNextOptionalParams,
  PagingGetOdataMultiplePagesNextOptionalParams,
  PagingGetMultiplePagesWithOffsetNextOptionalParams,
  PagingGetMultiplePagesLRONextOptionalParams,
  PagingGetNoItemNamePagesResponse,
  PagingGetNullNextLinkNamePagesResponse,
  PagingGetSinglePagesResponse,
  PagingGetMultiplePagesResponse,
  PagingGetWithQueryParamsResponse,
  PagingNextOperationWithQueryParamsResponse,
  PagingGetOdataMultiplePagesResponse,
  PagingGetMultiplePagesWithOffsetResponse,
  PagingGetMultiplePagesRetryFirstResponse,
  PagingGetMultiplePagesRetrySecondResponse,
  PagingGetSinglePagesFailureResponse,
  PagingGetMultiplePagesFailureResponse,
  PagingGetMultiplePagesFailureUriResponse,
  PagingGetMultiplePagesFragmentNextLinkResponse,
  PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse,
  PagingGetMultiplePagesLROResponse,
  PagingNextFragmentResponse,
  PagingNextFragmentWithGroupingResponse,
  PagingGetPagingModelWithItemNameWithXMSClientNameResponse,
  PagingGetSinglePagesNextResponse,
  PagingGetMultiplePagesNextResponse,
  PagingGetOdataMultiplePagesNextResponse,
  PagingGetMultiplePagesWithOffsetNextResponse,
  PagingGetMultiplePagesRetryFirstNextResponse,
  PagingGetMultiplePagesRetrySecondNextResponse,
  PagingGetSinglePagesFailureNextResponse,
  PagingGetMultiplePagesFailureNextResponse,
  PagingGetMultiplePagesFailureUriNextResponse,
  PagingGetMultiplePagesLRONextResponse,
  PagingGetPagingModelWithItemNameWithXMSClientNameNextResponse
} from "../models";

/**
 * Class representing a Paging.
 */
export class Paging {
  private readonly client: PagingClient;

  /**
   * Initialize a new instance of the class Paging class.
   * @param client Reference to the service client
   */
  constructor(client: PagingClient) {
    this.client = client;
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   * @param options The options parameters.
   */
  private getSinglePages(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getSinglePagesAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getSinglePagesPage(options);
      }
    };
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   * @param options The options parameters.
   */
  private async *getSinglePagesPage(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getSinglePages(options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getSinglePagesNext(result.nextLink, options);
    }
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   * @param options The options parameters.
   */
  private async *getSinglePagesAll(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getSinglePagesNext(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private getMultiplePages(
    options?: PagingGetMultiplePagesOptionalParams
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesPage(options);
      }
    };
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private async *getMultiplePagesPage(
    options?: PagingGetMultiplePagesOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePages(options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesNext(result.nextLink, options);
    }
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private async *getMultiplePagesAll(
    options?: PagingGetMultiplePagesOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesNext(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that includes a next operation. It has a different query parameter from it's next
   * operation nextOperationWithQueryParams. Returns a ProductResult
   * @param requiredQueryParameter A required integer query parameter. Put in value '100' to pass test.
   * @param options The options parameters.
   */
  private getWithQueryParams(
    requiredQueryParameter: number,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getWithQueryParamsAll(requiredQueryParameter, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getWithQueryParamsPage(requiredQueryParameter, options);
      }
    };
  }

  /**
   * A paging operation that includes a next operation. It has a different query parameter from it's next
   * operation nextOperationWithQueryParams. Returns a ProductResult
   * @param requiredQueryParameter A required integer query parameter. Put in value '100' to pass test.
   * @param options The options parameters.
   */
  private async *getWithQueryParamsPage(
    requiredQueryParameter: number,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getWithQueryParams(
      requiredQueryParameter,
      options
    );
    yield result.values || [];
    while (result.nextLink) {
      result = await this._nextOperationWithQueryParams(
        result.nextLink,
        requiredQueryParameter,
        options
      );
    }
  }

  /**
   * A paging operation that includes a next operation. It has a different query parameter from it's next
   * operation nextOperationWithQueryParams. Returns a ProductResult
   * @param requiredQueryParameter A required integer query parameter. Put in value '100' to pass test.
   * @param options The options parameters.
   */
  private async *getWithQueryParamsAll(
    requiredQueryParameter: number,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._nextOperationWithQueryParams(
      requiredQueryParameter,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   * @param options The options parameters.
   */
  private getOdataMultiplePages(
    options?: PagingGetOdataMultiplePagesOptionalParams
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getOdataMultiplePagesAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getOdataMultiplePagesPage(options);
      }
    };
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   * @param options The options parameters.
   */
  private async *getOdataMultiplePagesPage(
    options?: PagingGetOdataMultiplePagesOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getOdataMultiplePages(options);
    yield result.values || [];
    while (result.odata.nextLink) {
      result = await this._getOdataMultiplePagesNext(
        result.odata.nextLink,
        options
      );
    }
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   * @param options The options parameters.
   */
  private async *getOdataMultiplePagesAll(
    options?: PagingGetOdataMultiplePagesOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getOdataMultiplePagesNext(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param pagingGetMultiplePagesWithOffsetOptions Parameter group
   * @param options The options parameters.
   */
  private getMultiplePagesWithOffset(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    options?: PagingGetMultiplePagesWithOffsetOptionalParams
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesWithOffsetAll(
      pagingGetMultiplePagesWithOffsetOptions,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesWithOffsetPage(
          pagingGetMultiplePagesWithOffsetOptions,
          options
        );
      }
    };
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param pagingGetMultiplePagesWithOffsetOptions Parameter group
   * @param options The options parameters.
   */
  private async *getMultiplePagesWithOffsetPage(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    options?: PagingGetMultiplePagesWithOffsetOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesWithOffset(
      pagingGetMultiplePagesWithOffsetOptions,
      options
    );
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesWithOffsetNext(
        result.nextLink,
        pagingGetMultiplePagesWithOffsetOptions,
        options
      );
    }
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param pagingGetMultiplePagesWithOffsetOptions Parameter group
   * @param options The options parameters.
   */
  private async *getMultiplePagesWithOffsetAll(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    options?: PagingGetMultiplePagesWithOffsetOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesWithOffsetNext(
      pagingGetMultiplePagesWithOffsetOptions,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a response
   * including a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private getMultiplePagesRetryFirst(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesRetryFirstAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesRetryFirstPage(options);
      }
    };
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a response
   * including a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private async *getMultiplePagesRetryFirstPage(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesRetryFirst(options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesRetryFirstNext(
        result.nextLink,
        options
      );
    }
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a response
   * including a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private async *getMultiplePagesRetryFirstAll(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesRetryFirstNext(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   * @param options The options parameters.
   */
  private getMultiplePagesRetrySecond(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesRetrySecondAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesRetrySecondPage(options);
      }
    };
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   * @param options The options parameters.
   */
  private async *getMultiplePagesRetrySecondPage(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesRetrySecond(options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesRetrySecondNext(
        result.nextLink,
        options
      );
    }
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   * @param options The options parameters.
   */
  private async *getMultiplePagesRetrySecondAll(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesRetrySecondNext(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that receives a 400 on the first call
   * @param options The options parameters.
   */
  private getSinglePagesFailure(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getSinglePagesFailureAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getSinglePagesFailurePage(options);
      }
    };
  }

  /**
   * A paging operation that receives a 400 on the first call
   * @param options The options parameters.
   */
  private async *getSinglePagesFailurePage(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getSinglePagesFailure(options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getSinglePagesFailureNext(result.nextLink, options);
    }
  }

  /**
   * A paging operation that receives a 400 on the first call
   * @param options The options parameters.
   */
  private async *getSinglePagesFailureAll(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getSinglePagesFailureNext(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that receives a 400 on the second call
   * @param options The options parameters.
   */
  private getMultiplePagesFailure(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesFailureAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesFailurePage(options);
      }
    };
  }

  /**
   * A paging operation that receives a 400 on the second call
   * @param options The options parameters.
   */
  private async *getMultiplePagesFailurePage(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesFailure(options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesFailureNext(
        result.nextLink,
        options
      );
    }
  }

  /**
   * A paging operation that receives a 400 on the second call
   * @param options The options parameters.
   */
  private async *getMultiplePagesFailureAll(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesFailureNext(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that receives an invalid nextLink
   * @param options The options parameters.
   */
  private getMultiplePagesFailureUri(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesFailureUriAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesFailureUriPage(options);
      }
    };
  }

  /**
   * A paging operation that receives an invalid nextLink
   * @param options The options parameters.
   */
  private async *getMultiplePagesFailureUriPage(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesFailureUri(options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesFailureUriNext(
        result.nextLink,
        options
      );
    }
  }

  /**
   * A paging operation that receives an invalid nextLink
   * @param options The options parameters.
   */
  private async *getMultiplePagesFailureUriAll(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesFailureUriNext(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param options The options parameters.
   */
  private getMultiplePagesFragmentNextLink(
    apiVersion: string,
    tenant: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesFragmentNextLinkAll(
      apiVersion,
      tenant,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesFragmentNextLinkPage(
          apiVersion,
          tenant,
          options
        );
      }
    };
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param options The options parameters.
   */
  private async *getMultiplePagesFragmentNextLinkPage(
    apiVersion: string,
    tenant: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesFragmentNextLink(
      apiVersion,
      tenant,
      options
    );
    yield result.values || [];
    while (result.odata.nextLink) {
      result = await this._nextFragment(
        result.odata.nextLink,
        apiVersion,
        tenant,
        options
      );
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param options The options parameters.
   */
  private async *getMultiplePagesFragmentNextLinkAll(
    apiVersion: string,
    tenant: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._nextFragment(apiVersion, tenant, options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment with parameters grouped
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  private getMultiplePagesFragmentWithGroupingNextLink(
    customParameterGroup: CustomParameterGroup,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesFragmentWithGroupingNextLinkAll(
      customParameterGroup,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesFragmentWithGroupingNextLinkPage(
          customParameterGroup,
          options
        );
      }
    };
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment with parameters grouped
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  private async *getMultiplePagesFragmentWithGroupingNextLinkPage(
    customParameterGroup: CustomParameterGroup,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesFragmentWithGroupingNextLink(
      customParameterGroup,
      options
    );
    yield result.values || [];
    while (result.odata.nextLink) {
      result = await this._nextFragmentWithGrouping(
        result.odata.nextLink,
        customParameterGroup,
        options
      );
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment with parameters grouped
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  private async *getMultiplePagesFragmentWithGroupingNextLinkAll(
    customParameterGroup: CustomParameterGroup,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._nextFragmentWithGrouping(
      customParameterGroup,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private getMultiplePagesLRO(
    options?: PagingGetMultiplePagesLROOptionalParams
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesLROAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesLROPage(options);
      }
    };
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private async *getMultiplePagesLROPage(
    options?: PagingGetMultiplePagesLROOptionalParams
  ): AsyncIterableIterator<Product[]> {
    const poller = await this._getMultiplePagesLRO(options);
    let result = await poller.pollUntilDone();
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesLRONext(result.nextLink, options);
    }
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private async *getMultiplePagesLROAll(
    options?: PagingGetMultiplePagesLROOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesLRONext(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param nextLink Next link for list operation.
   * @param options The options parameters.
   */
  private nextFragment(
    apiVersion: string,
    tenant: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.nextFragmentAll(apiVersion, tenant, nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.nextFragmentPage(apiVersion, tenant, nextLink, options);
      }
    };
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param nextLink Next link for list operation.
   * @param options The options parameters.
   */
  private async *nextFragmentPage(
    apiVersion: string,
    tenant: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._nextFragment(
      apiVersion,
      tenant,
      nextLink,
      options
    );
    yield result.values || [];
    while (result.odata.nextLink) {
      result = await this._nextFragment(
        result.odata.nextLink,
        apiVersion,
        tenant,
        nextLink,
        options
      );
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param nextLink Next link for list operation.
   * @param options The options parameters.
   */
  private async *nextFragmentAll(
    apiVersion: string,
    tenant: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._nextFragment(
      apiVersion,
      tenant,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param nextLink Next link for list operation.
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  private nextFragmentWithGrouping(
    nextLink: string,
    customParameterGroup: CustomParameterGroup,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.nextFragmentWithGroupingAll(
      nextLink,
      customParameterGroup,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.nextFragmentWithGroupingPage(
          nextLink,
          customParameterGroup,
          options
        );
      }
    };
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param nextLink Next link for list operation.
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  private async *nextFragmentWithGroupingPage(
    nextLink: string,
    customParameterGroup: CustomParameterGroup,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._nextFragmentWithGrouping(
      nextLink,
      customParameterGroup,
      options
    );
    yield result.values || [];
    while (result.odata.nextLink) {
      result = await this._nextFragmentWithGrouping(
        result.odata.nextLink,
        nextLink,
        customParameterGroup,
        options
      );
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param nextLink Next link for list operation.
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  private async *nextFragmentWithGroupingAll(
    nextLink: string,
    customParameterGroup: CustomParameterGroup,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._nextFragmentWithGrouping(
      nextLink,
      customParameterGroup,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that returns a paging model whose item name is is overriden by x-ms-client-name
   * 'indexes'.
   * @param options The options parameters.
   */
  private getPagingModelWithItemNameWithXMSClientName(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getPagingModelWithItemNameWithXMSClientNameAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getPagingModelWithItemNameWithXMSClientNamePage(options);
      }
    };
  }

  /**
   * A paging operation that returns a paging model whose item name is is overriden by x-ms-client-name
   * 'indexes'.
   * @param options The options parameters.
   */
  private async *getPagingModelWithItemNameWithXMSClientNamePage(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getPagingModelWithItemNameWithXMSClientName(
      options
    );
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getPagingModelWithItemNameWithXMSClientNameNext(
        result.nextLink,
        options
      );
    }
  }

  /**
   * A paging operation that returns a paging model whose item name is is overriden by x-ms-client-name
   * 'indexes'.
   * @param options The options parameters.
   */
  private async *getPagingModelWithItemNameWithXMSClientNameAll(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getPagingModelWithItemNameWithXMSClientNameNext(
      options
    )) {
      yield* page;
    }
  }

  /**
   * GetSinglePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetSinglePages method.
   * @param options The options parameters.
   */
  private getSinglePagesNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getSinglePagesNextAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getSinglePagesNextPage(nextLink, options);
      }
    };
  }

  /**
   * GetSinglePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetSinglePages method.
   * @param options The options parameters.
   */
  private async *getSinglePagesNextPage(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getSinglePagesNext(nextLink, options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getSinglePagesNextNext(
        result.nextLink,
        nextLink,
        options
      );
    }
  }

  /**
   * GetSinglePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetSinglePages method.
   * @param options The options parameters.
   */
  private async *getSinglePagesNextAll(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getSinglePagesNextNext(nextLink, options)) {
      yield* page;
    }
  }

  /**
   * GetMultiplePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePages method.
   * @param options The options parameters.
   */
  private getMultiplePagesNext(
    nextLink: string,
    options?: PagingGetMultiplePagesNextOptionalParams
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesNextAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesNextPage(nextLink, options);
      }
    };
  }

  /**
   * GetMultiplePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePages method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesNextPage(
    nextLink: string,
    options?: PagingGetMultiplePagesNextOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesNext(nextLink, options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesNextNext(
        result.nextLink,
        nextLink,
        options
      );
    }
  }

  /**
   * GetMultiplePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePages method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesNextAll(
    nextLink: string,
    options?: PagingGetMultiplePagesNextOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesNextNext(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * GetOdataMultiplePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetOdataMultiplePages method.
   * @param options The options parameters.
   */
  private getOdataMultiplePagesNext(
    nextLink: string,
    options?: PagingGetOdataMultiplePagesNextOptionalParams
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getOdataMultiplePagesNextAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getOdataMultiplePagesNextPage(nextLink, options);
      }
    };
  }

  /**
   * GetOdataMultiplePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetOdataMultiplePages method.
   * @param options The options parameters.
   */
  private async *getOdataMultiplePagesNextPage(
    nextLink: string,
    options?: PagingGetOdataMultiplePagesNextOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getOdataMultiplePagesNext(nextLink, options);
    yield result.values || [];
    while (result.odata.nextLink) {
      result = await this._getOdataMultiplePagesNextNext(
        result.odata.nextLink,
        nextLink,
        options
      );
    }
  }

  /**
   * GetOdataMultiplePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetOdataMultiplePages method.
   * @param options The options parameters.
   */
  private async *getOdataMultiplePagesNextAll(
    nextLink: string,
    options?: PagingGetOdataMultiplePagesNextOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getOdataMultiplePagesNextNext(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * GetMultiplePagesWithOffsetNext
   * @param pagingGetMultiplePagesWithOffsetOptions Parameter group
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesWithOffset
   *                 method.
   * @param options The options parameters.
   */
  private getMultiplePagesWithOffsetNext(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    nextLink: string,
    options?: PagingGetMultiplePagesWithOffsetNextOptionalParams
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesWithOffsetNextAll(
      pagingGetMultiplePagesWithOffsetOptions,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesWithOffsetNextPage(
          pagingGetMultiplePagesWithOffsetOptions,
          nextLink,
          options
        );
      }
    };
  }

  /**
   * GetMultiplePagesWithOffsetNext
   * @param pagingGetMultiplePagesWithOffsetOptions Parameter group
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesWithOffset
   *                 method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesWithOffsetNextPage(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    nextLink: string,
    options?: PagingGetMultiplePagesWithOffsetNextOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesWithOffsetNext(
      pagingGetMultiplePagesWithOffsetOptions,
      nextLink,
      options
    );
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesWithOffsetNextNext(
        result.nextLink,
        pagingGetMultiplePagesWithOffsetOptions,
        nextLink,
        options
      );
    }
  }

  /**
   * GetMultiplePagesWithOffsetNext
   * @param pagingGetMultiplePagesWithOffsetOptions Parameter group
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesWithOffset
   *                 method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesWithOffsetNextAll(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    nextLink: string,
    options?: PagingGetMultiplePagesWithOffsetNextOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesWithOffsetNextNext(
      pagingGetMultiplePagesWithOffsetOptions,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * GetMultiplePagesRetryFirstNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesRetryFirst
   *                 method.
   * @param options The options parameters.
   */
  private getMultiplePagesRetryFirstNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesRetryFirstNextAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesRetryFirstNextPage(nextLink, options);
      }
    };
  }

  /**
   * GetMultiplePagesRetryFirstNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesRetryFirst
   *                 method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesRetryFirstNextPage(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesRetryFirstNext(nextLink, options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesRetryFirstNextNext(
        result.nextLink,
        nextLink,
        options
      );
    }
  }

  /**
   * GetMultiplePagesRetryFirstNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesRetryFirst
   *                 method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesRetryFirstNextAll(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesRetryFirstNextNext(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * GetMultiplePagesRetrySecondNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesRetrySecond
   *                 method.
   * @param options The options parameters.
   */
  private getMultiplePagesRetrySecondNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesRetrySecondNextAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesRetrySecondNextPage(nextLink, options);
      }
    };
  }

  /**
   * GetMultiplePagesRetrySecondNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesRetrySecond
   *                 method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesRetrySecondNextPage(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesRetrySecondNext(nextLink, options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesRetrySecondNextNext(
        result.nextLink,
        nextLink,
        options
      );
    }
  }

  /**
   * GetMultiplePagesRetrySecondNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesRetrySecond
   *                 method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesRetrySecondNextAll(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesRetrySecondNextNext(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * GetSinglePagesFailureNext
   * @param nextLink The nextLink from the previous successful call to the GetSinglePagesFailure method.
   * @param options The options parameters.
   */
  private getSinglePagesFailureNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getSinglePagesFailureNextAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getSinglePagesFailureNextPage(nextLink, options);
      }
    };
  }

  /**
   * GetSinglePagesFailureNext
   * @param nextLink The nextLink from the previous successful call to the GetSinglePagesFailure method.
   * @param options The options parameters.
   */
  private async *getSinglePagesFailureNextPage(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getSinglePagesFailureNext(nextLink, options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getSinglePagesFailureNextNext(
        result.nextLink,
        nextLink,
        options
      );
    }
  }

  /**
   * GetSinglePagesFailureNext
   * @param nextLink The nextLink from the previous successful call to the GetSinglePagesFailure method.
   * @param options The options parameters.
   */
  private async *getSinglePagesFailureNextAll(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getSinglePagesFailureNextNext(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * GetMultiplePagesFailureNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesFailure
   *                 method.
   * @param options The options parameters.
   */
  private getMultiplePagesFailureNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesFailureNextAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesFailureNextPage(nextLink, options);
      }
    };
  }

  /**
   * GetMultiplePagesFailureNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesFailure
   *                 method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesFailureNextPage(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesFailureNext(nextLink, options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesFailureNextNext(
        result.nextLink,
        nextLink,
        options
      );
    }
  }

  /**
   * GetMultiplePagesFailureNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesFailure
   *                 method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesFailureNextAll(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesFailureNextNext(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * GetMultiplePagesFailureUriNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesFailureUri
   *                 method.
   * @param options The options parameters.
   */
  private getMultiplePagesFailureUriNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesFailureUriNextAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesFailureUriNextPage(nextLink, options);
      }
    };
  }

  /**
   * GetMultiplePagesFailureUriNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesFailureUri
   *                 method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesFailureUriNextPage(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesFailureUriNext(nextLink, options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesFailureUriNextNext(
        result.nextLink,
        nextLink,
        options
      );
    }
  }

  /**
   * GetMultiplePagesFailureUriNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesFailureUri
   *                 method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesFailureUriNextAll(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesFailureUriNextNext(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * GetMultiplePagesLRONext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesLRO method.
   * @param options The options parameters.
   */
  private getMultiplePagesLRONext(
    nextLink: string,
    options?: PagingGetMultiplePagesLRONextOptionalParams
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getMultiplePagesLRONextAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getMultiplePagesLRONextPage(nextLink, options);
      }
    };
  }

  /**
   * GetMultiplePagesLRONext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesLRO method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesLRONextPage(
    nextLink: string,
    options?: PagingGetMultiplePagesLRONextOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesLRONext(nextLink, options);
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getMultiplePagesLRONextNext(
        result.nextLink,
        nextLink,
        options
      );
    }
  }

  /**
   * GetMultiplePagesLRONext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesLRO method.
   * @param options The options parameters.
   */
  private async *getMultiplePagesLRONextAll(
    nextLink: string,
    options?: PagingGetMultiplePagesLRONextOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getMultiplePagesLRONextNext(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * GetPagingModelWithItemNameWithXMSClientNameNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetPagingModelWithItemNameWithXMSClientName method.
   * @param options The options parameters.
   */
  private getPagingModelWithItemNameWithXMSClientNameNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Product, Product[]> {
    const iter = this.getPagingModelWithItemNameWithXMSClientNameNextAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings) => {
        return this.getPagingModelWithItemNameWithXMSClientNameNextPage(
          nextLink,
          options
        );
      }
    };
  }

  /**
   * GetPagingModelWithItemNameWithXMSClientNameNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetPagingModelWithItemNameWithXMSClientName method.
   * @param options The options parameters.
   */
  private async *getPagingModelWithItemNameWithXMSClientNameNextPage(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getPagingModelWithItemNameWithXMSClientNameNext(
      nextLink,
      options
    );
    yield result.values || [];
    while (result.nextLink) {
      result = await this._getPagingModelWithItemNameWithXMSClientNameNextNext(
        result.nextLink,
        nextLink,
        options
      );
    }
  }

  /**
   * GetPagingModelWithItemNameWithXMSClientNameNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetPagingModelWithItemNameWithXMSClientName method.
   * @param options The options parameters.
   */
  private async *getPagingModelWithItemNameWithXMSClientNameNextAll(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Product> {
    for await (const page of this._getPagingModelWithItemNameWithXMSClientNameNextNext(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that must return result of the default 'value' node.
   * @param options The options parameters.
   */
  undefinedgetNoItemNamePages(
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetNoItemNamePagesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getNoItemNamePagesOperationSpec
    ) as Promise<PagingGetNoItemNamePagesResponse>;
  }

  /**
   * A paging operation that must ignore any kind of nextLink, and stop after page 1.
   * @param options The options parameters.
   */
  private _getNullNextLinkNamePages(
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetNullNextLinkNamePagesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getNullNextLinkNamePagesOperationSpec
    ) as Promise<PagingGetNullNextLinkNamePagesResponse>;
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   * @param options The options parameters.
   */
  private _getSinglePages(
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetSinglePagesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getSinglePagesOperationSpec
    ) as Promise<PagingGetSinglePagesResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private _getMultiplePages(
    options?: PagingGetMultiplePagesOptionalParams
  ): Promise<PagingGetMultiplePagesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesOperationSpec
    ) as Promise<PagingGetMultiplePagesResponse>;
  }

  /**
   * A paging operation that includes a next operation. It has a different query parameter from it's next
   * operation nextOperationWithQueryParams. Returns a ProductResult
   * @param requiredQueryParameter A required integer query parameter. Put in value '100' to pass test.
   * @param options The options parameters.
   */
  private _getWithQueryParams(
    requiredQueryParameter: number,
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetWithQueryParamsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      requiredQueryParameter,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getWithQueryParamsOperationSpec
    ) as Promise<PagingGetWithQueryParamsResponse>;
  }

  /**
   * Next operation for getWithQueryParams. Pass in next=True to pass test. Returns a ProductResult
   * @param options The options parameters.
   */
  private _nextOperationWithQueryParams(
    options?: coreHttp.OperationOptions
  ): Promise<PagingNextOperationWithQueryParamsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      nextOperationWithQueryParamsOperationSpec
    ) as Promise<PagingNextOperationWithQueryParamsResponse>;
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   * @param options The options parameters.
   */
  private _getOdataMultiplePages(
    options?: PagingGetOdataMultiplePagesOptionalParams
  ): Promise<PagingGetOdataMultiplePagesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOdataMultiplePagesOperationSpec
    ) as Promise<PagingGetOdataMultiplePagesResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param pagingGetMultiplePagesWithOffsetOptions Parameter group
   * @param options The options parameters.
   */
  private _getMultiplePagesWithOffset(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    options?: PagingGetMultiplePagesWithOffsetOptionalParams
  ): Promise<PagingGetMultiplePagesWithOffsetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      pagingGetMultiplePagesWithOffsetOptions,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesWithOffsetOperationSpec
    ) as Promise<PagingGetMultiplePagesWithOffsetResponse>;
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a response
   * including a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private _getMultiplePagesRetryFirst(
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetMultiplePagesRetryFirstResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesRetryFirstOperationSpec
    ) as Promise<PagingGetMultiplePagesRetryFirstResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   * @param options The options parameters.
   */
  private _getMultiplePagesRetrySecond(
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetMultiplePagesRetrySecondResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesRetrySecondOperationSpec
    ) as Promise<PagingGetMultiplePagesRetrySecondResponse>;
  }

  /**
   * A paging operation that receives a 400 on the first call
   * @param options The options parameters.
   */
  private _getSinglePagesFailure(
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetSinglePagesFailureResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getSinglePagesFailureOperationSpec
    ) as Promise<PagingGetSinglePagesFailureResponse>;
  }

  /**
   * A paging operation that receives a 400 on the second call
   * @param options The options parameters.
   */
  private _getMultiplePagesFailure(
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetMultiplePagesFailureResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesFailureOperationSpec
    ) as Promise<PagingGetMultiplePagesFailureResponse>;
  }

  /**
   * A paging operation that receives an invalid nextLink
   * @param options The options parameters.
   */
  private _getMultiplePagesFailureUri(
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetMultiplePagesFailureUriResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesFailureUriOperationSpec
    ) as Promise<PagingGetMultiplePagesFailureUriResponse>;
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param options The options parameters.
   */
  private _getMultiplePagesFragmentNextLink(
    apiVersion: string,
    tenant: string,
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetMultiplePagesFragmentNextLinkResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      apiVersion,
      tenant,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesFragmentNextLinkOperationSpec
    ) as Promise<PagingGetMultiplePagesFragmentNextLinkResponse>;
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment with parameters grouped
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  private _getMultiplePagesFragmentWithGroupingNextLink(
    customParameterGroup: CustomParameterGroup,
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      customParameterGroup,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesFragmentWithGroupingNextLinkOperationSpec
    ) as Promise<PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse>;
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private async _getMultiplePagesLRO(
    options?: PagingGetMultiplePagesLROOptionalParams
  ): Promise<LROPoller<PagingGetMultiplePagesLROResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        PagingGetMultiplePagesLROResponse
      >;
    const initialOperationResult = await sendOperation(
      operationArguments,
      getMultiplePagesLROOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: getMultiplePagesLROOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param nextLink Next link for list operation.
   * @param options The options parameters.
   */
  private _nextFragment(
    apiVersion: string,
    tenant: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<PagingNextFragmentResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      apiVersion,
      tenant,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      nextFragmentOperationSpec
    ) as Promise<PagingNextFragmentResponse>;
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param nextLink Next link for list operation.
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  private _nextFragmentWithGrouping(
    nextLink: string,
    customParameterGroup: CustomParameterGroup,
    options?: coreHttp.OperationOptions
  ): Promise<PagingNextFragmentWithGroupingResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      customParameterGroup,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      nextFragmentWithGroupingOperationSpec
    ) as Promise<PagingNextFragmentWithGroupingResponse>;
  }

  /**
   * A paging operation that returns a paging model whose item name is is overriden by x-ms-client-name
   * 'indexes'.
   * @param options The options parameters.
   */
  private _getPagingModelWithItemNameWithXMSClientName(
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetPagingModelWithItemNameWithXMSClientNameResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getPagingModelWithItemNameWithXMSClientNameOperationSpec
    ) as Promise<PagingGetPagingModelWithItemNameWithXMSClientNameResponse>;
  }

  /**
   * GetSinglePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetSinglePages method.
   * @param options The options parameters.
   */
  private _getSinglePagesNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetSinglePagesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getSinglePagesNextOperationSpec
    ) as Promise<PagingGetSinglePagesNextResponse>;
  }

  /**
   * GetMultiplePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePages method.
   * @param options The options parameters.
   */
  private _getMultiplePagesNext(
    nextLink: string,
    options?: PagingGetMultiplePagesNextOptionalParams
  ): Promise<PagingGetMultiplePagesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesNextOperationSpec
    ) as Promise<PagingGetMultiplePagesNextResponse>;
  }

  /**
   * GetOdataMultiplePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetOdataMultiplePages method.
   * @param options The options parameters.
   */
  private _getOdataMultiplePagesNext(
    nextLink: string,
    options?: PagingGetOdataMultiplePagesNextOptionalParams
  ): Promise<PagingGetOdataMultiplePagesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOdataMultiplePagesNextOperationSpec
    ) as Promise<PagingGetOdataMultiplePagesNextResponse>;
  }

  /**
   * GetMultiplePagesWithOffsetNext
   * @param pagingGetMultiplePagesWithOffsetOptions Parameter group
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesWithOffset
   *                 method.
   * @param options The options parameters.
   */
  private _getMultiplePagesWithOffsetNext(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    nextLink: string,
    options?: PagingGetMultiplePagesWithOffsetNextOptionalParams
  ): Promise<PagingGetMultiplePagesWithOffsetNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      pagingGetMultiplePagesWithOffsetOptions,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesWithOffsetNextOperationSpec
    ) as Promise<PagingGetMultiplePagesWithOffsetNextResponse>;
  }

  /**
   * GetMultiplePagesRetryFirstNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesRetryFirst
   *                 method.
   * @param options The options parameters.
   */
  private _getMultiplePagesRetryFirstNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetMultiplePagesRetryFirstNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesRetryFirstNextOperationSpec
    ) as Promise<PagingGetMultiplePagesRetryFirstNextResponse>;
  }

  /**
   * GetMultiplePagesRetrySecondNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesRetrySecond
   *                 method.
   * @param options The options parameters.
   */
  private _getMultiplePagesRetrySecondNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetMultiplePagesRetrySecondNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesRetrySecondNextOperationSpec
    ) as Promise<PagingGetMultiplePagesRetrySecondNextResponse>;
  }

  /**
   * GetSinglePagesFailureNext
   * @param nextLink The nextLink from the previous successful call to the GetSinglePagesFailure method.
   * @param options The options parameters.
   */
  private _getSinglePagesFailureNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetSinglePagesFailureNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getSinglePagesFailureNextOperationSpec
    ) as Promise<PagingGetSinglePagesFailureNextResponse>;
  }

  /**
   * GetMultiplePagesFailureNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesFailure
   *                 method.
   * @param options The options parameters.
   */
  private _getMultiplePagesFailureNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetMultiplePagesFailureNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesFailureNextOperationSpec
    ) as Promise<PagingGetMultiplePagesFailureNextResponse>;
  }

  /**
   * GetMultiplePagesFailureUriNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesFailureUri
   *                 method.
   * @param options The options parameters.
   */
  private _getMultiplePagesFailureUriNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetMultiplePagesFailureUriNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesFailureUriNextOperationSpec
    ) as Promise<PagingGetMultiplePagesFailureUriNextResponse>;
  }

  /**
   * GetMultiplePagesLRONext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesLRO method.
   * @param options The options parameters.
   */
  private _getMultiplePagesLRONext(
    nextLink: string,
    options?: PagingGetMultiplePagesLRONextOptionalParams
  ): Promise<PagingGetMultiplePagesLRONextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiplePagesLRONextOperationSpec
    ) as Promise<PagingGetMultiplePagesLRONextResponse>;
  }

  /**
   * GetPagingModelWithItemNameWithXMSClientNameNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetPagingModelWithItemNameWithXMSClientName method.
   * @param options The options parameters.
   */
  private _getPagingModelWithItemNameWithXMSClientNameNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<PagingGetPagingModelWithItemNameWithXMSClientNameNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getPagingModelWithItemNameWithXMSClientNameNextOperationSpec
    ) as Promise<PagingGetPagingModelWithItemNameWithXMSClientNameNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getNoItemNamePagesOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/noitemname",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResultValue
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getNullNextLinkNamePagesOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/nullnextlink",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getSinglePagesOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/single",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults,
    Parameters.timeout
  ],
  serializer
};
const getWithQueryParamsOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/getWithQueryParams",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.requiredQueryParameter,
    Parameters.queryConstant
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const nextOperationWithQueryParamsOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/nextOperationWithQueryParams",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.queryConstant],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getOdataMultiplePagesOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/odata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults1,
    Parameters.timeout1
  ],
  serializer
};
const getMultiplePagesWithOffsetOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/withpath/{offset}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.offset],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults2,
    Parameters.timeout2
  ],
  serializer
};
const getMultiplePagesRetryFirstOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/retryfirst",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesRetrySecondOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/retrysecond",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getSinglePagesFailureOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/single/failure",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesFailureOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/failure",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesFailureUriOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/failureuri",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesFragmentNextLinkOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/fragment/{tenant}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenant],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesFragmentWithGroupingNextLinkOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/fragmentwithgrouping/{tenant}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.tenant1],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesLROOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/lro",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    201: {
      bodyMapper: Mappers.ProductResult
    },
    202: {
      bodyMapper: Mappers.ProductResult
    },
    204: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults3,
    Parameters.timeout3
  ],
  serializer
};
const nextFragmentOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/fragment/{tenant}/{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenant, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const nextFragmentWithGroupingOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/multiple/fragmentwithgrouping/{tenant}/{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.tenant1, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getPagingModelWithItemNameWithXMSClientNameOperationSpec: coreHttp.OperationSpec = {
  path: "/paging/itemNameWithXMSClientName",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResultValueWithXMSClientName
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getSinglePagesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults,
    Parameters.timeout
  ],
  serializer
};
const getOdataMultiplePagesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults1,
    Parameters.timeout1
  ],
  serializer
};
const getMultiplePagesWithOffsetNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.offset, Parameters.nextLink],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults2,
    Parameters.timeout2
  ],
  serializer
};
const getMultiplePagesRetryFirstNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesRetrySecondNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getSinglePagesFailureNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesFailureNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesFailureUriNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesLRONextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    202: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults3,
    Parameters.timeout3
  ],
  serializer
};
const getPagingModelWithItemNameWithXMSClientNameNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResultValueWithXMSClientName
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
