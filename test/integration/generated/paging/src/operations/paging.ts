/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { createSpan } from "../tracing";
import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Paging } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as coreTracing from "@azure/core-tracing";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PagingClientContext } from "../pagingClientContext";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { LroEngine } from "../lro";
import { CoreClientLro, shouldDeserializeLro } from "../coreClientLro";
import {
  Product,
  PagingGetNoItemNamePagesNextOptionalParams,
  PagingGetNoItemNamePagesOptionalParams,
  PagingGetNullNextLinkNamePagesOptionalParams,
  PagingGetSinglePagesNextOptionalParams,
  PagingGetSinglePagesOptionalParams,
  PagingFirstResponseEmptyNextOptionalParams,
  PagingFirstResponseEmptyOptionalParams,
  PagingGetMultiplePagesNextOptionalParams,
  PagingGetMultiplePagesOptionalParams,
  PagingNextOperationWithQueryParamsOptionalParams,
  PagingGetWithQueryParamsOptionalParams,
  PagingGetOdataMultiplePagesNextOptionalParams,
  PagingGetOdataMultiplePagesOptionalParams,
  PagingGetMultiplePagesWithOffsetOptions,
  PagingGetMultiplePagesWithOffsetNextOptionalParams,
  PagingGetMultiplePagesWithOffsetOptionalParams,
  PagingGetMultiplePagesRetryFirstNextOptionalParams,
  PagingGetMultiplePagesRetryFirstOptionalParams,
  PagingGetMultiplePagesRetrySecondNextOptionalParams,
  PagingGetMultiplePagesRetrySecondOptionalParams,
  PagingGetSinglePagesFailureNextOptionalParams,
  PagingGetSinglePagesFailureOptionalParams,
  PagingGetMultiplePagesFailureNextOptionalParams,
  PagingGetMultiplePagesFailureOptionalParams,
  PagingGetMultiplePagesFailureUriNextOptionalParams,
  PagingGetMultiplePagesFailureUriOptionalParams,
  PagingNextFragmentOptionalParams,
  PagingGetMultiplePagesFragmentNextLinkOptionalParams,
  CustomParameterGroup,
  PagingNextFragmentWithGroupingOptionalParams,
  PagingGetMultiplePagesFragmentWithGroupingNextLinkOptionalParams,
  PagingGetMultiplePagesLRONextOptionalParams,
  PagingGetMultiplePagesLROOptionalParams,
  PagingGetPagingModelWithItemNameWithXMSClientNameNextOptionalParams,
  PagingGetPagingModelWithItemNameWithXMSClientNameOptionalParams,
  PagingGetNoItemNamePagesResponse,
  PagingGetNullNextLinkNamePagesResponse,
  PagingGetSinglePagesResponse,
  PagingFirstResponseEmptyResponse,
  PagingGetMultiplePagesResponse,
  PagingGetWithQueryParamsResponse,
  PagingNextOperationWithQueryParamsResponse,
  PagingGetOdataMultiplePagesResponse,
  PagingGetMultiplePagesWithOffsetResponse,
  PagingGetMultiplePagesRetryFirstResponse,
  PagingGetMultiplePagesRetrySecondResponse,
  PagingGetSinglePagesFailureResponse,
  PagingGetMultiplePagesFailureResponse,
  PagingGetMultiplePagesFailureUriResponse,
  PagingGetMultiplePagesFragmentNextLinkResponse,
  PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse,
  PagingGetMultiplePagesLROResponse,
  PagingNextFragmentResponse,
  PagingNextFragmentWithGroupingResponse,
  PagingGetPagingModelWithItemNameWithXMSClientNameResponse,
  PagingGetNoItemNamePagesNextResponse,
  PagingGetSinglePagesNextResponse,
  PagingFirstResponseEmptyNextResponse,
  PagingGetMultiplePagesNextResponse,
  PagingGetOdataMultiplePagesNextResponse,
  PagingGetMultiplePagesWithOffsetNextResponse,
  PagingGetMultiplePagesRetryFirstNextResponse,
  PagingGetMultiplePagesRetrySecondNextResponse,
  PagingGetSinglePagesFailureNextResponse,
  PagingGetMultiplePagesFailureNextResponse,
  PagingGetMultiplePagesFailureUriNextResponse,
  PagingGetMultiplePagesLRONextResponse,
  PagingGetPagingModelWithItemNameWithXMSClientNameNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a Paging. */
export class PagingImpl implements Paging {
  private readonly client: PagingClientContext;

  /**
   * Initialize a new instance of the class Paging class.
   * @param client Reference to the service client
   */
  constructor(client: PagingClientContext) {
    this.client = client;
  }

  /**
   * A paging operation that must return result of the default 'value' node.
   * @param options The options parameters.
   */
  public listNoItemNamePages(
    options?: PagingGetNoItemNamePagesOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getNoItemNamePagesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getNoItemNamePagesPagingPage(options);
      }
    };
  }

  private async *getNoItemNamePagesPagingPage(
    options?: PagingGetNoItemNamePagesOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getNoItemNamePages(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getNoItemNamePagesNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getNoItemNamePagesPagingAll(
    options?: PagingGetNoItemNamePagesOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getNoItemNamePagesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that must ignore any kind of nextLink, and stop after page 1.
   * @param options The options parameters.
   */
  public listNullNextLinkNamePages(
    options?: PagingGetNullNextLinkNamePagesOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getNullNextLinkNamePagesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getNullNextLinkNamePagesPagingPage(options);
      }
    };
  }

  private async *getNullNextLinkNamePagesPagingPage(
    options?: PagingGetNullNextLinkNamePagesOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getNullNextLinkNamePages(options);
    yield result.values || [];
  }

  private async *getNullNextLinkNamePagesPagingAll(
    options?: PagingGetNullNextLinkNamePagesOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getNullNextLinkNamePagesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   * @param options The options parameters.
   */
  public listSinglePages(
    options?: PagingGetSinglePagesOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getSinglePagesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getSinglePagesPagingPage(options);
      }
    };
  }

  private async *getSinglePagesPagingPage(
    options?: PagingGetSinglePagesOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getSinglePages(options);
    yield result.values || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getSinglePagesNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.values || [];
    }
  }

  private async *getSinglePagesPagingAll(
    options?: PagingGetSinglePagesOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getSinglePagesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation whose first response's items list is empty, but still returns a next link. Second
   * (and final) call, will give you an items list of 1.
   * @param options The options parameters.
   */
  public listFirstResponseEmpty(
    options?: PagingFirstResponseEmptyOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.firstResponseEmptyPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.firstResponseEmptyPagingPage(options);
      }
    };
  }

  private async *firstResponseEmptyPagingPage(
    options?: PagingFirstResponseEmptyOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._firstResponseEmpty(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._firstResponseEmptyNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *firstResponseEmptyPagingAll(
    options?: PagingFirstResponseEmptyOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.firstResponseEmptyPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  public listMultiplePages(
    options?: PagingGetMultiplePagesOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getMultiplePagesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getMultiplePagesPagingPage(options);
      }
    };
  }

  private async *getMultiplePagesPagingPage(
    options?: PagingGetMultiplePagesOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePages(options);
    yield result.values || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getMultiplePagesNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.values || [];
    }
  }

  private async *getMultiplePagesPagingAll(
    options?: PagingGetMultiplePagesOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getMultiplePagesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that includes a next operation. It has a different query parameter from it's next
   * operation nextOperationWithQueryParams. Returns a ProductResult
   * @param requiredQueryParameter A required integer query parameter. Put in value '100' to pass test.
   * @param options The options parameters.
   */
  public listWithQueryParams(
    requiredQueryParameter: number,
    options?: PagingGetWithQueryParamsOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getWithQueryParamsPagingAll(
      requiredQueryParameter,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getWithQueryParamsPagingPage(
          requiredQueryParameter,
          options
        );
      }
    };
  }

  private async *getWithQueryParamsPagingPage(
    requiredQueryParameter: number,
    options?: PagingGetWithQueryParamsOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getWithQueryParams(
      requiredQueryParameter,
      options
    );
    yield result.values || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._nextOperationWithQueryParams(options);
      continuationToken = result.nextLink;
      yield result.values || [];
    }
  }

  private async *getWithQueryParamsPagingAll(
    requiredQueryParameter: number,
    options?: PagingGetWithQueryParamsOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getWithQueryParamsPagingPage(
      requiredQueryParameter,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   * @param options The options parameters.
   */
  public listOdataMultiplePages(
    options?: PagingGetOdataMultiplePagesOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getOdataMultiplePagesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getOdataMultiplePagesPagingPage(options);
      }
    };
  }

  private async *getOdataMultiplePagesPagingPage(
    options?: PagingGetOdataMultiplePagesOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getOdataMultiplePages(options);
    yield result.values || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._getOdataMultiplePagesNext(
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      yield result.values || [];
    }
  }

  private async *getOdataMultiplePagesPagingAll(
    options?: PagingGetOdataMultiplePagesOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getOdataMultiplePagesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param pagingGetMultiplePagesWithOffsetOptions Parameter group
   * @param options The options parameters.
   */
  public listMultiplePagesWithOffset(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    options?: PagingGetMultiplePagesWithOffsetOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getMultiplePagesWithOffsetPagingAll(
      pagingGetMultiplePagesWithOffsetOptions,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getMultiplePagesWithOffsetPagingPage(
          pagingGetMultiplePagesWithOffsetOptions,
          options
        );
      }
    };
  }

  private async *getMultiplePagesWithOffsetPagingPage(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    options?: PagingGetMultiplePagesWithOffsetOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesWithOffset(
      pagingGetMultiplePagesWithOffsetOptions,
      options
    );
    yield result.values || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getMultiplePagesWithOffsetNext(
        pagingGetMultiplePagesWithOffsetOptions,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.values || [];
    }
  }

  private async *getMultiplePagesWithOffsetPagingAll(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    options?: PagingGetMultiplePagesWithOffsetOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getMultiplePagesWithOffsetPagingPage(
      pagingGetMultiplePagesWithOffsetOptions,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a response
   * including a nextLink that has 10 pages
   * @param options The options parameters.
   */
  public listMultiplePagesRetryFirst(
    options?: PagingGetMultiplePagesRetryFirstOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getMultiplePagesRetryFirstPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getMultiplePagesRetryFirstPagingPage(options);
      }
    };
  }

  private async *getMultiplePagesRetryFirstPagingPage(
    options?: PagingGetMultiplePagesRetryFirstOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesRetryFirst(options);
    yield result.values || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getMultiplePagesRetryFirstNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.values || [];
    }
  }

  private async *getMultiplePagesRetryFirstPagingAll(
    options?: PagingGetMultiplePagesRetryFirstOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getMultiplePagesRetryFirstPagingPage(
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   * @param options The options parameters.
   */
  public listMultiplePagesRetrySecond(
    options?: PagingGetMultiplePagesRetrySecondOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getMultiplePagesRetrySecondPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getMultiplePagesRetrySecondPagingPage(options);
      }
    };
  }

  private async *getMultiplePagesRetrySecondPagingPage(
    options?: PagingGetMultiplePagesRetrySecondOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesRetrySecond(options);
    yield result.values || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getMultiplePagesRetrySecondNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.values || [];
    }
  }

  private async *getMultiplePagesRetrySecondPagingAll(
    options?: PagingGetMultiplePagesRetrySecondOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getMultiplePagesRetrySecondPagingPage(
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that receives a 400 on the first call
   * @param options The options parameters.
   */
  public listSinglePagesFailure(
    options?: PagingGetSinglePagesFailureOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getSinglePagesFailurePagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getSinglePagesFailurePagingPage(options);
      }
    };
  }

  private async *getSinglePagesFailurePagingPage(
    options?: PagingGetSinglePagesFailureOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getSinglePagesFailure(options);
    yield result.values || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getSinglePagesFailureNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.values || [];
    }
  }

  private async *getSinglePagesFailurePagingAll(
    options?: PagingGetSinglePagesFailureOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getSinglePagesFailurePagingPage(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that receives a 400 on the second call
   * @param options The options parameters.
   */
  public listMultiplePagesFailure(
    options?: PagingGetMultiplePagesFailureOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getMultiplePagesFailurePagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getMultiplePagesFailurePagingPage(options);
      }
    };
  }

  private async *getMultiplePagesFailurePagingPage(
    options?: PagingGetMultiplePagesFailureOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesFailure(options);
    yield result.values || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getMultiplePagesFailureNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.values || [];
    }
  }

  private async *getMultiplePagesFailurePagingAll(
    options?: PagingGetMultiplePagesFailureOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getMultiplePagesFailurePagingPage(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that receives an invalid nextLink
   * @param options The options parameters.
   */
  public listMultiplePagesFailureUri(
    options?: PagingGetMultiplePagesFailureUriOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getMultiplePagesFailureUriPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getMultiplePagesFailureUriPagingPage(options);
      }
    };
  }

  private async *getMultiplePagesFailureUriPagingPage(
    options?: PagingGetMultiplePagesFailureUriOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesFailureUri(options);
    yield result.values || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getMultiplePagesFailureUriNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.values || [];
    }
  }

  private async *getMultiplePagesFailureUriPagingAll(
    options?: PagingGetMultiplePagesFailureUriOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getMultiplePagesFailureUriPagingPage(
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param options The options parameters.
   */
  public listMultiplePagesFragmentNextLink(
    apiVersion: string,
    tenant: string,
    options?: PagingGetMultiplePagesFragmentNextLinkOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getMultiplePagesFragmentNextLinkPagingAll(
      apiVersion,
      tenant,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getMultiplePagesFragmentNextLinkPagingPage(
          apiVersion,
          tenant,
          options
        );
      }
    };
  }

  private async *getMultiplePagesFragmentNextLinkPagingPage(
    apiVersion: string,
    tenant: string,
    options?: PagingGetMultiplePagesFragmentNextLinkOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesFragmentNextLink(
      apiVersion,
      tenant,
      options
    );
    yield result.values || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._nextFragment(
        apiVersion,
        tenant,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      yield result.values || [];
    }
  }

  private async *getMultiplePagesFragmentNextLinkPagingAll(
    apiVersion: string,
    tenant: string,
    options?: PagingGetMultiplePagesFragmentNextLinkOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getMultiplePagesFragmentNextLinkPagingPage(
      apiVersion,
      tenant,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment with parameters grouped
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  public listMultiplePagesFragmentWithGroupingNextLink(
    customParameterGroup: CustomParameterGroup,
    options?: PagingGetMultiplePagesFragmentWithGroupingNextLinkOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getMultiplePagesFragmentWithGroupingNextLinkPagingAll(
      customParameterGroup,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getMultiplePagesFragmentWithGroupingNextLinkPagingPage(
          customParameterGroup,
          options
        );
      }
    };
  }

  private async *getMultiplePagesFragmentWithGroupingNextLinkPagingPage(
    customParameterGroup: CustomParameterGroup,
    options?: PagingGetMultiplePagesFragmentWithGroupingNextLinkOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getMultiplePagesFragmentWithGroupingNextLink(
      customParameterGroup,
      options
    );
    yield result.values || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._nextFragmentWithGrouping(
        continuationToken,
        customParameterGroup,
        options
      );
      continuationToken = result.odataNextLink;
      yield result.values || [];
    }
  }

  private async *getMultiplePagesFragmentWithGroupingNextLinkPagingAll(
    customParameterGroup: CustomParameterGroup,
    options?: PagingGetMultiplePagesFragmentWithGroupingNextLinkOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getMultiplePagesFragmentWithGroupingNextLinkPagingPage(
      customParameterGroup,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  public beginListMultiplePagesLROAndWait(
    options?: PagingGetMultiplePagesLROOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getMultiplePagesLROPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getMultiplePagesLROPagingPage(options);
      }
    };
  }

  private async *getMultiplePagesLROPagingPage(
    options?: PagingGetMultiplePagesLROOptionalParams
  ): AsyncIterableIterator<Product[]> {
    const poller = await this._getMultiplePagesLRO(options);
    let result: any = await poller.pollUntilDone();
    yield result.values || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getMultiplePagesLRONext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.values || [];
    }
  }

  private async *getMultiplePagesLROPagingAll(
    options?: PagingGetMultiplePagesLROOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getMultiplePagesLROPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param nextLink Next link for list operation.
   * @param options The options parameters.
   */
  public listNextFragment(
    apiVersion: string,
    tenant: string,
    nextLink: string,
    options?: PagingNextFragmentOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.nextFragmentPagingAll(
      apiVersion,
      tenant,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.nextFragmentPagingPage(
          apiVersion,
          tenant,
          nextLink,
          options
        );
      }
    };
  }

  private async *nextFragmentPagingPage(
    apiVersion: string,
    tenant: string,
    nextLink: string,
    options?: PagingNextFragmentOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._nextFragment(
      apiVersion,
      tenant,
      nextLink,
      options
    );
    yield result.values || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._nextFragment(
        apiVersion,
        tenant,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      yield result.values || [];
    }
  }

  private async *nextFragmentPagingAll(
    apiVersion: string,
    tenant: string,
    nextLink: string,
    options?: PagingNextFragmentOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.nextFragmentPagingPage(
      apiVersion,
      tenant,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param nextLink Next link for list operation.
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  public listNextFragmentWithGrouping(
    nextLink: string,
    customParameterGroup: CustomParameterGroup,
    options?: PagingNextFragmentWithGroupingOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.nextFragmentWithGroupingPagingAll(
      nextLink,
      customParameterGroup,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.nextFragmentWithGroupingPagingPage(
          nextLink,
          customParameterGroup,
          options
        );
      }
    };
  }

  private async *nextFragmentWithGroupingPagingPage(
    nextLink: string,
    customParameterGroup: CustomParameterGroup,
    options?: PagingNextFragmentWithGroupingOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._nextFragmentWithGrouping(
      nextLink,
      customParameterGroup,
      options
    );
    yield result.values || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._nextFragmentWithGrouping(
        continuationToken,
        customParameterGroup,
        options
      );
      continuationToken = result.odataNextLink;
      yield result.values || [];
    }
  }

  private async *nextFragmentWithGroupingPagingAll(
    nextLink: string,
    customParameterGroup: CustomParameterGroup,
    options?: PagingNextFragmentWithGroupingOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.nextFragmentWithGroupingPagingPage(
      nextLink,
      customParameterGroup,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that returns a paging model whose item name is is overriden by x-ms-client-name
   * 'indexes'.
   * @param options The options parameters.
   */
  public listPagingModelWithItemNameWithXMSClientName(
    options?: PagingGetPagingModelWithItemNameWithXMSClientNameOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.getPagingModelWithItemNameWithXMSClientNamePagingAll(
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getPagingModelWithItemNameWithXMSClientNamePagingPage(
          options
        );
      }
    };
  }

  private async *getPagingModelWithItemNameWithXMSClientNamePagingPage(
    options?: PagingGetPagingModelWithItemNameWithXMSClientNameOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._getPagingModelWithItemNameWithXMSClientName(
      options
    );
    yield result.indexes || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getPagingModelWithItemNameWithXMSClientNameNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.indexes || [];
    }
  }

  private async *getPagingModelWithItemNameWithXMSClientNamePagingAll(
    options?: PagingGetPagingModelWithItemNameWithXMSClientNameOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.getPagingModelWithItemNameWithXMSClientNamePagingPage(
      options
    )) {
      yield* page;
    }
  }

  /**
   * A paging operation that must return result of the default 'value' node.
   * @param options The options parameters.
   */
  private async _getNoItemNamePages(
    options?: PagingGetNoItemNamePagesOptionalParams
  ): Promise<PagingGetNoItemNamePagesResponse> {
    const { span } = createSpan(
      "PagingClient-_getNoItemNamePages",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getNoItemNamePagesOperationSpec
      );
      return result as PagingGetNoItemNamePagesResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that must ignore any kind of nextLink, and stop after page 1.
   * @param options The options parameters.
   */
  private async _getNullNextLinkNamePages(
    options?: PagingGetNullNextLinkNamePagesOptionalParams
  ): Promise<PagingGetNullNextLinkNamePagesResponse> {
    const { span } = createSpan(
      "PagingClient-_getNullNextLinkNamePages",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getNullNextLinkNamePagesOperationSpec
      );
      return result as PagingGetNullNextLinkNamePagesResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   * @param options The options parameters.
   */
  private async _getSinglePages(
    options?: PagingGetSinglePagesOptionalParams
  ): Promise<PagingGetSinglePagesResponse> {
    const { span } = createSpan("PagingClient-_getSinglePages", options || {});
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getSinglePagesOperationSpec
      );
      return result as PagingGetSinglePagesResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation whose first response's items list is empty, but still returns a next link. Second
   * (and final) call, will give you an items list of 1.
   * @param options The options parameters.
   */
  private async _firstResponseEmpty(
    options?: PagingFirstResponseEmptyOptionalParams
  ): Promise<PagingFirstResponseEmptyResponse> {
    const { span } = createSpan(
      "PagingClient-_firstResponseEmpty",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        firstResponseEmptyOperationSpec
      );
      return result as PagingFirstResponseEmptyResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private async _getMultiplePages(
    options?: PagingGetMultiplePagesOptionalParams
  ): Promise<PagingGetMultiplePagesResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePages",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getMultiplePagesOperationSpec
      );
      return result as PagingGetMultiplePagesResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that includes a next operation. It has a different query parameter from it's next
   * operation nextOperationWithQueryParams. Returns a ProductResult
   * @param requiredQueryParameter A required integer query parameter. Put in value '100' to pass test.
   * @param options The options parameters.
   */
  private async _getWithQueryParams(
    requiredQueryParameter: number,
    options?: PagingGetWithQueryParamsOptionalParams
  ): Promise<PagingGetWithQueryParamsResponse> {
    const { span } = createSpan(
      "PagingClient-_getWithQueryParams",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { requiredQueryParameter, options },
        getWithQueryParamsOperationSpec
      );
      return result as PagingGetWithQueryParamsResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Next operation for getWithQueryParams. Pass in next=True to pass test. Returns a ProductResult
   * @param options The options parameters.
   */
  private async _nextOperationWithQueryParams(
    options?: PagingNextOperationWithQueryParamsOptionalParams
  ): Promise<PagingNextOperationWithQueryParamsResponse> {
    const { span } = createSpan(
      "PagingClient-_nextOperationWithQueryParams",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        nextOperationWithQueryParamsOperationSpec
      );
      return result as PagingNextOperationWithQueryParamsResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   * @param options The options parameters.
   */
  private async _getOdataMultiplePages(
    options?: PagingGetOdataMultiplePagesOptionalParams
  ): Promise<PagingGetOdataMultiplePagesResponse> {
    const { span } = createSpan(
      "PagingClient-_getOdataMultiplePages",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getOdataMultiplePagesOperationSpec
      );
      return result as PagingGetOdataMultiplePagesResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param pagingGetMultiplePagesWithOffsetOptions Parameter group
   * @param options The options parameters.
   */
  private async _getMultiplePagesWithOffset(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    options?: PagingGetMultiplePagesWithOffsetOptionalParams
  ): Promise<PagingGetMultiplePagesWithOffsetResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesWithOffset",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { pagingGetMultiplePagesWithOffsetOptions, options },
        getMultiplePagesWithOffsetOperationSpec
      );
      return result as PagingGetMultiplePagesWithOffsetResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a response
   * including a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private async _getMultiplePagesRetryFirst(
    options?: PagingGetMultiplePagesRetryFirstOptionalParams
  ): Promise<PagingGetMultiplePagesRetryFirstResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesRetryFirst",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getMultiplePagesRetryFirstOperationSpec
      );
      return result as PagingGetMultiplePagesRetryFirstResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   * @param options The options parameters.
   */
  private async _getMultiplePagesRetrySecond(
    options?: PagingGetMultiplePagesRetrySecondOptionalParams
  ): Promise<PagingGetMultiplePagesRetrySecondResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesRetrySecond",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getMultiplePagesRetrySecondOperationSpec
      );
      return result as PagingGetMultiplePagesRetrySecondResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that receives a 400 on the first call
   * @param options The options parameters.
   */
  private async _getSinglePagesFailure(
    options?: PagingGetSinglePagesFailureOptionalParams
  ): Promise<PagingGetSinglePagesFailureResponse> {
    const { span } = createSpan(
      "PagingClient-_getSinglePagesFailure",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getSinglePagesFailureOperationSpec
      );
      return result as PagingGetSinglePagesFailureResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that receives a 400 on the second call
   * @param options The options parameters.
   */
  private async _getMultiplePagesFailure(
    options?: PagingGetMultiplePagesFailureOptionalParams
  ): Promise<PagingGetMultiplePagesFailureResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesFailure",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getMultiplePagesFailureOperationSpec
      );
      return result as PagingGetMultiplePagesFailureResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that receives an invalid nextLink
   * @param options The options parameters.
   */
  private async _getMultiplePagesFailureUri(
    options?: PagingGetMultiplePagesFailureUriOptionalParams
  ): Promise<PagingGetMultiplePagesFailureUriResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesFailureUri",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getMultiplePagesFailureUriOperationSpec
      );
      return result as PagingGetMultiplePagesFailureUriResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param options The options parameters.
   */
  private async _getMultiplePagesFragmentNextLink(
    apiVersion: string,
    tenant: string,
    options?: PagingGetMultiplePagesFragmentNextLinkOptionalParams
  ): Promise<PagingGetMultiplePagesFragmentNextLinkResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesFragmentNextLink",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { apiVersion, tenant, options },
        getMultiplePagesFragmentNextLinkOperationSpec
      );
      return result as PagingGetMultiplePagesFragmentNextLinkResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment with parameters grouped
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  private async _getMultiplePagesFragmentWithGroupingNextLink(
    customParameterGroup: CustomParameterGroup,
    options?: PagingGetMultiplePagesFragmentWithGroupingNextLinkOptionalParams
  ): Promise<PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesFragmentWithGroupingNextLink",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { customParameterGroup, options },
        getMultiplePagesFragmentWithGroupingNextLinkOperationSpec
      );
      return result as PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  private async _getMultiplePagesLRO(
    options?: PagingGetMultiplePagesLROOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<PagingGetMultiplePagesLROResponse>,
      PagingGetMultiplePagesLROResponse
    >
  > {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesLRO",
      options || {}
    );
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PagingGetMultiplePagesLROResponse> => {
      try {
        const result = await this.client.sendOperationRequest(args, spec);
        return result as PagingGetMultiplePagesLROResponse;
      } catch (error) {
        span.setStatus({
          code: coreTracing.SpanStatusCode.UNSET,
          message: error.message
        });
        throw error;
      } finally {
        span.end();
      }
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new CoreClientLro(
      sendOperation,
      { options },
      getMultiplePagesLROOperationSpec
    );
    return new LroEngine(lro, { intervalInMs: options?.updateIntervalInMs });
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param nextLink Next link for list operation.
   * @param options The options parameters.
   */
  private async _nextFragment(
    apiVersion: string,
    tenant: string,
    nextLink: string,
    options?: PagingNextFragmentOptionalParams
  ): Promise<PagingNextFragmentResponse> {
    const { span } = createSpan("PagingClient-_nextFragment", options || {});
    try {
      const result = await this.client.sendOperationRequest(
        { apiVersion, tenant, nextLink, options },
        nextFragmentOperationSpec
      );
      return result as PagingNextFragmentResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param nextLink Next link for list operation.
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  private async _nextFragmentWithGrouping(
    nextLink: string,
    customParameterGroup: CustomParameterGroup,
    options?: PagingNextFragmentWithGroupingOptionalParams
  ): Promise<PagingNextFragmentWithGroupingResponse> {
    const { span } = createSpan(
      "PagingClient-_nextFragmentWithGrouping",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, customParameterGroup, options },
        nextFragmentWithGroupingOperationSpec
      );
      return result as PagingNextFragmentWithGroupingResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * A paging operation that returns a paging model whose item name is is overriden by x-ms-client-name
   * 'indexes'.
   * @param options The options parameters.
   */
  private async _getPagingModelWithItemNameWithXMSClientName(
    options?: PagingGetPagingModelWithItemNameWithXMSClientNameOptionalParams
  ): Promise<PagingGetPagingModelWithItemNameWithXMSClientNameResponse> {
    const { span } = createSpan(
      "PagingClient-_getPagingModelWithItemNameWithXMSClientName",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getPagingModelWithItemNameWithXMSClientNameOperationSpec
      );
      return result as PagingGetPagingModelWithItemNameWithXMSClientNameResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetNoItemNamePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetNoItemNamePages method.
   * @param options The options parameters.
   */
  private async _getNoItemNamePagesNext(
    nextLink: string,
    options?: PagingGetNoItemNamePagesNextOptionalParams
  ): Promise<PagingGetNoItemNamePagesNextResponse> {
    const { span } = createSpan(
      "PagingClient-_getNoItemNamePagesNext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, options },
        getNoItemNamePagesNextOperationSpec
      );
      return result as PagingGetNoItemNamePagesNextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetSinglePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetSinglePages method.
   * @param options The options parameters.
   */
  private async _getSinglePagesNext(
    nextLink: string,
    options?: PagingGetSinglePagesNextOptionalParams
  ): Promise<PagingGetSinglePagesNextResponse> {
    const { span } = createSpan(
      "PagingClient-_getSinglePagesNext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, options },
        getSinglePagesNextOperationSpec
      );
      return result as PagingGetSinglePagesNextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * FirstResponseEmptyNext
   * @param nextLink The nextLink from the previous successful call to the FirstResponseEmpty method.
   * @param options The options parameters.
   */
  private async _firstResponseEmptyNext(
    nextLink: string,
    options?: PagingFirstResponseEmptyNextOptionalParams
  ): Promise<PagingFirstResponseEmptyNextResponse> {
    const { span } = createSpan(
      "PagingClient-_firstResponseEmptyNext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, options },
        firstResponseEmptyNextOperationSpec
      );
      return result as PagingFirstResponseEmptyNextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetMultiplePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePages method.
   * @param options The options parameters.
   */
  private async _getMultiplePagesNext(
    nextLink: string,
    options?: PagingGetMultiplePagesNextOptionalParams
  ): Promise<PagingGetMultiplePagesNextResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesNext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, options },
        getMultiplePagesNextOperationSpec
      );
      return result as PagingGetMultiplePagesNextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetOdataMultiplePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetOdataMultiplePages method.
   * @param options The options parameters.
   */
  private async _getOdataMultiplePagesNext(
    nextLink: string,
    options?: PagingGetOdataMultiplePagesNextOptionalParams
  ): Promise<PagingGetOdataMultiplePagesNextResponse> {
    const { span } = createSpan(
      "PagingClient-_getOdataMultiplePagesNext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, options },
        getOdataMultiplePagesNextOperationSpec
      );
      return result as PagingGetOdataMultiplePagesNextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetMultiplePagesWithOffsetNext
   * @param pagingGetMultiplePagesWithOffsetOptions Parameter group
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesWithOffset
   *                 method.
   * @param options The options parameters.
   */
  private async _getMultiplePagesWithOffsetNext(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    nextLink: string,
    options?: PagingGetMultiplePagesWithOffsetNextOptionalParams
  ): Promise<PagingGetMultiplePagesWithOffsetNextResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesWithOffsetNext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { pagingGetMultiplePagesWithOffsetOptions, nextLink, options },
        getMultiplePagesWithOffsetNextOperationSpec
      );
      return result as PagingGetMultiplePagesWithOffsetNextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetMultiplePagesRetryFirstNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesRetryFirst
   *                 method.
   * @param options The options parameters.
   */
  private async _getMultiplePagesRetryFirstNext(
    nextLink: string,
    options?: PagingGetMultiplePagesRetryFirstNextOptionalParams
  ): Promise<PagingGetMultiplePagesRetryFirstNextResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesRetryFirstNext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, options },
        getMultiplePagesRetryFirstNextOperationSpec
      );
      return result as PagingGetMultiplePagesRetryFirstNextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetMultiplePagesRetrySecondNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesRetrySecond
   *                 method.
   * @param options The options parameters.
   */
  private async _getMultiplePagesRetrySecondNext(
    nextLink: string,
    options?: PagingGetMultiplePagesRetrySecondNextOptionalParams
  ): Promise<PagingGetMultiplePagesRetrySecondNextResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesRetrySecondNext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, options },
        getMultiplePagesRetrySecondNextOperationSpec
      );
      return result as PagingGetMultiplePagesRetrySecondNextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetSinglePagesFailureNext
   * @param nextLink The nextLink from the previous successful call to the GetSinglePagesFailure method.
   * @param options The options parameters.
   */
  private async _getSinglePagesFailureNext(
    nextLink: string,
    options?: PagingGetSinglePagesFailureNextOptionalParams
  ): Promise<PagingGetSinglePagesFailureNextResponse> {
    const { span } = createSpan(
      "PagingClient-_getSinglePagesFailureNext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, options },
        getSinglePagesFailureNextOperationSpec
      );
      return result as PagingGetSinglePagesFailureNextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetMultiplePagesFailureNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesFailure
   *                 method.
   * @param options The options parameters.
   */
  private async _getMultiplePagesFailureNext(
    nextLink: string,
    options?: PagingGetMultiplePagesFailureNextOptionalParams
  ): Promise<PagingGetMultiplePagesFailureNextResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesFailureNext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, options },
        getMultiplePagesFailureNextOperationSpec
      );
      return result as PagingGetMultiplePagesFailureNextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetMultiplePagesFailureUriNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesFailureUri
   *                 method.
   * @param options The options parameters.
   */
  private async _getMultiplePagesFailureUriNext(
    nextLink: string,
    options?: PagingGetMultiplePagesFailureUriNextOptionalParams
  ): Promise<PagingGetMultiplePagesFailureUriNextResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesFailureUriNext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, options },
        getMultiplePagesFailureUriNextOperationSpec
      );
      return result as PagingGetMultiplePagesFailureUriNextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetMultiplePagesLRONext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesLRO method.
   * @param options The options parameters.
   */
  private async _getMultiplePagesLRONext(
    nextLink: string,
    options?: PagingGetMultiplePagesLRONextOptionalParams
  ): Promise<PagingGetMultiplePagesLRONextResponse> {
    const { span } = createSpan(
      "PagingClient-_getMultiplePagesLRONext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, options },
        getMultiplePagesLRONextOperationSpec
      );
      return result as PagingGetMultiplePagesLRONextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetPagingModelWithItemNameWithXMSClientNameNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetPagingModelWithItemNameWithXMSClientName method.
   * @param options The options parameters.
   */
  private async _getPagingModelWithItemNameWithXMSClientNameNext(
    nextLink: string,
    options?: PagingGetPagingModelWithItemNameWithXMSClientNameNextOptionalParams
  ): Promise<PagingGetPagingModelWithItemNameWithXMSClientNameNextResponse> {
    const { span } = createSpan(
      "PagingClient-_getPagingModelWithItemNameWithXMSClientNameNext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, options },
        getPagingModelWithItemNameWithXMSClientNameNextOperationSpec
      );
      return result as PagingGetPagingModelWithItemNameWithXMSClientNameNextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getNoItemNamePagesOperationSpec: coreClient.OperationSpec = {
  path: "/paging/noitemname",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResultValue
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getNullNextLinkNamePagesOperationSpec: coreClient.OperationSpec = {
  path: "/paging/nullnextlink",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getSinglePagesOperationSpec: coreClient.OperationSpec = {
  path: "/paging/single",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const firstResponseEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/paging/firstResponseEmpty/1",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResultValue
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults,
    Parameters.timeout
  ],
  serializer
};
const getWithQueryParamsOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple/getWithQueryParams",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.requiredQueryParameter,
    Parameters.queryConstant
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const nextOperationWithQueryParamsOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple/nextOperationWithQueryParams",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.queryConstant],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getOdataMultiplePagesOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple/odata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults1,
    Parameters.timeout1
  ],
  serializer
};
const getMultiplePagesWithOffsetOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple/withpath/{offset}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.offset],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults2,
    Parameters.timeout2
  ],
  serializer
};
const getMultiplePagesRetryFirstOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple/retryfirst",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesRetrySecondOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple/retrysecond",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getSinglePagesFailureOperationSpec: coreClient.OperationSpec = {
  path: "/paging/single/failure",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesFailureOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple/failure",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesFailureUriOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple/failureuri",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesFragmentNextLinkOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple/fragment/{tenant}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenant],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesFragmentWithGroupingNextLinkOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple/fragmentwithgrouping/{tenant}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.tenant1],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesLROOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple/lro",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    201: {
      bodyMapper: Mappers.ProductResult
    },
    202: {
      bodyMapper: Mappers.ProductResult
    },
    204: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults3,
    Parameters.timeout3
  ],
  serializer
};
const nextFragmentOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple/fragment/{tenant}/{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenant, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const nextFragmentWithGroupingOperationSpec: coreClient.OperationSpec = {
  path: "/paging/multiple/fragmentwithgrouping/{tenant}/{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.tenant1, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getPagingModelWithItemNameWithXMSClientNameOperationSpec: coreClient.OperationSpec = {
  path: "/paging/itemNameWithXMSClientName",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResultValueWithXMSClientName
    },
    default: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getNoItemNamePagesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResultValue
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getSinglePagesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const firstResponseEmptyNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResultValue
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults,
    Parameters.timeout
  ],
  serializer
};
const getOdataMultiplePagesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults1,
    Parameters.timeout1
  ],
  serializer
};
const getMultiplePagesWithOffsetNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.offset, Parameters.nextLink],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults2,
    Parameters.timeout2
  ],
  serializer
};
const getMultiplePagesRetryFirstNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesRetrySecondNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getSinglePagesFailureNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesFailureNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesFailureUriNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiplePagesLRONextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    202: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.maxresults3,
    Parameters.timeout3
  ],
  serializer
};
const getPagingModelWithItemNameWithXMSClientNameNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResultValueWithXMSClientName
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
