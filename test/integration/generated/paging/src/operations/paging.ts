/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PagingClient } from "../pagingClient";
import { PagedAsyncIterableIterator } from "@azure/core-paging";

/**
 * Class representing a Paging.
 */
export class Paging {
  private readonly client: PagingClient;

  /**
   * Initialize a new instance of the class Paging class.
   * @param client Reference to the service client
   */
  constructor(client: PagingClient) {
    this.client = client;
  }

  /**
   * A paging operation that must return result of the default 'value' node.
   * @param options The options parameters.
   */
  getNoItemNamePages(
    options?: coreHttp.RequestOptionsBase
  ): PagedAsyncIterableIterator<Models.Product[], Models.Product[]> {
    const iterator = this.fetchGetNoItemNamePagesIterator(undefined, options);
    return {
      next() {
        return iterator.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return iterator;
      }
    };
  }

  private async *fetchGetNoItemNamePagesIterator(
    nextLink?: string,
    options?: any
  ): AsyncIterableIterator<Models.Product[]> {
    {
      let response;
      if (nextLink !== null) {
        do {
          response = await this.fetchGetNoItemNamePages({
            ...options,
            ...(nextLink && { nextPath: nextLink })
          });
          nextLink = response.nextLink;
          yield response.value || [];
        } while (nextLink);
      }
    }
  }

  /**
   * A paging operation that must return result of the default 'value' node.
   * @param options The options parameters.
   */
  private fetchGetNoItemNamePages(
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PagingGetNoItemNamePagesResponse> {
    return this.client.sendOperationRequest(
      { options },
      getNoItemNamePagesOperationSpec
    ) as Promise<Models.PagingGetNoItemNamePagesResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  getMultiplePages(
    options?: coreHttp.RequestOptionsBase
  ): PagedAsyncIterableIterator<Models.Product[], Models.Product[]> {
    const iterator = this.fetchGetMultiplePagesIterator(undefined, options);
    return {
      next() {
        return iterator.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return iterator;
      }
    };
  }

  private fetchGetMultiplePages(
    options?: Models.PagingGetMultiplePagesOptionalParams
  ): Promise<Models.PagingGetMultiplePagesResponse> {
    return this.client.sendOperationRequest(
      { options },
      getMultiplePagesOperationSpec
    ) as Promise<Models.PagingGetMultiplePagesResponse>;
  }

  private async *fetchGetMultiplePagesIterator(
    nextLink?: string,
    options?: any
  ): AsyncIterableIterator<Models.Product[]> {
    {
      let response;
      if (nextLink !== null) {
        do {
          response = await this.fetchGetMultiplePages({
            ...options,
            ...(nextLink && { nextPath: nextLink })
          });
          nextLink = response.nextLink;
          yield response.values || [];
        } while (nextLink);
      }
    }
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getNoItemNamePagesOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResultValue
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextPath],
  serializer
};
const getNullNextLinkNamePagesOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextPath1],
  serializer
};
const getSinglePagesOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextPath2],
  serializer
};
const getMultiplePagesOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextPath3],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.maxresults,
    Parameters.timeout
  ],
  serializer
};
const getOdataMultiplePagesOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextPath4],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.maxresults,
    Parameters.timeout
  ],
  serializer
};
const getMultiplePagesWithOffsetOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.offset, Parameters.nextPath5],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.maxresults,
    Parameters.timeout
  ],
  serializer
};
const getMultiplePagesRetryFirstOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextPath6],
  serializer
};
const getMultiplePagesRetrySecondOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextPath7],
  serializer
};
const getSinglePagesFailureOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextPath8],
  serializer
};
const getMultiplePagesFailureOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextPath9],
  serializer
};
const getMultiplePagesFailureUriOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextPath10],
  serializer
};
const getMultiplePagesFragmentNextLinkOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenant, Parameters.nextPath11],
  serializer
};
const getMultiplePagesFragmentWithGroupingNextLinkOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.tenant1, Parameters.nextPath12],
  serializer
};
const getMultiplePagesLROOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.ProductResult
    },
    default: {}
  },
  urlParameters: [Parameters.$host, Parameters.nextPath13],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.maxresults,
    Parameters.timeout
  ],
  serializer
};
const nextFragmentOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenant,
    Parameters.nextLink,
    Parameters.nextPath14
  ],
  serializer
};
const nextFragmentWithGroupingOperationSpec: coreHttp.OperationSpec = {
  path: "{nextPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.tenant1,
    Parameters.nextLink,
    Parameters.nextPath15
  ],
  serializer
};
