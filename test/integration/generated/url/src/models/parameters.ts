/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationURLParameter,
  OperationQueryParameter,
  QueryCollectionFormat
} from "@azure/core-http";

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const boolPath: OperationURLParameter = {
  parameterPath: "boolPath",
  mapper: {
    defaultValue: true,
    isConstant: true,
    serializedName: "boolPath",
    type: {
      name: "Boolean"
    }
  }
};

export const boolPath1: OperationURLParameter = {
  parameterPath: "boolPath",
  mapper: {
    defaultValue: false,
    isConstant: true,
    serializedName: "boolPath",
    type: {
      name: "Boolean"
    }
  }
};

export const intPath: OperationURLParameter = {
  parameterPath: "intPath",
  mapper: {
    defaultValue: 1000000,
    isConstant: true,
    serializedName: "intPath",
    type: {
      name: "Number"
    }
  }
};

export const intPath1: OperationURLParameter = {
  parameterPath: "intPath",
  mapper: {
    defaultValue: -1000000,
    isConstant: true,
    serializedName: "intPath",
    type: {
      name: "Number"
    }
  }
};

export const longPath: OperationURLParameter = {
  parameterPath: "longPath",
  mapper: {
    defaultValue: 10000000000,
    isConstant: true,
    serializedName: "longPath",
    type: {
      name: "Number"
    }
  }
};

export const longPath1: OperationURLParameter = {
  parameterPath: "longPath",
  mapper: {
    defaultValue: -10000000000,
    isConstant: true,
    serializedName: "longPath",
    type: {
      name: "Number"
    }
  }
};

export const floatPath: OperationURLParameter = {
  parameterPath: "floatPath",
  mapper: {
    defaultValue: 103400000000000000000,
    isConstant: true,
    serializedName: "floatPath",
    type: {
      name: "Number"
    }
  }
};

export const floatPath1: OperationURLParameter = {
  parameterPath: "floatPath",
  mapper: {
    defaultValue: -1.034e-20,
    isConstant: true,
    serializedName: "floatPath",
    type: {
      name: "Number"
    }
  }
};

export const doublePath: OperationURLParameter = {
  parameterPath: "doublePath",
  mapper: {
    defaultValue: 9999999.999,
    isConstant: true,
    serializedName: "doublePath",
    type: {
      name: "Number"
    }
  }
};

export const doublePath1: OperationURLParameter = {
  parameterPath: "doublePath",
  mapper: {
    defaultValue: -9999999.999,
    isConstant: true,
    serializedName: "doublePath",
    type: {
      name: "Number"
    }
  }
};

export const stringPath: OperationURLParameter = {
  parameterPath: "stringPath",
  mapper: {
    defaultValue: "啊齄丂狛狜隣郎隣兀﨩",
    isConstant: true,
    serializedName: "stringPath",
    type: {
      name: "String"
    }
  }
};

export const stringPath1: OperationURLParameter = {
  parameterPath: "stringPath",
  mapper: {
    defaultValue: "begin!*'();:@ &=+$,/?#[]end",
    isConstant: true,
    serializedName: "stringPath",
    type: {
      name: "String"
    }
  }
};

export const stringPath2: OperationURLParameter = {
  parameterPath: "stringPath",
  mapper: {
    defaultValue: "begin!*'();:@&=+$,end",
    isConstant: true,
    serializedName: "stringPath",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const stringPath3: OperationURLParameter = {
  parameterPath: "stringPath",
  mapper: {
    defaultValue: "",
    isConstant: true,
    serializedName: "stringPath",
    type: {
      name: "String"
    }
  }
};

export const stringPath4: OperationURLParameter = {
  parameterPath: "stringPath",
  mapper: {
    serializedName: "stringPath",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const enumPath: OperationURLParameter = {
  parameterPath: "enumPath",
  mapper: {
    serializedName: "enumPath",
    required: true,
    type: {
      name: "Enum",
      allowedValues: ["red color", "green color", "blue color"]
    }
  }
};

export const bytePath: OperationURLParameter = {
  parameterPath: "bytePath",
  mapper: {
    serializedName: "bytePath",
    required: true,
    type: {
      name: "ByteArray"
    }
  }
};

export const bytePath1: OperationURLParameter = {
  parameterPath: "bytePath",
  mapper: {
    defaultValue: new Uint8Array(0),
    isConstant: true,
    serializedName: "bytePath",
    type: {
      name: "ByteArray"
    }
  }
};

export const datePath: OperationURLParameter = {
  parameterPath: "datePath",
  mapper: {
    defaultValue: "2012-01-01",
    isConstant: true,
    serializedName: "datePath",
    type: {
      name: "Date"
    }
  }
};

export const datePath1: OperationURLParameter = {
  parameterPath: "datePath",
  mapper: {
    serializedName: "datePath",
    required: true,
    type: {
      name: "Date"
    }
  }
};

export const dateTimePath: OperationURLParameter = {
  parameterPath: "dateTimePath",
  mapper: {
    defaultValue: "2012-01-01T01:01:01Z",
    isConstant: true,
    serializedName: "dateTimePath",
    type: {
      name: "DateTime"
    }
  }
};

export const dateTimePath1: OperationURLParameter = {
  parameterPath: "dateTimePath",
  mapper: {
    serializedName: "dateTimePath",
    required: true,
    type: {
      name: "DateTime"
    }
  }
};

export const base64UrlPath: OperationURLParameter = {
  parameterPath: "base64UrlPath",
  mapper: {
    serializedName: "base64UrlPath",
    required: true,
    type: {
      name: "Base64Url"
    }
  }
};

export const arrayPath: OperationURLParameter = {
  parameterPath: "arrayPath",
  mapper: {
    serializedName: "arrayPath",
    required: true,
    type: {
      name: "Sequence",
      element: { type: { name: "String" } }
    }
  }
};

export const unixTimeUrlPath: OperationURLParameter = {
  parameterPath: "unixTimeUrlPath",
  mapper: {
    serializedName: "unixTimeUrlPath",
    required: true,
    type: {
      name: "UnixTime"
    }
  }
};

export const boolQuery: OperationQueryParameter = {
  parameterPath: "boolQuery",
  mapper: {
    defaultValue: true,
    isConstant: true,
    serializedName: "boolQuery",
    type: {
      name: "Boolean"
    }
  }
};

export const boolQuery1: OperationQueryParameter = {
  parameterPath: "boolQuery",
  mapper: {
    defaultValue: false,
    isConstant: true,
    serializedName: "boolQuery",
    type: {
      name: "Boolean"
    }
  }
};

export const boolQuery2: OperationQueryParameter = {
  parameterPath: ["options", "boolQuery"],
  mapper: {
    serializedName: "boolQuery",
    type: {
      name: "Boolean"
    }
  }
};

export const intQuery: OperationQueryParameter = {
  parameterPath: "intQuery",
  mapper: {
    defaultValue: 1000000,
    isConstant: true,
    serializedName: "intQuery",
    type: {
      name: "Number"
    }
  }
};

export const intQuery1: OperationQueryParameter = {
  parameterPath: "intQuery",
  mapper: {
    defaultValue: -1000000,
    isConstant: true,
    serializedName: "intQuery",
    type: {
      name: "Number"
    }
  }
};

export const intQuery2: OperationQueryParameter = {
  parameterPath: ["options", "intQuery"],
  mapper: {
    serializedName: "intQuery",
    type: {
      name: "Number"
    }
  }
};

export const longQuery: OperationQueryParameter = {
  parameterPath: "longQuery",
  mapper: {
    defaultValue: 10000000000,
    isConstant: true,
    serializedName: "longQuery",
    type: {
      name: "Number"
    }
  }
};

export const longQuery1: OperationQueryParameter = {
  parameterPath: "longQuery",
  mapper: {
    defaultValue: -10000000000,
    isConstant: true,
    serializedName: "longQuery",
    type: {
      name: "Number"
    }
  }
};

export const longQuery2: OperationQueryParameter = {
  parameterPath: ["options", "longQuery"],
  mapper: {
    serializedName: "longQuery",
    type: {
      name: "Number"
    }
  }
};

export const floatQuery: OperationQueryParameter = {
  parameterPath: "floatQuery",
  mapper: {
    defaultValue: 103400000000000000000,
    isConstant: true,
    serializedName: "floatQuery",
    type: {
      name: "Number"
    }
  }
};

export const floatQuery1: OperationQueryParameter = {
  parameterPath: "floatQuery",
  mapper: {
    defaultValue: -1.034e-20,
    isConstant: true,
    serializedName: "floatQuery",
    type: {
      name: "Number"
    }
  }
};

export const floatQuery2: OperationQueryParameter = {
  parameterPath: ["options", "floatQuery"],
  mapper: {
    serializedName: "floatQuery",
    type: {
      name: "Number"
    }
  }
};

export const doubleQuery: OperationQueryParameter = {
  parameterPath: "doubleQuery",
  mapper: {
    defaultValue: 9999999.999,
    isConstant: true,
    serializedName: "doubleQuery",
    type: {
      name: "Number"
    }
  }
};

export const doubleQuery1: OperationQueryParameter = {
  parameterPath: "doubleQuery",
  mapper: {
    defaultValue: -9999999.999,
    isConstant: true,
    serializedName: "doubleQuery",
    type: {
      name: "Number"
    }
  }
};

export const doubleQuery2: OperationQueryParameter = {
  parameterPath: ["options", "doubleQuery"],
  mapper: {
    serializedName: "doubleQuery",
    type: {
      name: "Number"
    }
  }
};

export const stringQuery: OperationQueryParameter = {
  parameterPath: "stringQuery",
  mapper: {
    defaultValue: "啊齄丂狛狜隣郎隣兀﨩",
    isConstant: true,
    serializedName: "stringQuery",
    type: {
      name: "String"
    }
  }
};

export const stringQuery1: OperationQueryParameter = {
  parameterPath: "stringQuery",
  mapper: {
    defaultValue: "begin!*'();:@ &=+$,/?#[]end",
    isConstant: true,
    serializedName: "stringQuery",
    type: {
      name: "String"
    }
  }
};

export const stringQuery2: OperationQueryParameter = {
  parameterPath: "stringQuery",
  mapper: {
    defaultValue: "",
    isConstant: true,
    serializedName: "stringQuery",
    type: {
      name: "String"
    }
  }
};

export const stringQuery3: OperationQueryParameter = {
  parameterPath: ["options", "stringQuery"],
  mapper: {
    serializedName: "stringQuery",
    type: {
      name: "String"
    }
  }
};

export const enumQuery: OperationQueryParameter = {
  parameterPath: ["options", "enumQuery"],
  mapper: {
    serializedName: "enumQuery",
    type: {
      name: "Enum",
      allowedValues: ["red color", "green color", "blue color"]
    }
  }
};

export const byteQuery: OperationQueryParameter = {
  parameterPath: ["options", "byteQuery"],
  mapper: {
    serializedName: "byteQuery",
    type: {
      name: "ByteArray"
    }
  }
};

export const byteQuery1: OperationQueryParameter = {
  parameterPath: "byteQuery",
  mapper: {
    defaultValue: new Uint8Array(0),
    isConstant: true,
    serializedName: "byteQuery",
    type: {
      name: "ByteArray"
    }
  }
};

export const dateQuery: OperationQueryParameter = {
  parameterPath: "dateQuery",
  mapper: {
    defaultValue: "2012-01-01",
    isConstant: true,
    serializedName: "dateQuery",
    type: {
      name: "Date"
    }
  }
};

export const dateQuery1: OperationQueryParameter = {
  parameterPath: ["options", "dateQuery"],
  mapper: {
    serializedName: "dateQuery",
    type: {
      name: "Date"
    }
  }
};

export const dateTimeQuery: OperationQueryParameter = {
  parameterPath: "dateTimeQuery",
  mapper: {
    defaultValue: "2012-01-01T01:01:01Z",
    isConstant: true,
    serializedName: "dateTimeQuery",
    type: {
      name: "DateTime"
    }
  }
};

export const dateTimeQuery1: OperationQueryParameter = {
  parameterPath: ["options", "dateTimeQuery"],
  mapper: {
    serializedName: "dateTimeQuery",
    type: {
      name: "DateTime"
    }
  }
};

export const arrayQuery: OperationQueryParameter = {
  parameterPath: ["options", "arrayQuery"],
  mapper: {
    serializedName: "arrayQuery",
    type: {
      name: "Sequence",
      element: { type: { name: "String" } }
    }
  },
  collectionFormat: QueryCollectionFormat.Csv
};

export const arrayQuery1: OperationQueryParameter = {
  parameterPath: ["options", "arrayQuery"],
  mapper: {
    serializedName: "arrayQuery",
    type: {
      name: "Sequence",
      element: { type: { name: "String" } }
    }
  }
};

export const arrayQuery2: OperationQueryParameter = {
  parameterPath: ["options", "arrayQuery"],
  mapper: {
    serializedName: "arrayQuery",
    type: {
      name: "Sequence",
      element: { type: { name: "String" } }
    }
  },
  collectionFormat: QueryCollectionFormat.Ssv
};

export const arrayQuery3: OperationQueryParameter = {
  parameterPath: ["options", "arrayQuery"],
  mapper: {
    serializedName: "arrayQuery",
    type: {
      name: "Sequence",
      element: { type: { name: "String" } }
    }
  },
  collectionFormat: QueryCollectionFormat.Tsv
};

export const arrayQuery4: OperationQueryParameter = {
  parameterPath: ["options", "arrayQuery"],
  mapper: {
    serializedName: "arrayQuery",
    type: {
      name: "Sequence",
      element: { type: { name: "String" } }
    }
  },
  collectionFormat: QueryCollectionFormat.Pipes
};

export const pathItemStringPath: OperationURLParameter = {
  parameterPath: "pathItemStringPath",
  mapper: {
    serializedName: "pathItemStringPath",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const pathItemStringQuery: OperationQueryParameter = {
  parameterPath: ["options", "pathItemStringQuery"],
  mapper: {
    serializedName: "pathItemStringQuery",
    type: {
      name: "String"
    }
  }
};

export const globalStringPath: OperationURLParameter = {
  parameterPath: "globalStringPath",
  mapper: {
    serializedName: "globalStringPath",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const globalStringQuery: OperationQueryParameter = {
  parameterPath: "globalStringQuery",
  mapper: {
    serializedName: "globalStringQuery",
    type: {
      name: "String"
    }
  }
};

export const localStringPath: OperationURLParameter = {
  parameterPath: "localStringPath",
  mapper: {
    serializedName: "localStringPath",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const localStringQuery: OperationQueryParameter = {
  parameterPath: ["options", "localStringQuery"],
  mapper: {
    serializedName: "localStringQuery",
    type: {
      name: "String"
    }
  }
};
