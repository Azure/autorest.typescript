/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl, shouldDeserializeLro } from "./lroImpl";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { LroParametrizedEndpointsClientContext } from "./lroParametrizedEndpointsClientContext";
import {
  LroParametrizedEndpointsClientOptionalParams,
  LroParametrizedEndpointsClientPollWithParameterizedEndpointsOptionalParams,
  LroParametrizedEndpointsClientPollWithParameterizedEndpointsResponse
} from "./models";

export class LroParametrizedEndpointsClient extends LroParametrizedEndpointsClientContext {
  /**
   * Initializes a new instance of the LroParametrizedEndpointsClient class.
   * @param options The parameter options
   */
  constructor(options?: LroParametrizedEndpointsClientOptionalParams) {
    super(options);
  }

  /**
   * Poll with method and client level parameters in endpoint
   * @param accountName Account Name. Pass in 'local' to pass test.
   * @param options The options parameters.
   */
  async beginPollWithParameterizedEndpoints(
    accountName: string,
    options?: LroParametrizedEndpointsClientPollWithParameterizedEndpointsOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        LroParametrizedEndpointsClientPollWithParameterizedEndpointsResponse
      >,
      LroParametrizedEndpointsClientPollWithParameterizedEndpointsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<LroParametrizedEndpointsClientPollWithParameterizedEndpointsResponse> => {
      return this.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { accountName, options },
      pollWithParameterizedEndpointsOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
  }

  /**
   * Poll with method and client level parameters in endpoint
   * @param accountName Account Name. Pass in 'local' to pass test.
   * @param options The options parameters.
   */
  async beginPollWithParameterizedEndpointsAndWait(
    accountName: string,
    options?: LroParametrizedEndpointsClientPollWithParameterizedEndpointsOptionalParams
  ): Promise<
    LroParametrizedEndpointsClientPollWithParameterizedEndpointsResponse
  > {
    const poller = await this.beginPollWithParameterizedEndpoints(
      accountName,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const pollWithParameterizedEndpointsOperationSpec: coreClient.OperationSpec = {
  path: "/lroParameterizedEndpoints",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    201: {
      bodyMapper: { type: { name: "String" } }
    },
    202: {
      bodyMapper: { type: { name: "String" } }
    },
    204: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.accountName, Parameters.host],
  headerParameters: [Parameters.accept],
  serializer
};
