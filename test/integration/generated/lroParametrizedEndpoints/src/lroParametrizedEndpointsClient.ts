/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import { LROPoller, shouldDeserializeLRO } from "./lro";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { LroParametrizedEndpointsClientContext } from "./lroParametrizedEndpointsClientContext";
import {
  LroParametrizedEndpointsClientOptionalParams,
  LroParametrizedEndpointsClientPollWithParameterizedEndpointsOptionalParams,
  LroParametrizedEndpointsClientPollWithParameterizedEndpointsResponse
} from "./models";

export class LroParametrizedEndpointsClient extends LroParametrizedEndpointsClientContext {
  /**
   * Initializes a new instance of the LroParametrizedEndpointsClient class.
   * @param options The parameter options
   */
  constructor(options?: LroParametrizedEndpointsClientOptionalParams) {
    super(options);
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }

  /**
   * Poll with method and client level parameters in endpoint
   * @param accountName Account Name. Pass in 'local' to pass test.
   * @param options The options parameters.
   */
  async beginPollWithParameterizedEndpoints(
    accountName: string,
    options?: LroParametrizedEndpointsClientPollWithParameterizedEndpointsOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        LroParametrizedEndpointsClientPollWithParameterizedEndpointsResponse
      >,
      LroParametrizedEndpointsClientPollWithParameterizedEndpointsResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      accountName,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.sendOperationRequest(args, spec) as Promise<
        LroParametrizedEndpointsClientPollWithParameterizedEndpointsResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      pollWithParameterizedEndpointsOperationSpec,
      sendOperation,
      "location"
    );
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const pollWithParameterizedEndpointsOperationSpec: coreHttp.OperationSpec = {
  path: "/lroParameterizedEndpoints",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    201: {
      bodyMapper: { type: { name: "String" } }
    },
    202: {
      bodyMapper: { type: { name: "String" } }
    },
    204: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.accountName, Parameters.host],
  headerParameters: [Parameters.accept],
  serializer
};
