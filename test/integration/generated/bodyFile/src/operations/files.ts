/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BodyFileClient } from "../bodyFileClient";
import {
  FilesGetFileResponse,
  FilesGetFileLargeResponse,
  FilesGetEmptyFileResponse
} from "../models";

/**
 * Class representing a Files.
 */
export class Files {
  private readonly client: BodyFileClient;

  /**
   * Initialize a new instance of the class Files class.
   * @param client Reference to the service client
   */
  constructor(client: BodyFileClient) {
    this.client = client;
  }

  /**
   * Get file
   * @param options The options parameters.
   */
  getFile(options?: coreHttp.OperationOptions): Promise<FilesGetFileResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getFileOperationSpec
    ) as Promise<FilesGetFileResponse>;
  }

  /**
   * Get a large file
   * @param options The options parameters.
   */
  getFileLarge(
    options?: coreHttp.OperationOptions
  ): Promise<FilesGetFileLargeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getFileLargeOperationSpec
    ) as Promise<FilesGetFileLargeResponse>;
  }

  /**
   * Get empty file
   * @param options The options parameters.
   */
  getEmptyFile(
    options?: coreHttp.OperationOptions
  ): Promise<FilesGetEmptyFileResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getEmptyFileOperationSpec
    ) as Promise<FilesGetEmptyFileResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getFileOperationSpec: coreHttp.OperationSpec = {
  path: "/files/stream/nonempty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getFileLargeOperationSpec: coreHttp.OperationSpec = {
  path: "/files/stream/verylarge",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getEmptyFileOperationSpec: coreHttp.OperationSpec = {
  path: "/files/stream/empty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
