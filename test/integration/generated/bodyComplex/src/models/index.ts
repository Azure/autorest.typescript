/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * An interface representing basic.
 */
export interface Basic {
  /**
   * Basic Id
   */
  id?: number;
  /**
   * Name property with a very long description that does not fit on a single line and a line break.
   */
  name?: string;
  color?: CMYKColors;
}

/**
 * An interface representing Error.
 */
export interface ErrorModel {
  status?: number;
  message?: string;
}

/**
 * An interface representing int-wrapper.
 */
export interface IntWrapper {
  field1?: number;
  field2?: number;
}

/**
 * An interface representing long-wrapper.
 */
export interface LongWrapper {
  field1?: number;
  field2?: number;
}

/**
 * An interface representing float-wrapper.
 */
export interface FloatWrapper {
  field1?: number;
  field2?: number;
}

/**
 * An interface representing double-wrapper.
 */
export interface DoubleWrapper {
  field1?: number;
  field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose?: number;
}

/**
 * An interface representing boolean-wrapper.
 */
export interface BooleanWrapper {
  fieldTrue?: boolean;
  fieldFalse?: boolean;
}

/**
 * An interface representing string-wrapper.
 */
export interface StringWrapper {
  field?: string;
  empty?: string;
  null?: string;
}

/**
 * An interface representing date-wrapper.
 */
export interface DateWrapper {
  field?: Date;
  leap?: Date;
}

/**
 * An interface representing datetime-wrapper.
 */
export interface DatetimeWrapper {
  field?: Date;
  now?: Date;
}

/**
 * An interface representing datetimerfc1123-wrapper.
 */
export interface Datetimerfc1123Wrapper {
  field?: Date;
  now?: Date;
}

/**
 * An interface representing duration-wrapper.
 */
export interface DurationWrapper {
  field?: string;
}

/**
 * An interface representing byte-wrapper.
 */
export interface ByteWrapper {
  field?: Uint8Array;
}

/**
 * An interface representing array-wrapper.
 */
export interface ArrayWrapper {
  array?: string[];
}

/**
 * An interface representing dictionary-wrapper.
 */
export interface DictionaryWrapper {
  /**
   * Dictionary of <components·schemas·dictionary_wrapper·properties·defaultprogram·additionalproperties>
   */
  defaultProgram?: { [propertyName: string]: string };
}

/**
 * An interface representing pet.
 */
export interface Pet {
  id?: number;
  name?: string;
}

/**
 * An interface representing cat.
 */
export interface Cat {
  color?: string;
  hates?: Dog[];
}

/**
 * An interface representing dog.
 */
export interface Dog {
  food?: string;
}

/**
 * An interface representing siamese.
 */
export interface Siamese {
  breed?: string;
}

/**
 * An interface representing Fish.
 */
export interface Fish {
  fishtype: string;
  species?: string;
  length: number;
  siblings?: FishUnion[];
}

/**
 * An interface representing DotFish.
 */
export interface DotFish {
  fishType: string;
  species?: string;
}

/**
 * An interface representing DotFishMarket.
 */
export interface DotFishMarket {
  sampleSalmon?: DotSalmon;
  salmons?: DotSalmon[];
  sampleFish?: DotFishUnion;
  fishes?: DotFishUnion[];
}

/**
 * An interface representing DotSalmon.
 */
export interface DotSalmon {
  location?: string;
  iswild?: boolean;
}

/**
 * An interface representing salmon.
 */
export interface Salmon {
  location?: string;
  iswild?: boolean;
}

/**
 * An interface representing readonly-obj.
 */
export interface ReadonlyObj {
  readonly id?: string;
  size?: number;
}

/**
 * An interface representing MyBaseType.
 */
export interface MyBaseType {
  propB1?: string;
  helper?: MyBaseHelperType;
}

/**
 * An interface representing MyBaseHelperType.
 */
export interface MyBaseHelperType {
  propBH1?: string;
}

/**
 * An interface representing smart_salmon.
 */
export interface SmartSalmon {
  collegeDegree?: string;
}

/**
 * An interface representing shark.
 */
export interface Shark {
  age?: number;
  birthday: Date;
}

/**
 * An interface representing sawshark.
 */
export interface Sawshark {
  picture?: Uint8Array;
}

/**
 * An interface representing goblinshark.
 */
export interface Goblinshark {
  jawsize?: number;
  /**
   * Colors possible
   */
  color?: GoblinSharkColor;
}

/**
 * An interface representing cookiecuttershark.
 */
export interface Cookiecuttershark {}

/**
 * An interface representing MyDerivedType.
 */
export interface MyDerivedType {
  propD1?: string;
}

/**
 * Defines values for CMYKColors.
 */
export type CMYKColors = "cyan" | "Magenta" | "YELLOW" | "blacK";
/**
 * Defines values for GoblinSharkColor.
 */
export type GoblinSharkColor = "pink" | "gray" | "brown" | "RED" | "red";
