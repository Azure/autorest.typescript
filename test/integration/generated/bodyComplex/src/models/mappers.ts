/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Basic: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Basic",
    modelProperties: {
      id: { type: { name: "Number" }, serializedName: "id" },
      name: { type: { name: "String" }, serializedName: "name" },
      color: { type: { name: "String" }, serializedName: "color" }
    }
  }
};

export const ErrorModel: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      status: { type: { name: "Number" }, serializedName: "status" },
      message: { type: { name: "String" }, serializedName: "message" }
    }
  }
};

export const IntWrapper: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntWrapper",
    modelProperties: {
      field1: { type: { name: "Number" }, serializedName: "field1" },
      field2: { type: { name: "Number" }, serializedName: "field2" }
    }
  }
};

export const LongWrapper: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LongWrapper",
    modelProperties: {
      field1: { type: { name: "Number" }, serializedName: "field1" },
      field2: { type: { name: "Number" }, serializedName: "field2" }
    }
  }
};

export const FloatWrapper: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FloatWrapper",
    modelProperties: {
      field1: { type: { name: "Number" }, serializedName: "field1" },
      field2: { type: { name: "Number" }, serializedName: "field2" }
    }
  }
};

export const DoubleWrapper: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DoubleWrapper",
    modelProperties: {
      field1: { type: { name: "Number" }, serializedName: "field1" },
      field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose: {
        type: { name: "Number" },
        serializedName:
          "field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose"
      }
    }
  }
};

export const BooleanWrapper: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BooleanWrapper",
    modelProperties: {
      fieldTrue: { type: { name: "Boolean" }, serializedName: "field_true" },
      fieldFalse: { type: { name: "Boolean" }, serializedName: "field_false" }
    }
  }
};

export const StringWrapper: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StringWrapper",
    modelProperties: {
      field: { type: { name: "String" }, serializedName: "field" },
      empty: { type: { name: "String" }, serializedName: "empty" },
      null: { type: { name: "String" }, serializedName: "null" }
    }
  }
};

export const DateWrapper: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DateWrapper",
    modelProperties: {
      field: { type: { name: "Date" }, serializedName: "field" },
      leap: { type: { name: "Date" }, serializedName: "leap" }
    }
  }
};

export const DatetimeWrapper: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatetimeWrapper",
    modelProperties: {
      field: { type: { name: "DateTime" }, serializedName: "field" },
      now: { type: { name: "DateTime" }, serializedName: "now" }
    }
  }
};

export const Datetimerfc1123Wrapper: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Datetimerfc1123Wrapper",
    modelProperties: {
      field: { type: { name: "DateTimeRfc1123" }, serializedName: "field" },
      now: { type: { name: "DateTimeRfc1123" }, serializedName: "now" }
    }
  }
};

export const DurationWrapper: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DurationWrapper",
    modelProperties: {
      field: { type: { name: "TimeSpan" }, serializedName: "field" }
    }
  }
};

export const ByteWrapper: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ByteWrapper",
    modelProperties: {
      field: { type: { name: "ByteArray" }, serializedName: "field" }
    }
  }
};

export const ArrayWrapper: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArrayWrapper",
    modelProperties: {
      array: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "array"
      }
    }
  }
};

export const DictionaryWrapper: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DictionaryWrapper",
    modelProperties: {
      defaultProgram: {
        type: { name: "Dictionary", value: { type: { name: "String" } } },
        serializedName: "defaultProgram"
      }
    }
  }
};

export const Pet: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Pet",
    modelProperties: {
      id: { type: { name: "Number" }, serializedName: "id" },
      name: { type: { name: "String" }, serializedName: "name" }
    }
  }
};

export const Cat: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Cat",
    modelProperties: {
      ...Pet.type.modelProperties,
      color: { type: { name: "String" }, serializedName: "color" },
      hates: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Dog" } }
        },
        serializedName: "hates"
      }
    }
  }
};

export const Dog: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dog",
    modelProperties: {
      ...Pet.type.modelProperties,
      food: { type: { name: "String" }, serializedName: "food" }
    }
  }
};

export const Siamese: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Siamese",
    modelProperties: {
      ...Cat.type.modelProperties,
      breed: { type: { name: "String" }, serializedName: "breed" }
    }
  }
};

export const Fish: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Fish",
    uberParent: "Fish",
    polymorphicDiscriminator: {
      serializedName: "fishtype",
      clientName: "fishtype"
    },
    modelProperties: {
      fishtype: {
        type: { name: "String" },
        serializedName: "fishtype",
        required: true
      },
      species: { type: { name: "String" }, serializedName: "species" },
      length: {
        type: { name: "Number" },
        serializedName: "length",
        required: true
      },
      siblings: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Fish" } }
        },
        serializedName: "siblings"
      }
    }
  }
};

export const DotFish: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DotFish",
    uberParent: "DotFish",
    polymorphicDiscriminator: {
      serializedName: "fish\\.type",
      clientName: "fish\\.type"
    },
    modelProperties: {
      fishType: {
        type: { name: "String" },
        serializedName: "fish\\.type",
        required: true
      },
      species: { type: { name: "String" }, serializedName: "species" }
    }
  }
};

export const DotFishMarket: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DotFishMarket",
    modelProperties: {
      sampleSalmon: {
        serializedName: "sampleSalmon",
        type: { name: "Composite", className: "DotSalmon" }
      },
      salmons: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DotSalmon" } }
        },
        serializedName: "salmons"
      },
      sampleFish: {
        serializedName: "sampleFish",
        type: { name: "Composite", className: "DotFish" }
      },
      fishes: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DotFish" } }
        },
        serializedName: "fishes"
      }
    }
  }
};

export const DotSalmon: coreHttp.CompositeMapper = {
  serializedName: "DotSalmon",
  type: {
    name: "Composite",
    className: "DotSalmon",
    uberParent: "DotFish",
    polymorphicDiscriminator: DotFish.type.polymorphicDiscriminator,
    modelProperties: {
      ...DotFish.type.modelProperties,
      location: { type: { name: "String" }, serializedName: "location" },
      iswild: { type: { name: "Boolean" }, serializedName: "iswild" }
    }
  }
};

export const Salmon: coreHttp.CompositeMapper = {
  serializedName: "salmon",
  type: {
    name: "Composite",
    className: "Salmon",
    uberParent: "Fish",
    polymorphicDiscriminator: {
      serializedName: "fishtype",
      clientName: "fishtype"
    },
    modelProperties: {
      ...Fish.type.modelProperties,
      location: { type: { name: "String" }, serializedName: "location" },
      iswild: { type: { name: "Boolean" }, serializedName: "iswild" }
    }
  }
};

export const ReadonlyObj: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReadonlyObj",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", readOnly: true },
      size: { type: { name: "Number" }, serializedName: "size" }
    }
  }
};

export const MyBaseType: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MyBaseType",
    uberParent: "MyBaseType",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        type: { name: "String" },
        defaultValue: "Kind1",
        isConstant: true,
        serializedName: "kind"
      },
      propB1: { type: { name: "String" }, serializedName: "propB1" },
      propBH1: { type: { name: "String" }, serializedName: "helper.propBH1" }
    }
  }
};

export const SmartSalmon: coreHttp.CompositeMapper = {
  serializedName: "smart_salmon",
  type: {
    name: "Composite",
    className: "SmartSalmon",
    uberParent: "Fish",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: Fish.type.polymorphicDiscriminator,
    modelProperties: {
      ...Salmon.type.modelProperties,
      collegeDegree: {
        type: { name: "String" },
        serializedName: "college_degree"
      }
    }
  }
};

export const Shark: coreHttp.CompositeMapper = {
  serializedName: "shark",
  type: {
    name: "Composite",
    className: "Shark",
    uberParent: "Fish",
    polymorphicDiscriminator: {
      serializedName: "fishtype",
      clientName: "fishtype"
    },
    modelProperties: {
      ...Fish.type.modelProperties,
      age: { type: { name: "Number" }, serializedName: "age" },
      birthday: {
        type: { name: "DateTime" },
        serializedName: "birthday",
        required: true
      }
    }
  }
};

export const Sawshark: coreHttp.CompositeMapper = {
  serializedName: "sawshark",
  type: {
    name: "Composite",
    className: "Sawshark",
    uberParent: "Fish",
    polymorphicDiscriminator: Fish.type.polymorphicDiscriminator,
    modelProperties: {
      ...Shark.type.modelProperties,
      picture: { type: { name: "ByteArray" }, serializedName: "picture" }
    }
  }
};

export const Goblinshark: coreHttp.CompositeMapper = {
  serializedName: "goblin",
  type: {
    name: "Composite",
    className: "Goblinshark",
    uberParent: "Fish",
    polymorphicDiscriminator: Fish.type.polymorphicDiscriminator,
    modelProperties: {
      ...Shark.type.modelProperties,
      jawsize: { type: { name: "Number" }, serializedName: "jawsize" },
      color: {
        type: { name: "String" },
        serializedName: "color",
        defaultValue: "gray"
      }
    }
  }
};

export const Cookiecuttershark: coreHttp.CompositeMapper = {
  serializedName: "cookiecuttershark",
  type: {
    name: "Composite",
    className: "Cookiecuttershark",
    uberParent: "Fish",
    polymorphicDiscriminator: Fish.type.polymorphicDiscriminator,
    modelProperties: {
      ...Shark.type.modelProperties
    }
  }
};

export const MyDerivedType: coreHttp.CompositeMapper = {
  serializedName: "Kind1",
  type: {
    name: "Composite",
    className: "MyDerivedType",
    uberParent: "MyBaseType",
    polymorphicDiscriminator: MyBaseType.type.polymorphicDiscriminator,
    modelProperties: {
      ...MyBaseType.type.modelProperties,
      propD1: { type: { name: "String" }, serializedName: "propD1" }
    }
  }
};

export let discriminators = {
  Fish: Fish,
  DotFish: DotFish,
  "DotFish.DotSalmon": DotSalmon,
  "Fish.salmon": Salmon,
  MyBaseType: MyBaseType,
  "Fish.smart_salmon": SmartSalmon,
  "Fish.shark": Shark,
  "Fish.sawshark": Sawshark,
  "Fish.goblin": Goblinshark,
  "Fish.cookiecuttershark": Cookiecuttershark,
  "MyBaseType.Kind1": MyDerivedType
};
