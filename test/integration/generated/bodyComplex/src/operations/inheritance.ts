/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import { BodyComplexClient } from "../bodyComplexClient";

/**
 * Class representing a Inheritance.
 */
export class Inheritance {
  private readonly client: BodyComplexClient;

  /**
   * Initialize a new instance of the class Inheritance class.
   * @param client Reference to the service client
   */
  constructor(client: BodyComplexClient) {
    this.client = client;
  }

  /**
   * Get complex types that extend others
   * @param options The options parameters.
   */
  getValid(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getValid(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getValid(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getValid(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getValidOperationSpec,
      callback
    );
  }

  /**
   * Put complex types that extend others
   * @param complexBody Please put a siamese with id=2, name="Siameee", color=green, breed=persion, which hates 2 dogs, the 1st one named "Potato" with id=1 and food="tomato", and the 2nd one named "Tomato" with id=-1 and food="french fries".
   * @param options The options parameters.
   */
  putValid(
    complexBody: Models.Siamese,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param complexBody Please put a siamese with id=2, name="Siameee", color=green, breed=persion, which hates 2 dogs, the 1st one named "Potato" with id=1 and food="tomato", and the 2nd one named "Tomato" with id=-1 and food="french fries".
   * @param callback The callback.
   */
  putValid(
    complexBody: Models.Siamese,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put a siamese with id=2, name="Siameee", color=green, breed=persion, which hates 2 dogs, the 1st one named "Potato" with id=1 and food="tomato", and the 2nd one named "Tomato" with id=-1 and food="french fries".
   * @param options The options parameters.
   * @param callback The callback.
   */
  putValid(
    complexBody: Models.Siamese,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putValid(
    complexBody: Models.Siamese,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putValidOperationSpec,
      callback
    );
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers);

const getValidOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/inheritance/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Siamese
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putValidOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/inheritance/valid",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "complexBody",
    mapper: Mappers.Siamese
  },
  serializer
};
