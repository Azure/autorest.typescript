/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BodyComplexClient } from "../bodyComplexClient";

/**
 * Class representing a Polymorphism.
 */
export class Polymorphism {
  private readonly client: BodyComplexClient;

  /**
   * Initialize a new instance of the class Polymorphism class.
   * @param client Reference to the service client
   */
  constructor(client: BodyComplexClient) {
    this.client = client;
  }

  /**
   * Get complex types that are polymorphic
   * @param options The options parameters.
   */
  getValid(
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PolymorphismGetValidResponse>;
  /**
   * @param callback The callback.
   */
  getValid(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getValid(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getValid(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<Models.PolymorphismGetValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getValidOperationSpec,
      callback
    ) as Promise<Models.PolymorphismGetValidResponse>;
  }

  /**
   * Put complex types that are polymorphic
   * @param complexBody Please put a salmon that looks like this:
   * {
   *         'fishtype':'Salmon',
   *         'location':'alaska',
   *         'iswild':true,
   *         'species':'king',
   *         'length':1.0,
   *         'siblings':[
   *           {
   *             'fishtype':'Shark',
   *             'age':6,
   *             'birthday': '2012-01-05T01:00:00Z',
   *             'length':20.0,
   *             'species':'predator',
   *           },
   *           {
   *             'fishtype':'Sawshark',
   *             'age':105,
   *             'birthday': '1900-01-05T01:00:00Z',
   *             'length':10.0,
   *             'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
   *             'species':'dangerous',
   *           },
   *           {
   *             'fishtype': 'goblin',
   *             'age': 1,
   *             'birthday': '2015-08-08T00:00:00Z',
   *             'length': 30.0,
   *             'species': 'scary',
   *             'jawsize': 5
   *           }
   *         ]
   *       };
   * @param options The options parameters.
   */
  putValid(
    complexBody: Models.FishUnion,
    options?: coreHttp.RequestOptionsBase
  ): Promise<coreHttp.RestResponse>;
  /**
   * @param complexBody Please put a salmon that looks like this:
   * {
   *         'fishtype':'Salmon',
   *         'location':'alaska',
   *         'iswild':true,
   *         'species':'king',
   *         'length':1.0,
   *         'siblings':[
   *           {
   *             'fishtype':'Shark',
   *             'age':6,
   *             'birthday': '2012-01-05T01:00:00Z',
   *             'length':20.0,
   *             'species':'predator',
   *           },
   *           {
   *             'fishtype':'Sawshark',
   *             'age':105,
   *             'birthday': '1900-01-05T01:00:00Z',
   *             'length':10.0,
   *             'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
   *             'species':'dangerous',
   *           },
   *           {
   *             'fishtype': 'goblin',
   *             'age': 1,
   *             'birthday': '2015-08-08T00:00:00Z',
   *             'length': 30.0,
   *             'species': 'scary',
   *             'jawsize': 5
   *           }
   *         ]
   *       };
   * @param callback The callback.
   */
  putValid(
    complexBody: Models.FishUnion,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put a salmon that looks like this:
   * {
   *         'fishtype':'Salmon',
   *         'location':'alaska',
   *         'iswild':true,
   *         'species':'king',
   *         'length':1.0,
   *         'siblings':[
   *           {
   *             'fishtype':'Shark',
   *             'age':6,
   *             'birthday': '2012-01-05T01:00:00Z',
   *             'length':20.0,
   *             'species':'predator',
   *           },
   *           {
   *             'fishtype':'Sawshark',
   *             'age':105,
   *             'birthday': '1900-01-05T01:00:00Z',
   *             'length':10.0,
   *             'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
   *             'species':'dangerous',
   *           },
   *           {
   *             'fishtype': 'goblin',
   *             'age': 1,
   *             'birthday': '2015-08-08T00:00:00Z',
   *             'length': 30.0,
   *             'species': 'scary',
   *             'jawsize': 5
   *           }
   *         ]
   *       };
   * @param options The options parameters.
   * @param callback The callback.
   */
  putValid(
    complexBody: Models.FishUnion,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putValid(
    complexBody: Models.FishUnion,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putValidOperationSpec,
      callback
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get complex types that are polymorphic, JSON key contains a dot
   * @param options The options parameters.
   */
  getDotSyntax(
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PolymorphismGetDotSyntaxResponse>;
  /**
   * @param callback The callback.
   */
  getDotSyntax(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getDotSyntax(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getDotSyntax(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<Models.PolymorphismGetDotSyntaxResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDotSyntaxOperationSpec,
      callback
    ) as Promise<Models.PolymorphismGetDotSyntaxResponse>;
  }

  /**
   * Get complex object composing a polymorphic scalar property and array property with polymorphic element type, with discriminator specified. Deserialization must NOT fail and use the discriminator type specified on the wire.
   * @param options The options parameters.
   */
  getComposedWithDiscriminator(
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PolymorphismGetComposedWithDiscriminatorResponse>;
  /**
   * @param callback The callback.
   */
  getComposedWithDiscriminator(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getComposedWithDiscriminator(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getComposedWithDiscriminator(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<Models.PolymorphismGetComposedWithDiscriminatorResponse> {
    return this.client.sendOperationRequest(
      { options },
      getComposedWithDiscriminatorOperationSpec,
      callback
    ) as Promise<Models.PolymorphismGetComposedWithDiscriminatorResponse>;
  }

  /**
   * Get complex object composing a polymorphic scalar property and array property with polymorphic element type, without discriminator specified on wire. Deserialization must NOT fail and use the explicit type of the property.
   * @param options The options parameters.
   */
  getComposedWithoutDiscriminator(
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PolymorphismGetComposedWithoutDiscriminatorResponse>;
  /**
   * @param callback The callback.
   */
  getComposedWithoutDiscriminator(
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getComposedWithoutDiscriminator(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getComposedWithoutDiscriminator(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<Models.PolymorphismGetComposedWithoutDiscriminatorResponse> {
    return this.client.sendOperationRequest(
      { options },
      getComposedWithoutDiscriminatorOperationSpec,
      callback
    ) as Promise<Models.PolymorphismGetComposedWithoutDiscriminatorResponse>;
  }

  /**
   * Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties
   * @param options The options parameters.
   */
  getComplicated(
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PolymorphismGetComplicatedResponse>;
  /**
   * @param callback The callback.
   */
  getComplicated(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getComplicated(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getComplicated(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<Models.PolymorphismGetComplicatedResponse> {
    return this.client.sendOperationRequest(
      { options },
      getComplicatedOperationSpec,
      callback
    ) as Promise<Models.PolymorphismGetComplicatedResponse>;
  }

  /**
   * Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties
   * @param complexBody
   * @param options The options parameters.
   */
  putComplicated(
    complexBody: Models.SalmonUnion,
    options?: coreHttp.RequestOptionsBase
  ): Promise<coreHttp.RestResponse>;
  /**
   * @param complexBody
   * @param callback The callback.
   */
  putComplicated(
    complexBody: Models.SalmonUnion,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody
   * @param options The options parameters.
   * @param callback The callback.
   */
  putComplicated(
    complexBody: Models.SalmonUnion,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putComplicated(
    complexBody: Models.SalmonUnion,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putComplicatedOperationSpec,
      callback
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Put complex types that are polymorphic, omitting the discriminator
   * @param complexBody
   * @param options The options parameters.
   */
  putMissingDiscriminator(
    complexBody: Models.SalmonUnion,
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PolymorphismPutMissingDiscriminatorResponse>;
  /**
   * @param complexBody
   * @param callback The callback.
   */
  putMissingDiscriminator(
    complexBody: Models.SalmonUnion,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody
   * @param options The options parameters.
   * @param callback The callback.
   */
  putMissingDiscriminator(
    complexBody: Models.SalmonUnion,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putMissingDiscriminator(
    complexBody: Models.SalmonUnion,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<Models.PolymorphismPutMissingDiscriminatorResponse> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putMissingDiscriminatorOperationSpec,
      callback
    ) as Promise<Models.PolymorphismPutMissingDiscriminatorResponse>;
  }

  /**
   * Put complex types that are polymorphic, attempting to omit required 'birthday' field - the request should not be allowed from the client
   * @param complexBody Please put a salmon that looks like this:
   * {
   *         'fishtype':'Salmon',
   *         'location':'alaska',
   *         'iswild':true,
   *         'species':'king',
   *         'length':1.0,
   *         'siblings':[
   *           {
   *             'fishtype':'Shark',
   *             'age':6,
   *             'birthday': '2012-01-05T01:00:00Z',
   *             'length':20.0,
   *             'species':'predator',
   *           },
   *           {
   *             'fishtype':'Sawshark',
   *             'age':105,
   *             'birthday': '1900-01-05T01:00:00Z',
   *             'length':10.0,
   *             'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
   *             'species':'dangerous',
   *           },
   *           {
   *             'fishtype': 'goblin',
   *             'age': 1,
   *             'birthday': '2015-08-08T00:00:00Z',
   *             'length': 30.0,
   *             'species': 'scary',
   *             'jawsize': 5
   *           }
   *         ]
   *       };
   * @param options The options parameters.
   */
  putValidMissingRequired(
    complexBody: Models.FishUnion,
    options?: coreHttp.RequestOptionsBase
  ): Promise<coreHttp.RestResponse>;
  /**
   * @param complexBody Please put a salmon that looks like this:
   * {
   *         'fishtype':'Salmon',
   *         'location':'alaska',
   *         'iswild':true,
   *         'species':'king',
   *         'length':1.0,
   *         'siblings':[
   *           {
   *             'fishtype':'Shark',
   *             'age':6,
   *             'birthday': '2012-01-05T01:00:00Z',
   *             'length':20.0,
   *             'species':'predator',
   *           },
   *           {
   *             'fishtype':'Sawshark',
   *             'age':105,
   *             'birthday': '1900-01-05T01:00:00Z',
   *             'length':10.0,
   *             'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
   *             'species':'dangerous',
   *           },
   *           {
   *             'fishtype': 'goblin',
   *             'age': 1,
   *             'birthday': '2015-08-08T00:00:00Z',
   *             'length': 30.0,
   *             'species': 'scary',
   *             'jawsize': 5
   *           }
   *         ]
   *       };
   * @param callback The callback.
   */
  putValidMissingRequired(
    complexBody: Models.FishUnion,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put a salmon that looks like this:
   * {
   *         'fishtype':'Salmon',
   *         'location':'alaska',
   *         'iswild':true,
   *         'species':'king',
   *         'length':1.0,
   *         'siblings':[
   *           {
   *             'fishtype':'Shark',
   *             'age':6,
   *             'birthday': '2012-01-05T01:00:00Z',
   *             'length':20.0,
   *             'species':'predator',
   *           },
   *           {
   *             'fishtype':'Sawshark',
   *             'age':105,
   *             'birthday': '1900-01-05T01:00:00Z',
   *             'length':10.0,
   *             'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
   *             'species':'dangerous',
   *           },
   *           {
   *             'fishtype': 'goblin',
   *             'age': 1,
   *             'birthday': '2015-08-08T00:00:00Z',
   *             'length': 30.0,
   *             'species': 'scary',
   *             'jawsize': 5
   *           }
   *         ]
   *       };
   * @param options The options parameters.
   * @param callback The callback.
   */
  putValidMissingRequired(
    complexBody: Models.FishUnion,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putValidMissingRequired(
    complexBody: Models.FishUnion,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putValidMissingRequiredOperationSpec,
      callback
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers);

const getValidOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/polymorphism/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Fish
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putValidOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/polymorphism/valid",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody15,
  serializer
};
const getDotSyntaxOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/polymorphism/dotsyntax",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DotFish
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const getComposedWithDiscriminatorOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/polymorphism/composedWithDiscriminator",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DotFishMarket
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const getComposedWithoutDiscriminatorOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/polymorphism/composedWithoutDiscriminator",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DotFishMarket
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const getComplicatedOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/polymorphism/complicated",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Salmon
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putComplicatedOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/polymorphism/complicated",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody16,
  serializer
};
const putMissingDiscriminatorOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/polymorphism/missingdiscriminator",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Salmon
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody16,
  serializer
};
const putValidMissingRequiredOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/polymorphism/missingrequired/invalid",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody15,
  serializer
};
