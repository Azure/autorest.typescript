/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import { BodyComplexClient } from "../bodyComplexClient";

/**
 * Class representing a Primitive.
 */
export class Primitive {
  private readonly client: BodyComplexClient;

  /**
   * Initialize a new instance of the class Primitive class.
   * @param client Reference to the service client
   */
  constructor(client: BodyComplexClient) {
    this.client = client;
  }

  /**
   * Get complex types with integer properties
   * @param options The options parameters.
   */
  getInt(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getInt(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getInt(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getInt(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getIntOperationSpec,
      callback
    );
  }

  /**
   * Put complex types with integer properties
   * @param complexBody Please put -1 and 2
   * @param options The options parameters.
   */
  putInt(
    complexBody: Models.IntWrapper,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param complexBody Please put -1 and 2
   * @param callback The callback.
   */
  putInt(
    complexBody: Models.IntWrapper,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put -1 and 2
   * @param options The options parameters.
   * @param callback The callback.
   */
  putInt(
    complexBody: Models.IntWrapper,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putInt(
    complexBody: Models.IntWrapper,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putIntOperationSpec,
      callback
    );
  }

  /**
   * Get complex types with long properties
   * @param options The options parameters.
   */
  getLong(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getLong(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getLong(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getLong(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getLongOperationSpec,
      callback
    );
  }

  /**
   * Put complex types with long properties
   * @param complexBody Please put 1099511627775 and -999511627788
   * @param options The options parameters.
   */
  putLong(
    complexBody: Models.LongWrapper,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param complexBody Please put 1099511627775 and -999511627788
   * @param callback The callback.
   */
  putLong(
    complexBody: Models.LongWrapper,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put 1099511627775 and -999511627788
   * @param options The options parameters.
   * @param callback The callback.
   */
  putLong(
    complexBody: Models.LongWrapper,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putLong(
    complexBody: Models.LongWrapper,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putLongOperationSpec,
      callback
    );
  }

  /**
   * Get complex types with float properties
   * @param options The options parameters.
   */
  getFloat(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getFloat(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getFloat(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getFloat(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getFloatOperationSpec,
      callback
    );
  }

  /**
   * Put complex types with float properties
   * @param complexBody Please put 1.05 and -0.003
   * @param options The options parameters.
   */
  putFloat(
    complexBody: Models.FloatWrapper,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param complexBody Please put 1.05 and -0.003
   * @param callback The callback.
   */
  putFloat(
    complexBody: Models.FloatWrapper,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put 1.05 and -0.003
   * @param options The options parameters.
   * @param callback The callback.
   */
  putFloat(
    complexBody: Models.FloatWrapper,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putFloat(
    complexBody: Models.FloatWrapper,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putFloatOperationSpec,
      callback
    );
  }

  /**
   * Get complex types with double properties
   * @param options The options parameters.
   */
  getDouble(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getDouble(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getDouble(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getDouble(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getDoubleOperationSpec,
      callback
    );
  }

  /**
   * Put complex types with double properties
   * @param complexBody Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
   * @param options The options parameters.
   */
  putDouble(
    complexBody: Models.DoubleWrapper,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param complexBody Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
   * @param callback The callback.
   */
  putDouble(
    complexBody: Models.DoubleWrapper,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
   * @param options The options parameters.
   * @param callback The callback.
   */
  putDouble(
    complexBody: Models.DoubleWrapper,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putDouble(
    complexBody: Models.DoubleWrapper,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putDoubleOperationSpec,
      callback
    );
  }

  /**
   * Get complex types with bool properties
   * @param options The options parameters.
   */
  getBool(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getBool(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getBool(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getBool(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getBoolOperationSpec,
      callback
    );
  }

  /**
   * Put complex types with bool properties
   * @param complexBody Please put true and false
   * @param options The options parameters.
   */
  putBool(
    complexBody: Models.BooleanWrapper,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param complexBody Please put true and false
   * @param callback The callback.
   */
  putBool(
    complexBody: Models.BooleanWrapper,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put true and false
   * @param options The options parameters.
   * @param callback The callback.
   */
  putBool(
    complexBody: Models.BooleanWrapper,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putBool(
    complexBody: Models.BooleanWrapper,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putBoolOperationSpec,
      callback
    );
  }

  /**
   * Get complex types with string properties
   * @param options The options parameters.
   */
  getString(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getString(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getString(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getString(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getStringOperationSpec,
      callback
    );
  }

  /**
   * Put complex types with string properties
   * @param complexBody Please put 'goodrequest', '', and null
   * @param options The options parameters.
   */
  putString(
    complexBody: Models.StringWrapper,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param complexBody Please put 'goodrequest', '', and null
   * @param callback The callback.
   */
  putString(
    complexBody: Models.StringWrapper,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put 'goodrequest', '', and null
   * @param options The options parameters.
   * @param callback The callback.
   */
  putString(
    complexBody: Models.StringWrapper,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putString(
    complexBody: Models.StringWrapper,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putStringOperationSpec,
      callback
    );
  }

  /**
   * Get complex types with date properties
   * @param options The options parameters.
   */
  getDate(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getDate(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getDate(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getDate(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getDateOperationSpec,
      callback
    );
  }

  /**
   * Put complex types with date properties
   * @param complexBody Please put '0001-01-01' and '2016-02-29'
   * @param options The options parameters.
   */
  putDate(
    complexBody: Models.DateWrapper,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param complexBody Please put '0001-01-01' and '2016-02-29'
   * @param callback The callback.
   */
  putDate(
    complexBody: Models.DateWrapper,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put '0001-01-01' and '2016-02-29'
   * @param options The options parameters.
   * @param callback The callback.
   */
  putDate(
    complexBody: Models.DateWrapper,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putDate(
    complexBody: Models.DateWrapper,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putDateOperationSpec,
      callback
    );
  }

  /**
   * Get complex types with datetime properties
   * @param options The options parameters.
   */
  getDateTime(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getDateTime(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getDateTime(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getDateTime(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getDateTimeOperationSpec,
      callback
    );
  }

  /**
   * Put complex types with datetime properties
   * @param complexBody Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
   * @param options The options parameters.
   */
  putDateTime(
    complexBody: Models.DatetimeWrapper,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param complexBody Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
   * @param callback The callback.
   */
  putDateTime(
    complexBody: Models.DatetimeWrapper,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
   * @param options The options parameters.
   * @param callback The callback.
   */
  putDateTime(
    complexBody: Models.DatetimeWrapper,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putDateTime(
    complexBody: Models.DatetimeWrapper,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putDateTimeOperationSpec,
      callback
    );
  }

  /**
   * Get complex types with datetimeRfc1123 properties
   * @param options The options parameters.
   */
  getDateTimeRfc1123(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getDateTimeRfc1123(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getDateTimeRfc1123(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getDateTimeRfc1123(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getDateTimeRfc1123OperationSpec,
      callback
    );
  }

  /**
   * Put complex types with datetimeRfc1123 properties
   * @param complexBody Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
   * @param options The options parameters.
   */
  putDateTimeRfc1123(
    complexBody: Models.Datetimerfc1123Wrapper,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param complexBody Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
   * @param callback The callback.
   */
  putDateTimeRfc1123(
    complexBody: Models.Datetimerfc1123Wrapper,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
   * @param options The options parameters.
   * @param callback The callback.
   */
  putDateTimeRfc1123(
    complexBody: Models.Datetimerfc1123Wrapper,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putDateTimeRfc1123(
    complexBody: Models.Datetimerfc1123Wrapper,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putDateTimeRfc1123OperationSpec,
      callback
    );
  }

  /**
   * Get complex types with duration properties
   * @param options The options parameters.
   */
  getDuration(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getDuration(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getDuration(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getDuration(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getDurationOperationSpec,
      callback
    );
  }

  /**
   * Put complex types with duration properties
   * @param complexBody Please put 'P123DT22H14M12.011S'
   * @param options The options parameters.
   */
  putDuration(
    complexBody: Models.DurationWrapper,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param complexBody Please put 'P123DT22H14M12.011S'
   * @param callback The callback.
   */
  putDuration(
    complexBody: Models.DurationWrapper,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put 'P123DT22H14M12.011S'
   * @param options The options parameters.
   * @param callback The callback.
   */
  putDuration(
    complexBody: Models.DurationWrapper,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putDuration(
    complexBody: Models.DurationWrapper,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putDurationOperationSpec,
      callback
    );
  }

  /**
   * Get complex types with byte properties
   * @param options The options parameters.
   */
  getByte(options?: coreHttp.RequestOptionsBase): Promise<any>;
  /**
   * @param callback The callback.
   */
  getByte(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The options parameters.
   * @param callback The callback.
   */
  getByte(
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  getByte(
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { options },
      getByteOperationSpec,
      callback
    );
  }

  /**
   * Put complex types with byte properties
   * @param complexBody Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
   * @param options The options parameters.
   */
  putByte(
    complexBody: Models.ByteWrapper,
    options?: coreHttp.RequestOptionsBase
  ): Promise<any>;
  /**
   * @param complexBody Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
   * @param callback The callback.
   */
  putByte(
    complexBody: Models.ByteWrapper,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  /**
   * @param complexBody Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
   * @param options The options parameters.
   * @param callback The callback.
   */
  putByte(
    complexBody: Models.ByteWrapper,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<any>
  ): void;
  putByte(
    complexBody: Models.ByteWrapper,
    options?: coreHttp.RequestOptionsBase,
    callback?: coreHttp.ServiceCallback<any>
  ): Promise<any> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putByteOperationSpec,
      callback
    );
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers);

const getIntOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/integer",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putIntOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/integer",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "complexBody",
    mapper: Mappers.IntWrapper
  },
  serializer
};
const getLongOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/long",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putLongOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/long",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "complexBody",
    mapper: Mappers.LongWrapper
  },
  serializer
};
const getFloatOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/float",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FloatWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putFloatOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/float",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "complexBody",
    mapper: Mappers.FloatWrapper
  },
  serializer
};
const getDoubleOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/double",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DoubleWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putDoubleOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/double",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "complexBody",
    mapper: Mappers.DoubleWrapper
  },
  serializer
};
const getBoolOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/bool",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BooleanWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putBoolOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/bool",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "complexBody",
    mapper: Mappers.BooleanWrapper
  },
  serializer
};
const getStringOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/string",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StringWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putStringOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/string",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "complexBody",
    mapper: Mappers.StringWrapper
  },
  serializer
};
const getDateOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/date",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DateWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putDateOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/date",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "complexBody",
    mapper: Mappers.DateWrapper
  },
  serializer
};
const getDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/datetime",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DatetimeWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putDateTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/datetime",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "complexBody",
    mapper: Mappers.DatetimeWrapper
  },
  serializer
};
const getDateTimeRfc1123OperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/datetimerfc1123",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Datetimerfc1123Wrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putDateTimeRfc1123OperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/datetimerfc1123",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "complexBody",
    mapper: Mappers.Datetimerfc1123Wrapper
  },
  serializer
};
const getDurationOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/duration",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DurationWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putDurationOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/duration",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "complexBody",
    mapper: Mappers.DurationWrapper
  },
  serializer
};
const getByteOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/byte",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ByteWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putByteOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/primitive/byte",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: {
    parameterPath: "complexBody",
    mapper: Mappers.ByteWrapper
  },
  serializer
};
