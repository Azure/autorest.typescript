/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BodyComplexClient } from "../bodyComplexClient";

/**
 * Class representing a Polymorphicrecursive.
 */
export class Polymorphicrecursive {
  private readonly client: BodyComplexClient;

  /**
   * Initialize a new instance of the class Polymorphicrecursive class.
   * @param client Reference to the service client
   */
  constructor(client: BodyComplexClient) {
    this.client = client;
  }

  /**
   * Get complex types that are polymorphic and have recursive references
   * @param options The options parameters.
   */
  getValid(
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PolymorphicrecursiveGetValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getValidOperationSpec
    ) as Promise<Models.PolymorphicrecursiveGetValidResponse>;
  }

  /**
   * Put complex types that are polymorphic and have recursive references
   * @param complexBody Please put a salmon that looks like this:
   * {
   *         'fishtype':'Salmon',
   *         'location':'alaska',
   *         'iswild':true,
   *         'species':'king',
   *         'length':1.0,
   *         'siblings':[
   *           {
   *             'fishtype':'Shark',
   *             'age':6,
   *             'birthday': '2012-01-05T01:00:00Z',
   *             'length':20.0,
   *             'species':'predator',
   *           },
   *           {
   *             'fishtype':'Sawshark',
   *             'age':105,
   *             'birthday': '1900-01-05T01:00:00Z',
   *             'length':10.0,
   *             'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
   *             'species':'dangerous',
   *           },
   *           {
   *             'fishtype': 'goblin',
   *             'age': 1,
   *             'birthday': '2015-08-08T00:00:00Z',
   *             'length': 30.0,
   *             'species': 'scary',
   *             'jawsize': 5
   *           }
   *         ]
   *       };
   * @param options The options parameters.
   */
  putValid(
    complexBody: Models.FishUnion,
    options?: coreHttp.RequestOptionsBase
  ): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      { complexBody, options },
      putValidOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers);

const getValidOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/polymorphicrecursive/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Fish
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
const putValidOperationSpec: coreHttp.OperationSpec = {
  path: "/complex/polymorphicrecursive/valid",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.complexBody15,
  serializer
};
