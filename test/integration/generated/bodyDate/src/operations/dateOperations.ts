/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BodyDateClient } from "../bodyDateClient";
import {
  DateOperationsGetNullResponse,
  DateOperationsGetInvalidDateResponse,
  DateOperationsGetOverflowDateResponse,
  DateOperationsGetUnderflowDateResponse,
  DateOperationsGetMaxDateResponse,
  DateOperationsGetMinDateResponse
} from "../models";

/**
 * Class representing a DateOperations.
 */
export class DateOperations {
  private readonly client: BodyDateClient;

  /**
   * Initialize a new instance of the class DateOperations class.
   * @param client Reference to the service client
   */
  constructor(client: BodyDateClient) {
    this.client = client;
  }

  /**
   * Get null date value
   * @param options The options parameters.
   */
  getNull(
    options?: coreHttp.OperationOptions
  ): Promise<DateOperationsGetNullResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getNullOperationSpec
    ) as Promise<DateOperationsGetNullResponse>;
  }

  /**
   * Get invalid date value
   * @param options The options parameters.
   */
  getInvalidDate(
    options?: coreHttp.OperationOptions
  ): Promise<DateOperationsGetInvalidDateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getInvalidDateOperationSpec
    ) as Promise<DateOperationsGetInvalidDateResponse>;
  }

  /**
   * Get overflow date value
   * @param options The options parameters.
   */
  getOverflowDate(
    options?: coreHttp.OperationOptions
  ): Promise<DateOperationsGetOverflowDateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getOverflowDateOperationSpec
    ) as Promise<DateOperationsGetOverflowDateResponse>;
  }

  /**
   * Get underflow date value
   * @param options The options parameters.
   */
  getUnderflowDate(
    options?: coreHttp.OperationOptions
  ): Promise<DateOperationsGetUnderflowDateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getUnderflowDateOperationSpec
    ) as Promise<DateOperationsGetUnderflowDateResponse>;
  }

  /**
   * Put max date value 9999-12-31
   * @param dateBody
   * @param options The options parameters.
   */
  putMaxDate(
    dateBody: Date,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { dateBody, options: operationOptions },
      putMaxDateOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get max date value 9999-12-31
   * @param options The options parameters.
   */
  getMaxDate(
    options?: coreHttp.OperationOptions
  ): Promise<DateOperationsGetMaxDateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getMaxDateOperationSpec
    ) as Promise<DateOperationsGetMaxDateResponse>;
  }

  /**
   * Put min date value 0000-01-01
   * @param dateBody
   * @param options The options parameters.
   */
  putMinDate(
    dateBody: Date,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { dateBody, options: operationOptions },
      putMinDateOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get min date value 0000-01-01
   * @param options The options parameters.
   */
  getMinDate(
    options?: coreHttp.OperationOptions
  ): Promise<DateOperationsGetMinDateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getMinDateOperationSpec
    ) as Promise<DateOperationsGetMinDateResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getNullOperationSpec: coreHttp.OperationSpec = {
  path: "/date/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Date" }, serializedName: "Date" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const getInvalidDateOperationSpec: coreHttp.OperationSpec = {
  path: "/date/invaliddate",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Date" }, serializedName: "Date" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const getOverflowDateOperationSpec: coreHttp.OperationSpec = {
  path: "/date/overflowdate",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Date" }, serializedName: "Date" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const getUnderflowDateOperationSpec: coreHttp.OperationSpec = {
  path: "/date/underflowdate",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Date" }, serializedName: "Date" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putMaxDateOperationSpec: coreHttp.OperationSpec = {
  path: "/date/max",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.dateBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const getMaxDateOperationSpec: coreHttp.OperationSpec = {
  path: "/date/max",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Date" }, serializedName: "Date" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const putMinDateOperationSpec: coreHttp.OperationSpec = {
  path: "/date/min",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.dateBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const getMinDateOperationSpec: coreHttp.OperationSpec = {
  path: "/date/min",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Date" }, serializedName: "Date" }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
