/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Time } from "../operationsInterfaces";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BodyTimeClientContext } from "../bodyTimeClientContext";
import {
  TimeGetOptionalParams,
  TimeGetResponse,
  TimePutOptionalParams,
  TimePutResponse
} from "../models";

/** Class representing a Time. */
export class TimeImpl implements Time {
  private readonly client: BodyTimeClientContext;

  /**
   * Initialize a new instance of the class Time class.
   * @param client Reference to the service client
   */
  constructor(client: BodyTimeClientContext) {
    this.client = client;
  }

  /**
   * Get time value "11:34:56"
   * @param options The options parameters.
   */
  get(options?: TimeGetOptionalParams): Promise<TimeGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<TimeGetResponse>;
  }

  /**
   * Put time value "08:07:56"
   * @param timeBody Put time value "08:07:56" in parameter to pass testserver
   *                 This value should be an ISO-8601 formatted string representing time. E.g. "HH:MM:SS" or
   *                 "HH:MM:SS.mm".
   * @param options The options parameters.
   */
  put(
    timeBody: string,
    options?: TimePutOptionalParams
  ): Promise<TimePutResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      timeBody,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      putOperationSpec
    ) as Promise<TimePutResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/time/get",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putOperationSpec: coreHttp.OperationSpec = {
  path: "/time/put",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.timeBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
