/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "../models/parameters";
import { MediaTypesV3Client } from "../mediaTypesV3Client";
import {
  FooApiPostSendOnDefault$binaryOptionalParams,
  FooApiPostSendOnDefault$textOptionalParams,
  FooApiPostSendOnDefaultResponse,
  FooApiPostSend$binaryOptionalParams,
  FooApiPostSend$textOptionalParams,
  FooApiPostSendResponse
} from "../models";

/** Class representing a FooApi. */
export class FooApi {
  private readonly client: MediaTypesV3Client;

  /**
   * Initialize a new instance of the class FooApi class.
   * @param client Reference to the service client
   */
  constructor(client: MediaTypesV3Client) {
    this.client = client;
  }

  /**
   * Send payload to Foo service.
   * @param contentType Upload file type
   * @param data
   * @param options The options parameters.
   */
  postSendOnDefault(
    contentType: "application/octet-stream",
    data: coreHttp.HttpRequestBody,
    options?: FooApiPostSendOnDefault$binaryOptionalParams
  ): Promise<FooApiPostSendOnDefaultResponse>;
  /**
   * Send payload to Foo service.
   * @param contentType Upload file type
   * @param data simple string
   * @param options The options parameters.
   */
  postSendOnDefault(
    contentType: "text/plain",
    data: string,
    options?: FooApiPostSendOnDefault$textOptionalParams
  ): Promise<FooApiPostSendOnDefaultResponse>;
  /**
   * Send payload to Foo service.
   * @param args Includes all the parameters for this operation.
   */
  postSendOnDefault(
    ...args:
      | [
          "application/octet-stream",
          coreHttp.HttpRequestBody,
          FooApiPostSendOnDefault$binaryOptionalParams?
        ]
      | ["text/plain", string, FooApiPostSendOnDefault$textOptionalParams?]
  ): Promise<FooApiPostSendOnDefaultResponse> {
    let operationSpec: coreHttp.OperationSpec;
    let operationArguments: coreHttp.OperationArguments;
    if (args[0] === "application/octet-stream") {
      operationSpec = postSendOnDefault$binaryOperationSpec;
      operationArguments = {
        contentType: args[0],
        data: args[1],
        options: args[2]
      };
    } else if (args[0] === "text/plain") {
      operationSpec = postSendOnDefault$textOperationSpec;
      operationArguments = {
        contentType: args[0],
        data: args[1],
        options: args[2]
      };
    } else {
      throw new TypeError(
        `"contentType" must be a valid value but instead was "${args[0]}".`
      );
    }
    operationArguments.options = coreHttp.operationOptionsToRequestOptionsBase(
      operationArguments.options || {}
    );
    return this.client.sendOperationRequest(
      operationArguments,
      operationSpec
    ) as Promise<FooApiPostSendOnDefaultResponse>;
  }

  /**
   * Send payload to targetted thing in Foo service.
   * @param thing Target thing name
   * @param contentType Upload file type
   * @param data
   * @param options The options parameters.
   */
  postSend(
    thing: string,
    contentType: "application/octet-stream",
    data: coreHttp.HttpRequestBody,
    options?: FooApiPostSend$binaryOptionalParams
  ): Promise<FooApiPostSendResponse>;
  /**
   * Send payload to targetted thing in Foo service.
   * @param thing Target thing name
   * @param contentType Upload file type
   * @param data simple string
   * @param options The options parameters.
   */
  postSend(
    thing: string,
    contentType: "text/plain",
    data: string,
    options?: FooApiPostSend$textOptionalParams
  ): Promise<FooApiPostSendResponse>;
  /**
   * Send payload to targetted thing in Foo service.
   * @param args Includes all the parameters for this operation.
   */
  postSend(
    ...args:
      | [
          string,
          "application/octet-stream",
          coreHttp.HttpRequestBody,
          FooApiPostSend$binaryOptionalParams?
        ]
      | [string, "text/plain", string, FooApiPostSend$textOptionalParams?]
  ): Promise<FooApiPostSendResponse> {
    let operationSpec: coreHttp.OperationSpec;
    let operationArguments: coreHttp.OperationArguments;
    if (args[1] === "application/octet-stream") {
      operationSpec = postSend$binaryOperationSpec;
      operationArguments = {
        thing: args[0],
        contentType: args[1],
        data: args[2],
        options: args[3]
      };
    } else if (args[1] === "text/plain") {
      operationSpec = postSend$textOperationSpec;
      operationArguments = {
        thing: args[0],
        contentType: args[1],
        data: args[2],
        options: args[3]
      };
    } else {
      throw new TypeError(
        `"contentType" must be a valid value but instead was "${args[1]}".`
      );
    }
    operationArguments.options = coreHttp.operationOptionsToRequestOptionsBase(
      operationArguments.options || {}
    );
    return this.client.sendOperationRequest(
      operationArguments,
      operationSpec
    ) as Promise<FooApiPostSendResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer({}, /* isXml */ false);

const postSendOnDefault$binaryOperationSpec: coreHttp.OperationSpec = {
  path: "/foo/api/v1",
  httpMethod: "POST",
  responses: {
    202: {},
    400: {
      bodyMapper: { type: { name: "String" } }
    }
  },
  requestBody: Parameters.data1,
  queryParameters: [Parameters.excluded],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "binary",
  serializer
};
const postSendOnDefault$textOperationSpec: coreHttp.OperationSpec = {
  path: "/foo/api/v1",
  httpMethod: "POST",
  responses: {
    202: {},
    400: {
      bodyMapper: { type: { name: "String" } }
    }
  },
  requestBody: Parameters.data,
  queryParameters: [Parameters.excluded],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType2],
  mediaType: "text",
  serializer
};
const postSend$binaryOperationSpec: coreHttp.OperationSpec = {
  path: "/foo/api/v1/things/{thing}",
  httpMethod: "POST",
  responses: {
    202: {},
    400: {
      bodyMapper: { type: { name: "String" } }
    }
  },
  requestBody: Parameters.data1,
  queryParameters: [Parameters.excluded],
  urlParameters: [Parameters.$host, Parameters.thing],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "binary",
  serializer
};
const postSend$textOperationSpec: coreHttp.OperationSpec = {
  path: "/foo/api/v1/things/{thing}",
  httpMethod: "POST",
  responses: {
    202: {},
    400: {
      bodyMapper: { type: { name: "String" } }
    }
  },
  requestBody: Parameters.data,
  queryParameters: [Parameters.excluded],
  urlParameters: [Parameters.$host, Parameters.thing],
  headerParameters: [Parameters.accept, Parameters.contentType2],
  mediaType: "text",
  serializer
};
