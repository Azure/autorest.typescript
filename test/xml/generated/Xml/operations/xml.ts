/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/xmlMappers";
import * as Parameters from "../models/parameters";
import { AutoRestSwaggerBATXMLServiceContext } from "../autoRestSwaggerBATXMLServiceContext";

/** Class representing a Xml. */
export class Xml {
  private readonly client: AutoRestSwaggerBATXMLServiceContext;

  /**
   * Create a Xml.
   * @param {AutoRestSwaggerBATXMLServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestSwaggerBATXMLServiceContext) {
    this.client = client;
  }

  /**
   * Get a complex type that has a ref to a complex type with no XML node
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlGetComplexTypeRefNoMetaResponse>
   */
  getComplexTypeRefNoMeta(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlGetComplexTypeRefNoMetaResponse>;
  /**
   * @param callback The callback
   */
  getComplexTypeRefNoMeta(callback: coreHttp.ServiceCallback<Models.RootWithRefAndNoMeta>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getComplexTypeRefNoMeta(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.RootWithRefAndNoMeta>): void;
  getComplexTypeRefNoMeta(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.RootWithRefAndNoMeta>, callback?: coreHttp.ServiceCallback<Models.RootWithRefAndNoMeta>): Promise<Models.XmlGetComplexTypeRefNoMetaResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexTypeRefNoMetaOperationSpec,
      callback) as Promise<Models.XmlGetComplexTypeRefNoMetaResponse>;
  }

  /**
   * Puts a complex type that has a ref to a complex type with no XML node
   * @param model
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putComplexTypeRefNoMeta(model: Models.RootWithRefAndNoMeta, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param model
   * @param callback The callback
   */
  putComplexTypeRefNoMeta(model: Models.RootWithRefAndNoMeta, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param model
   * @param options The optional parameters
   * @param callback The callback
   */
  putComplexTypeRefNoMeta(model: Models.RootWithRefAndNoMeta, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putComplexTypeRefNoMeta(model: Models.RootWithRefAndNoMeta, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      putComplexTypeRefNoMetaOperationSpec,
      callback);
  }

  /**
   * Get a complex type that has a ref to a complex type with XML node
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlGetComplexTypeRefWithMetaResponse>
   */
  getComplexTypeRefWithMeta(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlGetComplexTypeRefWithMetaResponse>;
  /**
   * @param callback The callback
   */
  getComplexTypeRefWithMeta(callback: coreHttp.ServiceCallback<Models.RootWithRefAndMeta>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getComplexTypeRefWithMeta(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.RootWithRefAndMeta>): void;
  getComplexTypeRefWithMeta(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.RootWithRefAndMeta>, callback?: coreHttp.ServiceCallback<Models.RootWithRefAndMeta>): Promise<Models.XmlGetComplexTypeRefWithMetaResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexTypeRefWithMetaOperationSpec,
      callback) as Promise<Models.XmlGetComplexTypeRefWithMetaResponse>;
  }

  /**
   * Puts a complex type that has a ref to a complex type with XML node
   * @param model
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putComplexTypeRefWithMeta(model: Models.RootWithRefAndMeta, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param model
   * @param callback The callback
   */
  putComplexTypeRefWithMeta(model: Models.RootWithRefAndMeta, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param model
   * @param options The optional parameters
   * @param callback The callback
   */
  putComplexTypeRefWithMeta(model: Models.RootWithRefAndMeta, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putComplexTypeRefWithMeta(model: Models.RootWithRefAndMeta, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      putComplexTypeRefWithMetaOperationSpec,
      callback);
  }

  /**
   * Get a simple XML document
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlGetSimpleResponse>
   */
  getSimple(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlGetSimpleResponse>;
  /**
   * @param callback The callback
   */
  getSimple(callback: coreHttp.ServiceCallback<Models.Slideshow>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSimple(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Slideshow>): void;
  getSimple(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Slideshow>, callback?: coreHttp.ServiceCallback<Models.Slideshow>): Promise<Models.XmlGetSimpleResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSimpleOperationSpec,
      callback) as Promise<Models.XmlGetSimpleResponse>;
  }

  /**
   * Put a simple XML document
   * @param slideshow
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putSimple(slideshow: Models.Slideshow, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param slideshow
   * @param callback The callback
   */
  putSimple(slideshow: Models.Slideshow, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param slideshow
   * @param options The optional parameters
   * @param callback The callback
   */
  putSimple(slideshow: Models.Slideshow, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putSimple(slideshow: Models.Slideshow, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        slideshow,
        options
      },
      putSimpleOperationSpec,
      callback);
  }

  /**
   * Get an XML document with multiple wrapped lists
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlGetWrappedListsResponse>
   */
  getWrappedLists(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlGetWrappedListsResponse>;
  /**
   * @param callback The callback
   */
  getWrappedLists(callback: coreHttp.ServiceCallback<Models.AppleBarrel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getWrappedLists(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.AppleBarrel>): void;
  getWrappedLists(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.AppleBarrel>, callback?: coreHttp.ServiceCallback<Models.AppleBarrel>): Promise<Models.XmlGetWrappedListsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getWrappedListsOperationSpec,
      callback) as Promise<Models.XmlGetWrappedListsResponse>;
  }

  /**
   * Put an XML document with multiple wrapped lists
   * @param wrappedLists
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putWrappedLists(wrappedLists: Models.AppleBarrel, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param wrappedLists
   * @param callback The callback
   */
  putWrappedLists(wrappedLists: Models.AppleBarrel, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param wrappedLists
   * @param options The optional parameters
   * @param callback The callback
   */
  putWrappedLists(wrappedLists: Models.AppleBarrel, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putWrappedLists(wrappedLists: Models.AppleBarrel, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        wrappedLists,
        options
      },
      putWrappedListsOperationSpec,
      callback);
  }

  /**
   * Get strongly-typed response headers.
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlGetHeadersResponse>
   */
  getHeaders(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlGetHeadersResponse>;
  /**
   * @param callback The callback
   */
  getHeaders(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getHeaders(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getHeaders(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.XmlGetHeadersResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getHeadersOperationSpec,
      callback) as Promise<Models.XmlGetHeadersResponse>;
  }

  /**
   * Get an empty list.
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlGetEmptyListResponse>
   */
  getEmptyList(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlGetEmptyListResponse>;
  /**
   * @param callback The callback
   */
  getEmptyList(callback: coreHttp.ServiceCallback<Models.Slideshow>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmptyList(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Slideshow>): void;
  getEmptyList(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Slideshow>, callback?: coreHttp.ServiceCallback<Models.Slideshow>): Promise<Models.XmlGetEmptyListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyListOperationSpec,
      callback) as Promise<Models.XmlGetEmptyListResponse>;
  }

  /**
   * Puts an empty list.
   * @param slideshow
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putEmptyList(slideshow: Models.Slideshow, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param slideshow
   * @param callback The callback
   */
  putEmptyList(slideshow: Models.Slideshow, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param slideshow
   * @param options The optional parameters
   * @param callback The callback
   */
  putEmptyList(slideshow: Models.Slideshow, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putEmptyList(slideshow: Models.Slideshow, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        slideshow,
        options
      },
      putEmptyListOperationSpec,
      callback);
  }

  /**
   * Gets some empty wrapped lists.
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlGetEmptyWrappedListsResponse>
   */
  getEmptyWrappedLists(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlGetEmptyWrappedListsResponse>;
  /**
   * @param callback The callback
   */
  getEmptyWrappedLists(callback: coreHttp.ServiceCallback<Models.AppleBarrel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmptyWrappedLists(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.AppleBarrel>): void;
  getEmptyWrappedLists(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.AppleBarrel>, callback?: coreHttp.ServiceCallback<Models.AppleBarrel>): Promise<Models.XmlGetEmptyWrappedListsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyWrappedListsOperationSpec,
      callback) as Promise<Models.XmlGetEmptyWrappedListsResponse>;
  }

  /**
   * Puts some empty wrapped lists.
   * @param appleBarrel
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putEmptyWrappedLists(appleBarrel: Models.AppleBarrel, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param appleBarrel
   * @param callback The callback
   */
  putEmptyWrappedLists(appleBarrel: Models.AppleBarrel, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param appleBarrel
   * @param options The optional parameters
   * @param callback The callback
   */
  putEmptyWrappedLists(appleBarrel: Models.AppleBarrel, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putEmptyWrappedLists(appleBarrel: Models.AppleBarrel, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        appleBarrel,
        options
      },
      putEmptyWrappedListsOperationSpec,
      callback);
  }

  /**
   * Gets a list as the root element.
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlGetRootListResponse>
   */
  getRootList(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlGetRootListResponse>;
  /**
   * @param callback The callback
   */
  getRootList(callback: coreHttp.ServiceCallback<Models.Banana[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRootList(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Banana[]>): void;
  getRootList(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Banana[]>, callback?: coreHttp.ServiceCallback<Models.Banana[]>): Promise<Models.XmlGetRootListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRootListOperationSpec,
      callback) as Promise<Models.XmlGetRootListResponse>;
  }

  /**
   * Puts a list as the root element.
   * @param bananas
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putRootList(bananas: Models.Banana[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param bananas
   * @param callback The callback
   */
  putRootList(bananas: Models.Banana[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param bananas
   * @param options The optional parameters
   * @param callback The callback
   */
  putRootList(bananas: Models.Banana[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putRootList(bananas: Models.Banana[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        bananas,
        options
      },
      putRootListOperationSpec,
      callback);
  }

  /**
   * Gets a list with a single item.
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlGetRootListSingleItemResponse>
   */
  getRootListSingleItem(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlGetRootListSingleItemResponse>;
  /**
   * @param callback The callback
   */
  getRootListSingleItem(callback: coreHttp.ServiceCallback<Models.Banana[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRootListSingleItem(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Banana[]>): void;
  getRootListSingleItem(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Banana[]>, callback?: coreHttp.ServiceCallback<Models.Banana[]>): Promise<Models.XmlGetRootListSingleItemResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRootListSingleItemOperationSpec,
      callback) as Promise<Models.XmlGetRootListSingleItemResponse>;
  }

  /**
   * Puts a list with a single item.
   * @param bananas
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putRootListSingleItem(bananas: Models.Banana[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param bananas
   * @param callback The callback
   */
  putRootListSingleItem(bananas: Models.Banana[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param bananas
   * @param options The optional parameters
   * @param callback The callback
   */
  putRootListSingleItem(bananas: Models.Banana[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putRootListSingleItem(bananas: Models.Banana[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        bananas,
        options
      },
      putRootListSingleItemOperationSpec,
      callback);
  }

  /**
   * Gets an empty list as the root element.
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlGetEmptyRootListResponse>
   */
  getEmptyRootList(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlGetEmptyRootListResponse>;
  /**
   * @param callback The callback
   */
  getEmptyRootList(callback: coreHttp.ServiceCallback<Models.Banana[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmptyRootList(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Banana[]>): void;
  getEmptyRootList(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Banana[]>, callback?: coreHttp.ServiceCallback<Models.Banana[]>): Promise<Models.XmlGetEmptyRootListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyRootListOperationSpec,
      callback) as Promise<Models.XmlGetEmptyRootListResponse>;
  }

  /**
   * Puts an empty list as the root element.
   * @param bananas
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putEmptyRootList(bananas: Models.Banana[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param bananas
   * @param callback The callback
   */
  putEmptyRootList(bananas: Models.Banana[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param bananas
   * @param options The optional parameters
   * @param callback The callback
   */
  putEmptyRootList(bananas: Models.Banana[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putEmptyRootList(bananas: Models.Banana[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        bananas,
        options
      },
      putEmptyRootListOperationSpec,
      callback);
  }

  /**
   * Gets an XML document with an empty child element.
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlGetEmptyChildElementResponse>
   */
  getEmptyChildElement(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlGetEmptyChildElementResponse>;
  /**
   * @param callback The callback
   */
  getEmptyChildElement(callback: coreHttp.ServiceCallback<Models.Banana>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmptyChildElement(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Banana>): void;
  getEmptyChildElement(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Banana>, callback?: coreHttp.ServiceCallback<Models.Banana>): Promise<Models.XmlGetEmptyChildElementResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyChildElementOperationSpec,
      callback) as Promise<Models.XmlGetEmptyChildElementResponse>;
  }

  /**
   * Puts a value with an empty child element.
   * @param banana
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putEmptyChildElement(banana: Models.Banana, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param banana
   * @param callback The callback
   */
  putEmptyChildElement(banana: Models.Banana, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param banana
   * @param options The optional parameters
   * @param callback The callback
   */
  putEmptyChildElement(banana: Models.Banana, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putEmptyChildElement(banana: Models.Banana, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        banana,
        options
      },
      putEmptyChildElementOperationSpec,
      callback);
  }

  /**
   * Lists containers in a storage account.
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlListContainersResponse>
   */
  listContainers(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlListContainersResponse>;
  /**
   * @param callback The callback
   */
  listContainers(callback: coreHttp.ServiceCallback<Models.ListContainersResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listContainers(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.ListContainersResponse>): void;
  listContainers(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.ListContainersResponse>, callback?: coreHttp.ServiceCallback<Models.ListContainersResponse>): Promise<Models.XmlListContainersResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listContainersOperationSpec,
      callback) as Promise<Models.XmlListContainersResponse>;
  }

  /**
   * Gets storage service properties.
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlGetServicePropertiesResponse>
   */
  getServiceProperties(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlGetServicePropertiesResponse>;
  /**
   * @param callback The callback
   */
  getServiceProperties(callback: coreHttp.ServiceCallback<Models.StorageServiceProperties>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceProperties(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.StorageServiceProperties>): void;
  getServiceProperties(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.StorageServiceProperties>, callback?: coreHttp.ServiceCallback<Models.StorageServiceProperties>): Promise<Models.XmlGetServicePropertiesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getServicePropertiesOperationSpec,
      callback) as Promise<Models.XmlGetServicePropertiesResponse>;
  }

  /**
   * Puts storage service properties.
   * @param properties
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putServiceProperties(properties: Models.StorageServiceProperties, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param properties
   * @param callback The callback
   */
  putServiceProperties(properties: Models.StorageServiceProperties, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param properties
   * @param options The optional parameters
   * @param callback The callback
   */
  putServiceProperties(properties: Models.StorageServiceProperties, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putServiceProperties(properties: Models.StorageServiceProperties, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        properties,
        options
      },
      putServicePropertiesOperationSpec,
      callback);
  }

  /**
   * Gets storage ACLs for a container.
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlGetAclsResponse>
   */
  getAcls(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlGetAclsResponse>;
  /**
   * @param callback The callback
   */
  getAcls(callback: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAcls(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): void;
  getAcls(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SignedIdentifier[]>, callback?: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): Promise<Models.XmlGetAclsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAclsOperationSpec,
      callback) as Promise<Models.XmlGetAclsResponse>;
  }

  /**
   * Puts storage ACLs for a container.
   * @param properties
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putAcls(properties: Models.SignedIdentifier[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param properties
   * @param callback The callback
   */
  putAcls(properties: Models.SignedIdentifier[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param properties
   * @param options The optional parameters
   * @param callback The callback
   */
  putAcls(properties: Models.SignedIdentifier[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putAcls(properties: Models.SignedIdentifier[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        properties,
        options
      },
      putAclsOperationSpec,
      callback);
  }

  /**
   * Lists blobs in a storage container.
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlListBlobsResponse>
   */
  listBlobs(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlListBlobsResponse>;
  /**
   * @param callback The callback
   */
  listBlobs(callback: coreHttp.ServiceCallback<Models.ListBlobsResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBlobs(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.ListBlobsResponse>): void;
  listBlobs(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.ListBlobsResponse>, callback?: coreHttp.ServiceCallback<Models.ListBlobsResponse>): Promise<Models.XmlListBlobsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBlobsOperationSpec,
      callback) as Promise<Models.XmlListBlobsResponse>;
  }

  /**
   * A Swagger with XML that has one operation that takes JSON as input. You need to send the ID
   * number 42
   * @param properties
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  jsonInput(properties: Models.JSONInput, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param properties
   * @param callback The callback
   */
  jsonInput(properties: Models.JSONInput, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param properties
   * @param options The optional parameters
   * @param callback The callback
   */
  jsonInput(properties: Models.JSONInput, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  jsonInput(properties: Models.JSONInput, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        properties,
        options
      },
      jsonInputOperationSpec,
      callback);
  }

  /**
   * A Swagger with XML that has one operation that returns JSON. ID number 42
   * @param [options] The optional parameters
   * @returns Promise<Models.XmlJsonOutputResponse>
   */
  jsonOutput(options?: coreHttp.RequestOptionsBase): Promise<Models.XmlJsonOutputResponse>;
  /**
   * @param callback The callback
   */
  jsonOutput(callback: coreHttp.ServiceCallback<Models.JSONOutput>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  jsonOutput(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.JSONOutput>): void;
  jsonOutput(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.JSONOutput>, callback?: coreHttp.ServiceCallback<Models.JSONOutput>): Promise<Models.XmlJsonOutputResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      jsonOutputOperationSpec,
      callback) as Promise<Models.XmlJsonOutputResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, true);
const getComplexTypeRefNoMetaOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/complex-type-ref-no-meta",
  responses: {
    200: {
      bodyMapper: Mappers.RootWithRefAndNoMeta
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putComplexTypeRefNoMetaOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/complex-type-ref-no-meta",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.RootWithRefAndNoMeta,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getComplexTypeRefWithMetaOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/complex-type-ref-with-meta",
  responses: {
    200: {
      bodyMapper: Mappers.RootWithRefAndMeta
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putComplexTypeRefWithMetaOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/complex-type-ref-with-meta",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.RootWithRefAndMeta,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getSimpleOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/simple",
  responses: {
    200: {
      bodyMapper: Mappers.Slideshow
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  isXML: true,
  serializer
};

const putSimpleOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/simple",
  requestBody: {
    parameterPath: "slideshow",
    mapper: {
      ...Mappers.Slideshow,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  isXML: true,
  serializer
};

const getWrappedListsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/wrapped-lists",
  responses: {
    200: {
      bodyMapper: Mappers.AppleBarrel
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putWrappedListsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/wrapped-lists",
  requestBody: {
    parameterPath: "wrappedLists",
    mapper: {
      ...Mappers.AppleBarrel,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  isXML: true,
  serializer
};

const getHeadersOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/headers",
  responses: {
    200: {
      headersMapper: Mappers.XmlGetHeadersHeaders
    },
    default: {}
  },
  isXML: true,
  serializer
};

const getEmptyListOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/empty-list",
  responses: {
    200: {
      bodyMapper: Mappers.Slideshow
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putEmptyListOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/empty-list",
  requestBody: {
    parameterPath: "slideshow",
    mapper: {
      ...Mappers.Slideshow,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getEmptyWrappedListsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/empty-wrapped-lists",
  responses: {
    200: {
      bodyMapper: Mappers.AppleBarrel
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putEmptyWrappedListsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/empty-wrapped-lists",
  requestBody: {
    parameterPath: "appleBarrel",
    mapper: {
      ...Mappers.AppleBarrel,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getRootListOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/root-list",
  responses: {
    200: {
      bodyMapper: {
        xmlElementName: "banana",
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Banana"
            }
          }
        }
      }
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putRootListOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/root-list",
  requestBody: {
    parameterPath: "bananas",
    mapper: {
      xmlElementName: "banana",
      required: true,
      serializedName: "bananas",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "Banana"
          }
        }
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getRootListSingleItemOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/root-list-single-item",
  responses: {
    200: {
      bodyMapper: {
        xmlElementName: "banana",
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Banana"
            }
          }
        }
      }
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putRootListSingleItemOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/root-list-single-item",
  requestBody: {
    parameterPath: "bananas",
    mapper: {
      xmlElementName: "banana",
      required: true,
      serializedName: "bananas",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "Banana"
          }
        }
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getEmptyRootListOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/empty-root-list",
  responses: {
    200: {
      bodyMapper: {
        xmlElementName: "banana",
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Banana"
            }
          }
        }
      }
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putEmptyRootListOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/empty-root-list",
  requestBody: {
    parameterPath: "bananas",
    mapper: {
      xmlElementName: "banana",
      required: true,
      serializedName: "bananas",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "Banana"
          }
        }
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getEmptyChildElementOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/empty-child-element",
  responses: {
    200: {
      bodyMapper: Mappers.Banana
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putEmptyChildElementOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/empty-child-element",
  requestBody: {
    parameterPath: "banana",
    mapper: {
      ...Mappers.Banana,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const listContainersOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/",
  queryParameters: [
    Parameters.comp0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListContainersResponse
    },
    default: {}
  },
  isXML: true,
  serializer
};

const getServicePropertiesOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/",
  queryParameters: [
    Parameters.comp1,
    Parameters.restype0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageServiceProperties
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putServicePropertiesOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/",
  queryParameters: [
    Parameters.comp1,
    Parameters.restype0
  ],
  requestBody: {
    parameterPath: "properties",
    mapper: {
      ...Mappers.StorageServiceProperties,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getAclsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/mycontainer",
  queryParameters: [
    Parameters.comp2,
    Parameters.restype1
  ],
  responses: {
    200: {
      bodyMapper: {
        xmlElementName: "SignedIdentifier",
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SignedIdentifier"
            }
          }
        }
      }
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putAclsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/mycontainer",
  queryParameters: [
    Parameters.comp2,
    Parameters.restype1
  ],
  requestBody: {
    parameterPath: "properties",
    mapper: {
      xmlName: "SignedIdentifiers",
      xmlElementName: "SignedIdentifier",
      required: true,
      serializedName: "properties",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "SignedIdentifier"
          }
        }
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const listBlobsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/mycontainer",
  queryParameters: [
    Parameters.comp0,
    Parameters.restype1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListBlobsResponse
    },
    default: {}
  },
  isXML: true,
  serializer
};

const jsonInputOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/jsoninput",
  requestBody: {
    parameterPath: "properties",
    mapper: {
      ...Mappers.JSONInput,
      required: true
    }
  },
  responses: {
    200: {},
    default: {}
  },
  isXML: true,
  serializer
};

const jsonOutputOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "xml/jsonoutput",
  responses: {
    200: {
      bodyMapper: Mappers.JSONOutput
    },
    default: {}
  },
  isXML: true,
  serializer
};
