/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/xmlMappers";
import * as Parameters from "../models/parameters";
import { AutoRestSwaggerBATXMLServiceContext } from "../autoRestSwaggerBATXMLServiceContext";

/** Class representing a Xml. */
export class Xml {
  private readonly client: AutoRestSwaggerBATXMLServiceContext;

  /**
   * Create a Xml.
   * @param {AutoRestSwaggerBATXMLServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestSwaggerBATXMLServiceContext) {
    this.client = client;
  }

  /**
   * Get a complex type that has a ref to a complex type with no XML node
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getComplexTypeRefNoMetaWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.RootWithRefAndNoMeta>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexTypeRefNoMetaOperationSpec);
  }

  /**
   * Puts a complex type that has a ref to a complex type with no XML node
   *
   * @param {RootWithRefAndNoMeta} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putComplexTypeRefNoMetaWithHttpOperationResponse(model: Models.RootWithRefAndNoMeta, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      putComplexTypeRefNoMetaOperationSpec);
  }

  /**
   * Get a complex type that has a ref to a complex type with XML node
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getComplexTypeRefWithMetaWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.RootWithRefAndMeta>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexTypeRefWithMetaOperationSpec);
  }

  /**
   * Puts a complex type that has a ref to a complex type with XML node
   *
   * @param {RootWithRefAndMeta} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putComplexTypeRefWithMetaWithHttpOperationResponse(model: Models.RootWithRefAndMeta, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      putComplexTypeRefWithMetaOperationSpec);
  }

  /**
   * Get a simple XML document
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSimpleWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Slideshow>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSimpleOperationSpec);
  }

  /**
   * Put a simple XML document
   *
   * @param {Slideshow} slideshow
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putSimpleWithHttpOperationResponse(slideshow: Models.Slideshow, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        slideshow,
        options
      },
      putSimpleOperationSpec);
  }

  /**
   * Get an XML document with multiple wrapped lists
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getWrappedListsWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.AppleBarrel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getWrappedListsOperationSpec);
  }

  /**
   * Put an XML document with multiple wrapped lists
   *
   * @param {AppleBarrel} wrappedLists
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putWrappedListsWithHttpOperationResponse(wrappedLists: Models.AppleBarrel, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        wrappedLists,
        options
      },
      putWrappedListsOperationSpec);
  }

  /**
   * Get strongly-typed response headers.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getHeadersWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.XmlGetHeadersResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getHeadersOperationSpec);
  }

  /**
   * Get an empty list.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getEmptyListWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Slideshow>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyListOperationSpec);
  }

  /**
   * Puts an empty list.
   *
   * @param {Slideshow} slideshow
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putEmptyListWithHttpOperationResponse(slideshow: Models.Slideshow, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        slideshow,
        options
      },
      putEmptyListOperationSpec);
  }

  /**
   * Gets some empty wrapped lists.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getEmptyWrappedListsWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.AppleBarrel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyWrappedListsOperationSpec);
  }

  /**
   * Puts some empty wrapped lists.
   *
   * @param {AppleBarrel} appleBarrel
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putEmptyWrappedListsWithHttpOperationResponse(appleBarrel: Models.AppleBarrel, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        appleBarrel,
        options
      },
      putEmptyWrappedListsOperationSpec);
  }

  /**
   * Gets a list as the root element.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getRootListWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Banana[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRootListOperationSpec);
  }

  /**
   * Puts a list as the root element.
   *
   * @param {Banana[]} bananas
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putRootListWithHttpOperationResponse(bananas: Models.Banana[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        bananas,
        options
      },
      putRootListOperationSpec);
  }

  /**
   * Gets a list with a single item.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getRootListSingleItemWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Banana[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRootListSingleItemOperationSpec);
  }

  /**
   * Puts a list with a single item.
   *
   * @param {Banana[]} bananas
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putRootListSingleItemWithHttpOperationResponse(bananas: Models.Banana[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        bananas,
        options
      },
      putRootListSingleItemOperationSpec);
  }

  /**
   * Gets an empty list as the root element.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getEmptyRootListWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Banana[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyRootListOperationSpec);
  }

  /**
   * Puts an empty list as the root element.
   *
   * @param {Banana[]} bananas
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putEmptyRootListWithHttpOperationResponse(bananas: Models.Banana[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        bananas,
        options
      },
      putEmptyRootListOperationSpec);
  }

  /**
   * Gets an XML document with an empty child element.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getEmptyChildElementWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Banana>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyChildElementOperationSpec);
  }

  /**
   * Puts a value with an empty child element.
   *
   * @param {Banana} banana
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putEmptyChildElementWithHttpOperationResponse(banana: Models.Banana, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        banana,
        options
      },
      putEmptyChildElementOperationSpec);
  }

  /**
   * Lists containers in a storage account.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listContainersWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ListContainersResponse>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listContainersOperationSpec);
  }

  /**
   * Gets storage service properties.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getServicePropertiesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.StorageServiceProperties>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getServicePropertiesOperationSpec);
  }

  /**
   * Puts storage service properties.
   *
   * @param {StorageServiceProperties} properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putServicePropertiesWithHttpOperationResponse(properties: Models.StorageServiceProperties, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        properties,
        options
      },
      putServicePropertiesOperationSpec);
  }

  /**
   * Gets storage ACLs for a container.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAclsWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.SignedIdentifier[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAclsOperationSpec);
  }

  /**
   * Puts storage ACLs for a container.
   *
   * @param {SignedIdentifier[]} properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putAclsWithHttpOperationResponse(properties: Models.SignedIdentifier[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        properties,
        options
      },
      putAclsOperationSpec);
  }

  /**
   * Lists blobs in a storage container.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listBlobsWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ListBlobsResponse>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBlobsOperationSpec);
  }

  /**
   * Get a complex type that has a ref to a complex type with no XML node
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.RootWithRefAndNoMeta} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.RootWithRefAndNoMeta} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getComplexTypeRefNoMeta(): Promise<Models.RootWithRefAndNoMeta>;
  getComplexTypeRefNoMeta(options: msRest.RequestOptionsBase): Promise<Models.RootWithRefAndNoMeta>;
  getComplexTypeRefNoMeta(callback: msRest.ServiceCallback<Models.RootWithRefAndNoMeta>): void;
  getComplexTypeRefNoMeta(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RootWithRefAndNoMeta>): void;
  getComplexTypeRefNoMeta(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.RootWithRefAndNoMeta>): any {
    return msRest.responseToBody(this.getComplexTypeRefNoMetaWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Puts a complex type that has a ref to a complex type with no XML node
   *
   * @param {RootWithRefAndNoMeta} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putComplexTypeRefNoMeta(model: Models.RootWithRefAndNoMeta): Promise<void>;
  putComplexTypeRefNoMeta(model: Models.RootWithRefAndNoMeta, options: msRest.RequestOptionsBase): Promise<void>;
  putComplexTypeRefNoMeta(model: Models.RootWithRefAndNoMeta, callback: msRest.ServiceCallback<void>): void;
  putComplexTypeRefNoMeta(model: Models.RootWithRefAndNoMeta, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putComplexTypeRefNoMeta(model: Models.RootWithRefAndNoMeta, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putComplexTypeRefNoMetaWithHttpOperationResponse.bind(this), model, options, callback);
  }

  /**
   * Get a complex type that has a ref to a complex type with XML node
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.RootWithRefAndMeta} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.RootWithRefAndMeta} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getComplexTypeRefWithMeta(): Promise<Models.RootWithRefAndMeta>;
  getComplexTypeRefWithMeta(options: msRest.RequestOptionsBase): Promise<Models.RootWithRefAndMeta>;
  getComplexTypeRefWithMeta(callback: msRest.ServiceCallback<Models.RootWithRefAndMeta>): void;
  getComplexTypeRefWithMeta(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RootWithRefAndMeta>): void;
  getComplexTypeRefWithMeta(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.RootWithRefAndMeta>): any {
    return msRest.responseToBody(this.getComplexTypeRefWithMetaWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Puts a complex type that has a ref to a complex type with XML node
   *
   * @param {RootWithRefAndMeta} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putComplexTypeRefWithMeta(model: Models.RootWithRefAndMeta): Promise<void>;
  putComplexTypeRefWithMeta(model: Models.RootWithRefAndMeta, options: msRest.RequestOptionsBase): Promise<void>;
  putComplexTypeRefWithMeta(model: Models.RootWithRefAndMeta, callback: msRest.ServiceCallback<void>): void;
  putComplexTypeRefWithMeta(model: Models.RootWithRefAndMeta, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putComplexTypeRefWithMeta(model: Models.RootWithRefAndMeta, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putComplexTypeRefWithMetaWithHttpOperationResponse.bind(this), model, options, callback);
  }

  /**
   * Get a simple XML document
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Slideshow} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Slideshow} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSimple(): Promise<Models.Slideshow>;
  getSimple(options: msRest.RequestOptionsBase): Promise<Models.Slideshow>;
  getSimple(callback: msRest.ServiceCallback<Models.Slideshow>): void;
  getSimple(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Slideshow>): void;
  getSimple(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Slideshow>): any {
    return msRest.responseToBody(this.getSimpleWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put a simple XML document
   *
   * @param {Slideshow} slideshow
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putSimple(slideshow: Models.Slideshow): Promise<void>;
  putSimple(slideshow: Models.Slideshow, options: msRest.RequestOptionsBase): Promise<void>;
  putSimple(slideshow: Models.Slideshow, callback: msRest.ServiceCallback<void>): void;
  putSimple(slideshow: Models.Slideshow, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putSimple(slideshow: Models.Slideshow, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putSimpleWithHttpOperationResponse.bind(this), slideshow, options, callback);
  }

  /**
   * Get an XML document with multiple wrapped lists
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.AppleBarrel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.AppleBarrel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getWrappedLists(): Promise<Models.AppleBarrel>;
  getWrappedLists(options: msRest.RequestOptionsBase): Promise<Models.AppleBarrel>;
  getWrappedLists(callback: msRest.ServiceCallback<Models.AppleBarrel>): void;
  getWrappedLists(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppleBarrel>): void;
  getWrappedLists(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.AppleBarrel>): any {
    return msRest.responseToBody(this.getWrappedListsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put an XML document with multiple wrapped lists
   *
   * @param {AppleBarrel} wrappedLists
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putWrappedLists(wrappedLists: Models.AppleBarrel): Promise<void>;
  putWrappedLists(wrappedLists: Models.AppleBarrel, options: msRest.RequestOptionsBase): Promise<void>;
  putWrappedLists(wrappedLists: Models.AppleBarrel, callback: msRest.ServiceCallback<void>): void;
  putWrappedLists(wrappedLists: Models.AppleBarrel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putWrappedLists(wrappedLists: Models.AppleBarrel, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putWrappedListsWithHttpOperationResponse.bind(this), wrappedLists, options, callback);
  }

  /**
   * Get strongly-typed response headers.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getHeaders(): Promise<void>;
  getHeaders(options: msRest.RequestOptionsBase): Promise<void>;
  getHeaders(callback: msRest.ServiceCallback<void>): void;
  getHeaders(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getHeaders(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.getHeadersWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get an empty list.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Slideshow} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Slideshow} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getEmptyList(): Promise<Models.Slideshow>;
  getEmptyList(options: msRest.RequestOptionsBase): Promise<Models.Slideshow>;
  getEmptyList(callback: msRest.ServiceCallback<Models.Slideshow>): void;
  getEmptyList(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Slideshow>): void;
  getEmptyList(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Slideshow>): any {
    return msRest.responseToBody(this.getEmptyListWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Puts an empty list.
   *
   * @param {Slideshow} slideshow
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putEmptyList(slideshow: Models.Slideshow): Promise<void>;
  putEmptyList(slideshow: Models.Slideshow, options: msRest.RequestOptionsBase): Promise<void>;
  putEmptyList(slideshow: Models.Slideshow, callback: msRest.ServiceCallback<void>): void;
  putEmptyList(slideshow: Models.Slideshow, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putEmptyList(slideshow: Models.Slideshow, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putEmptyListWithHttpOperationResponse.bind(this), slideshow, options, callback);
  }

  /**
   * Gets some empty wrapped lists.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.AppleBarrel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.AppleBarrel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getEmptyWrappedLists(): Promise<Models.AppleBarrel>;
  getEmptyWrappedLists(options: msRest.RequestOptionsBase): Promise<Models.AppleBarrel>;
  getEmptyWrappedLists(callback: msRest.ServiceCallback<Models.AppleBarrel>): void;
  getEmptyWrappedLists(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppleBarrel>): void;
  getEmptyWrappedLists(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.AppleBarrel>): any {
    return msRest.responseToBody(this.getEmptyWrappedListsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Puts some empty wrapped lists.
   *
   * @param {AppleBarrel} appleBarrel
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putEmptyWrappedLists(appleBarrel: Models.AppleBarrel): Promise<void>;
  putEmptyWrappedLists(appleBarrel: Models.AppleBarrel, options: msRest.RequestOptionsBase): Promise<void>;
  putEmptyWrappedLists(appleBarrel: Models.AppleBarrel, callback: msRest.ServiceCallback<void>): void;
  putEmptyWrappedLists(appleBarrel: Models.AppleBarrel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putEmptyWrappedLists(appleBarrel: Models.AppleBarrel, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putEmptyWrappedListsWithHttpOperationResponse.bind(this), appleBarrel, options, callback);
  }

  /**
   * Gets a list as the root element.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Banana[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getRootList(): Promise<Models.Banana[]>;
  getRootList(options: msRest.RequestOptionsBase): Promise<Models.Banana[]>;
  getRootList(callback: msRest.ServiceCallback<Models.Banana[]>): void;
  getRootList(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Banana[]>): void;
  getRootList(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Banana[]>): any {
    return msRest.responseToBody(this.getRootListWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Puts a list as the root element.
   *
   * @param {Banana[]} bananas
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putRootList(bananas: Models.Banana[]): Promise<void>;
  putRootList(bananas: Models.Banana[], options: msRest.RequestOptionsBase): Promise<void>;
  putRootList(bananas: Models.Banana[], callback: msRest.ServiceCallback<void>): void;
  putRootList(bananas: Models.Banana[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putRootList(bananas: Models.Banana[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putRootListWithHttpOperationResponse.bind(this), bananas, options, callback);
  }

  /**
   * Gets a list with a single item.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Banana[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getRootListSingleItem(): Promise<Models.Banana[]>;
  getRootListSingleItem(options: msRest.RequestOptionsBase): Promise<Models.Banana[]>;
  getRootListSingleItem(callback: msRest.ServiceCallback<Models.Banana[]>): void;
  getRootListSingleItem(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Banana[]>): void;
  getRootListSingleItem(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Banana[]>): any {
    return msRest.responseToBody(this.getRootListSingleItemWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Puts a list with a single item.
   *
   * @param {Banana[]} bananas
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putRootListSingleItem(bananas: Models.Banana[]): Promise<void>;
  putRootListSingleItem(bananas: Models.Banana[], options: msRest.RequestOptionsBase): Promise<void>;
  putRootListSingleItem(bananas: Models.Banana[], callback: msRest.ServiceCallback<void>): void;
  putRootListSingleItem(bananas: Models.Banana[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putRootListSingleItem(bananas: Models.Banana[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putRootListSingleItemWithHttpOperationResponse.bind(this), bananas, options, callback);
  }

  /**
   * Gets an empty list as the root element.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Banana[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getEmptyRootList(): Promise<Models.Banana[]>;
  getEmptyRootList(options: msRest.RequestOptionsBase): Promise<Models.Banana[]>;
  getEmptyRootList(callback: msRest.ServiceCallback<Models.Banana[]>): void;
  getEmptyRootList(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Banana[]>): void;
  getEmptyRootList(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Banana[]>): any {
    return msRest.responseToBody(this.getEmptyRootListWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Puts an empty list as the root element.
   *
   * @param {Banana[]} bananas
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putEmptyRootList(bananas: Models.Banana[]): Promise<void>;
  putEmptyRootList(bananas: Models.Banana[], options: msRest.RequestOptionsBase): Promise<void>;
  putEmptyRootList(bananas: Models.Banana[], callback: msRest.ServiceCallback<void>): void;
  putEmptyRootList(bananas: Models.Banana[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putEmptyRootList(bananas: Models.Banana[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putEmptyRootListWithHttpOperationResponse.bind(this), bananas, options, callback);
  }

  /**
   * Gets an XML document with an empty child element.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Banana} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Banana} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getEmptyChildElement(): Promise<Models.Banana>;
  getEmptyChildElement(options: msRest.RequestOptionsBase): Promise<Models.Banana>;
  getEmptyChildElement(callback: msRest.ServiceCallback<Models.Banana>): void;
  getEmptyChildElement(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Banana>): void;
  getEmptyChildElement(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Banana>): any {
    return msRest.responseToBody(this.getEmptyChildElementWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Puts a value with an empty child element.
   *
   * @param {Banana} banana
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putEmptyChildElement(banana: Models.Banana): Promise<void>;
  putEmptyChildElement(banana: Models.Banana, options: msRest.RequestOptionsBase): Promise<void>;
  putEmptyChildElement(banana: Models.Banana, callback: msRest.ServiceCallback<void>): void;
  putEmptyChildElement(banana: Models.Banana, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putEmptyChildElement(banana: Models.Banana, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putEmptyChildElementWithHttpOperationResponse.bind(this), banana, options, callback);
  }

  /**
   * Lists containers in a storage account.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ListContainersResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ListContainersResponse} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listContainers(): Promise<Models.ListContainersResponse>;
  listContainers(options: msRest.RequestOptionsBase): Promise<Models.ListContainersResponse>;
  listContainers(callback: msRest.ServiceCallback<Models.ListContainersResponse>): void;
  listContainers(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListContainersResponse>): void;
  listContainers(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ListContainersResponse>): any {
    return msRest.responseToBody(this.listContainersWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Gets storage service properties.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.StorageServiceProperties} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.StorageServiceProperties} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getServiceProperties(): Promise<Models.StorageServiceProperties>;
  getServiceProperties(options: msRest.RequestOptionsBase): Promise<Models.StorageServiceProperties>;
  getServiceProperties(callback: msRest.ServiceCallback<Models.StorageServiceProperties>): void;
  getServiceProperties(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageServiceProperties>): void;
  getServiceProperties(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.StorageServiceProperties>): any {
    return msRest.responseToBody(this.getServicePropertiesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Puts storage service properties.
   *
   * @param {StorageServiceProperties} properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putServiceProperties(properties: Models.StorageServiceProperties): Promise<void>;
  putServiceProperties(properties: Models.StorageServiceProperties, options: msRest.RequestOptionsBase): Promise<void>;
  putServiceProperties(properties: Models.StorageServiceProperties, callback: msRest.ServiceCallback<void>): void;
  putServiceProperties(properties: Models.StorageServiceProperties, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putServiceProperties(properties: Models.StorageServiceProperties, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putServicePropertiesWithHttpOperationResponse.bind(this), properties, options, callback);
  }

  /**
   * Gets storage ACLs for a container.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SignedIdentifier[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getAcls(): Promise<Models.SignedIdentifier[]>;
  getAcls(options: msRest.RequestOptionsBase): Promise<Models.SignedIdentifier[]>;
  getAcls(callback: msRest.ServiceCallback<Models.SignedIdentifier[]>): void;
  getAcls(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SignedIdentifier[]>): void;
  getAcls(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SignedIdentifier[]>): any {
    return msRest.responseToBody(this.getAclsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Puts storage ACLs for a container.
   *
   * @param {SignedIdentifier[]} properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putAcls(properties: Models.SignedIdentifier[]): Promise<void>;
  putAcls(properties: Models.SignedIdentifier[], options: msRest.RequestOptionsBase): Promise<void>;
  putAcls(properties: Models.SignedIdentifier[], callback: msRest.ServiceCallback<void>): void;
  putAcls(properties: Models.SignedIdentifier[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putAcls(properties: Models.SignedIdentifier[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putAclsWithHttpOperationResponse.bind(this), properties, options, callback);
  }

  /**
   * Lists blobs in a storage container.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ListBlobsResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ListBlobsResponse} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listBlobs(): Promise<Models.ListBlobsResponse>;
  listBlobs(options: msRest.RequestOptionsBase): Promise<Models.ListBlobsResponse>;
  listBlobs(callback: msRest.ServiceCallback<Models.ListBlobsResponse>): void;
  listBlobs(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListBlobsResponse>): void;
  listBlobs(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ListBlobsResponse>): any {
    return msRest.responseToBody(this.listBlobsWithHttpOperationResponse.bind(this), options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers, true);
const getComplexTypeRefNoMetaOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/complex-type-ref-no-meta",
  responses: {
    200: {
      bodyMapper: Mappers.RootWithRefAndNoMeta
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putComplexTypeRefNoMetaOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/complex-type-ref-no-meta",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.RootWithRefAndNoMeta,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getComplexTypeRefWithMetaOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/complex-type-ref-with-meta",
  responses: {
    200: {
      bodyMapper: Mappers.RootWithRefAndMeta
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putComplexTypeRefWithMetaOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/complex-type-ref-with-meta",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.RootWithRefAndMeta,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getSimpleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/simple",
  responses: {
    200: {
      bodyMapper: Mappers.Slideshow
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  isXML: true,
  serializer
};

const putSimpleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/simple",
  requestBody: {
    parameterPath: "slideshow",
    mapper: {
      ...Mappers.Slideshow,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  isXML: true,
  serializer
};

const getWrappedListsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/wrapped-lists",
  responses: {
    200: {
      bodyMapper: Mappers.AppleBarrel
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putWrappedListsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/wrapped-lists",
  requestBody: {
    parameterPath: "wrappedLists",
    mapper: {
      ...Mappers.AppleBarrel,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  isXML: true,
  serializer
};

const getHeadersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/headers",
  responses: {
    200: {
      headersMapper: Mappers.XmlGetHeadersHeaders
    },
    default: {}
  },
  isXML: true,
  serializer
};

const getEmptyListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/empty-list",
  responses: {
    200: {
      bodyMapper: Mappers.Slideshow
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putEmptyListOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/empty-list",
  requestBody: {
    parameterPath: "slideshow",
    mapper: {
      ...Mappers.Slideshow,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getEmptyWrappedListsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/empty-wrapped-lists",
  responses: {
    200: {
      bodyMapper: Mappers.AppleBarrel
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putEmptyWrappedListsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/empty-wrapped-lists",
  requestBody: {
    parameterPath: "appleBarrel",
    mapper: {
      ...Mappers.AppleBarrel,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getRootListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/root-list",
  responses: {
    200: {
      bodyMapper: {
        xmlElementName: "banana",
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Banana"
            }
          }
        }
      }
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putRootListOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/root-list",
  requestBody: {
    parameterPath: "bananas",
    mapper: {
      xmlElementName: "banana",
      required: true,
      serializedName: "bananas",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "Banana"
          }
        }
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getRootListSingleItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/root-list-single-item",
  responses: {
    200: {
      bodyMapper: {
        xmlElementName: "banana",
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Banana"
            }
          }
        }
      }
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putRootListSingleItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/root-list-single-item",
  requestBody: {
    parameterPath: "bananas",
    mapper: {
      xmlElementName: "banana",
      required: true,
      serializedName: "bananas",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "Banana"
          }
        }
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getEmptyRootListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/empty-root-list",
  responses: {
    200: {
      bodyMapper: {
        xmlElementName: "banana",
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Banana"
            }
          }
        }
      }
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putEmptyRootListOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/empty-root-list",
  requestBody: {
    parameterPath: "bananas",
    mapper: {
      xmlElementName: "banana",
      required: true,
      serializedName: "bananas",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "Banana"
          }
        }
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getEmptyChildElementOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/empty-child-element",
  responses: {
    200: {
      bodyMapper: Mappers.Banana
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putEmptyChildElementOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/empty-child-element",
  requestBody: {
    parameterPath: "banana",
    mapper: {
      ...Mappers.Banana,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const listContainersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/",
  queryParameters: [
    Parameters.comp0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListContainersResponse
    },
    default: {}
  },
  isXML: true,
  serializer
};

const getServicePropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/",
  queryParameters: [
    Parameters.comp1,
    Parameters.restype0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageServiceProperties
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putServicePropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/",
  queryParameters: [
    Parameters.comp1,
    Parameters.restype0
  ],
  requestBody: {
    parameterPath: "properties",
    mapper: {
      ...Mappers.StorageServiceProperties,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const getAclsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/mycontainer",
  queryParameters: [
    Parameters.comp2,
    Parameters.restype1
  ],
  responses: {
    200: {
      bodyMapper: {
        xmlElementName: "SignedIdentifier",
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SignedIdentifier"
            }
          }
        }
      }
    },
    default: {}
  },
  isXML: true,
  serializer
};

const putAclsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "xml/mycontainer",
  queryParameters: [
    Parameters.comp2,
    Parameters.restype1
  ],
  requestBody: {
    parameterPath: "properties",
    mapper: {
      xmlName: "SignedIdentifiers",
      xmlElementName: "SignedIdentifier",
      required: true,
      serializedName: "properties",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "SignedIdentifier"
          }
        }
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {},
    default: {}
  },
  isXML: true,
  serializer
};

const listBlobsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "xml/mycontainer",
  queryParameters: [
    Parameters.comp0,
    Parameters.restype1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListBlobsResponse
    },
    default: {}
  },
  isXML: true,
  serializer
};
