/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/arrayModelMappers";
import { AutoRestComplexTestServiceContext } from "../autoRestComplexTestServiceContext";

/** Class representing a ArrayModel. */
export class ArrayModel {
  private readonly client: AutoRestComplexTestServiceContext;

  /**
   * Create a ArrayModel.
   * @param {AutoRestComplexTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestComplexTestServiceContext) {
    this.client = client;
  }

  /**
   * Get complex types with array property
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetValidResponse>
   */
  getValid(options?: msRest.RequestOptionsBase): Promise<Models.ArrayModelGetValidResponse>;
  /**
   * @param callback The callback
   */
  getValid(callback: msRest.ServiceCallback<Models.ArrayWrapper>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ArrayWrapper>): void;
  getValid(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ArrayWrapper>, callback?: msRest.ServiceCallback<Models.ArrayWrapper>): Promise<Models.ArrayModelGetValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetValidResponse>;
  }

  /**
   * Put complex types with array property
   * @param complexBody Please put an array with 4 items: "1, 2, 3, 4", "", null, "&S#$(*Y", "The
   * quick brown fox jumps over the lazy dog"
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  putValid(complexBody: Models.ArrayWrapper, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param complexBody Please put an array with 4 items: "1, 2, 3, 4", "", null, "&S#$(*Y", "The
   * quick brown fox jumps over the lazy dog"
   * @param callback The callback
   */
  putValid(complexBody: Models.ArrayWrapper, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param complexBody Please put an array with 4 items: "1, 2, 3, 4", "", null, "&S#$(*Y", "The
   * quick brown fox jumps over the lazy dog"
   * @param options The optional parameters
   * @param callback The callback
   */
  putValid(complexBody: Models.ArrayWrapper, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putValid(complexBody: Models.ArrayWrapper, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        complexBody,
        options
      },
      putValidOperationSpec,
      callback);
  }

  /**
   * Get complex types with array property which is empty
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetEmptyResponse>
   */
  getEmpty(options?: msRest.RequestOptionsBase): Promise<Models.ArrayModelGetEmptyResponse>;
  /**
   * @param callback The callback
   */
  getEmpty(callback: msRest.ServiceCallback<Models.ArrayWrapper>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmpty(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ArrayWrapper>): void;
  getEmpty(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ArrayWrapper>, callback?: msRest.ServiceCallback<Models.ArrayWrapper>): Promise<Models.ArrayModelGetEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyOperationSpec,
      callback) as Promise<Models.ArrayModelGetEmptyResponse>;
  }

  /**
   * Put complex types with array property which is empty
   * @param complexBody Please put an empty array
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  putEmpty(complexBody: Models.ArrayWrapper, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param complexBody Please put an empty array
   * @param callback The callback
   */
  putEmpty(complexBody: Models.ArrayWrapper, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param complexBody Please put an empty array
   * @param options The optional parameters
   * @param callback The callback
   */
  putEmpty(complexBody: Models.ArrayWrapper, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putEmpty(complexBody: Models.ArrayWrapper, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        complexBody,
        options
      },
      putEmptyOperationSpec,
      callback);
  }

  /**
   * Get complex types with array property while server doesn't provide a response payload
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetNotProvidedResponse>
   */
  getNotProvided(options?: msRest.RequestOptionsBase): Promise<Models.ArrayModelGetNotProvidedResponse>;
  /**
   * @param callback The callback
   */
  getNotProvided(callback: msRest.ServiceCallback<Models.ArrayWrapper>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNotProvided(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ArrayWrapper>): void;
  getNotProvided(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ArrayWrapper>, callback?: msRest.ServiceCallback<Models.ArrayWrapper>): Promise<Models.ArrayModelGetNotProvidedResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNotProvidedOperationSpec,
      callback) as Promise<Models.ArrayModelGetNotProvidedResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/array/valid",
  responses: {
    200: {
      bodyMapper: Mappers.ArrayWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "complex/array/valid",
  requestBody: {
    parameterPath: "complexBody",
    mapper: {
      ...Mappers.ArrayWrapper,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/array/empty",
  responses: {
    200: {
      bodyMapper: Mappers.ArrayWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "complex/array/empty",
  requestBody: {
    parameterPath: "complexBody",
    mapper: {
      ...Mappers.ArrayWrapper,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getNotProvidedOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/array/notprovided",
  responses: {
    200: {
      bodyMapper: Mappers.ArrayWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
