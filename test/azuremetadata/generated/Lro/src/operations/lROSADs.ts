/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/lROSADsMappers";
import * as Parameters from "../models/parameters";
import { AutoRestLongRunningOperationTestServiceContext } from "../autoRestLongRunningOperationTestServiceContext";

/** Class representing a LROSADs. */
export class LROSADs {
  private readonly client: AutoRestLongRunningOperationTestServiceContext;

  /**
   * Create a LROSADs.
   * @param {AutoRestLongRunningOperationTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestLongRunningOperationTestServiceContext) {
    this.client = client;
  }

  /**
   * Long running put request, service returns a 400 to the initial request
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPutNonRetry400Response>
   */
  putNonRetry400(options?: Models.LROSADsPutNonRetry400OptionalParams): Promise<Models.LROSADsPutNonRetry400Response> {
    return this.beginPutNonRetry400(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPutNonRetry400Response>;
  }

  /**
   * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and
   * 201 response code
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPutNonRetry201Creating400Response>
   */
  putNonRetry201Creating400(options?: Models.LROSADsPutNonRetry201Creating400OptionalParams): Promise<Models.LROSADsPutNonRetry201Creating400Response> {
    return this.beginPutNonRetry201Creating400(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPutNonRetry201Creating400Response>;
  }

  /**
   * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and
   * 201 response code
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPutNonRetry201Creating400InvalidJsonResponse>
   */
  putNonRetry201Creating400InvalidJson(options?: Models.LROSADsPutNonRetry201Creating400InvalidJsonOptionalParams): Promise<Models.LROSADsPutNonRetry201Creating400InvalidJsonResponse> {
    return this.beginPutNonRetry201Creating400InvalidJson(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPutNonRetry201Creating400InvalidJsonResponse>;
  }

  /**
   * Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the
   * endpoint indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPutAsyncRelativeRetry400Response>
   */
  putAsyncRelativeRetry400(options?: Models.LROSADsPutAsyncRelativeRetry400OptionalParams): Promise<Models.LROSADsPutAsyncRelativeRetry400Response> {
    return this.beginPutAsyncRelativeRetry400(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPutAsyncRelativeRetry400Response>;
  }

  /**
   * Long running delete request, service returns a 400 with an error body
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsDeleteNonRetry400Response>
   */
  deleteNonRetry400(options?: msRest.RequestOptionsBase): Promise<Models.LROSADsDeleteNonRetry400Response> {
    return this.beginDeleteNonRetry400(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsDeleteNonRetry400Response>;
  }

  /**
   * Long running delete request, service returns a 202 with a location header
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsDelete202NonRetry400Response>
   */
  delete202NonRetry400(options?: msRest.RequestOptionsBase): Promise<Models.LROSADsDelete202NonRetry400Response> {
    return this.beginDelete202NonRetry400(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsDelete202NonRetry400Response>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsDeleteAsyncRelativeRetry400Response>
   */
  deleteAsyncRelativeRetry400(options?: msRest.RequestOptionsBase): Promise<Models.LROSADsDeleteAsyncRelativeRetry400Response> {
    return this.beginDeleteAsyncRelativeRetry400(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsDeleteAsyncRelativeRetry400Response>;
  }

  /**
   * Long running post request, service returns a 400 with no error body
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPostNonRetry400Response>
   */
  postNonRetry400(options?: Models.LROSADsPostNonRetry400OptionalParams): Promise<Models.LROSADsPostNonRetry400Response> {
    return this.beginPostNonRetry400(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPostNonRetry400Response>;
  }

  /**
   * Long running post request, service returns a 202 with a location header
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPost202NonRetry400Response>
   */
  post202NonRetry400(options?: Models.LROSADsPost202NonRetry400OptionalParams): Promise<Models.LROSADsPost202NonRetry400Response> {
    return this.beginPost202NonRetry400(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPost202NonRetry400Response>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPostAsyncRelativeRetry400Response>
   */
  postAsyncRelativeRetry400(options?: Models.LROSADsPostAsyncRelativeRetry400OptionalParams): Promise<Models.LROSADsPostAsyncRelativeRetry400Response> {
    return this.beginPostAsyncRelativeRetry400(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPostAsyncRelativeRetry400Response>;
  }

  /**
   * Long running put request, service returns a 201 to the initial request with no payload
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPutError201NoProvisioningStatePayloadResponse>
   */
  putError201NoProvisioningStatePayload(options?: Models.LROSADsPutError201NoProvisioningStatePayloadOptionalParams): Promise<Models.LROSADsPutError201NoProvisioningStatePayloadResponse> {
    return this.beginPutError201NoProvisioningStatePayload(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPutError201NoProvisioningStatePayloadResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPutAsyncRelativeRetryNoStatusResponse>
   */
  putAsyncRelativeRetryNoStatus(options?: Models.LROSADsPutAsyncRelativeRetryNoStatusOptionalParams): Promise<Models.LROSADsPutAsyncRelativeRetryNoStatusResponse> {
    return this.beginPutAsyncRelativeRetryNoStatus(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPutAsyncRelativeRetryNoStatusResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPutAsyncRelativeRetryNoStatusPayloadResponse>
   */
  putAsyncRelativeRetryNoStatusPayload(options?: Models.LROSADsPutAsyncRelativeRetryNoStatusPayloadOptionalParams): Promise<Models.LROSADsPutAsyncRelativeRetryNoStatusPayloadResponse> {
    return this.beginPutAsyncRelativeRetryNoStatusPayload(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPutAsyncRelativeRetryNoStatusPayloadResponse>;
  }

  /**
   * Long running delete request, service returns a 204 to the initial request, indicating success.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  delete204Succeeded(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDelete204Succeeded(options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsDeleteAsyncRelativeRetryNoStatusResponse>
   */
  deleteAsyncRelativeRetryNoStatus(options?: msRest.RequestOptionsBase): Promise<Models.LROSADsDeleteAsyncRelativeRetryNoStatusResponse> {
    return this.beginDeleteAsyncRelativeRetryNoStatus(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsDeleteAsyncRelativeRetryNoStatusResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, without a location
   * header.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPost202NoLocationResponse>
   */
  post202NoLocation(options?: Models.LROSADsPost202NoLocationOptionalParams): Promise<Models.LROSADsPost202NoLocationResponse> {
    return this.beginPost202NoLocation(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPost202NoLocationResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPostAsyncRelativeRetryNoPayloadResponse>
   */
  postAsyncRelativeRetryNoPayload(options?: Models.LROSADsPostAsyncRelativeRetryNoPayloadOptionalParams): Promise<Models.LROSADsPostAsyncRelativeRetryNoPayloadResponse> {
    return this.beginPostAsyncRelativeRetryNoPayload(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPostAsyncRelativeRetryNoPayloadResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that is
   * not a valid json
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPut200InvalidJsonResponse>
   */
  put200InvalidJson(options?: Models.LROSADsPut200InvalidJsonOptionalParams): Promise<Models.LROSADsPut200InvalidJsonResponse> {
    return this.beginPut200InvalidJson(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPut200InvalidJsonResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header
   * is invalid.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPutAsyncRelativeRetryInvalidHeaderResponse>
   */
  putAsyncRelativeRetryInvalidHeader(options?: Models.LROSADsPutAsyncRelativeRetryInvalidHeaderOptionalParams): Promise<Models.LROSADsPutAsyncRelativeRetryInvalidHeaderResponse> {
    return this.beginPutAsyncRelativeRetryInvalidHeader(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPutAsyncRelativeRetryInvalidHeaderResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPutAsyncRelativeRetryInvalidJsonPollingResponse>
   */
  putAsyncRelativeRetryInvalidJsonPolling(options?: Models.LROSADsPutAsyncRelativeRetryInvalidJsonPollingOptionalParams): Promise<Models.LROSADsPutAsyncRelativeRetryInvalidJsonPollingResponse> {
    return this.beginPutAsyncRelativeRetryInvalidJsonPolling(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPutAsyncRelativeRetryInvalidJsonPollingResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request receing a reponse with
   * an invalid 'Location' and 'Retry-After' headers
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsDelete202RetryInvalidHeaderResponse>
   */
  delete202RetryInvalidHeader(options?: msRest.RequestOptionsBase): Promise<Models.LROSADsDelete202RetryInvalidHeaderResponse> {
    return this.beginDelete202RetryInvalidHeader(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsDelete202RetryInvalidHeaderResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. The endpoint
   * indicated in the Azure-AsyncOperation header is invalid
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsDeleteAsyncRelativeRetryInvalidHeaderResponse>
   */
  deleteAsyncRelativeRetryInvalidHeader(options?: msRest.RequestOptionsBase): Promise<Models.LROSADsDeleteAsyncRelativeRetryInvalidHeaderResponse> {
    return this.beginDeleteAsyncRelativeRetryInvalidHeader(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsDeleteAsyncRelativeRetryInvalidHeaderResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingResponse>
   */
  deleteAsyncRelativeRetryInvalidJsonPolling(options?: msRest.RequestOptionsBase): Promise<Models.LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingResponse> {
    return this.beginDeleteAsyncRelativeRetryInvalidJsonPolling(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with invalid 'Location'
   * and 'Retry-After' headers.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPost202RetryInvalidHeaderResponse>
   */
  post202RetryInvalidHeader(options?: Models.LROSADsPost202RetryInvalidHeaderOptionalParams): Promise<Models.LROSADsPost202RetryInvalidHeaderResponse> {
    return this.beginPost202RetryInvalidHeader(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPost202RetryInvalidHeaderResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header
   * is invalid.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPostAsyncRelativeRetryInvalidHeaderResponse>
   */
  postAsyncRelativeRetryInvalidHeader(options?: Models.LROSADsPostAsyncRelativeRetryInvalidHeaderOptionalParams): Promise<Models.LROSADsPostAsyncRelativeRetryInvalidHeaderResponse> {
    return this.beginPostAsyncRelativeRetryInvalidHeader(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPostAsyncRelativeRetryInvalidHeaderResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROSADsPostAsyncRelativeRetryInvalidJsonPollingResponse>
   */
  postAsyncRelativeRetryInvalidJsonPolling(options?: Models.LROSADsPostAsyncRelativeRetryInvalidJsonPollingOptionalParams): Promise<Models.LROSADsPostAsyncRelativeRetryInvalidJsonPollingResponse> {
    return this.beginPostAsyncRelativeRetryInvalidJsonPolling(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROSADsPostAsyncRelativeRetryInvalidJsonPollingResponse>;
  }

  /**
   * Long running put request, service returns a 400 to the initial request
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPutNonRetry400(options?: Models.LROSADsBeginPutNonRetry400OptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutNonRetry400OperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and
   * 201 response code
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPutNonRetry201Creating400(options?: Models.LROSADsBeginPutNonRetry201Creating400OptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutNonRetry201Creating400OperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and
   * 201 response code
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPutNonRetry201Creating400InvalidJson(options?: Models.LROSADsBeginPutNonRetry201Creating400InvalidJsonOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutNonRetry201Creating400InvalidJsonOperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the
   * endpoint indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPutAsyncRelativeRetry400(options?: Models.LROSADsBeginPutAsyncRelativeRetry400OptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutAsyncRelativeRetry400OperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 400 with an error body
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteNonRetry400(options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteNonRetry400OperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 with a location header
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDelete202NonRetry400(options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDelete202NonRetry400OperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteAsyncRelativeRetry400(options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteAsyncRelativeRetry400OperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 400 with no error body
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPostNonRetry400(options?: Models.LROSADsBeginPostNonRetry400OptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPostNonRetry400OperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 with a location header
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPost202NonRetry400(options?: Models.LROSADsBeginPost202NonRetry400OptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPost202NonRetry400OperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPostAsyncRelativeRetry400(options?: Models.LROSADsBeginPostAsyncRelativeRetry400OptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPostAsyncRelativeRetry400OperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 201 to the initial request with no payload
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPutError201NoProvisioningStatePayload(options?: Models.LROSADsBeginPutError201NoProvisioningStatePayloadOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutError201NoProvisioningStatePayloadOperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPutAsyncRelativeRetryNoStatus(options?: Models.LROSADsBeginPutAsyncRelativeRetryNoStatusOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutAsyncRelativeRetryNoStatusOperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPutAsyncRelativeRetryNoStatusPayload(options?: Models.LROSADsBeginPutAsyncRelativeRetryNoStatusPayloadOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutAsyncRelativeRetryNoStatusPayloadOperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 204 to the initial request, indicating success.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDelete204Succeeded(options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDelete204SucceededOperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteAsyncRelativeRetryNoStatus(options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteAsyncRelativeRetryNoStatusOperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, without a location
   * header.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPost202NoLocation(options?: Models.LROSADsBeginPost202NoLocationOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPost202NoLocationOperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPostAsyncRelativeRetryNoPayload(options?: Models.LROSADsBeginPostAsyncRelativeRetryNoPayloadOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPostAsyncRelativeRetryNoPayloadOperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that is
   * not a valid json
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPut200InvalidJson(options?: Models.LROSADsBeginPut200InvalidJsonOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPut200InvalidJsonOperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header
   * is invalid.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPutAsyncRelativeRetryInvalidHeader(options?: Models.LROSADsBeginPutAsyncRelativeRetryInvalidHeaderOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutAsyncRelativeRetryInvalidHeaderOperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPutAsyncRelativeRetryInvalidJsonPolling(options?: Models.LROSADsBeginPutAsyncRelativeRetryInvalidJsonPollingOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutAsyncRelativeRetryInvalidJsonPollingOperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request receing a reponse with
   * an invalid 'Location' and 'Retry-After' headers
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDelete202RetryInvalidHeader(options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDelete202RetryInvalidHeaderOperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. The endpoint
   * indicated in the Azure-AsyncOperation header is invalid
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteAsyncRelativeRetryInvalidHeader(options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteAsyncRelativeRetryInvalidHeaderOperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteAsyncRelativeRetryInvalidJsonPolling(options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteAsyncRelativeRetryInvalidJsonPollingOperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with invalid 'Location'
   * and 'Retry-After' headers.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPost202RetryInvalidHeader(options?: Models.LROSADsBeginPost202RetryInvalidHeaderOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPost202RetryInvalidHeaderOperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header
   * is invalid.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPostAsyncRelativeRetryInvalidHeader(options?: Models.LROSADsBeginPostAsyncRelativeRetryInvalidHeaderOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPostAsyncRelativeRetryInvalidHeaderOperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPostAsyncRelativeRetryInvalidJsonPolling(options?: Models.LROSADsBeginPostAsyncRelativeRetryInvalidJsonPollingOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPostAsyncRelativeRetryInvalidJsonPollingOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const beginPutNonRetry400OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/nonretryerror/put/400",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPutNonRetry201Creating400OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/nonretryerror/put/201/creating/400",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPutNonRetry201Creating400InvalidJsonOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/nonretryerror/put/201/creating/400/invalidjson",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPutAsyncRelativeRetry400OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/nonretryerror/putasync/retry/400",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROSADsPutAsyncRelativeRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsPutAsyncRelativeRetry400Headers
    }
  },
  serializer
};

const beginDeleteNonRetry400OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/nonretryerror/delete/400",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROSADsDeleteNonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsDeleteNonRetry400Headers
    }
  },
  serializer
};

const beginDelete202NonRetry400OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/nonretryerror/delete/202/retry/400",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROSADsDelete202NonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsDelete202NonRetry400Headers
    }
  },
  serializer
};

const beginDeleteAsyncRelativeRetry400OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/nonretryerror/deleteasync/retry/400",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROSADsDeleteAsyncRelativeRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsDeleteAsyncRelativeRetry400Headers
    }
  },
  serializer
};

const beginPostNonRetry400OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/nonretryerror/post/400",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      headersMapper: Mappers.LROSADsPostNonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsPostNonRetry400Headers
    }
  },
  serializer
};

const beginPost202NonRetry400OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/nonretryerror/post/202/retry/400",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      headersMapper: Mappers.LROSADsPost202NonRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsPost202NonRetry400Headers
    }
  },
  serializer
};

const beginPostAsyncRelativeRetry400OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/nonretryerror/postasync/retry/400",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      headersMapper: Mappers.LROSADsPostAsyncRelativeRetry400Headers
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsPostAsyncRelativeRetry400Headers
    }
  },
  serializer
};

const beginPutError201NoProvisioningStatePayloadOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/error/put/201/noprovisioningstatepayload",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPutAsyncRelativeRetryNoStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/error/putasync/retry/nostatus",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROSADsPutAsyncRelativeRetryNoStatusHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsPutAsyncRelativeRetryNoStatusHeaders
    }
  },
  serializer
};

const beginPutAsyncRelativeRetryNoStatusPayloadOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/error/putasync/retry/nostatuspayload",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROSADsPutAsyncRelativeRetryNoStatusPayloadHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsPutAsyncRelativeRetryNoStatusPayloadHeaders
    }
  },
  serializer
};

const beginDelete204SucceededOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/error/delete/204/nolocation",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteAsyncRelativeRetryNoStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/error/deleteasync/retry/nostatus",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROSADsDeleteAsyncRelativeRetryNoStatusHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsDeleteAsyncRelativeRetryNoStatusHeaders
    }
  },
  serializer
};

const beginPost202NoLocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/error/post/202/nolocation",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      headersMapper: Mappers.LROSADsPost202NoLocationHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsPost202NoLocationHeaders
    }
  },
  serializer
};

const beginPostAsyncRelativeRetryNoPayloadOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/error/postasync/retry/nopayload",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      headersMapper: Mappers.LROSADsPostAsyncRelativeRetryNoPayloadHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsPostAsyncRelativeRetryNoPayloadHeaders
    }
  },
  serializer
};

const beginPut200InvalidJsonOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/error/put/200/invalidjson",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPutAsyncRelativeRetryInvalidHeaderOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/error/putasync/retry/invalidheader",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROSADsPutAsyncRelativeRetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsPutAsyncRelativeRetryInvalidHeaderHeaders
    }
  },
  serializer
};

const beginPutAsyncRelativeRetryInvalidJsonPollingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/error/putasync/retry/invalidjsonpolling",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROSADsPutAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsPutAsyncRelativeRetryInvalidJsonPollingHeaders
    }
  },
  serializer
};

const beginDelete202RetryInvalidHeaderOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/error/delete/202/retry/invalidheader",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROSADsDelete202RetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsDelete202RetryInvalidHeaderHeaders
    }
  },
  serializer
};

const beginDeleteAsyncRelativeRetryInvalidHeaderOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/error/deleteasync/retry/invalidheader",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeaders
    }
  },
  serializer
};

const beginDeleteAsyncRelativeRetryInvalidJsonPollingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/error/deleteasync/retry/invalidjsonpolling",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders
    }
  },
  serializer
};

const beginPost202RetryInvalidHeaderOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/error/post/202/retry/invalidheader",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      headersMapper: Mappers.LROSADsPost202RetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsPost202RetryInvalidHeaderHeaders
    }
  },
  serializer
};

const beginPostAsyncRelativeRetryInvalidHeaderOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/error/postasync/retry/invalidheader",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      headersMapper: Mappers.LROSADsPostAsyncRelativeRetryInvalidHeaderHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsPostAsyncRelativeRetryInvalidHeaderHeaders
    }
  },
  serializer
};

const beginPostAsyncRelativeRetryInvalidJsonPollingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/error/postasync/retry/invalidjsonpolling",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      headersMapper: Mappers.LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeaders
    }
  },
  serializer
};
