/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "./models";

const packageName = "";
const packageVersion = "";

export class AutoRestRenameParameterTestServiceContext extends msRest.ServiceClient {
  withCredentialsProperty?: string;
  noRetryPolicy: string;

  /**
   * @class
   * Initializes a new instance of the AutoRestRenameParameterTestServiceContext class.
   * @constructor
   *
   * @param {string} noRetryPolicy - A query parameter.
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
   * {@link https://github.github.io/fetch/#Request Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   * @param {string} [options.withCredentialsProperty] - A query parameter.
   *
   */
  constructor(noRetryPolicy: string, baseUri?: string, options?: Models.AutoRestRenameParameterTestServiceOptions) {
    if (noRetryPolicy === null || noRetryPolicy === undefined) {
      throw new Error('\'noRetryPolicy\' cannot be null.');
    }

    if (!options) {
      options = {};
    }

    super(undefined, options);

    this.baseUri = baseUri as string;
    if (!this.baseUri) {
      this.baseUri = "http://localhost:3000";
    }
    this.requestContentType = "application/json; charset=utf-8";
    this.noRetryPolicy = noRetryPolicy;

    this.addUserAgentInfo(`${packageName}/${packageVersion}`);
    if(options.withCredentialsProperty !== null && options.withCredentialsProperty !== undefined) {
      this.withCredentialsProperty = options.withCredentialsProperty;
    }
  }
}
