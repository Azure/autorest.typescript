/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AutoRestRenameParameterTestServiceContext } from "./autoRestRenameParameterTestServiceContext";

class AutoRestRenameParameterTestService extends AutoRestRenameParameterTestServiceContext {
  /**
   * @class
   * Initializes a new instance of the AutoRestRenameParameterTestService class.
   * @constructor
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
   * {@link https://github.github.io/fetch/#Request Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   * @param {string} [options.withCredentialsProperty] - A query parameter.
   *
   */
  constructor(noRetryPolicy: string, baseUri?: string, options?: Models.AutoRestRenameParameterTestServiceOptions) {
    super(noRetryPolicy, baseUri, options);
  }
  // methods on the client.

  /**
   * GET with an optional query parameter
   *
   * @param {AutoRestRenameParameterTestServiceGetUsingOptionalOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getUsingOptional(): Promise<msRest.RestResponse>;
  getUsingOptional(options: Models.AutoRestRenameParameterTestServiceGetUsingOptionalOptionalParams): Promise<msRest.RestResponse>;
  getUsingOptional(callback: msRest.ServiceCallback<void>): void;
  getUsingOptional(options: Models.AutoRestRenameParameterTestServiceGetUsingOptionalOptionalParams, callback: msRest.ServiceCallback<void>): void;
  getUsingOptional(options?: Models.AutoRestRenameParameterTestServiceGetUsingOptionalOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getUsingOptionalOperationSpec,
      callback);
  }
  // methods on the client.

  /**
   * GET with a required query parameter
   *
   * @param {string} timeout A query parameter.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getUsingRequired(timeout: string): Promise<msRest.RestResponse>;
  getUsingRequired(timeout: string, options: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  getUsingRequired(timeout: string, callback: msRest.ServiceCallback<void>): void;
  getUsingRequired(timeout: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getUsingRequired(timeout: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        timeout,
        options
      },
      getUsingRequiredOperationSpec,
      callback);
  }
  // methods on the client.

  /**
   * GET with an optional client query parameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getUsingClientOptional(): Promise<msRest.RestResponse>;
  getUsingClientOptional(options: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  getUsingClientOptional(callback: msRest.ServiceCallback<void>): void;
  getUsingClientOptional(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getUsingClientOptional(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getUsingClientOptionalOperationSpec,
      callback);
  }
  // methods on the client.

  /**
   * GET with a required client query parameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getUsingClientRequired(): Promise<msRest.RestResponse>;
  getUsingClientRequired(options: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  getUsingClientRequired(callback: msRest.ServiceCallback<void>): void;
  getUsingClientRequired(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getUsingClientRequired(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getUsingClientRequiredOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getUsingOptionalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rename-parameter/optional",
  queryParameters: [
    Parameters.timeout0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getUsingRequiredOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rename-parameter/required",
  queryParameters: [
    Parameters.timeout1
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getUsingClientOptionalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rename-parameter/client-optional",
  queryParameters: [
    Parameters.withCredentials
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getUsingClientRequiredOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "rename-parameter/client-required",
  queryParameters: [
    Parameters.noRetryPolicy
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

export {
  AutoRestRenameParameterTestService,
  AutoRestRenameParameterTestServiceContext,
  Models as AutoRestRenameParameterTestServiceModels,
  Mappers as AutoRestRenameParameterTestServiceMappers
};
