/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/dateModelMappers";
import { AutoRestDateTestServiceContext } from "../autoRestDateTestServiceContext";

/** Class representing a DateModel. */
export class DateModel {
  private readonly client: AutoRestDateTestServiceContext;

  /**
   * Create a DateModel.
   * @param {AutoRestDateTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestDateTestServiceContext) {
    this.client = client;
  }

  /**
   * Get null date value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.DateModelGetNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNullOperationSpec) as Promise<Models.DateModelGetNullResponse>;
  }

  /**
   * Get invalid date value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getInvalidDateWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.DateModelGetInvalidDateResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getInvalidDateOperationSpec) as Promise<Models.DateModelGetInvalidDateResponse>;
  }

  /**
   * Get overflow date value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getOverflowDateWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.DateModelGetOverflowDateResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOverflowDateOperationSpec) as Promise<Models.DateModelGetOverflowDateResponse>;
  }

  /**
   * Get underflow date value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getUnderflowDateWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.DateModelGetUnderflowDateResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getUnderflowDateOperationSpec) as Promise<Models.DateModelGetUnderflowDateResponse>;
  }

  /**
   * Put max date value 9999-12-31
   *
   * @param {string} dateBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putMaxDateWithHttpOperationResponse(dateBody: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        dateBody,
        options
      },
      putMaxDateOperationSpec);
  }

  /**
   * Get max date value 9999-12-31
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMaxDateWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.DateModelGetMaxDateResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMaxDateOperationSpec) as Promise<Models.DateModelGetMaxDateResponse>;
  }

  /**
   * Put min date value 0000-01-01
   *
   * @param {string} dateBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putMinDateWithHttpOperationResponse(dateBody: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        dateBody,
        options
      },
      putMinDateOperationSpec);
  }

  /**
   * Get min date value 0000-01-01
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMinDateWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.DateModelGetMinDateResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMinDateOperationSpec) as Promise<Models.DateModelGetMinDateResponse>;
  }

  /**
   * Get null date value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getNull(): Promise<string>;
  getNull(options: msRest.RequestOptionsBase): Promise<string>;
  getNull(callback: msRest.ServiceCallback<string>): void;
  getNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string>): any {
    return msRest.responseToBody(this.getNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get invalid date value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getInvalidDate(): Promise<string>;
  getInvalidDate(options: msRest.RequestOptionsBase): Promise<string>;
  getInvalidDate(callback: msRest.ServiceCallback<string>): void;
  getInvalidDate(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getInvalidDate(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string>): any {
    return msRest.responseToBody(this.getInvalidDateWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get overflow date value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOverflowDate(): Promise<string>;
  getOverflowDate(options: msRest.RequestOptionsBase): Promise<string>;
  getOverflowDate(callback: msRest.ServiceCallback<string>): void;
  getOverflowDate(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getOverflowDate(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string>): any {
    return msRest.responseToBody(this.getOverflowDateWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get underflow date value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getUnderflowDate(): Promise<string>;
  getUnderflowDate(options: msRest.RequestOptionsBase): Promise<string>;
  getUnderflowDate(callback: msRest.ServiceCallback<string>): void;
  getUnderflowDate(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getUnderflowDate(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string>): any {
    return msRest.responseToBody(this.getUnderflowDateWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put max date value 9999-12-31
   *
   * @param {string} dateBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putMaxDate(dateBody: string): Promise<void>;
  putMaxDate(dateBody: string, options: msRest.RequestOptionsBase): Promise<void>;
  putMaxDate(dateBody: string, callback: msRest.ServiceCallback<void>): void;
  putMaxDate(dateBody: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putMaxDate(dateBody: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putMaxDateWithHttpOperationResponse.bind(this), dateBody, options, callback);
  }

  /**
   * Get max date value 9999-12-31
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMaxDate(): Promise<string>;
  getMaxDate(options: msRest.RequestOptionsBase): Promise<string>;
  getMaxDate(callback: msRest.ServiceCallback<string>): void;
  getMaxDate(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getMaxDate(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string>): any {
    return msRest.responseToBody(this.getMaxDateWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put min date value 0000-01-01
   *
   * @param {string} dateBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putMinDate(dateBody: string): Promise<void>;
  putMinDate(dateBody: string, options: msRest.RequestOptionsBase): Promise<void>;
  putMinDate(dateBody: string, callback: msRest.ServiceCallback<void>): void;
  putMinDate(dateBody: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putMinDate(dateBody: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putMinDateWithHttpOperationResponse.bind(this), dateBody, options, callback);
  }

  /**
   * Get min date value 0000-01-01
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMinDate(): Promise<string>;
  getMinDate(options: msRest.RequestOptionsBase): Promise<string>;
  getMinDate(callback: msRest.ServiceCallback<string>): void;
  getMinDate(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getMinDate(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string>): any {
    return msRest.responseToBody(this.getMinDateWithHttpOperationResponse.bind(this), options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "date/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getInvalidDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "date/invaliddate",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getOverflowDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "date/overflowdate",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getUnderflowDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "date/underflowdate",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putMaxDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "date/max",
  requestBody: {
    parameterPath: "dateBody",
    mapper: {
      required: true,
      serializedName: "dateBody",
      type: {
        name: "String"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getMaxDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "date/max",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putMinDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "date/min",
  requestBody: {
    parameterPath: "dateBody",
    mapper: {
      required: true,
      serializedName: "dateBody",
      type: {
        name: "String"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getMinDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "date/min",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
