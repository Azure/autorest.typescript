/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/pagingMappers";
import * as Parameters from "../models/parameters";
import { AutoRestPagingTestServiceContext } from "../autoRestPagingTestServiceContext";

/** Class representing a Paging. */
export class Paging {
  private readonly client: AutoRestPagingTestServiceContext;

  /**
   * Create a Paging.
   * @param {AutoRestPagingTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestPagingTestServiceContext) {
    this.client = client;
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetSinglePagesResponse>
   */
  getSinglePages(options?: msRest.RequestOptionsBase): Promise<Models.PagingGetSinglePagesResponse>;
  /**
   * @param callback The callback
   */
  getSinglePages(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSinglePages(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePages(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetSinglePagesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSinglePagesOperationSpec,
      callback) as Promise<Models.PagingGetSinglePagesResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesResponse>
   */
  getMultiplePages(options?: Models.PagingGetMultiplePagesOptionalParams): Promise<Models.PagingGetMultiplePagesResponse>;
  /**
   * @param callback The callback
   */
  getMultiplePages(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePages(options: Models.PagingGetMultiplePagesOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePages(options?: Models.PagingGetMultiplePagesOptionalParams | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetMultiplePagesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMultiplePagesOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesResponse>;
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetOdataMultiplePagesResponse>
   */
  getOdataMultiplePages(options?: Models.PagingGetOdataMultiplePagesOptionalParams): Promise<Models.PagingGetOdataMultiplePagesResponse>;
  /**
   * @param callback The callback
   */
  getOdataMultiplePages(callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getOdataMultiplePages(options: Models.PagingGetOdataMultiplePagesOptionalParams, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getOdataMultiplePages(options?: Models.PagingGetOdataMultiplePagesOptionalParams | msRest.ServiceCallback<Models.OdataProductResult>, callback?: msRest.ServiceCallback<Models.OdataProductResult>): Promise<Models.PagingGetOdataMultiplePagesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOdataMultiplePagesOperationSpec,
      callback) as Promise<Models.PagingGetOdataMultiplePagesResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesWithOffsetResponse>
   */
  getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions, options?: Models.PagingGetMultiplePagesWithOffsetOptionalParams): Promise<Models.PagingGetMultiplePagesWithOffsetResponse>;
  /**
   * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation
   * @param callback The callback
   */
  getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions, options: Models.PagingGetMultiplePagesWithOffsetOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions, options?: Models.PagingGetMultiplePagesWithOffsetOptionalParams | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetMultiplePagesWithOffsetResponse> {
    return this.client.sendOperationRequest(
      {
        pagingGetMultiplePagesWithOffsetOptions,
        options
      },
      getMultiplePagesWithOffsetOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesWithOffsetResponse>;
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a
   * response including a nextLink that has 10 pages
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesRetryFirstResponse>
   */
  getMultiplePagesRetryFirst(options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesRetryFirstResponse>;
  /**
   * @param callback The callback
   */
  getMultiplePagesRetryFirst(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePagesRetryFirst(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetryFirst(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetMultiplePagesRetryFirstResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMultiplePagesRetryFirstOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesRetryFirstResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesRetrySecondResponse>
   */
  getMultiplePagesRetrySecond(options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesRetrySecondResponse>;
  /**
   * @param callback The callback
   */
  getMultiplePagesRetrySecond(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePagesRetrySecond(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetrySecond(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetMultiplePagesRetrySecondResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMultiplePagesRetrySecondOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesRetrySecondResponse>;
  }

  /**
   * A paging operation that receives a 400 on the first call
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetSinglePagesFailureResponse>
   */
  getSinglePagesFailure(options?: msRest.RequestOptionsBase): Promise<Models.PagingGetSinglePagesFailureResponse>;
  /**
   * @param callback The callback
   */
  getSinglePagesFailure(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSinglePagesFailure(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesFailure(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetSinglePagesFailureResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSinglePagesFailureOperationSpec,
      callback) as Promise<Models.PagingGetSinglePagesFailureResponse>;
  }

  /**
   * A paging operation that receives a 400 on the second call
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesFailureResponse>
   */
  getMultiplePagesFailure(options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesFailureResponse>;
  /**
   * @param callback The callback
   */
  getMultiplePagesFailure(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePagesFailure(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailure(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetMultiplePagesFailureResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMultiplePagesFailureOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesFailureResponse>;
  }

  /**
   * A paging operation that receives an invalid nextLink
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesFailureUriResponse>
   */
  getMultiplePagesFailureUri(options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesFailureUriResponse>;
  /**
   * @param callback The callback
   */
  getMultiplePagesFailureUri(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePagesFailureUri(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureUri(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetMultiplePagesFailureUriResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMultiplePagesFailureUriOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesFailureUriResponse>;
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesFragmentNextLinkResponse>
   */
  getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesFragmentNextLinkResponse>;
  /**
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param callback The callback
   */
  getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  /**
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OdataProductResult>, callback?: msRest.ServiceCallback<Models.OdataProductResult>): Promise<Models.PagingGetMultiplePagesFragmentNextLinkResponse> {
    return this.client.sendOperationRequest(
      {
        apiVersion,
        tenant,
        options
      },
      getMultiplePagesFragmentNextLinkOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesFragmentNextLinkResponse>;
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment with parameters grouped
   * @param customParameterGroup Additional parameters for the operation
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse>
   */
  getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: Models.CustomParameterGroup, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse>;
  /**
   * @param customParameterGroup Additional parameters for the operation
   * @param callback The callback
   */
  getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: Models.CustomParameterGroup, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  /**
   * @param customParameterGroup Additional parameters for the operation
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: Models.CustomParameterGroup, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: Models.CustomParameterGroup, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OdataProductResult>, callback?: msRest.ServiceCallback<Models.OdataProductResult>): Promise<Models.PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse> {
    return this.client.sendOperationRequest(
      {
        customParameterGroup,
        options
      },
      getMultiplePagesFragmentWithGroupingNextLinkOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse>;
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesLROResponse>
   */
  getMultiplePagesLRO(options?: Models.PagingGetMultiplePagesLROOptionalParams): Promise<Models.PagingGetMultiplePagesLROResponse> {
    return this.beginGetMultiplePagesLRO(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PagingGetMultiplePagesLROResponse>;
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param nextLink Next link for list operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingNextFragmentResponse>
   */
  nextFragment(apiVersion: string, tenant: string, nextLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingNextFragmentResponse>;
  /**
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param nextLink Next link for list operation.
   * @param callback The callback
   */
  nextFragment(apiVersion: string, tenant: string, nextLink: string, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  /**
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param nextLink Next link for list operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  nextFragment(apiVersion: string, tenant: string, nextLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  nextFragment(apiVersion: string, tenant: string, nextLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OdataProductResult>, callback?: msRest.ServiceCallback<Models.OdataProductResult>): Promise<Models.PagingNextFragmentResponse> {
    return this.client.sendOperationRequest(
      {
        apiVersion,
        tenant,
        nextLink,
        options
      },
      nextFragmentOperationSpec,
      callback) as Promise<Models.PagingNextFragmentResponse>;
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param nextLink Next link for list operation.
   * @param customParameterGroup Additional parameters for the operation
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingNextFragmentWithGroupingResponse>
   */
  nextFragmentWithGrouping(nextLink: string, customParameterGroup: Models.CustomParameterGroup, options?: msRest.RequestOptionsBase): Promise<Models.PagingNextFragmentWithGroupingResponse>;
  /**
   * @param nextLink Next link for list operation.
   * @param customParameterGroup Additional parameters for the operation
   * @param callback The callback
   */
  nextFragmentWithGrouping(nextLink: string, customParameterGroup: Models.CustomParameterGroup, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  /**
   * @param nextLink Next link for list operation.
   * @param customParameterGroup Additional parameters for the operation
   * @param options The optional parameters
   * @param callback The callback
   */
  nextFragmentWithGrouping(nextLink: string, customParameterGroup: Models.CustomParameterGroup, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  nextFragmentWithGrouping(nextLink: string, customParameterGroup: Models.CustomParameterGroup, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OdataProductResult>, callback?: msRest.ServiceCallback<Models.OdataProductResult>): Promise<Models.PagingNextFragmentWithGroupingResponse> {
    return this.client.sendOperationRequest(
      {
        nextLink,
        customParameterGroup,
        options
      },
      nextFragmentWithGroupingOperationSpec,
      callback) as Promise<Models.PagingNextFragmentWithGroupingResponse>;
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGetMultiplePagesLRO(options?: Models.PagingBeginGetMultiplePagesLROOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginGetMultiplePagesLROOperationSpec,
      options);
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetSinglePagesNextResponse>
   */
  getSinglePagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetSinglePagesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSinglePagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSinglePagesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetSinglePagesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSinglePagesNextOperationSpec,
      callback) as Promise<Models.PagingGetSinglePagesNextResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesNextResponse>
   */
  getMultiplePagesNext(nextPageLink: string, options?: Models.PagingGetMultiplePagesNextOptionalParams): Promise<Models.PagingGetMultiplePagesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getMultiplePagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePagesNext(nextPageLink: string, options: Models.PagingGetMultiplePagesNextOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesNext(nextPageLink: string, options?: Models.PagingGetMultiplePagesNextOptionalParams | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetMultiplePagesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiplePagesNextOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesNextResponse>;
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetOdataMultiplePagesNextResponse>
   */
  getOdataMultiplePagesNext(nextPageLink: string, options?: Models.PagingGetOdataMultiplePagesNextOptionalParams): Promise<Models.PagingGetOdataMultiplePagesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getOdataMultiplePagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getOdataMultiplePagesNext(nextPageLink: string, options: Models.PagingGetOdataMultiplePagesNextOptionalParams, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getOdataMultiplePagesNext(nextPageLink: string, options?: Models.PagingGetOdataMultiplePagesNextOptionalParams | msRest.ServiceCallback<Models.OdataProductResult>, callback?: msRest.ServiceCallback<Models.OdataProductResult>): Promise<Models.PagingGetOdataMultiplePagesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getOdataMultiplePagesNextOperationSpec,
      callback) as Promise<Models.PagingGetOdataMultiplePagesNextResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesWithOffsetNextResponse>
   */
  getMultiplePagesWithOffsetNext(nextPageLink: string, options?: Models.PagingGetMultiplePagesWithOffsetNextOptionalParams): Promise<Models.PagingGetMultiplePagesWithOffsetNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getMultiplePagesWithOffsetNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePagesWithOffsetNext(nextPageLink: string, options: Models.PagingGetMultiplePagesWithOffsetNextOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesWithOffsetNext(nextPageLink: string, options?: Models.PagingGetMultiplePagesWithOffsetNextOptionalParams | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetMultiplePagesWithOffsetNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiplePagesWithOffsetNextOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesWithOffsetNextResponse>;
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a
   * response including a nextLink that has 10 pages
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesRetryFirstNextResponse>
   */
  getMultiplePagesRetryFirstNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesRetryFirstNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getMultiplePagesRetryFirstNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePagesRetryFirstNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetryFirstNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetMultiplePagesRetryFirstNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiplePagesRetryFirstNextOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesRetryFirstNextResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesRetrySecondNextResponse>
   */
  getMultiplePagesRetrySecondNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesRetrySecondNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getMultiplePagesRetrySecondNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePagesRetrySecondNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetrySecondNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetMultiplePagesRetrySecondNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiplePagesRetrySecondNextOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesRetrySecondNextResponse>;
  }

  /**
   * A paging operation that receives a 400 on the first call
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetSinglePagesFailureNextResponse>
   */
  getSinglePagesFailureNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetSinglePagesFailureNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSinglePagesFailureNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSinglePagesFailureNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesFailureNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetSinglePagesFailureNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSinglePagesFailureNextOperationSpec,
      callback) as Promise<Models.PagingGetSinglePagesFailureNextResponse>;
  }

  /**
   * A paging operation that receives a 400 on the second call
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesFailureNextResponse>
   */
  getMultiplePagesFailureNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesFailureNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getMultiplePagesFailureNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePagesFailureNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetMultiplePagesFailureNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiplePagesFailureNextOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesFailureNextResponse>;
  }

  /**
   * A paging operation that receives an invalid nextLink
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesFailureUriNextResponse>
   */
  getMultiplePagesFailureUriNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesFailureUriNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getMultiplePagesFailureUriNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiplePagesFailureUriNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureUriNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProductResult>, callback?: msRest.ServiceCallback<Models.ProductResult>): Promise<Models.PagingGetMultiplePagesFailureUriNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiplePagesFailureUriNextOperationSpec,
      callback) as Promise<Models.PagingGetMultiplePagesFailureUriNextResponse>;
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PagingGetMultiplePagesLRONextResponse>
   */
  getMultiplePagesLRONext(nextPageLink: string, options?: Models.PagingGetMultiplePagesLRONextOptionalParams): Promise<Models.PagingGetMultiplePagesLRONextResponse> {
    return this.beginGetMultiplePagesLRONext(nextPageLink,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PagingGetMultiplePagesLRONextResponse>;
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGetMultiplePagesLRONext(nextPageLink: string, options?: Models.PagingBeginGetMultiplePagesLRONextOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        nextPageLink,
        options
      },
      beginGetMultiplePagesLRONextOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getSinglePagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/single",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple",
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults0,
    Parameters.timeout0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOdataMultiplePagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/odata",
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults1,
    Parameters.timeout1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesWithOffsetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/withpath/{offset}",
  urlParameters: [
    Parameters.offset
  ],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults2,
    Parameters.timeout2
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesRetryFirstOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/retryfirst",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesRetrySecondOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/retrysecond",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSinglePagesFailureOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/single/failure",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesFailureOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/failure",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesFailureUriOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/failureuri",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesFragmentNextLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/fragment/{tenant}",
  urlParameters: [
    Parameters.tenant0
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesFragmentWithGroupingNextLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/fragmentwithgrouping/{tenant}",
  urlParameters: [
    Parameters.tenant1
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const nextFragmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/fragment/{tenant}/{nextLink}",
  urlParameters: [
    Parameters.tenant0,
    Parameters.nextLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const nextFragmentWithGroupingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/fragmentwithgrouping/{tenant}/{nextLink}",
  urlParameters: [
    Parameters.nextLink,
    Parameters.tenant1
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetMultiplePagesLROOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "paging/multiple/lro",
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults3,
    Parameters.timeout3
  ],
  responses: {
    202: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSinglePagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults0,
    Parameters.timeout0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOdataMultiplePagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults1,
    Parameters.timeout1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesWithOffsetNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults4,
    Parameters.timeout4
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesRetryFirstNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesRetrySecondNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSinglePagesFailureNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesFailureNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesFailureUriNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetMultiplePagesLRONextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults3,
    Parameters.timeout3
  ],
  responses: {
    202: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
