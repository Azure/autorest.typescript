/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/pagingMappers";
import * as Parameters from "../models/parameters";
import { AutoRestPagingTestServiceContext } from "../autoRestPagingTestServiceContext";

/** Class representing a Paging. */
export class Paging {
  private readonly client: AutoRestPagingTestServiceContext;

  /**
   * Create a Paging.
   * @param {AutoRestPagingTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestPagingTestServiceContext) {
    this.client = client;
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSinglePagesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.PagingGetSinglePagesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSinglePagesOperationSpec) as Promise<Models.PagingGetSinglePagesResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingGetMultiplePagesOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesWithHttpOperationResponse(options?: Models.PagingGetMultiplePagesOptionalParams): Promise<Models.PagingGetMultiplePagesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMultiplePagesOperationSpec) as Promise<Models.PagingGetMultiplePagesResponse>;
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   *
   * @param {PagingGetOdataMultiplePagesOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getOdataMultiplePagesWithHttpOperationResponse(options?: Models.PagingGetOdataMultiplePagesOptionalParams): Promise<Models.PagingGetOdataMultiplePagesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOdataMultiplePagesOperationSpec) as Promise<Models.PagingGetOdataMultiplePagesResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingGetMultiplePagesWithOffsetOptions} pagingGetMultiplePagesWithOffsetOptions
   * Additional parameters for the operation
   *
   * @param {PagingGetMultiplePagesWithOffsetOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesWithOffsetWithHttpOperationResponse(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions, options?: Models.PagingGetMultiplePagesWithOffsetOptionalParams): Promise<Models.PagingGetMultiplePagesWithOffsetResponse> {
    return this.client.sendOperationRequest(
      {
        pagingGetMultiplePagesWithOffsetOptions,
        options
      },
      getMultiplePagesWithOffsetOperationSpec) as Promise<Models.PagingGetMultiplePagesWithOffsetResponse>;
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a
   * response including a nextLink that has 10 pages
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesRetryFirstWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesRetryFirstResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMultiplePagesRetryFirstOperationSpec) as Promise<Models.PagingGetMultiplePagesRetryFirstResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesRetrySecondWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesRetrySecondResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMultiplePagesRetrySecondOperationSpec) as Promise<Models.PagingGetMultiplePagesRetrySecondResponse>;
  }

  /**
   * A paging operation that receives a 400 on the first call
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSinglePagesFailureWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.PagingGetSinglePagesFailureResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSinglePagesFailureOperationSpec) as Promise<Models.PagingGetSinglePagesFailureResponse>;
  }

  /**
   * A paging operation that receives a 400 on the second call
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesFailureWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesFailureResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMultiplePagesFailureOperationSpec) as Promise<Models.PagingGetMultiplePagesFailureResponse>;
  }

  /**
   * A paging operation that receives an invalid nextLink
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesFailureUriWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesFailureUriResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMultiplePagesFailureUriOperationSpec) as Promise<Models.PagingGetMultiplePagesFailureUriResponse>;
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   *
   * @param {string} apiVersion Sets the api version to use.
   *
   * @param {string} tenant Sets the tenant to use.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesFragmentNextLinkWithHttpOperationResponse(apiVersion: string, tenant: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesFragmentNextLinkResponse> {
    return this.client.sendOperationRequest(
      {
        apiVersion,
        tenant,
        options
      },
      getMultiplePagesFragmentNextLinkOperationSpec) as Promise<Models.PagingGetMultiplePagesFragmentNextLinkResponse>;
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment with parameters grouped
   *
   * @param {CustomParameterGroup} customParameterGroup Additional parameters for the operation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesFragmentWithGroupingNextLinkWithHttpOperationResponse(customParameterGroup: Models.CustomParameterGroup, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse> {
    return this.client.sendOperationRequest(
      {
        customParameterGroup,
        options
      },
      getMultiplePagesFragmentWithGroupingNextLinkOperationSpec) as Promise<Models.PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse>;
  }


  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingGetMultiplePagesLROOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesLROWithHttpOperationResponse(options?: Models.PagingGetMultiplePagesLROOptionalParams): Promise<Models.PagingGetMultiplePagesLROResponse> {
    return this.beginGetMultiplePagesLROWithHttpOperationResponse(options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {
        let httpRequest = operationRes.request;

        // Deserialize Response
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        if (parsedResponse != undefined) {
          try {
            const serializer = new msRest.Serializer(Mappers);
            operationRes.parsedBody = serializer.deserialize(Mappers.ProductResult, parsedResponse, "operationRes.parsedBody")
          } catch (error) {
            const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
            deserializationError.request = msRest.stripRequest(httpRequest);
            deserializationError.response = msRest.stripResponse(operationRes);
            throw deserializationError;
          }
        }
        return operationRes;
      }) as Promise<Models.PagingGetMultiplePagesLROResponse>;
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   *
   * @param {string} apiVersion Sets the api version to use.
   *
   * @param {string} tenant Sets the tenant to use.
   *
   * @param {string} nextLink Next link for list operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  nextFragmentWithHttpOperationResponse(apiVersion: string, tenant: string, nextLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingNextFragmentResponse> {
    return this.client.sendOperationRequest(
      {
        apiVersion,
        tenant,
        nextLink,
        options
      },
      nextFragmentOperationSpec) as Promise<Models.PagingNextFragmentResponse>;
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   *
   * @param {string} nextLink Next link for list operation.
   *
   * @param {CustomParameterGroup} customParameterGroup Additional parameters for the operation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  nextFragmentWithGroupingWithHttpOperationResponse(nextLink: string, customParameterGroup: Models.CustomParameterGroup, options?: msRest.RequestOptionsBase): Promise<Models.PagingNextFragmentWithGroupingResponse> {
    return this.client.sendOperationRequest(
      {
        nextLink,
        customParameterGroup,
        options
      },
      nextFragmentWithGroupingOperationSpec) as Promise<Models.PagingNextFragmentWithGroupingResponse>;
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingBeginGetMultiplePagesLROOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginGetMultiplePagesLROWithHttpOperationResponse(options?: Models.PagingBeginGetMultiplePagesLROOptionalParams): Promise<Models.PagingBeginGetMultiplePagesLROResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      beginGetMultiplePagesLROOperationSpec) as Promise<Models.PagingBeginGetMultiplePagesLROResponse>;
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSinglePagesNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetSinglePagesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSinglePagesNextOperationSpec) as Promise<Models.PagingGetSinglePagesNextResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetMultiplePagesNextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesNextWithHttpOperationResponse(nextPageLink: string, options?: Models.PagingGetMultiplePagesNextOptionalParams): Promise<Models.PagingGetMultiplePagesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiplePagesNextOperationSpec) as Promise<Models.PagingGetMultiplePagesNextResponse>;
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetOdataMultiplePagesNextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getOdataMultiplePagesNextWithHttpOperationResponse(nextPageLink: string, options?: Models.PagingGetOdataMultiplePagesNextOptionalParams): Promise<Models.PagingGetOdataMultiplePagesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getOdataMultiplePagesNextOperationSpec) as Promise<Models.PagingGetOdataMultiplePagesNextResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetMultiplePagesWithOffsetNextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesWithOffsetNextWithHttpOperationResponse(nextPageLink: string, options?: Models.PagingGetMultiplePagesWithOffsetNextOptionalParams): Promise<Models.PagingGetMultiplePagesWithOffsetNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiplePagesWithOffsetNextOperationSpec) as Promise<Models.PagingGetMultiplePagesWithOffsetNextResponse>;
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a
   * response including a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesRetryFirstNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesRetryFirstNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiplePagesRetryFirstNextOperationSpec) as Promise<Models.PagingGetMultiplePagesRetryFirstNextResponse>;
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesRetrySecondNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesRetrySecondNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiplePagesRetrySecondNextOperationSpec) as Promise<Models.PagingGetMultiplePagesRetrySecondNextResponse>;
  }

  /**
   * A paging operation that receives a 400 on the first call
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSinglePagesFailureNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetSinglePagesFailureNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSinglePagesFailureNextOperationSpec) as Promise<Models.PagingGetSinglePagesFailureNextResponse>;
  }

  /**
   * A paging operation that receives a 400 on the second call
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesFailureNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesFailureNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiplePagesFailureNextOperationSpec) as Promise<Models.PagingGetMultiplePagesFailureNextResponse>;
  }

  /**
   * A paging operation that receives an invalid nextLink
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesFailureUriNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PagingGetMultiplePagesFailureUriNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiplePagesFailureUriNextOperationSpec) as Promise<Models.PagingGetMultiplePagesFailureUriNextResponse>;
  }


  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetMultiplePagesLRONextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getMultiplePagesLRONextWithHttpOperationResponse(nextPageLink: string, options?: Models.PagingGetMultiplePagesLRONextOptionalParams): Promise<Models.PagingGetMultiplePagesLRONextResponse> {
    return this.beginGetMultiplePagesLRONextWithHttpOperationResponse(nextPageLink, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {
        let httpRequest = operationRes.request;

        // Deserialize Response
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        if (parsedResponse != undefined) {
          try {
            const serializer = new msRest.Serializer(Mappers);
            operationRes.parsedBody = serializer.deserialize(Mappers.ProductResult, parsedResponse, "operationRes.parsedBody")
          } catch (error) {
            const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
            deserializationError.request = msRest.stripRequest(httpRequest);
            deserializationError.response = msRest.stripResponse(operationRes);
            throw deserializationError;
          }
        }
        return operationRes;
      }) as Promise<Models.PagingGetMultiplePagesLRONextResponse>;
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingBeginGetMultiplePagesLRONextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginGetMultiplePagesLRONextWithHttpOperationResponse(nextPageLink: string, options?: Models.PagingBeginGetMultiplePagesLRONextOptionalParams): Promise<Models.PagingBeginGetMultiplePagesLRONextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      beginGetMultiplePagesLRONextOperationSpec) as Promise<Models.PagingBeginGetMultiplePagesLRONextResponse>;
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSinglePages(): Promise<Models.ProductResult>;
  getSinglePages(options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getSinglePages(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePages(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePages(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getSinglePagesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingGetMultiplePagesOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePages(): Promise<Models.ProductResult>;
  getMultiplePages(options: Models.PagingGetMultiplePagesOptionalParams): Promise<Models.ProductResult>;
  getMultiplePages(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePages(options: Models.PagingGetMultiplePagesOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePages(options?: Models.PagingGetMultiplePagesOptionalParams, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   *
   * @param {PagingGetOdataMultiplePagesOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OdataProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OdataProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOdataMultiplePages(): Promise<Models.OdataProductResult>;
  getOdataMultiplePages(options: Models.PagingGetOdataMultiplePagesOptionalParams): Promise<Models.OdataProductResult>;
  getOdataMultiplePages(callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getOdataMultiplePages(options: Models.PagingGetOdataMultiplePagesOptionalParams, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getOdataMultiplePages(options?: Models.PagingGetOdataMultiplePagesOptionalParams, callback?: msRest.ServiceCallback<Models.OdataProductResult>): any {
    return msRest.responseToBody(this.getOdataMultiplePagesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingGetMultiplePagesWithOffsetOptions} pagingGetMultiplePagesWithOffsetOptions
   * Additional parameters for the operation
   *
   * @param {PagingGetMultiplePagesWithOffsetOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions): Promise<Models.ProductResult>;
  getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions, options: Models.PagingGetMultiplePagesWithOffsetOptionalParams): Promise<Models.ProductResult>;
  getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions, options: Models.PagingGetMultiplePagesWithOffsetOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions, options?: Models.PagingGetMultiplePagesWithOffsetOptionalParams, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesWithOffsetWithHttpOperationResponse.bind(this), pagingGetMultiplePagesWithOffsetOptions, options, callback);
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a
   * response including a nextLink that has 10 pages
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesRetryFirst(): Promise<Models.ProductResult>;
  getMultiplePagesRetryFirst(options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesRetryFirst(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetryFirst(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetryFirst(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesRetryFirstWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesRetrySecond(): Promise<Models.ProductResult>;
  getMultiplePagesRetrySecond(options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesRetrySecond(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetrySecond(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetrySecond(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesRetrySecondWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * A paging operation that receives a 400 on the first call
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSinglePagesFailure(): Promise<Models.ProductResult>;
  getSinglePagesFailure(options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getSinglePagesFailure(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesFailure(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesFailure(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getSinglePagesFailureWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * A paging operation that receives a 400 on the second call
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesFailure(): Promise<Models.ProductResult>;
  getMultiplePagesFailure(options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesFailure(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailure(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailure(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesFailureWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * A paging operation that receives an invalid nextLink
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesFailureUri(): Promise<Models.ProductResult>;
  getMultiplePagesFailureUri(options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesFailureUri(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureUri(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureUri(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesFailureUriWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   *
   * @param {string} apiVersion Sets the api version to use.
   *
   * @param {string} tenant Sets the tenant to use.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OdataProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OdataProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string): Promise<Models.OdataProductResult>;
  getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, options: msRest.RequestOptionsBase): Promise<Models.OdataProductResult>;
  getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OdataProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesFragmentNextLinkWithHttpOperationResponse.bind(this), apiVersion, tenant, options, callback);
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment with parameters grouped
   *
   * @param {CustomParameterGroup} customParameterGroup Additional parameters for the operation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OdataProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OdataProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: Models.CustomParameterGroup): Promise<Models.OdataProductResult>;
  getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: Models.CustomParameterGroup, options: msRest.RequestOptionsBase): Promise<Models.OdataProductResult>;
  getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: Models.CustomParameterGroup, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: Models.CustomParameterGroup, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: Models.CustomParameterGroup, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OdataProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesFragmentWithGroupingNextLinkWithHttpOperationResponse.bind(this), customParameterGroup, options, callback);
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingGetMultiplePagesLROOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesLRO(): Promise<Models.ProductResult>;
  getMultiplePagesLRO(options: Models.PagingGetMultiplePagesLROOptionalParams): Promise<Models.ProductResult>;
  getMultiplePagesLRO(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesLRO(options: Models.PagingGetMultiplePagesLROOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesLRO(options?: Models.PagingGetMultiplePagesLROOptionalParams, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesLROWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   *
   * @param {string} apiVersion Sets the api version to use.
   *
   * @param {string} tenant Sets the tenant to use.
   *
   * @param {string} nextLink Next link for list operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OdataProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OdataProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  nextFragment(apiVersion: string, tenant: string, nextLink: string): Promise<Models.OdataProductResult>;
  nextFragment(apiVersion: string, tenant: string, nextLink: string, options: msRest.RequestOptionsBase): Promise<Models.OdataProductResult>;
  nextFragment(apiVersion: string, tenant: string, nextLink: string, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  nextFragment(apiVersion: string, tenant: string, nextLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  nextFragment(apiVersion: string, tenant: string, nextLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OdataProductResult>): any {
    return msRest.responseToBody(this.nextFragmentWithHttpOperationResponse.bind(this), apiVersion, tenant, nextLink, options, callback);
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   *
   * @param {string} nextLink Next link for list operation.
   *
   * @param {CustomParameterGroup} customParameterGroup Additional parameters for the operation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OdataProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OdataProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  nextFragmentWithGrouping(nextLink: string, customParameterGroup: Models.CustomParameterGroup): Promise<Models.OdataProductResult>;
  nextFragmentWithGrouping(nextLink: string, customParameterGroup: Models.CustomParameterGroup, options: msRest.RequestOptionsBase): Promise<Models.OdataProductResult>;
  nextFragmentWithGrouping(nextLink: string, customParameterGroup: Models.CustomParameterGroup, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  nextFragmentWithGrouping(nextLink: string, customParameterGroup: Models.CustomParameterGroup, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  nextFragmentWithGrouping(nextLink: string, customParameterGroup: Models.CustomParameterGroup, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OdataProductResult>): any {
    return msRest.responseToBody(this.nextFragmentWithGroupingWithHttpOperationResponse.bind(this), nextLink, customParameterGroup, options, callback);
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingBeginGetMultiplePagesLROOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginGetMultiplePagesLRO(): Promise<Models.ProductResult>;
  beginGetMultiplePagesLRO(options: Models.PagingBeginGetMultiplePagesLROOptionalParams): Promise<Models.ProductResult>;
  beginGetMultiplePagesLRO(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  beginGetMultiplePagesLRO(options: Models.PagingBeginGetMultiplePagesLROOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  beginGetMultiplePagesLRO(options?: Models.PagingBeginGetMultiplePagesLROOptionalParams, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.beginGetMultiplePagesLROWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSinglePagesNext(nextPageLink: string): Promise<Models.ProductResult>;
  getSinglePagesNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getSinglePagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getSinglePagesNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetMultiplePagesNextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesNext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesNext(nextPageLink: string, options: Models.PagingGetMultiplePagesNextOptionalParams): Promise<Models.ProductResult>;
  getMultiplePagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesNext(nextPageLink: string, options: Models.PagingGetMultiplePagesNextOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesNext(nextPageLink: string, options?: Models.PagingGetMultiplePagesNextOptionalParams, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetOdataMultiplePagesNextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OdataProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OdataProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOdataMultiplePagesNext(nextPageLink: string): Promise<Models.OdataProductResult>;
  getOdataMultiplePagesNext(nextPageLink: string, options: Models.PagingGetOdataMultiplePagesNextOptionalParams): Promise<Models.OdataProductResult>;
  getOdataMultiplePagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getOdataMultiplePagesNext(nextPageLink: string, options: Models.PagingGetOdataMultiplePagesNextOptionalParams, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getOdataMultiplePagesNext(nextPageLink: string, options?: Models.PagingGetOdataMultiplePagesNextOptionalParams, callback?: msRest.ServiceCallback<Models.OdataProductResult>): any {
    return msRest.responseToBody(this.getOdataMultiplePagesNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetMultiplePagesWithOffsetNextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesWithOffsetNext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesWithOffsetNext(nextPageLink: string, options: Models.PagingGetMultiplePagesWithOffsetNextOptionalParams): Promise<Models.ProductResult>;
  getMultiplePagesWithOffsetNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesWithOffsetNext(nextPageLink: string, options: Models.PagingGetMultiplePagesWithOffsetNextOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesWithOffsetNext(nextPageLink: string, options?: Models.PagingGetMultiplePagesWithOffsetNextOptionalParams, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesWithOffsetNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a
   * response including a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesRetryFirstNext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesRetryFirstNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesRetryFirstNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetryFirstNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetryFirstNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesRetryFirstNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesRetrySecondNext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesRetrySecondNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesRetrySecondNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetrySecondNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetrySecondNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesRetrySecondNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * A paging operation that receives a 400 on the first call
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSinglePagesFailureNext(nextPageLink: string): Promise<Models.ProductResult>;
  getSinglePagesFailureNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getSinglePagesFailureNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesFailureNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesFailureNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getSinglePagesFailureNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * A paging operation that receives a 400 on the second call
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesFailureNext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesFailureNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesFailureNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesFailureNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * A paging operation that receives an invalid nextLink
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesFailureUriNext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesFailureUriNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesFailureUriNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureUriNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureUriNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesFailureUriNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetMultiplePagesLRONextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesLRONext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesLRONext(nextPageLink: string, options: Models.PagingGetMultiplePagesLRONextOptionalParams): Promise<Models.ProductResult>;
  getMultiplePagesLRONext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesLRONext(nextPageLink: string, options: Models.PagingGetMultiplePagesLRONextOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesLRONext(nextPageLink: string, options?: Models.PagingGetMultiplePagesLRONextOptionalParams, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.getMultiplePagesLRONextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingBeginGetMultiplePagesLRONextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginGetMultiplePagesLRONext(nextPageLink: string): Promise<Models.ProductResult>;
  beginGetMultiplePagesLRONext(nextPageLink: string, options: Models.PagingBeginGetMultiplePagesLRONextOptionalParams): Promise<Models.ProductResult>;
  beginGetMultiplePagesLRONext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  beginGetMultiplePagesLRONext(nextPageLink: string, options: Models.PagingBeginGetMultiplePagesLRONextOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  beginGetMultiplePagesLRONext(nextPageLink: string, options?: Models.PagingBeginGetMultiplePagesLRONextOptionalParams, callback?: msRest.ServiceCallback<Models.ProductResult>): any {
    return msRest.responseToBody(this.beginGetMultiplePagesLRONextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getSinglePagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/single",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple",
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults0,
    Parameters.timeout0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOdataMultiplePagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/odata",
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults1,
    Parameters.timeout1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesWithOffsetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/withpath/{offset}",
  urlParameters: [
    Parameters.offset
  ],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults2,
    Parameters.timeout2
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesRetryFirstOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/retryfirst",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesRetrySecondOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/retrysecond",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSinglePagesFailureOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/single/failure",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesFailureOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/failure",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesFailureUriOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/failureuri",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesFragmentNextLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/fragment/{tenant}",
  urlParameters: [
    Parameters.tenant0
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesFragmentWithGroupingNextLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/fragmentwithgrouping/{tenant}",
  urlParameters: [
    Parameters.tenant1
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const nextFragmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/fragment/{tenant}/{nextLink}",
  urlParameters: [
    Parameters.tenant0,
    Parameters.nextLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const nextFragmentWithGroupingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/fragmentwithgrouping/{tenant}/{nextLink}",
  urlParameters: [
    Parameters.nextLink,
    Parameters.tenant1
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetMultiplePagesLROOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "paging/multiple/lro",
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults3,
    Parameters.timeout3
  ],
  responses: {
    202: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSinglePagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults0,
    Parameters.timeout0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOdataMultiplePagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults1,
    Parameters.timeout1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesWithOffsetNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults4,
    Parameters.timeout4
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesRetryFirstNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesRetrySecondNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSinglePagesFailureNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesFailureNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiplePagesFailureUriNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetMultiplePagesLRONextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.acceptLanguage,
    Parameters.maxresults3,
    Parameters.timeout3
  ],
  responses: {
    202: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
