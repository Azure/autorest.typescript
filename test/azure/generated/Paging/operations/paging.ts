/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/pagingMappers";
import { AutoRestPagingTestServiceContext } from "../autoRestPagingTestServiceContext";

/** Class representing a Paging. */
export class Paging {
  private readonly client: AutoRestPagingTestServiceContext;

  /**
   * Create a Paging.
   * @param {AutoRestPagingTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestPagingTestServiceContext) {
    this.client = client;
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getSinglePagesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), getSinglePagesOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingGetMultiplePagesOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesWithHttpOperationResponse(options?: Models.PagingGetMultiplePagesOptionalParams): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {
    let clientRequestId = (options && options.clientRequestId !== undefined) ? options.clientRequestId : undefined;
    let pagingGetMultiplePagesOptions = (options && options.pagingGetMultiplePagesOptions !== undefined) ? options.pagingGetMultiplePagesOptions : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            clientRequestId,
            pagingGetMultiplePagesOptions
          },
          options),
        getMultiplePagesOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   *
   * @param {PagingGetOdataMultiplePagesOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getOdataMultiplePagesWithHttpOperationResponse(options?: Models.PagingGetOdataMultiplePagesOptionalParams): Promise<msRest.HttpOperationResponse<Models.OdataProductResult>> {
    let clientRequestId = (options && options.clientRequestId !== undefined) ? options.clientRequestId : undefined;
    let pagingGetOdataMultiplePagesOptions = (options && options.pagingGetOdataMultiplePagesOptions !== undefined) ? options.pagingGetOdataMultiplePagesOptions : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            clientRequestId,
            pagingGetOdataMultiplePagesOptions
          },
          options),
        getOdataMultiplePagesOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingGetMultiplePagesWithOffsetOptions} pagingGetMultiplePagesWithOffsetOptions
   * Additional parameters for the operation
   *
   * @param {PagingGetMultiplePagesWithOffsetOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesWithOffsetWithHttpOperationResponse(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions, options?: Models.PagingGetMultiplePagesWithOffsetOptionalParams): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {
    let clientRequestId = (options && options.clientRequestId !== undefined) ? options.clientRequestId : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            clientRequestId,
            pagingGetMultiplePagesWithOffsetOptions
          },
          options),
        getMultiplePagesWithOffsetOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a
   * response including a nextLink that has 10 pages
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesRetryFirstWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), getMultiplePagesRetryFirstOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesRetrySecondWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), getMultiplePagesRetrySecondOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that receives a 400 on the first call
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getSinglePagesFailureWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), getSinglePagesFailureOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that receives a 400 on the second call
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesFailureWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), getMultiplePagesFailureOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that receives an invalid nextLink
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesFailureUriWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), getMultiplePagesFailureUriOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   *
   * @param {string} apiVersion Sets the api version to use.
   *
   * @param {string} tenant Sets the tenant to use.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesFragmentNextLinkWithHttpOperationResponse(apiVersion: string, tenant: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.OdataProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            apiVersion,
            tenant
          },
          options),
        getMultiplePagesFragmentNextLinkOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment with parameters grouped
   *
   * @param {CustomParameterGroup} customParameterGroup Additional parameters for the operation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesFragmentWithGroupingNextLinkWithHttpOperationResponse(customParameterGroup: Models.CustomParameterGroup, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.OdataProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            customParameterGroup
          },
          options),
        getMultiplePagesFragmentWithGroupingNextLinkOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingGetMultiplePagesLROOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesLROWithHttpOperationResponse(options?: Models.PagingGetMultiplePagesLROOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginGetMultiplePagesLROWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.ProductResult, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   *
   * @param {string} apiVersion Sets the api version to use.
   *
   * @param {string} tenant Sets the tenant to use.
   *
   * @param {string} nextLink Next link for list operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async nextFragmentWithHttpOperationResponse(apiVersion: string, tenant: string, nextLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.OdataProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            apiVersion,
            tenant,
            nextLink
          },
          options),
        nextFragmentOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   *
   * @param {string} nextLink Next link for list operation.
   *
   * @param {CustomParameterGroup} customParameterGroup Additional parameters for the operation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async nextFragmentWithGroupingWithHttpOperationResponse(nextLink: string, customParameterGroup: Models.CustomParameterGroup, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.OdataProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            nextLink,
            customParameterGroup
          },
          options),
        nextFragmentWithGroupingOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingBeginGetMultiplePagesLROOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginGetMultiplePagesLROWithHttpOperationResponse(options?: Models.PagingBeginGetMultiplePagesLROOptionalParams): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {
    let clientRequestId = (options && options.clientRequestId !== undefined) ? options.clientRequestId : undefined;
    let pagingGetMultiplePagesLROOptions = (options && options.pagingGetMultiplePagesLROOptions !== undefined) ? options.pagingGetMultiplePagesLROOptions : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            clientRequestId,
            pagingGetMultiplePagesLROOptions
          },
          options),
        beginGetMultiplePagesLROOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getSinglePagesNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            nextPageLink
          },
          options),
        getSinglePagesNextOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetMultiplePagesNextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesNextWithHttpOperationResponse(nextPageLink: string, options?: Models.PagingGetMultiplePagesNextOptionalParams): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {
    let clientRequestId = (options && options.clientRequestId !== undefined) ? options.clientRequestId : undefined;
    let pagingGetMultiplePagesOptions = (options && options.pagingGetMultiplePagesOptions !== undefined) ? options.pagingGetMultiplePagesOptions : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            nextPageLink,
            clientRequestId,
            pagingGetMultiplePagesOptions
          },
          options),
        getMultiplePagesNextOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetOdataMultiplePagesNextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getOdataMultiplePagesNextWithHttpOperationResponse(nextPageLink: string, options?: Models.PagingGetOdataMultiplePagesNextOptionalParams): Promise<msRest.HttpOperationResponse<Models.OdataProductResult>> {
    let clientRequestId = (options && options.clientRequestId !== undefined) ? options.clientRequestId : undefined;
    let pagingGetOdataMultiplePagesOptions = (options && options.pagingGetOdataMultiplePagesOptions !== undefined) ? options.pagingGetOdataMultiplePagesOptions : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            nextPageLink,
            clientRequestId,
            pagingGetOdataMultiplePagesOptions
          },
          options),
        getOdataMultiplePagesNextOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetMultiplePagesWithOffsetNextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesWithOffsetNextWithHttpOperationResponse(nextPageLink: string, options?: Models.PagingGetMultiplePagesWithOffsetNextOptionalParams): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {
    let clientRequestId = (options && options.clientRequestId !== undefined) ? options.clientRequestId : undefined;
    let pagingGetMultiplePagesWithOffsetNextOptions = (options && options.pagingGetMultiplePagesWithOffsetNextOptions !== undefined) ? options.pagingGetMultiplePagesWithOffsetNextOptions : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            nextPageLink,
            clientRequestId,
            pagingGetMultiplePagesWithOffsetNextOptions
          },
          options),
        getMultiplePagesWithOffsetNextOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a
   * response including a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesRetryFirstNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            nextPageLink
          },
          options),
        getMultiplePagesRetryFirstNextOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesRetrySecondNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            nextPageLink
          },
          options),
        getMultiplePagesRetrySecondNextOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that receives a 400 on the first call
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getSinglePagesFailureNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            nextPageLink
          },
          options),
        getSinglePagesFailureNextOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that receives a 400 on the second call
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesFailureNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            nextPageLink
          },
          options),
        getMultiplePagesFailureNextOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that receives an invalid nextLink
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesFailureUriNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            nextPageLink
          },
          options),
        getMultiplePagesFailureUriNextOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetMultiplePagesLRONextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getMultiplePagesLRONextWithHttpOperationResponse(nextPageLink: string, options?: Models.PagingGetMultiplePagesLRONextOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginGetMultiplePagesLRONextWithHttpOperationResponse(nextPageLink, options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.ProductResult, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingBeginGetMultiplePagesLRONextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginGetMultiplePagesLRONextWithHttpOperationResponse(nextPageLink: string, options?: Models.PagingBeginGetMultiplePagesLRONextOptionalParams): Promise<msRest.HttpOperationResponse<Models.ProductResult>> {
    let clientRequestId = (options && options.clientRequestId !== undefined) ? options.clientRequestId : undefined;
    let pagingGetMultiplePagesLROOptions = (options && options.pagingGetMultiplePagesLROOptions !== undefined) ? options.pagingGetMultiplePagesLROOptions : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            nextPageLink,
            clientRequestId,
            pagingGetMultiplePagesLROOptions
          },
          options),
        beginGetMultiplePagesLRONextOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSinglePages(): Promise<Models.ProductResult>;
  getSinglePages(options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getSinglePages(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePages(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePages(): any {
    return msRest.responseToBody(this.getSinglePagesWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingGetMultiplePagesOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePages(): Promise<Models.ProductResult>;
  getMultiplePages(options: Models.PagingGetMultiplePagesOptionalParams): Promise<Models.ProductResult>;
  getMultiplePages(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePages(options: Models.PagingGetMultiplePagesOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePages(): any {
    return msRest.responseToBody(this.getMultiplePagesWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   *
   * @param {PagingGetOdataMultiplePagesOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OdataProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OdataProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOdataMultiplePages(): Promise<Models.OdataProductResult>;
  getOdataMultiplePages(options: Models.PagingGetOdataMultiplePagesOptionalParams): Promise<Models.OdataProductResult>;
  getOdataMultiplePages(callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getOdataMultiplePages(options: Models.PagingGetOdataMultiplePagesOptionalParams, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getOdataMultiplePages(): any {
    return msRest.responseToBody(this.getOdataMultiplePagesWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingGetMultiplePagesWithOffsetOptions} pagingGetMultiplePagesWithOffsetOptions
   * Additional parameters for the operation
   *
   * @param {PagingGetMultiplePagesWithOffsetOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions): Promise<Models.ProductResult>;
  getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions, options: Models.PagingGetMultiplePagesWithOffsetOptionalParams): Promise<Models.ProductResult>;
  getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: Models.PagingGetMultiplePagesWithOffsetOptions, options: Models.PagingGetMultiplePagesWithOffsetOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesWithOffset(): any {
    return msRest.responseToBody(this.getMultiplePagesWithOffsetWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a
   * response including a nextLink that has 10 pages
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesRetryFirst(): Promise<Models.ProductResult>;
  getMultiplePagesRetryFirst(options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesRetryFirst(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetryFirst(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetryFirst(): any {
    return msRest.responseToBody(this.getMultiplePagesRetryFirstWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesRetrySecond(): Promise<Models.ProductResult>;
  getMultiplePagesRetrySecond(options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesRetrySecond(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetrySecond(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetrySecond(): any {
    return msRest.responseToBody(this.getMultiplePagesRetrySecondWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that receives a 400 on the first call
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSinglePagesFailure(): Promise<Models.ProductResult>;
  getSinglePagesFailure(options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getSinglePagesFailure(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesFailure(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesFailure(): any {
    return msRest.responseToBody(this.getSinglePagesFailureWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that receives a 400 on the second call
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesFailure(): Promise<Models.ProductResult>;
  getMultiplePagesFailure(options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesFailure(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailure(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailure(): any {
    return msRest.responseToBody(this.getMultiplePagesFailureWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that receives an invalid nextLink
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesFailureUri(): Promise<Models.ProductResult>;
  getMultiplePagesFailureUri(options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesFailureUri(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureUri(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureUri(): any {
    return msRest.responseToBody(this.getMultiplePagesFailureUriWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   *
   * @param {string} apiVersion Sets the api version to use.
   *
   * @param {string} tenant Sets the tenant to use.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OdataProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OdataProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string): Promise<Models.OdataProductResult>;
  getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, options: msRest.RequestOptionsBase): Promise<Models.OdataProductResult>;
  getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getMultiplePagesFragmentNextLink(): any {
    return msRest.responseToBody(this.getMultiplePagesFragmentNextLinkWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment with parameters grouped
   *
   * @param {CustomParameterGroup} customParameterGroup Additional parameters for the operation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OdataProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OdataProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: Models.CustomParameterGroup): Promise<Models.OdataProductResult>;
  getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: Models.CustomParameterGroup, options: msRest.RequestOptionsBase): Promise<Models.OdataProductResult>;
  getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: Models.CustomParameterGroup, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: Models.CustomParameterGroup, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getMultiplePagesFragmentWithGroupingNextLink(): any {
    return msRest.responseToBody(this.getMultiplePagesFragmentWithGroupingNextLinkWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingGetMultiplePagesLROOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesLRO(): Promise<Models.ProductResult>;
  getMultiplePagesLRO(options: Models.PagingGetMultiplePagesLROOptionalParams): Promise<Models.ProductResult>;
  getMultiplePagesLRO(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesLRO(options: Models.PagingGetMultiplePagesLROOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesLRO(): any {
    return msRest.responseToBody(this.getMultiplePagesLROWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   *
   * @param {string} apiVersion Sets the api version to use.
   *
   * @param {string} tenant Sets the tenant to use.
   *
   * @param {string} nextLink Next link for list operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OdataProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OdataProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  nextFragment(apiVersion: string, tenant: string, nextLink: string): Promise<Models.OdataProductResult>;
  nextFragment(apiVersion: string, tenant: string, nextLink: string, options: msRest.RequestOptionsBase): Promise<Models.OdataProductResult>;
  nextFragment(apiVersion: string, tenant: string, nextLink: string, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  nextFragment(apiVersion: string, tenant: string, nextLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  nextFragment(): any {
    return msRest.responseToBody(this.nextFragmentWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that doesn't return a full URL, just a fragment
   *
   * @param {string} nextLink Next link for list operation.
   *
   * @param {CustomParameterGroup} customParameterGroup Additional parameters for the operation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OdataProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OdataProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  nextFragmentWithGrouping(nextLink: string, customParameterGroup: Models.CustomParameterGroup): Promise<Models.OdataProductResult>;
  nextFragmentWithGrouping(nextLink: string, customParameterGroup: Models.CustomParameterGroup, options: msRest.RequestOptionsBase): Promise<Models.OdataProductResult>;
  nextFragmentWithGrouping(nextLink: string, customParameterGroup: Models.CustomParameterGroup, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  nextFragmentWithGrouping(nextLink: string, customParameterGroup: Models.CustomParameterGroup, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  nextFragmentWithGrouping(): any {
    return msRest.responseToBody(this.nextFragmentWithGroupingWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {PagingBeginGetMultiplePagesLROOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginGetMultiplePagesLRO(): Promise<Models.ProductResult>;
  beginGetMultiplePagesLRO(options: Models.PagingBeginGetMultiplePagesLROOptionalParams): Promise<Models.ProductResult>;
  beginGetMultiplePagesLRO(callback: msRest.ServiceCallback<Models.ProductResult>): void;
  beginGetMultiplePagesLRO(options: Models.PagingBeginGetMultiplePagesLROOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  beginGetMultiplePagesLRO(): any {
    return msRest.responseToBody(this.beginGetMultiplePagesLROWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that finishes on the first call without a nextlink
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSinglePagesNext(nextPageLink: string): Promise<Models.ProductResult>;
  getSinglePagesNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getSinglePagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesNext(): any {
    return msRest.responseToBody(this.getSinglePagesNextWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetMultiplePagesNextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesNext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesNext(nextPageLink: string, options: Models.PagingGetMultiplePagesNextOptionalParams): Promise<Models.ProductResult>;
  getMultiplePagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesNext(nextPageLink: string, options: Models.PagingGetMultiplePagesNextOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesNext(): any {
    return msRest.responseToBody(this.getMultiplePagesNextWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetOdataMultiplePagesNextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OdataProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OdataProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOdataMultiplePagesNext(nextPageLink: string): Promise<Models.OdataProductResult>;
  getOdataMultiplePagesNext(nextPageLink: string, options: Models.PagingGetOdataMultiplePagesNextOptionalParams): Promise<Models.OdataProductResult>;
  getOdataMultiplePagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getOdataMultiplePagesNext(nextPageLink: string, options: Models.PagingGetOdataMultiplePagesNextOptionalParams, callback: msRest.ServiceCallback<Models.OdataProductResult>): void;
  getOdataMultiplePagesNext(): any {
    return msRest.responseToBody(this.getOdataMultiplePagesNextWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetMultiplePagesWithOffsetNextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesWithOffsetNext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesWithOffsetNext(nextPageLink: string, options: Models.PagingGetMultiplePagesWithOffsetNextOptionalParams): Promise<Models.ProductResult>;
  getMultiplePagesWithOffsetNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesWithOffsetNext(nextPageLink: string, options: Models.PagingGetMultiplePagesWithOffsetNextOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesWithOffsetNext(): any {
    return msRest.responseToBody(this.getMultiplePagesWithOffsetNextWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a
   * response including a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesRetryFirstNext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesRetryFirstNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesRetryFirstNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetryFirstNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetryFirstNext(): any {
    return msRest.responseToBody(this.getMultiplePagesRetryFirstNextWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesRetrySecondNext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesRetrySecondNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesRetrySecondNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetrySecondNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesRetrySecondNext(): any {
    return msRest.responseToBody(this.getMultiplePagesRetrySecondNextWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that receives a 400 on the first call
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSinglePagesFailureNext(nextPageLink: string): Promise<Models.ProductResult>;
  getSinglePagesFailureNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getSinglePagesFailureNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesFailureNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getSinglePagesFailureNext(): any {
    return msRest.responseToBody(this.getSinglePagesFailureNextWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that receives a 400 on the second call
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesFailureNext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesFailureNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesFailureNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureNext(): any {
    return msRest.responseToBody(this.getMultiplePagesFailureNextWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A paging operation that receives an invalid nextLink
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesFailureUriNext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesFailureUriNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ProductResult>;
  getMultiplePagesFailureUriNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureUriNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesFailureUriNext(): any {
    return msRest.responseToBody(this.getMultiplePagesFailureUriNextWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingGetMultiplePagesLRONextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getMultiplePagesLRONext(nextPageLink: string): Promise<Models.ProductResult>;
  getMultiplePagesLRONext(nextPageLink: string, options: Models.PagingGetMultiplePagesLRONextOptionalParams): Promise<Models.ProductResult>;
  getMultiplePagesLRONext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesLRONext(nextPageLink: string, options: Models.PagingGetMultiplePagesLRONextOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  getMultiplePagesLRONext(): any {
    return msRest.responseToBody(this.getMultiplePagesLRONextWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {PagingBeginGetMultiplePagesLRONextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProductResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginGetMultiplePagesLRONext(nextPageLink: string): Promise<Models.ProductResult>;
  beginGetMultiplePagesLRONext(nextPageLink: string, options: Models.PagingBeginGetMultiplePagesLRONextOptionalParams): Promise<Models.ProductResult>;
  beginGetMultiplePagesLRONext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  beginGetMultiplePagesLRONext(nextPageLink: string, options: Models.PagingBeginGetMultiplePagesLRONextOptionalParams, callback: msRest.ServiceCallback<Models.ProductResult>): void;
  beginGetMultiplePagesLRONext(): any {
    return msRest.responseToBody(this.beginGetMultiplePagesLRONextWithHttpOperationResponse.bind(this), arguments);
  }

}

// Operation Specifications
const getSinglePagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/single",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple",
  headerParameters: [
    {
      parameterPath: "clientRequestId",
      mapper: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetMultiplePagesOptions",
        "maxresults"
      ],
      mapper: {
        serializedName: "maxresults",
        type: {
          name: "Number"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetMultiplePagesOptions",
        "timeout"
      ],
      mapper: {
        serializedName: "timeout",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getOdataMultiplePagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/odata",
  headerParameters: [
    {
      parameterPath: "clientRequestId",
      mapper: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetOdataMultiplePagesOptions",
        "maxresults"
      ],
      mapper: {
        serializedName: "maxresults",
        type: {
          name: "Number"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetOdataMultiplePagesOptions",
        "timeout"
      ],
      mapper: {
        serializedName: "timeout",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesWithOffsetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/withpath/{offset}",
  urlParameters: [
    {
      parameterPath: [
        "pagingGetMultiplePagesWithOffsetOptions",
        "offset"
      ],
      mapper: {
        required: true,
        serializedName: "offset",
        type: {
          name: "Number"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "clientRequestId",
      mapper: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetMultiplePagesWithOffsetOptions",
        "maxresults"
      ],
      mapper: {
        serializedName: "maxresults",
        type: {
          name: "Number"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetMultiplePagesWithOffsetOptions",
        "timeout"
      ],
      mapper: {
        serializedName: "timeout",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesRetryFirstOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/retryfirst",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesRetrySecondOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/retrysecond",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getSinglePagesFailureOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/single/failure",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesFailureOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/failure",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesFailureUriOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/failureuri",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesFragmentNextLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/fragment/{tenant}",
  urlParameters: [
    {
      parameterPath: "tenant",
      mapper: {
        required: true,
        serializedName: "tenant",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "apiVersion",
      mapper: {
        required: true,
        serializedName: "api_version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesFragmentWithGroupingNextLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/fragmentwithgrouping/{tenant}",
  urlParameters: [
    {
      parameterPath: [
        "customParameterGroup",
        "tenant"
      ],
      mapper: {
        required: true,
        serializedName: "tenant",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: [
        "customParameterGroup",
        "apiVersion"
      ],
      mapper: {
        required: true,
        serializedName: "api_version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const nextFragmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/fragment/{tenant}/{nextLink}",
  urlParameters: [
    {
      parameterPath: "tenant",
      mapper: {
        required: true,
        serializedName: "tenant",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "nextLink",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "apiVersion",
      mapper: {
        required: true,
        serializedName: "api_version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const nextFragmentWithGroupingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paging/multiple/fragmentwithgrouping/{tenant}/{nextLink}",
  urlParameters: [
    {
      parameterPath: "nextLink",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "customParameterGroup",
        "tenant"
      ],
      mapper: {
        required: true,
        serializedName: "tenant",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: [
        "customParameterGroup",
        "apiVersion"
      ],
      mapper: {
        required: true,
        serializedName: "api_version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginGetMultiplePagesLROOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "paging/multiple/lro",
  headerParameters: [
    {
      parameterPath: "clientRequestId",
      mapper: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetMultiplePagesLROOptions",
        "maxresults"
      ],
      mapper: {
        serializedName: "maxresults",
        type: {
          name: "Number"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetMultiplePagesLROOptions",
        "timeout"
      ],
      mapper: {
        serializedName: "timeout",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      }
    }
  ],
  responses: {
    202: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getSinglePagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    {
      parameterPath: "nextPageLink",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    {
      parameterPath: "nextPageLink",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "clientRequestId",
      mapper: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetMultiplePagesOptions",
        "maxresults"
      ],
      mapper: {
        serializedName: "maxresults",
        type: {
          name: "Number"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetMultiplePagesOptions",
        "timeout"
      ],
      mapper: {
        serializedName: "timeout",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getOdataMultiplePagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    {
      parameterPath: "nextPageLink",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "clientRequestId",
      mapper: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetOdataMultiplePagesOptions",
        "maxresults"
      ],
      mapper: {
        serializedName: "maxresults",
        type: {
          name: "Number"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetOdataMultiplePagesOptions",
        "timeout"
      ],
      mapper: {
        serializedName: "timeout",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OdataProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesWithOffsetNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    {
      parameterPath: "nextPageLink",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "clientRequestId",
      mapper: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetMultiplePagesWithOffsetNextOptions",
        "maxresults"
      ],
      mapper: {
        serializedName: "maxresults",
        type: {
          name: "Number"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetMultiplePagesWithOffsetNextOptions",
        "timeout"
      ],
      mapper: {
        serializedName: "timeout",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesRetryFirstNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    {
      parameterPath: "nextPageLink",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesRetrySecondNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    {
      parameterPath: "nextPageLink",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getSinglePagesFailureNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    {
      parameterPath: "nextPageLink",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesFailureNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    {
      parameterPath: "nextPageLink",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getMultiplePagesFailureUriNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    {
      parameterPath: "nextPageLink",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginGetMultiplePagesLRONextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "http://localhost:3000",
  path: "{nextLink}",
  urlParameters: [
    {
      parameterPath: "nextPageLink",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "clientRequestId",
      mapper: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetMultiplePagesLROOptions",
        "maxresults"
      ],
      mapper: {
        serializedName: "maxresults",
        type: {
          name: "Number"
        }
      }
    },
    {
      parameterPath: [
        "pagingGetMultiplePagesLROOptions",
        "timeout"
      ],
      mapper: {
        serializedName: "timeout",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      }
    }
  ],
  responses: {
    202: {
      bodyMapper: Mappers.ProductResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};
