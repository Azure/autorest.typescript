/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as coreArm from "@azure/core-arm";
import * as Models from "../models";
import * as Mappers from "../models/lROsMappers";
import * as Parameters from "../models/parameters";
import { AutoRestLongRunningOperationTestServiceContext } from "../autoRestLongRunningOperationTestServiceContext";

/** Class representing a LROs. */
export class LROs {
  private readonly client: AutoRestLongRunningOperationTestServiceContext;

  /**
   * Create a LROs.
   * @param {AutoRestLongRunningOperationTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestLongRunningOperationTestServiceContext) {
    this.client = client;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Succeeded’.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPut200SucceededResponse>
   */
  put200Succeeded(options?: Models.LROsPut200SucceededOptionalParams): Promise<Models.LROsPut200SucceededResponse> {
    return this.beginPut200Succeeded(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPut200SucceededResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that does
   * not contain ProvisioningState=’Succeeded’.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPut200SucceededNoStateResponse>
   */
  put200SucceededNoState(options?: Models.LROsPut200SucceededNoStateOptionalParams): Promise<Models.LROsPut200SucceededNoStateResponse> {
    return this.beginPut200SucceededNoState(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPut200SucceededNoStateResponse>;
  }

  /**
   * Long running put request, service returns a 202 to the initial request, with a location header
   * that points to a polling URL that returns a 200 and an entity that doesn't contains
   * ProvisioningState
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPut202Retry200Response>
   */
  put202Retry200(options?: Models.LROsPut202Retry200OptionalParams): Promise<Models.LROsPut202Retry200Response> {
    return this.beginPut202Retry200(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPut202Retry200Response>;
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPut201CreatingSucceeded200Response>
   */
  put201CreatingSucceeded200(options?: Models.LROsPut201CreatingSucceeded200OptionalParams): Promise<Models.LROsPut201CreatingSucceeded200Response> {
    return this.beginPut201CreatingSucceeded200(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPut201CreatingSucceeded200Response>;
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPut200UpdatingSucceeded204Response>
   */
  put200UpdatingSucceeded204(options?: Models.LROsPut200UpdatingSucceeded204OptionalParams): Promise<Models.LROsPut200UpdatingSucceeded204Response> {
    return this.beginPut200UpdatingSucceeded204(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPut200UpdatingSucceeded204Response>;
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Failed’
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPut201CreatingFailed200Response>
   */
  put201CreatingFailed200(options?: Models.LROsPut201CreatingFailed200OptionalParams): Promise<Models.LROsPut201CreatingFailed200Response> {
    return this.beginPut201CreatingFailed200(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPut201CreatingFailed200Response>;
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Canceled’
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPut200Acceptedcanceled200Response>
   */
  put200Acceptedcanceled200(options?: Models.LROsPut200Acceptedcanceled200OptionalParams): Promise<Models.LROsPut200Acceptedcanceled200Response> {
    return this.beginPut200Acceptedcanceled200(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPut200Acceptedcanceled200Response>;
  }

  /**
   * Long running put request, service returns a 202 to the initial request with location header.
   * Subsequent calls to operation status do not contain location header.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPutNoHeaderInRetryResponse>
   */
  putNoHeaderInRetry(options?: Models.LROsPutNoHeaderInRetryOptionalParams): Promise<Models.LROsPutNoHeaderInRetryResponse> {
    return this.beginPutNoHeaderInRetry(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPutNoHeaderInRetryResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPutAsyncRetrySucceededResponse>
   */
  putAsyncRetrySucceeded(options?: Models.LROsPutAsyncRetrySucceededOptionalParams): Promise<Models.LROsPutAsyncRetrySucceededResponse> {
    return this.beginPutAsyncRetrySucceeded(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPutAsyncRetrySucceededResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPutAsyncNoRetrySucceededResponse>
   */
  putAsyncNoRetrySucceeded(options?: Models.LROsPutAsyncNoRetrySucceededOptionalParams): Promise<Models.LROsPutAsyncNoRetrySucceededResponse> {
    return this.beginPutAsyncNoRetrySucceeded(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPutAsyncNoRetrySucceededResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPutAsyncRetryFailedResponse>
   */
  putAsyncRetryFailed(options?: Models.LROsPutAsyncRetryFailedOptionalParams): Promise<Models.LROsPutAsyncRetryFailedResponse> {
    return this.beginPutAsyncRetryFailed(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPutAsyncRetryFailedResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPutAsyncNoRetrycanceledResponse>
   */
  putAsyncNoRetrycanceled(options?: Models.LROsPutAsyncNoRetrycanceledOptionalParams): Promise<Models.LROsPutAsyncNoRetrycanceledResponse> {
    return this.beginPutAsyncNoRetrycanceled(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPutAsyncNoRetrycanceledResponse>;
  }

  /**
   * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation
   * header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPutAsyncNoHeaderInRetryResponse>
   */
  putAsyncNoHeaderInRetry(options?: Models.LROsPutAsyncNoHeaderInRetryOptionalParams): Promise<Models.LROsPutAsyncNoHeaderInRetryResponse> {
    return this.beginPutAsyncNoHeaderInRetry(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPutAsyncNoHeaderInRetryResponse>;
  }

  /**
   * Long running put request with non resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPutNonResourceResponse>
   */
  putNonResource(options?: Models.LROsPutNonResourceOptionalParams): Promise<Models.LROsPutNonResourceResponse> {
    return this.beginPutNonResource(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPutNonResourceResponse>;
  }

  /**
   * Long running put request with non resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPutAsyncNonResourceResponse>
   */
  putAsyncNonResource(options?: Models.LROsPutAsyncNonResourceOptionalParams): Promise<Models.LROsPutAsyncNonResourceResponse> {
    return this.beginPutAsyncNonResource(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPutAsyncNonResourceResponse>;
  }

  /**
   * Long running put request with sub resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPutSubResourceResponse>
   */
  putSubResource(options?: Models.LROsPutSubResourceOptionalParams): Promise<Models.LROsPutSubResourceResponse> {
    return this.beginPutSubResource(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPutSubResourceResponse>;
  }

  /**
   * Long running put request with sub resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPutAsyncSubResourceResponse>
   */
  putAsyncSubResource(options?: Models.LROsPutAsyncSubResourceOptionalParams): Promise<Models.LROsPutAsyncSubResourceResponse> {
    return this.beginPutAsyncSubResource(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPutAsyncSubResourceResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsDeleteProvisioning202Accepted200SucceededResponse>
   */
  deleteProvisioning202Accepted200Succeeded(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsDeleteProvisioning202Accepted200SucceededResponse> {
    return this.beginDeleteProvisioning202Accepted200Succeeded(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsDeleteProvisioning202Accepted200SucceededResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Failed’
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsDeleteProvisioning202DeletingFailed200Response>
   */
  deleteProvisioning202DeletingFailed200(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsDeleteProvisioning202DeletingFailed200Response> {
    return this.beginDeleteProvisioning202DeletingFailed200(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsDeleteProvisioning202DeletingFailed200Response>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Canceled’
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsDeleteProvisioning202Deletingcanceled200Response>
   */
  deleteProvisioning202Deletingcanceled200(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsDeleteProvisioning202Deletingcanceled200Response> {
    return this.beginDeleteProvisioning202Deletingcanceled200(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsDeleteProvisioning202Deletingcanceled200Response>;
  }

  /**
   * Long running delete succeeds and returns right away
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  delete204Succeeded(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse> {
    return this.beginDelete204Succeeded(options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this
   * value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsDelete202Retry200Response>
   */
  delete202Retry200(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsDelete202Retry200Response> {
    return this.beginDelete202Retry200(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsDelete202Retry200Response>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this
   * value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsDelete202NoRetry204Response>
   */
  delete202NoRetry204(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsDelete202NoRetry204Response> {
    return this.beginDelete202NoRetry204(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsDelete202NoRetry204Response>;
  }

  /**
   * Long running delete request, service returns a location header in the initial request.
   * Subsequent calls to operation status do not contain location header.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsDeleteNoHeaderInRetryResponse>
   */
  deleteNoHeaderInRetry(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsDeleteNoHeaderInRetryResponse> {
    return this.beginDeleteNoHeaderInRetry(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsDeleteNoHeaderInRetryResponse>;
  }

  /**
   * Long running delete request, service returns an Azure-AsyncOperation header in the initial
   * request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsDeleteAsyncNoHeaderInRetryResponse>
   */
  deleteAsyncNoHeaderInRetry(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsDeleteAsyncNoHeaderInRetryResponse> {
    return this.beginDeleteAsyncNoHeaderInRetry(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsDeleteAsyncNoHeaderInRetryResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsDeleteAsyncRetrySucceededResponse>
   */
  deleteAsyncRetrySucceeded(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsDeleteAsyncRetrySucceededResponse> {
    return this.beginDeleteAsyncRetrySucceeded(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsDeleteAsyncRetrySucceededResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsDeleteAsyncNoRetrySucceededResponse>
   */
  deleteAsyncNoRetrySucceeded(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsDeleteAsyncNoRetrySucceededResponse> {
    return this.beginDeleteAsyncNoRetrySucceeded(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsDeleteAsyncNoRetrySucceededResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsDeleteAsyncRetryFailedResponse>
   */
  deleteAsyncRetryFailed(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsDeleteAsyncRetryFailedResponse> {
    return this.beginDeleteAsyncRetryFailed(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsDeleteAsyncRetryFailedResponse>;
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsDeleteAsyncRetrycanceledResponse>
   */
  deleteAsyncRetrycanceled(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsDeleteAsyncRetrycanceledResponse> {
    return this.beginDeleteAsyncRetrycanceled(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsDeleteAsyncRetrycanceledResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header.
   * Poll returns a 200 with a response body after success.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPost200WithPayloadResponse>
   */
  post200WithPayload(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsPost200WithPayloadResponse> {
    return this.beginPost200WithPayload(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPost200WithPayloadResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' and
   * 'Retry-After' headers, Polls return a 200 with a response body after success
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPost202Retry200Response>
   */
  post202Retry200(options?: Models.LROsPost202Retry200OptionalParams): Promise<Models.LROsPost202Retry200Response> {
    return this.beginPost202Retry200(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPost202Retry200Response>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header,
   * 204 with noresponse body after success
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPost202NoRetry204Response>
   */
  post202NoRetry204(options?: Models.LROsPost202NoRetry204OptionalParams): Promise<Models.LROsPost202NoRetry204Response> {
    return this.beginPost202NoRetry204(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPost202NoRetry204Response>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should poll Location to get the final
   * object
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPostDoubleHeadersFinalLocationGetResponse>
   */
  postDoubleHeadersFinalLocationGet(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsPostDoubleHeadersFinalLocationGetResponse> {
    return this.beginPostDoubleHeadersFinalLocationGet(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPostDoubleHeadersFinalLocationGetResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPostDoubleHeadersFinalAzureHeaderGetResponse>
   */
  postDoubleHeadersFinalAzureHeaderGet(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsPostDoubleHeadersFinalAzureHeaderGetResponse> {
    return this.beginPostDoubleHeadersFinalAzureHeaderGet(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPostDoubleHeadersFinalAzureHeaderGetResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object if you support initial Autorest behavior.
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse>
   */
  postDoubleHeadersFinalAzureHeaderGetDefault(options?: coreHttp.RequestOptionsBase): Promise<Models.LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse> {
    return this.beginPostDoubleHeadersFinalAzureHeaderGetDefault(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPostDoubleHeadersFinalAzureHeaderGetDefaultResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPostAsyncRetrySucceededResponse>
   */
  postAsyncRetrySucceeded(options?: Models.LROsPostAsyncRetrySucceededOptionalParams): Promise<Models.LROsPostAsyncRetrySucceededResponse> {
    return this.beginPostAsyncRetrySucceeded(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPostAsyncRetrySucceededResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPostAsyncNoRetrySucceededResponse>
   */
  postAsyncNoRetrySucceeded(options?: Models.LROsPostAsyncNoRetrySucceededOptionalParams): Promise<Models.LROsPostAsyncNoRetrySucceededResponse> {
    return this.beginPostAsyncNoRetrySucceeded(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPostAsyncNoRetrySucceededResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPostAsyncRetryFailedResponse>
   */
  postAsyncRetryFailed(options?: Models.LROsPostAsyncRetryFailedOptionalParams): Promise<Models.LROsPostAsyncRetryFailedResponse> {
    return this.beginPostAsyncRetryFailed(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPostAsyncRetryFailedResponse>;
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<Models.LROsPostAsyncRetrycanceledResponse>
   */
  postAsyncRetrycanceled(options?: Models.LROsPostAsyncRetrycanceledOptionalParams): Promise<Models.LROsPostAsyncRetrycanceledResponse> {
    return this.beginPostAsyncRetrycanceled(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LROsPostAsyncRetrycanceledResponse>;
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Succeeded’.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPut200Succeeded(options?: Models.LROsBeginPut200SucceededOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPut200SucceededOperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that does
   * not contain ProvisioningState=’Succeeded’.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPut200SucceededNoState(options?: Models.LROsBeginPut200SucceededNoStateOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPut200SucceededNoStateOperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 202 to the initial request, with a location header
   * that points to a polling URL that returns a 200 and an entity that doesn't contains
   * ProvisioningState
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPut202Retry200(options?: Models.LROsBeginPut202Retry200OptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPut202Retry200OperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPut201CreatingSucceeded200(options?: Models.LROsBeginPut201CreatingSucceeded200OptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPut201CreatingSucceeded200OperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPut200UpdatingSucceeded204(options?: Models.LROsBeginPut200UpdatingSucceeded204OptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPut200UpdatingSucceeded204OperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Failed’
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPut201CreatingFailed200(options?: Models.LROsBeginPut201CreatingFailed200OptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPut201CreatingFailed200OperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Canceled’
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPut200Acceptedcanceled200(options?: Models.LROsBeginPut200Acceptedcanceled200OptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPut200Acceptedcanceled200OperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 202 to the initial request with location header.
   * Subsequent calls to operation status do not contain location header.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPutNoHeaderInRetry(options?: Models.LROsBeginPutNoHeaderInRetryOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutNoHeaderInRetryOperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPutAsyncRetrySucceeded(options?: Models.LROsBeginPutAsyncRetrySucceededOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutAsyncRetrySucceededOperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPutAsyncNoRetrySucceeded(options?: Models.LROsBeginPutAsyncNoRetrySucceededOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutAsyncNoRetrySucceededOperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPutAsyncRetryFailed(options?: Models.LROsBeginPutAsyncRetryFailedOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutAsyncRetryFailedOperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPutAsyncNoRetrycanceled(options?: Models.LROsBeginPutAsyncNoRetrycanceledOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutAsyncNoRetrycanceledOperationSpec,
      options);
  }

  /**
   * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation
   * header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPutAsyncNoHeaderInRetry(options?: Models.LROsBeginPutAsyncNoHeaderInRetryOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutAsyncNoHeaderInRetryOperationSpec,
      options);
  }

  /**
   * Long running put request with non resource.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPutNonResource(options?: Models.LROsBeginPutNonResourceOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutNonResourceOperationSpec,
      options);
  }

  /**
   * Long running put request with non resource.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPutAsyncNonResource(options?: Models.LROsBeginPutAsyncNonResourceOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutAsyncNonResourceOperationSpec,
      options);
  }

  /**
   * Long running put request with sub resource.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPutSubResource(options?: Models.LROsBeginPutSubResourceOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutSubResourceOperationSpec,
      options);
  }

  /**
   * Long running put request with sub resource.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPutAsyncSubResource(options?: Models.LROsBeginPutAsyncSubResourceOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPutAsyncSubResourceOperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDeleteProvisioning202Accepted200Succeeded(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteProvisioning202Accepted200SucceededOperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Failed’
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDeleteProvisioning202DeletingFailed200(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteProvisioning202DeletingFailed200OperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Canceled’
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDeleteProvisioning202Deletingcanceled200(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteProvisioning202Deletingcanceled200OperationSpec,
      options);
  }

  /**
   * Long running delete succeeds and returns right away
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDelete204Succeeded(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDelete204SucceededOperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this
   * value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDelete202Retry200(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDelete202Retry200OperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this
   * value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDelete202NoRetry204(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDelete202NoRetry204OperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a location header in the initial request.
   * Subsequent calls to operation status do not contain location header.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDeleteNoHeaderInRetry(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteNoHeaderInRetryOperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns an Azure-AsyncOperation header in the initial
   * request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDeleteAsyncNoHeaderInRetry(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteAsyncNoHeaderInRetryOperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDeleteAsyncRetrySucceeded(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteAsyncRetrySucceededOperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDeleteAsyncNoRetrySucceeded(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteAsyncNoRetrySucceededOperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDeleteAsyncRetryFailed(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteAsyncRetryFailedOperationSpec,
      options);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDeleteAsyncRetrycanceled(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginDeleteAsyncRetrycanceledOperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header.
   * Poll returns a 200 with a response body after success.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPost200WithPayload(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPost200WithPayloadOperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' and
   * 'Retry-After' headers, Polls return a 200 with a response body after success
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPost202Retry200(options?: Models.LROsBeginPost202Retry200OptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPost202Retry200OperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header,
   * 204 with noresponse body after success
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPost202NoRetry204(options?: Models.LROsBeginPost202NoRetry204OptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPost202NoRetry204OperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should poll Location to get the final
   * object
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPostDoubleHeadersFinalLocationGet(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPostDoubleHeadersFinalLocationGetOperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPostDoubleHeadersFinalAzureHeaderGet(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPostDoubleHeadersFinalAzureHeaderGetOperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object if you support initial Autorest behavior.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPostDoubleHeadersFinalAzureHeaderGetDefault(options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPostDoubleHeadersFinalAzureHeaderGetDefaultOperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPostAsyncRetrySucceeded(options?: Models.LROsBeginPostAsyncRetrySucceededOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPostAsyncRetrySucceededOperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPostAsyncNoRetrySucceeded(options?: Models.LROsBeginPostAsyncNoRetrySucceededOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPostAsyncNoRetrySucceededOperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPostAsyncRetryFailed(options?: Models.LROsBeginPostAsyncRetryFailedOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPostAsyncRetryFailedOperationSpec,
      options);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPostAsyncRetrycanceled(options?: Models.LROsBeginPostAsyncRetrycanceledOptionalParams): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginPostAsyncRetrycanceledOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const beginPut200SucceededOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/200/succeeded",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPut200SucceededNoStateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/200/succeeded/nostate",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPut202Retry200OperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/202/retry/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPut201CreatingSucceeded200OperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/201/creating/succeeded/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPut200UpdatingSucceeded204OperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/200/updating/succeeded/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPut201CreatingFailed200OperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/201/created/failed/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPut200Acceptedcanceled200OperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/200/accepted/canceled/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPutNoHeaderInRetryOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/noheader/202/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsPutNoHeaderInRetryHeaders
    }
  },
  serializer
};

const beginPutAsyncRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putasync/retry/succeeded",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsPutAsyncRetrySucceededHeaders
    }
  },
  serializer
};

const beginPutAsyncNoRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putasync/noretry/succeeded",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsPutAsyncNoRetrySucceededHeaders
    }
  },
  serializer
};

const beginPutAsyncRetryFailedOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putasync/retry/failed",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetryFailedHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsPutAsyncRetryFailedHeaders
    }
  },
  serializer
};

const beginPutAsyncNoRetrycanceledOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putasync/noretry/canceled",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrycanceledHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsPutAsyncNoRetrycanceledHeaders
    }
  },
  serializer
};

const beginPutAsyncNoHeaderInRetryOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putasync/noheader/201/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsPutAsyncNoHeaderInRetryHeaders
    }
  },
  serializer
};

const beginPutNonResourceOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putnonresource/202/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "sku"
    ],
    mapper: Mappers.Sku
  },
  responses: {
    202: {
      bodyMapper: Mappers.Sku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPutAsyncNonResourceOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putnonresourceasync/202/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "sku"
    ],
    mapper: Mappers.Sku
  },
  responses: {
    202: {
      bodyMapper: Mappers.Sku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPutSubResourceOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putsubresource/202/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      provisioningState: [
        "options",
        "provisioningState"
      ]
    },
    mapper: Mappers.SubProduct
  },
  responses: {
    202: {
      bodyMapper: Mappers.SubProduct
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPutAsyncSubResourceOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putsubresourceasync/202/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      provisioningState: [
        "options",
        "provisioningState"
      ]
    },
    mapper: Mappers.SubProduct
  },
  responses: {
    202: {
      bodyMapper: Mappers.SubProduct
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteProvisioning202Accepted200SucceededOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/provisioning/202/accepted/200/succeeded",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202Accepted200SucceededHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202Accepted200SucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsDeleteProvisioning202Accepted200SucceededHeaders
    }
  },
  serializer
};

const beginDeleteProvisioning202DeletingFailed200OperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/provisioning/202/deleting/200/failed",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202DeletingFailed200Headers
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202DeletingFailed200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsDeleteProvisioning202DeletingFailed200Headers
    }
  },
  serializer
};

const beginDeleteProvisioning202Deletingcanceled200OperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/provisioning/202/deleting/200/canceled",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202Deletingcanceled200Headers
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202Deletingcanceled200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsDeleteProvisioning202Deletingcanceled200Headers
    }
  },
  serializer
};

const beginDelete204SucceededOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/204/succeeded",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDelete202Retry200OperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/202/retry/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDelete202Retry200Headers
    },
    202: {
      headersMapper: Mappers.LROsDelete202Retry200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsDelete202Retry200Headers
    }
  },
  serializer
};

const beginDelete202NoRetry204OperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/202/noretry/204",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDelete202NoRetry204Headers
    },
    202: {
      headersMapper: Mappers.LROsDelete202NoRetry204Headers
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsDelete202NoRetry204Headers
    }
  },
  serializer
};

const beginDeleteNoHeaderInRetryOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/noheader",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteNoHeaderInRetryHeaders
    },
    204: {
      headersMapper: Mappers.LROsDeleteNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsDeleteNoHeaderInRetryHeaders
    }
  },
  serializer
};

const beginDeleteAsyncNoHeaderInRetryOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/deleteasync/noheader/202/204",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncNoHeaderInRetryHeaders
    },
    204: {
      headersMapper: Mappers.LROsDeleteAsyncNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsDeleteAsyncNoHeaderInRetryHeaders
    }
  },
  serializer
};

const beginDeleteAsyncRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/deleteasync/retry/succeeded",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsDeleteAsyncRetrySucceededHeaders
    }
  },
  serializer
};

const beginDeleteAsyncNoRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/deleteasync/noretry/succeeded",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncNoRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsDeleteAsyncNoRetrySucceededHeaders
    }
  },
  serializer
};

const beginDeleteAsyncRetryFailedOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/deleteasync/retry/failed",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncRetryFailedHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsDeleteAsyncRetryFailedHeaders
    }
  },
  serializer
};

const beginDeleteAsyncRetrycanceledOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/deleteasync/retry/canceled",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncRetrycanceledHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsDeleteAsyncRetrycanceledHeaders
    }
  },
  serializer
};

const beginPost200WithPayloadOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "lro/post/payload/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Sku
    },
    202: {
      bodyMapper: Mappers.Sku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPost202Retry200OperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "lro/post/202/retry/200",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      headersMapper: Mappers.LROsPost202Retry200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsPost202Retry200Headers
    }
  },
  serializer
};

const beginPost202NoRetry204OperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "lro/post/202/noretry/204",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPost202NoRetry204Headers
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsPost202NoRetry204Headers
    }
  },
  serializer
};

const beginPostDoubleHeadersFinalLocationGetOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "lro/LROPostDoubleHeadersFinalLocationGet",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPostDoubleHeadersFinalAzureHeaderGetOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "lro/LROPostDoubleHeadersFinalAzureHeaderGet",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPostDoubleHeadersFinalAzureHeaderGetDefaultOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "lro/LROPostDoubleHeadersFinalAzureHeaderGetDefault",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPostAsyncRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "lro/postasync/retry/succeeded",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPostAsyncRetrySucceededHeaders
    },
    202: {
      headersMapper: Mappers.LROsPostAsyncRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsPostAsyncRetrySucceededHeaders
    }
  },
  serializer
};

const beginPostAsyncNoRetrySucceededOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "lro/postasync/noretry/succeeded",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPostAsyncNoRetrySucceededHeaders
    },
    202: {
      headersMapper: Mappers.LROsPostAsyncNoRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsPostAsyncNoRetrySucceededHeaders
    }
  },
  serializer
};

const beginPostAsyncRetryFailedOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "lro/postasync/retry/failed",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      headersMapper: Mappers.LROsPostAsyncRetryFailedHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsPostAsyncRetryFailedHeaders
    }
  },
  serializer
};

const beginPostAsyncRetrycanceledOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "lro/postasync/retry/canceled",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "product"
    ],
    mapper: Mappers.Product
  },
  responses: {
    202: {
      headersMapper: Mappers.LROsPostAsyncRetrycanceledHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.LROsPostAsyncRetrycanceledHeaders
    }
  },
  serializer
};
