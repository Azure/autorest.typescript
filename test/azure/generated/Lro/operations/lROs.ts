/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/lROsMappers";
import { AutoRestLongRunningOperationTestServiceContext } from "../autoRestLongRunningOperationTestServiceContext";

/** Class representing a LROs. */
export class LROs {
  private readonly client: AutoRestLongRunningOperationTestServiceContext;

  /**
   * Create a LROs.
   * @param {AutoRestLongRunningOperationTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestLongRunningOperationTestServiceContext) {
    this.client = client;
  }


  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Succeeded’.
   *
   * @param {LROsPut200SucceededOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async put200SucceededWithHttpOperationResponse(options?: Models.LROsPut200SucceededOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPut200SucceededWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that does
   * not contain ProvisioningState=’Succeeded’.
   *
   * @param {LROsPut200SucceededNoStateOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async put200SucceededNoStateWithHttpOperationResponse(options?: Models.LROsPut200SucceededNoStateOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPut200SucceededNoStateWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request, service returns a 202 to the initial request, with a location header
   * that points to a polling URL that returns a 200 and an entity that doesn't contains
   * ProvisioningState
   *
   * @param {LROsPut202Retry200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async put202Retry200WithHttpOperationResponse(options?: Models.LROsPut202Retry200OptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPut202Retry200WithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {LROsPut201CreatingSucceeded200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async put201CreatingSucceeded200WithHttpOperationResponse(options?: Models.LROsPut201CreatingSucceeded200OptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPut201CreatingSucceeded200WithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {LROsPut200UpdatingSucceeded204OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async put200UpdatingSucceeded204WithHttpOperationResponse(options?: Models.LROsPut200UpdatingSucceeded204OptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPut200UpdatingSucceeded204WithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Failed’
   *
   * @param {LROsPut201CreatingFailed200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async put201CreatingFailed200WithHttpOperationResponse(options?: Models.LROsPut201CreatingFailed200OptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPut201CreatingFailed200WithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Canceled’
   *
   * @param {LROsPut200Acceptedcanceled200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async put200Acceptedcanceled200WithHttpOperationResponse(options?: Models.LROsPut200Acceptedcanceled200OptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPut200Acceptedcanceled200WithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request, service returns a 202 to the initial request with location header.
   * Subsequent calls to operation status do not contain location header.
   *
   * @param {LROsPutNoHeaderInRetryOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async putNoHeaderInRetryWithHttpOperationResponse(options?: Models.LROsPutNoHeaderInRetryOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPutNoHeaderInRetryWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPutAsyncRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async putAsyncRetrySucceededWithHttpOperationResponse(options?: Models.LROsPutAsyncRetrySucceededOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPutAsyncRetrySucceededWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPutAsyncNoRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async putAsyncNoRetrySucceededWithHttpOperationResponse(options?: Models.LROsPutAsyncNoRetrySucceededOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPutAsyncNoRetrySucceededWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPutAsyncRetryFailedOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async putAsyncRetryFailedWithHttpOperationResponse(options?: Models.LROsPutAsyncRetryFailedOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPutAsyncRetryFailedWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPutAsyncNoRetrycanceledOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async putAsyncNoRetrycanceledWithHttpOperationResponse(options?: Models.LROsPutAsyncNoRetrycanceledOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPutAsyncNoRetrycanceledWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation
   * header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   *
   * @param {LROsPutAsyncNoHeaderInRetryOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async putAsyncNoHeaderInRetryWithHttpOperationResponse(options?: Models.LROsPutAsyncNoHeaderInRetryOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPutAsyncNoHeaderInRetryWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request with non resource.
   *
   * @param {LROsPutNonResourceOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async putNonResourceWithHttpOperationResponse(options?: Models.LROsPutNonResourceOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPutNonResourceWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Sku, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request with non resource.
   *
   * @param {LROsPutAsyncNonResourceOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async putAsyncNonResourceWithHttpOperationResponse(options?: Models.LROsPutAsyncNonResourceOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPutAsyncNonResourceWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Sku, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request with sub resource.
   *
   * @param {LROsPutSubResourceOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async putSubResourceWithHttpOperationResponse(options?: Models.LROsPutSubResourceOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPutSubResourceWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.SubProduct, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running put request with sub resource.
   *
   * @param {LROsPutAsyncSubResourceOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async putAsyncSubResourceWithHttpOperationResponse(options?: Models.LROsPutAsyncSubResourceOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPutAsyncSubResourceWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.SubProduct, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async deleteProvisioning202Accepted200SucceededWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginDeleteProvisioning202Accepted200SucceededWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Failed’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async deleteProvisioning202DeletingFailed200WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginDeleteProvisioning202DeletingFailed200WithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Canceled’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async deleteProvisioning202Deletingcanceled200WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginDeleteProvisioning202Deletingcanceled200WithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running delete succeeds and returns right away
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async delete204SucceededWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginDelete204SucceededWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);

      // Deserialize Response
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this
   * value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async delete202Retry200WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginDelete202Retry200WithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this
   * value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async delete202NoRetry204WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginDelete202NoRetry204WithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running delete request, service returns a location header in the initial request.
   * Subsequent calls to operation status do not contain location header.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async deleteNoHeaderInRetryWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginDeleteNoHeaderInRetryWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);

      // Deserialize Response
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running delete request, service returns an Azure-AsyncOperation header in the initial
   * request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async deleteAsyncNoHeaderInRetryWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginDeleteAsyncNoHeaderInRetryWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);

      // Deserialize Response
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async deleteAsyncRetrySucceededWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginDeleteAsyncRetrySucceededWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);

      // Deserialize Response
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async deleteAsyncNoRetrySucceededWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginDeleteAsyncNoRetrySucceededWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);

      // Deserialize Response
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async deleteAsyncRetryFailedWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginDeleteAsyncRetryFailedWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);

      // Deserialize Response
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async deleteAsyncRetrycanceledWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginDeleteAsyncRetrycanceledWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);

      // Deserialize Response
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header.
   * Poll returns a 200 with a response body after success.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async post200WithPayloadWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPost200WithPayloadWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Sku, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' and
   * 'Retry-After' headers, Polls return a 200 with a response body after success
   *
   * @param {LROsPost202Retry200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async post202Retry200WithHttpOperationResponse(options?: Models.LROsPost202Retry200OptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPost202Retry200WithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);

      // Deserialize Response
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header,
   * 204 with noresponse body after success
   *
   * @param {LROsPost202NoRetry204OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async post202NoRetry204WithHttpOperationResponse(options?: Models.LROsPost202NoRetry204OptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPost202NoRetry204WithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should poll Location to get the final
   * object
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postDoubleHeadersFinalLocationGetWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPostDoubleHeadersFinalLocationGetWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postDoubleHeadersFinalAzureHeaderGetWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPostDoubleHeadersFinalAzureHeaderGetWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object if you support initial Autorest behavior.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postDoubleHeadersFinalAzureHeaderGetDefaultWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPostDoubleHeadersFinalAzureHeaderGetDefaultWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPostAsyncRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postAsyncRetrySucceededWithHttpOperationResponse(options?: Models.LROsPostAsyncRetrySucceededOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPostAsyncRetrySucceededWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPostAsyncNoRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postAsyncNoRetrySucceededWithHttpOperationResponse(options?: Models.LROsPostAsyncNoRetrySucceededOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPostAsyncNoRetrySucceededWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.Product, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPostAsyncRetryFailedOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postAsyncRetryFailedWithHttpOperationResponse(options?: Models.LROsPostAsyncRetryFailedOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPostAsyncRetryFailedWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);

      // Deserialize Response
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPostAsyncRetrycanceledOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postAsyncRetrycanceledWithHttpOperationResponse(options?: Models.LROsPostAsyncRetrycanceledOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginPostAsyncRetrycanceledWithHttpOperationResponse(options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);

      // Deserialize Response
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Succeeded’.
   *
   * @param {LROsBeginPut200SucceededOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPut200SucceededWithHttpOperationResponse(options?: Models.LROsBeginPut200SucceededOptionalParams): Promise<msRest.HttpOperationResponse<Models.Product>> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPut200SucceededOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that does
   * not contain ProvisioningState=’Succeeded’.
   *
   * @param {LROsBeginPut200SucceededNoStateOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPut200SucceededNoStateWithHttpOperationResponse(options?: Models.LROsBeginPut200SucceededNoStateOptionalParams): Promise<msRest.HttpOperationResponse<Models.Product>> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPut200SucceededNoStateOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 202 to the initial request, with a location header
   * that points to a polling URL that returns a 200 and an entity that doesn't contains
   * ProvisioningState
   *
   * @param {LROsBeginPut202Retry200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPut202Retry200WithHttpOperationResponse(options?: Models.LROsBeginPut202Retry200OptionalParams): Promise<msRest.HttpOperationResponse<Models.Product>> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPut202Retry200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {LROsBeginPut201CreatingSucceeded200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPut201CreatingSucceeded200WithHttpOperationResponse(options?: Models.LROsBeginPut201CreatingSucceeded200OptionalParams): Promise<msRest.HttpOperationResponse<Models.Product>> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPut201CreatingSucceeded200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {LROsBeginPut200UpdatingSucceeded204OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPut200UpdatingSucceeded204WithHttpOperationResponse(options?: Models.LROsBeginPut200UpdatingSucceeded204OptionalParams): Promise<msRest.HttpOperationResponse<Models.Product>> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPut200UpdatingSucceeded204OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Failed’
   *
   * @param {LROsBeginPut201CreatingFailed200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPut201CreatingFailed200WithHttpOperationResponse(options?: Models.LROsBeginPut201CreatingFailed200OptionalParams): Promise<msRest.HttpOperationResponse<Models.Product>> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPut201CreatingFailed200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Canceled’
   *
   * @param {LROsBeginPut200Acceptedcanceled200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPut200Acceptedcanceled200WithHttpOperationResponse(options?: Models.LROsBeginPut200Acceptedcanceled200OptionalParams): Promise<msRest.HttpOperationResponse<Models.Product>> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPut200Acceptedcanceled200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 202 to the initial request with location header.
   * Subsequent calls to operation status do not contain location header.
   *
   * @param {LROsBeginPutNoHeaderInRetryOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPutNoHeaderInRetryWithHttpOperationResponse(options?: Models.LROsBeginPutNoHeaderInRetryOptionalParams): Promise<Models.LROsPutNoHeaderInRetryResponse> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPutNoHeaderInRetryOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPutAsyncRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPutAsyncRetrySucceededWithHttpOperationResponse(options?: Models.LROsBeginPutAsyncRetrySucceededOptionalParams): Promise<Models.LROsPutAsyncRetrySucceededResponse> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPutAsyncRetrySucceededOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPutAsyncNoRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPutAsyncNoRetrySucceededWithHttpOperationResponse(options?: Models.LROsBeginPutAsyncNoRetrySucceededOptionalParams): Promise<Models.LROsPutAsyncNoRetrySucceededResponse> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPutAsyncNoRetrySucceededOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPutAsyncRetryFailedOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPutAsyncRetryFailedWithHttpOperationResponse(options?: Models.LROsBeginPutAsyncRetryFailedOptionalParams): Promise<Models.LROsPutAsyncRetryFailedResponse> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPutAsyncRetryFailedOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPutAsyncNoRetrycanceledOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPutAsyncNoRetrycanceledWithHttpOperationResponse(options?: Models.LROsBeginPutAsyncNoRetrycanceledOptionalParams): Promise<Models.LROsPutAsyncNoRetrycanceledResponse> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPutAsyncNoRetrycanceledOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation
   * header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   *
   * @param {LROsBeginPutAsyncNoHeaderInRetryOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPutAsyncNoHeaderInRetryWithHttpOperationResponse(options?: Models.LROsBeginPutAsyncNoHeaderInRetryOptionalParams): Promise<Models.LROsPutAsyncNoHeaderInRetryResponse> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPutAsyncNoHeaderInRetryOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request with non resource.
   *
   * @param {LROsBeginPutNonResourceOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPutNonResourceWithHttpOperationResponse(options?: Models.LROsBeginPutNonResourceOptionalParams): Promise<msRest.HttpOperationResponse<Models.Sku>> {
    let sku = (options && options.sku !== undefined) ? options.sku : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            sku
          },
          options),
        beginPutNonResourceOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request with non resource.
   *
   * @param {LROsBeginPutAsyncNonResourceOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPutAsyncNonResourceWithHttpOperationResponse(options?: Models.LROsBeginPutAsyncNonResourceOptionalParams): Promise<msRest.HttpOperationResponse<Models.Sku>> {
    let sku = (options && options.sku !== undefined) ? options.sku : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            sku
          },
          options),
        beginPutAsyncNonResourceOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request with sub resource.
   *
   * @param {LROsBeginPutSubResourceOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPutSubResourceWithHttpOperationResponse(options?: Models.LROsBeginPutSubResourceOptionalParams): Promise<msRest.HttpOperationResponse<Models.SubProduct>> {
    let provisioningState = (options && options.provisioningState !== undefined) ? options.provisioningState : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            provisioningState
          },
          options),
        beginPutSubResourceOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request with sub resource.
   *
   * @param {LROsBeginPutAsyncSubResourceOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPutAsyncSubResourceWithHttpOperationResponse(options?: Models.LROsBeginPutAsyncSubResourceOptionalParams): Promise<msRest.HttpOperationResponse<Models.SubProduct>> {
    let provisioningState = (options && options.provisioningState !== undefined) ? options.provisioningState : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            provisioningState
          },
          options),
        beginPutAsyncSubResourceOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginDeleteProvisioning202Accepted200SucceededWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.LROsDeleteProvisioning202Accepted200SucceededResponse> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginDeleteProvisioning202Accepted200SucceededOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Failed’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginDeleteProvisioning202DeletingFailed200WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.LROsDeleteProvisioning202DeletingFailed200Response> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginDeleteProvisioning202DeletingFailed200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Canceled’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginDeleteProvisioning202Deletingcanceled200WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.LROsDeleteProvisioning202Deletingcanceled200Response> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginDeleteProvisioning202Deletingcanceled200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running delete succeeds and returns right away
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginDelete204SucceededWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginDelete204SucceededOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this
   * value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginDelete202Retry200WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.LROsDelete202Retry200Response> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginDelete202Retry200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this
   * value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginDelete202NoRetry204WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.LROsDelete202NoRetry204Response> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginDelete202NoRetry204OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running delete request, service returns a location header in the initial request.
   * Subsequent calls to operation status do not contain location header.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginDeleteNoHeaderInRetryWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.LROsDeleteNoHeaderInRetryResponse> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginDeleteNoHeaderInRetryOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running delete request, service returns an Azure-AsyncOperation header in the initial
   * request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginDeleteAsyncNoHeaderInRetryWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.LROsDeleteAsyncNoHeaderInRetryResponse> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginDeleteAsyncNoHeaderInRetryOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginDeleteAsyncRetrySucceededWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.LROsDeleteAsyncRetrySucceededResponse> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginDeleteAsyncRetrySucceededOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginDeleteAsyncNoRetrySucceededWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.LROsDeleteAsyncNoRetrySucceededResponse> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginDeleteAsyncNoRetrySucceededOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginDeleteAsyncRetryFailedWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.LROsDeleteAsyncRetryFailedResponse> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginDeleteAsyncRetryFailedOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginDeleteAsyncRetrycanceledWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.LROsDeleteAsyncRetrycanceledResponse> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginDeleteAsyncRetrycanceledOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header.
   * Poll returns a 200 with a response body after success.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPost200WithPayloadWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Sku>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginPost200WithPayloadOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' and
   * 'Retry-After' headers, Polls return a 200 with a response body after success
   *
   * @param {LROsBeginPost202Retry200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPost202Retry200WithHttpOperationResponse(options?: Models.LROsBeginPost202Retry200OptionalParams): Promise<Models.LROsPost202Retry200Response> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPost202Retry200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header,
   * 204 with noresponse body after success
   *
   * @param {LROsBeginPost202NoRetry204OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPost202NoRetry204WithHttpOperationResponse(options?: Models.LROsBeginPost202NoRetry204OptionalParams): Promise<Models.LROsPost202NoRetry204Response> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPost202NoRetry204OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should poll Location to get the final
   * object
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPostDoubleHeadersFinalLocationGetWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Product>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginPostDoubleHeadersFinalLocationGetOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPostDoubleHeadersFinalAzureHeaderGetWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Product>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginPostDoubleHeadersFinalAzureHeaderGetOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object if you support initial Autorest behavior.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPostDoubleHeadersFinalAzureHeaderGetDefaultWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Product>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), beginPostDoubleHeadersFinalAzureHeaderGetDefaultOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPostAsyncRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPostAsyncRetrySucceededWithHttpOperationResponse(options?: Models.LROsBeginPostAsyncRetrySucceededOptionalParams): Promise<Models.LROsPostAsyncRetrySucceededResponse> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPostAsyncRetrySucceededOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPostAsyncNoRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPostAsyncNoRetrySucceededWithHttpOperationResponse(options?: Models.LROsBeginPostAsyncNoRetrySucceededOptionalParams): Promise<Models.LROsPostAsyncNoRetrySucceededResponse> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPostAsyncNoRetrySucceededOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPostAsyncRetryFailedOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPostAsyncRetryFailedWithHttpOperationResponse(options?: Models.LROsBeginPostAsyncRetryFailedOptionalParams): Promise<Models.LROsPostAsyncRetryFailedResponse> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPostAsyncRetryFailedOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPostAsyncRetrycanceledOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginPostAsyncRetrycanceledWithHttpOperationResponse(options?: Models.LROsBeginPostAsyncRetrycanceledOptionalParams): Promise<Models.LROsPostAsyncRetrycanceledResponse> {
    let product = (options && options.product !== undefined) ? options.product : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            product
          },
          options),
        beginPostAsyncRetrycanceledOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Succeeded’.
   *
   * @param {LROsPut200SucceededOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put200Succeeded(): Promise<Models.Product>;
  put200Succeeded(options: Models.LROsPut200SucceededOptionalParams): Promise<Models.Product>;
  put200Succeeded(callback: msRest.ServiceCallback<Models.Product>): void;
  put200Succeeded(options: Models.LROsPut200SucceededOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  put200Succeeded(): any {
    return msRest.responseToBody(this.put200SucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that does
   * not contain ProvisioningState=’Succeeded’.
   *
   * @param {LROsPut200SucceededNoStateOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put200SucceededNoState(): Promise<Models.Product>;
  put200SucceededNoState(options: Models.LROsPut200SucceededNoStateOptionalParams): Promise<Models.Product>;
  put200SucceededNoState(callback: msRest.ServiceCallback<Models.Product>): void;
  put200SucceededNoState(options: Models.LROsPut200SucceededNoStateOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  put200SucceededNoState(): any {
    return msRest.responseToBody(this.put200SucceededNoStateWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 202 to the initial request, with a location header
   * that points to a polling URL that returns a 200 and an entity that doesn't contains
   * ProvisioningState
   *
   * @param {LROsPut202Retry200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put202Retry200(): Promise<Models.Product>;
  put202Retry200(options: Models.LROsPut202Retry200OptionalParams): Promise<Models.Product>;
  put202Retry200(callback: msRest.ServiceCallback<Models.Product>): void;
  put202Retry200(options: Models.LROsPut202Retry200OptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  put202Retry200(): any {
    return msRest.responseToBody(this.put202Retry200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {LROsPut201CreatingSucceeded200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put201CreatingSucceeded200(): Promise<Models.Product>;
  put201CreatingSucceeded200(options: Models.LROsPut201CreatingSucceeded200OptionalParams): Promise<Models.Product>;
  put201CreatingSucceeded200(callback: msRest.ServiceCallback<Models.Product>): void;
  put201CreatingSucceeded200(options: Models.LROsPut201CreatingSucceeded200OptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  put201CreatingSucceeded200(): any {
    return msRest.responseToBody(this.put201CreatingSucceeded200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {LROsPut200UpdatingSucceeded204OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put200UpdatingSucceeded204(): Promise<Models.Product>;
  put200UpdatingSucceeded204(options: Models.LROsPut200UpdatingSucceeded204OptionalParams): Promise<Models.Product>;
  put200UpdatingSucceeded204(callback: msRest.ServiceCallback<Models.Product>): void;
  put200UpdatingSucceeded204(options: Models.LROsPut200UpdatingSucceeded204OptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  put200UpdatingSucceeded204(): any {
    return msRest.responseToBody(this.put200UpdatingSucceeded204WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Failed’
   *
   * @param {LROsPut201CreatingFailed200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put201CreatingFailed200(): Promise<Models.Product>;
  put201CreatingFailed200(options: Models.LROsPut201CreatingFailed200OptionalParams): Promise<Models.Product>;
  put201CreatingFailed200(callback: msRest.ServiceCallback<Models.Product>): void;
  put201CreatingFailed200(options: Models.LROsPut201CreatingFailed200OptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  put201CreatingFailed200(): any {
    return msRest.responseToBody(this.put201CreatingFailed200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Canceled’
   *
   * @param {LROsPut200Acceptedcanceled200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put200Acceptedcanceled200(): Promise<Models.Product>;
  put200Acceptedcanceled200(options: Models.LROsPut200Acceptedcanceled200OptionalParams): Promise<Models.Product>;
  put200Acceptedcanceled200(callback: msRest.ServiceCallback<Models.Product>): void;
  put200Acceptedcanceled200(options: Models.LROsPut200Acceptedcanceled200OptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  put200Acceptedcanceled200(): any {
    return msRest.responseToBody(this.put200Acceptedcanceled200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 202 to the initial request with location header.
   * Subsequent calls to operation status do not contain location header.
   *
   * @param {LROsPutNoHeaderInRetryOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putNoHeaderInRetry(): Promise<Models.Product>;
  putNoHeaderInRetry(options: Models.LROsPutNoHeaderInRetryOptionalParams): Promise<Models.Product>;
  putNoHeaderInRetry(callback: msRest.ServiceCallback<Models.Product>): void;
  putNoHeaderInRetry(options: Models.LROsPutNoHeaderInRetryOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  putNoHeaderInRetry(): any {
    return msRest.responseToBody(this.putNoHeaderInRetryWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPutAsyncRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putAsyncRetrySucceeded(): Promise<Models.Product>;
  putAsyncRetrySucceeded(options: Models.LROsPutAsyncRetrySucceededOptionalParams): Promise<Models.Product>;
  putAsyncRetrySucceeded(callback: msRest.ServiceCallback<Models.Product>): void;
  putAsyncRetrySucceeded(options: Models.LROsPutAsyncRetrySucceededOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  putAsyncRetrySucceeded(): any {
    return msRest.responseToBody(this.putAsyncRetrySucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPutAsyncNoRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putAsyncNoRetrySucceeded(): Promise<Models.Product>;
  putAsyncNoRetrySucceeded(options: Models.LROsPutAsyncNoRetrySucceededOptionalParams): Promise<Models.Product>;
  putAsyncNoRetrySucceeded(callback: msRest.ServiceCallback<Models.Product>): void;
  putAsyncNoRetrySucceeded(options: Models.LROsPutAsyncNoRetrySucceededOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  putAsyncNoRetrySucceeded(): any {
    return msRest.responseToBody(this.putAsyncNoRetrySucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPutAsyncRetryFailedOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putAsyncRetryFailed(): Promise<Models.Product>;
  putAsyncRetryFailed(options: Models.LROsPutAsyncRetryFailedOptionalParams): Promise<Models.Product>;
  putAsyncRetryFailed(callback: msRest.ServiceCallback<Models.Product>): void;
  putAsyncRetryFailed(options: Models.LROsPutAsyncRetryFailedOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  putAsyncRetryFailed(): any {
    return msRest.responseToBody(this.putAsyncRetryFailedWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPutAsyncNoRetrycanceledOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putAsyncNoRetrycanceled(): Promise<Models.Product>;
  putAsyncNoRetrycanceled(options: Models.LROsPutAsyncNoRetrycanceledOptionalParams): Promise<Models.Product>;
  putAsyncNoRetrycanceled(callback: msRest.ServiceCallback<Models.Product>): void;
  putAsyncNoRetrycanceled(options: Models.LROsPutAsyncNoRetrycanceledOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  putAsyncNoRetrycanceled(): any {
    return msRest.responseToBody(this.putAsyncNoRetrycanceledWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation
   * header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   *
   * @param {LROsPutAsyncNoHeaderInRetryOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putAsyncNoHeaderInRetry(): Promise<Models.Product>;
  putAsyncNoHeaderInRetry(options: Models.LROsPutAsyncNoHeaderInRetryOptionalParams): Promise<Models.Product>;
  putAsyncNoHeaderInRetry(callback: msRest.ServiceCallback<Models.Product>): void;
  putAsyncNoHeaderInRetry(options: Models.LROsPutAsyncNoHeaderInRetryOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  putAsyncNoHeaderInRetry(): any {
    return msRest.responseToBody(this.putAsyncNoHeaderInRetryWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request with non resource.
   *
   * @param {LROsPutNonResourceOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Sku} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Sku} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putNonResource(): Promise<Models.Sku>;
  putNonResource(options: Models.LROsPutNonResourceOptionalParams): Promise<Models.Sku>;
  putNonResource(callback: msRest.ServiceCallback<Models.Sku>): void;
  putNonResource(options: Models.LROsPutNonResourceOptionalParams, callback: msRest.ServiceCallback<Models.Sku>): void;
  putNonResource(): any {
    return msRest.responseToBody(this.putNonResourceWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request with non resource.
   *
   * @param {LROsPutAsyncNonResourceOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Sku} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Sku} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putAsyncNonResource(): Promise<Models.Sku>;
  putAsyncNonResource(options: Models.LROsPutAsyncNonResourceOptionalParams): Promise<Models.Sku>;
  putAsyncNonResource(callback: msRest.ServiceCallback<Models.Sku>): void;
  putAsyncNonResource(options: Models.LROsPutAsyncNonResourceOptionalParams, callback: msRest.ServiceCallback<Models.Sku>): void;
  putAsyncNonResource(): any {
    return msRest.responseToBody(this.putAsyncNonResourceWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request with sub resource.
   *
   * @param {LROsPutSubResourceOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SubProduct} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.SubProduct} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putSubResource(): Promise<Models.SubProduct>;
  putSubResource(options: Models.LROsPutSubResourceOptionalParams): Promise<Models.SubProduct>;
  putSubResource(callback: msRest.ServiceCallback<Models.SubProduct>): void;
  putSubResource(options: Models.LROsPutSubResourceOptionalParams, callback: msRest.ServiceCallback<Models.SubProduct>): void;
  putSubResource(): any {
    return msRest.responseToBody(this.putSubResourceWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request with sub resource.
   *
   * @param {LROsPutAsyncSubResourceOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SubProduct} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.SubProduct} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putAsyncSubResource(): Promise<Models.SubProduct>;
  putAsyncSubResource(options: Models.LROsPutAsyncSubResourceOptionalParams): Promise<Models.SubProduct>;
  putAsyncSubResource(callback: msRest.ServiceCallback<Models.SubProduct>): void;
  putAsyncSubResource(options: Models.LROsPutAsyncSubResourceOptionalParams, callback: msRest.ServiceCallback<Models.SubProduct>): void;
  putAsyncSubResource(): any {
    return msRest.responseToBody(this.putAsyncSubResourceWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteProvisioning202Accepted200Succeeded(): Promise<Models.Product>;
  deleteProvisioning202Accepted200Succeeded(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  deleteProvisioning202Accepted200Succeeded(callback: msRest.ServiceCallback<Models.Product>): void;
  deleteProvisioning202Accepted200Succeeded(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  deleteProvisioning202Accepted200Succeeded(): any {
    return msRest.responseToBody(this.deleteProvisioning202Accepted200SucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Failed’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteProvisioning202DeletingFailed200(): Promise<Models.Product>;
  deleteProvisioning202DeletingFailed200(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  deleteProvisioning202DeletingFailed200(callback: msRest.ServiceCallback<Models.Product>): void;
  deleteProvisioning202DeletingFailed200(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  deleteProvisioning202DeletingFailed200(): any {
    return msRest.responseToBody(this.deleteProvisioning202DeletingFailed200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Canceled’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteProvisioning202Deletingcanceled200(): Promise<Models.Product>;
  deleteProvisioning202Deletingcanceled200(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  deleteProvisioning202Deletingcanceled200(callback: msRest.ServiceCallback<Models.Product>): void;
  deleteProvisioning202Deletingcanceled200(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  deleteProvisioning202Deletingcanceled200(): any {
    return msRest.responseToBody(this.deleteProvisioning202Deletingcanceled200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete succeeds and returns right away
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  delete204Succeeded(): Promise<void>;
  delete204Succeeded(options: msRest.RequestOptionsBase): Promise<void>;
  delete204Succeeded(callback: msRest.ServiceCallback<void>): void;
  delete204Succeeded(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  delete204Succeeded(): any {
    return msRest.responseToBody(this.delete204SucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this
   * value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  delete202Retry200(): Promise<Models.Product>;
  delete202Retry200(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  delete202Retry200(callback: msRest.ServiceCallback<Models.Product>): void;
  delete202Retry200(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  delete202Retry200(): any {
    return msRest.responseToBody(this.delete202Retry200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this
   * value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  delete202NoRetry204(): Promise<Models.Product>;
  delete202NoRetry204(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  delete202NoRetry204(callback: msRest.ServiceCallback<Models.Product>): void;
  delete202NoRetry204(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  delete202NoRetry204(): any {
    return msRest.responseToBody(this.delete202NoRetry204WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a location header in the initial request.
   * Subsequent calls to operation status do not contain location header.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteNoHeaderInRetry(): Promise<void>;
  deleteNoHeaderInRetry(options: msRest.RequestOptionsBase): Promise<void>;
  deleteNoHeaderInRetry(callback: msRest.ServiceCallback<void>): void;
  deleteNoHeaderInRetry(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteNoHeaderInRetry(): any {
    return msRest.responseToBody(this.deleteNoHeaderInRetryWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns an Azure-AsyncOperation header in the initial
   * request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAsyncNoHeaderInRetry(): Promise<void>;
  deleteAsyncNoHeaderInRetry(options: msRest.RequestOptionsBase): Promise<void>;
  deleteAsyncNoHeaderInRetry(callback: msRest.ServiceCallback<void>): void;
  deleteAsyncNoHeaderInRetry(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAsyncNoHeaderInRetry(): any {
    return msRest.responseToBody(this.deleteAsyncNoHeaderInRetryWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAsyncRetrySucceeded(): Promise<void>;
  deleteAsyncRetrySucceeded(options: msRest.RequestOptionsBase): Promise<void>;
  deleteAsyncRetrySucceeded(callback: msRest.ServiceCallback<void>): void;
  deleteAsyncRetrySucceeded(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAsyncRetrySucceeded(): any {
    return msRest.responseToBody(this.deleteAsyncRetrySucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAsyncNoRetrySucceeded(): Promise<void>;
  deleteAsyncNoRetrySucceeded(options: msRest.RequestOptionsBase): Promise<void>;
  deleteAsyncNoRetrySucceeded(callback: msRest.ServiceCallback<void>): void;
  deleteAsyncNoRetrySucceeded(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAsyncNoRetrySucceeded(): any {
    return msRest.responseToBody(this.deleteAsyncNoRetrySucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAsyncRetryFailed(): Promise<void>;
  deleteAsyncRetryFailed(options: msRest.RequestOptionsBase): Promise<void>;
  deleteAsyncRetryFailed(callback: msRest.ServiceCallback<void>): void;
  deleteAsyncRetryFailed(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAsyncRetryFailed(): any {
    return msRest.responseToBody(this.deleteAsyncRetryFailedWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAsyncRetrycanceled(): Promise<void>;
  deleteAsyncRetrycanceled(options: msRest.RequestOptionsBase): Promise<void>;
  deleteAsyncRetrycanceled(callback: msRest.ServiceCallback<void>): void;
  deleteAsyncRetrycanceled(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAsyncRetrycanceled(): any {
    return msRest.responseToBody(this.deleteAsyncRetrycanceledWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header.
   * Poll returns a 200 with a response body after success.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Sku} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Sku} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  post200WithPayload(): Promise<Models.Sku>;
  post200WithPayload(options: msRest.RequestOptionsBase): Promise<Models.Sku>;
  post200WithPayload(callback: msRest.ServiceCallback<Models.Sku>): void;
  post200WithPayload(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Sku>): void;
  post200WithPayload(): any {
    return msRest.responseToBody(this.post200WithPayloadWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' and
   * 'Retry-After' headers, Polls return a 200 with a response body after success
   *
   * @param {LROsPost202Retry200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  post202Retry200(): Promise<void>;
  post202Retry200(options: Models.LROsPost202Retry200OptionalParams): Promise<void>;
  post202Retry200(callback: msRest.ServiceCallback<void>): void;
  post202Retry200(options: Models.LROsPost202Retry200OptionalParams, callback: msRest.ServiceCallback<void>): void;
  post202Retry200(): any {
    return msRest.responseToBody(this.post202Retry200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header,
   * 204 with noresponse body after success
   *
   * @param {LROsPost202NoRetry204OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  post202NoRetry204(): Promise<Models.Product>;
  post202NoRetry204(options: Models.LROsPost202NoRetry204OptionalParams): Promise<Models.Product>;
  post202NoRetry204(callback: msRest.ServiceCallback<Models.Product>): void;
  post202NoRetry204(options: Models.LROsPost202NoRetry204OptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  post202NoRetry204(): any {
    return msRest.responseToBody(this.post202NoRetry204WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should poll Location to get the final
   * object
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postDoubleHeadersFinalLocationGet(): Promise<Models.Product>;
  postDoubleHeadersFinalLocationGet(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  postDoubleHeadersFinalLocationGet(callback: msRest.ServiceCallback<Models.Product>): void;
  postDoubleHeadersFinalLocationGet(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  postDoubleHeadersFinalLocationGet(): any {
    return msRest.responseToBody(this.postDoubleHeadersFinalLocationGetWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postDoubleHeadersFinalAzureHeaderGet(): Promise<Models.Product>;
  postDoubleHeadersFinalAzureHeaderGet(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  postDoubleHeadersFinalAzureHeaderGet(callback: msRest.ServiceCallback<Models.Product>): void;
  postDoubleHeadersFinalAzureHeaderGet(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  postDoubleHeadersFinalAzureHeaderGet(): any {
    return msRest.responseToBody(this.postDoubleHeadersFinalAzureHeaderGetWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object if you support initial Autorest behavior.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postDoubleHeadersFinalAzureHeaderGetDefault(): Promise<Models.Product>;
  postDoubleHeadersFinalAzureHeaderGetDefault(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  postDoubleHeadersFinalAzureHeaderGetDefault(callback: msRest.ServiceCallback<Models.Product>): void;
  postDoubleHeadersFinalAzureHeaderGetDefault(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  postDoubleHeadersFinalAzureHeaderGetDefault(): any {
    return msRest.responseToBody(this.postDoubleHeadersFinalAzureHeaderGetDefaultWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPostAsyncRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postAsyncRetrySucceeded(): Promise<Models.Product>;
  postAsyncRetrySucceeded(options: Models.LROsPostAsyncRetrySucceededOptionalParams): Promise<Models.Product>;
  postAsyncRetrySucceeded(callback: msRest.ServiceCallback<Models.Product>): void;
  postAsyncRetrySucceeded(options: Models.LROsPostAsyncRetrySucceededOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  postAsyncRetrySucceeded(): any {
    return msRest.responseToBody(this.postAsyncRetrySucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPostAsyncNoRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postAsyncNoRetrySucceeded(): Promise<Models.Product>;
  postAsyncNoRetrySucceeded(options: Models.LROsPostAsyncNoRetrySucceededOptionalParams): Promise<Models.Product>;
  postAsyncNoRetrySucceeded(callback: msRest.ServiceCallback<Models.Product>): void;
  postAsyncNoRetrySucceeded(options: Models.LROsPostAsyncNoRetrySucceededOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  postAsyncNoRetrySucceeded(): any {
    return msRest.responseToBody(this.postAsyncNoRetrySucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPostAsyncRetryFailedOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postAsyncRetryFailed(): Promise<void>;
  postAsyncRetryFailed(options: Models.LROsPostAsyncRetryFailedOptionalParams): Promise<void>;
  postAsyncRetryFailed(callback: msRest.ServiceCallback<void>): void;
  postAsyncRetryFailed(options: Models.LROsPostAsyncRetryFailedOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postAsyncRetryFailed(): any {
    return msRest.responseToBody(this.postAsyncRetryFailedWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsPostAsyncRetrycanceledOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postAsyncRetrycanceled(): Promise<void>;
  postAsyncRetrycanceled(options: Models.LROsPostAsyncRetrycanceledOptionalParams): Promise<void>;
  postAsyncRetrycanceled(callback: msRest.ServiceCallback<void>): void;
  postAsyncRetrycanceled(options: Models.LROsPostAsyncRetrycanceledOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postAsyncRetrycanceled(): any {
    return msRest.responseToBody(this.postAsyncRetrycanceledWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Succeeded’.
   *
   * @param {LROsBeginPut200SucceededOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPut200Succeeded(): Promise<Models.Product>;
  beginPut200Succeeded(options: Models.LROsBeginPut200SucceededOptionalParams): Promise<Models.Product>;
  beginPut200Succeeded(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut200Succeeded(options: Models.LROsBeginPut200SucceededOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut200Succeeded(): any {
    return msRest.responseToBody(this.beginPut200SucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that does
   * not contain ProvisioningState=’Succeeded’.
   *
   * @param {LROsBeginPut200SucceededNoStateOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPut200SucceededNoState(): Promise<Models.Product>;
  beginPut200SucceededNoState(options: Models.LROsBeginPut200SucceededNoStateOptionalParams): Promise<Models.Product>;
  beginPut200SucceededNoState(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut200SucceededNoState(options: Models.LROsBeginPut200SucceededNoStateOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut200SucceededNoState(): any {
    return msRest.responseToBody(this.beginPut200SucceededNoStateWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 202 to the initial request, with a location header
   * that points to a polling URL that returns a 200 and an entity that doesn't contains
   * ProvisioningState
   *
   * @param {LROsBeginPut202Retry200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPut202Retry200(): Promise<Models.Product>;
  beginPut202Retry200(options: Models.LROsBeginPut202Retry200OptionalParams): Promise<Models.Product>;
  beginPut202Retry200(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut202Retry200(options: Models.LROsBeginPut202Retry200OptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut202Retry200(): any {
    return msRest.responseToBody(this.beginPut202Retry200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {LROsBeginPut201CreatingSucceeded200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPut201CreatingSucceeded200(): Promise<Models.Product>;
  beginPut201CreatingSucceeded200(options: Models.LROsBeginPut201CreatingSucceeded200OptionalParams): Promise<Models.Product>;
  beginPut201CreatingSucceeded200(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut201CreatingSucceeded200(options: Models.LROsBeginPut201CreatingSucceeded200OptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut201CreatingSucceeded200(): any {
    return msRest.responseToBody(this.beginPut201CreatingSucceeded200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {LROsBeginPut200UpdatingSucceeded204OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPut200UpdatingSucceeded204(): Promise<Models.Product>;
  beginPut200UpdatingSucceeded204(options: Models.LROsBeginPut200UpdatingSucceeded204OptionalParams): Promise<Models.Product>;
  beginPut200UpdatingSucceeded204(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut200UpdatingSucceeded204(options: Models.LROsBeginPut200UpdatingSucceeded204OptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut200UpdatingSucceeded204(): any {
    return msRest.responseToBody(this.beginPut200UpdatingSucceeded204WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Failed’
   *
   * @param {LROsBeginPut201CreatingFailed200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPut201CreatingFailed200(): Promise<Models.Product>;
  beginPut201CreatingFailed200(options: Models.LROsBeginPut201CreatingFailed200OptionalParams): Promise<Models.Product>;
  beginPut201CreatingFailed200(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut201CreatingFailed200(options: Models.LROsBeginPut201CreatingFailed200OptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut201CreatingFailed200(): any {
    return msRest.responseToBody(this.beginPut201CreatingFailed200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 201 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Canceled’
   *
   * @param {LROsBeginPut200Acceptedcanceled200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPut200Acceptedcanceled200(): Promise<Models.Product>;
  beginPut200Acceptedcanceled200(options: Models.LROsBeginPut200Acceptedcanceled200OptionalParams): Promise<Models.Product>;
  beginPut200Acceptedcanceled200(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut200Acceptedcanceled200(options: Models.LROsBeginPut200Acceptedcanceled200OptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPut200Acceptedcanceled200(): any {
    return msRest.responseToBody(this.beginPut200Acceptedcanceled200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 202 to the initial request with location header.
   * Subsequent calls to operation status do not contain location header.
   *
   * @param {LROsBeginPutNoHeaderInRetryOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPutNoHeaderInRetry(): Promise<Models.Product>;
  beginPutNoHeaderInRetry(options: Models.LROsBeginPutNoHeaderInRetryOptionalParams): Promise<Models.Product>;
  beginPutNoHeaderInRetry(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPutNoHeaderInRetry(options: Models.LROsBeginPutNoHeaderInRetryOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPutNoHeaderInRetry(): any {
    return msRest.responseToBody(this.beginPutNoHeaderInRetryWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPutAsyncRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPutAsyncRetrySucceeded(): Promise<Models.Product>;
  beginPutAsyncRetrySucceeded(options: Models.LROsBeginPutAsyncRetrySucceededOptionalParams): Promise<Models.Product>;
  beginPutAsyncRetrySucceeded(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPutAsyncRetrySucceeded(options: Models.LROsBeginPutAsyncRetrySucceededOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPutAsyncRetrySucceeded(): any {
    return msRest.responseToBody(this.beginPutAsyncRetrySucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPutAsyncNoRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPutAsyncNoRetrySucceeded(): Promise<Models.Product>;
  beginPutAsyncNoRetrySucceeded(options: Models.LROsBeginPutAsyncNoRetrySucceededOptionalParams): Promise<Models.Product>;
  beginPutAsyncNoRetrySucceeded(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPutAsyncNoRetrySucceeded(options: Models.LROsBeginPutAsyncNoRetrySucceededOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPutAsyncNoRetrySucceeded(): any {
    return msRest.responseToBody(this.beginPutAsyncNoRetrySucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPutAsyncRetryFailedOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPutAsyncRetryFailed(): Promise<Models.Product>;
  beginPutAsyncRetryFailed(options: Models.LROsBeginPutAsyncRetryFailedOptionalParams): Promise<Models.Product>;
  beginPutAsyncRetryFailed(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPutAsyncRetryFailed(options: Models.LROsBeginPutAsyncRetryFailedOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPutAsyncRetryFailed(): any {
    return msRest.responseToBody(this.beginPutAsyncRetryFailedWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 200 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPutAsyncNoRetrycanceledOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPutAsyncNoRetrycanceled(): Promise<Models.Product>;
  beginPutAsyncNoRetrycanceled(options: Models.LROsBeginPutAsyncNoRetrycanceledOptionalParams): Promise<Models.Product>;
  beginPutAsyncNoRetrycanceled(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPutAsyncNoRetrycanceled(options: Models.LROsBeginPutAsyncNoRetrycanceledOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPutAsyncNoRetrycanceled(): any {
    return msRest.responseToBody(this.beginPutAsyncNoRetrycanceledWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation
   * header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   *
   * @param {LROsBeginPutAsyncNoHeaderInRetryOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPutAsyncNoHeaderInRetry(): Promise<Models.Product>;
  beginPutAsyncNoHeaderInRetry(options: Models.LROsBeginPutAsyncNoHeaderInRetryOptionalParams): Promise<Models.Product>;
  beginPutAsyncNoHeaderInRetry(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPutAsyncNoHeaderInRetry(options: Models.LROsBeginPutAsyncNoHeaderInRetryOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPutAsyncNoHeaderInRetry(): any {
    return msRest.responseToBody(this.beginPutAsyncNoHeaderInRetryWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request with non resource.
   *
   * @param {LROsBeginPutNonResourceOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Sku} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Sku} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPutNonResource(): Promise<Models.Sku>;
  beginPutNonResource(options: Models.LROsBeginPutNonResourceOptionalParams): Promise<Models.Sku>;
  beginPutNonResource(callback: msRest.ServiceCallback<Models.Sku>): void;
  beginPutNonResource(options: Models.LROsBeginPutNonResourceOptionalParams, callback: msRest.ServiceCallback<Models.Sku>): void;
  beginPutNonResource(): any {
    return msRest.responseToBody(this.beginPutNonResourceWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request with non resource.
   *
   * @param {LROsBeginPutAsyncNonResourceOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Sku} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Sku} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPutAsyncNonResource(): Promise<Models.Sku>;
  beginPutAsyncNonResource(options: Models.LROsBeginPutAsyncNonResourceOptionalParams): Promise<Models.Sku>;
  beginPutAsyncNonResource(callback: msRest.ServiceCallback<Models.Sku>): void;
  beginPutAsyncNonResource(options: Models.LROsBeginPutAsyncNonResourceOptionalParams, callback: msRest.ServiceCallback<Models.Sku>): void;
  beginPutAsyncNonResource(): any {
    return msRest.responseToBody(this.beginPutAsyncNonResourceWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request with sub resource.
   *
   * @param {LROsBeginPutSubResourceOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SubProduct} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.SubProduct} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPutSubResource(): Promise<Models.SubProduct>;
  beginPutSubResource(options: Models.LROsBeginPutSubResourceOptionalParams): Promise<Models.SubProduct>;
  beginPutSubResource(callback: msRest.ServiceCallback<Models.SubProduct>): void;
  beginPutSubResource(options: Models.LROsBeginPutSubResourceOptionalParams, callback: msRest.ServiceCallback<Models.SubProduct>): void;
  beginPutSubResource(): any {
    return msRest.responseToBody(this.beginPutSubResourceWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running put request with sub resource.
   *
   * @param {LROsBeginPutAsyncSubResourceOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SubProduct} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.SubProduct} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPutAsyncSubResource(): Promise<Models.SubProduct>;
  beginPutAsyncSubResource(options: Models.LROsBeginPutAsyncSubResourceOptionalParams): Promise<Models.SubProduct>;
  beginPutAsyncSubResource(callback: msRest.ServiceCallback<Models.SubProduct>): void;
  beginPutAsyncSubResource(options: Models.LROsBeginPutAsyncSubResourceOptionalParams, callback: msRest.ServiceCallback<Models.SubProduct>): void;
  beginPutAsyncSubResource(): any {
    return msRest.responseToBody(this.beginPutAsyncSubResourceWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteProvisioning202Accepted200Succeeded(): Promise<Models.Product>;
  beginDeleteProvisioning202Accepted200Succeeded(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  beginDeleteProvisioning202Accepted200Succeeded(callback: msRest.ServiceCallback<Models.Product>): void;
  beginDeleteProvisioning202Accepted200Succeeded(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  beginDeleteProvisioning202Accepted200Succeeded(): any {
    return msRest.responseToBody(this.beginDeleteProvisioning202Accepted200SucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Failed’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteProvisioning202DeletingFailed200(): Promise<Models.Product>;
  beginDeleteProvisioning202DeletingFailed200(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  beginDeleteProvisioning202DeletingFailed200(callback: msRest.ServiceCallback<Models.Product>): void;
  beginDeleteProvisioning202DeletingFailed200(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  beginDeleteProvisioning202DeletingFailed200(): any {
    return msRest.responseToBody(this.beginDeleteProvisioning202DeletingFailed200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Canceled’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteProvisioning202Deletingcanceled200(): Promise<Models.Product>;
  beginDeleteProvisioning202Deletingcanceled200(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  beginDeleteProvisioning202Deletingcanceled200(callback: msRest.ServiceCallback<Models.Product>): void;
  beginDeleteProvisioning202Deletingcanceled200(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  beginDeleteProvisioning202Deletingcanceled200(): any {
    return msRest.responseToBody(this.beginDeleteProvisioning202Deletingcanceled200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete succeeds and returns right away
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDelete204Succeeded(): Promise<void>;
  beginDelete204Succeeded(options: msRest.RequestOptionsBase): Promise<void>;
  beginDelete204Succeeded(callback: msRest.ServiceCallback<void>): void;
  beginDelete204Succeeded(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  beginDelete204Succeeded(): any {
    return msRest.responseToBody(this.beginDelete204SucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this
   * value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDelete202Retry200(): Promise<Models.Product>;
  beginDelete202Retry200(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  beginDelete202Retry200(callback: msRest.ServiceCallback<Models.Product>): void;
  beginDelete202Retry200(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  beginDelete202Retry200(): any {
    return msRest.responseToBody(this.beginDelete202Retry200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Polls return this
   * value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDelete202NoRetry204(): Promise<Models.Product>;
  beginDelete202NoRetry204(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  beginDelete202NoRetry204(callback: msRest.ServiceCallback<Models.Product>): void;
  beginDelete202NoRetry204(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  beginDelete202NoRetry204(): any {
    return msRest.responseToBody(this.beginDelete202NoRetry204WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a location header in the initial request.
   * Subsequent calls to operation status do not contain location header.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteNoHeaderInRetry(): Promise<void>;
  beginDeleteNoHeaderInRetry(options: msRest.RequestOptionsBase): Promise<void>;
  beginDeleteNoHeaderInRetry(callback: msRest.ServiceCallback<void>): void;
  beginDeleteNoHeaderInRetry(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  beginDeleteNoHeaderInRetry(): any {
    return msRest.responseToBody(this.beginDeleteNoHeaderInRetryWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns an Azure-AsyncOperation header in the initial
   * request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteAsyncNoHeaderInRetry(): Promise<void>;
  beginDeleteAsyncNoHeaderInRetry(options: msRest.RequestOptionsBase): Promise<void>;
  beginDeleteAsyncNoHeaderInRetry(callback: msRest.ServiceCallback<void>): void;
  beginDeleteAsyncNoHeaderInRetry(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  beginDeleteAsyncNoHeaderInRetry(): any {
    return msRest.responseToBody(this.beginDeleteAsyncNoHeaderInRetryWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteAsyncRetrySucceeded(): Promise<void>;
  beginDeleteAsyncRetrySucceeded(options: msRest.RequestOptionsBase): Promise<void>;
  beginDeleteAsyncRetrySucceeded(callback: msRest.ServiceCallback<void>): void;
  beginDeleteAsyncRetrySucceeded(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  beginDeleteAsyncRetrySucceeded(): any {
    return msRest.responseToBody(this.beginDeleteAsyncRetrySucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteAsyncNoRetrySucceeded(): Promise<void>;
  beginDeleteAsyncNoRetrySucceeded(options: msRest.RequestOptionsBase): Promise<void>;
  beginDeleteAsyncNoRetrySucceeded(callback: msRest.ServiceCallback<void>): void;
  beginDeleteAsyncNoRetrySucceeded(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  beginDeleteAsyncNoRetrySucceeded(): any {
    return msRest.responseToBody(this.beginDeleteAsyncNoRetrySucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteAsyncRetryFailed(): Promise<void>;
  beginDeleteAsyncRetryFailed(options: msRest.RequestOptionsBase): Promise<void>;
  beginDeleteAsyncRetryFailed(callback: msRest.ServiceCallback<void>): void;
  beginDeleteAsyncRetryFailed(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  beginDeleteAsyncRetryFailed(): any {
    return msRest.responseToBody(this.beginDeleteAsyncRetryFailedWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running delete request, service returns a 202 to the initial request. Poll the endpoint
   * indicated in the Azure-AsyncOperation header for operation status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteAsyncRetrycanceled(): Promise<void>;
  beginDeleteAsyncRetrycanceled(options: msRest.RequestOptionsBase): Promise<void>;
  beginDeleteAsyncRetrycanceled(callback: msRest.ServiceCallback<void>): void;
  beginDeleteAsyncRetrycanceled(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  beginDeleteAsyncRetrycanceled(): any {
    return msRest.responseToBody(this.beginDeleteAsyncRetrycanceledWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header.
   * Poll returns a 200 with a response body after success.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Sku} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Sku} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPost200WithPayload(): Promise<Models.Sku>;
  beginPost200WithPayload(options: msRest.RequestOptionsBase): Promise<Models.Sku>;
  beginPost200WithPayload(callback: msRest.ServiceCallback<Models.Sku>): void;
  beginPost200WithPayload(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Sku>): void;
  beginPost200WithPayload(): any {
    return msRest.responseToBody(this.beginPost200WithPayloadWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' and
   * 'Retry-After' headers, Polls return a 200 with a response body after success
   *
   * @param {LROsBeginPost202Retry200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPost202Retry200(): Promise<void>;
  beginPost202Retry200(options: Models.LROsBeginPost202Retry200OptionalParams): Promise<void>;
  beginPost202Retry200(callback: msRest.ServiceCallback<void>): void;
  beginPost202Retry200(options: Models.LROsBeginPost202Retry200OptionalParams, callback: msRest.ServiceCallback<void>): void;
  beginPost202Retry200(): any {
    return msRest.responseToBody(this.beginPost202Retry200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with 'Location' header,
   * 204 with noresponse body after success
   *
   * @param {LROsBeginPost202NoRetry204OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPost202NoRetry204(): Promise<Models.Product>;
  beginPost202NoRetry204(options: Models.LROsBeginPost202NoRetry204OptionalParams): Promise<Models.Product>;
  beginPost202NoRetry204(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPost202NoRetry204(options: Models.LROsBeginPost202NoRetry204OptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPost202NoRetry204(): any {
    return msRest.responseToBody(this.beginPost202NoRetry204WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should poll Location to get the final
   * object
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPostDoubleHeadersFinalLocationGet(): Promise<Models.Product>;
  beginPostDoubleHeadersFinalLocationGet(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  beginPostDoubleHeadersFinalLocationGet(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPostDoubleHeadersFinalLocationGet(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPostDoubleHeadersFinalLocationGet(): any {
    return msRest.responseToBody(this.beginPostDoubleHeadersFinalLocationGetWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPostDoubleHeadersFinalAzureHeaderGet(): Promise<Models.Product>;
  beginPostDoubleHeadersFinalAzureHeaderGet(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  beginPostDoubleHeadersFinalAzureHeaderGet(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPostDoubleHeadersFinalAzureHeaderGet(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPostDoubleHeadersFinalAzureHeaderGet(): any {
    return msRest.responseToBody(this.beginPostDoubleHeadersFinalAzureHeaderGetWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request with both Location and
   * Azure-Async header. Poll Azure-Async and it's success. Should NOT poll Location to get the final
   * object if you support initial Autorest behavior.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPostDoubleHeadersFinalAzureHeaderGetDefault(): Promise<Models.Product>;
  beginPostDoubleHeadersFinalAzureHeaderGetDefault(options: msRest.RequestOptionsBase): Promise<Models.Product>;
  beginPostDoubleHeadersFinalAzureHeaderGetDefault(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPostDoubleHeadersFinalAzureHeaderGetDefault(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPostDoubleHeadersFinalAzureHeaderGetDefault(): any {
    return msRest.responseToBody(this.beginPostDoubleHeadersFinalAzureHeaderGetDefaultWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPostAsyncRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPostAsyncRetrySucceeded(): Promise<Models.Product>;
  beginPostAsyncRetrySucceeded(options: Models.LROsBeginPostAsyncRetrySucceededOptionalParams): Promise<Models.Product>;
  beginPostAsyncRetrySucceeded(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPostAsyncRetrySucceeded(options: Models.LROsBeginPostAsyncRetrySucceededOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPostAsyncRetrySucceeded(): any {
    return msRest.responseToBody(this.beginPostAsyncRetrySucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPostAsyncNoRetrySucceededOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Product} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPostAsyncNoRetrySucceeded(): Promise<Models.Product>;
  beginPostAsyncNoRetrySucceeded(options: Models.LROsBeginPostAsyncNoRetrySucceededOptionalParams): Promise<Models.Product>;
  beginPostAsyncNoRetrySucceeded(callback: msRest.ServiceCallback<Models.Product>): void;
  beginPostAsyncNoRetrySucceeded(options: Models.LROsBeginPostAsyncNoRetrySucceededOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  beginPostAsyncNoRetrySucceeded(): any {
    return msRest.responseToBody(this.beginPostAsyncNoRetrySucceededWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPostAsyncRetryFailedOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPostAsyncRetryFailed(): Promise<void>;
  beginPostAsyncRetryFailed(options: Models.LROsBeginPostAsyncRetryFailedOptionalParams): Promise<void>;
  beginPostAsyncRetryFailed(callback: msRest.ServiceCallback<void>): void;
  beginPostAsyncRetryFailed(options: Models.LROsBeginPostAsyncRetryFailedOptionalParams, callback: msRest.ServiceCallback<void>): void;
  beginPostAsyncRetryFailed(): any {
    return msRest.responseToBody(this.beginPostAsyncRetryFailedWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Long running post request, service returns a 202 to the initial request, with an entity that
   * contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   *
   * @param {LROsBeginPostAsyncRetrycanceledOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPostAsyncRetrycanceled(): Promise<void>;
  beginPostAsyncRetrycanceled(options: Models.LROsBeginPostAsyncRetrycanceledOptionalParams): Promise<void>;
  beginPostAsyncRetrycanceled(callback: msRest.ServiceCallback<void>): void;
  beginPostAsyncRetrycanceled(options: Models.LROsBeginPostAsyncRetrycanceledOptionalParams, callback: msRest.ServiceCallback<void>): void;
  beginPostAsyncRetrycanceled(): any {
    return msRest.responseToBody(this.beginPostAsyncRetrycanceledWithHttpOperationResponse.bind(this), arguments);
  }

}

// Operation Specifications
const beginPut200SucceededOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/200/succeeded",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPut200SucceededNoStateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/200/succeeded/nostate",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPut202Retry200OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/202/retry/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPut201CreatingSucceeded200OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/201/creating/succeeded/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPut200UpdatingSucceeded204OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/200/updating/succeeded/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPut201CreatingFailed200OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/201/created/failed/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    201: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPut200Acceptedcanceled200OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/200/accepted/canceled/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPutNoHeaderInRetryOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/put/noheader/202/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPutAsyncRetrySucceededOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putasync/retry/succeeded",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPutAsyncNoRetrySucceededOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putasync/noretry/succeeded",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPutAsyncRetryFailedOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putasync/retry/failed",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncRetryFailedHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPutAsyncNoRetrycanceledOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putasync/noretry/canceled",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoRetrycanceledHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPutAsyncNoHeaderInRetryOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putasync/noheader/201/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPutAsyncNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPutNonResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putnonresource/202/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "sku",
    mapper: Mappers.Sku
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.Sku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPutAsyncNonResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putnonresourceasync/202/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "sku",
    mapper: Mappers.Sku
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.Sku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPutSubResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putsubresource/202/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: {
      provisioningState: "provisioningState"
    },
    mapper: Mappers.SubProduct
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.SubProduct
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPutAsyncSubResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "lro/putsubresourceasync/202/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: {
      provisioningState: "provisioningState"
    },
    mapper: Mappers.SubProduct
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.SubProduct
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginDeleteProvisioning202Accepted200SucceededOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/provisioning/202/accepted/200/succeeded",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202Accepted200SucceededHeaders
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202Accepted200SucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginDeleteProvisioning202DeletingFailed200OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/provisioning/202/deleting/200/failed",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202DeletingFailed200Headers
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202DeletingFailed200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginDeleteProvisioning202Deletingcanceled200OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/provisioning/202/deleting/200/canceled",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202Deletingcanceled200Headers
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDeleteProvisioning202Deletingcanceled200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginDelete204SucceededOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/204/succeeded",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginDelete202Retry200OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/202/retry/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDelete202Retry200Headers
    },
    202: {
      headersMapper: Mappers.LROsDelete202Retry200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginDelete202NoRetry204OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/202/noretry/204",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsDelete202NoRetry204Headers
    },
    202: {
      headersMapper: Mappers.LROsDelete202NoRetry204Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginDeleteNoHeaderInRetryOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/delete/noheader",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    204: {
      headersMapper: Mappers.LROsDeleteNoHeaderInRetryHeaders
    },
    202: {
      headersMapper: Mappers.LROsDeleteNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginDeleteAsyncNoHeaderInRetryOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/deleteasync/noheader/202/204",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    204: {
      headersMapper: Mappers.LROsDeleteAsyncNoHeaderInRetryHeaders
    },
    202: {
      headersMapper: Mappers.LROsDeleteAsyncNoHeaderInRetryHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginDeleteAsyncRetrySucceededOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/deleteasync/retry/succeeded",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginDeleteAsyncNoRetrySucceededOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/deleteasync/noretry/succeeded",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncNoRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginDeleteAsyncRetryFailedOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/deleteasync/retry/failed",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncRetryFailedHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginDeleteAsyncRetrycanceledOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "lro/deleteasync/retry/canceled",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    202: {
      headersMapper: Mappers.LROsDeleteAsyncRetrycanceledHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPost200WithPayloadOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/post/payload/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    202: {
      bodyMapper: Mappers.Sku
    },
    200: {
      bodyMapper: Mappers.Sku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPost202Retry200OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/post/202/retry/200",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.LROsPost202Retry200Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPost202NoRetry204OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/post/202/noretry/204",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPost202NoRetry204Headers
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPostDoubleHeadersFinalLocationGetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/LROPostDoubleHeadersFinalLocationGet",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    202: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPostDoubleHeadersFinalAzureHeaderGetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/LROPostDoubleHeadersFinalAzureHeaderGet",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    202: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPostDoubleHeadersFinalAzureHeaderGetDefaultOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/LROPostDoubleHeadersFinalAzureHeaderGetDefault",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    202: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPostAsyncRetrySucceededOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/postasync/retry/succeeded",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.LROsPostAsyncRetrySucceededHeaders
    },
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPostAsyncRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPostAsyncNoRetrySucceededOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/postasync/noretry/succeeded",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.LROsPostAsyncNoRetrySucceededHeaders
    },
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsPostAsyncNoRetrySucceededHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPostAsyncRetryFailedOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/postasync/retry/failed",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.LROsPostAsyncRetryFailedHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginPostAsyncRetrycanceledOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "lro/postasync/retry/canceled",
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "product",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.LROsPostAsyncRetrycanceledHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};
