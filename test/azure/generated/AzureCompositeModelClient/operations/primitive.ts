/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/primitiveMappers";
import * as Parameters from "../models/parameters";
import { AzureCompositeModelContext } from "../azureCompositeModelContext";

/** Class representing a Primitive. */
export class Primitive {
  private readonly client: AzureCompositeModelContext;

  /**
   * Create a Primitive.
   * @param {AzureCompositeModelContext} client Reference to the service client.
   */
  constructor(client: AzureCompositeModelContext) {
    this.client = client;
  }

  /**
   * Get complex types with integer properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getIntWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.IntWrapper>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getIntOperationSpec);
  }

  /**
   * Put complex types with integer properties
   *
   * @param {IntWrapper} complexBody Please put -1 and 2
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putIntWithHttpOperationResponse(complexBody: Models.IntWrapper, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        complexBody,
        options
      },
      putIntOperationSpec);
  }

  /**
   * Get complex types with long properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getLongWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.LongWrapper>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getLongOperationSpec);
  }

  /**
   * Put complex types with long properties
   *
   * @param {LongWrapper} complexBody Please put 1099511627775 and -999511627788
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putLongWithHttpOperationResponse(complexBody: Models.LongWrapper, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        complexBody,
        options
      },
      putLongOperationSpec);
  }

  /**
   * Get complex types with float properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getFloatWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.FloatWrapper>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFloatOperationSpec);
  }

  /**
   * Put complex types with float properties
   *
   * @param {FloatWrapper} complexBody Please put 1.05 and -0.003
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putFloatWithHttpOperationResponse(complexBody: Models.FloatWrapper, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        complexBody,
        options
      },
      putFloatOperationSpec);
  }

  /**
   * Get complex types with double properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDoubleWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.DoubleWrapper>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDoubleOperationSpec);
  }

  /**
   * Put complex types with double properties
   *
   * @param {DoubleWrapper} complexBody Please put 3e-100 and
   * -0.000000000000000000000000000000000000000000000000000000005
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putDoubleWithHttpOperationResponse(complexBody: Models.DoubleWrapper, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        complexBody,
        options
      },
      putDoubleOperationSpec);
  }

  /**
   * Get complex types with bool properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBoolWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.BooleanWrapper>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBoolOperationSpec);
  }

  /**
   * Put complex types with bool properties
   *
   * @param {BooleanWrapper} complexBody Please put true and false
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putBoolWithHttpOperationResponse(complexBody: Models.BooleanWrapper, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        complexBody,
        options
      },
      putBoolOperationSpec);
  }

  /**
   * Get complex types with string properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getStringWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.StringWrapper>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getStringOperationSpec);
  }

  /**
   * Put complex types with string properties
   *
   * @param {StringWrapper} complexBody Please put 'goodrequest', '', and null
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putStringWithHttpOperationResponse(complexBody: Models.StringWrapper, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        complexBody,
        options
      },
      putStringOperationSpec);
  }

  /**
   * Get complex types with date properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDateWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.DateWrapper>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateOperationSpec);
  }

  /**
   * Put complex types with date properties
   *
   * @param {DateWrapper} complexBody Please put '0001-01-01' and '2016-02-29'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putDateWithHttpOperationResponse(complexBody: Models.DateWrapper, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        complexBody,
        options
      },
      putDateOperationSpec);
  }

  /**
   * Get complex types with datetime properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDateTimeWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.DatetimeWrapper>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeOperationSpec);
  }

  /**
   * Put complex types with datetime properties
   *
   * @param {DatetimeWrapper} complexBody Please put '0001-01-01T12:00:00-04:00' and
   * '2015-05-18T11:38:00-08:00'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putDateTimeWithHttpOperationResponse(complexBody: Models.DatetimeWrapper, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        complexBody,
        options
      },
      putDateTimeOperationSpec);
  }

  /**
   * Get complex types with datetimeRfc1123 properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDateTimeRfc1123WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Datetimerfc1123Wrapper>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeRfc1123OperationSpec);
  }

  /**
   * Put complex types with datetimeRfc1123 properties
   *
   * @param {Datetimerfc1123Wrapper} complexBody Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon,
   * 18 May 2015 11:38:00 GMT'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putDateTimeRfc1123WithHttpOperationResponse(complexBody: Models.Datetimerfc1123Wrapper, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        complexBody,
        options
      },
      putDateTimeRfc1123OperationSpec);
  }

  /**
   * Get complex types with duration properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDurationWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.DurationWrapper>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDurationOperationSpec);
  }

  /**
   * Put complex types with duration properties
   *
   * @param {PrimitivePutDurationOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putDurationWithHttpOperationResponse(options?: Models.PrimitivePutDurationOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putDurationOperationSpec);
  }

  /**
   * Get complex types with byte properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getByteWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ByteWrapper>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getByteOperationSpec);
  }

  /**
   * Put complex types with byte properties
   *
   * @param {PrimitivePutByteOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putByteWithHttpOperationResponse(options?: Models.PrimitivePutByteOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putByteOperationSpec);
  }

  /**
   * Get complex types with integer properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.IntWrapper} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.IntWrapper} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getInt(): Promise<Models.IntWrapper>;
  getInt(options: msRest.RequestOptionsBase): Promise<Models.IntWrapper>;
  getInt(callback: msRest.ServiceCallback<Models.IntWrapper>): void;
  getInt(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IntWrapper>): void;
  getInt(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.IntWrapper>): any {
    return msRest.responseToBody(this.getIntWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put complex types with integer properties
   *
   * @param {IntWrapper} complexBody Please put -1 and 2
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putInt(complexBody: Models.IntWrapper): Promise<void>;
  putInt(complexBody: Models.IntWrapper, options: msRest.RequestOptionsBase): Promise<void>;
  putInt(complexBody: Models.IntWrapper, callback: msRest.ServiceCallback<void>): void;
  putInt(complexBody: Models.IntWrapper, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putInt(complexBody: Models.IntWrapper, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putIntWithHttpOperationResponse.bind(this), complexBody, options, callback);
  }

  /**
   * Get complex types with long properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.LongWrapper} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.LongWrapper} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getLong(): Promise<Models.LongWrapper>;
  getLong(options: msRest.RequestOptionsBase): Promise<Models.LongWrapper>;
  getLong(callback: msRest.ServiceCallback<Models.LongWrapper>): void;
  getLong(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LongWrapper>): void;
  getLong(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.LongWrapper>): any {
    return msRest.responseToBody(this.getLongWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put complex types with long properties
   *
   * @param {LongWrapper} complexBody Please put 1099511627775 and -999511627788
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putLong(complexBody: Models.LongWrapper): Promise<void>;
  putLong(complexBody: Models.LongWrapper, options: msRest.RequestOptionsBase): Promise<void>;
  putLong(complexBody: Models.LongWrapper, callback: msRest.ServiceCallback<void>): void;
  putLong(complexBody: Models.LongWrapper, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putLong(complexBody: Models.LongWrapper, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putLongWithHttpOperationResponse.bind(this), complexBody, options, callback);
  }

  /**
   * Get complex types with float properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.FloatWrapper} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.FloatWrapper} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getFloat(): Promise<Models.FloatWrapper>;
  getFloat(options: msRest.RequestOptionsBase): Promise<Models.FloatWrapper>;
  getFloat(callback: msRest.ServiceCallback<Models.FloatWrapper>): void;
  getFloat(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FloatWrapper>): void;
  getFloat(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.FloatWrapper>): any {
    return msRest.responseToBody(this.getFloatWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put complex types with float properties
   *
   * @param {FloatWrapper} complexBody Please put 1.05 and -0.003
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putFloat(complexBody: Models.FloatWrapper): Promise<void>;
  putFloat(complexBody: Models.FloatWrapper, options: msRest.RequestOptionsBase): Promise<void>;
  putFloat(complexBody: Models.FloatWrapper, callback: msRest.ServiceCallback<void>): void;
  putFloat(complexBody: Models.FloatWrapper, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putFloat(complexBody: Models.FloatWrapper, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putFloatWithHttpOperationResponse.bind(this), complexBody, options, callback);
  }

  /**
   * Get complex types with double properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.DoubleWrapper} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.DoubleWrapper} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDouble(): Promise<Models.DoubleWrapper>;
  getDouble(options: msRest.RequestOptionsBase): Promise<Models.DoubleWrapper>;
  getDouble(callback: msRest.ServiceCallback<Models.DoubleWrapper>): void;
  getDouble(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DoubleWrapper>): void;
  getDouble(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DoubleWrapper>): any {
    return msRest.responseToBody(this.getDoubleWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put complex types with double properties
   *
   * @param {DoubleWrapper} complexBody Please put 3e-100 and
   * -0.000000000000000000000000000000000000000000000000000000005
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putDouble(complexBody: Models.DoubleWrapper): Promise<void>;
  putDouble(complexBody: Models.DoubleWrapper, options: msRest.RequestOptionsBase): Promise<void>;
  putDouble(complexBody: Models.DoubleWrapper, callback: msRest.ServiceCallback<void>): void;
  putDouble(complexBody: Models.DoubleWrapper, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putDouble(complexBody: Models.DoubleWrapper, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putDoubleWithHttpOperationResponse.bind(this), complexBody, options, callback);
  }

  /**
   * Get complex types with bool properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.BooleanWrapper} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.BooleanWrapper} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBool(): Promise<Models.BooleanWrapper>;
  getBool(options: msRest.RequestOptionsBase): Promise<Models.BooleanWrapper>;
  getBool(callback: msRest.ServiceCallback<Models.BooleanWrapper>): void;
  getBool(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BooleanWrapper>): void;
  getBool(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BooleanWrapper>): any {
    return msRest.responseToBody(this.getBoolWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put complex types with bool properties
   *
   * @param {BooleanWrapper} complexBody Please put true and false
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putBool(complexBody: Models.BooleanWrapper): Promise<void>;
  putBool(complexBody: Models.BooleanWrapper, options: msRest.RequestOptionsBase): Promise<void>;
  putBool(complexBody: Models.BooleanWrapper, callback: msRest.ServiceCallback<void>): void;
  putBool(complexBody: Models.BooleanWrapper, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putBool(complexBody: Models.BooleanWrapper, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putBoolWithHttpOperationResponse.bind(this), complexBody, options, callback);
  }

  /**
   * Get complex types with string properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.StringWrapper} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.StringWrapper} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getString(): Promise<Models.StringWrapper>;
  getString(options: msRest.RequestOptionsBase): Promise<Models.StringWrapper>;
  getString(callback: msRest.ServiceCallback<Models.StringWrapper>): void;
  getString(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringWrapper>): void;
  getString(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.StringWrapper>): any {
    return msRest.responseToBody(this.getStringWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put complex types with string properties
   *
   * @param {StringWrapper} complexBody Please put 'goodrequest', '', and null
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putString(complexBody: Models.StringWrapper): Promise<void>;
  putString(complexBody: Models.StringWrapper, options: msRest.RequestOptionsBase): Promise<void>;
  putString(complexBody: Models.StringWrapper, callback: msRest.ServiceCallback<void>): void;
  putString(complexBody: Models.StringWrapper, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putString(complexBody: Models.StringWrapper, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putStringWithHttpOperationResponse.bind(this), complexBody, options, callback);
  }

  /**
   * Get complex types with date properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.DateWrapper} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.DateWrapper} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDate(): Promise<Models.DateWrapper>;
  getDate(options: msRest.RequestOptionsBase): Promise<Models.DateWrapper>;
  getDate(callback: msRest.ServiceCallback<Models.DateWrapper>): void;
  getDate(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DateWrapper>): void;
  getDate(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DateWrapper>): any {
    return msRest.responseToBody(this.getDateWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put complex types with date properties
   *
   * @param {DateWrapper} complexBody Please put '0001-01-01' and '2016-02-29'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putDate(complexBody: Models.DateWrapper): Promise<void>;
  putDate(complexBody: Models.DateWrapper, options: msRest.RequestOptionsBase): Promise<void>;
  putDate(complexBody: Models.DateWrapper, callback: msRest.ServiceCallback<void>): void;
  putDate(complexBody: Models.DateWrapper, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putDate(complexBody: Models.DateWrapper, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putDateWithHttpOperationResponse.bind(this), complexBody, options, callback);
  }

  /**
   * Get complex types with datetime properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.DatetimeWrapper} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.DatetimeWrapper} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDateTime(): Promise<Models.DatetimeWrapper>;
  getDateTime(options: msRest.RequestOptionsBase): Promise<Models.DatetimeWrapper>;
  getDateTime(callback: msRest.ServiceCallback<Models.DatetimeWrapper>): void;
  getDateTime(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatetimeWrapper>): void;
  getDateTime(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DatetimeWrapper>): any {
    return msRest.responseToBody(this.getDateTimeWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put complex types with datetime properties
   *
   * @param {DatetimeWrapper} complexBody Please put '0001-01-01T12:00:00-04:00' and
   * '2015-05-18T11:38:00-08:00'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putDateTime(complexBody: Models.DatetimeWrapper): Promise<void>;
  putDateTime(complexBody: Models.DatetimeWrapper, options: msRest.RequestOptionsBase): Promise<void>;
  putDateTime(complexBody: Models.DatetimeWrapper, callback: msRest.ServiceCallback<void>): void;
  putDateTime(complexBody: Models.DatetimeWrapper, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putDateTime(complexBody: Models.DatetimeWrapper, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putDateTimeWithHttpOperationResponse.bind(this), complexBody, options, callback);
  }

  /**
   * Get complex types with datetimeRfc1123 properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Datetimerfc1123Wrapper} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Datetimerfc1123Wrapper} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDateTimeRfc1123(): Promise<Models.Datetimerfc1123Wrapper>;
  getDateTimeRfc1123(options: msRest.RequestOptionsBase): Promise<Models.Datetimerfc1123Wrapper>;
  getDateTimeRfc1123(callback: msRest.ServiceCallback<Models.Datetimerfc1123Wrapper>): void;
  getDateTimeRfc1123(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Datetimerfc1123Wrapper>): void;
  getDateTimeRfc1123(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Datetimerfc1123Wrapper>): any {
    return msRest.responseToBody(this.getDateTimeRfc1123WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put complex types with datetimeRfc1123 properties
   *
   * @param {Datetimerfc1123Wrapper} complexBody Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon,
   * 18 May 2015 11:38:00 GMT'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putDateTimeRfc1123(complexBody: Models.Datetimerfc1123Wrapper): Promise<void>;
  putDateTimeRfc1123(complexBody: Models.Datetimerfc1123Wrapper, options: msRest.RequestOptionsBase): Promise<void>;
  putDateTimeRfc1123(complexBody: Models.Datetimerfc1123Wrapper, callback: msRest.ServiceCallback<void>): void;
  putDateTimeRfc1123(complexBody: Models.Datetimerfc1123Wrapper, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putDateTimeRfc1123(complexBody: Models.Datetimerfc1123Wrapper, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putDateTimeRfc1123WithHttpOperationResponse.bind(this), complexBody, options, callback);
  }

  /**
   * Get complex types with duration properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.DurationWrapper} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.DurationWrapper} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDuration(): Promise<Models.DurationWrapper>;
  getDuration(options: msRest.RequestOptionsBase): Promise<Models.DurationWrapper>;
  getDuration(callback: msRest.ServiceCallback<Models.DurationWrapper>): void;
  getDuration(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DurationWrapper>): void;
  getDuration(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DurationWrapper>): any {
    return msRest.responseToBody(this.getDurationWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put complex types with duration properties
   *
   * @param {PrimitivePutDurationOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putDuration(): Promise<void>;
  putDuration(options: Models.PrimitivePutDurationOptionalParams): Promise<void>;
  putDuration(callback: msRest.ServiceCallback<void>): void;
  putDuration(options: Models.PrimitivePutDurationOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putDuration(options?: Models.PrimitivePutDurationOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putDurationWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get complex types with byte properties
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ByteWrapper} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ByteWrapper} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getByte(): Promise<Models.ByteWrapper>;
  getByte(options: msRest.RequestOptionsBase): Promise<Models.ByteWrapper>;
  getByte(callback: msRest.ServiceCallback<Models.ByteWrapper>): void;
  getByte(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ByteWrapper>): void;
  getByte(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ByteWrapper>): any {
    return msRest.responseToBody(this.getByteWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put complex types with byte properties
   *
   * @param {PrimitivePutByteOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putByte(): Promise<void>;
  putByte(options: Models.PrimitivePutByteOptionalParams): Promise<void>;
  putByte(callback: msRest.ServiceCallback<void>): void;
  putByte(options: Models.PrimitivePutByteOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putByte(options?: Models.PrimitivePutByteOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putByteWithHttpOperationResponse.bind(this), options, callback);
  }

}

// Operation Specifications
const getIntOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/primitive/integer",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putIntOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "complex/primitive/integer",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "complexBody",
    mapper: {
      ...Mappers.IntWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getLongOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/primitive/long",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putLongOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "complex/primitive/long",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "complexBody",
    mapper: {
      ...Mappers.LongWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getFloatOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/primitive/float",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FloatWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putFloatOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "complex/primitive/float",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "complexBody",
    mapper: {
      ...Mappers.FloatWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getDoubleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/primitive/double",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DoubleWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putDoubleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "complex/primitive/double",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "complexBody",
    mapper: {
      ...Mappers.DoubleWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getBoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/primitive/bool",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BooleanWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putBoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "complex/primitive/bool",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "complexBody",
    mapper: {
      ...Mappers.BooleanWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getStringOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/primitive/string",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putStringOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "complex/primitive/string",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "complexBody",
    mapper: {
      ...Mappers.StringWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/primitive/date",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DateWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "complex/primitive/date",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "complexBody",
    mapper: {
      ...Mappers.DateWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getDateTimeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/primitive/datetime",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatetimeWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putDateTimeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "complex/primitive/datetime",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "complexBody",
    mapper: {
      ...Mappers.DatetimeWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getDateTimeRfc1123OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/primitive/datetimerfc1123",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Datetimerfc1123Wrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putDateTimeRfc1123OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "complex/primitive/datetimerfc1123",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "complexBody",
    mapper: {
      ...Mappers.Datetimerfc1123Wrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getDurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/primitive/duration",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DurationWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putDurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "complex/primitive/duration",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      field: [
        "options",
        "field"
      ]
    },
    mapper: {
      ...Mappers.DurationWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getByteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "complex/primitive/byte",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ByteWrapper
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putByteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "complex/primitive/byte",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      field: [
        "options",
        "field"
      ]
    },
    mapper: {
      ...Mappers.ByteWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};
