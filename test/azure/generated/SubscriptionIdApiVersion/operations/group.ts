/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/groupMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftAzureTestUrlContext } from "../microsoftAzureTestUrlContext";

/** Class representing a Group. */
export class Group {
  private readonly client: MicrosoftAzureTestUrlContext;

  /**
   * Create a Group.
   * @param {MicrosoftAzureTestUrlContext} client Reference to the service client.
   */
  constructor(client: MicrosoftAzureTestUrlContext) {
    this.client = client;
  }

  /**
   * Provides a resouce group with name 'testgroup101' and location 'West US'.
   * @param resourceGroupName Resource Group name 'testgroup101'.
   * @param [options] The optional parameters
   * @returns Promise<Models.GroupGetSampleResourceGroupResponse>
   */
  getSampleResourceGroup(resourceGroupName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GroupGetSampleResourceGroupResponse>;
  /**
   * @param resourceGroupName Resource Group name 'testgroup101'.
   * @param callback The callback
   */
  getSampleResourceGroup(resourceGroupName: string, callback: coreHttp.ServiceCallback<Models.SampleResourceGroup>): void;
  /**
   * @param resourceGroupName Resource Group name 'testgroup101'.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSampleResourceGroup(resourceGroupName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SampleResourceGroup>): void;
  getSampleResourceGroup(resourceGroupName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SampleResourceGroup>, callback?: coreHttp.ServiceCallback<Models.SampleResourceGroup>): Promise<Models.GroupGetSampleResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getSampleResourceGroupOperationSpec,
      callback) as Promise<Models.GroupGetSampleResourceGroupResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getSampleResourceGroupOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SampleResourceGroup
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
