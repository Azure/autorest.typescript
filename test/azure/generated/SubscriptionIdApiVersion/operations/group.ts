/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/groupMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftAzureTestUrlContext } from "../microsoftAzureTestUrlContext";

/** Class representing a Group. */
export class Group {
  private readonly client: MicrosoftAzureTestUrlContext;

  /**
   * Create a Group.
   * @param {MicrosoftAzureTestUrlContext} client Reference to the service client.
   */
  constructor(client: MicrosoftAzureTestUrlContext) {
    this.client = client;
  }

  /**
   * Provides a resouce group with name 'testgroup101' and location 'West US'.
   *
   * @param {string} resourceGroupName Resource Group name 'testgroup101'.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSampleResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.SampleResourceGroup>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getSampleResourceGroupOperationSpec);
  }

  /**
   * Provides a resouce group with name 'testgroup101' and location 'West US'.
   *
   * @param {string} resourceGroupName Resource Group name 'testgroup101'.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SampleResourceGroup} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.SampleResourceGroup} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSampleResourceGroup(resourceGroupName: string): Promise<Models.SampleResourceGroup>;
  getSampleResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase): Promise<Models.SampleResourceGroup>;
  getSampleResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.SampleResourceGroup>): void;
  getSampleResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SampleResourceGroup>): void;
  getSampleResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SampleResourceGroup>): any {
    return msRest.responseToBody(this.getSampleResourceGroupWithHttpOperationResponse.bind(this), resourceGroupName, options, callback);
  }

}

// Operation Specifications
const getSampleResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SampleResourceGroup
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};
