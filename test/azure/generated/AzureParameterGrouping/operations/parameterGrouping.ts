/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/parameterGroupingMappers";
import { AutoRestParameterGroupingTestServiceContext } from "../autoRestParameterGroupingTestServiceContext";

/** Class representing a ParameterGrouping. */
export class ParameterGrouping {
  private readonly client: AutoRestParameterGroupingTestServiceContext;

  /**
   * Create a ParameterGrouping.
   * @param {AutoRestParameterGroupingTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestParameterGroupingTestServiceContext) {
    this.client = client;
  }

  /**
   * Post a bunch of required parameters grouped
   *
   * @param {ParameterGroupingPostRequiredParameters} parameterGroupingPostRequiredParameters
   * Additional parameters for the operation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postRequiredWithHttpOperationResponse(parameterGroupingPostRequiredParameters: Models.ParameterGroupingPostRequiredParameters, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            parameterGroupingPostRequiredParameters
          },
          options),
        postRequiredOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Post a bunch of optional parameters grouped
   *
   * @param {ParameterGroupingPostOptionalOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postOptionalWithHttpOperationResponse(options?: Models.ParameterGroupingPostOptionalOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let parameterGroupingPostOptionalParameters = (options && options.parameterGroupingPostOptionalParameters !== undefined) ? options.parameterGroupingPostOptionalParameters : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            parameterGroupingPostOptionalParameters
          },
          options),
        postOptionalOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Post parameters from multiple different parameter groups
   *
   * @param {ParameterGroupingPostMultiParamGroupsOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postMultiParamGroupsWithHttpOperationResponse(options?: Models.ParameterGroupingPostMultiParamGroupsOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let firstParameterGroup = (options && options.firstParameterGroup !== undefined) ? options.firstParameterGroup : undefined;
    let parameterGroupingPostMultiParamGroupsSecondParamGroup = (options && options.parameterGroupingPostMultiParamGroupsSecondParamGroup !== undefined) ? options.parameterGroupingPostMultiParamGroupsSecondParamGroup : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            firstParameterGroup,
            parameterGroupingPostMultiParamGroupsSecondParamGroup
          },
          options),
        postMultiParamGroupsOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Post parameters with a shared parameter group object
   *
   * @param {ParameterGroupingPostSharedParameterGroupObjectOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postSharedParameterGroupObjectWithHttpOperationResponse(options?: Models.ParameterGroupingPostSharedParameterGroupObjectOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let firstParameterGroup = (options && options.firstParameterGroup !== undefined) ? options.firstParameterGroup : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            firstParameterGroup
          },
          options),
        postSharedParameterGroupObjectOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Post a bunch of required parameters grouped
   *
   * @param {ParameterGroupingPostRequiredParameters} parameterGroupingPostRequiredParameters
   * Additional parameters for the operation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postRequired(parameterGroupingPostRequiredParameters: Models.ParameterGroupingPostRequiredParameters): Promise<void>;
  postRequired(parameterGroupingPostRequiredParameters: Models.ParameterGroupingPostRequiredParameters, options: msRest.RequestOptionsBase): Promise<void>;
  postRequired(parameterGroupingPostRequiredParameters: Models.ParameterGroupingPostRequiredParameters, callback: msRest.ServiceCallback<void>): void;
  postRequired(parameterGroupingPostRequiredParameters: Models.ParameterGroupingPostRequiredParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postRequired(): any {
    return msRest.responseToBody(this.postRequiredWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Post a bunch of optional parameters grouped
   *
   * @param {ParameterGroupingPostOptionalOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postOptional(): Promise<void>;
  postOptional(options: Models.ParameterGroupingPostOptionalOptionalParams): Promise<void>;
  postOptional(callback: msRest.ServiceCallback<void>): void;
  postOptional(options: Models.ParameterGroupingPostOptionalOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postOptional(): any {
    return msRest.responseToBody(this.postOptionalWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Post parameters from multiple different parameter groups
   *
   * @param {ParameterGroupingPostMultiParamGroupsOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postMultiParamGroups(): Promise<void>;
  postMultiParamGroups(options: Models.ParameterGroupingPostMultiParamGroupsOptionalParams): Promise<void>;
  postMultiParamGroups(callback: msRest.ServiceCallback<void>): void;
  postMultiParamGroups(options: Models.ParameterGroupingPostMultiParamGroupsOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postMultiParamGroups(): any {
    return msRest.responseToBody(this.postMultiParamGroupsWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Post parameters with a shared parameter group object
   *
   * @param {ParameterGroupingPostSharedParameterGroupObjectOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postSharedParameterGroupObject(): Promise<void>;
  postSharedParameterGroupObject(options: Models.ParameterGroupingPostSharedParameterGroupObjectOptionalParams): Promise<void>;
  postSharedParameterGroupObject(callback: msRest.ServiceCallback<void>): void;
  postSharedParameterGroupObject(options: Models.ParameterGroupingPostSharedParameterGroupObjectOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postSharedParameterGroupObject(): any {
    return msRest.responseToBody(this.postSharedParameterGroupObjectWithHttpOperationResponse.bind(this), arguments);
  }

}

// Operation Specifications
const postRequiredOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "parameterGrouping/postRequired/{path}",
  urlParameters: [
    {
      parameterPath: [
        "parameterGroupingPostRequiredParameters",
        "path"
      ],
      mapper: {
        required: true,
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: [
        "parameterGroupingPostRequiredParameters",
        "query"
      ],
      mapper: {
        serializedName: "query",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "parameterGroupingPostRequiredParameters",
        "customHeader"
      ],
      mapper: {
        serializedName: "customHeader",
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: [
      "parameterGroupingPostRequiredParameters",
      "body"
    ],
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Number"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postOptionalOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "parameterGrouping/postOptional",
  queryParameters: [
    {
      parameterPath: [
        "parameterGroupingPostOptionalParameters",
        "query"
      ],
      mapper: {
        serializedName: "query",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "parameterGroupingPostOptionalParameters",
        "customHeader"
      ],
      mapper: {
        serializedName: "customHeader",
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postMultiParamGroupsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "parameterGrouping/postMultipleParameterGroups",
  queryParameters: [
    {
      parameterPath: [
        "firstParameterGroup",
        "queryOne"
      ],
      mapper: {
        serializedName: "query-one",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      }
    },
    {
      parameterPath: [
        "parameterGroupingPostMultiParamGroupsSecondParamGroup",
        "queryTwo"
      ],
      mapper: {
        serializedName: "query-two",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "firstParameterGroup",
        "headerOne"
      ],
      mapper: {
        serializedName: "header-one",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "parameterGroupingPostMultiParamGroupsSecondParamGroup",
        "headerTwo"
      ],
      mapper: {
        serializedName: "header-two",
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postSharedParameterGroupObjectOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "parameterGrouping/sharedParameterGroupObject",
  queryParameters: [
    {
      parameterPath: [
        "firstParameterGroup",
        "queryOne"
      ],
      mapper: {
        serializedName: "query-one",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: [
        "firstParameterGroup",
        "headerOne"
      ],
      mapper: {
        serializedName: "header-one",
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};
