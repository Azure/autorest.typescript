/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/storageAccountsMappers";
import { StorageManagementClientContext } from "../storageManagementClientContext";

/** Class representing a StorageAccounts. */
export class StorageAccounts {
  private readonly client: StorageManagementClientContext;

  /**
   * Create a StorageAccounts.
   * @param {StorageManagementClientContext} client Reference to the service client.
   */
  constructor(client: StorageManagementClientContext) {
    this.client = client;
  }

  /**
   * Checks that account name is valid and is not in use.
   *
   * @param {StorageAccountCheckNameAvailabilityParameters} accountName The name of the storage
   * account within the specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async checkNameAvailabilityWithHttpOperationResponse(accountName: Models.StorageAccountCheckNameAvailabilityParameters, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.CheckNameAvailabilityResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            accountName
          },
          options),
        checkNameAvailabilityOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Asynchronously creates a new storage account with the specified parameters. Existing accounts
   * cannot be updated with this API and should instead use the Update Storage Account API. If an
   * account is already created and subsequent PUT request is issued with exact same set of
   * properties, then HTTP 200 would be returned.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account within the specified resource group.
   * Storage account names must be between 3 and 24 characters in length and use numbers and
   * lower-case letters only.
   *
   * @param {StorageAccountCreateParameters} parameters The parameters to provide for the created
   * account.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async createWithHttpOperationResponse(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountCreateParameters, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: msRest.HttpOperationResponse;
    try {
      initialResult = await this.beginCreateWithHttpOperationResponse(resourceGroupName, accountName, parameters, options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      if (parsedResponse != undefined) {
        try {
          const serializer = new msRest.Serializer(Mappers);
          operationRes.parsedBody = serializer.deserialize(Mappers.StorageAccount, parsedResponse, "operationRes.parsedBody")
        } catch (error) {
          const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Deletes a storage account in Microsoft Azure.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account within the specified resource group.
   * Storage account names must be between 3 and 24 characters in length and use numbers and
   * lower-case letters only.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async deleteMethodWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            resourceGroupName,
            accountName
          },
          options),
        deleteMethodOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Returns the properties for the specified storage account including but not limited to name,
   * account type, location, and account status. The ListKeys operation should be used to retrieve
   * storage keys.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account within the specified resource group.
   * Storage account names must be between 3 and 24 characters in length and use numbers and
   * lower-case letters only.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getPropertiesWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.StorageAccount>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            resourceGroupName,
            accountName
          },
          options),
        getPropertiesOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Updates the account type or tags for a storage account. It can also be used to add a custom
   * domain (note that custom domains cannot be added via the Create operation). Only one custom
   * domain is supported per storage account. This API can only be used to update one of tags,
   * accountType, or customDomain per call. To update multiple of these properties, call the API
   * multiple times with one change per call. This call does not change the storage keys for the
   * account. If you want to change storage account keys, use the RegenerateKey operation. The
   * location and name of the storage account cannot be changed after creation.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account within the specified resource group.
   * Storage account names must be between 3 and 24 characters in length and use numbers and
   * lower-case letters only.
   *
   * @param {StorageAccountUpdateParameters} parameters The parameters to update on the account. Note
   * that only one property can be changed at a time using this API.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async updateWithHttpOperationResponse(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.StorageAccount>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            resourceGroupName,
            accountName,
            parameters
          },
          options),
        updateOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Lists the access keys for the specified storage account.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async listKeysWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.StorageAccountKeys>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            resourceGroupName,
            accountName
          },
          options),
        listKeysOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Lists all the storage accounts available under the subscription. Note that storage keys are not
   * returned; use the ListKeys operation for this.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async listWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.StorageAccountListResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), listOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Lists all the storage accounts available under the given resource group. Note that storage keys
   * are not returned; use the ListKeys operation for this.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.StorageAccountListResult>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            resourceGroupName
          },
          options),
        listByResourceGroupOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Regenerates the access keys for the specified storage account.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account within the specified resource group.
   * Storage account names must be between 3 and 24 characters in length and use numbers and
   * lower-case letters only.
   *
   * @param {StorageAccountsRegenerateKeyOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async regenerateKeyWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: Models.StorageAccountsRegenerateKeyOptionalParams): Promise<msRest.HttpOperationResponse<Models.StorageAccountKeys>> {
    let keyName = (options && options.keyName !== undefined) ? options.keyName : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            resourceGroupName,
            accountName,
            keyName
          },
          options),
        regenerateKeyOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Asynchronously creates a new storage account with the specified parameters. Existing accounts
   * cannot be updated with this API and should instead use the Update Storage Account API. If an
   * account is already created and subsequent PUT request is issued with exact same set of
   * properties, then HTTP 200 would be returned.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account within the specified resource group.
   * Storage account names must be between 3 and 24 characters in length and use numbers and
   * lower-case letters only.
   *
   * @param {StorageAccountCreateParameters} parameters The parameters to provide for the created
   * account.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async beginCreateWithHttpOperationResponse(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountCreateParameters, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.StorageAccount>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            resourceGroupName,
            accountName,
            parameters
          },
          options),
        beginCreateOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Checks that account name is valid and is not in use.
   *
   * @param {StorageAccountCheckNameAvailabilityParameters} accountName The name of the storage
   * account within the specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.CheckNameAvailabilityResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.CheckNameAvailabilityResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  checkNameAvailability(accountName: Models.StorageAccountCheckNameAvailabilityParameters): Promise<Models.CheckNameAvailabilityResult>;
  checkNameAvailability(accountName: Models.StorageAccountCheckNameAvailabilityParameters, options: msRest.RequestOptionsBase): Promise<Models.CheckNameAvailabilityResult>;
  checkNameAvailability(accountName: Models.StorageAccountCheckNameAvailabilityParameters, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
  checkNameAvailability(accountName: Models.StorageAccountCheckNameAvailabilityParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
  checkNameAvailability(): any {
    return msRest.responseToBody(this.checkNameAvailabilityWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Asynchronously creates a new storage account with the specified parameters. Existing accounts
   * cannot be updated with this API and should instead use the Update Storage Account API. If an
   * account is already created and subsequent PUT request is issued with exact same set of
   * properties, then HTTP 200 would be returned.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account within the specified resource group.
   * Storage account names must be between 3 and 24 characters in length and use numbers and
   * lower-case letters only.
   *
   * @param {StorageAccountCreateParameters} parameters The parameters to provide for the created
   * account.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.StorageAccount} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.StorageAccount} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  create(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountCreateParameters): Promise<Models.StorageAccount>;
  create(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountCreateParameters, options: msRest.RequestOptionsBase): Promise<Models.StorageAccount>;
  create(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountCreateParameters, callback: msRest.ServiceCallback<Models.StorageAccount>): void;
  create(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountCreateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageAccount>): void;
  create(): any {
    return msRest.responseToBody(this.createWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Deletes a storage account in Microsoft Azure.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account within the specified resource group.
   * Storage account names must be between 3 and 24 characters in length and use numbers and
   * lower-case letters only.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName: string, accountName: string): Promise<void>;
  deleteMethod(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase): Promise<void>;
  deleteMethod(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(): any {
    return msRest.responseToBody(this.deleteMethodWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Returns the properties for the specified storage account including but not limited to name,
   * account type, location, and account status. The ListKeys operation should be used to retrieve
   * storage keys.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account within the specified resource group.
   * Storage account names must be between 3 and 24 characters in length and use numbers and
   * lower-case letters only.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.StorageAccount} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.StorageAccount} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getProperties(resourceGroupName: string, accountName: string): Promise<Models.StorageAccount>;
  getProperties(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase): Promise<Models.StorageAccount>;
  getProperties(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.StorageAccount>): void;
  getProperties(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageAccount>): void;
  getProperties(): any {
    return msRest.responseToBody(this.getPropertiesWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Updates the account type or tags for a storage account. It can also be used to add a custom
   * domain (note that custom domains cannot be added via the Create operation). Only one custom
   * domain is supported per storage account. This API can only be used to update one of tags,
   * accountType, or customDomain per call. To update multiple of these properties, call the API
   * multiple times with one change per call. This call does not change the storage keys for the
   * account. If you want to change storage account keys, use the RegenerateKey operation. The
   * location and name of the storage account cannot be changed after creation.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account within the specified resource group.
   * Storage account names must be between 3 and 24 characters in length and use numbers and
   * lower-case letters only.
   *
   * @param {StorageAccountUpdateParameters} parameters The parameters to update on the account. Note
   * that only one property can be changed at a time using this API.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.StorageAccount} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.StorageAccount} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  update(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountUpdateParameters): Promise<Models.StorageAccount>;
  update(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountUpdateParameters, options: msRest.RequestOptionsBase): Promise<Models.StorageAccount>;
  update(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountUpdateParameters, callback: msRest.ServiceCallback<Models.StorageAccount>): void;
  update(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageAccount>): void;
  update(): any {
    return msRest.responseToBody(this.updateWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Lists the access keys for the specified storage account.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.StorageAccountKeys} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.StorageAccountKeys} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listKeys(resourceGroupName: string, accountName: string): Promise<Models.StorageAccountKeys>;
  listKeys(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase): Promise<Models.StorageAccountKeys>;
  listKeys(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.StorageAccountKeys>): void;
  listKeys(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageAccountKeys>): void;
  listKeys(): any {
    return msRest.responseToBody(this.listKeysWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Lists all the storage accounts available under the subscription. Note that storage keys are not
   * returned; use the ListKeys operation for this.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.StorageAccountListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.StorageAccountListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  list(): Promise<Models.StorageAccountListResult>;
  list(options: msRest.RequestOptionsBase): Promise<Models.StorageAccountListResult>;
  list(callback: msRest.ServiceCallback<Models.StorageAccountListResult>): void;
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageAccountListResult>): void;
  list(): any {
    return msRest.responseToBody(this.listWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Lists all the storage accounts available under the given resource group. Note that storage keys
   * are not returned; use the ListKeys operation for this.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.StorageAccountListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.StorageAccountListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroup(resourceGroupName: string): Promise<Models.StorageAccountListResult>;
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase): Promise<Models.StorageAccountListResult>;
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.StorageAccountListResult>): void;
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageAccountListResult>): void;
  listByResourceGroup(): any {
    return msRest.responseToBody(this.listByResourceGroupWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Regenerates the access keys for the specified storage account.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account within the specified resource group.
   * Storage account names must be between 3 and 24 characters in length and use numbers and
   * lower-case letters only.
   *
   * @param {StorageAccountsRegenerateKeyOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.StorageAccountKeys} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.StorageAccountKeys} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  regenerateKey(resourceGroupName: string, accountName: string): Promise<Models.StorageAccountKeys>;
  regenerateKey(resourceGroupName: string, accountName: string, options: Models.StorageAccountsRegenerateKeyOptionalParams): Promise<Models.StorageAccountKeys>;
  regenerateKey(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.StorageAccountKeys>): void;
  regenerateKey(resourceGroupName: string, accountName: string, options: Models.StorageAccountsRegenerateKeyOptionalParams, callback: msRest.ServiceCallback<Models.StorageAccountKeys>): void;
  regenerateKey(): any {
    return msRest.responseToBody(this.regenerateKeyWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Asynchronously creates a new storage account with the specified parameters. Existing accounts
   * cannot be updated with this API and should instead use the Update Storage Account API. If an
   * account is already created and subsequent PUT request is issued with exact same set of
   * properties, then HTTP 200 would be returned.
   *
   * @param {string} resourceGroupName The name of the resource group within the user’s subscription.
   *
   * @param {string} accountName The name of the storage account within the specified resource group.
   * Storage account names must be between 3 and 24 characters in length and use numbers and
   * lower-case letters only.
   *
   * @param {StorageAccountCreateParameters} parameters The parameters to provide for the created
   * account.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.StorageAccount} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.StorageAccount} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreate(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountCreateParameters): Promise<Models.StorageAccount>;
  beginCreate(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountCreateParameters, options: msRest.RequestOptionsBase): Promise<Models.StorageAccount>;
  beginCreate(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountCreateParameters, callback: msRest.ServiceCallback<Models.StorageAccount>): void;
  beginCreate(resourceGroupName: string, accountName: string, parameters: Models.StorageAccountCreateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageAccount>): void;
  beginCreate(): any {
    return msRest.responseToBody(this.beginCreateWithHttpOperationResponse.bind(this), arguments);
  }

}

// Operation Specifications
const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability",
  urlParameters: [
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "apiVersion",
      mapper: {
        required: true,
        serializedName: "api-version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "accountName",
    mapper: {
      ...Mappers.StorageAccountCheckNameAvailabilityParameters,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
  urlParameters: [
    {
      parameterPath: "resourceGroupName",
      mapper: {
        required: true,
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "accountName",
      mapper: {
        required: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "apiVersion",
      mapper: {
        required: true,
        serializedName: "api-version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getPropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
  urlParameters: [
    {
      parameterPath: "resourceGroupName",
      mapper: {
        required: true,
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "accountName",
      mapper: {
        required: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "apiVersion",
      mapper: {
        required: true,
        serializedName: "api-version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccount
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
  urlParameters: [
    {
      parameterPath: "resourceGroupName",
      mapper: {
        required: true,
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "accountName",
      mapper: {
        required: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "apiVersion",
      mapper: {
        required: true,
        serializedName: "api-version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.StorageAccountUpdateParameters,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccount
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys",
  urlParameters: [
    {
      parameterPath: "resourceGroupName",
      mapper: {
        required: true,
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "accountName",
      mapper: {
        required: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "apiVersion",
      mapper: {
        required: true,
        serializedName: "api-version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccountKeys
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts",
  urlParameters: [
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "apiVersion",
      mapper: {
        required: true,
        serializedName: "api-version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccountListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts",
  urlParameters: [
    {
      parameterPath: "resourceGroupName",
      mapper: {
        required: true,
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "apiVersion",
      mapper: {
        required: true,
        serializedName: "api-version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccountListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const regenerateKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey",
  urlParameters: [
    {
      parameterPath: "resourceGroupName",
      mapper: {
        required: true,
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "accountName",
      mapper: {
        required: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "apiVersion",
      mapper: {
        required: true,
        serializedName: "api-version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: {
      keyName: "keyName"
    },
    mapper: {
      ...Mappers.StorageAccountRegenerateKeyParameters,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccountKeys
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
  urlParameters: [
    {
      parameterPath: "resourceGroupName",
      mapper: {
        required: true,
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "accountName",
      mapper: {
        required: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      }
    },
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "apiVersion",
      mapper: {
        required: true,
        serializedName: "api-version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.StorageAccountCreateParameters,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccount
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};
