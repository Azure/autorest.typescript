/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { compositeSpec, CompositeTypeSpec, dictionarySpec, numberSpec, sequenceSpec, stringSpec } from "ms-rest-js";

export const ErrorModel: CompositeTypeSpec = compositeSpec({
  typeName: "ErrorModel",
  propertySpecs: {
    status: {
      valueSpec: numberSpec
    },
    message: {
      valueSpec: stringSpec
    }
  }
});

/**
 * Some resource
 */
export const Resource: CompositeTypeSpec = compositeSpec({
  typeName: "Resource",
  propertySpecs: {
    /**
     * Resource Id
     */
    id: {
      valueSpec: stringSpec
    },
    /**
     * Resource Type
     */
    type: {
      valueSpec: stringSpec
    },
    tags: {
      valueSpec: dictionarySpec(stringSpec)
    },
    /**
     * Resource Location
     */
    location: {
      valueSpec: stringSpec
    },
    /**
     * Resource Name
     */
    name: {
      valueSpec: stringSpec
    }
  }
});

export const FlattenedProduct: CompositeTypeSpec = compositeSpec({
  typeName: "FlattenedProduct",
  propertySpecs: {
    /**
     * Resource Id
     */
    id: {
      valueSpec: stringSpec
    },
    /**
     * Resource Type
     */
    type: {
      valueSpec: stringSpec
    },
    tags: {
      valueSpec: dictionarySpec(stringSpec)
    },
    /**
     * Resource Location
     */
    location: {
      valueSpec: stringSpec
    },
    /**
     * Resource Name
     */
    name: {
      valueSpec: stringSpec
    },
    pname: {
      serializedName: "properties.pname",
      valueSpec: stringSpec
    },
    lsize: {
      serializedName: "properties.lsize",
      valueSpec: numberSpec
    },
    provisioningState: {
      serializedName: "properties.provisioningState",
      valueSpec: stringSpec
    }
  }
});

export const ResourceCollection: CompositeTypeSpec = compositeSpec({
  typeName: "ResourceCollection",
  propertySpecs: {
    productresource: {
      valueSpec: FlattenedProduct
    },
    arrayofresources: {
      valueSpec: sequenceSpec(FlattenedProduct)
    },
    dictionaryofresources: {
      valueSpec: dictionarySpec(FlattenedProduct)
    }
  }
});

/**
 * Optional Parameters.
 */
export const AutoRestResourceFlatteningTestServicePutArrayOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "AutoRestResourceFlatteningTestServicePutArrayOptionalParams",
  propertySpecs: {
    /**
     * External Resource as an Array to put
     */
    resourceArray: {
      serializedName: "ResourceArray",
      valueSpec: sequenceSpec(Resource)
    }
  }
});

/**
 * Optional Parameters.
 */
export const AutoRestResourceFlatteningTestServicePutDictionaryOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "AutoRestResourceFlatteningTestServicePutDictionaryOptionalParams",
  propertySpecs: {
    /**
     * External Resource as a Dictionary to put
     */
    resourceDictionary: {
      serializedName: "ResourceDictionary",
      valueSpec: dictionarySpec(FlattenedProduct)
    }
  }
});

/**
 * Optional Parameters.
 */
export const AutoRestResourceFlatteningTestServicePutResourceCollectionOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "AutoRestResourceFlatteningTestServicePutResourceCollectionOptionalParams",
  propertySpecs: {
    /**
     * External Resource as a ResourceCollection to put
     */
    resourceComplexObject: {
      serializedName: "ResourceComplexObject",
      valueSpec: ResourceCollection
    }
  }
});
