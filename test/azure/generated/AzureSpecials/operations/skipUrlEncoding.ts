/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/skipUrlEncodingMappers";
import * as Parameters from "../models/parameters";
import { AutoRestAzureSpecialParametersTestClientContext } from "../autoRestAzureSpecialParametersTestClientContext";

/** Class representing a SkipUrlEncoding. */
export class SkipUrlEncoding {
  private readonly client: AutoRestAzureSpecialParametersTestClientContext;

  /**
   * Create a SkipUrlEncoding.
   * @param {AutoRestAzureSpecialParametersTestClientContext} client Reference to the service client.
   */
  constructor(client: AutoRestAzureSpecialParametersTestClientContext) {
    this.client = client;
  }

  /**
   * Get method with unencoded path parameter with value 'path1/path2/path3'
   * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getMethodPathValid(unencodedPathParam: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
   * @param callback The callback
   */
  getMethodPathValid(unencodedPathParam: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
   * @param options The optional parameters
   * @param callback The callback
   */
  getMethodPathValid(unencodedPathParam: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getMethodPathValid(unencodedPathParam: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        unencodedPathParam,
        options
      },
      getMethodPathValidOperationSpec,
      callback);
  }

  /**
   * Get method with unencoded path parameter with value 'path1/path2/path3'
   * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getPathPathValid(unencodedPathParam: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
   * @param callback The callback
   */
  getPathPathValid(unencodedPathParam: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
   * @param options The optional parameters
   * @param callback The callback
   */
  getPathPathValid(unencodedPathParam: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getPathPathValid(unencodedPathParam: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        unencodedPathParam,
        options
      },
      getPathPathValidOperationSpec,
      callback);
  }

  /**
   * Get method with unencoded path parameter with value 'path1/path2/path3'
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getSwaggerPathValid(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  getSwaggerPathValid(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSwaggerPathValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getSwaggerPathValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSwaggerPathValidOperationSpec,
      callback);
  }

  /**
   * Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
   * @param q1 Unencoded query parameter with value 'value1&q2=value2&q3=value3'
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getMethodQueryValid(q1: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param q1 Unencoded query parameter with value 'value1&q2=value2&q3=value3'
   * @param callback The callback
   */
  getMethodQueryValid(q1: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param q1 Unencoded query parameter with value 'value1&q2=value2&q3=value3'
   * @param options The optional parameters
   * @param callback The callback
   */
  getMethodQueryValid(q1: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getMethodQueryValid(q1: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        q1,
        options
      },
      getMethodQueryValidOperationSpec,
      callback);
  }

  /**
   * Get method with unencoded query parameter with value null
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getMethodQueryNull(options?: Models.SkipUrlEncodingGetMethodQueryNullOptionalParams): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  getMethodQueryNull(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getMethodQueryNull(options: Models.SkipUrlEncodingGetMethodQueryNullOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  getMethodQueryNull(options?: Models.SkipUrlEncodingGetMethodQueryNullOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMethodQueryNullOperationSpec,
      callback);
  }

  /**
   * Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
   * @param q1 Unencoded query parameter with value 'value1&q2=value2&q3=value3'
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getPathQueryValid(q1: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param q1 Unencoded query parameter with value 'value1&q2=value2&q3=value3'
   * @param callback The callback
   */
  getPathQueryValid(q1: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param q1 Unencoded query parameter with value 'value1&q2=value2&q3=value3'
   * @param options The optional parameters
   * @param callback The callback
   */
  getPathQueryValid(q1: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getPathQueryValid(q1: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        q1,
        options
      },
      getPathQueryValidOperationSpec,
      callback);
  }

  /**
   * Get method with unencoded query parameter with value 'value1&q2=value2&q3=value3'
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getSwaggerQueryValid(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  getSwaggerQueryValid(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSwaggerQueryValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getSwaggerQueryValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSwaggerQueryValidOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getMethodPathValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "azurespecials/skipUrlEncoding/method/path/valid/{unencodedPathParam}",
  urlParameters: [
    Parameters.unencodedPathParam0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getPathPathValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "azurespecials/skipUrlEncoding/path/path/valid/{unencodedPathParam}",
  urlParameters: [
    Parameters.unencodedPathParam0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getSwaggerPathValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "azurespecials/skipUrlEncoding/swagger/path/valid/{unencodedPathParam}",
  urlParameters: [
    Parameters.unencodedPathParam1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getMethodQueryValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "azurespecials/skipUrlEncoding/method/query/valid",
  queryParameters: [
    Parameters.q10
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getMethodQueryNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "azurespecials/skipUrlEncoding/method/query/null",
  queryParameters: [
    Parameters.q11
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getPathQueryValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "azurespecials/skipUrlEncoding/path/query/valid",
  queryParameters: [
    Parameters.q10
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getSwaggerQueryValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "azurespecials/skipUrlEncoding/swagger/query/valid",
  queryParameters: [
    Parameters.q12
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
