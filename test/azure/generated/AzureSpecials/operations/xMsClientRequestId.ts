/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Mappers from "../models/xMsClientRequestIdMappers";
import * as Parameters from "../models/parameters";
import { AutoRestAzureSpecialParametersTestClientContext } from "../autoRestAzureSpecialParametersTestClientContext";

/** Class representing a XMsClientRequestId. */
export class XMsClientRequestId {
  private readonly client: AutoRestAzureSpecialParametersTestClientContext;

  /**
   * Create a XMsClientRequestId.
   * @param {AutoRestAzureSpecialParametersTestClientContext} client Reference to the service client.
   */
  constructor(client: AutoRestAzureSpecialParametersTestClientContext) {
    this.client = client;
  }

  /**
   * Get method that overwrites x-ms-client-request header with value
   * 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get(): Promise<msRest.RestResponse>;
  get(options: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  get(callback: msRest.ServiceCallback<void>): void;
  get(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  get(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOperationSpec,
      callback);
  }

  /**
   * Get method that overwrites x-ms-client-request header with value
   * 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {string} xMsClientRequestId This should appear as a method parameter, use value
   * '9C4D50EE-2D56-4CD3-8152-34347DC9F2B0'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramGet(xMsClientRequestId: string): Promise<msRest.RestResponse>;
  paramGet(xMsClientRequestId: string, options: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  paramGet(xMsClientRequestId: string, callback: msRest.ServiceCallback<void>): void;
  paramGet(xMsClientRequestId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramGet(xMsClientRequestId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        xMsClientRequestId,
        options
      },
      paramGetOperationSpec,
      callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "azurespecials/overwrite/x-ms-client-request-id/method/",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const paramGetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "azurespecials/overwrite/x-ms-client-request-id/via-param/method/",
  headerParameters: [
    Parameters.xMsClientRequestId,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
