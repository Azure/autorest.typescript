/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Mappers from "../models/subscriptionInCredentialsMappers";
import { AutoRestAzureSpecialParametersTestClientContext } from "../autoRestAzureSpecialParametersTestClientContext";

/** Class representing a SubscriptionInCredentials. */
export class SubscriptionInCredentials {
  private readonly client: AutoRestAzureSpecialParametersTestClientContext;

  /**
   * Create a SubscriptionInCredentials.
   * @param {AutoRestAzureSpecialParametersTestClientContext} client Reference to the service client.
   */
  constructor(client: AutoRestAzureSpecialParametersTestClientContext) {
    this.client = client;
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * '1234-5678-9012-3456' to succeed
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postMethodGlobalValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), postMethodGlobalValidOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * null, and client-side validation should prevent you from making this call
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postMethodGlobalNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), postMethodGlobalNullOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * '1234-5678-9012-3456' to succeed
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postMethodGlobalNotProvidedValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), postMethodGlobalNotProvidedValidOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * '1234-5678-9012-3456' to succeed
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postPathGlobalValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), postPathGlobalValidOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * '1234-5678-9012-3456' to succeed
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postSwaggerGlobalValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), postSwaggerGlobalValidOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * '1234-5678-9012-3456' to succeed
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postMethodGlobalValid(): Promise<void>;
  postMethodGlobalValid(options: msRest.RequestOptionsBase): Promise<void>;
  postMethodGlobalValid(callback: msRest.ServiceCallback<void>): void;
  postMethodGlobalValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postMethodGlobalValid(): any {
    return msRest.responseToBody(this.postMethodGlobalValidWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * null, and client-side validation should prevent you from making this call
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postMethodGlobalNull(): Promise<void>;
  postMethodGlobalNull(options: msRest.RequestOptionsBase): Promise<void>;
  postMethodGlobalNull(callback: msRest.ServiceCallback<void>): void;
  postMethodGlobalNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postMethodGlobalNull(): any {
    return msRest.responseToBody(this.postMethodGlobalNullWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * '1234-5678-9012-3456' to succeed
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postMethodGlobalNotProvidedValid(): Promise<void>;
  postMethodGlobalNotProvidedValid(options: msRest.RequestOptionsBase): Promise<void>;
  postMethodGlobalNotProvidedValid(callback: msRest.ServiceCallback<void>): void;
  postMethodGlobalNotProvidedValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postMethodGlobalNotProvidedValid(): any {
    return msRest.responseToBody(this.postMethodGlobalNotProvidedValidWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * '1234-5678-9012-3456' to succeed
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postPathGlobalValid(): Promise<void>;
  postPathGlobalValid(options: msRest.RequestOptionsBase): Promise<void>;
  postPathGlobalValid(callback: msRest.ServiceCallback<void>): void;
  postPathGlobalValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postPathGlobalValid(): any {
    return msRest.responseToBody(this.postPathGlobalValidWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to
   * '1234-5678-9012-3456' to succeed
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postSwaggerGlobalValid(): Promise<void>;
  postSwaggerGlobalValid(options: msRest.RequestOptionsBase): Promise<void>;
  postSwaggerGlobalValid(callback: msRest.ServiceCallback<void>): void;
  postSwaggerGlobalValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postSwaggerGlobalValid(): any {
    return msRest.responseToBody(this.postSwaggerGlobalValidWithHttpOperationResponse.bind(this), arguments);
  }

}

// Operation Specifications
const postMethodGlobalValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "azurespecials/subscriptionId/method/string/none/path/global/1234-5678-9012-3456/{subscriptionId}",
  urlParameters: [
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postMethodGlobalNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "azurespecials/subscriptionId/method/string/none/path/global/null/{subscriptionId}",
  urlParameters: [
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postMethodGlobalNotProvidedValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "azurespecials/subscriptionId/method/string/none/path/globalNotProvided/1234-5678-9012-3456/{subscriptionId}",
  urlParameters: [
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "apiVersion",
      mapper: {
        required: true,
        serializedName: "api-version",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postPathGlobalValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "azurespecials/subscriptionId/path/string/none/path/global/1234-5678-9012-3456/{subscriptionId}",
  urlParameters: [
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postSwaggerGlobalValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "azurespecials/subscriptionId/swagger/string/none/path/global/1234-5678-9012-3456/{subscriptionId}",
  urlParameters: [
    {
      parameterPath: "subscriptionId",
      mapper: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  headerParameters: [
    {
      parameterPath: "acceptLanguage",
      mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};
