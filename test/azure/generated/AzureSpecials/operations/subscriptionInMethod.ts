/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Mappers from "../models/subscriptionInMethodMappers";
import * as Parameters from "../models/parameters";
import { AutoRestAzureSpecialParametersTestClientContext } from "../autoRestAzureSpecialParametersTestClientContext";

/** Class representing a SubscriptionInMethod. */
export class SubscriptionInMethod {
  private readonly client: AutoRestAzureSpecialParametersTestClientContext;

  /**
   * Create a SubscriptionInMethod.
   * @param {AutoRestAzureSpecialParametersTestClientContext} client Reference to the service client.
   */
  constructor(client: AutoRestAzureSpecialParametersTestClientContext) {
    this.client = client;
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id =
   * '1234-5678-9012-3456' to succeed
   *
   * @param {string} subscriptionId This should appear as a method parameter, use value
   * '1234-5678-9012-3456'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  postMethodLocalValidWithHttpOperationResponse(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      postMethodLocalValidOperationSpec);
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id = null,
   * client-side validation should prevent you from making this call
   *
   * @param {string} subscriptionId This should appear as a method parameter, use value null,
   * client-side validation should prvenet the call
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  postMethodLocalNullWithHttpOperationResponse(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      postMethodLocalNullOperationSpec);
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id =
   * '1234-5678-9012-3456' to succeed
   *
   * @param {string} subscriptionId Should appear as a method parameter -use value
   * '1234-5678-9012-3456'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  postPathLocalValidWithHttpOperationResponse(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      postPathLocalValidOperationSpec);
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id =
   * '1234-5678-9012-3456' to succeed
   *
   * @param {string} subscriptionId The subscriptionId, which appears in the path, the value is
   * always '1234-5678-9012-3456'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  postSwaggerLocalValidWithHttpOperationResponse(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      postSwaggerLocalValidOperationSpec);
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id =
   * '1234-5678-9012-3456' to succeed
   *
   * @param {string} subscriptionId This should appear as a method parameter, use value
   * '1234-5678-9012-3456'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postMethodLocalValid(subscriptionId: string): Promise<void>;
  postMethodLocalValid(subscriptionId: string, options: msRest.RequestOptionsBase): Promise<void>;
  postMethodLocalValid(subscriptionId: string, callback: msRest.ServiceCallback<void>): void;
  postMethodLocalValid(subscriptionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postMethodLocalValid(subscriptionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.postMethodLocalValidWithHttpOperationResponse.bind(this), subscriptionId, options, callback);
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id = null,
   * client-side validation should prevent you from making this call
   *
   * @param {string} subscriptionId This should appear as a method parameter, use value null,
   * client-side validation should prvenet the call
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postMethodLocalNull(subscriptionId: string): Promise<void>;
  postMethodLocalNull(subscriptionId: string, options: msRest.RequestOptionsBase): Promise<void>;
  postMethodLocalNull(subscriptionId: string, callback: msRest.ServiceCallback<void>): void;
  postMethodLocalNull(subscriptionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postMethodLocalNull(subscriptionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.postMethodLocalNullWithHttpOperationResponse.bind(this), subscriptionId, options, callback);
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id =
   * '1234-5678-9012-3456' to succeed
   *
   * @param {string} subscriptionId Should appear as a method parameter -use value
   * '1234-5678-9012-3456'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postPathLocalValid(subscriptionId: string): Promise<void>;
  postPathLocalValid(subscriptionId: string, options: msRest.RequestOptionsBase): Promise<void>;
  postPathLocalValid(subscriptionId: string, callback: msRest.ServiceCallback<void>): void;
  postPathLocalValid(subscriptionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postPathLocalValid(subscriptionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.postPathLocalValidWithHttpOperationResponse.bind(this), subscriptionId, options, callback);
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id =
   * '1234-5678-9012-3456' to succeed
   *
   * @param {string} subscriptionId The subscriptionId, which appears in the path, the value is
   * always '1234-5678-9012-3456'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postSwaggerLocalValid(subscriptionId: string): Promise<void>;
  postSwaggerLocalValid(subscriptionId: string, options: msRest.RequestOptionsBase): Promise<void>;
  postSwaggerLocalValid(subscriptionId: string, callback: msRest.ServiceCallback<void>): void;
  postSwaggerLocalValid(subscriptionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postSwaggerLocalValid(subscriptionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.postSwaggerLocalValidWithHttpOperationResponse.bind(this), subscriptionId, options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const postMethodLocalValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "azurespecials/subscriptionId/method/string/none/path/local/1234-5678-9012-3456/{subscriptionId}",
  urlParameters: [
    Parameters.subscriptionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const postMethodLocalNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "azurespecials/subscriptionId/method/string/none/path/local/null/{subscriptionId}",
  urlParameters: [
    Parameters.subscriptionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const postPathLocalValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "azurespecials/subscriptionId/path/string/none/path/local/1234-5678-9012-3456/{subscriptionId}",
  urlParameters: [
    Parameters.subscriptionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const postSwaggerLocalValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "azurespecials/subscriptionId/swagger/string/none/path/local/1234-5678-9012-3456/{subscriptionId}",
  urlParameters: [
    Parameters.subscriptionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
