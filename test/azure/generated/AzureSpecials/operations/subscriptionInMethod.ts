/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Mappers from "../models/subscriptionInMethodMappers";
import * as Parameters from "../models/parameters";
import { AutoRestAzureSpecialParametersTestClientContext } from "../autoRestAzureSpecialParametersTestClientContext";

/** Class representing a SubscriptionInMethod. */
export class SubscriptionInMethod {
  private readonly client: AutoRestAzureSpecialParametersTestClientContext;

  /**
   * Create a SubscriptionInMethod.
   * @param {AutoRestAzureSpecialParametersTestClientContext} client Reference to the service client.
   */
  constructor(client: AutoRestAzureSpecialParametersTestClientContext) {
    this.client = client;
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id =
   * '1234-5678-9012-3456' to succeed
   * @param subscriptionId This should appear as a method parameter, use value '1234-5678-9012-3456'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  postMethodLocalValid(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param subscriptionId This should appear as a method parameter, use value '1234-5678-9012-3456'
   * @param callback The callback
   */
  postMethodLocalValid(subscriptionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param subscriptionId This should appear as a method parameter, use value '1234-5678-9012-3456'
   * @param options The optional parameters
   * @param callback The callback
   */
  postMethodLocalValid(subscriptionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postMethodLocalValid(subscriptionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      postMethodLocalValidOperationSpec,
      callback);
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id = null,
   * client-side validation should prevent you from making this call
   * @param subscriptionId This should appear as a method parameter, use value null, client-side
   * validation should prvenet the call
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  postMethodLocalNull(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param subscriptionId This should appear as a method parameter, use value null, client-side
   * validation should prvenet the call
   * @param callback The callback
   */
  postMethodLocalNull(subscriptionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param subscriptionId This should appear as a method parameter, use value null, client-side
   * validation should prvenet the call
   * @param options The optional parameters
   * @param callback The callback
   */
  postMethodLocalNull(subscriptionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postMethodLocalNull(subscriptionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      postMethodLocalNullOperationSpec,
      callback);
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id =
   * '1234-5678-9012-3456' to succeed
   * @param subscriptionId Should appear as a method parameter -use value '1234-5678-9012-3456'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  postPathLocalValid(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param subscriptionId Should appear as a method parameter -use value '1234-5678-9012-3456'
   * @param callback The callback
   */
  postPathLocalValid(subscriptionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param subscriptionId Should appear as a method parameter -use value '1234-5678-9012-3456'
   * @param options The optional parameters
   * @param callback The callback
   */
  postPathLocalValid(subscriptionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postPathLocalValid(subscriptionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      postPathLocalValidOperationSpec,
      callback);
  }

  /**
   * POST method with subscriptionId modeled in the method.  pass in subscription id =
   * '1234-5678-9012-3456' to succeed
   * @param subscriptionId The subscriptionId, which appears in the path, the value is always
   * '1234-5678-9012-3456'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  postSwaggerLocalValid(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param subscriptionId The subscriptionId, which appears in the path, the value is always
   * '1234-5678-9012-3456'
   * @param callback The callback
   */
  postSwaggerLocalValid(subscriptionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param subscriptionId The subscriptionId, which appears in the path, the value is always
   * '1234-5678-9012-3456'
   * @param options The optional parameters
   * @param callback The callback
   */
  postSwaggerLocalValid(subscriptionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postSwaggerLocalValid(subscriptionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      postSwaggerLocalValidOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const postMethodLocalValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "azurespecials/subscriptionId/method/string/none/path/local/1234-5678-9012-3456/{subscriptionId}",
  urlParameters: [
    Parameters.subscriptionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const postMethodLocalNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "azurespecials/subscriptionId/method/string/none/path/local/null/{subscriptionId}",
  urlParameters: [
    Parameters.subscriptionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const postPathLocalValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "azurespecials/subscriptionId/path/string/none/path/local/1234-5678-9012-3456/{subscriptionId}",
  urlParameters: [
    Parameters.subscriptionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const postSwaggerLocalValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "azurespecials/subscriptionId/swagger/string/none/path/local/1234-5678-9012-3456/{subscriptionId}",
  urlParameters: [
    Parameters.subscriptionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
