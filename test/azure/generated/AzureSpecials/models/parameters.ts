/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const acceptLanguage: coreHttp.OperationParameter = {
  parameterPath: "acceptLanguage",
  mapper: {
    serializedName: "accept-language",
    defaultValue: 'en-US',
    type: {
      name: "String"
    }
  }
};
export const apiVersion0: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    required: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};
export const apiVersion1: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "api-version",
    defaultValue: '2.0',
    type: {
      name: "String"
    }
  }
};
export const apiVersion2: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "apiVersion"
  ],
  mapper: {
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};
export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "filter"
  ],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};
export const fooClientRequestId0: coreHttp.OperationParameter = {
  parameterPath: "fooClientRequestId",
  mapper: {
    required: true,
    serializedName: "foo-client-request-id",
    type: {
      name: "String"
    }
  }
};
export const fooClientRequestId1: coreHttp.OperationParameter = {
  parameterPath: [
    "headerCustomNamedRequestIdParamGroupingParameters",
    "fooClientRequestId"
  ],
  mapper: {
    required: true,
    serializedName: "foo-client-request-id",
    type: {
      name: "String"
    }
  }
};
export const orderby: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "orderby"
  ],
  mapper: {
    serializedName: "$orderby",
    type: {
      name: "String"
    }
  }
};
export const q10: coreHttp.OperationQueryParameter = {
  parameterPath: "q1",
  mapper: {
    required: true,
    serializedName: "q1",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const q11: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "q1"
  ],
  mapper: {
    serializedName: "q1",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const q12: coreHttp.OperationQueryParameter = {
  parameterPath: "q1",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "q1",
    defaultValue: 'value1&q2=value2&q3=value3',
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    required: true,
    serializedName: "subscriptionId",
    type: {
      name: "String"
    }
  }
};
export const top: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "top"
  ],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};
export const unencodedPathParam0: coreHttp.OperationURLParameter = {
  parameterPath: "unencodedPathParam",
  mapper: {
    required: true,
    serializedName: "unencodedPathParam",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const unencodedPathParam1: coreHttp.OperationURLParameter = {
  parameterPath: "unencodedPathParam",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "unencodedPathParam",
    defaultValue: 'path1/path2/path3',
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const xMsClientRequestId: coreHttp.OperationParameter = {
  parameterPath: "xMsClientRequestId",
  mapper: {
    required: true,
    serializedName: "x-ms-client-request-id",
    type: {
      name: "String"
    }
  }
};
