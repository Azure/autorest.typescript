/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { compositeSpec, CompositeTypeSpec, numberSpec, stringSpec } from "ms-rest-js";

export const ErrorModel: CompositeTypeSpec = compositeSpec({
  typeName: "ErrorModel",
  propertySpecs: {
    status: {
      valueSpec: numberSpec
    },
    constantId: {
      required: true,
      valueSpec: numberSpec
    },
    message: {
      valueSpec: stringSpec
    }
  }
});

export const OdataFilter: CompositeTypeSpec = compositeSpec({
  typeName: "OdataFilter",
  propertySpecs: {
    id: {
      valueSpec: numberSpec
    },
    name: {
      valueSpec: stringSpec
    }
  }
});

/**
 * Additional parameters for customNamedRequestIdParamGrouping operation.
 */
export const HeaderCustomNamedRequestIdParamGroupingParameters: CompositeTypeSpec = compositeSpec({
  typeName: "HeaderCustomNamedRequestIdParamGroupingParameters",
  propertySpecs: {
    /**
     * The fooRequestId
     */
    fooClientRequestId: {
      required: true,
      valueSpec: stringSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const ApiVersionLocalGetMethodLocalNullOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ApiVersionLocalGetMethodLocalNullOptionalParams",
  propertySpecs: {
    /**
     * This should appear as a method parameter, use value null, this should result in no
     * serialized parameter
     */
    apiVersion: {
      serializedName: "api-version",
      valueSpec: stringSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const SkipUrlEncodingGetMethodQueryNullOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "SkipUrlEncodingGetMethodQueryNullOptionalParams",
  propertySpecs: {
    /**
     * Unencoded query parameter with value null
     */
    q1: {
      valueSpec: stringSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const OdataGetWithFilterOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "OdataGetWithFilterOptionalParams",
  propertySpecs: {
    /**
     * The filter parameter with value '$filter=id gt 5 and name eq 'foo''.
     */
    filter: {
      serializedName: "$filter",
      valueSpec: stringSpec
    },
    /**
     * The top parameter with value 10.
     */
    top: {
      serializedName: "$top",
      valueSpec: numberSpec
    },
    /**
     * The orderby parameter with value id.
     */
    orderby: {
      serializedName: "$orderby",
      valueSpec: stringSpec
    }
  }
});
