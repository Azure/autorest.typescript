/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MlTeamAccountManagementClient } from "../mlTeamAccountManagementClient";
import {
  WorkspacesGetResponse,
  Workspace,
  WorkspacesCreateOrUpdateResponse,
  WorkspaceUpdateParameters,
  WorkspacesUpdateResponse,
  WorkspacesListByAccountsResponse,
  WorkspacesListByAccountsNextResponse
} from "../models";

/**
 * Class representing a Workspaces.
 */
export class Workspaces {
  private readonly client: MlTeamAccountManagementClient;

  /**
   * Initialize a new instance of the class Workspaces class.
   * @param client Reference to the service client
   */
  constructor(client: MlTeamAccountManagementClient) {
    this.client = client;
  }

  /**
   * Gets the properties of the specified machine learning workspace.
   * @param resourceGroupName The name of the resource group to which the machine learning team account
   *                          belongs.
   * @param accountName The name of the machine learning team account.
   * @param workspaceName The name of the machine learning team account workspace.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    workspaceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WorkspacesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        workspaceName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<WorkspacesGetResponse>;
  }

  /**
   * Creates or updates a machine learning workspace with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the machine learning team account
   *                          belongs.
   * @param accountName The name of the machine learning team account.
   * @param workspaceName The name of the machine learning team account workspace.
   * @param parameters The parameters for creating or updating a machine learning workspace.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    workspaceName: string,
    parameters: Workspace,
    options?: coreHttp.OperationOptions
  ): Promise<WorkspacesCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        workspaceName,
        parameters,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<WorkspacesCreateOrUpdateResponse>;
  }

  /**
   * Deletes a machine learning workspace.
   * @param resourceGroupName The name of the resource group to which the machine learning team account
   *                          belongs.
   * @param accountName The name of the machine learning team account.
   * @param workspaceName The name of the machine learning team account workspace.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    workspaceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        workspaceName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Updates a machine learning workspace with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the machine learning team account
   *                          belongs.
   * @param accountName The name of the machine learning team account.
   * @param workspaceName The name of the machine learning team account workspace.
   * @param parameters The parameters for updating a machine learning workspace.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    workspaceName: string,
    parameters: WorkspaceUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<WorkspacesUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        workspaceName,
        parameters,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<WorkspacesUpdateResponse>;
  }

  /**
   * Lists all the available machine learning workspaces under the specified team account.
   * @param resourceGroupName The name of the resource group to which the machine learning team account
   *                          belongs.
   * @param accountName The name of the machine learning team account.
   * @param options The options parameters.
   */
  listByAccounts(
    resourceGroupName: string,
    accountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WorkspacesListByAccountsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options: operationOptions },
      listByAccountsOperationSpec
    ) as Promise<WorkspacesListByAccountsResponse>;
  }

  /**
   * ListByAccountsNext
   * @param resourceGroupName The name of the resource group to which the machine learning team account
   *                          belongs.
   * @param accountName The name of the machine learning team account.
   * @param nextLink The nextLink from the previous successful call to the ListByAccounts method.
   * @param options The options parameters.
   */
  listByAccountsNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WorkspacesListByAccountsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options: operationOptions },
      listByAccountsNextOperationSpec
    ) as Promise<WorkspacesListByAccountsNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Workspace
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.workspaceName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Workspace
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.workspaceName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.workspaceName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Workspace
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.workspaceName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByAccountsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkspaceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  serializer
};
const listByAccountsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkspaceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink2
  ],
  serializer
};
