/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * List of Operations
 */
export interface OperationList {
  /**
   * Array of operations
   */
  readonly value?: Operation[];
  /**
   * URI to the next page of operations.
   */
  readonly nextLink?: string;
}

/**
 * Describes the supported REST operation.
 */
export interface Operation {
  /**
   * The name of the operation being performed on this particular object. This name should match the name that appears in RBAC or the event service.
   */
  readonly name?: string;
  /**
   * Contains the localized display information for this particular operation / action.
   */
  readonly display?: Display;
}

/**
 * Contains the localized display information for this particular operation / action.
 */
export interface Display {
  /**
   * The localized friendly form of the resource provider name â€“ it is expected to also include the publisher/company responsible. It should use Title Casing and begin with "Microsoft" for 1st party services. e.g. "Microsoft Monitoring Insights" or "Microsoft Compute."
   */
  readonly provider?: string;
  /**
   * The localized, friendly version of the resource type related to this action or operation; the resource type should match the public documentation for the resource provider.
   */
  readonly resource?: string;
  /**
   * The localized, friendly name for the operation. Use the name as it will displayed to the user.
   */
  readonly operation?: string;
  /**
   * The localized, friendly description for the operation. The description will be displayed to the user. It should be thorough and concise for used in both tooltips and detailed views.
   */
  readonly description?: string;
}

/**
 * List of backup locations.
 */
export interface BackupLocationList {
  /**
   * List of backup locations.
   */
  value?: BackupLocation[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Base Resource Object
 */
export interface Resource {
  /**
   * URI of the resource.
   */
  readonly id?: string;
  /**
   * Name of the resource.
   */
  readonly name?: string;
  /**
   * Type of resource.
   */
  readonly type?: string;
  /**
   * Location of the resource.
   */
  location?: string;
  /**
   * List of key value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Information about the backup location.
 */
export type BackupLocation = Resource & {
  /**
   * Path to the update location
   */
  path?: string;
  /**
   * Username to access the location.
   */
  userName?: string;
  /**
   * Password to access the location.
   */
  password?: string;
  /**
   * The base64 raw data for the backup encryption certificate.
   */
  encryptionCertBase64?: string;
  /**
   * The thumbprint of the encryption certificate.
   */
  readonly encryptionCertThumbprint?: string;
  /**
   * The interval, in hours, for the frequency that the scheduler takes a backup.
   */
  backupFrequencyInHours?: number;
  /**
   * Free space at the backup location.
   */
  readonly availableCapacity?: string;
  /**
   * True if the backup scheduler is enabled.
   */
  isBackupSchedulerEnabled?: boolean;
  /**
   * The scheduled time of the next backup.
   */
  readonly nextBackupTime?: Date;
  /**
   * Time of backup.
   */
  readonly lastBackupTime?: Date;
  /**
   * The retention period, in days, for backs in the storage location.
   */
  backupRetentionPeriodInDays?: number;
};

/**
 * Information related to a backup.
 */
export type Backup = Resource & {
  /**
   * Version of the backup data.
   */
  readonly backupDataVersion?: string;
  /**
   * Backup status for each role.
   */
  readonly roleStatus?: RoleOperationStatus[];
  /**
   * Current status of the backup.
   */
  readonly status?: OperationStatus;
  /**
   * Creation time of the backup.
   */
  readonly createdDateTime?: Date;
  /**
   * Duration to create the backup.
   */
  readonly timeTakenToCreate?: string;
  /**
   * Deployment Id of the stamp.
   */
  readonly deploymentID?: string;
  /**
   * Azure Stack stamp version of the backup.
   */
  readonly stampVersion?: string;
  /**
   * OEM version.
   */
  readonly oemVersion?: string;
  /**
   * True if the backup can be used for cloud recovery scenario.
   */
  readonly isCloudRecoveryReady?: boolean;
  /**
   * The thumbprint of the certificate used to encrypt the backup encryption key.
   */
  readonly encryptionCertThumbprint?: string;
};

/**
 * Backup status for a role.
 */
export interface RoleOperationStatus {
  /**
   * Name of the role.
   */
  roleName?: string;
  /**
   * Status of the role.
   */
  status?: OperationStatus;
}

/**
 * List of backups.
 */
export interface BackupList {
  /**
   * List of backups.
   */
  value?: Backup[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Properties for restore options.
 */
export interface RestoreOptions {
  /**
   * The Azure Stack role name for restore, set it to empty for all infrastructure role
   */
  roleName?: string;
  /**
   * The certificate file raw data in Base64 string. This should be the .pfx file with the private key.
   */
  decryptionCertBase64?: string;
  /**
   * The password for the decryption certificate.
   */
  decryptionCertPassword?: string;
}

/**
 * Status of a long running operation.
 */
export interface LongRunningOperationStatus {
  /**
   * Operation result code.
   */
  readonly code?: string;
  /**
   * Description of the operation status.
   */
  readonly message?: string;
}

/**
 * Defines values for OperationStatus.
 */
export type OperationStatus =
  | "Creating"
  | "Queued"
  | "Running"
  | "Deleted"
  | "Failed"
  | "PartialSucceeded"
  | "Succeeded";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type BackupLocationsListResponse = BackupLocationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupLocationList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BackupLocationsGetResponse = BackupLocation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupLocation;
  };
};

/**
 * Contains response data for the update operation.
 */
export type BackupLocationsUpdateResponse = BackupLocation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupLocation;
  };
};

/**
 * Contains response data for the createBackup operation.
 */
export type BackupLocationsCreateBackupResponse = Backup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Backup;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type BackupLocationsListNextResponse = BackupLocationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupLocationList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type BackupsListResponse = BackupList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BackupsGetResponse = Backup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Backup;
  };
};

/**
 * Optional parameters.
 */
export interface BackupAdminClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
