/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationList: coreHttp.CompositeMapper = {
  serializedName: "OperationList",
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "Display"
        }
      }
    }
  }
};

export const Display: coreHttp.CompositeMapper = {
  serializedName: "Display",
  type: {
    name: "Composite",
    className: "Display",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupLocationList: coreHttp.CompositeMapper = {
  serializedName: "BackupLocationList",
  type: {
    name: "Composite",
    className: "BackupLocationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "BackupLocation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const BackupLocation: coreHttp.CompositeMapper = {
  serializedName: "BackupLocation",
  type: {
    name: "Composite",
    className: "BackupLocation",
    modelProperties: {
      ...Resource.type.modelProperties,
      path: {
        serializedName: "properties.externalStoreDefault.path",
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.externalStoreDefault.userName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.externalStoreDefault.password",
        type: {
          name: "String"
        }
      },
      encryptionCertBase64: {
        serializedName: "properties.externalStoreDefault.encryptionCertBase64",
        type: {
          name: "String"
        }
      },
      encryptionCertThumbprint: {
        serializedName:
          "properties.externalStoreDefault.encryptionCertThumbprint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      backupFrequencyInHours: {
        serializedName:
          "properties.externalStoreDefault.backupFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      availableCapacity: {
        serializedName: "properties.externalStoreDefault.availableCapacity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isBackupSchedulerEnabled: {
        serializedName:
          "properties.externalStoreDefault.isBackupSchedulerEnabled",
        type: {
          name: "Boolean"
        }
      },
      nextBackupTime: {
        serializedName: "properties.externalStoreDefault.nextBackupTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastBackupTime: {
        serializedName: "properties.externalStoreDefault.lastBackupTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      backupRetentionPeriodInDays: {
        serializedName:
          "properties.externalStoreDefault.backupRetentionPeriodInDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Backup: coreHttp.CompositeMapper = {
  serializedName: "Backup",
  type: {
    name: "Composite",
    className: "Backup",
    modelProperties: {
      ...Resource.type.modelProperties,
      backupDataVersion: {
        serializedName: "properties.backupInfo.backupDataVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      roleStatus: {
        serializedName: "properties.backupInfo.roleStatus",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RoleOperationStatus" }
          }
        }
      },
      status: {
        serializedName: "properties.backupInfo.status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Creating",
            "Queued",
            "Running",
            "Deleted",
            "Failed",
            "PartialSucceeded",
            "Succeeded"
          ]
        }
      },
      createdDateTime: {
        serializedName: "properties.backupInfo.createdDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timeTakenToCreate: {
        serializedName: "properties.backupInfo.timeTakenToCreate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentID: {
        serializedName: "properties.backupInfo.deploymentID",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stampVersion: {
        serializedName: "properties.backupInfo.stampVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      oemVersion: {
        serializedName: "properties.backupInfo.oemVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isCloudRecoveryReady: {
        serializedName: "properties.backupInfo.isCloudRecoveryReady",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      encryptionCertThumbprint: {
        serializedName: "properties.backupInfo.encryptionCertThumbprint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleOperationStatus: coreHttp.CompositeMapper = {
  serializedName: "RoleOperationStatus",
  type: {
    name: "Composite",
    className: "RoleOperationStatus",
    modelProperties: {
      roleName: {
        serializedName: "roleName",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Creating",
            "Queued",
            "Running",
            "Deleted",
            "Failed",
            "PartialSucceeded",
            "Succeeded"
          ]
        }
      }
    }
  }
};

export const BackupList: coreHttp.CompositeMapper = {
  serializedName: "BackupList",
  type: {
    name: "Composite",
    className: "BackupList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Backup" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestoreOptions: coreHttp.CompositeMapper = {
  serializedName: "RestoreOptions",
  type: {
    name: "Composite",
    className: "RestoreOptions",
    modelProperties: {
      roleName: {
        serializedName: "roleName",
        type: {
          name: "String"
        }
      },
      decryptionCertBase64: {
        serializedName: "decryptionCertBase64",
        type: {
          name: "String"
        }
      },
      decryptionCertPassword: {
        serializedName: "decryptionCertPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LongRunningOperationStatus: coreHttp.CompositeMapper = {
  serializedName: "LongRunningOperationStatus",
  type: {
    name: "Composite",
    className: "LongRunningOperationStatus",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
