/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BackupAdminClient } from "../backupAdminClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  BackupsListResponse,
  BackupsGetResponse,
  RestoreOptions
} from "../models";

/**
 * Class representing a Backups.
 */
export class Backups {
  private readonly client: BackupAdminClient;

  /**
   * Initialize a new instance of the class Backups class.
   * @param client Reference to the service client
   */
  constructor(client: BackupAdminClient) {
    this.client = client;
  }

  /**
   * Returns a list of backups from a location.
   * @param resourceGroupName Name of the resource group.
   * @param location Name of the backup location.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<BackupsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, location, options: operationOptions },
      listOperationSpec
    ) as Promise<BackupsListResponse>;
  }

  /**
   * Returns a backup from a location based on name.
   * @param resourceGroupName Name of the resource group.
   * @param location Name of the backup location.
   * @param backup Name of the backup.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    location: string,
    backup: string,
    options?: coreHttp.OperationOptions
  ): Promise<BackupsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, location, backup, options: operationOptions },
      getOperationSpec
    ) as Promise<BackupsGetResponse>;
  }

  /**
   * Restore a backup.
   * @param resourceGroupName Name of the resource group.
   * @param location Name of the backup location.
   * @param backup Name of the backup.
   * @param restoreOptions Restore options.
   * @param options The options parameters.
   */
  async restore(
    resourceGroupName: string,
    location: string,
    backup: string,
    restoreOptions: RestoreOptions,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      location,
      backup,
      restoreOptions,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      restoreOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: restoreOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Backup.Admin/backupLocations/{location}/backups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Backup.Admin/backupLocations/{location}/backups/{backup}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Backup
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.backup1
  ],
  serializer
};
const restoreOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Backup.Admin/backupLocations/{location}/backups/{backup}/restore",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.restoreOptions,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.backup1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
