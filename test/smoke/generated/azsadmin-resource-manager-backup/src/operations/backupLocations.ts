/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BackupAdminClient } from "../backupAdminClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  BackupLocationsListResponse,
  BackupLocationsGetResponse,
  BackupLocation,
  BackupLocationsUpdateResponse,
  BackupLocationsCreateBackupResponse,
  BackupLocationsListNextResponse
} from "../models";

/**
 * Class representing a BackupLocations.
 */
export class BackupLocations {
  private readonly client: BackupAdminClient;

  /**
   * Initialize a new instance of the class BackupLocations class.
   * @param client Reference to the service client
   */
  constructor(client: BackupAdminClient) {
    this.client = client;
  }

  /**
   * Returns the list of backup locations.
   * @param resourceGroupName Name of the resource group.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BackupLocationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listOperationSpec
    ) as Promise<BackupLocationsListResponse>;
  }

  /**
   * Returns a specific backup location based on name.
   * @param resourceGroupName Name of the resource group.
   * @param location Name of the backup location.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<BackupLocationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, location, options: operationOptions },
      getOperationSpec
    ) as Promise<BackupLocationsGetResponse>;
  }

  /**
   * Update a backup location.
   * @param resourceGroupName Name of the resource group.
   * @param location Name of the backup location.
   * @param backup Backup location object.
   * @param options The options parameters.
   */
  async update(
    resourceGroupName: string,
    location: string,
    backup: BackupLocation,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<BackupLocationsUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      location,
      backup,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        BackupLocationsUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Back up a specific location.
   * @param resourceGroupName Name of the resource group.
   * @param location Name of the backup location.
   * @param options The options parameters.
   */
  async createBackup(
    resourceGroupName: string,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<BackupLocationsCreateBackupResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      location,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        BackupLocationsCreateBackupResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createBackupOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createBackupOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroupName Name of the resource group.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BackupLocationsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroupName, options: operationOptions },
      listNextOperationSpec
    ) as Promise<BackupLocationsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Backup.Admin/backupLocations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupLocationList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Backup.Admin/backupLocations/{location}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupLocation
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Backup.Admin/backupLocations/{location}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.BackupLocation
    },
    201: {
      bodyMapper: Mappers.BackupLocation
    },
    202: {
      bodyMapper: Mappers.BackupLocation
    },
    204: {
      bodyMapper: Mappers.BackupLocation
    }
  },
  requestBody: Parameters.backup,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const createBackupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Backup.Admin/backupLocations/{location}/createBackup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Backup
    },
    201: {
      bodyMapper: Mappers.Backup
    },
    202: {
      bodyMapper: Mappers.Backup
    },
    204: {
      bodyMapper: Mappers.Backup
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupLocationList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
