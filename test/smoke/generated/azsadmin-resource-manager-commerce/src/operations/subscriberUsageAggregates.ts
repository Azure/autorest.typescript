/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CommerceAdminClient } from "../commerceAdminClient";
import {
  SubscriberUsageAggregatesListOptionalParams,
  SubscriberUsageAggregatesListResponse,
  SubscriberUsageAggregatesListNextOptionalParams,
  SubscriberUsageAggregatesListNextResponse
} from "../models";

/**
 * Class representing a SubscriberUsageAggregates.
 */
export class SubscriberUsageAggregates {
  private readonly client: CommerceAdminClient;

  /**
   * Initialize a new instance of the class SubscriberUsageAggregates class.
   * @param client Reference to the service client
   */
  constructor(client: CommerceAdminClient) {
    this.client = client;
  }

  /**
   * Gets a collection of SubscriberUsageAggregates, which are UsageAggregates from users.
   * @param reportedStartTime The reported start time (inclusive).
   * @param reportedEndTime The reported end time (exclusive).
   * @param options The options parameters.
   */
  list(
    reportedStartTime: Date,
    reportedEndTime: Date,
    options?: SubscriberUsageAggregatesListOptionalParams
  ): Promise<SubscriberUsageAggregatesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { reportedStartTime, reportedEndTime, options: operationOptions },
      listOperationSpec
    ) as Promise<SubscriberUsageAggregatesListResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param reportedStartTime The reported start time (inclusive).
   * @param reportedEndTime The reported end time (exclusive).
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    reportedStartTime: Date,
    reportedEndTime: Date,
    options?: SubscriberUsageAggregatesListNextOptionalParams
  ): Promise<SubscriberUsageAggregatesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        nextLink,
        reportedStartTime,
        reportedEndTime,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<SubscriberUsageAggregatesListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Commerce.Admin/subscriberUsageAggregates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UsageAggregatePage
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.reportedStartTime,
    Parameters.reportedEndTime,
    Parameters.aggregationGranularity,
    Parameters.subscriberId,
    Parameters.continuationToken
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UsageAggregatePage
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.reportedStartTime,
    Parameters.reportedEndTime,
    Parameters.aggregationGranularity,
    Parameters.subscriberId,
    Parameters.continuationToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  serializer
};
