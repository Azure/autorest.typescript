/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * List of Operations
 */
export interface OperationList {
  /**
   * Array of operations
   */
  value?: Operation[];
  /**
   * URI to the next page of operations.
   */
  nextLink?: string;
}

/**
 * Describes the supported REST operation.
 */
export interface Operation {
  /**
   * The name of the operation performed on the object. The name should match the action name that appears in RBAC or the event service.
   */
  name?: string;
  /**
   * Contains the localized display information for this particular operation or action.
   */
  display?: Display;
}

/**
 * Contains the localized display information for this particular operation / action.
 */
export interface Display {
  /**
   * The localized, friendly version of the resource provider name. The provider name is expected to include the name of the publisher or company responsible. The provider name format should use title case and begin with "Microsoft" for first-party services. For example, the provider name may be"Microsoft Monitoring Insights" or "Microsoft Compute".
   */
  provider?: string;
  /**
   * The localized, friendly version of the resource type related to this action or operation; the resource type should match the public documentation for the resource provider.
   */
  resource?: string;
  /**
   * The localized, friendly name for the operation. Use the name as it will be displayed to the user.
   */
  operation?: string;
  /**
   * The localized, friendly description for the operation. The description will be displayed to the user. It should be thorough and concise for used in both tooltips and detailed views.
   */
  description?: string;
}

/**
 * Pageable list of usage aggregates
 */
export interface UsageAggregatePage {
  /**
   * List of usage aggregates.
   */
  value?: UsageAggregate[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Base Resource Object
 */
export interface Resource {
  /**
   * URI of the resource.
   */
  readonly id?: string;
  /**
   * Name of the resource.
   */
  readonly name?: string;
  /**
   * Type of resource.
   */
  readonly type?: string;
  /**
   * Location where resource is location.
   */
  readonly location?: string;
  /**
   * List of key-value pairs.
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * Aggregate usage values for resource.
 */
export type UsageAggregate = Resource & {
  /**
   * Subscription ID of tenant using plan.
   */
  subscriptionId?: string;
  /**
   * UTC start time for the usage category to which this usage aggregate belongs.
   */
  usageStartTime?: Date;
  /**
   * UTC end time for the usage category to which this usage aggregate belongs.
   */
  usageEndTime?: Date;
  /**
   * Key-value pairs of instance details represented as a string.
   */
  instanceData?: string;
  /**
   * The amount of the resource consumption that occurred in this time frame.
   */
  quantity?: string;
  /**
   * Unique ID for the resource that was consumed, for example, the Resource ID.
   */
  meterId?: string;
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Optional parameters.
 */
export interface SubscriberUsageAggregatesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The aggregation granularity.
   */
  aggregationGranularity?: string;
  /**
   * The tenant subscription identifier.
   */
  subscriberId?: string;
  /**
   * The continuation token.
   */
  continuationToken?: string;
}

/**
 * Contains response data for the list operation.
 */
export type SubscriberUsageAggregatesListResponse = UsageAggregatePage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsageAggregatePage;
  };
};

/**
 * Optional parameters.
 */
export interface SubscriberUsageAggregatesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The aggregation granularity.
   */
  aggregationGranularity?: string;
  /**
   * The tenant subscription identifier.
   */
  subscriberId?: string;
  /**
   * The continuation token.
   */
  continuationToken?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type SubscriberUsageAggregatesListNextResponse = UsageAggregatePage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsageAggregatePage;
  };
};

/**
 * Optional parameters.
 */
export interface CommerceAdminClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
