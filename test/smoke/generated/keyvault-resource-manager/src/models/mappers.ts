/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const VaultCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "VaultCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "VaultCreateOrUpdateParameters",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultProperties"
        }
      }
    }
  }
};

export const VaultProperties: coreHttp.CompositeMapper = {
  serializedName: "VaultProperties",
  type: {
    name: "Composite",
    className: "VaultProperties",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      accessPolicies: {
        serializedName: "accessPolicies",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AccessPolicyEntry" }
          }
        }
      },
      vaultUri: {
        serializedName: "vaultUri",
        type: {
          name: "String"
        }
      },
      enabledForDeployment: {
        serializedName: "enabledForDeployment",
        type: {
          name: "Boolean"
        }
      },
      enabledForDiskEncryption: {
        serializedName: "enabledForDiskEncryption",
        type: {
          name: "Boolean"
        }
      },
      enabledForTemplateDeployment: {
        serializedName: "enabledForTemplateDeployment",
        type: {
          name: "Boolean"
        }
      },
      enableSoftDelete: {
        defaultValue: true,
        serializedName: "enableSoftDelete",
        type: {
          name: "Boolean"
        }
      },
      softDeleteRetentionInDays: {
        defaultValue: 90,
        serializedName: "softDeleteRetentionInDays",
        type: {
          name: "Number"
        }
      },
      enableRbacAuthorization: {
        serializedName: "enableRbacAuthorization",
        type: {
          name: "Boolean"
        }
      },
      createMode: {
        serializedName: "createMode",
        type: {
          name: "Enum",
          allowedValues: ["recover", "default"]
        }
      },
      enablePurgeProtection: {
        serializedName: "enablePurgeProtection",
        type: {
          name: "Boolean"
        }
      },
      networkAcls: {
        serializedName: "networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      privateEndpointConnections: {
        serializedName: "privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnectionItem"
            }
          }
        }
      }
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      family: {
        defaultValue: "A",
        serializedName: "family",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["standard", "premium"]
        }
      }
    }
  }
};

export const AccessPolicyEntry: coreHttp.CompositeMapper = {
  serializedName: "AccessPolicyEntry",
  type: {
    name: "Composite",
    className: "AccessPolicyEntry",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      objectId: {
        serializedName: "objectId",
        required: true,
        type: {
          name: "String"
        }
      },
      applicationId: {
        serializedName: "applicationId",
        type: {
          name: "Uuid"
        }
      },
      permissions: {
        serializedName: "permissions",
        type: {
          name: "Composite",
          className: "Permissions"
        }
      }
    }
  }
};

export const Permissions: coreHttp.CompositeMapper = {
  serializedName: "Permissions",
  type: {
    name: "Composite",
    className: "Permissions",
    modelProperties: {
      keys: {
        serializedName: "keys",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "KeyPermissions"
          }
        }
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SecretPermissions"
          }
        }
      },
      certificates: {
        serializedName: "certificates",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "CertificatePermissions"
          }
        }
      },
      storage: {
        serializedName: "storage",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "StoragePermissions"
          }
        }
      }
    }
  }
};

export const NetworkRuleSet: coreHttp.CompositeMapper = {
  serializedName: "NetworkRuleSet",
  type: {
    name: "Composite",
    className: "NetworkRuleSet",
    modelProperties: {
      bypass: {
        serializedName: "bypass",
        type: {
          name: "String"
        }
      },
      defaultAction: {
        serializedName: "defaultAction",
        type: {
          name: "String"
        }
      },
      ipRules: {
        serializedName: "ipRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IPRule" } }
        }
      },
      virtualNetworkRules: {
        serializedName: "virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkRule" }
          }
        }
      }
    }
  }
};

export const IPRule: coreHttp.CompositeMapper = {
  serializedName: "IPRule",
  type: {
    name: "Composite",
    className: "IPRule",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRule: coreHttp.CompositeMapper = {
  serializedName: "VirtualNetworkRule",
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionItem: coreHttp.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionItem",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionItem",
    modelProperties: {
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreHttp.CompositeMapper = {
  serializedName: "PrivateEndpoint",
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreHttp.CompositeMapper = {
  serializedName: "PrivateLinkServiceConnectionState",
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionRequired: {
        serializedName: "actionRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Vault: coreHttp.CompositeMapper = {
  serializedName: "Vault",
  type: {
    name: "Composite",
    className: "Vault",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultProperties"
        }
      }
    }
  }
};

export const VaultPatchParameters: coreHttp.CompositeMapper = {
  serializedName: "VaultPatchParameters",
  type: {
    name: "Composite",
    className: "VaultPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultPatchProperties"
        }
      }
    }
  }
};

export const VaultPatchProperties: coreHttp.CompositeMapper = {
  serializedName: "VaultPatchProperties",
  type: {
    name: "Composite",
    className: "VaultPatchProperties",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "Uuid"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      accessPolicies: {
        serializedName: "accessPolicies",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AccessPolicyEntry" }
          }
        }
      },
      enabledForDeployment: {
        serializedName: "enabledForDeployment",
        type: {
          name: "Boolean"
        }
      },
      enabledForDiskEncryption: {
        serializedName: "enabledForDiskEncryption",
        type: {
          name: "Boolean"
        }
      },
      enabledForTemplateDeployment: {
        serializedName: "enabledForTemplateDeployment",
        type: {
          name: "Boolean"
        }
      },
      enableSoftDelete: {
        serializedName: "enableSoftDelete",
        type: {
          name: "Boolean"
        }
      },
      enableRbacAuthorization: {
        serializedName: "enableRbacAuthorization",
        type: {
          name: "Boolean"
        }
      },
      softDeleteRetentionInDays: {
        serializedName: "softDeleteRetentionInDays",
        type: {
          name: "Number"
        }
      },
      createMode: {
        serializedName: "createMode",
        type: {
          name: "Enum",
          allowedValues: ["recover", "default"]
        }
      },
      enablePurgeProtection: {
        serializedName: "enablePurgeProtection",
        type: {
          name: "Boolean"
        }
      },
      networkAcls: {
        serializedName: "networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      }
    }
  }
};

export const VaultAccessPolicyParameters: coreHttp.CompositeMapper = {
  serializedName: "VaultAccessPolicyParameters",
  type: {
    name: "Composite",
    className: "VaultAccessPolicyParameters",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultAccessPolicyProperties"
        }
      }
    }
  }
};

export const VaultAccessPolicyProperties: coreHttp.CompositeMapper = {
  serializedName: "VaultAccessPolicyProperties",
  type: {
    name: "Composite",
    className: "VaultAccessPolicyProperties",
    modelProperties: {
      accessPolicies: {
        serializedName: "accessPolicies",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AccessPolicyEntry" }
          }
        }
      }
    }
  }
};

export const VaultListResult: coreHttp.CompositeMapper = {
  serializedName: "VaultListResult",
  type: {
    name: "Composite",
    className: "VaultListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Vault" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedVaultListResult: coreHttp.CompositeMapper = {
  serializedName: "DeletedVaultListResult",
  type: {
    name: "Composite",
    className: "DeletedVaultListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DeletedVault" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedVault: coreHttp.CompositeMapper = {
  serializedName: "DeletedVault",
  type: {
    name: "Composite",
    className: "DeletedVault",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DeletedVaultProperties"
        }
      }
    }
  }
};

export const DeletedVaultProperties: coreHttp.CompositeMapper = {
  serializedName: "DeletedVaultProperties",
  type: {
    name: "Composite",
    className: "DeletedVaultProperties",
    modelProperties: {
      vaultId: {
        serializedName: "vaultId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deletionDate: {
        serializedName: "deletionDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      scheduledPurgeDate: {
        serializedName: "scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ResourceListResult: coreHttp.CompositeMapper = {
  serializedName: "ResourceListResult",
  type: {
    name: "Composite",
    className: "ResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Resource" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const VaultCheckNameAvailabilityParameters: coreHttp.CompositeMapper = {
  serializedName: "VaultCheckNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "VaultCheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.KeyVault/vaults",
        serializedName: "type",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["AccountNameInvalid", "AlreadyExists"]
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreHttp.CompositeMapper = {
  serializedName: "PrivateEndpointConnection",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreHttp.CompositeMapper = {
  serializedName: "CloudError",
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreHttp.CompositeMapper = {
  serializedName: "CloudErrorBody",
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreHttp.CompositeMapper = {
  serializedName: "PrivateLinkResourceListResult",
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateLinkResource" }
          }
        }
      }
    }
  }
};

export const PrivateLinkResource: coreHttp.CompositeMapper = {
  serializedName: "PrivateLinkResource",
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PrivateLinkResourcePropertiesRequiredMembersItem"
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PrivateLinkResourcePropertiesRequiredZoneNamesItem"
          }
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSpecification: coreHttp.CompositeMapper = {
  serializedName: "ServiceSpecification",
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "LogSpecification" }
          }
        }
      }
    }
  }
};

export const LogSpecification: coreHttp.CompositeMapper = {
  serializedName: "LogSpecification",
  type: {
    name: "Composite",
    className: "LogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionsPutHeaders: coreHttp.CompositeMapper = {
  serializedName: "privateEndpointConnections_putHeaders",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionsPutHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};
