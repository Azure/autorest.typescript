/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureStackManagementClient } from "../azureStackManagementClient";
import {
  CustomerSubscriptionsListResponse,
  CustomerSubscriptionsGetResponse,
  CustomerSubscription,
  CustomerSubscriptionsCreateResponse,
  CustomerSubscriptionsListNextResponse
} from "../models";

/**
 * Class representing a CustomerSubscriptions.
 */
export class CustomerSubscriptions {
  private readonly client: AzureStackManagementClient;

  /**
   * Initialize a new instance of the class CustomerSubscriptions class.
   * @param client Reference to the service client
   */
  constructor(client: AzureStackManagementClient) {
    this.client = client;
  }

  /**
   * Returns a list of products.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  list(
    resourceGroup: string,
    registrationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CustomerSubscriptionsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, options: operationOptions },
      listOperationSpec
    ) as Promise<CustomerSubscriptionsListResponse>;
  }

  /**
   * Returns the specified product.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param customerSubscriptionName Name of the product.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    registrationName: string,
    customerSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CustomerSubscriptionsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        registrationName,
        customerSubscriptionName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<CustomerSubscriptionsGetResponse>;
  }

  /**
   * Deletes a customer subscription under a registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param customerSubscriptionName Name of the product.
   * @param options The options parameters.
   */
  delete(
    resourceGroup: string,
    registrationName: string,
    customerSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        registrationName,
        customerSubscriptionName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Creates a new customer subscription under a registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param customerSubscriptionName Name of the product.
   * @param customerCreationParameters Parameters use to create a customer subscription.
   * @param options The options parameters.
   */
  create(
    resourceGroup: string,
    registrationName: string,
    customerSubscriptionName: string,
    customerCreationParameters: CustomerSubscription,
    options?: coreHttp.OperationOptions
  ): Promise<CustomerSubscriptionsCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        registrationName,
        customerSubscriptionName,
        customerCreationParameters,
        options: operationOptions
      },
      createOperationSpec
    ) as Promise<CustomerSubscriptionsCreateResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroup: string,
    registrationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CustomerSubscriptionsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroup, registrationName, options: operationOptions },
      listNextOperationSpec
    ) as Promise<CustomerSubscriptionsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerSubscriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions/{customerSubscriptionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerSubscription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.customerSubscriptionName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions/{customerSubscriptionName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.customerSubscriptionName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions/{customerSubscriptionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerSubscription
    }
  },
  requestBody: Parameters.customerCreationParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.customerSubscriptionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerSubscriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  serializer
};
