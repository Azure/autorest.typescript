/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureStackManagementClient } from "../azureStackManagementClient";
import {
  RegistrationsListResponse,
  RegistrationsGetResponse,
  RegistrationParameter,
  RegistrationsCreateOrUpdateResponse,
  RegistrationsUpdateResponse,
  RegistrationsGetActivationKeyResponse,
  RegistrationsListNextResponse
} from "../models";

/**
 * Class representing a Registrations.
 */
export class Registrations {
  private readonly client: AzureStackManagementClient;

  /**
   * Initialize a new instance of the class Registrations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureStackManagementClient) {
    this.client = client;
  }

  /**
   * Returns a list of all registrations.
   * @param resourceGroup Name of the resource group.
   * @param options The options parameters.
   */
  list(
    resourceGroup: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegistrationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, options: operationOptions },
      listOperationSpec
    ) as Promise<RegistrationsListResponse>;
  }

  /**
   * Returns the properties of an Azure Stack registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    registrationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegistrationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, options: operationOptions },
      getOperationSpec
    ) as Promise<RegistrationsGetResponse>;
  }

  /**
   * Delete the requested Azure Stack registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  delete(
    resourceGroup: string,
    registrationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Create or update an Azure Stack registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param token Registration token
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroup: string,
    registrationName: string,
    token: RegistrationParameter,
    options?: coreHttp.OperationOptions
  ): Promise<RegistrationsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, token, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<RegistrationsCreateOrUpdateResponse>;
  }

  /**
   * Patch an Azure Stack registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param token Registration token
   * @param options The options parameters.
   */
  update(
    resourceGroup: string,
    registrationName: string,
    token: RegistrationParameter,
    options?: coreHttp.OperationOptions
  ): Promise<RegistrationsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, token, options: operationOptions },
      updateOperationSpec
    ) as Promise<RegistrationsUpdateResponse>;
  }

  /**
   * Returns Azure Stack Activation Key.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  getActivationKey(
    resourceGroup: string,
    registrationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegistrationsGetActivationKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, options: operationOptions },
      getActivationKeyOperationSpec
    ) as Promise<RegistrationsGetActivationKeyResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroup Name of the resource group.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroup: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegistrationsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroup, options: operationOptions },
      listNextOperationSpec
    ) as Promise<RegistrationsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Registration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Registration
    }
  },
  requestBody: Parameters.token,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Registration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.token,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getActivationKeyOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/getactivationkey",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ActivationKeyResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  serializer
};
