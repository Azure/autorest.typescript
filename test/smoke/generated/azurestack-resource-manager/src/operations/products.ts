/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureStackManagementClient } from "../azureStackManagementClient";
import {
  ProductsListResponse,
  ProductsGetResponse,
  ProductsListDetailsResponse,
  ProductsGetProductsOptionalParams,
  ProductsGetProductsResponse,
  ProductsGetProductOptionalParams,
  ProductsGetProductResponse,
  ProductsUploadLogOptionalParams,
  ProductsUploadLogResponse,
  ProductsListNextResponse
} from "../models";

/**
 * Class representing a Products.
 */
export class Products {
  private readonly client: AzureStackManagementClient;

  /**
   * Initialize a new instance of the class Products class.
   * @param client Reference to the service client
   */
  constructor(client: AzureStackManagementClient) {
    this.client = client;
  }

  /**
   * Returns a list of products.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  list(
    resourceGroup: string,
    registrationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProductsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, options: operationOptions },
      listOperationSpec
    ) as Promise<ProductsListResponse>;
  }

  /**
   * Returns the specified product.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param productName Name of the product.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    registrationName: string,
    productName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProductsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        registrationName,
        productName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ProductsGetResponse>;
  }

  /**
   * Returns the extended properties of a product.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param productName Name of the product.
   * @param options The options parameters.
   */
  listDetails(
    resourceGroup: string,
    registrationName: string,
    productName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProductsListDetailsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        registrationName,
        productName,
        options: operationOptions
      },
      listDetailsOperationSpec
    ) as Promise<ProductsListDetailsResponse>;
  }

  /**
   * Returns a list of products.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  getProducts(
    resourceGroup: string,
    registrationName: string,
    options?: ProductsGetProductsOptionalParams
  ): Promise<ProductsGetProductsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, options: operationOptions },
      getProductsOperationSpec
    ) as Promise<ProductsGetProductsResponse>;
  }

  /**
   * Returns the specified product.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param productName Name of the product.
   * @param options The options parameters.
   */
  getProduct(
    resourceGroup: string,
    registrationName: string,
    productName: string,
    options?: ProductsGetProductOptionalParams
  ): Promise<ProductsGetProductResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        registrationName,
        productName,
        options: operationOptions
      },
      getProductOperationSpec
    ) as Promise<ProductsGetProductResponse>;
  }

  /**
   * Returns the specified product.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param productName Name of the product.
   * @param options The options parameters.
   */
  uploadLog(
    resourceGroup: string,
    registrationName: string,
    productName: string,
    options?: ProductsUploadLogOptionalParams
  ): Promise<ProductsUploadLogResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        registrationName,
        productName,
        options: operationOptions
      },
      uploadLogOperationSpec
    ) as Promise<ProductsUploadLogResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroup: string,
    registrationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProductsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroup, registrationName, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ProductsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.productName
  ],
  serializer
};
const listDetailsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/listDetails",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ExtendedProduct
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.productName
  ],
  serializer
};
const getProductsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/_all/GetProducts",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ProductList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.deviceConfiguration,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getProductOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/GetProduct",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.deviceConfiguration,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.productName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const uploadLogOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/uploadProductLog",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ProductLog
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.marketplaceProductLogUpdate,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.productName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  serializer
};
