/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-06-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const accountName: coreHttp.OperationParameter = {
  parameterPath: "accountName",
  mapper: Mappers.StorageAccountCheckNameAvailabilityParameters
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.StorageAccountCreateParameters
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-w._()]+$"),
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const accountName1: coreHttp.OperationURLParameter = {
  parameterPath: "accountName",
  mapper: {
    constraints: {
      MaxLength: 24,
      MinLength: 3
    },
    serializedName: "accountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "Enum",
      allowedValues: ["geoReplicationStats", "blobRestoreStatus"]
    }
  }
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.StorageAccountUpdateParameters
};

export const expand1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    defaultValue: "kerb",
    isConstant: true,
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const regenerateKey: coreHttp.OperationParameter = {
  parameterPath: "regenerateKey",
  mapper: Mappers.StorageAccountRegenerateKeyParameters
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AccountSasParameters
};

export const parameters3: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ServiceSasParameters
};

export const parameters4: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BlobRestoreParameters
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const location: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const managementPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "managementPolicyName",
  mapper: {
    defaultValue: "default",
    isConstant: true,
    serializedName: "managementPolicyName",
    type: {
      name: "String"
    }
  }
};

export const properties: coreHttp.OperationParameter = {
  parameterPath: "properties",
  mapper: Mappers.ManagementPolicy
};

export const privateEndpointConnectionName: coreHttp.OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const properties1: coreHttp.OperationParameter = {
  parameterPath: "properties",
  mapper: Mappers.PrivateEndpointConnection
};

export const objectReplicationPolicyId: coreHttp.OperationURLParameter = {
  parameterPath: "objectReplicationPolicyId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "objectReplicationPolicyId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const properties2: coreHttp.OperationParameter = {
  parameterPath: "properties",
  mapper: Mappers.ObjectReplicationPolicy
};

export const encryptionScope: coreHttp.OperationParameter = {
  parameterPath: "encryptionScope",
  mapper: Mappers.EncryptionScope
};

export const encryptionScopeName: coreHttp.OperationURLParameter = {
  parameterPath: "encryptionScopeName",
  mapper: {
    constraints: {
      MaxLength: 63,
      MinLength: 3
    },
    serializedName: "encryptionScopeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const encryptionScope1: coreHttp.OperationParameter = {
  parameterPath: "encryptionScope",
  mapper: Mappers.EncryptionScope
};

export const parameters5: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BlobServiceProperties
};

export const blobServicesName: coreHttp.OperationURLParameter = {
  parameterPath: "blobServicesName",
  mapper: {
    defaultValue: "default",
    isConstant: true,
    serializedName: "BlobServicesName",
    type: {
      name: "String"
    }
  }
};

export const maxpagesize: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "maxpagesize"],
  mapper: {
    serializedName: "$maxpagesize",
    type: {
      name: "String"
    }
  }
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const blobContainer: coreHttp.OperationParameter = {
  parameterPath: "blobContainer",
  mapper: Mappers.BlobContainer
};

export const containerName: coreHttp.OperationURLParameter = {
  parameterPath: "containerName",
  mapper: {
    constraints: {
      MaxLength: 63,
      MinLength: 3
    },
    serializedName: "containerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const blobContainer1: coreHttp.OperationParameter = {
  parameterPath: "blobContainer",
  mapper: Mappers.BlobContainer
};

export const legalHold: coreHttp.OperationParameter = {
  parameterPath: "legalHold",
  mapper: Mappers.LegalHold
};

export const legalHold1: coreHttp.OperationParameter = {
  parameterPath: "legalHold",
  mapper: Mappers.LegalHold
};

export const parameters6: coreHttp.OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: Mappers.ImmutabilityPolicy
};

export const immutabilityPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "immutabilityPolicyName",
  mapper: {
    defaultValue: "default",
    isConstant: true,
    serializedName: "immutabilityPolicyName",
    type: {
      name: "String"
    }
  }
};

export const ifMatch: coreHttp.OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifMatch1: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters7: coreHttp.OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: Mappers.ImmutabilityPolicy
};

export const parameters8: coreHttp.OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: Mappers.LeaseContainerRequest
};

export const parameters9: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.FileServiceProperties
};

export const fileServicesName: coreHttp.OperationURLParameter = {
  parameterPath: "fileServicesName",
  mapper: {
    defaultValue: "default",
    isConstant: true,
    serializedName: "FileServicesName",
    type: {
      name: "String"
    }
  }
};

export const maxpagesize1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "maxpagesize"],
  mapper: {
    serializedName: "$maxpagesize",
    type: {
      name: "String"
    }
  }
};

export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const expand2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    defaultValue: "deleted",
    isConstant: true,
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const fileShare: coreHttp.OperationParameter = {
  parameterPath: "fileShare",
  mapper: Mappers.FileShare
};

export const shareName: coreHttp.OperationURLParameter = {
  parameterPath: "shareName",
  mapper: {
    constraints: {
      MaxLength: 63,
      MinLength: 3
    },
    serializedName: "shareName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const fileShare1: coreHttp.OperationParameter = {
  parameterPath: "fileShare",
  mapper: Mappers.FileShare
};

export const expand3: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    defaultValue: "stats",
    isConstant: true,
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const deletedShare: coreHttp.OperationParameter = {
  parameterPath: "deletedShare",
  mapper: Mappers.DeletedShare
};
