/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/** Result of the request to list Storage operations. It contains a list of operations and a URL link to get the next set of results. */
export interface OperationListResult {
  /** List of Storage operations supported by the Storage resource provider. */
  value?: Operation[];
}

/** Storage REST API operation definition. */
export interface Operation {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** Display metadata associated with the operation. */
  display?: OperationDisplay;
  /** The origin of operations. */
  origin?: string;
  /** One property of operation, include metric specifications. */
  serviceSpecification?: ServiceSpecification;
}

/** Display metadata associated with the operation. */
export interface OperationDisplay {
  /** Service provider: Microsoft Storage. */
  provider?: string;
  /** Resource on which the operation is performed etc. */
  resource?: string;
  /** Type of operation: get, read, delete, etc. */
  operation?: string;
  /** Description of the operation. */
  description?: string;
}

/** One property of operation, include metric specifications. */
export interface ServiceSpecification {
  /** Metric specifications of operation. */
  metricSpecifications?: MetricSpecification[];
}

/** Metric specification of operation. */
export interface MetricSpecification {
  /** Name of metric specification. */
  name?: string;
  /** Display name of metric specification. */
  displayName?: string;
  /** Display description of metric specification. */
  displayDescription?: string;
  /** Unit could be Bytes or Count. */
  unit?: string;
  /** Dimensions of blobs, including blob type and access tier. */
  dimensions?: Dimension[];
  /** Aggregation type could be Average. */
  aggregationType?: string;
  /** The property to decide fill gap with zero or not. */
  fillGapWithZero?: boolean;
  /** The category this metric specification belong to, could be Capacity. */
  category?: string;
  /** Account Resource Id. */
  resourceIdDimensionNameOverride?: string;
}

/** Dimension of blobs, possibly be blob type or access tier. */
export interface Dimension {
  /** Display name of dimension. */
  name?: string;
  /** Display name of dimension. */
  displayName?: string;
}

/** The response from the List Storage SKUs operation. */
export interface StorageSkuListResult {
  /**
   * Get the list result of storage SKUs and their properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: SkuInformation[];
}

/** Storage SKU and its properties */
export interface SkuInformation {
  /** The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType. */
  name: SkuName;
  /**
   * The SKU tier. This is based on the SKU name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: SkuTier;
  /**
   * The type of the resource, usually it is 'storageAccounts'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * Indicates the type of storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kind?: Kind;
  /**
   * The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locations?: string[];
  /**
   * The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: SKUCapability[];
  /** The restrictions because of which SKU cannot be used. This is empty if there are no restrictions. */
  restrictions?: Restriction[];
}

/** The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc. */
export interface SKUCapability {
  /**
   * The name of capability, The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * A string value to indicate states of given capability. Possibly 'true' or 'false'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
}

/** The restriction because of which SKU cannot be used. */
export interface Restriction {
  /**
   * The type of restrictions. As of now only possible value for this is location.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly values?: string[];
  /** The reason for the restriction. As of now this can be "QuotaId" or "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The "NotAvailableForSubscription" is related to capacity at DC. */
  reasonCode?: ReasonCode;
}

/** The parameters used to check the availability of the storage account name. */
export interface StorageAccountCheckNameAvailabilityParameters {
  /** The storage account name. */
  name: string;
  /** The type of resource, Microsoft.Storage/storageAccounts */
  type: "Microsoft.Storage/storageAccounts";
}

/** The CheckNameAvailability operation response. */
export interface CheckNameAvailabilityResult {
  /**
   * Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nameAvailable?: boolean;
  /**
   * Gets the reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: Reason;
  /**
   * Gets an error message explaining the Reason value in more detail.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** The parameters used when creating a storage account. */
export interface StorageAccountCreateParameters {
  /** Required. Gets or sets the SKU name. */
  sku: Sku;
  /** Required. Indicates the type of storage account. */
  kind: Kind;
  /** Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed. */
  location: string;
  /** Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters. */
  tags?: { [propertyName: string]: string };
  /** The identity of the resource. */
  identity?: Identity;
  /** User domain assigned to the storage account. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property. */
  customDomain?: CustomDomain;
  /** Not applicable. Azure Storage encryption is enabled for all storage accounts and cannot be disabled. */
  encryption?: Encryption;
  /** Network rule set */
  networkRuleSet?: NetworkRuleSet;
  /** Required for storage accounts where kind = BlobStorage. The access tier used for billing. */
  accessTier?: AccessTier;
  /** Provides the identity based authentication settings for Azure Files. */
  azureFilesIdentityBasedAuthentication?: AzureFilesIdentityBasedAuthentication;
  /** Allows https traffic only to storage service if sets to true. The default value is true since API version 2019-04-01. */
  enableHttpsTrafficOnly?: boolean;
  /** Account HierarchicalNamespace enabled if sets to true. */
  isHnsEnabled?: boolean;
  /** Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled. */
  largeFileSharesState?: LargeFileSharesState;
  /** Maintains information about the network routing choice opted by the user for data transfer */
  routingPreference?: RoutingPreference;
}

/** The SKU of the storage account. */
export interface Sku {
  /** The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType. */
  name: SkuName;
  /**
   * The SKU tier. This is based on the SKU name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: SkuTier;
}

/** Identity for the resource. */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The identity type. */
  type: "SystemAssigned";
}

/** The custom domain assigned to this storage account. This can be set via Update. */
export interface CustomDomain {
  /** Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source. */
  name: string;
  /** Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates. */
  useSubDomainName?: boolean;
}

/** The encryption settings on the storage account. */
export interface Encryption {
  /** List of services which support encryption. */
  services?: EncryptionServices;
  /** The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault */
  keySource: KeySource;
  /** Properties provided by key vault. */
  keyVaultProperties?: KeyVaultProperties;
}

/** A list of services that support encryption. */
export interface EncryptionServices {
  /** The encryption function of the blob storage service. */
  blob?: EncryptionService;
  /** The encryption function of the file storage service. */
  file?: EncryptionService;
  /** The encryption function of the table storage service. */
  table?: EncryptionService;
  /** The encryption function of the queue storage service. */
  queue?: EncryptionService;
}

/** A service that allows server-side encryption to be used. */
export interface EncryptionService {
  /** A boolean indicating whether or not the service encrypts the data as it is stored. */
  enabled?: boolean;
  /**
   * Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastEnabledTime?: Date;
  /** Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used. */
  keyType?: KeyType;
}

/** Properties of key vault. */
export interface KeyVaultProperties {
  /** The name of KeyVault key. */
  keyName?: string;
  /** The version of KeyVault key. */
  keyVersion?: string;
  /** The Uri of KeyVault. */
  keyVaultUri?: string;
  /**
   * The object identifier of the current versioned Key Vault Key in use.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentVersionedKeyIdentifier?: string;
  /**
   * Timestamp of last rotation of the Key Vault Key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastKeyRotationTimestamp?: Date;
}

/** Network rule set */
export interface NetworkRuleSet {
  /** Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics. */
  bypass?: Bypass;
  /** Sets the virtual network rules */
  virtualNetworkRules?: VirtualNetworkRule[];
  /** Sets the IP ACL rules */
  ipRules?: IPRule[];
  /** Specifies the default action of allow or deny when no other rules match. */
  defaultAction: DefaultAction;
}

/** Virtual Network rule. */
export interface VirtualNetworkRule {
  /** Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}. */
  virtualNetworkResourceId: string;
  /** The action of virtual network rule. */
  action?: "Allow";
  /** Gets the state of virtual network rule. */
  state?: State;
}

/** IP rule with specific IP or IP range in CIDR format. */
export interface IPRule {
  /** Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed. */
  iPAddressOrRange: string;
  /** The action of IP ACL rule. */
  action?: "Allow";
}

/** Settings for Azure Files identity based authentication. */
export interface AzureFilesIdentityBasedAuthentication {
  /** Indicates the directory service used. */
  directoryServiceOptions: DirectoryServiceOptions;
  /** Required if choose AD. */
  activeDirectoryProperties?: ActiveDirectoryProperties;
}

/** Settings properties for Active Directory (AD). */
export interface ActiveDirectoryProperties {
  /** Specifies the primary domain that the AD DNS server is authoritative for. */
  domainName: string;
  /** Specifies the NetBIOS domain name. */
  netBiosDomainName: string;
  /** Specifies the Active Directory forest to get. */
  forestName: string;
  /** Specifies the domain GUID. */
  domainGuid: string;
  /** Specifies the security identifier (SID). */
  domainSid: string;
  /** Specifies the security identifier (SID) for Azure Storage. */
  azureStorageSid: string;
}

/** Routing preference defines the type of network, either microsoft or internet routing to be used to deliver the user data, the default option is microsoft routing */
export interface RoutingPreference {
  /** Routing Choice defines the kind of network routing opted by the user. */
  routingChoice?: RoutingChoice;
  /** A boolean flag which indicates whether microsoft routing storage endpoints are to be published */
  publishMicrosoftEndpoints?: boolean;
  /** A boolean flag which indicates whether internet routing storage endpoints are to be published */
  publishInternetEndpoints?: boolean;
}

/** The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object. */
export interface Endpoints {
  /**
   * Gets the blob endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blob?: string;
  /**
   * Gets the queue endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly queue?: string;
  /**
   * Gets the table endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly table?: string;
  /**
   * Gets the file endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly file?: string;
  /**
   * Gets the web endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly web?: string;
  /**
   * Gets the dfs endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dfs?: string;
  /** Gets the microsoft routing storage endpoints. */
  microsoftEndpoints?: StorageAccountMicrosoftEndpoints;
  /** Gets the internet routing storage endpoints */
  internetEndpoints?: StorageAccountInternetEndpoints;
}

/** The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object via a microsoft routing endpoint. */
export interface StorageAccountMicrosoftEndpoints {
  /**
   * Gets the blob endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blob?: string;
  /**
   * Gets the queue endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly queue?: string;
  /**
   * Gets the table endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly table?: string;
  /**
   * Gets the file endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly file?: string;
  /**
   * Gets the web endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly web?: string;
  /**
   * Gets the dfs endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dfs?: string;
}

/** The URIs that are used to perform a retrieval of a public blob, file, web or dfs object via a internet routing endpoint. */
export interface StorageAccountInternetEndpoints {
  /**
   * Gets the blob endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blob?: string;
  /**
   * Gets the file endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly file?: string;
  /**
   * Gets the web endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly web?: string;
  /**
   * Gets the dfs endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dfs?: string;
}

/** Statistics related to replication for storage account's Blob, Table, Queue and File services. It is only available when geo-redundant replication is enabled for the storage account. */
export interface GeoReplicationStats {
  /**
   * The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location is temporarily unavailable.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: GeoReplicationStatus;
  /**
   * All primary writes preceding this UTC date/time value are guaranteed to be available for read operations. Primary writes following this point in time may or may not be available for reads. Element may be default value if value of LastSyncTime is not available, this can happen if secondary is offline or we are in bootstrap.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSyncTime?: Date;
  /**
   * A boolean flag which indicates whether or not account failover is supported for the account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly canFailover?: boolean;
}

/** The Private Endpoint resource. */
export interface PrivateEndpoint {
  /**
   * The ARM identifier for Private Endpoint
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** A collection of information about the state of the connection between service consumer and provider. */
export interface PrivateLinkServiceConnectionState {
  /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
  status?: PrivateEndpointServiceConnectionStatus;
  /** The reason for approval/rejection of the connection. */
  description?: string;
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionRequired?: string;
}

export interface Resource {
  /**
   * Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Blob restore status. */
export interface BlobRestoreStatus {
  /**
   * The status of blob restore progress. Possible values are: - InProgress: Indicates that blob restore is ongoing. - Complete: Indicates that blob restore has been completed successfully. - Failed: Indicates that blob restore is failed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: BlobRestoreProgressStatus;
  /**
   * Failure reason when blob restore is failed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failureReason?: string;
  /**
   * Id for tracking blob restore request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restoreId?: string;
  /**
   * Blob restore request parameters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly parameters?: BlobRestoreParameters;
}

/** Blob restore parameters */
export interface BlobRestoreParameters {
  /** Restore blob to the specified time. */
  timeToRestore: Date;
  /** Blob ranges to restore. */
  blobRanges: BlobRestoreRange[];
}

/** Blob range */
export interface BlobRestoreRange {
  /** Blob start range. This is inclusive. Empty means account start. */
  startRange: string;
  /** Blob end range. This is exclusive. Empty means account end. */
  endRange: string;
}

/** The parameters that can be provided when updating the storage account properties. */
export interface StorageAccountUpdateParameters {
  /** Gets or sets the SKU name. Note that the SKU name cannot be updated to Standard_ZRS, Premium_LRS or Premium_ZRS, nor can accounts of those SKU names be updated to any other value. */
  sku?: Sku;
  /** Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters. */
  tags?: { [propertyName: string]: string };
  /** The identity of the resource. */
  identity?: Identity;
  /** Optional. Indicates the type of storage account. Currently only StorageV2 value supported by server. */
  kind?: Kind;
  /** Custom domain assigned to the storage account by the user. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property. */
  customDomain?: CustomDomain;
  /** Provides the encryption settings on the account. The default setting is unencrypted. */
  encryption?: Encryption;
  /** Required for storage accounts where kind = BlobStorage. The access tier used for billing. */
  accessTier?: AccessTier;
  /** Provides the identity based authentication settings for Azure Files. */
  azureFilesIdentityBasedAuthentication?: AzureFilesIdentityBasedAuthentication;
  /** Allows https traffic only to storage service if sets to true. */
  enableHttpsTrafficOnly?: boolean;
  /** Network rule set */
  networkRuleSet?: NetworkRuleSet;
  /** Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled. */
  largeFileSharesState?: LargeFileSharesState;
  /** Maintains information about the network routing choice opted by the user for data transfer */
  routingPreference?: RoutingPreference;
}

/** The response from the List Storage Accounts operation. */
export interface StorageAccountListResult {
  /**
   * Gets the list of storage accounts and their properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: StorageAccount[];
  /**
   * Request URL that can be used to query next page of storage accounts. Returned when total number of requested storage accounts exceed maximum page size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The response from the ListKeys operation. */
export interface StorageAccountListKeysResult {
  /**
   * Gets the list of storage account keys and their properties for the specified storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keys?: StorageAccountKey[];
}

/** An access key for the storage account. */
export interface StorageAccountKey {
  /**
   * Name of the key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keyName?: string;
  /**
   * Base 64-encoded value of the key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
  /**
   * Permissions for the key -- read-only or full permissions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly permissions?: KeyPermission;
}

/** The parameters used to regenerate the storage account key. */
export interface StorageAccountRegenerateKeyParameters {
  /** The name of storage keys that want to be regenerated, possible values are key1, key2, kerb1, kerb2. */
  keyName: string;
}

/** The response from the List Usages operation. */
export interface UsageListResult {
  /** Gets or sets the list of Storage Resource Usages. */
  value?: Usage[];
}

/** Describes Storage Resource Usage. */
export interface Usage {
  /**
   * Gets the unit of measurement.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unit?: UsageUnit;
  /**
   * Gets the current count of the allocated resources in the subscription.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentValue?: number;
  /**
   * Gets the maximum count of the resources that can be allocated in the subscription.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly limit?: number;
  /**
   * Gets the name of the type of usage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: UsageName;
}

/** The usage names that can be used; currently limited to StorageAccount. */
export interface UsageName {
  /**
   * Gets a string describing the resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
  /**
   * Gets a localized string describing the resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly localizedValue?: string;
}

/** The parameters to list SAS credentials of a storage account. */
export interface AccountSasParameters {
  /** The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f). */
  services: Services;
  /** The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files. */
  resourceTypes: SignedResourceTypes;
  /** The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p). */
  permissions: Permissions;
  /** An IP address or a range of IP addresses from which to accept requests. */
  iPAddressOrRange?: string;
  /** The protocol permitted for a request made with the account SAS. */
  protocols?: HttpProtocol;
  /** The time at which the SAS becomes valid. */
  sharedAccessStartTime?: Date;
  /** The time at which the shared access signature becomes invalid. */
  sharedAccessExpiryTime: Date;
  /** The key to sign the account SAS token with. */
  keyToSign?: string;
}

/** The List SAS credentials operation response. */
export interface ListAccountSasResponse {
  /**
   * List SAS credentials of storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accountSasToken?: string;
}

/** The parameters to list service SAS credentials of a specific resource. */
export interface ServiceSasParameters {
  /** The canonical path to the signed resource. */
  canonicalizedResource: string;
  /** The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s). */
  resource?: SignedResource;
  /** The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p). */
  permissions?: Permissions;
  /** An IP address or a range of IP addresses from which to accept requests. */
  iPAddressOrRange?: string;
  /** The protocol permitted for a request made with the account SAS. */
  protocols?: HttpProtocol;
  /** The time at which the SAS becomes valid. */
  sharedAccessStartTime?: Date;
  /** The time at which the shared access signature becomes invalid. */
  sharedAccessExpiryTime?: Date;
  /** A unique value up to 64 characters in length that correlates to an access policy specified for the container, queue, or table. */
  identifier?: string;
  /** The start of partition key. */
  partitionKeyStart?: string;
  /** The end of partition key. */
  partitionKeyEnd?: string;
  /** The start of row key. */
  rowKeyStart?: string;
  /** The end of row key. */
  rowKeyEnd?: string;
  /** The key to sign the account SAS token with. */
  keyToSign?: string;
  /** The response header override for cache control. */
  cacheControl?: string;
  /** The response header override for content disposition. */
  contentDisposition?: string;
  /** The response header override for content encoding. */
  contentEncoding?: string;
  /** The response header override for content language. */
  contentLanguage?: string;
  /** The response header override for content type. */
  contentType?: string;
}

/** The List service SAS credentials operation response. */
export interface ListServiceSasResponse {
  /**
   * List service SAS credentials of specific resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceSasToken?: string;
}

/** The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts. */
export interface ManagementPolicySchema {
  /** The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts. */
  rules: ManagementPolicyRule[];
}

/** An object that wraps the Lifecycle rule. Each rule is uniquely defined by name. */
export interface ManagementPolicyRule {
  /** Rule is enabled if set to true. */
  enabled?: boolean;
  /** A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy. */
  name: string;
  /** The valid value is Lifecycle */
  type: RuleType;
  /** An object that defines the Lifecycle rule. */
  definition: ManagementPolicyDefinition;
}

/** An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set. */
export interface ManagementPolicyDefinition {
  /** An object that defines the action set. */
  actions: ManagementPolicyAction;
  /** An object that defines the filter set. */
  filters?: ManagementPolicyFilter;
}

/** Actions are applied to the filtered blobs when the execution condition is met. */
export interface ManagementPolicyAction {
  /** The management policy action for base blob */
  baseBlob?: ManagementPolicyBaseBlob;
  /** The management policy action for snapshot */
  snapshot?: ManagementPolicySnapShot;
}

/** Management policy action for base blob. */
export interface ManagementPolicyBaseBlob {
  /** The function to tier blobs to cool storage. Support blobs currently at Hot tier */
  tierToCool?: DateAfterModification;
  /** The function to tier blobs to archive storage. Support blobs currently at Hot or Cool tier */
  tierToArchive?: DateAfterModification;
  /** The function to delete the blob */
  delete?: DateAfterModification;
}

/** Object to define the number of days after last modification. */
export interface DateAfterModification {
  /** Value indicating the age in days after last modification */
  daysAfterModificationGreaterThan: number;
}

/** Management policy action for snapshot. */
export interface ManagementPolicySnapShot {
  /** The function to delete the blob snapshot */
  delete?: DateAfterCreation;
}

/** Object to define the number of days after creation. */
export interface DateAfterCreation {
  /** Value indicating the age in days after creation */
  daysAfterCreationGreaterThan: number;
}

/** Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters. */
export interface ManagementPolicyFilter {
  /** An array of strings for prefixes to be match. */
  prefixMatch?: string[];
  /** An array of predefined enum values. Only blockBlob is supported. */
  blobTypes: string[];
  /** An array of blob index tag based filters, there can be at most 10 tag filters */
  blobIndexMatch?: TagFilter[];
}

/** Blob index tag based filtering for blob objects */
export interface TagFilter {
  /** This is the filter tag name, it can have 1 - 128 characters */
  name: string;
  /** This is the comparison operator which is used for object comparison and filtering. Only == (equality operator) is currently supported */
  op: string;
  /** This is the filter tag value field used for tag based filtering, it can have 0 - 256 characters */
  value: string;
}

/** List of private endpoint connection associated with the specified storage account */
export interface PrivateEndpointConnectionListResult {
  /** Array of private endpoint connections */
  value?: PrivateEndpointConnection[];
}

/** An error response from the storage resource provider. */
export interface ErrorResponse {
  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
  code?: string;
  /** A message describing the error, intended to be suitable for display in a user interface. */
  message?: string;
}

/** A list of private link resources */
export interface PrivateLinkResourceListResult {
  /** Array of private link resources */
  value?: PrivateLinkResource[];
}

/** List storage account object replication policies. */
export interface ObjectReplicationPoliciesDef {
  /** The replication policy between two storage accounts. */
  value?: ObjectReplicationPolicy[];
}

/** The replication policy rule between two containers. */
export interface ObjectReplicationPolicyRule {
  /** Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account. */
  ruleId?: string;
  /** Required. Source container name. */
  sourceContainer: string;
  /** Required. Destination container name. */
  destinationContainer: string;
  /** Optional. An object that defines the filter set. */
  filters?: ObjectReplicationPolicyFilter;
}

/** Filters limit replication to a subset of blobs within the storage account. A logical OR is performed on values in the filter. If multiple filters are defined, a logical AND is performed on all filters. */
export interface ObjectReplicationPolicyFilter {
  /** Optional. Filters the results to replicate only blobs whose names begin with the specified prefix. */
  prefixMatch?: string[];
  /** Blobs created after the time will be replicated to the destination. It must be in datetime format 'yyyy-MM-ddTHH:mm:ssZ'. Example: 2020-02-19T16:05:00Z */
  minCreationTime?: string;
}

/** The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'. */
export interface EncryptionScopeKeyVaultProperties {
  /** The object identifier for a key vault key object. When applied, the encryption scope will use the key referenced by the identifier to enable customer-managed key support on this encryption scope. */
  keyUri?: string;
}

/** List of encryption scopes requested, and if paging is required, a URL to the next page of encryption scopes. */
export interface EncryptionScopeListResult {
  /**
   * List of encryption scopes requested.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: EncryptionScope[];
  /**
   * Request URL that can be used to query next page of encryption scopes. Returned when total number of requested encryption scopes exceeds the maximum page size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

export interface BlobServiceItems {
  /**
   * List of blob services returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: BlobServiceProperties[];
}

/** Sets the CORS rules. You can include up to five CorsRule elements in the request. */
export interface CorsRules {
  /** The List of CORS rules. You can include up to five CorsRule elements in the request. */
  corsRules?: CorsRule[];
}

/** Specifies a CORS rule for the Blob service. */
export interface CorsRule {
  /** Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*" to allow all domains */
  allowedOrigins: string[];
  /** Required if CorsRule element is present. A list of HTTP methods that are allowed to be executed by the origin. */
  allowedMethods: CorsRuleAllowedMethodsItem[];
  /** Required if CorsRule element is present. The number of seconds that the client/browser should cache a preflight response. */
  maxAgeInSeconds: number;
  /** Required if CorsRule element is present. A list of response headers to expose to CORS clients. */
  exposedHeaders: string[];
  /** Required if CorsRule element is present. A list of headers allowed to be part of the cross-origin request. */
  allowedHeaders: string[];
}

/** The service properties for soft delete. */
export interface DeleteRetentionPolicy {
  /** Indicates whether DeleteRetentionPolicy is enabled. */
  enabled?: boolean;
  /** Indicates the number of days that the deleted item should be retained. The minimum specified value can be 1 and the maximum value can be 365. */
  days?: number;
}

/** The blob service properties for change feed events. */
export interface ChangeFeed {
  /** Indicates whether change feed event logging is enabled for the Blob service. */
  enabled?: boolean;
}

/** The blob service properties for blob restore policy */
export interface RestorePolicyProperties {
  /** Blob restore is enabled if set to true. */
  enabled: boolean;
  /** how long this blob can be restored. It should be great than zero and less than DeleteRetentionPolicy.days. */
  days?: number;
  /**
   * Returns the date and time the restore policy was last enabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastEnabledTime?: Date;
}

/** Response schema. Contains list of blobs returned, and if paging is requested or required, a URL to next page of containers. */
export interface ListContainerItems {
  /**
   * List of blobs containers returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ListContainerItem[];
  /**
   * Request URL that can be used to query next page of containers. Returned when total number of requested containers exceed maximum page size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The properties of an ImmutabilityPolicy of a blob container. */
export interface ImmutabilityPolicyProperties {
  /**
   * ImmutabilityPolicy Etag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /**
   * The ImmutabilityPolicy update history of the blob container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updateHistory?: UpdateHistoryProperty[];
  /** The immutability period for the blobs in the container since the policy creation, in days. */
  immutabilityPeriodSinceCreationInDays?: number;
  /**
   * The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: ImmutabilityPolicyState;
  /** This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API */
  allowProtectedAppendWrites?: boolean;
}

/** An update history of the ImmutabilityPolicy of a blob container. */
export interface UpdateHistoryProperty {
  /**
   * The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly update?: ImmutabilityPolicyUpdateType;
  /**
   * The immutability period for the blobs in the container since the policy creation, in days.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly immutabilityPeriodSinceCreationInDays?: number;
  /**
   * Returns the date and time the ImmutabilityPolicy was updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timestamp?: Date;
  /**
   * Returns the Object ID of the user who updated the ImmutabilityPolicy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectIdentifier?: string;
  /**
   * Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * Returns the User Principal Name of the user who updated the ImmutabilityPolicy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly upn?: string;
}

/** The LegalHold property of a blob container. */
export interface LegalHoldProperties {
  /**
   * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasLegalHold?: boolean;
  /** The list of LegalHold tags of a blob container. */
  tags?: TagProperty[];
}

/** A tag of the LegalHold of a blob container. */
export interface TagProperty {
  /**
   * The tag value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tag?: string;
  /**
   * Returns the date and time the tag was added.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timestamp?: Date;
  /**
   * Returns the Object ID of the user who added the tag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectIdentifier?: string;
  /**
   * Returns the Tenant ID that issued the token for the user who added the tag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * Returns the User Principal Name of the user who added the tag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly upn?: string;
}

/** The LegalHold property of a blob container. */
export interface LegalHold {
  /**
   * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasLegalHold?: boolean;
  /** Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP. */
  tags: string[];
}

/** Lease Container request schema. */
export interface LeaseContainerRequest {
  /** Specifies the lease action. Can be one of the available actions. */
  action: LeaseContainerRequestAction;
  /** Identifies the lease. Can be specified in any valid GUID string format. */
  leaseId?: string;
  /** Optional. For a break action, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60. */
  breakPeriod?: number;
  /** Required for acquire. Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. */
  leaseDuration?: number;
  /** Optional for acquire, required for change. Proposed lease ID, in a GUID string format. */
  proposedLeaseId?: string;
}

/** Lease Container response schema. */
export interface LeaseContainerResponse {
  /** Returned unique lease ID that must be included with any request to delete the container, or to renew, change, or release the lease. */
  leaseId?: string;
  /** Approximate time remaining in the lease period, in seconds. */
  leaseTimeSeconds?: string;
}

export interface FileServiceItems {
  /**
   * List of file services returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: FileServiceProperties[];
}

/** An error response from the Storage service. */
export interface CloudError {
  /** An error response from the Storage service. */
  error?: CloudErrorBody;
}

/** An error response from the Storage service. */
export interface CloudErrorBody {
  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
  code?: string;
  /** A message describing the error, intended to be suitable for display in a user interface. */
  message?: string;
  /** The target of the particular error. For example, the name of the property in error. */
  target?: string;
  /** A list of additional details about the error. */
  details?: CloudErrorBody[];
}

/** Response schema. Contains list of shares returned, and if paging is requested or required, a URL to next page of shares. */
export interface FileShareItems {
  /**
   * List of file shares returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: FileShareItem[];
  /**
   * Request URL that can be used to query next page of shares. Returned when total number of requested shares exceed maximum page size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The deleted share to be restored. */
export interface DeletedShare {
  /** Required. Identify the name of the deleted share that will be restored. */
  deletedShareName: string;
  /** Required. Identify the version of the deleted share that will be restored. */
  deletedShareVersion: string;
}

/** The Private Endpoint Connection resource. */
export type PrivateEndpointConnection = Resource & {
  /** The resource of private end point. */
  privateEndpoint?: PrivateEndpoint;
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of the private endpoint connection resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
};

/** The resource model definition for a ARM tracked top level resource */
export type TrackedResource = Resource & {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
};

/** The Get Storage Account ManagementPolicies operation response. */
export type ManagementPolicy = Resource & {
  /**
   * Returns the date and time the ManagementPolicies was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** The Storage Account ManagementPolicy, in JSON format. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts. */
  policy?: ManagementPolicySchema;
};

/** A private link resource */
export type PrivateLinkResource = Resource & {
  /**
   * The private link resource group id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * The private link resource required member names.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /** The private link resource Private link DNS zone name. */
  requiredZoneNames?: string[];
};

/** The replication policy between two storage accounts. Multiple rules can be defined in one policy. */
export type ObjectReplicationPolicy = Resource & {
  /**
   * A unique id for object replication policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly policyId?: string;
  /**
   * Indicates when the policy is enabled on the source account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enabledTime?: Date;
  /** Required. Source account name. */
  sourceAccount?: string;
  /** Required. Destination account name. */
  destinationAccount?: string;
  /** The storage account object replication rules. */
  rules?: ObjectReplicationPolicyRule[];
};

/** The Encryption Scope resource. */
export type EncryptionScope = Resource & {
  /** The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault. */
  source?: EncryptionScopeSource;
  /** The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled. */
  state?: EncryptionScopeState;
  /**
   * Gets the creation date and time of the encryption scope in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationTime?: Date;
  /**
   * Gets the last modification date and time of the encryption scope in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'. */
  keyVaultProperties?: EncryptionScopeKeyVaultProperties;
};

/** The properties of a storage account’s Blob service. */
export type BlobServiceProperties = Resource & {
  /**
   * Sku name and tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: Sku;
  /** Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service. */
  cors?: CorsRules;
  /** DefaultServiceVersion indicates the default version to use for requests to the Blob service if an incoming request’s version is not specified. Possible values include version 2008-10-27 and all more recent versions. */
  defaultServiceVersion?: string;
  /** The blob service properties for blob soft delete. */
  deleteRetentionPolicy?: DeleteRetentionPolicy;
  /** Versioning is enabled if set to true. */
  isVersioningEnabled?: boolean;
  /** Deprecated in favor of isVersioningEnabled property. */
  automaticSnapshotPolicyEnabled?: boolean;
  /** The blob service properties for change feed events. */
  changeFeed?: ChangeFeed;
  /** The blob service properties for blob restore policy. */
  restorePolicy?: RestorePolicyProperties;
  /** The blob service properties for container soft delete. */
  containerDeleteRetentionPolicy?: DeleteRetentionPolicy;
};

/** The resource model definition for a Azure Resource Manager resource with an etag. */
export type AzureEntityResource = Resource & {
  /**
   * Resource Etag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
};

/** The properties of File services in storage account. */
export type FileServiceProperties = Resource & {
  /**
   * Sku name and tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: Sku;
  /** Specifies CORS rules for the File service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the File service. */
  cors?: CorsRules;
  /** The file service properties for share soft delete. */
  shareDeleteRetentionPolicy?: DeleteRetentionPolicy;
};

/** The storage account. */
export type StorageAccount = TrackedResource & {
  /**
   * Gets the SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: Sku;
  /**
   * Gets the Kind.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kind?: Kind;
  /** The identity of the resource. */
  identity?: Identity;
  /**
   * Gets the status of the storage account at the time the operation was called.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object. Note that Standard_ZRS and Premium_LRS accounts only return the blob endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryEndpoints?: Endpoints;
  /**
   * Gets the location of the primary data center for the storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryLocation?: string;
  /**
   * Gets the status indicating whether the primary location of the storage account is available or unavailable.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusOfPrimary?: AccountStatus;
  /**
   * Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastGeoFailoverTime?: Date;
  /**
   * Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secondaryLocation?: string;
  /**
   * Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusOfSecondary?: AccountStatus;
  /**
   * Gets the creation date and time of the storage account in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationTime?: Date;
  /**
   * Gets the custom domain the user assigned to this storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customDomain?: CustomDomain;
  /**
   * Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object from the secondary location of the storage account. Only available if the SKU name is Standard_RAGRS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secondaryEndpoints?: Endpoints;
  /**
   * Gets the encryption settings on the account. If unspecified, the account is unencrypted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encryption?: Encryption;
  /**
   * Required for storage accounts where kind = BlobStorage. The access tier used for billing.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessTier?: AccessTier;
  /** Provides the identity based authentication settings for Azure Files. */
  azureFilesIdentityBasedAuthentication?: AzureFilesIdentityBasedAuthentication;
  /** Allows https traffic only to storage service if sets to true. */
  enableHttpsTrafficOnly?: boolean;
  /**
   * Network rule set
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkRuleSet?: NetworkRuleSet;
  /** Account HierarchicalNamespace enabled if sets to true. */
  isHnsEnabled?: boolean;
  /**
   * Geo Replication Stats
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly geoReplicationStats?: GeoReplicationStats;
  /**
   * If the failover is in progress, the value will be true, otherwise, it will be null.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failoverInProgress?: boolean;
  /** Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled. */
  largeFileSharesState?: LargeFileSharesState;
  /**
   * List of private endpoint connection associated with the specified storage account
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /** Maintains information about the network routing choice opted by the user for data transfer */
  routingPreference?: RoutingPreference;
  /**
   * Blob restore status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blobRestoreStatus?: BlobRestoreStatus;
};

/** The blob container properties be listed out. */
export type ListContainerItem = AzureEntityResource & {
  /** Default the container to use specified encryption scope for all writes. */
  defaultEncryptionScope?: string;
  /** Block override of encryption scope from the container default. */
  denyEncryptionScopeOverride?: boolean;
  /** Specifies whether data in the container may be accessed publicly and the level of access. */
  publicAccess?: PublicAccess;
  /**
   * Returns the date and time the container was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /**
   * The lease status of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseStatus?: LeaseStatus;
  /**
   * Lease state of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseState?: LeaseState;
  /**
   * Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseDuration?: LeaseDuration;
  /** A name-value pair to associate with the container as metadata. */
  metadata?: { [propertyName: string]: string };
  /**
   * The ImmutabilityPolicy property of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly immutabilityPolicy?: ImmutabilityPolicyProperties;
  /**
   * The LegalHold property of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly legalHold?: LegalHoldProperties;
  /**
   * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasLegalHold?: boolean;
  /**
   * The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasImmutabilityPolicy?: boolean;
};

/** Properties of the blob container, including Id, resource name, resource type, Etag. */
export type BlobContainer = AzureEntityResource & {
  /** Default the container to use specified encryption scope for all writes. */
  defaultEncryptionScope?: string;
  /** Block override of encryption scope from the container default. */
  denyEncryptionScopeOverride?: boolean;
  /** Specifies whether data in the container may be accessed publicly and the level of access. */
  publicAccess?: PublicAccess;
  /**
   * Returns the date and time the container was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /**
   * The lease status of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseStatus?: LeaseStatus;
  /**
   * Lease state of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseState?: LeaseState;
  /**
   * Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseDuration?: LeaseDuration;
  /** A name-value pair to associate with the container as metadata. */
  metadata?: { [propertyName: string]: string };
  /**
   * The ImmutabilityPolicy property of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly immutabilityPolicy?: ImmutabilityPolicyProperties;
  /**
   * The LegalHold property of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly legalHold?: LegalHoldProperties;
  /**
   * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasLegalHold?: boolean;
  /**
   * The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasImmutabilityPolicy?: boolean;
};

/** The ImmutabilityPolicy property of a blob container, including Id, resource name, resource type, Etag. */
export type ImmutabilityPolicy = AzureEntityResource & {
  /** The immutability period for the blobs in the container since the policy creation, in days. */
  immutabilityPeriodSinceCreationInDays?: number;
  /**
   * The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: ImmutabilityPolicyState;
  /** This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API */
  allowProtectedAppendWrites?: boolean;
};

/** The file share properties be listed out. */
export type FileShareItem = AzureEntityResource & {
  /**
   * Returns the date and time the share was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** A name-value pair to associate with the share as metadata. */
  metadata?: { [propertyName: string]: string };
  /** The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400. */
  shareQuota?: number;
  /** The authentication protocol that is used for the file share. Can only be specified when creating a share. */
  enabledProtocols?: EnabledProtocols;
  /** The property is for NFS share only. The default is NoRootSquash. */
  rootSquash?: RootSquashType;
  /**
   * The version of the share.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Indicates whether the share was deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deleted?: boolean;
  /**
   * The deleted time if the share was deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deletedTime?: Date;
  /**
   * Remaining retention days for share that was soft deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly remainingRetentionDays?: number;
  /** Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium. */
  accessTier?: ShareAccessTier;
  /**
   * Indicates the last modification time for share access tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessTierChangeTime?: Date;
  /**
   * Indicates if there is a pending transition for access tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessTierStatus?: string;
  /**
   * The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly shareUsageBytes?: number;
};

/** Properties of the file share, including Id, resource name, resource type, Etag. */
export type FileShare = AzureEntityResource & {
  /**
   * Returns the date and time the share was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** A name-value pair to associate with the share as metadata. */
  metadata?: { [propertyName: string]: string };
  /** The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400. */
  shareQuota?: number;
  /** The authentication protocol that is used for the file share. Can only be specified when creating a share. */
  enabledProtocols?: EnabledProtocols;
  /** The property is for NFS share only. The default is NoRootSquash. */
  rootSquash?: RootSquashType;
  /**
   * The version of the share.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Indicates whether the share was deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deleted?: boolean;
  /**
   * The deleted time if the share was deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deletedTime?: Date;
  /**
   * Remaining retention days for share that was soft deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly remainingRetentionDays?: number;
  /** Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium. */
  accessTier?: ShareAccessTier;
  /**
   * Indicates the last modification time for share access tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessTierChangeTime?: Date;
  /**
   * Indicates if there is a pending transition for access tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessTierStatus?: string;
  /**
   * The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly shareUsageBytes?: number;
};

/** Defines headers for BlobContainers_createOrUpdateImmutabilityPolicy operation. */
export interface BlobContainersCreateOrUpdateImmutabilityPolicyHeaders {
  /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
  eTag?: string;
}

/** Defines headers for BlobContainers_getImmutabilityPolicy operation. */
export interface BlobContainersGetImmutabilityPolicyHeaders {
  /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
  eTag?: string;
}

/** Defines headers for BlobContainers_deleteImmutabilityPolicy operation. */
export interface BlobContainersDeleteImmutabilityPolicyHeaders {
  /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
  eTag?: string;
}

/** Defines headers for BlobContainers_lockImmutabilityPolicy operation. */
export interface BlobContainersLockImmutabilityPolicyHeaders {
  /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
  eTag?: string;
}

/** Defines headers for BlobContainers_extendImmutabilityPolicy operation. */
export interface BlobContainersExtendImmutabilityPolicyHeaders {
  /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
  eTag?: string;
}

/** Known values of {@link SkuName} that the service accepts. */
export const enum KnownSkuName {
  StandardLRS = "Standard_LRS",
  StandardGRS = "Standard_GRS",
  StandardRagrs = "Standard_RAGRS",
  StandardZRS = "Standard_ZRS",
  PremiumLRS = "Premium_LRS",
  PremiumZRS = "Premium_ZRS",
  StandardGzrs = "Standard_GZRS",
  StandardRagzrs = "Standard_RAGZRS"
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Standard_LRS** \
 * **Standard_GRS** \
 * **Standard_RAGRS** \
 * **Standard_ZRS** \
 * **Premium_LRS** \
 * **Premium_ZRS** \
 * **Standard_GZRS** \
 * **Standard_RAGZRS**
 */
export type SkuName = string;

/** Known values of {@link Kind} that the service accepts. */
export const enum KnownKind {
  Storage = "Storage",
  StorageV2 = "StorageV2",
  BlobStorage = "BlobStorage",
  FileStorage = "FileStorage",
  BlockBlobStorage = "BlockBlobStorage"
}

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Storage** \
 * **StorageV2** \
 * **BlobStorage** \
 * **FileStorage** \
 * **BlockBlobStorage**
 */
export type Kind = string;

/** Known values of {@link ReasonCode} that the service accepts. */
export const enum KnownReasonCode {
  QuotaId = "QuotaId",
  NotAvailableForSubscription = "NotAvailableForSubscription"
}

/**
 * Defines values for ReasonCode. \
 * {@link KnownReasonCode} can be used interchangeably with ReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **QuotaId** \
 * **NotAvailableForSubscription**
 */
export type ReasonCode = string;

/** Known values of {@link KeyType} that the service accepts. */
export const enum KnownKeyType {
  Service = "Service",
  Account = "Account"
}

/**
 * Defines values for KeyType. \
 * {@link KnownKeyType} can be used interchangeably with KeyType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Service** \
 * **Account**
 */
export type KeyType = string;

/** Known values of {@link KeySource} that the service accepts. */
export const enum KnownKeySource {
  MicrosoftStorage = "Microsoft.Storage",
  MicrosoftKeyvault = "Microsoft.Keyvault"
}

/**
 * Defines values for KeySource. \
 * {@link KnownKeySource} can be used interchangeably with KeySource,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Microsoft.Storage** \
 * **Microsoft.Keyvault**
 */
export type KeySource = string;

/** Known values of {@link Bypass} that the service accepts. */
export const enum KnownBypass {
  None = "None",
  Logging = "Logging",
  Metrics = "Metrics",
  AzureServices = "AzureServices"
}

/**
 * Defines values for Bypass. \
 * {@link KnownBypass} can be used interchangeably with Bypass,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **None** \
 * **Logging** \
 * **Metrics** \
 * **AzureServices**
 */
export type Bypass = string;

/** Known values of {@link DirectoryServiceOptions} that the service accepts. */
export const enum KnownDirectoryServiceOptions {
  None = "None",
  Aadds = "AADDS",
  AD = "AD"
}

/**
 * Defines values for DirectoryServiceOptions. \
 * {@link KnownDirectoryServiceOptions} can be used interchangeably with DirectoryServiceOptions,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **None** \
 * **AADDS** \
 * **AD**
 */
export type DirectoryServiceOptions = string;

/** Known values of {@link LargeFileSharesState} that the service accepts. */
export const enum KnownLargeFileSharesState {
  Disabled = "Disabled",
  Enabled = "Enabled"
}

/**
 * Defines values for LargeFileSharesState. \
 * {@link KnownLargeFileSharesState} can be used interchangeably with LargeFileSharesState,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type LargeFileSharesState = string;

/** Known values of {@link RoutingChoice} that the service accepts. */
export const enum KnownRoutingChoice {
  MicrosoftRouting = "MicrosoftRouting",
  InternetRouting = "InternetRouting"
}

/**
 * Defines values for RoutingChoice. \
 * {@link KnownRoutingChoice} can be used interchangeably with RoutingChoice,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **MicrosoftRouting** \
 * **InternetRouting**
 */
export type RoutingChoice = string;

/** Known values of {@link GeoReplicationStatus} that the service accepts. */
export const enum KnownGeoReplicationStatus {
  Live = "Live",
  Bootstrap = "Bootstrap",
  Unavailable = "Unavailable"
}

/**
 * Defines values for GeoReplicationStatus. \
 * {@link KnownGeoReplicationStatus} can be used interchangeably with GeoReplicationStatus,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Live** \
 * **Bootstrap** \
 * **Unavailable**
 */
export type GeoReplicationStatus = string;

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export const enum KnownPrivateEndpointServiceConnectionStatus {
  Pending = "Pending",
  Approved = "Approved",
  Rejected = "Rejected"
}

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export type PrivateEndpointServiceConnectionStatus = string;

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export const enum KnownPrivateEndpointConnectionProvisioningState {
  Succeeded = "Succeeded",
  Creating = "Creating",
  Deleting = "Deleting",
  Failed = "Failed"
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export type PrivateEndpointConnectionProvisioningState = string;

/** Known values of {@link BlobRestoreProgressStatus} that the service accepts. */
export const enum KnownBlobRestoreProgressStatus {
  InProgress = "InProgress",
  Complete = "Complete",
  Failed = "Failed"
}

/**
 * Defines values for BlobRestoreProgressStatus. \
 * {@link KnownBlobRestoreProgressStatus} can be used interchangeably with BlobRestoreProgressStatus,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **InProgress** \
 * **Complete** \
 * **Failed**
 */
export type BlobRestoreProgressStatus = string;

/** Known values of {@link Services} that the service accepts. */
export const enum KnownServices {
  B = "b",
  Q = "q",
  T = "t",
  F = "f"
}

/**
 * Defines values for Services. \
 * {@link KnownServices} can be used interchangeably with Services,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **b** \
 * **q** \
 * **t** \
 * **f**
 */
export type Services = string;

/** Known values of {@link SignedResourceTypes} that the service accepts. */
export const enum KnownSignedResourceTypes {
  S = "s",
  C = "c",
  O = "o"
}

/**
 * Defines values for SignedResourceTypes. \
 * {@link KnownSignedResourceTypes} can be used interchangeably with SignedResourceTypes,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **s** \
 * **c** \
 * **o**
 */
export type SignedResourceTypes = string;

/** Known values of {@link Permissions} that the service accepts. */
export const enum KnownPermissions {
  R = "r",
  D = "d",
  W = "w",
  L = "l",
  A = "a",
  C = "c",
  U = "u",
  P = "p"
}

/**
 * Defines values for Permissions. \
 * {@link KnownPermissions} can be used interchangeably with Permissions,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **r** \
 * **d** \
 * **w** \
 * **l** \
 * **a** \
 * **c** \
 * **u** \
 * **p**
 */
export type Permissions = string;

/** Known values of {@link SignedResource} that the service accepts. */
export const enum KnownSignedResource {
  B = "b",
  C = "c",
  F = "f",
  S = "s"
}

/**
 * Defines values for SignedResource. \
 * {@link KnownSignedResource} can be used interchangeably with SignedResource,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **b** \
 * **c** \
 * **f** \
 * **s**
 */
export type SignedResource = string;

/** Known values of {@link ManagementPolicyName} that the service accepts. */
export const enum KnownManagementPolicyName {
  Default = "default"
}

/**
 * Defines values for ManagementPolicyName. \
 * {@link KnownManagementPolicyName} can be used interchangeably with ManagementPolicyName,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **default**
 */
export type ManagementPolicyName = string;

/** Known values of {@link RuleType} that the service accepts. */
export const enum KnownRuleType {
  Lifecycle = "Lifecycle"
}

/**
 * Defines values for RuleType. \
 * {@link KnownRuleType} can be used interchangeably with RuleType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Lifecycle**
 */
export type RuleType = string;

/** Known values of {@link EncryptionScopeSource} that the service accepts. */
export const enum KnownEncryptionScopeSource {
  MicrosoftStorage = "Microsoft.Storage",
  MicrosoftKeyVault = "Microsoft.KeyVault"
}

/**
 * Defines values for EncryptionScopeSource. \
 * {@link KnownEncryptionScopeSource} can be used interchangeably with EncryptionScopeSource,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Microsoft.Storage** \
 * **Microsoft.KeyVault**
 */
export type EncryptionScopeSource = string;

/** Known values of {@link EncryptionScopeState} that the service accepts. */
export const enum KnownEncryptionScopeState {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for EncryptionScopeState. \
 * {@link KnownEncryptionScopeState} can be used interchangeably with EncryptionScopeState,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type EncryptionScopeState = string;

/** Known values of {@link CorsRuleAllowedMethodsItem} that the service accepts. */
export const enum KnownCorsRuleAllowedMethodsItem {
  Delete = "DELETE",
  GET = "GET",
  Head = "HEAD",
  Merge = "MERGE",
  Post = "POST",
  Options = "OPTIONS",
  PUT = "PUT"
}

/**
 * Defines values for CorsRuleAllowedMethodsItem. \
 * {@link KnownCorsRuleAllowedMethodsItem} can be used interchangeably with CorsRuleAllowedMethodsItem,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **DELETE** \
 * **GET** \
 * **HEAD** \
 * **MERGE** \
 * **POST** \
 * **OPTIONS** \
 * **PUT**
 */
export type CorsRuleAllowedMethodsItem = string;

/** Known values of {@link LeaseStatus} that the service accepts. */
export const enum KnownLeaseStatus {
  Locked = "Locked",
  Unlocked = "Unlocked"
}

/**
 * Defines values for LeaseStatus. \
 * {@link KnownLeaseStatus} can be used interchangeably with LeaseStatus,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Locked** \
 * **Unlocked**
 */
export type LeaseStatus = string;

/** Known values of {@link LeaseState} that the service accepts. */
export const enum KnownLeaseState {
  Available = "Available",
  Leased = "Leased",
  Expired = "Expired",
  Breaking = "Breaking",
  Broken = "Broken"
}

/**
 * Defines values for LeaseState. \
 * {@link KnownLeaseState} can be used interchangeably with LeaseState,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Available** \
 * **Leased** \
 * **Expired** \
 * **Breaking** \
 * **Broken**
 */
export type LeaseState = string;

/** Known values of {@link LeaseDuration} that the service accepts. */
export const enum KnownLeaseDuration {
  Infinite = "Infinite",
  Fixed = "Fixed"
}

/**
 * Defines values for LeaseDuration. \
 * {@link KnownLeaseDuration} can be used interchangeably with LeaseDuration,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Infinite** \
 * **Fixed**
 */
export type LeaseDuration = string;

/** Known values of {@link ImmutabilityPolicyState} that the service accepts. */
export const enum KnownImmutabilityPolicyState {
  Locked = "Locked",
  Unlocked = "Unlocked"
}

/**
 * Defines values for ImmutabilityPolicyState. \
 * {@link KnownImmutabilityPolicyState} can be used interchangeably with ImmutabilityPolicyState,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Locked** \
 * **Unlocked**
 */
export type ImmutabilityPolicyState = string;

/** Known values of {@link ImmutabilityPolicyUpdateType} that the service accepts. */
export const enum KnownImmutabilityPolicyUpdateType {
  Put = "put",
  Lock = "lock",
  Extend = "extend"
}

/**
 * Defines values for ImmutabilityPolicyUpdateType. \
 * {@link KnownImmutabilityPolicyUpdateType} can be used interchangeably with ImmutabilityPolicyUpdateType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **put** \
 * **lock** \
 * **extend**
 */
export type ImmutabilityPolicyUpdateType = string;

/** Known values of {@link LeaseContainerRequestAction} that the service accepts. */
export const enum KnownLeaseContainerRequestAction {
  Acquire = "Acquire",
  Renew = "Renew",
  Change = "Change",
  Release = "Release",
  Break = "Break"
}

/**
 * Defines values for LeaseContainerRequestAction. \
 * {@link KnownLeaseContainerRequestAction} can be used interchangeably with LeaseContainerRequestAction,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Acquire** \
 * **Renew** \
 * **Change** \
 * **Release** \
 * **Break**
 */
export type LeaseContainerRequestAction = string;

/** Known values of {@link EnabledProtocols} that the service accepts. */
export const enum KnownEnabledProtocols {
  SMB = "SMB",
  NFS = "NFS"
}

/**
 * Defines values for EnabledProtocols. \
 * {@link KnownEnabledProtocols} can be used interchangeably with EnabledProtocols,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **SMB** \
 * **NFS**
 */
export type EnabledProtocols = string;

/** Known values of {@link RootSquashType} that the service accepts. */
export const enum KnownRootSquashType {
  NoRootSquash = "NoRootSquash",
  RootSquash = "RootSquash",
  AllSquash = "AllSquash"
}

/**
 * Defines values for RootSquashType. \
 * {@link KnownRootSquashType} can be used interchangeably with RootSquashType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **NoRootSquash** \
 * **RootSquash** \
 * **AllSquash**
 */
export type RootSquashType = string;

/** Known values of {@link ShareAccessTier} that the service accepts. */
export const enum KnownShareAccessTier {
  TransactionOptimized = "TransactionOptimized",
  Hot = "Hot",
  Cool = "Cool",
  Premium = "Premium"
}

/**
 * Defines values for ShareAccessTier. \
 * {@link KnownShareAccessTier} can be used interchangeably with ShareAccessTier,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **TransactionOptimized** \
 * **Hot** \
 * **Cool** \
 * **Premium**
 */
export type ShareAccessTier = string;
/** Defines values for SkuTier. */
export type SkuTier = "Standard" | "Premium";
/** Defines values for Reason. */
export type Reason = "AccountNameInvalid" | "AlreadyExists";
/** Defines values for State. */
export type State =
  | "provisioning"
  | "deprovisioning"
  | "succeeded"
  | "failed"
  | "networkSourceDeleted";
/** Defines values for DefaultAction. */
export type DefaultAction = "Allow" | "Deny";
/** Defines values for AccessTier. */
export type AccessTier = "Hot" | "Cool";
/** Defines values for ProvisioningState. */
export type ProvisioningState = "Creating" | "ResolvingDNS" | "Succeeded";
/** Defines values for AccountStatus. */
export type AccountStatus = "available" | "unavailable";
/** Defines values for StorageAccountExpand. */
export type StorageAccountExpand = "geoReplicationStats" | "blobRestoreStatus";
/** Defines values for KeyPermission. */
export type KeyPermission = "Read" | "Full";
/** Defines values for UsageUnit. */
export type UsageUnit =
  | "Count"
  | "Bytes"
  | "Seconds"
  | "Percent"
  | "CountsPerSecond"
  | "BytesPerSecond";
/** Defines values for HttpProtocol. */
export type HttpProtocol = "https,http" | "https";
/** Defines values for PublicAccess. */
export type PublicAccess = "Container" | "Blob" | "None";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: OperationListResult;
  };
};

/** Optional parameters. */
export interface SkusListOptionalParams extends coreHttp.OperationOptions {}

/** Contains response data for the list operation. */
export type SkusListResponse = StorageSkuListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StorageSkuListResult;
  };
};

/** Optional parameters. */
export interface StorageAccountsCheckNameAvailabilityOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type StorageAccountsCheckNameAvailabilityResponse = CheckNameAvailabilityResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: CheckNameAvailabilityResult;
  };
};

/** Optional parameters. */
export interface StorageAccountsCreateOptionalParams
  extends coreHttp.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type StorageAccountsCreateResponse = StorageAccount & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StorageAccount;
  };
};

/** Optional parameters. */
export interface StorageAccountsDeleteOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface StorageAccountsGetPropertiesOptionalParams
  extends coreHttp.OperationOptions {
  /** May be used to expand the properties within account's properties. By default, data is not included when fetching properties. Currently we only support geoReplicationStats and blobRestoreStatus. */
  expand?: StorageAccountExpand;
}

/** Contains response data for the getProperties operation. */
export type StorageAccountsGetPropertiesResponse = StorageAccount & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StorageAccount;
  };
};

/** Optional parameters. */
export interface StorageAccountsUpdateOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the update operation. */
export type StorageAccountsUpdateResponse = StorageAccount & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StorageAccount;
  };
};

/** Optional parameters. */
export interface StorageAccountsListOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the list operation. */
export type StorageAccountsListResponse = StorageAccountListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StorageAccountListResult;
  };
};

/** Optional parameters. */
export interface StorageAccountsListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type StorageAccountsListByResourceGroupResponse = StorageAccountListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StorageAccountListResult;
  };
};

/** Optional parameters. */
export interface StorageAccountsListKeysOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the listKeys operation. */
export type StorageAccountsListKeysResponse = StorageAccountListKeysResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StorageAccountListKeysResult;
  };
};

/** Optional parameters. */
export interface StorageAccountsRegenerateKeyOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the regenerateKey operation. */
export type StorageAccountsRegenerateKeyResponse = StorageAccountListKeysResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StorageAccountListKeysResult;
  };
};

/** Optional parameters. */
export interface StorageAccountsListAccountSASOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the listAccountSAS operation. */
export type StorageAccountsListAccountSASResponse = ListAccountSasResponse & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ListAccountSasResponse;
  };
};

/** Optional parameters. */
export interface StorageAccountsListServiceSASOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the listServiceSAS operation. */
export type StorageAccountsListServiceSASResponse = ListServiceSasResponse & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ListServiceSasResponse;
  };
};

/** Optional parameters. */
export interface StorageAccountsFailoverOptionalParams
  extends coreHttp.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface StorageAccountsRestoreBlobRangesOptionalParams
  extends coreHttp.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the restoreBlobRanges operation. */
export type StorageAccountsRestoreBlobRangesResponse = BlobRestoreStatus & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: BlobRestoreStatus;
  };
};

/** Optional parameters. */
export interface StorageAccountsRevokeUserDelegationKeysOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface StorageAccountsListNextOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the listNext operation. */
export type StorageAccountsListNextResponse = StorageAccountListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StorageAccountListResult;
  };
};

/** Optional parameters. */
export interface UsagesListByLocationOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the listByLocation operation. */
export type UsagesListByLocationResponse = UsageListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UsageListResult;
  };
};

/** Optional parameters. */
export interface ManagementPoliciesGetOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagementPoliciesGetResponse = ManagementPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ManagementPolicy;
  };
};

/** Optional parameters. */
export interface ManagementPoliciesCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ManagementPoliciesCreateOrUpdateResponse = ManagementPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ManagementPolicy;
  };
};

/** Optional parameters. */
export interface ManagementPoliciesDeleteOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface PrivateEndpointConnectionsListOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the list operation. */
export type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PrivateEndpointConnectionListResult;
  };
};

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PrivateEndpointConnection;
  };
};

/** Optional parameters. */
export interface PrivateEndpointConnectionsPutOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the put operation. */
export type PrivateEndpointConnectionsPutResponse = PrivateEndpointConnection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PrivateEndpointConnection;
  };
};

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface PrivateLinkResourcesListByStorageAccountOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the listByStorageAccount operation. */
export type PrivateLinkResourcesListByStorageAccountResponse = PrivateLinkResourceListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PrivateLinkResourceListResult;
  };
};

/** Optional parameters. */
export interface ObjectReplicationPoliciesListOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the list operation. */
export type ObjectReplicationPoliciesListResponse = ObjectReplicationPoliciesDef & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ObjectReplicationPoliciesDef;
  };
};

/** Optional parameters. */
export interface ObjectReplicationPoliciesGetOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the get operation. */
export type ObjectReplicationPoliciesGetResponse = ObjectReplicationPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ObjectReplicationPolicy;
  };
};

/** Optional parameters. */
export interface ObjectReplicationPoliciesCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ObjectReplicationPoliciesCreateOrUpdateResponse = ObjectReplicationPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ObjectReplicationPolicy;
  };
};

/** Optional parameters. */
export interface ObjectReplicationPoliciesDeleteOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface EncryptionScopesPutOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the put operation. */
export type EncryptionScopesPutResponse = EncryptionScope & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: EncryptionScope;
  };
};

/** Optional parameters. */
export interface EncryptionScopesPatchOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the patch operation. */
export type EncryptionScopesPatchResponse = EncryptionScope & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: EncryptionScope;
  };
};

/** Optional parameters. */
export interface EncryptionScopesGetOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the get operation. */
export type EncryptionScopesGetResponse = EncryptionScope & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: EncryptionScope;
  };
};

/** Optional parameters. */
export interface EncryptionScopesListOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the list operation. */
export type EncryptionScopesListResponse = EncryptionScopeListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: EncryptionScopeListResult;
  };
};

/** Optional parameters. */
export interface EncryptionScopesListNextOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the listNext operation. */
export type EncryptionScopesListNextResponse = EncryptionScopeListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: EncryptionScopeListResult;
  };
};

/** Optional parameters. */
export interface BlobServicesListOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the list operation. */
export type BlobServicesListResponse = BlobServiceItems & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: BlobServiceItems;
  };
};

/** Optional parameters. */
export interface BlobServicesSetServicePropertiesOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the setServiceProperties operation. */
export type BlobServicesSetServicePropertiesResponse = BlobServiceProperties & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: BlobServiceProperties;
  };
};

/** Optional parameters. */
export interface BlobServicesGetServicePropertiesOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getServiceProperties operation. */
export type BlobServicesGetServicePropertiesResponse = BlobServiceProperties & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: BlobServiceProperties;
  };
};

/** Optional parameters. */
export interface BlobContainersListOptionalParams
  extends coreHttp.OperationOptions {
  /** Optional. Specified maximum number of containers that can be included in the list. */
  maxpagesize?: string;
  /** Optional. When specified, only container names starting with the filter will be listed. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type BlobContainersListResponse = ListContainerItems & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ListContainerItems;
  };
};

/** Optional parameters. */
export interface BlobContainersCreateOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the create operation. */
export type BlobContainersCreateResponse = BlobContainer & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: BlobContainer;
  };
};

/** Optional parameters. */
export interface BlobContainersUpdateOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the update operation. */
export type BlobContainersUpdateResponse = BlobContainer & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: BlobContainer;
  };
};

/** Optional parameters. */
export interface BlobContainersGetOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the get operation. */
export type BlobContainersGetResponse = BlobContainer & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: BlobContainer;
  };
};

/** Optional parameters. */
export interface BlobContainersDeleteOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface BlobContainersSetLegalHoldOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the setLegalHold operation. */
export type BlobContainersSetLegalHoldResponse = LegalHold & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: LegalHold;
  };
};

/** Optional parameters. */
export interface BlobContainersClearLegalHoldOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the clearLegalHold operation. */
export type BlobContainersClearLegalHoldResponse = LegalHold & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: LegalHold;
  };
};

/** Optional parameters. */
export interface BlobContainersCreateOrUpdateImmutabilityPolicyOptionalParams
  extends coreHttp.OperationOptions {
  /** The ImmutabilityPolicy Properties that will be created or updated to a blob container. */
  parameters?: ImmutabilityPolicy;
  /** The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. */
  ifMatch?: string;
}

/** Contains response data for the createOrUpdateImmutabilityPolicy operation. */
export type BlobContainersCreateOrUpdateImmutabilityPolicyResponse = BlobContainersCreateOrUpdateImmutabilityPolicyHeaders &
  ImmutabilityPolicy & {
    /** The underlying HTTP response. */
    _response: coreHttp.HttpResponse & {
      /** The response body as text (string format) */
      bodyAsText: string;

      /** The response body as parsed JSON or XML */
      parsedBody: ImmutabilityPolicy;
      /** The parsed HTTP response headers. */
      parsedHeaders: BlobContainersCreateOrUpdateImmutabilityPolicyHeaders;
    };
  };

/** Optional parameters. */
export interface BlobContainersGetImmutabilityPolicyOptionalParams
  extends coreHttp.OperationOptions {
  /** The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. */
  ifMatch?: string;
}

/** Contains response data for the getImmutabilityPolicy operation. */
export type BlobContainersGetImmutabilityPolicyResponse = BlobContainersGetImmutabilityPolicyHeaders &
  ImmutabilityPolicy & {
    /** The underlying HTTP response. */
    _response: coreHttp.HttpResponse & {
      /** The response body as text (string format) */
      bodyAsText: string;

      /** The response body as parsed JSON or XML */
      parsedBody: ImmutabilityPolicy;
      /** The parsed HTTP response headers. */
      parsedHeaders: BlobContainersGetImmutabilityPolicyHeaders;
    };
  };

/** Optional parameters. */
export interface BlobContainersDeleteImmutabilityPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the deleteImmutabilityPolicy operation. */
export type BlobContainersDeleteImmutabilityPolicyResponse = BlobContainersDeleteImmutabilityPolicyHeaders &
  ImmutabilityPolicy & {
    /** The underlying HTTP response. */
    _response: coreHttp.HttpResponse & {
      /** The response body as text (string format) */
      bodyAsText: string;

      /** The response body as parsed JSON or XML */
      parsedBody: ImmutabilityPolicy;
      /** The parsed HTTP response headers. */
      parsedHeaders: BlobContainersDeleteImmutabilityPolicyHeaders;
    };
  };

/** Optional parameters. */
export interface BlobContainersLockImmutabilityPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the lockImmutabilityPolicy operation. */
export type BlobContainersLockImmutabilityPolicyResponse = BlobContainersLockImmutabilityPolicyHeaders &
  ImmutabilityPolicy & {
    /** The underlying HTTP response. */
    _response: coreHttp.HttpResponse & {
      /** The response body as text (string format) */
      bodyAsText: string;

      /** The response body as parsed JSON or XML */
      parsedBody: ImmutabilityPolicy;
      /** The parsed HTTP response headers. */
      parsedHeaders: BlobContainersLockImmutabilityPolicyHeaders;
    };
  };

/** Optional parameters. */
export interface BlobContainersExtendImmutabilityPolicyOptionalParams
  extends coreHttp.OperationOptions {
  /** The ImmutabilityPolicy Properties that will be extended for a blob container. */
  parameters?: ImmutabilityPolicy;
}

/** Contains response data for the extendImmutabilityPolicy operation. */
export type BlobContainersExtendImmutabilityPolicyResponse = BlobContainersExtendImmutabilityPolicyHeaders &
  ImmutabilityPolicy & {
    /** The underlying HTTP response. */
    _response: coreHttp.HttpResponse & {
      /** The response body as text (string format) */
      bodyAsText: string;

      /** The response body as parsed JSON or XML */
      parsedBody: ImmutabilityPolicy;
      /** The parsed HTTP response headers. */
      parsedHeaders: BlobContainersExtendImmutabilityPolicyHeaders;
    };
  };

/** Optional parameters. */
export interface BlobContainersLeaseOptionalParams
  extends coreHttp.OperationOptions {
  /** Lease Container request body. */
  parameters?: LeaseContainerRequest;
}

/** Contains response data for the lease operation. */
export type BlobContainersLeaseResponse = LeaseContainerResponse & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: LeaseContainerResponse;
  };
};

/** Optional parameters. */
export interface BlobContainersListNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Optional. Specified maximum number of containers that can be included in the list. */
  maxpagesize?: string;
  /** Optional. When specified, only container names starting with the filter will be listed. */
  filter?: string;
}

/** Contains response data for the listNext operation. */
export type BlobContainersListNextResponse = ListContainerItems & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ListContainerItems;
  };
};

/** Optional parameters. */
export interface FileServicesListOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the list operation. */
export type FileServicesListResponse = FileServiceItems & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: FileServiceItems;
  };
};

/** Optional parameters. */
export interface FileServicesSetServicePropertiesOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the setServiceProperties operation. */
export type FileServicesSetServicePropertiesResponse = FileServiceProperties & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: FileServiceProperties;
  };
};

/** Optional parameters. */
export interface FileServicesGetServicePropertiesOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getServiceProperties operation. */
export type FileServicesGetServicePropertiesResponse = FileServiceProperties & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: FileServiceProperties;
  };
};

/** Optional parameters. */
export interface FileSharesListOptionalParams
  extends coreHttp.OperationOptions {
  /** Optional. Specified maximum number of shares that can be included in the list. */
  maxpagesize?: string;
  /** Optional. When specified, only share names starting with the filter will be listed. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type FileSharesListResponse = FileShareItems & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: FileShareItems;
  };
};

/** Optional parameters. */
export interface FileSharesCreateOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the create operation. */
export type FileSharesCreateResponse = FileShare & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: FileShare;
  };
};

/** Optional parameters. */
export interface FileSharesUpdateOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the update operation. */
export type FileSharesUpdateResponse = FileShare & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: FileShare;
  };
};

/** Optional parameters. */
export interface FileSharesGetOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the get operation. */
export type FileSharesGetResponse = FileShare & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: FileShare;
  };
};

/** Optional parameters. */
export interface FileSharesDeleteOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface FileSharesRestoreOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface FileSharesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Optional. Specified maximum number of shares that can be included in the list. */
  maxpagesize?: string;
  /** Optional. When specified, only share names starting with the filter will be listed. */
  filter?: string;
}

/** Contains response data for the listNext operation. */
export type FileSharesListNextResponse = FileShareItems & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: FileShareItems;
  };
};

/** Optional parameters. */
export interface StorageManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
