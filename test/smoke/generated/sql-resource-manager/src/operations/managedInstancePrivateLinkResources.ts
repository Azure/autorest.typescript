/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ManagedInstancePrivateLinkResources } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  ManagedInstancePrivateLink,
  ManagedInstancePrivateLinkResourcesListByManagedInstanceResponse,
  ManagedInstancePrivateLinkResourcesGetResponse,
  ManagedInstancePrivateLinkResourcesListByManagedInstanceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ManagedInstancePrivateLinkResources operations. */
export class ManagedInstancePrivateLinkResourcesImpl
  implements ManagedInstancePrivateLinkResources {
  /**
   * Initialize a new instance of the class ManagedInstancePrivateLinkResources class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {}

  /**
   * Gets the private link resources for SQL server.
   *
   */
  public listByManagedInstance(): PagedAsyncIterableIterator<
    ManagedInstancePrivateLink
  > {
    const iter = this.listByManagedInstancePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagedInstancePagingPage();
      }
    };
  }

  private async *listByManagedInstancePagingPage(): AsyncIterableIterator<
    ManagedInstancePrivateLink[]
  > {
    let result = await this._listByManagedInstance();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagedInstanceNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagedInstancePagingAll(): AsyncIterableIterator<
    ManagedInstancePrivateLink
  > {
    for await (const page of this.listByManagedInstancePagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets the private link resources for SQL server.
   *
   */
  private _listByManagedInstance(): Promise<
    ManagedInstancePrivateLinkResourcesListByManagedInstanceResponse
  > {}

  /**
   * Gets a private link resource for SQL server.
   *
   */
  get(): Promise<ManagedInstancePrivateLinkResourcesGetResponse> {}

  /**
   * ListByManagedInstanceNext
   *
   */
  private _listByManagedInstanceNext(): Promise<
    ManagedInstancePrivateLinkResourcesListByManagedInstanceNextResponse
  > {}
}
// Operation Specifications
