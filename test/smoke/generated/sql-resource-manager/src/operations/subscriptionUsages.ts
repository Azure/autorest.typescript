/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SubscriptionUsages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  SubscriptionUsage,
  SubscriptionUsagesListByLocationResponse,
  SubscriptionUsagesGetResponse,
  SubscriptionUsagesListByLocationNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SubscriptionUsages operations. */
export class SubscriptionUsagesImpl implements SubscriptionUsages {
  /**
   * Initialize a new instance of the class SubscriptionUsages class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {}

  /**
   * Gets all subscription usage metrics in a given location.
   *
   */
  public listByLocation(): PagedAsyncIterableIterator<SubscriptionUsage> {
    const iter = this.listByLocationPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByLocationPagingPage();
      }
    };
  }

  private async *listByLocationPagingPage(): AsyncIterableIterator<
    SubscriptionUsage[]
  > {
    let result = await this._listByLocation();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByLocationNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByLocationPagingAll(): AsyncIterableIterator<
    SubscriptionUsage
  > {
    for await (const page of this.listByLocationPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets all subscription usage metrics in a given location.
   *
   */
  private _listByLocation(): Promise<
    SubscriptionUsagesListByLocationResponse
  > {}

  /**
   * Gets a subscription usage metric.
   *
   */
  get(): Promise<SubscriptionUsagesGetResponse> {}

  /**
   * ListByLocationNext
   *
   */
  private _listByLocationNext(): Promise<
    SubscriptionUsagesListByLocationNextResponse
  > {}
}
// Operation Specifications
