/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  SubscriptionUsagesListByLocationResponse,
  SubscriptionUsagesGetResponse,
  SubscriptionUsagesListByLocationNextResponse
} from "../models";

/**
 * Class representing a SubscriptionUsages.
 */
export class SubscriptionUsages {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class SubscriptionUsages class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Gets all subscription usage metrics in a given location.
   * @param locationName The name of the region where the resource is located.
   * @param options The options parameters.
   */
  listByLocation(
    locationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SubscriptionUsagesListByLocationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { locationName, options: operationOptions },
      listByLocationOperationSpec
    ) as Promise<SubscriptionUsagesListByLocationResponse>;
  }

  /**
   * Gets a subscription usage metric.
   * @param locationName The name of the region where the resource is located.
   * @param usageName Name of usage metric to return.
   * @param options The options parameters.
   */
  get(
    locationName: string,
    usageName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SubscriptionUsagesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { locationName, usageName, options: operationOptions },
      getOperationSpec
    ) as Promise<SubscriptionUsagesGetResponse>;
  }

  /**
   * ListByLocationNext
   * @param locationName The name of the region where the resource is located.
   * @param nextLink The nextLink from the previous successful call to the ListByLocation method.
   * @param options The options parameters.
   */
  listByLocationNext(
    locationName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<SubscriptionUsagesListByLocationNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { locationName, nextLink, options: operationOptions },
      listByLocationNextOperationSpec
    ) as Promise<SubscriptionUsagesListByLocationNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByLocationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionUsageListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages/{usageName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionUsage
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.usageName
  ],
  serializer
};
const listByLocationNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionUsageListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.nextLink10
  ],
  serializer
};
