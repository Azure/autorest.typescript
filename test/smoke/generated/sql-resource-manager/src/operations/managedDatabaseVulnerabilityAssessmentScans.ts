/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ManagedDatabaseVulnerabilityAssessmentScans } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import { SqlManagementClient } from "../sqlManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  VulnerabilityAssessmentScanRecord,
  ManagedDatabaseVulnerabilityAssessmentScansExportResponse,
  ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseResponse,
  ManagedDatabaseVulnerabilityAssessmentScansGetResponse,
  ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ManagedDatabaseVulnerabilityAssessmentScans operations. */
export class ManagedDatabaseVulnerabilityAssessmentScansImpl
  implements ManagedDatabaseVulnerabilityAssessmentScans {
  /**
   * Initialize a new instance of the class ManagedDatabaseVulnerabilityAssessmentScans class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {}

  /**
   * Lists the vulnerability assessment scans of a database.
   *
   */
  public listByDatabase(): PagedAsyncIterableIterator<
    VulnerabilityAssessmentScanRecord
  > {
    const iter = this.listByDatabasePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByDatabasePagingPage();
      }
    };
  }

  private async *listByDatabasePagingPage(): AsyncIterableIterator<
    VulnerabilityAssessmentScanRecord[]
  > {
    let result = await this._listByDatabase();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByDatabaseNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByDatabasePagingAll(): AsyncIterableIterator<
    VulnerabilityAssessmentScanRecord
  > {
    for await (const page of this.listByDatabasePagingPage()) {
      yield* page;
    }
  }

  /**
   * Executes a Vulnerability Assessment database scan.
   *
   */
  async beginInitiateScan(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * Executes a Vulnerability Assessment database scan.
   *
   */
  async beginInitiateScanAndWait(): Promise<void> {
    const poller = await this.beginInitiateScan();
    return poller.pollUntilDone();
  }

  /**
   * Convert an existing scan result to a human readable format. If already exists nothing happens
   *
   */
  export(): Promise<
    ManagedDatabaseVulnerabilityAssessmentScansExportResponse
  > {}

  /**
   * Lists the vulnerability assessment scans of a database.
   *
   */
  private _listByDatabase(): Promise<
    ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseResponse
  > {}

  /**
   * Gets a vulnerability assessment scan record of a database.
   *
   */
  get(): Promise<ManagedDatabaseVulnerabilityAssessmentScansGetResponse> {}

  /**
   * ListByDatabaseNext
   *
   */
  private _listByDatabaseNext(): Promise<
    ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseNextResponse
  > {}
}
// Operation Specifications
