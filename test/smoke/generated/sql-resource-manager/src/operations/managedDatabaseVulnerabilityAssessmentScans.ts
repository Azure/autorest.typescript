/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClientContext } from "../sqlManagementClientContext";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  VulnerabilityAssessmentScanRecord,
  VulnerabilityAssessmentName,
  ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseResponse,
  ManagedDatabaseVulnerabilityAssessmentScansGetResponse,
  ManagedDatabaseVulnerabilityAssessmentScansExportResponse,
  ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a ManagedDatabaseVulnerabilityAssessmentScans. */
export class ManagedDatabaseVulnerabilityAssessmentScans {
  private readonly client: SqlManagementClientContext;

  /**
   * Initialize a new instance of the class ManagedDatabaseVulnerabilityAssessmentScans class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists the vulnerability assessment scans of a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param options The options parameters.
   */
  public listByDatabase(
    resourceGroupName: string,
    managedInstanceName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<VulnerabilityAssessmentScanRecord> {
    const iter = this.listByDatabasePagingAll(
      resourceGroupName,
      managedInstanceName,
      databaseName,
      vulnerabilityAssessmentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByDatabasePagingPage(
          resourceGroupName,
          managedInstanceName,
          databaseName,
          vulnerabilityAssessmentName,
          options
        );
      }
    };
  }

  private async *listByDatabasePagingPage(
    resourceGroupName: string,
    managedInstanceName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<VulnerabilityAssessmentScanRecord[]> {
    let result = await this._listByDatabase(
      resourceGroupName,
      managedInstanceName,
      databaseName,
      vulnerabilityAssessmentName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByDatabaseNext(
        resourceGroupName,
        managedInstanceName,
        databaseName,
        vulnerabilityAssessmentName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByDatabasePagingAll(
    resourceGroupName: string,
    managedInstanceName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<VulnerabilityAssessmentScanRecord> {
    for await (const page of this.listByDatabasePagingPage(
      resourceGroupName,
      managedInstanceName,
      databaseName,
      vulnerabilityAssessmentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the vulnerability assessment scans of a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param options The options parameters.
   */
  private _listByDatabase(
    resourceGroupName: string,
    managedInstanceName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: coreHttp.OperationOptions
  ): Promise<
    ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      managedInstanceName,
      databaseName,
      vulnerabilityAssessmentName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByDatabaseOperationSpec
    ) as Promise<
      ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseResponse
    >;
  }

  /**
   * Gets a vulnerability assessment scan record of a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    managedInstanceName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ManagedDatabaseVulnerabilityAssessmentScansGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      managedInstanceName,
      databaseName,
      vulnerabilityAssessmentName,
      scanId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<ManagedDatabaseVulnerabilityAssessmentScansGetResponse>;
  }

  /**
   * Executes a Vulnerability Assessment database scan.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param options The options parameters.
   */
  async initiateScan(
    resourceGroupName: string,
    managedInstanceName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      managedInstanceName,
      databaseName,
      vulnerabilityAssessmentName,
      scanId,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      initiateScanOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: initiateScanOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Convert an existing scan result to a human readable format. If already exists nothing happens
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the scanned database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id.
   * @param options The options parameters.
   */
  export(
    resourceGroupName: string,
    managedInstanceName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ManagedDatabaseVulnerabilityAssessmentScansExportResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      managedInstanceName,
      databaseName,
      vulnerabilityAssessmentName,
      scanId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      exportOperationSpec
    ) as Promise<ManagedDatabaseVulnerabilityAssessmentScansExportResponse>;
  }

  /**
   * ListByDatabaseNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param nextLink The nextLink from the previous successful call to the ListByDatabase method.
   * @param options The options parameters.
   */
  private _listByDatabaseNext(
    resourceGroupName: string,
    managedInstanceName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseNextResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      managedInstanceName,
      databaseName,
      vulnerabilityAssessmentName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByDatabaseNextOperationSpec
    ) as Promise<
      ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseNextResponse
    >;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByDatabaseOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VulnerabilityAssessmentScanRecordListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.managedInstanceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VulnerabilityAssessmentScanRecord
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.managedInstanceName,
    Parameters.scanId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const initiateScanOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.managedInstanceName,
    Parameters.scanId
  ],
  serializer
};
const exportOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseVulnerabilityAssessmentScansExport
    },
    201: {
      bodyMapper: Mappers.DatabaseVulnerabilityAssessmentScansExport
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.managedInstanceName,
    Parameters.scanId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByDatabaseNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VulnerabilityAssessmentScanRecordListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName,
    Parameters.nextLink,
    Parameters.vulnerabilityAssessmentName,
    Parameters.managedInstanceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
