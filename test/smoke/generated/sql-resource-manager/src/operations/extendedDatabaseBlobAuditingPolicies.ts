/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ExtendedDatabaseBlobAuditingPolicies } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  ExtendedDatabaseBlobAuditingPolicy,
  ExtendedDatabaseBlobAuditingPoliciesGetResponse,
  ExtendedDatabaseBlobAuditingPoliciesCreateOrUpdateResponse,
  ExtendedDatabaseBlobAuditingPoliciesListByDatabaseResponse,
  ExtendedDatabaseBlobAuditingPoliciesListByDatabaseNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ExtendedDatabaseBlobAuditingPolicies operations. */
export class ExtendedDatabaseBlobAuditingPoliciesImpl
  implements ExtendedDatabaseBlobAuditingPolicies {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class ExtendedDatabaseBlobAuditingPolicies class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Lists extended auditing settings of a database.
   *
   */
  public listByDatabase(): PagedAsyncIterableIterator<
    ExtendedDatabaseBlobAuditingPolicy
  > {
    const iter = this.listByDatabasePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByDatabasePagingPage();
      }
    };
  }

  private async *listByDatabasePagingPage(): AsyncIterableIterator<
    ExtendedDatabaseBlobAuditingPolicy[]
  > {
    let result = await this._listByDatabase();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByDatabaseNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByDatabasePagingAll(): AsyncIterableIterator<
    ExtendedDatabaseBlobAuditingPolicy
  > {
    for await (const page of this.listByDatabasePagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets an extended database's blob auditing policy.
   *
   */
  get(): Promise<ExtendedDatabaseBlobAuditingPoliciesGetResponse> {}

  /**
   * Creates or updates an extended database's blob auditing policy.
   *
   */
  createOrUpdate(): Promise<
    ExtendedDatabaseBlobAuditingPoliciesCreateOrUpdateResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, databaseName, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Lists extended auditing settings of a database.
   *
   */
  private _listByDatabase(): Promise<
    ExtendedDatabaseBlobAuditingPoliciesListByDatabaseResponse
  > {}

  /**
   * ListByDatabaseNext
   *
   */
  private _listByDatabaseNext(): Promise<
    ExtendedDatabaseBlobAuditingPoliciesListByDatabaseNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extendedAuditingSettings/{blobAuditingPolicyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ExtendedDatabaseBlobAuditingPolicy
    },
    201: {
      bodyMapper: Mappers.ExtendedDatabaseBlobAuditingPolicy
    },
    default: {}
  },
  requestBody: Parameters.parameters12,
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.blobAuditingPolicyName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
