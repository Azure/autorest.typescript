/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { JobVersions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  JobVersion,
  JobVersionsListByJobResponse,
  JobVersionsGetResponse,
  JobVersionsListByJobNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing JobVersions operations. */
export class JobVersionsImpl implements JobVersions {
  /**
   * Initialize a new instance of the class JobVersions class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {}

  /**
   * Gets all versions of a job.
   *
   */
  public listByJob(): PagedAsyncIterableIterator<JobVersion> {
    const iter = this.listByJobPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByJobPagingPage();
      }
    };
  }

  private async *listByJobPagingPage(): AsyncIterableIterator<JobVersion[]> {
    let result = await this._listByJob();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByJobNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByJobPagingAll(): AsyncIterableIterator<JobVersion> {
    for await (const page of this.listByJobPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets all versions of a job.
   *
   */
  private _listByJob(): Promise<JobVersionsListByJobResponse> {}

  /**
   * Gets a job version.
   *
   */
  get(): Promise<JobVersionsGetResponse> {}

  /**
   * ListByJobNext
   *
   */
  private _listByJobNext(): Promise<JobVersionsListByJobNextResponse> {}
}
// Operation Specifications
