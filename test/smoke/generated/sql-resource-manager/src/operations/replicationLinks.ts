/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ReplicationLinks } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  ReplicationLink,
  ReplicationLinksListByDatabaseResponse,
  ReplicationLinksGetResponse,
  ReplicationLinksListByServerResponse,
  ReplicationLinksListByDatabaseNextResponse,
  ReplicationLinksListByServerNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationLinks operations. */
export class ReplicationLinksImpl implements ReplicationLinks {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class ReplicationLinks class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of replication links on database.
   *
   */
  public listByDatabase(): PagedAsyncIterableIterator<ReplicationLink> {
    const iter = this.listByDatabasePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByDatabasePagingPage();
      }
    };
  }

  private async *listByDatabasePagingPage(): AsyncIterableIterator<
    ReplicationLink[]
  > {
    let result = await this._listByDatabase();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByDatabaseNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByDatabasePagingAll(): AsyncIterableIterator<
    ReplicationLink
  > {
    for await (const page of this.listByDatabasePagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets a list of replication links.
   *
   */
  public listByServer(): PagedAsyncIterableIterator<ReplicationLink> {
    const iter = this.listByServerPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByServerPagingPage();
      }
    };
  }

  private async *listByServerPagingPage(): AsyncIterableIterator<
    ReplicationLink[]
  > {
    let result = await this._listByServer();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByServerNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByServerPagingAll(): AsyncIterableIterator<
    ReplicationLink
  > {
    for await (const page of this.listByServerPagingPage()) {
      yield* page;
    }
  }

  /**
   * Deletes a database replication link. Cannot be done during failover.
   *
   */
  delete(): Promise<void> {}

  /**
   * Sets which replica database is primary by failing over from the current primary replica database.
   *
   */
  async beginFailover(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Sets which replica database is primary by failing over from the current primary replica database.
   *
   */
  async beginFailoverAndWait(): Promise<void> {
    const poller = await this.beginFailover();
    return poller.pollUntilDone();
  }

  /**
   * Sets which replica database is primary by failing over from the current primary replica database.
   * This operation might result in data loss.
   *
   */
  async beginFailoverAllowDataLoss(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * Sets which replica database is primary by failing over from the current primary replica database.
   * This operation might result in data loss.
   *
   */
  async beginFailoverAllowDataLossAndWait(): Promise<void> {
    const poller = await this.beginFailoverAllowDataLoss();
    return poller.pollUntilDone();
  }

  /**
   * Deletes a database replication link in forced or friendly way.
   *
   */
  async beginUnlink(): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, serverName, databaseName, linkId, options },
      unlinkOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a database replication link in forced or friendly way.
   *
   */
  async beginUnlinkAndWait(): Promise<void> {
    const poller = await this.beginUnlink();
    return poller.pollUntilDone();
  }

  /**
   * Gets a list of replication links on database.
   *
   */
  private _listByDatabase(): Promise<ReplicationLinksListByDatabaseResponse> {}

  /**
   * Gets a replication link.
   *
   */
  get(): Promise<ReplicationLinksGetResponse> {}

  /**
   * Gets a list of replication links.
   *
   */
  private _listByServer(): Promise<ReplicationLinksListByServerResponse> {}

  /**
   * ListByDatabaseNext
   *
   */
  private _listByDatabaseNext(): Promise<
    ReplicationLinksListByDatabaseNextResponse
  > {}

  /**
   * ListByServerNext
   *
   */
  private _listByServerNext(): Promise<
    ReplicationLinksListByServerNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const unlinkOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}/unlink",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.parameters10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.linkId
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
