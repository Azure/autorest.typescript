/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  LongTermRetentionBackupsGetByResourceGroupResponse,
  LongTermRetentionBackupsListByResourceGroupDatabaseOptionalParams,
  LongTermRetentionBackupsListByResourceGroupDatabaseResponse,
  LongTermRetentionBackupsListByResourceGroupLocationOptionalParams,
  LongTermRetentionBackupsListByResourceGroupLocationResponse,
  LongTermRetentionBackupsListByResourceGroupServerOptionalParams,
  LongTermRetentionBackupsListByResourceGroupServerResponse,
  LongTermRetentionBackupsGetResponse,
  LongTermRetentionBackupsListByDatabaseOptionalParams,
  LongTermRetentionBackupsListByDatabaseResponse,
  LongTermRetentionBackupsListByLocationOptionalParams,
  LongTermRetentionBackupsListByLocationResponse,
  LongTermRetentionBackupsListByServerOptionalParams,
  LongTermRetentionBackupsListByServerResponse,
  LongTermRetentionBackupsListByResourceGroupDatabaseNextOptionalParams,
  LongTermRetentionBackupsListByResourceGroupDatabaseNextResponse,
  LongTermRetentionBackupsListByResourceGroupLocationNextOptionalParams,
  LongTermRetentionBackupsListByResourceGroupLocationNextResponse,
  LongTermRetentionBackupsListByResourceGroupServerNextOptionalParams,
  LongTermRetentionBackupsListByResourceGroupServerNextResponse,
  LongTermRetentionBackupsListByDatabaseNextOptionalParams,
  LongTermRetentionBackupsListByDatabaseNextResponse,
  LongTermRetentionBackupsListByLocationNextOptionalParams,
  LongTermRetentionBackupsListByLocationNextResponse,
  LongTermRetentionBackupsListByServerNextOptionalParams,
  LongTermRetentionBackupsListByServerNextResponse
} from "../models";

/**
 * Class representing a LongTermRetentionBackups.
 */
export class LongTermRetentionBackups {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class LongTermRetentionBackups class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Gets a long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  getByResourceGroup(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LongTermRetentionBackupsGetByResourceGroupResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      backupName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getByResourceGroupOperationSpec
    ) as Promise<LongTermRetentionBackupsGetByResourceGroupResponse>;
  }

  /**
   * Deletes a long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  async deleteByResourceGroup(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      backupName,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      operationArguments,
      deleteByResourceGroupOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: deleteByResourceGroupOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Lists all long term retention backups for a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param options The options parameters.
   */
  listByResourceGroupDatabase(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    options?: LongTermRetentionBackupsListByResourceGroupDatabaseOptionalParams
  ): Promise<LongTermRetentionBackupsListByResourceGroupDatabaseResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByResourceGroupDatabaseOperationSpec
    ) as Promise<LongTermRetentionBackupsListByResourceGroupDatabaseResponse>;
  }

  /**
   * Lists the long term retention backups for a given location.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param options The options parameters.
   */
  listByResourceGroupLocation(
    resourceGroupName: string,
    locationName: string,
    options?: LongTermRetentionBackupsListByResourceGroupLocationOptionalParams
  ): Promise<LongTermRetentionBackupsListByResourceGroupLocationResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      locationName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByResourceGroupLocationOperationSpec
    ) as Promise<LongTermRetentionBackupsListByResourceGroupLocationResponse>;
  }

  /**
   * Lists the long term retention backups for a given server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param options The options parameters.
   */
  listByResourceGroupServer(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    options?: LongTermRetentionBackupsListByResourceGroupServerOptionalParams
  ): Promise<LongTermRetentionBackupsListByResourceGroupServerResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      locationName,
      longTermRetentionServerName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByResourceGroupServerOperationSpec
    ) as Promise<LongTermRetentionBackupsListByResourceGroupServerResponse>;
  }

  /**
   * Gets a long term retention backup.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  get(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LongTermRetentionBackupsGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      backupName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<LongTermRetentionBackupsGetResponse>;
  }

  /**
   * Deletes a long term retention backup.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  async delete(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      backupName,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      operationArguments,
      deleteOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Lists all long term retention backups for a database.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param options The options parameters.
   */
  listByDatabase(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    options?: LongTermRetentionBackupsListByDatabaseOptionalParams
  ): Promise<LongTermRetentionBackupsListByDatabaseResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByDatabaseOperationSpec
    ) as Promise<LongTermRetentionBackupsListByDatabaseResponse>;
  }

  /**
   * Lists the long term retention backups for a given location.
   * @param locationName The location of the database
   * @param options The options parameters.
   */
  listByLocation(
    locationName: string,
    options?: LongTermRetentionBackupsListByLocationOptionalParams
  ): Promise<LongTermRetentionBackupsListByLocationResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      locationName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByLocationOperationSpec
    ) as Promise<LongTermRetentionBackupsListByLocationResponse>;
  }

  /**
   * Lists the long term retention backups for a given server.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param options The options parameters.
   */
  listByServer(
    locationName: string,
    longTermRetentionServerName: string,
    options?: LongTermRetentionBackupsListByServerOptionalParams
  ): Promise<LongTermRetentionBackupsListByServerResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      locationName,
      longTermRetentionServerName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByServerOperationSpec
    ) as Promise<LongTermRetentionBackupsListByServerResponse>;
  }

  /**
   * ListByResourceGroupDatabaseNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupDatabase
   *                 method.
   * @param options The options parameters.
   */
  listByResourceGroupDatabaseNext(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    nextLink: string,
    options?: LongTermRetentionBackupsListByResourceGroupDatabaseNextOptionalParams
  ): Promise<LongTermRetentionBackupsListByResourceGroupDatabaseNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByResourceGroupDatabaseNextOperationSpec
    ) as Promise<
      LongTermRetentionBackupsListByResourceGroupDatabaseNextResponse
    >;
  }

  /**
   * ListByResourceGroupLocationNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupLocation
   *                 method.
   * @param options The options parameters.
   */
  listByResourceGroupLocationNext(
    resourceGroupName: string,
    locationName: string,
    nextLink: string,
    options?: LongTermRetentionBackupsListByResourceGroupLocationNextOptionalParams
  ): Promise<LongTermRetentionBackupsListByResourceGroupLocationNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      locationName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByResourceGroupLocationNextOperationSpec
    ) as Promise<
      LongTermRetentionBackupsListByResourceGroupLocationNextResponse
    >;
  }

  /**
   * ListByResourceGroupServerNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupServer
   *                 method.
   * @param options The options parameters.
   */
  listByResourceGroupServerNext(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    nextLink: string,
    options?: LongTermRetentionBackupsListByResourceGroupServerNextOptionalParams
  ): Promise<LongTermRetentionBackupsListByResourceGroupServerNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      locationName,
      longTermRetentionServerName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByResourceGroupServerNextOperationSpec
    ) as Promise<LongTermRetentionBackupsListByResourceGroupServerNextResponse>;
  }

  /**
   * ListByDatabaseNext
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param nextLink The nextLink from the previous successful call to the ListByDatabase method.
   * @param options The options parameters.
   */
  listByDatabaseNext(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    nextLink: string,
    options?: LongTermRetentionBackupsListByDatabaseNextOptionalParams
  ): Promise<LongTermRetentionBackupsListByDatabaseNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByDatabaseNextOperationSpec
    ) as Promise<LongTermRetentionBackupsListByDatabaseNextResponse>;
  }

  /**
   * ListByLocationNext
   * @param locationName The location of the database
   * @param nextLink The nextLink from the previous successful call to the ListByLocation method.
   * @param options The options parameters.
   */
  listByLocationNext(
    locationName: string,
    nextLink: string,
    options?: LongTermRetentionBackupsListByLocationNextOptionalParams
  ): Promise<LongTermRetentionBackupsListByLocationNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      locationName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByLocationNextOperationSpec
    ) as Promise<LongTermRetentionBackupsListByLocationNextResponse>;
  }

  /**
   * ListByServerNext
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param nextLink The nextLink from the previous successful call to the ListByServer method.
   * @param options The options parameters.
   */
  listByServerNext(
    locationName: string,
    longTermRetentionServerName: string,
    nextLink: string,
    options?: LongTermRetentionBackupsListByServerNextOptionalParams
  ): Promise<LongTermRetentionBackupsListByServerNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      locationName,
      longTermRetentionServerName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByServerNextOperationSpec
    ) as Promise<LongTermRetentionBackupsListByServerNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackup
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName
  ],
  serializer
};
const listByResourceGroupDatabaseOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupLocationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupServerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackup
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName
  ],
  serializer
};
const listByDatabaseOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByLocationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByServerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.longTermRetentionServerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupDatabaseNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupLocationNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.locationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupServerNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.locationName,
    Parameters.longTermRetentionServerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByDatabaseNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByLocationNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.locationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByServerNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.locationName,
    Parameters.longTermRetentionServerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
