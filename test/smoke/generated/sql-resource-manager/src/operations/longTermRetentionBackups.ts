/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { LongTermRetentionBackups } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  LongTermRetentionBackup,
  LongTermRetentionBackupsCopyResponse,
  LongTermRetentionBackupsUpdateResponse,
  LongTermRetentionBackupsGetResponse,
  LongTermRetentionBackupsListByDatabaseResponse,
  LongTermRetentionBackupsListByLocationResponse,
  LongTermRetentionBackupsListByServerResponse,
  LongTermRetentionBackupsCopyByResourceGroupResponse,
  LongTermRetentionBackupsUpdateByResourceGroupResponse,
  LongTermRetentionBackupsGetByResourceGroupResponse,
  LongTermRetentionBackupsListByResourceGroupDatabaseResponse,
  LongTermRetentionBackupsListByResourceGroupLocationResponse,
  LongTermRetentionBackupsListByResourceGroupServerResponse,
  LongTermRetentionBackupsListByDatabaseNextResponse,
  LongTermRetentionBackupsListByLocationNextResponse,
  LongTermRetentionBackupsListByServerNextResponse,
  LongTermRetentionBackupsListByResourceGroupDatabaseNextResponse,
  LongTermRetentionBackupsListByResourceGroupLocationNextResponse,
  LongTermRetentionBackupsListByResourceGroupServerNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing LongTermRetentionBackups operations. */
export class LongTermRetentionBackupsImpl implements LongTermRetentionBackups {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class LongTermRetentionBackups class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Lists all long term retention backups for a database.
   *
   */
  public listByDatabase(): PagedAsyncIterableIterator<LongTermRetentionBackup> {
    const iter = this.listByDatabasePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByDatabasePagingPage();
      }
    };
  }

  private async *listByDatabasePagingPage(): AsyncIterableIterator<
    LongTermRetentionBackup[]
  > {
    let result = await this._listByDatabase();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByDatabaseNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByDatabasePagingAll(): AsyncIterableIterator<
    LongTermRetentionBackup
  > {
    for await (const page of this.listByDatabasePagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists the long term retention backups for a given location.
   *
   */
  public listByLocation(): PagedAsyncIterableIterator<LongTermRetentionBackup> {
    const iter = this.listByLocationPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByLocationPagingPage();
      }
    };
  }

  private async *listByLocationPagingPage(): AsyncIterableIterator<
    LongTermRetentionBackup[]
  > {
    let result = await this._listByLocation();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByLocationNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByLocationPagingAll(): AsyncIterableIterator<
    LongTermRetentionBackup
  > {
    for await (const page of this.listByLocationPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists the long term retention backups for a given server.
   *
   */
  public listByServer(): PagedAsyncIterableIterator<LongTermRetentionBackup> {
    const iter = this.listByServerPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByServerPagingPage();
      }
    };
  }

  private async *listByServerPagingPage(): AsyncIterableIterator<
    LongTermRetentionBackup[]
  > {
    let result = await this._listByServer();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByServerNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByServerPagingAll(): AsyncIterableIterator<
    LongTermRetentionBackup
  > {
    for await (const page of this.listByServerPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists all long term retention backups for a database.
   *
   */
  public listByResourceGroupDatabase(): PagedAsyncIterableIterator<
    LongTermRetentionBackup
  > {
    const iter = this.listByResourceGroupDatabasePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupDatabasePagingPage();
      }
    };
  }

  private async *listByResourceGroupDatabasePagingPage(): AsyncIterableIterator<
    LongTermRetentionBackup[]
  > {
    let result = await this._listByResourceGroupDatabase();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupDatabaseNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupDatabasePagingAll(): AsyncIterableIterator<
    LongTermRetentionBackup
  > {
    for await (const page of this.listByResourceGroupDatabasePagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists the long term retention backups for a given location.
   *
   */
  public listByResourceGroupLocation(): PagedAsyncIterableIterator<
    LongTermRetentionBackup
  > {
    const iter = this.listByResourceGroupLocationPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupLocationPagingPage();
      }
    };
  }

  private async *listByResourceGroupLocationPagingPage(): AsyncIterableIterator<
    LongTermRetentionBackup[]
  > {
    let result = await this._listByResourceGroupLocation();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupLocationNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupLocationPagingAll(): AsyncIterableIterator<
    LongTermRetentionBackup
  > {
    for await (const page of this.listByResourceGroupLocationPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists the long term retention backups for a given server.
   *
   */
  public listByResourceGroupServer(): PagedAsyncIterableIterator<
    LongTermRetentionBackup
  > {
    const iter = this.listByResourceGroupServerPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupServerPagingPage();
      }
    };
  }

  private async *listByResourceGroupServerPagingPage(): AsyncIterableIterator<
    LongTermRetentionBackup[]
  > {
    let result = await this._listByResourceGroupServer();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupServerNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupServerPagingAll(): AsyncIterableIterator<
    LongTermRetentionBackup
  > {
    for await (const page of this.listByResourceGroupServerPagingPage()) {
      yield* page;
    }
  }

  /**
   * Copy an existing long term retention backup.
   *
   */
  async beginCopy(): Promise<
    PollerLike<
      PollOperationState<LongTermRetentionBackupsCopyResponse>,
      LongTermRetentionBackupsCopyResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<LongTermRetentionBackupsCopyResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        options
      },
      copyOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Copy an existing long term retention backup.
   *
   */
  async beginCopyAndWait(): Promise<LongTermRetentionBackupsCopyResponse> {
    const poller = await this.beginCopy();
    return poller.pollUntilDone();
  }

  /**
   * Updates an existing long term retention backup.
   *
   */
  async beginUpdate(): Promise<
    PollerLike<
      PollOperationState<LongTermRetentionBackupsUpdateResponse>,
      LongTermRetentionBackupsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<LongTermRetentionBackupsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        options
      },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates an existing long term retention backup.
   *
   */
  async beginUpdateAndWait(): Promise<LongTermRetentionBackupsUpdateResponse> {
    const poller = await this.beginUpdate();
    return poller.pollUntilDone();
  }

  /**
   * Gets a long term retention backup.
   *
   */
  get(): Promise<LongTermRetentionBackupsGetResponse> {}

  /**
   * Deletes a long term retention backup.
   *
   */
  async beginDelete(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Deletes a long term retention backup.
   *
   */
  async beginDeleteAndWait(): Promise<void> {
    const poller = await this.beginDelete();
    return poller.pollUntilDone();
  }

  /**
   * Lists all long term retention backups for a database.
   *
   */
  private _listByDatabase(): Promise<
    LongTermRetentionBackupsListByDatabaseResponse
  > {}

  /**
   * Lists the long term retention backups for a given location.
   *
   */
  private _listByLocation(): Promise<
    LongTermRetentionBackupsListByLocationResponse
  > {}

  /**
   * Lists the long term retention backups for a given server.
   *
   */
  private _listByServer(): Promise<
    LongTermRetentionBackupsListByServerResponse
  > {}

  /**
   * Copy an existing long term retention backup to a different server.
   *
   */
  async beginCopyByResourceGroup(): Promise<
    PollerLike<
      PollOperationState<LongTermRetentionBackupsCopyByResourceGroupResponse>,
      LongTermRetentionBackupsCopyByResourceGroupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<LongTermRetentionBackupsCopyByResourceGroupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        options
      },
      copyByResourceGroupOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Copy an existing long term retention backup to a different server.
   *
   */
  async beginCopyByResourceGroupAndWait(): Promise<
    LongTermRetentionBackupsCopyByResourceGroupResponse
  > {
    const poller = await this.beginCopyByResourceGroup();
    return poller.pollUntilDone();
  }

  /**
   * Updates an existing long term retention backup.
   *
   */
  async beginUpdateByResourceGroup(): Promise<
    PollerLike<
      PollOperationState<LongTermRetentionBackupsUpdateByResourceGroupResponse>,
      LongTermRetentionBackupsUpdateByResourceGroupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<LongTermRetentionBackupsUpdateByResourceGroupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        options
      },
      updateByResourceGroupOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates an existing long term retention backup.
   *
   */
  async beginUpdateByResourceGroupAndWait(): Promise<
    LongTermRetentionBackupsUpdateByResourceGroupResponse
  > {
    const poller = await this.beginUpdateByResourceGroup();
    return poller.pollUntilDone();
  }

  /**
   * Gets a long term retention backup.
   *
   */
  getByResourceGroup(): Promise<
    LongTermRetentionBackupsGetByResourceGroupResponse
  > {}

  /**
   * Deletes a long term retention backup.
   *
   */
  async beginDeleteByResourceGroup(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * Deletes a long term retention backup.
   *
   */
  async beginDeleteByResourceGroupAndWait(): Promise<void> {
    const poller = await this.beginDeleteByResourceGroup();
    return poller.pollUntilDone();
  }

  /**
   * Lists all long term retention backups for a database.
   *
   */
  private _listByResourceGroupDatabase(): Promise<
    LongTermRetentionBackupsListByResourceGroupDatabaseResponse
  > {}

  /**
   * Lists the long term retention backups for a given location.
   *
   */
  private _listByResourceGroupLocation(): Promise<
    LongTermRetentionBackupsListByResourceGroupLocationResponse
  > {}

  /**
   * Lists the long term retention backups for a given server.
   *
   */
  private _listByResourceGroupServer(): Promise<
    LongTermRetentionBackupsListByResourceGroupServerResponse
  > {}

  /**
   * ListByDatabaseNext
   *
   */
  private _listByDatabaseNext(): Promise<
    LongTermRetentionBackupsListByDatabaseNextResponse
  > {}

  /**
   * ListByLocationNext
   *
   */
  private _listByLocationNext(): Promise<
    LongTermRetentionBackupsListByLocationNextResponse
  > {}

  /**
   * ListByServerNext
   *
   */
  private _listByServerNext(): Promise<
    LongTermRetentionBackupsListByServerNextResponse
  > {}

  /**
   * ListByResourceGroupDatabaseNext
   *
   */
  private _listByResourceGroupDatabaseNext(): Promise<
    LongTermRetentionBackupsListByResourceGroupDatabaseNextResponse
  > {}

  /**
   * ListByResourceGroupLocationNext
   *
   */
  private _listByResourceGroupLocationNext(): Promise<
    LongTermRetentionBackupsListByResourceGroupLocationNextResponse
  > {}

  /**
   * ListByResourceGroupServerNext
   *
   */
  private _listByResourceGroupServerNext(): Promise<
    LongTermRetentionBackupsListByResourceGroupServerNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const copyOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/copy",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    201: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    202: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    204: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    default: {}
  },
  requestBody: Parameters.parameters84,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/update",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    201: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    202: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    204: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    default: {}
  },
  requestBody: Parameters.parameters85,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const copyByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/copy",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    201: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    202: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    204: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    default: {}
  },
  requestBody: Parameters.parameters84,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/update",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    201: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    202: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    204: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    default: {}
  },
  requestBody: Parameters.parameters85,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
