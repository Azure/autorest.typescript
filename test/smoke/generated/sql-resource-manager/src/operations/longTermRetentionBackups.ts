/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { LongTermRetentionBackups } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClientContext } from "../sqlManagementClientContext";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  LongTermRetentionBackup,
  LongTermRetentionBackupsListByResourceGroupDatabaseNextOptionalParams,
  LongTermRetentionBackupsListByResourceGroupDatabaseOptionalParams,
  LongTermRetentionBackupsListByResourceGroupLocationNextOptionalParams,
  LongTermRetentionBackupsListByResourceGroupLocationOptionalParams,
  LongTermRetentionBackupsListByResourceGroupServerNextOptionalParams,
  LongTermRetentionBackupsListByResourceGroupServerOptionalParams,
  LongTermRetentionBackupsListByDatabaseNextOptionalParams,
  LongTermRetentionBackupsListByDatabaseOptionalParams,
  LongTermRetentionBackupsListByLocationNextOptionalParams,
  LongTermRetentionBackupsListByLocationOptionalParams,
  LongTermRetentionBackupsListByServerNextOptionalParams,
  LongTermRetentionBackupsListByServerOptionalParams,
  LongTermRetentionBackupsGetByResourceGroupOptionalParams,
  LongTermRetentionBackupsGetByResourceGroupResponse,
  LongTermRetentionBackupsDeleteByResourceGroupOptionalParams,
  LongTermRetentionBackupsListByResourceGroupDatabaseResponse,
  LongTermRetentionBackupsListByResourceGroupLocationResponse,
  LongTermRetentionBackupsListByResourceGroupServerResponse,
  LongTermRetentionBackupsGetOptionalParams,
  LongTermRetentionBackupsGetResponse,
  LongTermRetentionBackupsDeleteOptionalParams,
  LongTermRetentionBackupsListByDatabaseResponse,
  LongTermRetentionBackupsListByLocationResponse,
  LongTermRetentionBackupsListByServerResponse,
  LongTermRetentionBackupsListByResourceGroupDatabaseNextResponse,
  LongTermRetentionBackupsListByResourceGroupLocationNextResponse,
  LongTermRetentionBackupsListByResourceGroupServerNextResponse,
  LongTermRetentionBackupsListByDatabaseNextResponse,
  LongTermRetentionBackupsListByLocationNextResponse,
  LongTermRetentionBackupsListByServerNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a LongTermRetentionBackups. */
export class LongTermRetentionBackupsImpl implements LongTermRetentionBackups {
  private readonly client: SqlManagementClientContext;

  /**
   * Initialize a new instance of the class LongTermRetentionBackups class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all long term retention backups for a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param options The options parameters.
   */
  public listByResourceGroupDatabase(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    options?: LongTermRetentionBackupsListByResourceGroupDatabaseOptionalParams
  ): PagedAsyncIterableIterator<LongTermRetentionBackup> {
    const iter = this.listByResourceGroupDatabasePagingAll(
      resourceGroupName,
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupDatabasePagingPage(
          resourceGroupName,
          locationName,
          longTermRetentionServerName,
          longTermRetentionDatabaseName,
          options
        );
      }
    };
  }

  private async *listByResourceGroupDatabasePagingPage(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    options?: LongTermRetentionBackupsListByResourceGroupDatabaseOptionalParams
  ): AsyncIterableIterator<LongTermRetentionBackup[]> {
    let result = await this._listByResourceGroupDatabase(
      resourceGroupName,
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupDatabaseNext(
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupDatabasePagingAll(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    options?: LongTermRetentionBackupsListByResourceGroupDatabaseOptionalParams
  ): AsyncIterableIterator<LongTermRetentionBackup> {
    for await (const page of this.listByResourceGroupDatabasePagingPage(
      resourceGroupName,
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the long term retention backups for a given location.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param options The options parameters.
   */
  public listByResourceGroupLocation(
    resourceGroupName: string,
    locationName: string,
    options?: LongTermRetentionBackupsListByResourceGroupLocationOptionalParams
  ): PagedAsyncIterableIterator<LongTermRetentionBackup> {
    const iter = this.listByResourceGroupLocationPagingAll(
      resourceGroupName,
      locationName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupLocationPagingPage(
          resourceGroupName,
          locationName,
          options
        );
      }
    };
  }

  private async *listByResourceGroupLocationPagingPage(
    resourceGroupName: string,
    locationName: string,
    options?: LongTermRetentionBackupsListByResourceGroupLocationOptionalParams
  ): AsyncIterableIterator<LongTermRetentionBackup[]> {
    let result = await this._listByResourceGroupLocation(
      resourceGroupName,
      locationName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupLocationNext(
        resourceGroupName,
        locationName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupLocationPagingAll(
    resourceGroupName: string,
    locationName: string,
    options?: LongTermRetentionBackupsListByResourceGroupLocationOptionalParams
  ): AsyncIterableIterator<LongTermRetentionBackup> {
    for await (const page of this.listByResourceGroupLocationPagingPage(
      resourceGroupName,
      locationName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the long term retention backups for a given server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param options The options parameters.
   */
  public listByResourceGroupServer(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    options?: LongTermRetentionBackupsListByResourceGroupServerOptionalParams
  ): PagedAsyncIterableIterator<LongTermRetentionBackup> {
    const iter = this.listByResourceGroupServerPagingAll(
      resourceGroupName,
      locationName,
      longTermRetentionServerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupServerPagingPage(
          resourceGroupName,
          locationName,
          longTermRetentionServerName,
          options
        );
      }
    };
  }

  private async *listByResourceGroupServerPagingPage(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    options?: LongTermRetentionBackupsListByResourceGroupServerOptionalParams
  ): AsyncIterableIterator<LongTermRetentionBackup[]> {
    let result = await this._listByResourceGroupServer(
      resourceGroupName,
      locationName,
      longTermRetentionServerName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupServerNext(
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupServerPagingAll(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    options?: LongTermRetentionBackupsListByResourceGroupServerOptionalParams
  ): AsyncIterableIterator<LongTermRetentionBackup> {
    for await (const page of this.listByResourceGroupServerPagingPage(
      resourceGroupName,
      locationName,
      longTermRetentionServerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all long term retention backups for a database.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param options The options parameters.
   */
  public listByDatabase(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    options?: LongTermRetentionBackupsListByDatabaseOptionalParams
  ): PagedAsyncIterableIterator<LongTermRetentionBackup> {
    const iter = this.listByDatabasePagingAll(
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByDatabasePagingPage(
          locationName,
          longTermRetentionServerName,
          longTermRetentionDatabaseName,
          options
        );
      }
    };
  }

  private async *listByDatabasePagingPage(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    options?: LongTermRetentionBackupsListByDatabaseOptionalParams
  ): AsyncIterableIterator<LongTermRetentionBackup[]> {
    let result = await this._listByDatabase(
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByDatabaseNext(
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByDatabasePagingAll(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    options?: LongTermRetentionBackupsListByDatabaseOptionalParams
  ): AsyncIterableIterator<LongTermRetentionBackup> {
    for await (const page of this.listByDatabasePagingPage(
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the long term retention backups for a given location.
   * @param locationName The location of the database
   * @param options The options parameters.
   */
  public listByLocation(
    locationName: string,
    options?: LongTermRetentionBackupsListByLocationOptionalParams
  ): PagedAsyncIterableIterator<LongTermRetentionBackup> {
    const iter = this.listByLocationPagingAll(locationName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByLocationPagingPage(locationName, options);
      }
    };
  }

  private async *listByLocationPagingPage(
    locationName: string,
    options?: LongTermRetentionBackupsListByLocationOptionalParams
  ): AsyncIterableIterator<LongTermRetentionBackup[]> {
    let result = await this._listByLocation(locationName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByLocationNext(
        locationName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByLocationPagingAll(
    locationName: string,
    options?: LongTermRetentionBackupsListByLocationOptionalParams
  ): AsyncIterableIterator<LongTermRetentionBackup> {
    for await (const page of this.listByLocationPagingPage(
      locationName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the long term retention backups for a given server.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param options The options parameters.
   */
  public listByServer(
    locationName: string,
    longTermRetentionServerName: string,
    options?: LongTermRetentionBackupsListByServerOptionalParams
  ): PagedAsyncIterableIterator<LongTermRetentionBackup> {
    const iter = this.listByServerPagingAll(
      locationName,
      longTermRetentionServerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByServerPagingPage(
          locationName,
          longTermRetentionServerName,
          options
        );
      }
    };
  }

  private async *listByServerPagingPage(
    locationName: string,
    longTermRetentionServerName: string,
    options?: LongTermRetentionBackupsListByServerOptionalParams
  ): AsyncIterableIterator<LongTermRetentionBackup[]> {
    let result = await this._listByServer(
      locationName,
      longTermRetentionServerName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByServerNext(
        locationName,
        longTermRetentionServerName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByServerPagingAll(
    locationName: string,
    longTermRetentionServerName: string,
    options?: LongTermRetentionBackupsListByServerOptionalParams
  ): AsyncIterableIterator<LongTermRetentionBackup> {
    for await (const page of this.listByServerPagingPage(
      locationName,
      longTermRetentionServerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  getByResourceGroup(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: LongTermRetentionBackupsGetByResourceGroupOptionalParams
  ): Promise<LongTermRetentionBackupsGetByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        options
      },
      getByResourceGroupOperationSpec
    );
  }

  /**
   * Deletes a long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  async beginDeleteByResourceGroup(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: LongTermRetentionBackupsDeleteByResourceGroupOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        options
      },
      deleteByResourceGroupOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Deletes a long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  async beginDeleteByResourceGroupAndWait(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: LongTermRetentionBackupsDeleteByResourceGroupOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeleteByResourceGroup(
      resourceGroupName,
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      backupName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists all long term retention backups for a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param options The options parameters.
   */
  private _listByResourceGroupDatabase(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    options?: LongTermRetentionBackupsListByResourceGroupDatabaseOptionalParams
  ): Promise<LongTermRetentionBackupsListByResourceGroupDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        options
      },
      listByResourceGroupDatabaseOperationSpec
    );
  }

  /**
   * Lists the long term retention backups for a given location.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param options The options parameters.
   */
  private _listByResourceGroupLocation(
    resourceGroupName: string,
    locationName: string,
    options?: LongTermRetentionBackupsListByResourceGroupLocationOptionalParams
  ): Promise<LongTermRetentionBackupsListByResourceGroupLocationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, locationName, options },
      listByResourceGroupLocationOperationSpec
    );
  }

  /**
   * Lists the long term retention backups for a given server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param options The options parameters.
   */
  private _listByResourceGroupServer(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    options?: LongTermRetentionBackupsListByResourceGroupServerOptionalParams
  ): Promise<LongTermRetentionBackupsListByResourceGroupServerResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, locationName, longTermRetentionServerName, options },
      listByResourceGroupServerOperationSpec
    );
  }

  /**
   * Gets a long term retention backup.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  get(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: LongTermRetentionBackupsGetOptionalParams
  ): Promise<LongTermRetentionBackupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Deletes a long term retention backup.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  async beginDelete(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: LongTermRetentionBackupsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        options
      },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Deletes a long term retention backup.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: LongTermRetentionBackupsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      locationName,
      longTermRetentionServerName,
      longTermRetentionDatabaseName,
      backupName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists all long term retention backups for a database.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param options The options parameters.
   */
  private _listByDatabase(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    options?: LongTermRetentionBackupsListByDatabaseOptionalParams
  ): Promise<LongTermRetentionBackupsListByDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        options
      },
      listByDatabaseOperationSpec
    );
  }

  /**
   * Lists the long term retention backups for a given location.
   * @param locationName The location of the database
   * @param options The options parameters.
   */
  private _listByLocation(
    locationName: string,
    options?: LongTermRetentionBackupsListByLocationOptionalParams
  ): Promise<LongTermRetentionBackupsListByLocationResponse> {
    return this.client.sendOperationRequest(
      { locationName, options },
      listByLocationOperationSpec
    );
  }

  /**
   * Lists the long term retention backups for a given server.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param options The options parameters.
   */
  private _listByServer(
    locationName: string,
    longTermRetentionServerName: string,
    options?: LongTermRetentionBackupsListByServerOptionalParams
  ): Promise<LongTermRetentionBackupsListByServerResponse> {
    return this.client.sendOperationRequest(
      { locationName, longTermRetentionServerName, options },
      listByServerOperationSpec
    );
  }

  /**
   * ListByResourceGroupDatabaseNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupDatabase
   *                 method.
   * @param options The options parameters.
   */
  private _listByResourceGroupDatabaseNext(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    nextLink: string,
    options?: LongTermRetentionBackupsListByResourceGroupDatabaseNextOptionalParams
  ): Promise<LongTermRetentionBackupsListByResourceGroupDatabaseNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        nextLink,
        options
      },
      listByResourceGroupDatabaseNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupLocationNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupLocation
   *                 method.
   * @param options The options parameters.
   */
  private _listByResourceGroupLocationNext(
    resourceGroupName: string,
    locationName: string,
    nextLink: string,
    options?: LongTermRetentionBackupsListByResourceGroupLocationNextOptionalParams
  ): Promise<LongTermRetentionBackupsListByResourceGroupLocationNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, locationName, nextLink, options },
      listByResourceGroupLocationNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupServerNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupServer
   *                 method.
   * @param options The options parameters.
   */
  private _listByResourceGroupServerNext(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    nextLink: string,
    options?: LongTermRetentionBackupsListByResourceGroupServerNextOptionalParams
  ): Promise<LongTermRetentionBackupsListByResourceGroupServerNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        nextLink,
        options
      },
      listByResourceGroupServerNextOperationSpec
    );
  }

  /**
   * ListByDatabaseNext
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param nextLink The nextLink from the previous successful call to the ListByDatabase method.
   * @param options The options parameters.
   */
  private _listByDatabaseNext(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    nextLink: string,
    options?: LongTermRetentionBackupsListByDatabaseNextOptionalParams
  ): Promise<LongTermRetentionBackupsListByDatabaseNextResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        nextLink,
        options
      },
      listByDatabaseNextOperationSpec
    );
  }

  /**
   * ListByLocationNext
   * @param locationName The location of the database
   * @param nextLink The nextLink from the previous successful call to the ListByLocation method.
   * @param options The options parameters.
   */
  private _listByLocationNext(
    locationName: string,
    nextLink: string,
    options?: LongTermRetentionBackupsListByLocationNextOptionalParams
  ): Promise<LongTermRetentionBackupsListByLocationNextResponse> {
    return this.client.sendOperationRequest(
      { locationName, nextLink, options },
      listByLocationNextOperationSpec
    );
  }

  /**
   * ListByServerNext
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param nextLink The nextLink from the previous successful call to the ListByServer method.
   * @param options The options parameters.
   */
  private _listByServerNext(
    locationName: string,
    longTermRetentionServerName: string,
    nextLink: string,
    options?: LongTermRetentionBackupsListByServerNextOptionalParams
  ): Promise<LongTermRetentionBackupsListByServerNextResponse> {
    return this.client.sendOperationRequest(
      { locationName, longTermRetentionServerName, nextLink, options },
      listByServerNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackup
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName
  ],
  serializer
};
const listByResourceGroupDatabaseOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupLocationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupServerOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackup
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName
  ],
  serializer
};
const listByDatabaseOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByLocationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByServerOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.longTermRetentionServerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupDatabaseNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupLocationNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.locationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupServerNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.locationName,
    Parameters.longTermRetentionServerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByDatabaseNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByLocationNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.locationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByServerNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.locationName,
    Parameters.longTermRetentionServerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
