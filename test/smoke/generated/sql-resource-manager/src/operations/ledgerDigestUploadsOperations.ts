/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { LedgerDigestUploadsOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  LedgerDigestUploads,
  LedgerDigestUploadsGetResponse,
  LedgerDigestUploadsCreateOrUpdateResponse,
  LedgerDigestUploadsListByDatabaseResponse,
  LedgerDigestUploadsDisableResponse,
  LedgerDigestUploadsListByDatabaseNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing LedgerDigestUploadsOperations operations. */
export class LedgerDigestUploadsOperationsImpl
  implements LedgerDigestUploadsOperations {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class LedgerDigestUploadsOperations class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Gets all ledger digest upload settings on a database.
   *
   */
  public listByDatabase(): PagedAsyncIterableIterator<LedgerDigestUploads> {
    const iter = this.listByDatabasePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByDatabasePagingPage();
      }
    };
  }

  private async *listByDatabasePagingPage(): AsyncIterableIterator<
    LedgerDigestUploads[]
  > {
    let result = await this._listByDatabase();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByDatabaseNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByDatabasePagingAll(): AsyncIterableIterator<
    LedgerDigestUploads
  > {
    for await (const page of this.listByDatabasePagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets the current ledger digest upload configuration for a database.
   *
   */
  get(): Promise<LedgerDigestUploadsGetResponse> {}

  /**
   * Enables upload ledger digests to an Azure Storage account or an Azure Confidential Ledger instance.
   *
   */
  async beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<LedgerDigestUploadsCreateOrUpdateResponse>,
      LedgerDigestUploadsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<LedgerDigestUploadsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        serverName,
        databaseName,
        ledgerDigestUploads,
        options
      },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Enables upload ledger digests to an Azure Storage account or an Azure Confidential Ledger instance.
   *
   */
  async beginCreateOrUpdateAndWait(): Promise<
    LedgerDigestUploadsCreateOrUpdateResponse
  > {
    const poller = await this.beginCreateOrUpdate();
    return poller.pollUntilDone();
  }

  /**
   * Gets all ledger digest upload settings on a database.
   *
   */
  private _listByDatabase(): Promise<
    LedgerDigestUploadsListByDatabaseResponse
  > {}

  /**
   * Disables uploading ledger digests to an Azure Storage account or an Azure Confidential Ledger
   * instance.
   *
   */
  async beginDisable(): Promise<
    PollerLike<
      PollOperationState<LedgerDigestUploadsDisableResponse>,
      LedgerDigestUploadsDisableResponse
    >
  > {}

  /**
   * Disables uploading ledger digests to an Azure Storage account or an Azure Confidential Ledger
   * instance.
   *
   */
  async beginDisableAndWait(): Promise<LedgerDigestUploadsDisableResponse> {
    const poller = await this.beginDisable();
    return poller.pollUntilDone();
  }

  /**
   * ListByDatabaseNext
   *
   */
  private _listByDatabaseNext(): Promise<
    LedgerDigestUploadsListByDatabaseNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/ledgerDigestUploads/{ledgerDigestUploads}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.LedgerDigestUploads
    },
    201: {
      bodyMapper: Mappers.LedgerDigestUploads
    },
    202: {
      bodyMapper: Mappers.LedgerDigestUploads
    },
    204: {
      bodyMapper: Mappers.LedgerDigestUploads
    },
    default: {}
  },
  requestBody: Parameters.parameters78,
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.ledgerDigestUploads
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
