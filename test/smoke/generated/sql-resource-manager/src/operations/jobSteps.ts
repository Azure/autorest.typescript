/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { JobSteps } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  JobStep,
  JobStepsListByVersionResponse,
  JobStepsGetByVersionResponse,
  JobStepsListByJobResponse,
  JobStepsGetResponse,
  JobStepsCreateOrUpdateResponse,
  JobStepsListByVersionNextResponse,
  JobStepsListByJobNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing JobSteps operations. */
export class JobStepsImpl implements JobSteps {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class JobSteps class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Gets all job steps in the specified job version.
   *
   */
  public listByVersion(): PagedAsyncIterableIterator<JobStep> {
    const iter = this.listByVersionPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByVersionPagingPage();
      }
    };
  }

  private async *listByVersionPagingPage(): AsyncIterableIterator<JobStep[]> {
    let result = await this._listByVersion();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByVersionNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByVersionPagingAll(): AsyncIterableIterator<JobStep> {
    for await (const page of this.listByVersionPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets all job steps for a job's current version.
   *
   */
  public listByJob(): PagedAsyncIterableIterator<JobStep> {
    const iter = this.listByJobPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByJobPagingPage();
      }
    };
  }

  private async *listByJobPagingPage(): AsyncIterableIterator<JobStep[]> {
    let result = await this._listByJob();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByJobNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByJobPagingAll(): AsyncIterableIterator<JobStep> {
    for await (const page of this.listByJobPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets all job steps in the specified job version.
   *
   */
  private _listByVersion(): Promise<JobStepsListByVersionResponse> {}

  /**
   * Gets the specified version of a job step.
   *
   */
  getByVersion(): Promise<JobStepsGetByVersionResponse> {}

  /**
   * Gets all job steps for a job's current version.
   *
   */
  private _listByJob(): Promise<JobStepsListByJobResponse> {}

  /**
   * Gets a job step in a job's current version.
   *
   */
  get(): Promise<JobStepsGetResponse> {}

  /**
   * Creates or updates a job step. This will implicitly create a new job version.
   *
   */
  createOrUpdate(): Promise<JobStepsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        jobAgentName,
        jobName,
        stepName,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes a job step. This will implicitly create a new job version.
   *
   */
  delete(): Promise<void> {}

  /**
   * ListByVersionNext
   *
   */
  private _listByVersionNext(): Promise<JobStepsListByVersionNextResponse> {}

  /**
   * ListByJobNext
   *
   */
  private _listByJobNext(): Promise<JobStepsListByJobNextResponse> {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps/{stepName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.JobStep
    },
    201: {
      bodyMapper: Mappers.JobStep
    },
    default: {}
  },
  requestBody: Parameters.parameters34,
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.jobAgentName,
    Parameters.jobName,
    Parameters.stepName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
