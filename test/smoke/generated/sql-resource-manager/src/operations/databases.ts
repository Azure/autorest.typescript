/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Databases } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Metric,
  MetricDefinition,
  Database,
  DatabasesListMetricsResponse,
  DatabasesListMetricDefinitionsResponse,
  DatabasesListByServerResponse,
  DatabasesGetResponse,
  DatabasesCreateOrUpdateResponse,
  DatabasesUpdateResponse,
  DatabasesListByElasticPoolResponse,
  DatabasesListInaccessibleByServerResponse,
  DatabasesPauseResponse,
  DatabasesResumeResponse,
  DatabasesImportResponse,
  DatabasesExportResponse,
  DatabasesListByServerNextResponse,
  DatabasesListByElasticPoolNextResponse,
  DatabasesListInaccessibleByServerNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Databases operations. */
export class DatabasesImpl implements Databases {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class Databases class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Returns database metrics.
   *
   */
  public listMetrics(): PagedAsyncIterableIterator<Metric> {
    const iter = this.listMetricsPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listMetricsPagingPage();
      }
    };
  }

  private async *listMetricsPagingPage(): AsyncIterableIterator<Metric[]> {
    let result = await this._listMetrics();
    yield result.value || [];
  }

  private async *listMetricsPagingAll(): AsyncIterableIterator<Metric> {
    for await (const page of this.listMetricsPagingPage()) {
      yield* page;
    }
  }

  /**
   * Returns database metric definitions.
   *
   */
  public listMetricDefinitions(): PagedAsyncIterableIterator<MetricDefinition> {
    const iter = this.listMetricDefinitionsPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listMetricDefinitionsPagingPage();
      }
    };
  }

  private async *listMetricDefinitionsPagingPage(): AsyncIterableIterator<
    MetricDefinition[]
  > {
    let result = await this._listMetricDefinitions();
    yield result.value || [];
  }

  private async *listMetricDefinitionsPagingAll(): AsyncIterableIterator<
    MetricDefinition
  > {
    for await (const page of this.listMetricDefinitionsPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets a list of databases.
   *
   */
  public listByServer(): PagedAsyncIterableIterator<Database> {
    const iter = this.listByServerPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByServerPagingPage();
      }
    };
  }

  private async *listByServerPagingPage(): AsyncIterableIterator<Database[]> {
    let result = await this._listByServer();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByServerNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByServerPagingAll(): AsyncIterableIterator<Database> {
    for await (const page of this.listByServerPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets a list of databases in an elastic pool.
   *
   */
  public listByElasticPool(): PagedAsyncIterableIterator<Database> {
    const iter = this.listByElasticPoolPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByElasticPoolPagingPage();
      }
    };
  }

  private async *listByElasticPoolPagingPage(): AsyncIterableIterator<
    Database[]
  > {
    let result = await this._listByElasticPool();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByElasticPoolNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByElasticPoolPagingAll(): AsyncIterableIterator<Database> {
    for await (const page of this.listByElasticPoolPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets a list of inaccessible databases in a logical server
   *
   */
  public listInaccessibleByServer(): PagedAsyncIterableIterator<Database> {
    const iter = this.listInaccessibleByServerPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listInaccessibleByServerPagingPage();
      }
    };
  }

  private async *listInaccessibleByServerPagingPage(): AsyncIterableIterator<
    Database[]
  > {
    let result = await this._listInaccessibleByServer();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listInaccessibleByServerNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listInaccessibleByServerPagingAll(): AsyncIterableIterator<
    Database
  > {
    for await (const page of this.listInaccessibleByServerPagingPage()) {
      yield* page;
    }
  }

  /**
   * Returns database metrics.
   *
   */
  private _listMetrics(): Promise<DatabasesListMetricsResponse> {}

  /**
   * Returns database metric definitions.
   *
   */
  private _listMetricDefinitions(): Promise<
    DatabasesListMetricDefinitionsResponse
  > {}

  /**
   * Gets a list of databases.
   *
   */
  private _listByServer(): Promise<DatabasesListByServerResponse> {}

  /**
   * Gets a database.
   *
   */
  get(): Promise<DatabasesGetResponse> {}

  /**
   * Creates a new database or updates an existing database.
   *
   */
  async beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<DatabasesCreateOrUpdateResponse>,
      DatabasesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DatabasesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, serverName, databaseName, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a new database or updates an existing database.
   *
   */
  async beginCreateOrUpdateAndWait(): Promise<DatabasesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate();
    return poller.pollUntilDone();
  }

  /**
   * Deletes the database.
   *
   */
  async beginDelete(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Deletes the database.
   *
   */
  async beginDeleteAndWait(): Promise<void> {
    const poller = await this.beginDelete();
    return poller.pollUntilDone();
  }

  /**
   * Updates an existing database.
   *
   */
  async beginUpdate(): Promise<
    PollerLike<
      PollOperationState<DatabasesUpdateResponse>,
      DatabasesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DatabasesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, serverName, databaseName, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates an existing database.
   *
   */
  async beginUpdateAndWait(): Promise<DatabasesUpdateResponse> {
    const poller = await this.beginUpdate();
    return poller.pollUntilDone();
  }

  /**
   * Gets a list of databases in an elastic pool.
   *
   */
  private _listByElasticPool(): Promise<DatabasesListByElasticPoolResponse> {}

  /**
   * Failovers a database.
   *
   */
  async beginFailover(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Failovers a database.
   *
   */
  async beginFailoverAndWait(): Promise<void> {
    const poller = await this.beginFailover();
    return poller.pollUntilDone();
  }

  /**
   * Gets a list of inaccessible databases in a logical server
   *
   */
  private _listInaccessibleByServer(): Promise<
    DatabasesListInaccessibleByServerResponse
  > {}

  /**
   * Pauses a database.
   *
   */
  async beginPause(): Promise<
    PollerLike<
      PollOperationState<DatabasesPauseResponse>,
      DatabasesPauseResponse
    >
  > {}

  /**
   * Pauses a database.
   *
   */
  async beginPauseAndWait(): Promise<DatabasesPauseResponse> {
    const poller = await this.beginPause();
    return poller.pollUntilDone();
  }

  /**
   * Resumes a database.
   *
   */
  async beginResume(): Promise<
    PollerLike<
      PollOperationState<DatabasesResumeResponse>,
      DatabasesResumeResponse
    >
  > {}

  /**
   * Resumes a database.
   *
   */
  async beginResumeAndWait(): Promise<DatabasesResumeResponse> {
    const poller = await this.beginResume();
    return poller.pollUntilDone();
  }

  /**
   * Upgrades a data warehouse.
   *
   */
  async beginUpgradeDataWarehouse(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * Upgrades a data warehouse.
   *
   */
  async beginUpgradeDataWarehouseAndWait(): Promise<void> {
    const poller = await this.beginUpgradeDataWarehouse();
    return poller.pollUntilDone();
  }

  /**
   * Renames a database.
   *
   */
  rename(): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, databaseName, options },
      renameOperationSpec
    );
  }

  /**
   * Imports a bacpac into a new database.
   *
   */
  async beginImport(): Promise<
    PollerLike<
      PollOperationState<DatabasesImportResponse>,
      DatabasesImportResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DatabasesImportResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, serverName, databaseName, options },
      importOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Imports a bacpac into a new database.
   *
   */
  async beginImportAndWait(): Promise<DatabasesImportResponse> {
    const poller = await this.beginImport();
    return poller.pollUntilDone();
  }

  /**
   * Exports a database.
   *
   */
  async beginExport(): Promise<
    PollerLike<
      PollOperationState<DatabasesExportResponse>,
      DatabasesExportResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DatabasesExportResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, serverName, databaseName, options },
      exportOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Exports a database.
   *
   */
  async beginExportAndWait(): Promise<DatabasesExportResponse> {
    const poller = await this.beginExport();
    return poller.pollUntilDone();
  }

  /**
   * ListByServerNext
   *
   */
  private _listByServerNext(): Promise<DatabasesListByServerNextResponse> {}

  /**
   * ListByElasticPoolNext
   *
   */
  private _listByElasticPoolNext(): Promise<
    DatabasesListByElasticPoolNextResponse
  > {}

  /**
   * ListInaccessibleByServerNext
   *
   */
  private _listInaccessibleByServerNext(): Promise<
    DatabasesListInaccessibleByServerNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Database
    },
    201: {
      bodyMapper: Mappers.Database
    },
    202: {
      bodyMapper: Mappers.Database
    },
    204: {
      bodyMapper: Mappers.Database
    },
    default: {}
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Database
    },
    201: {
      bodyMapper: Mappers.Database
    },
    202: {
      bodyMapper: Mappers.Database
    },
    204: {
      bodyMapper: Mappers.Database
    },
    default: {}
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const renameOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/move",
  httpMethod: "POST",
  responses: { 200: {}, default: {} },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const importOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/import",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ImportExportOperationResult
    },
    201: {
      bodyMapper: Mappers.ImportExportOperationResult
    },
    202: {
      bodyMapper: Mappers.ImportExportOperationResult
    },
    204: {
      bodyMapper: Mappers.ImportExportOperationResult
    },
    default: {}
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const exportOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/export",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ImportExportOperationResult
    },
    201: {
      bodyMapper: Mappers.ImportExportOperationResult
    },
    202: {
      bodyMapper: Mappers.ImportExportOperationResult
    },
    204: {
      bodyMapper: Mappers.ImportExportOperationResult
    },
    default: {}
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
