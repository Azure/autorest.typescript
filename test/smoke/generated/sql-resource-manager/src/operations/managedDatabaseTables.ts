/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ManagedDatabaseTables } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  DatabaseTable,
  ManagedDatabaseTablesListBySchemaResponse,
  ManagedDatabaseTablesGetResponse,
  ManagedDatabaseTablesListBySchemaNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ManagedDatabaseTables operations. */
export class ManagedDatabaseTablesImpl implements ManagedDatabaseTables {
  /**
   * Initialize a new instance of the class ManagedDatabaseTables class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {}

  /**
   * List managed database tables
   *
   */
  public listBySchema(): PagedAsyncIterableIterator<DatabaseTable> {
    const iter = this.listBySchemaPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySchemaPagingPage();
      }
    };
  }

  private async *listBySchemaPagingPage(): AsyncIterableIterator<
    DatabaseTable[]
  > {
    let result = await this._listBySchema();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySchemaNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySchemaPagingAll(): AsyncIterableIterator<DatabaseTable> {
    for await (const page of this.listBySchemaPagingPage()) {
      yield* page;
    }
  }

  /**
   * List managed database tables
   *
   */
  private _listBySchema(): Promise<ManagedDatabaseTablesListBySchemaResponse> {}

  /**
   * Get managed database table
   *
   */
  get(): Promise<ManagedDatabaseTablesGetResponse> {}

  /**
   * ListBySchemaNext
   *
   */
  private _listBySchemaNext(): Promise<
    ManagedDatabaseTablesListBySchemaNextResponse
  > {}
}
// Operation Specifications
