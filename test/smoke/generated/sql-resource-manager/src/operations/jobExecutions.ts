/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { JobExecutions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import { SqlManagementClient } from "../sqlManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  JobExecution,
  JobExecutionsListByAgentResponse,
  JobExecutionsCreateResponse,
  JobExecutionsListByJobResponse,
  JobExecutionsGetResponse,
  JobExecutionsCreateOrUpdateResponse,
  JobExecutionsListByAgentNextResponse,
  JobExecutionsListByJobNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing JobExecutions operations. */
export class JobExecutionsImpl implements JobExecutions {
  /**
   * Initialize a new instance of the class JobExecutions class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {}

  /**
   * Lists all executions in a job agent.
   *
   */
  public listByAgent(): PagedAsyncIterableIterator<JobExecution> {
    const iter = this.listByAgentPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByAgentPagingPage();
      }
    };
  }

  private async *listByAgentPagingPage(): AsyncIterableIterator<
    JobExecution[]
  > {
    let result = await this._listByAgent();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByAgentNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByAgentPagingAll(): AsyncIterableIterator<JobExecution> {
    for await (const page of this.listByAgentPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists a job's executions.
   *
   */
  public listByJob(): PagedAsyncIterableIterator<JobExecution> {
    const iter = this.listByJobPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByJobPagingPage();
      }
    };
  }

  private async *listByJobPagingPage(): AsyncIterableIterator<JobExecution[]> {
    let result = await this._listByJob();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByJobNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByJobPagingAll(): AsyncIterableIterator<JobExecution> {
    for await (const page of this.listByJobPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists all executions in a job agent.
   *
   */
  private _listByAgent(): Promise<JobExecutionsListByAgentResponse> {}

  /**
   * Requests cancellation of a job execution.
   *
   */
  cancel(): Promise<void> {}

  /**
   * Starts an elastic job execution.
   *
   */
  async beginCreate(): Promise<
    PollerLike<
      PollOperationState<JobExecutionsCreateResponse>,
      JobExecutionsCreateResponse
    >
  > {}

  /**
   * Starts an elastic job execution.
   *
   */
  async beginCreateAndWait(): Promise<JobExecutionsCreateResponse> {
    const poller = await this.beginCreate();
    return poller.pollUntilDone();
  }

  /**
   * Lists a job's executions.
   *
   */
  private _listByJob(): Promise<JobExecutionsListByJobResponse> {}

  /**
   * Gets a job execution.
   *
   */
  get(): Promise<JobExecutionsGetResponse> {}

  /**
   * Creates or updates a job execution.
   *
   */
  async beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<JobExecutionsCreateOrUpdateResponse>,
      JobExecutionsCreateOrUpdateResponse
    >
  > {}

  /**
   * Creates or updates a job execution.
   *
   */
  async beginCreateOrUpdateAndWait(): Promise<
    JobExecutionsCreateOrUpdateResponse
  > {
    const poller = await this.beginCreateOrUpdate();
    return poller.pollUntilDone();
  }

  /**
   * ListByAgentNext
   *
   */
  private _listByAgentNext(): Promise<JobExecutionsListByAgentNextResponse> {}

  /**
   * ListByJobNext
   *
   */
  private _listByJobNext(): Promise<JobExecutionsListByJobNextResponse> {}
}
// Operation Specifications
