/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DatabaseUsages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  DatabaseUsage,
  DatabaseUsagesListByDatabaseResponse,
  DatabaseUsagesListByDatabaseNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DatabaseUsages operations. */
export class DatabaseUsagesImpl implements DatabaseUsages {
  /**
   * Initialize a new instance of the class DatabaseUsages class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {}

  /**
   * Gets database usages.
   *
   */
  public listByDatabase(): PagedAsyncIterableIterator<DatabaseUsage> {
    const iter = this.listByDatabasePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByDatabasePagingPage();
      }
    };
  }

  private async *listByDatabasePagingPage(): AsyncIterableIterator<
    DatabaseUsage[]
  > {
    let result = await this._listByDatabase();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByDatabaseNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByDatabasePagingAll(): AsyncIterableIterator<
    DatabaseUsage
  > {
    for await (const page of this.listByDatabasePagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets database usages.
   *
   */
  private _listByDatabase(): Promise<DatabaseUsagesListByDatabaseResponse> {}

  /**
   * ListByDatabaseNext
   *
   */
  private _listByDatabaseNext(): Promise<
    DatabaseUsagesListByDatabaseNextResponse
  > {}
}
// Operation Specifications
