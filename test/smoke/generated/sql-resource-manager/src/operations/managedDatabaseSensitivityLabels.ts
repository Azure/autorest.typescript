/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ManagedDatabaseSensitivityLabels } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  SensitivityLabel,
  ManagedDatabaseSensitivityLabelsGetResponse,
  ManagedDatabaseSensitivityLabelsCreateOrUpdateResponse,
  ManagedDatabaseSensitivityLabelsListCurrentByDatabaseResponse,
  ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseResponse,
  ManagedDatabaseSensitivityLabelsListCurrentByDatabaseNextResponse,
  ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ManagedDatabaseSensitivityLabels operations. */
export class ManagedDatabaseSensitivityLabelsImpl
  implements ManagedDatabaseSensitivityLabels {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class ManagedDatabaseSensitivityLabels class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Gets the sensitivity labels of a given database
   *
   */
  public listCurrentByDatabase(): PagedAsyncIterableIterator<SensitivityLabel> {
    const iter = this.listCurrentByDatabasePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listCurrentByDatabasePagingPage();
      }
    };
  }

  private async *listCurrentByDatabasePagingPage(): AsyncIterableIterator<
    SensitivityLabel[]
  > {
    let result = await this._listCurrentByDatabase();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listCurrentByDatabaseNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listCurrentByDatabasePagingAll(): AsyncIterableIterator<
    SensitivityLabel
  > {
    for await (const page of this.listCurrentByDatabasePagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets the sensitivity labels of a given database
   *
   */
  public listRecommendedByDatabase(): PagedAsyncIterableIterator<
    SensitivityLabel
  > {
    const iter = this.listRecommendedByDatabasePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listRecommendedByDatabasePagingPage();
      }
    };
  }

  private async *listRecommendedByDatabasePagingPage(): AsyncIterableIterator<
    SensitivityLabel[]
  > {
    let result = await this._listRecommendedByDatabase();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listRecommendedByDatabaseNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listRecommendedByDatabasePagingAll(): AsyncIterableIterator<
    SensitivityLabel
  > {
    for await (const page of this.listRecommendedByDatabasePagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets the sensitivity label of a given column
   *
   */
  get(): Promise<ManagedDatabaseSensitivityLabelsGetResponse> {}

  /**
   * Creates or updates the sensitivity label of a given column
   *
   */
  createOrUpdate(): Promise<
    ManagedDatabaseSensitivityLabelsCreateOrUpdateResponse
  > {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managedInstanceName,
        databaseName,
        schemaName,
        tableName,
        columnName,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes the sensitivity label of a given column
   *
   */
  delete(): Promise<void> {}

  /**
   * Disables sensitivity recommendations on a given column
   *
   */
  disableRecommendation(): Promise<void> {}

  /**
   * Enables sensitivity recommendations on a given column (recommendations are enabled by default on all
   * columns)
   *
   */
  enableRecommendation(): Promise<void> {}

  /**
   * Gets the sensitivity labels of a given database
   *
   */
  private _listCurrentByDatabase(): Promise<
    ManagedDatabaseSensitivityLabelsListCurrentByDatabaseResponse
  > {}

  /**
   * Update sensitivity labels of a given database using an operations batch.
   *
   */
  update(): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managedInstanceName, databaseName, options },
      updateOperationSpec
    );
  }

  /**
   * Gets the sensitivity labels of a given database
   *
   */
  private _listRecommendedByDatabase(): Promise<
    ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseResponse
  > {}

  /**
   * ListCurrentByDatabaseNext
   *
   */
  private _listCurrentByDatabaseNext(): Promise<
    ManagedDatabaseSensitivityLabelsListCurrentByDatabaseNextResponse
  > {}

  /**
   * ListRecommendedByDatabaseNext
   *
   */
  private _listRecommendedByDatabaseNext(): Promise<
    ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SensitivityLabel
    },
    201: {
      bodyMapper: Mappers.SensitivityLabel
    },
    default: {}
  },
  requestBody: Parameters.parameters43,
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName,
    Parameters.schemaName,
    Parameters.tableName,
    Parameters.columnName,
    Parameters.managedInstanceName,
    Parameters.sensitivityLabelSource1
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/currentSensitivityLabels",
  httpMethod: "PATCH",
  responses: { 200: {}, default: {} },
  requestBody: Parameters.parameters44,
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName,
    Parameters.managedInstanceName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
