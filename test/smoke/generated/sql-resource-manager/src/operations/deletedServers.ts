/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DeletedServers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import { SqlManagementClient } from "../sqlManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  DeletedServer,
  DeletedServersListResponse,
  DeletedServersGetResponse,
  DeletedServersListByLocationResponse,
  DeletedServersRecoverResponse,
  DeletedServersListNextResponse,
  DeletedServersListByLocationNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DeletedServers operations. */
export class DeletedServersImpl implements DeletedServers {
  /**
   * Initialize a new instance of the class DeletedServers class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {}

  /**
   * Gets a list of all deleted servers in a subscription.
   *
   */
  public list(): PagedAsyncIterableIterator<DeletedServer> {
    const iter = this.listPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage();
      }
    };
  }

  private async *listPagingPage(): AsyncIterableIterator<DeletedServer[]> {
    let result = await this._list();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(): AsyncIterableIterator<DeletedServer> {
    for await (const page of this.listPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets a list of deleted servers for a location.
   *
   */
  public listByLocation(): PagedAsyncIterableIterator<DeletedServer> {
    const iter = this.listByLocationPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByLocationPagingPage();
      }
    };
  }

  private async *listByLocationPagingPage(): AsyncIterableIterator<
    DeletedServer[]
  > {
    let result = await this._listByLocation();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByLocationNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByLocationPagingAll(): AsyncIterableIterator<
    DeletedServer
  > {
    for await (const page of this.listByLocationPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets a list of all deleted servers in a subscription.
   *
   */
  private _list(): Promise<DeletedServersListResponse> {}

  /**
   * Gets a deleted server.
   *
   */
  get(): Promise<DeletedServersGetResponse> {}

  /**
   * Gets a list of deleted servers for a location.
   *
   */
  private _listByLocation(): Promise<DeletedServersListByLocationResponse> {}

  /**
   * Recovers a deleted server.
   *
   */
  async beginRecover(): Promise<
    PollerLike<
      PollOperationState<DeletedServersRecoverResponse>,
      DeletedServersRecoverResponse
    >
  > {}

  /**
   * Recovers a deleted server.
   *
   */
  async beginRecoverAndWait(): Promise<DeletedServersRecoverResponse> {
    const poller = await this.beginRecover();
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   *
   */
  private _listNext(): Promise<DeletedServersListNextResponse> {}

  /**
   * ListByLocationNext
   *
   */
  private _listByLocationNext(): Promise<
    DeletedServersListByLocationNextResponse
  > {}
}
// Operation Specifications
