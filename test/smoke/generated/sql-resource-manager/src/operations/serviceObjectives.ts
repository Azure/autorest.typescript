/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ServiceObjectives } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  ServiceObjective,
  ServiceObjectivesGetResponse,
  ServiceObjectivesListByServerResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ServiceObjectives operations. */
export class ServiceObjectivesImpl implements ServiceObjectives {
  /**
   * Initialize a new instance of the class ServiceObjectives class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {}

  /**
   * Returns database service objectives.
   *
   */
  public listByServer(): PagedAsyncIterableIterator<ServiceObjective> {
    const iter = this.listByServerPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByServerPagingPage();
      }
    };
  }

  private async *listByServerPagingPage(): AsyncIterableIterator<
    ServiceObjective[]
  > {
    let result = await this._listByServer();
    yield result.value || [];
  }

  private async *listByServerPagingAll(): AsyncIterableIterator<
    ServiceObjective
  > {
    for await (const page of this.listByServerPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets a database service objective.
   *
   */
  get(): Promise<ServiceObjectivesGetResponse> {}

  /**
   * Returns database service objectives.
   *
   */
  private _listByServer(): Promise<ServiceObjectivesListByServerResponse> {}
}
// Operation Specifications
