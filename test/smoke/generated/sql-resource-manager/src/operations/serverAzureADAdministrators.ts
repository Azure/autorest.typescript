/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ServerAzureADAdministrators } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  ServerAzureADAdministrator,
  ServerAzureADAdministratorsGetResponse,
  ServerAzureADAdministratorsCreateOrUpdateResponse,
  ServerAzureADAdministratorsListByServerResponse,
  ServerAzureADAdministratorsListByServerNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ServerAzureADAdministrators operations. */
export class ServerAzureADAdministratorsImpl
  implements ServerAzureADAdministrators {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class ServerAzureADAdministrators class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of Azure Active Directory administrators in a server.
   *
   */
  public listByServer(): PagedAsyncIterableIterator<
    ServerAzureADAdministrator
  > {
    const iter = this.listByServerPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByServerPagingPage();
      }
    };
  }

  private async *listByServerPagingPage(): AsyncIterableIterator<
    ServerAzureADAdministrator[]
  > {
    let result = await this._listByServer();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByServerNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByServerPagingAll(): AsyncIterableIterator<
    ServerAzureADAdministrator
  > {
    for await (const page of this.listByServerPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets a Azure Active Directory administrator.
   *
   */
  get(): Promise<ServerAzureADAdministratorsGetResponse> {}

  /**
   * Creates or updates an existing Azure Active Directory administrator.
   *
   */
  async beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<ServerAzureADAdministratorsCreateOrUpdateResponse>,
      ServerAzureADAdministratorsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ServerAzureADAdministratorsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, serverName, administratorName, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates an existing Azure Active Directory administrator.
   *
   */
  async beginCreateOrUpdateAndWait(): Promise<
    ServerAzureADAdministratorsCreateOrUpdateResponse
  > {
    const poller = await this.beginCreateOrUpdate();
    return poller.pollUntilDone();
  }

  /**
   * Deletes the Azure Active Directory administrator with the given name.
   *
   */
  async beginDelete(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Deletes the Azure Active Directory administrator with the given name.
   *
   */
  async beginDeleteAndWait(): Promise<void> {
    const poller = await this.beginDelete();
    return poller.pollUntilDone();
  }

  /**
   * Gets a list of Azure Active Directory administrators in a server.
   *
   */
  private _listByServer(): Promise<
    ServerAzureADAdministratorsListByServerResponse
  > {}

  /**
   * ListByServerNext
   *
   */
  private _listByServerNext(): Promise<
    ServerAzureADAdministratorsListByServerNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators/{administratorName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ServerAzureADAdministrator
    },
    201: {
      bodyMapper: Mappers.ServerAzureADAdministrator
    },
    202: {
      bodyMapper: Mappers.ServerAzureADAdministrator
    },
    204: {
      bodyMapper: Mappers.ServerAzureADAdministrator
    },
    default: {}
  },
  requestBody: Parameters.parameters59,
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.administratorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
