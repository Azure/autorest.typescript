/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationURLParameter,
  OperationQueryParameter,
  OperationParameter
} from "@azure/core-http";
import {
  ServerConnectionPolicy as ServerConnectionPolicyMapper,
  DatabaseSecurityAlertPolicy as DatabaseSecurityAlertPolicyMapper,
  DataMaskingPolicy as DataMaskingPolicyMapper,
  DataMaskingRule as DataMaskingRuleMapper,
  FirewallRule as FirewallRuleMapper,
  GeoBackupPolicy as GeoBackupPolicyMapper,
  ImportRequest as ImportRequestMapper,
  ImportExtensionRequest as ImportExtensionRequestMapper,
  ExportRequest as ExportRequestMapper,
  Database as DatabaseMapper,
  DatabaseUpdate as DatabaseUpdateMapper,
  ResourceMoveDefinition as ResourceMoveDefinitionMapper,
  ElasticPool as ElasticPoolMapper,
  ElasticPoolUpdate as ElasticPoolUpdateMapper,
  UnlinkParameters as UnlinkParametersMapper,
  ServerCommunicationLink as ServerCommunicationLinkMapper,
  TransparentDataEncryption as TransparentDataEncryptionMapper,
  DatabaseAutomaticTuning as DatabaseAutomaticTuningMapper,
  EncryptionProtector as EncryptionProtectorMapper,
  FailoverGroup as FailoverGroupMapper,
  FailoverGroupUpdate as FailoverGroupUpdateMapper,
  ServerKey as ServerKeyMapper,
  SyncAgent as SyncAgentMapper,
  SyncGroup as SyncGroupMapper,
  SyncMember as SyncMemberMapper,
  VirtualClusterUpdate as VirtualClusterUpdateMapper,
  VirtualNetworkRule as VirtualNetworkRuleMapper,
  ExtendedDatabaseBlobAuditingPolicy as ExtendedDatabaseBlobAuditingPolicyMapper,
  ExtendedServerBlobAuditingPolicy as ExtendedServerBlobAuditingPolicyMapper,
  ServerBlobAuditingPolicy as ServerBlobAuditingPolicyMapper,
  DatabaseBlobAuditingPolicy as DatabaseBlobAuditingPolicyMapper,
  DatabaseVulnerabilityAssessmentRuleBaseline as DatabaseVulnerabilityAssessmentRuleBaselineMapper,
  DatabaseVulnerabilityAssessment as DatabaseVulnerabilityAssessmentMapper,
  JobAgent as JobAgentMapper,
  JobAgentUpdate as JobAgentUpdateMapper,
  JobCredential as JobCredentialMapper,
  Job as JobMapper,
  JobStep as JobStepMapper,
  JobTargetGroup as JobTargetGroupMapper,
  BackupLongTermRetentionPolicy as BackupLongTermRetentionPolicyMapper,
  ManagedBackupShortTermRetentionPolicy as ManagedBackupShortTermRetentionPolicyMapper,
  ServerAutomaticTuning as ServerAutomaticTuningMapper,
  ServerDnsAliasAcquisition as ServerDnsAliasAcquisitionMapper,
  ServerSecurityAlertPolicy as ServerSecurityAlertPolicyMapper,
  CreateDatabaseRestorePointDefinition as CreateDatabaseRestorePointDefinitionMapper,
  ManagedDatabaseSecurityAlertPolicy as ManagedDatabaseSecurityAlertPolicyMapper,
  ManagedServerSecurityAlertPolicy as ManagedServerSecurityAlertPolicyMapper,
  SensitivityLabel as SensitivityLabelMapper,
  ManagedInstanceAdministrator as ManagedInstanceAdministratorMapper,
  InstanceFailoverGroup as InstanceFailoverGroupMapper,
  BackupShortTermRetentionPolicy as BackupShortTermRetentionPolicyMapper,
  TdeCertificate as TdeCertificateMapper,
  ManagedInstanceKey as ManagedInstanceKeyMapper,
  ManagedInstanceEncryptionProtector as ManagedInstanceEncryptionProtectorMapper,
  ManagedInstanceVulnerabilityAssessment as ManagedInstanceVulnerabilityAssessmentMapper,
  ServerVulnerabilityAssessment as ServerVulnerabilityAssessmentMapper,
  InstancePool as InstancePoolMapper,
  InstancePoolUpdate as InstancePoolUpdateMapper,
  ManagedInstance as ManagedInstanceMapper,
  ManagedInstanceUpdate as ManagedInstanceUpdateMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper,
  Server as ServerMapper,
  ServerUpdate as ServerUpdateMapper,
  CheckNameAvailabilityRequest as CheckNameAvailabilityRequestMapper,
  ManagedInstanceLongTermRetentionPolicy as ManagedInstanceLongTermRetentionPolicyMapper,
  WorkloadGroup as WorkloadGroupMapper,
  WorkloadClassifier as WorkloadClassifierMapper,
  ManagedDatabase as ManagedDatabaseMapper,
  ManagedDatabaseUpdate as ManagedDatabaseUpdateMapper,
  CompleteDatabaseRestoreDefinition as CompleteDatabaseRestoreDefinitionMapper,
  ServerAzureADAdministrator as ServerAzureADAdministratorMapper
} from "../models/mappers";

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2014-04-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serverName: OperationURLParameter = {
  parameterPath: "serverName",
  mapper: {
    serializedName: "serverName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const databaseName: OperationURLParameter = {
  parameterPath: "databaseName",
  mapper: {
    serializedName: "databaseName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const restorableDroppededDatabaseId: OperationURLParameter = {
  parameterPath: "restorableDroppededDatabaseId",
  mapper: {
    serializedName: "restorableDroppededDatabaseId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerConnectionPolicyMapper
};

export const connectionPolicyName: OperationURLParameter = {
  parameterPath: "connectionPolicyName",
  mapper: {
    serializedName: "connectionPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const securityAlertPolicyName: OperationURLParameter = {
  parameterPath: "securityAlertPolicyName",
  mapper: {
    serializedName: "securityAlertPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseSecurityAlertPolicyMapper
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: DataMaskingPolicyMapper
};

export const dataMaskingPolicyName: OperationURLParameter = {
  parameterPath: "dataMaskingPolicyName",
  mapper: {
    defaultValue: "Default",
    isConstant: true,
    serializedName: "dataMaskingPolicyName",
    type: {
      name: "String"
    }
  }
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: DataMaskingRuleMapper
};

export const dataMaskingRuleName: OperationURLParameter = {
  parameterPath: "dataMaskingRuleName",
  mapper: {
    serializedName: "dataMaskingRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: FirewallRuleMapper
};

export const firewallRuleName: OperationURLParameter = {
  parameterPath: "firewallRuleName",
  mapper: {
    serializedName: "firewallRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: GeoBackupPolicyMapper
};

export const geoBackupPolicyName: OperationURLParameter = {
  parameterPath: "geoBackupPolicyName",
  mapper: {
    serializedName: "geoBackupPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: ImportRequestMapper
};

export const parameters7: OperationParameter = {
  parameterPath: "parameters",
  mapper: ImportExtensionRequestMapper
};

export const extensionName: OperationURLParameter = {
  parameterPath: "extensionName",
  mapper: {
    serializedName: "extensionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters8: OperationParameter = {
  parameterPath: "parameters",
  mapper: ExportRequestMapper
};

export const filter: OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion1: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2017-10-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const parameters9: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseMapper
};

export const parameters10: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseUpdateMapper
};

export const elasticPoolName: OperationURLParameter = {
  parameterPath: "elasticPoolName",
  mapper: {
    serializedName: "elasticPoolName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters11: OperationParameter = {
  parameterPath: "parameters",
  mapper: ResourceMoveDefinitionMapper
};

export const replicaType: OperationQueryParameter = {
  parameterPath: ["options", "replicaType"],
  mapper: {
    serializedName: "replicaType",
    type: {
      name: "String"
    }
  }
};

export const apiVersion2: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2018-06-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const skip: OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    serializedName: "$skip",
    type: {
      name: "Number"
    }
  }
};

export const parameters12: OperationParameter = {
  parameterPath: "parameters",
  mapper: ElasticPoolMapper
};

export const parameters13: OperationParameter = {
  parameterPath: "parameters",
  mapper: ElasticPoolUpdateMapper
};

export const recommendedElasticPoolName: OperationURLParameter = {
  parameterPath: "recommendedElasticPoolName",
  mapper: {
    serializedName: "recommendedElasticPoolName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const linkId: OperationURLParameter = {
  parameterPath: "linkId",
  mapper: {
    serializedName: "linkId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters14: OperationParameter = {
  parameterPath: "parameters",
  mapper: UnlinkParametersMapper
};

export const communicationLinkName: OperationURLParameter = {
  parameterPath: "communicationLinkName",
  mapper: {
    serializedName: "communicationLinkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters15: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerCommunicationLinkMapper
};

export const serviceObjectiveName: OperationURLParameter = {
  parameterPath: "serviceObjectiveName",
  mapper: {
    serializedName: "serviceObjectiveName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceTierAdvisorName: OperationURLParameter = {
  parameterPath: "serviceTierAdvisorName",
  mapper: {
    serializedName: "serviceTierAdvisorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters16: OperationParameter = {
  parameterPath: "parameters",
  mapper: TransparentDataEncryptionMapper
};

export const transparentDataEncryptionName: OperationURLParameter = {
  parameterPath: "transparentDataEncryptionName",
  mapper: {
    serializedName: "transparentDataEncryptionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion3: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2015-05-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const parameters17: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseAutomaticTuningMapper
};

export const encryptionProtectorName: OperationURLParameter = {
  parameterPath: "encryptionProtectorName",
  mapper: {
    serializedName: "encryptionProtectorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters18: OperationParameter = {
  parameterPath: "parameters",
  mapper: EncryptionProtectorMapper
};

export const failoverGroupName: OperationURLParameter = {
  parameterPath: "failoverGroupName",
  mapper: {
    serializedName: "failoverGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters19: OperationParameter = {
  parameterPath: "parameters",
  mapper: FailoverGroupMapper
};

export const parameters20: OperationParameter = {
  parameterPath: "parameters",
  mapper: FailoverGroupUpdateMapper
};

export const keyName: OperationURLParameter = {
  parameterPath: "keyName",
  mapper: {
    serializedName: "keyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters21: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerKeyMapper
};

export const syncAgentName: OperationURLParameter = {
  parameterPath: "syncAgentName",
  mapper: {
    serializedName: "syncAgentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters22: OperationParameter = {
  parameterPath: "parameters",
  mapper: SyncAgentMapper
};

export const locationName: OperationURLParameter = {
  parameterPath: "locationName",
  mapper: {
    serializedName: "locationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const syncGroupName: OperationURLParameter = {
  parameterPath: "syncGroupName",
  mapper: {
    serializedName: "syncGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const startTime: OperationQueryParameter = {
  parameterPath: "startTime",
  mapper: {
    serializedName: "startTime",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const endTime: OperationQueryParameter = {
  parameterPath: "endTime",
  mapper: {
    serializedName: "endTime",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const typeParam: OperationQueryParameter = {
  parameterPath: "typeParam",
  mapper: {
    serializedName: "type",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const continuationToken: OperationQueryParameter = {
  parameterPath: ["options", "continuationToken"],
  mapper: {
    serializedName: "continuationToken",
    type: {
      name: "String"
    }
  }
};

export const parameters23: OperationParameter = {
  parameterPath: "parameters",
  mapper: SyncGroupMapper
};

export const syncMemberName: OperationURLParameter = {
  parameterPath: "syncMemberName",
  mapper: {
    serializedName: "syncMemberName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters24: OperationParameter = {
  parameterPath: "parameters",
  mapper: SyncMemberMapper
};

export const usageName: OperationURLParameter = {
  parameterPath: "usageName",
  mapper: {
    serializedName: "usageName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualClusterName: OperationURLParameter = {
  parameterPath: "virtualClusterName",
  mapper: {
    serializedName: "virtualClusterName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters25: OperationParameter = {
  parameterPath: "parameters",
  mapper: VirtualClusterUpdateMapper
};

export const virtualNetworkRuleName: OperationURLParameter = {
  parameterPath: "virtualNetworkRuleName",
  mapper: {
    serializedName: "virtualNetworkRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters26: OperationParameter = {
  parameterPath: "parameters",
  mapper: VirtualNetworkRuleMapper
};

export const blobAuditingPolicyName: OperationURLParameter = {
  parameterPath: "blobAuditingPolicyName",
  mapper: {
    defaultValue: "default",
    isConstant: true,
    serializedName: "blobAuditingPolicyName",
    type: {
      name: "String"
    }
  }
};

export const apiVersion4: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2017-03-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const parameters27: OperationParameter = {
  parameterPath: "parameters",
  mapper: ExtendedDatabaseBlobAuditingPolicyMapper
};

export const parameters28: OperationParameter = {
  parameterPath: "parameters",
  mapper: ExtendedServerBlobAuditingPolicyMapper
};

export const parameters29: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerBlobAuditingPolicyMapper
};

export const parameters30: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseBlobAuditingPolicyMapper
};

export const vulnerabilityAssessmentName: OperationURLParameter = {
  parameterPath: "vulnerabilityAssessmentName",
  mapper: {
    serializedName: "vulnerabilityAssessmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const ruleId: OperationURLParameter = {
  parameterPath: "ruleId",
  mapper: {
    serializedName: "ruleId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const baselineName: OperationURLParameter = {
  parameterPath: "baselineName",
  mapper: {
    serializedName: "baselineName",
    required: true,
    type: {
      name: "Enum",
      allowedValues: ["master", "default"]
    }
  }
};

export const parameters31: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseVulnerabilityAssessmentRuleBaselineMapper
};

export const parameters32: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseVulnerabilityAssessmentMapper
};

export const jobAgentName: OperationURLParameter = {
  parameterPath: "jobAgentName",
  mapper: {
    serializedName: "jobAgentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters33: OperationParameter = {
  parameterPath: "parameters",
  mapper: JobAgentMapper
};

export const parameters34: OperationParameter = {
  parameterPath: "parameters",
  mapper: JobAgentUpdateMapper
};

export const credentialName: OperationURLParameter = {
  parameterPath: "credentialName",
  mapper: {
    serializedName: "credentialName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters35: OperationParameter = {
  parameterPath: "parameters",
  mapper: JobCredentialMapper
};

export const createTimeMin: OperationQueryParameter = {
  parameterPath: ["options", "createTimeMin"],
  mapper: {
    serializedName: "createTimeMin",
    type: {
      name: "DateTime"
    }
  }
};

export const createTimeMax: OperationQueryParameter = {
  parameterPath: ["options", "createTimeMax"],
  mapper: {
    serializedName: "createTimeMax",
    type: {
      name: "DateTime"
    }
  }
};

export const endTimeMin: OperationQueryParameter = {
  parameterPath: ["options", "endTimeMin"],
  mapper: {
    serializedName: "endTimeMin",
    type: {
      name: "DateTime"
    }
  }
};

export const endTimeMax: OperationQueryParameter = {
  parameterPath: ["options", "endTimeMax"],
  mapper: {
    serializedName: "endTimeMax",
    type: {
      name: "DateTime"
    }
  }
};

export const isActive: OperationQueryParameter = {
  parameterPath: ["options", "isActive"],
  mapper: {
    serializedName: "isActive",
    type: {
      name: "Boolean"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const jobName: OperationURLParameter = {
  parameterPath: "jobName",
  mapper: {
    serializedName: "jobName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobExecutionId: OperationURLParameter = {
  parameterPath: "jobExecutionId",
  mapper: {
    serializedName: "jobExecutionId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const parameters36: OperationParameter = {
  parameterPath: "parameters",
  mapper: JobMapper
};

export const stepName: OperationURLParameter = {
  parameterPath: "stepName",
  mapper: {
    serializedName: "stepName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobVersion: OperationURLParameter = {
  parameterPath: "jobVersion",
  mapper: {
    serializedName: "jobVersion",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const parameters37: OperationParameter = {
  parameterPath: "parameters",
  mapper: JobStepMapper
};

export const targetId: OperationURLParameter = {
  parameterPath: "targetId",
  mapper: {
    serializedName: "targetId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const targetGroupName: OperationURLParameter = {
  parameterPath: "targetGroupName",
  mapper: {
    serializedName: "targetGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters38: OperationParameter = {
  parameterPath: "parameters",
  mapper: JobTargetGroupMapper
};

export const longTermRetentionServerName: OperationURLParameter = {
  parameterPath: "longTermRetentionServerName",
  mapper: {
    serializedName: "longTermRetentionServerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const longTermRetentionDatabaseName: OperationURLParameter = {
  parameterPath: "longTermRetentionDatabaseName",
  mapper: {
    serializedName: "longTermRetentionDatabaseName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const backupName: OperationURLParameter = {
  parameterPath: "backupName",
  mapper: {
    serializedName: "backupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const onlyLatestPerDatabase: OperationQueryParameter = {
  parameterPath: ["options", "onlyLatestPerDatabase"],
  mapper: {
    serializedName: "onlyLatestPerDatabase",
    type: {
      name: "Boolean"
    }
  }
};

export const databaseState: OperationQueryParameter = {
  parameterPath: ["options", "databaseState"],
  mapper: {
    serializedName: "databaseState",
    type: {
      name: "String"
    }
  }
};

export const policyName: OperationURLParameter = {
  parameterPath: "policyName",
  mapper: {
    serializedName: "policyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters39: OperationParameter = {
  parameterPath: "parameters",
  mapper: BackupLongTermRetentionPolicyMapper
};

export const managedInstanceName: OperationURLParameter = {
  parameterPath: "managedInstanceName",
  mapper: {
    serializedName: "managedInstanceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const policyName1: OperationURLParameter = {
  parameterPath: "policyName",
  mapper: {
    serializedName: "policyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters40: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagedBackupShortTermRetentionPolicyMapper
};

export const restorableDroppedDatabaseId: OperationURLParameter = {
  parameterPath: "restorableDroppedDatabaseId",
  mapper: {
    serializedName: "restorableDroppedDatabaseId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters41: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerAutomaticTuningMapper
};

export const dnsAliasName: OperationURLParameter = {
  parameterPath: "dnsAliasName",
  mapper: {
    serializedName: "dnsAliasName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters42: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerDnsAliasAcquisitionMapper
};

export const securityAlertPolicyName1: OperationURLParameter = {
  parameterPath: "securityAlertPolicyName",
  mapper: {
    serializedName: "securityAlertPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters43: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerSecurityAlertPolicyMapper
};

export const parameters44: OperationParameter = {
  parameterPath: "parameters",
  mapper: CreateDatabaseRestorePointDefinitionMapper
};

export const restorePointName: OperationURLParameter = {
  parameterPath: "restorePointName",
  mapper: {
    serializedName: "restorePointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters45: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagedDatabaseSecurityAlertPolicyMapper
};

export const parameters46: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagedServerSecurityAlertPolicyMapper
};

export const filter1: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const includeDisabledRecommendations: OperationQueryParameter = {
  parameterPath: ["options", "includeDisabledRecommendations"],
  mapper: {
    serializedName: "includeDisabledRecommendations",
    type: {
      name: "Boolean"
    }
  }
};

export const skipToken: OperationQueryParameter = {
  parameterPath: ["options", "skipToken"],
  mapper: {
    serializedName: "$skipToken",
    type: {
      name: "String"
    }
  }
};

export const schemaName: OperationURLParameter = {
  parameterPath: "schemaName",
  mapper: {
    serializedName: "schemaName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const tableName: OperationURLParameter = {
  parameterPath: "tableName",
  mapper: {
    serializedName: "tableName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const columnName: OperationURLParameter = {
  parameterPath: "columnName",
  mapper: {
    serializedName: "columnName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const sensitivityLabelSource: OperationURLParameter = {
  parameterPath: "sensitivityLabelSource",
  mapper: {
    defaultValue: "recommended",
    isConstant: true,
    serializedName: "sensitivityLabelSource",
    type: {
      name: "String"
    }
  }
};

export const sensitivityLabelSource1: OperationURLParameter = {
  parameterPath: "sensitivityLabelSource",
  mapper: {
    serializedName: "sensitivityLabelSource",
    required: true,
    type: {
      name: "Enum",
      allowedValues: ["current", "recommended"]
    }
  }
};

export const parameters47: OperationParameter = {
  parameterPath: "parameters",
  mapper: SensitivityLabelMapper
};

export const sensitivityLabelSource2: OperationURLParameter = {
  parameterPath: "sensitivityLabelSource",
  mapper: {
    defaultValue: "current",
    isConstant: true,
    serializedName: "sensitivityLabelSource",
    type: {
      name: "String"
    }
  }
};

export const administratorName: OperationURLParameter = {
  parameterPath: "administratorName",
  mapper: {
    defaultValue: "ActiveDirectory",
    isConstant: true,
    serializedName: "administratorName",
    type: {
      name: "String"
    }
  }
};

export const parameters48: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagedInstanceAdministratorMapper
};

export const operationId: OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const scanId: OperationURLParameter = {
  parameterPath: "scanId",
  mapper: {
    serializedName: "scanId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters49: OperationParameter = {
  parameterPath: "parameters",
  mapper: InstanceFailoverGroupMapper
};

export const policyName2: OperationURLParameter = {
  parameterPath: "policyName",
  mapper: {
    serializedName: "policyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters50: OperationParameter = {
  parameterPath: "parameters",
  mapper: BackupShortTermRetentionPolicyMapper
};

export const parameters51: OperationParameter = {
  parameterPath: "parameters",
  mapper: TdeCertificateMapper
};

export const parameters52: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagedInstanceKeyMapper
};

export const parameters53: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagedInstanceEncryptionProtectorMapper
};

export const recoverableDatabaseName: OperationURLParameter = {
  parameterPath: "recoverableDatabaseName",
  mapper: {
    serializedName: "recoverableDatabaseName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters54: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagedInstanceVulnerabilityAssessmentMapper
};

export const parameters55: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerVulnerabilityAssessmentMapper
};

export const instancePoolName: OperationURLParameter = {
  parameterPath: "instancePoolName",
  mapper: {
    serializedName: "instancePoolName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters56: OperationParameter = {
  parameterPath: "parameters",
  mapper: InstancePoolMapper
};

export const parameters57: OperationParameter = {
  parameterPath: "parameters",
  mapper: InstancePoolUpdateMapper
};

export const expandChildren: OperationQueryParameter = {
  parameterPath: ["options", "expandChildren"],
  mapper: {
    serializedName: "expandChildren",
    type: {
      name: "Boolean"
    }
  }
};

export const parameters58: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagedInstanceMapper
};

export const parameters59: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagedInstanceUpdateMapper
};

export const privateEndpointConnectionName: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters60: OperationParameter = {
  parameterPath: "parameters",
  mapper: PrivateEndpointConnectionMapper
};

export const groupName: OperationURLParameter = {
  parameterPath: "groupName",
  mapper: {
    serializedName: "groupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion5: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-06-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const parameters61: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerMapper
};

export const parameters62: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerUpdateMapper
};

export const parameters63: OperationParameter = {
  parameterPath: "parameters",
  mapper: CheckNameAvailabilityRequestMapper
};

export const include: OperationQueryParameter = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "include",
    type: {
      name: "String"
    }
  }
};

export const databaseState1: OperationQueryParameter = {
  parameterPath: ["options", "databaseState"],
  mapper: {
    serializedName: "databaseState",
    type: {
      name: "String"
    }
  }
};

export const policyName3: OperationURLParameter = {
  parameterPath: "policyName",
  mapper: {
    serializedName: "policyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters64: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagedInstanceLongTermRetentionPolicyMapper
};

export const workloadGroupName: OperationURLParameter = {
  parameterPath: "workloadGroupName",
  mapper: {
    serializedName: "workloadGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters65: OperationParameter = {
  parameterPath: "parameters",
  mapper: WorkloadGroupMapper
};

export const workloadClassifierName: OperationURLParameter = {
  parameterPath: "workloadClassifierName",
  mapper: {
    serializedName: "workloadClassifierName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters66: OperationParameter = {
  parameterPath: "parameters",
  mapper: WorkloadClassifierMapper
};

export const restoreDetailsName: OperationURLParameter = {
  parameterPath: "restoreDetailsName",
  mapper: {
    serializedName: "restoreDetailsName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters67: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagedDatabaseMapper
};

export const parameters68: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagedDatabaseUpdateMapper
};

export const parameters69: OperationParameter = {
  parameterPath: "parameters",
  mapper: CompleteDatabaseRestoreDefinitionMapper
};

export const administratorName1: OperationURLParameter = {
  parameterPath: "administratorName",
  mapper: {
    serializedName: "administratorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters70: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerAzureADAdministratorMapper
};
