/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Resource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoverableDatabase: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoverableDatabase",
    modelProperties: {
      ...Resource.type.modelProperties,
      edition: {
        serializedName: "properties.edition",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceLevelObjective: {
        serializedName: "properties.serviceLevelObjective",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        serializedName: "properties.elasticPoolName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastAvailableBackupDate: {
        serializedName: "properties.lastAvailableBackupDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RecoverableDatabaseListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoverableDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RecoverableDatabase" }
          }
        }
      }
    }
  }
};

export const RestorableDroppedDatabase: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableDroppedDatabase",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      edition: {
        serializedName: "properties.edition",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceLevelObjective: {
        serializedName: "properties.serviceLevelObjective",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        serializedName: "properties.elasticPoolName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      deletionDate: {
        serializedName: "properties.deletionDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      earliestRestoreDate: {
        serializedName: "properties.earliestRestoreDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RestorableDroppedDatabaseListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableDroppedDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RestorableDroppedDatabase" }
          }
        }
      }
    }
  }
};

export const ServerConnectionPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerConnectionPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectionType: {
        serializedName: "properties.connectionType",
        type: {
          name: "Enum",
          allowedValues: ["Default", "Proxy", "Redirect"]
        }
      }
    }
  }
};

export const DatabaseSecurityAlertPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseSecurityAlertPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["New", "Enabled", "Disabled"]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "String"
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "String"
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      useServerDefault: {
        serializedName: "properties.useServerDefault",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      }
    }
  }
};

export const DataMaskingPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataMaskingPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataMaskingState: {
        serializedName: "properties.dataMaskingState",
        type: {
          name: "Enum",
          allowedValues: ["Disabled", "Enabled"]
        }
      },
      exemptPrincipals: {
        serializedName: "properties.exemptPrincipals",
        type: {
          name: "String"
        }
      },
      applicationPrincipals: {
        serializedName: "properties.applicationPrincipals",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maskingLevel: {
        serializedName: "properties.maskingLevel",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataMaskingRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataMaskingRule",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      idPropertiesId: {
        serializedName: "properties.id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aliasName: {
        serializedName: "properties.aliasName",
        type: {
          name: "String"
        }
      },
      ruleState: {
        serializedName: "properties.ruleState",
        type: {
          name: "Enum",
          allowedValues: ["Disabled", "Enabled"]
        }
      },
      schemaName: {
        serializedName: "properties.schemaName",
        type: {
          name: "String"
        }
      },
      tableName: {
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      columnName: {
        serializedName: "properties.columnName",
        type: {
          name: "String"
        }
      },
      maskingFunction: {
        serializedName: "properties.maskingFunction",
        type: {
          name: "Enum",
          allowedValues: ["Default", "CCN", "Email", "Number", "SSN", "Text"]
        }
      },
      numberFrom: {
        serializedName: "properties.numberFrom",
        type: {
          name: "String"
        }
      },
      numberTo: {
        serializedName: "properties.numberTo",
        type: {
          name: "String"
        }
      },
      prefixSize: {
        serializedName: "properties.prefixSize",
        type: {
          name: "String"
        }
      },
      suffixSize: {
        serializedName: "properties.suffixSize",
        type: {
          name: "String"
        }
      },
      replacementString: {
        serializedName: "properties.replacementString",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataMaskingRuleListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataMaskingRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DataMaskingRule" } }
        }
      }
    }
  }
};

export const FirewallRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRule",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRuleListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FirewallRule" } }
        }
      }
    }
  }
};

export const GeoBackupPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoBackupPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Disabled", "Enabled"]
        }
      },
      storageType: {
        serializedName: "properties.storageType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoBackupPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoBackupPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "GeoBackupPolicy" } }
        }
      }
    }
  }
};

export const ExportRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportRequest",
    modelProperties: {
      storageKeyType: {
        serializedName: "storageKeyType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["StorageAccessKey", "SharedAccessKey"]
        }
      },
      storageKey: {
        serializedName: "storageKey",
        required: true,
        type: {
          name: "String"
        }
      },
      storageUri: {
        serializedName: "storageUri",
        required: true,
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        serializedName: "administratorLogin",
        required: true,
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "administratorLoginPassword",
        required: true,
        type: {
          name: "String"
        }
      },
      authenticationType: {
        defaultValue: "SQL",
        serializedName: "authenticationType",
        type: {
          name: "Enum",
          allowedValues: ["SQL", "ADPassword"]
        }
      }
    }
  }
};

export const ImportRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportRequest",
    modelProperties: {
      ...ExportRequest.type.modelProperties,
      databaseName: {
        serializedName: "databaseName",
        required: true,
        type: {
          name: "String"
        }
      },
      edition: {
        serializedName: "edition",
        required: true,
        type: {
          name: "String"
        }
      },
      serviceObjectiveName: {
        serializedName: "serviceObjectiveName",
        required: true,
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        serializedName: "maxSizeBytes",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportExportResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportExportResponse",
    modelProperties: {
      ...Resource.type.modelProperties,
      requestType: {
        serializedName: "properties.requestType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "properties.requestId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      serverName: {
        serializedName: "properties.serverName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      queuedTime: {
        serializedName: "properties.queuedTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      blobUri: {
        serializedName: "properties.blobUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportExtensionRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportExtensionRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      storageKeyType: {
        serializedName: "properties.storageKeyType",
        type: {
          name: "Enum",
          allowedValues: ["StorageAccessKey", "SharedAccessKey"]
        }
      },
      storageKey: {
        serializedName: "properties.storageKey",
        type: {
          name: "String"
        }
      },
      storageUri: {
        serializedName: "properties.storageUri",
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      authenticationType: {
        defaultValue: "SQL",
        serializedName: "properties.authenticationType",
        type: {
          name: "Enum",
          allowedValues: ["SQL", "ADPassword"]
        }
      },
      operationMode: {
        defaultValue: "Import",
        isConstant: true,
        serializedName: "properties.operationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportExtensionProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportExtensionProperties",
    modelProperties: {
      ...ExportRequest.type.modelProperties,
      operationMode: {
        defaultValue: "Import",
        isConstant: true,
        serializedName: "operationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Metric" } }
        }
      }
    }
  }
};

export const Metric: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Metric",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        serializedName: "timeGrain",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      metricValues: {
        serializedName: "metricValues",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetricValue" } }
        }
      }
    }
  }
};

export const MetricName: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricValue: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricValue",
    modelProperties: {
      count: {
        serializedName: "count",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      average: {
        serializedName: "average",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minimum: {
        serializedName: "minimum",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      total: {
        serializedName: "total",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MetricDefinitionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDefinitionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricDefinition" }
          }
        }
      }
    }
  }
};

export const MetricDefinition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      primaryAggregationType: {
        serializedName: "primaryAggregationType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceUri: {
        serializedName: "resourceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      metricAvailabilities: {
        serializedName: "metricAvailabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricAvailability" }
          }
        }
      }
    }
  }
};

export const MetricAvailability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      retention: {
        serializedName: "retention",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timeGrain: {
        serializedName: "timeGrain",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecommendedElasticPool: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecommendedElasticPool",
    modelProperties: {
      ...Resource.type.modelProperties,
      databaseEdition: {
        serializedName: "properties.databaseEdition",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dtu: {
        serializedName: "properties.dtu",
        type: {
          name: "Number"
        }
      },
      databaseDtuMin: {
        serializedName: "properties.databaseDtuMin",
        type: {
          name: "Number"
        }
      },
      databaseDtuMax: {
        serializedName: "properties.databaseDtuMax",
        type: {
          name: "Number"
        }
      },
      storageMB: {
        serializedName: "properties.storageMB",
        type: {
          name: "Number"
        }
      },
      observationPeriodStart: {
        serializedName: "properties.observationPeriodStart",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      observationPeriodEnd: {
        serializedName: "properties.observationPeriodEnd",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      maxObservedDtu: {
        serializedName: "properties.maxObservedDtu",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxObservedStorageMB: {
        serializedName: "properties.maxObservedStorageMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      databases: {
        serializedName: "properties.databases",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TrackedResource" } }
        }
      },
      metrics: {
        serializedName: "properties.metrics",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedElasticPoolMetric"
            }
          }
        }
      }
    }
  }
};

export const TrackedResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const RecommendedElasticPoolMetric: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecommendedElasticPoolMetric",
    modelProperties: {
      dateTime: {
        serializedName: "dateTime",
        type: {
          name: "DateTime"
        }
      },
      dtu: {
        serializedName: "dtu",
        type: {
          name: "Number"
        }
      },
      sizeGB: {
        serializedName: "sizeGB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RecommendedElasticPoolListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecommendedElasticPoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RecommendedElasticPool" }
          }
        }
      }
    }
  }
};

export const RecommendedElasticPoolListMetricsResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecommendedElasticPoolListMetricsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedElasticPoolMetric"
            }
          }
        }
      }
    }
  }
};

export const ReplicationLink: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationLink",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isTerminationAllowed: {
        serializedName: "properties.isTerminationAllowed",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      replicationMode: {
        serializedName: "properties.replicationMode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerServer: {
        serializedName: "properties.partnerServer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerDatabase: {
        serializedName: "properties.partnerDatabase",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerLocation: {
        serializedName: "properties.partnerLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "properties.role",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Primary",
            "Secondary",
            "NonReadableSecondary",
            "Source",
            "Copy"
          ]
        }
      },
      partnerRole: {
        serializedName: "properties.partnerRole",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Primary",
            "Secondary",
            "NonReadableSecondary",
            "Source",
            "Copy"
          ]
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      percentComplete: {
        serializedName: "properties.percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      replicationState: {
        serializedName: "properties.replicationState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnlinkParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnlinkParameters",
    modelProperties: {
      forcedTermination: {
        serializedName: "forcedTermination",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ReplicationLinkListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationLinkListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ReplicationLink" } }
        }
      }
    }
  }
};

export const ServerCommunicationLink: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerCommunicationLink",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerServer: {
        serializedName: "properties.partnerServer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerCommunicationLinkListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerCommunicationLinkListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServerCommunicationLink" }
          }
        }
      }
    }
  }
};

export const ServiceObjective: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceObjective",
    modelProperties: {
      ...Resource.type.modelProperties,
      serviceObjectiveName: {
        serializedName: "properties.serviceObjectiveName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDefault: {
        serializedName: "properties.isDefault",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isSystem: {
        serializedName: "properties.isSystem",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ServiceObjectiveListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceObjectiveListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServiceObjective" }
          }
        }
      }
    }
  }
};

export const ElasticPoolActivityListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPoolActivityListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ElasticPoolActivity" }
          }
        }
      }
    }
  }
};

export const ElasticPoolActivity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPoolActivity",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      errorCode: {
        serializedName: "properties.errorCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        serializedName: "properties.errorSeverity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      operation: {
        serializedName: "properties.operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationId: {
        serializedName: "properties.operationId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      percentComplete: {
        serializedName: "properties.percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      requestedDatabaseDtuMax: {
        serializedName: "properties.requestedDatabaseDtuMax",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      requestedDatabaseDtuMin: {
        serializedName: "properties.requestedDatabaseDtuMin",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      requestedDtu: {
        serializedName: "properties.requestedDtu",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      requestedElasticPoolName: {
        serializedName: "properties.requestedElasticPoolName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requestedStorageLimitInGB: {
        serializedName: "properties.requestedStorageLimitInGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      elasticPoolName: {
        serializedName: "properties.elasticPoolName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverName: {
        serializedName: "properties.serverName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requestedStorageLimitInMB: {
        serializedName: "properties.requestedStorageLimitInMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      requestedDatabaseDtuGuarantee: {
        serializedName: "properties.requestedDatabaseDtuGuarantee",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      requestedDatabaseDtuCap: {
        serializedName: "properties.requestedDatabaseDtuCap",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      requestedDtuGuarantee: {
        serializedName: "properties.requestedDtuGuarantee",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ElasticPoolDatabaseActivityListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPoolDatabaseActivityListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolDatabaseActivity"
            }
          }
        }
      }
    }
  }
};

export const ElasticPoolDatabaseActivity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPoolDatabaseActivity",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      errorCode: {
        serializedName: "properties.errorCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        serializedName: "properties.errorSeverity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      operation: {
        serializedName: "properties.operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationId: {
        serializedName: "properties.operationId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      percentComplete: {
        serializedName: "properties.percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      requestedElasticPoolName: {
        serializedName: "properties.requestedElasticPoolName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentElasticPoolName: {
        serializedName: "properties.currentElasticPoolName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentServiceObjective: {
        serializedName: "properties.currentServiceObjective",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requestedServiceObjective: {
        serializedName: "properties.requestedServiceObjective",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverName: {
        serializedName: "properties.serverName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceTierAdvisor: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceTierAdvisor",
    modelProperties: {
      ...Resource.type.modelProperties,
      observationPeriodStart: {
        serializedName: "properties.observationPeriodStart",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      observationPeriodEnd: {
        serializedName: "properties.observationPeriodEnd",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      activeTimeRatio: {
        serializedName: "properties.activeTimeRatio",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minDtu: {
        serializedName: "properties.minDtu",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      avgDtu: {
        serializedName: "properties.avgDtu",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxDtu: {
        serializedName: "properties.maxDtu",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxSizeInGB: {
        serializedName: "properties.maxSizeInGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      serviceLevelObjectiveUsageMetrics: {
        serializedName: "properties.serviceLevelObjectiveUsageMetrics",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SloUsageMetric" } }
        }
      },
      currentServiceLevelObjective: {
        serializedName: "properties.currentServiceLevelObjective",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentServiceLevelObjectiveId: {
        serializedName: "properties.currentServiceLevelObjectiveId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      usageBasedRecommendationServiceLevelObjective: {
        serializedName:
          "properties.usageBasedRecommendationServiceLevelObjective",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageBasedRecommendationServiceLevelObjectiveId: {
        serializedName:
          "properties.usageBasedRecommendationServiceLevelObjectiveId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      databaseSizeBasedRecommendationServiceLevelObjective: {
        serializedName:
          "properties.databaseSizeBasedRecommendationServiceLevelObjective",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseSizeBasedRecommendationServiceLevelObjectiveId: {
        serializedName:
          "properties.databaseSizeBasedRecommendationServiceLevelObjectiveId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      disasterPlanBasedRecommendationServiceLevelObjective: {
        serializedName:
          "properties.disasterPlanBasedRecommendationServiceLevelObjective",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      disasterPlanBasedRecommendationServiceLevelObjectiveId: {
        serializedName:
          "properties.disasterPlanBasedRecommendationServiceLevelObjectiveId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      overallRecommendationServiceLevelObjective: {
        serializedName: "properties.overallRecommendationServiceLevelObjective",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      overallRecommendationServiceLevelObjectiveId: {
        serializedName:
          "properties.overallRecommendationServiceLevelObjectiveId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      confidence: {
        serializedName: "properties.confidence",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SloUsageMetric: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SloUsageMetric",
    modelProperties: {
      serviceLevelObjective: {
        serializedName: "serviceLevelObjective",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceLevelObjectiveId: {
        serializedName: "serviceLevelObjectiveId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      inRangeTimeRatio: {
        serializedName: "inRangeTimeRatio",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServiceTierAdvisorListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceTierAdvisorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServiceTierAdvisor" }
          }
        }
      }
    }
  }
};

export const TransparentDataEncryption: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransparentDataEncryption",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      }
    }
  }
};

export const TransparentDataEncryptionActivityListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransparentDataEncryptionActivityListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TransparentDataEncryptionActivity"
            }
          }
        }
      }
    }
  }
};

export const TransparentDataEncryptionActivity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransparentDataEncryptionActivity",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      percentComplete: {
        serializedName: "properties.percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServerUsageListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerUsageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ServerUsage" } }
        }
      }
    }
  }
};

export const ServerUsage: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerUsage",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        serializedName: "nextResetTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DatabaseUsageListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseUsageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DatabaseUsage" } }
        }
      }
    }
  }
};

export const DatabaseUsage: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseUsage",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        serializedName: "nextResetTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DatabaseAutomaticTuning: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAutomaticTuning",
    modelProperties: {
      ...Resource.type.modelProperties,
      desiredState: {
        serializedName: "properties.desiredState",
        type: {
          name: "Enum",
          allowedValues: ["Inherit", "Custom", "Auto", "Unspecified"]
        }
      },
      actualState: {
        serializedName: "properties.actualState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Inherit", "Custom", "Auto", "Unspecified"]
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "AutomaticTuningOptions" }
          }
        }
      }
    }
  }
};

export const AutomaticTuningOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutomaticTuningOptions",
    modelProperties: {
      desiredState: {
        serializedName: "desiredState",
        type: {
          name: "Enum",
          allowedValues: ["Off", "On", "Default"]
        }
      },
      actualState: {
        serializedName: "actualState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Off", "On"]
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      reasonDesc: {
        serializedName: "reasonDesc",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "Disabled",
            "AutoConfigured",
            "InheritedFromServer",
            "QueryStoreOff",
            "QueryStoreReadOnly",
            "NotSupported"
          ]
        }
      }
    }
  }
};

export const EncryptionProtectorListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionProtectorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EncryptionProtector" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionProtector: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionProtector",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subregion: {
        serializedName: "properties.subregion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverKeyName: {
        serializedName: "properties.serverKeyName",
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverGroup",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      readWriteEndpoint: {
        serializedName: "readWriteEndpoint",
        type: {
          name: "Composite",
          className: "FailoverGroupReadWriteEndpoint"
        }
      },
      readOnlyEndpoint: {
        serializedName: "readOnlyEndpoint",
        type: {
          name: "Composite",
          className: "FailoverGroupReadOnlyEndpoint"
        }
      },
      replicationRole: {
        serializedName: "properties.replicationRole",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      replicationState: {
        serializedName: "properties.replicationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerServers: {
        serializedName: "properties.partnerServers",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PartnerInfo" } }
        }
      },
      databases: {
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const FailoverGroupReadWriteEndpoint: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverGroupReadWriteEndpoint",
    modelProperties: {
      failoverPolicy: {
        serializedName: "failoverPolicy",
        required: true,
        type: {
          name: "String"
        }
      },
      failoverWithDataLossGracePeriodMinutes: {
        serializedName: "failoverWithDataLossGracePeriodMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FailoverGroupReadOnlyEndpoint: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverGroupReadOnlyEndpoint",
    modelProperties: {
      failoverPolicy: {
        serializedName: "failoverPolicy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerInfo: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartnerInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      replicationRole: {
        serializedName: "replicationRole",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverGroupUpdate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverGroupUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      readWriteEndpoint: {
        serializedName: "readWriteEndpoint",
        type: {
          name: "Composite",
          className: "FailoverGroupReadWriteEndpoint"
        }
      },
      readOnlyEndpoint: {
        serializedName: "readOnlyEndpoint",
        type: {
          name: "Composite",
          className: "FailoverGroupReadOnlyEndpoint"
        }
      },
      databases: {
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const FailoverGroupListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FailoverGroup" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerKeyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerKeyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ServerKey" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerKey: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerKey",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subregion: {
        serializedName: "properties.subregion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SyncAgent: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncAgent",
    modelProperties: {
      ...Resource.type.modelProperties,
      namePropertiesName: {
        serializedName: "properties.name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      syncDatabaseId: {
        serializedName: "properties.syncDatabaseId",
        type: {
          name: "String"
        }
      },
      lastAliveTime: {
        serializedName: "properties.lastAliveTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isUpToDate: {
        serializedName: "properties.isUpToDate",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      expiryTime: {
        serializedName: "properties.expiryTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      version: {
        serializedName: "properties.version",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncAgentListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncAgentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SyncAgent" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncAgentKeyProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncAgentKeyProperties",
    modelProperties: {
      syncAgentKey: {
        serializedName: "syncAgentKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncAgentLinkedDatabaseListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncAgentLinkedDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SyncAgentLinkedDatabase" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncAgentLinkedDatabase: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncAgentLinkedDatabase",
    modelProperties: {
      ...Resource.type.modelProperties,
      databaseType: {
        serializedName: "properties.databaseType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseId: {
        serializedName: "properties.databaseId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverName: {
        serializedName: "properties.serverName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.userName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncDatabaseIdListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncDatabaseIdListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SyncDatabaseIdProperties" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncDatabaseIdProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncDatabaseIdProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncFullSchemaPropertiesListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncFullSchemaPropertiesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SyncFullSchemaProperties" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncFullSchemaProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncFullSchemaProperties",
    modelProperties: {
      tables: {
        serializedName: "tables",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SyncFullSchemaTable" }
          }
        }
      },
      lastUpdateTime: {
        serializedName: "lastUpdateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SyncFullSchemaTable: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncFullSchemaTable",
    modelProperties: {
      columns: {
        serializedName: "columns",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SyncFullSchemaTableColumn" }
          }
        }
      },
      errorId: {
        serializedName: "errorId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hasError: {
        serializedName: "hasError",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      quotedName: {
        serializedName: "quotedName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncFullSchemaTableColumn: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncFullSchemaTableColumn",
    modelProperties: {
      dataSize: {
        serializedName: "dataSize",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "dataType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorId: {
        serializedName: "errorId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hasError: {
        serializedName: "hasError",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isPrimaryKey: {
        serializedName: "isPrimaryKey",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      quotedName: {
        serializedName: "quotedName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupLogListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroupLogListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SyncGroupLogProperties" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupLogProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroupLogProperties",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tracingId: {
        serializedName: "tracingId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      operationStatus: {
        serializedName: "operationStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroup",
    modelProperties: {
      ...Resource.type.modelProperties,
      interval: {
        serializedName: "properties.interval",
        type: {
          name: "Number"
        }
      },
      lastSyncTime: {
        serializedName: "properties.lastSyncTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "properties.conflictResolutionPolicy",
        type: {
          name: "String"
        }
      },
      syncDatabaseId: {
        serializedName: "properties.syncDatabaseId",
        type: {
          name: "String"
        }
      },
      hubDatabaseUserName: {
        serializedName: "properties.hubDatabaseUserName",
        type: {
          name: "String"
        }
      },
      hubDatabasePassword: {
        serializedName: "properties.hubDatabasePassword",
        type: {
          name: "String"
        }
      },
      syncState: {
        serializedName: "properties.syncState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      schema: {
        serializedName: "schema",
        type: {
          name: "Composite",
          className: "SyncGroupSchema"
        }
      }
    }
  }
};

export const SyncGroupSchema: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroupSchema",
    modelProperties: {
      tables: {
        serializedName: "tables",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SyncGroupSchemaTable" }
          }
        }
      },
      masterSyncMemberName: {
        serializedName: "masterSyncMemberName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupSchemaTable: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroupSchemaTable",
    modelProperties: {
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SyncGroupSchemaTableColumn" }
          }
        }
      },
      quotedName: {
        serializedName: "quotedName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupSchemaTableColumn: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroupSchemaTableColumn",
    modelProperties: {
      quotedName: {
        serializedName: "quotedName",
        type: {
          name: "String"
        }
      },
      dataSize: {
        serializedName: "dataSize",
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SyncGroup" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncMember: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncMember",
    modelProperties: {
      ...Resource.type.modelProperties,
      databaseType: {
        serializedName: "properties.databaseType",
        type: {
          name: "String"
        }
      },
      syncAgentId: {
        serializedName: "properties.syncAgentId",
        type: {
          name: "String"
        }
      },
      sqlServerDatabaseId: {
        serializedName: "properties.sqlServerDatabaseId",
        type: {
          name: "Uuid"
        }
      },
      serverName: {
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      syncDirection: {
        serializedName: "properties.syncDirection",
        type: {
          name: "String"
        }
      },
      syncState: {
        serializedName: "properties.syncState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncMemberListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncMemberListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SyncMember" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionUsageListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionUsageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SubscriptionUsage" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionUsage: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionUsage",
    modelProperties: {
      ...Resource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "properties.currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "properties.limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "properties.unit",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualClusterListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualClusterListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VirtualCluster" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualCluster: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualCluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      subnetId: {
        serializedName: "properties.subnetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "properties.family",
        type: {
          name: "String"
        }
      },
      childResources: {
        serializedName: "properties.childResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VirtualClusterUpdate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualClusterUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "properties.family",
        type: {
          name: "String"
        }
      },
      childResources: {
        serializedName: "properties.childResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VirtualNetworkRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      ...Resource.type.modelProperties,
      virtualNetworkSubnetId: {
        serializedName: "properties.virtualNetworkSubnetId",
        type: {
          name: "String"
        }
      },
      ignoreMissingVnetServiceEndpoint: {
        serializedName: "properties.ignoreMissingVnetServiceEndpoint",
        type: {
          name: "Boolean"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRuleListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkRule" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedDatabaseBlobAuditingPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedDatabaseBlobAuditingPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      predicateExpression: {
        serializedName: "properties.predicateExpression",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      },
      queueDelayMs: {
        serializedName: "properties.queueDelayMs",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExtendedDatabaseBlobAuditingPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedDatabaseBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExtendedDatabaseBlobAuditingPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedServerBlobAuditingPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedServerBlobAuditingPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      predicateExpression: {
        serializedName: "properties.predicateExpression",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      },
      queueDelayMs: {
        serializedName: "properties.queueDelayMs",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExtendedServerBlobAuditingPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedServerBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExtendedServerBlobAuditingPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerBlobAuditingPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerBlobAuditingPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      },
      queueDelayMs: {
        serializedName: "properties.queueDelayMs",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServerBlobAuditingPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServerBlobAuditingPolicy" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseBlobAuditingPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseBlobAuditingPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      },
      queueDelayMs: {
        serializedName: "properties.queueDelayMs",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatabaseBlobAuditingPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DatabaseBlobAuditingPolicy" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessmentRuleBaseline: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessmentRuleBaseline",
    modelProperties: {
      ...Resource.type.modelProperties,
      baselineResults: {
        serializedName: "properties.baselineResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseVulnerabilityAssessmentRuleBaselineItem"
            }
          }
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessmentRuleBaselineItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessmentRuleBaselineItem",
    modelProperties: {
      result: {
        serializedName: "result",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessment: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessment",
    modelProperties: {
      ...Resource.type.modelProperties,
      storageContainerPath: {
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      storageContainerSasKey: {
        serializedName: "properties.storageContainerSasKey",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      recurringScans: {
        serializedName: "recurringScans",
        type: {
          name: "Composite",
          className: "VulnerabilityAssessmentRecurringScansProperties"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentRecurringScansProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentRecurringScansProperties",
    modelProperties: {
      isEnabled: {
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      },
      emailSubscriptionAdmins: {
        defaultValue: true,
        serializedName: "emailSubscriptionAdmins",
        type: {
          name: "Boolean"
        }
      },
      emails: {
        serializedName: "emails",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessmentListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseVulnerabilityAssessment"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobAgentListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobAgentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobAgent" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobAgent: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobAgent",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      databaseId: {
        serializedName: "properties.databaseId",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobAgentUpdate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobAgentUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const JobCredentialListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobCredentialListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobCredential" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobCredential: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobCredential",
    modelProperties: {
      ...Resource.type.modelProperties,
      username: {
        serializedName: "properties.username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobExecutionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobExecutionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobExecution" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobExecution: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobExecution",
    modelProperties: {
      ...Resource.type.modelProperties,
      jobVersion: {
        serializedName: "properties.jobVersion",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      stepName: {
        serializedName: "properties.stepName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stepId: {
        serializedName: "properties.stepId",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      jobExecutionId: {
        serializedName: "properties.jobExecutionId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      lifecycle: {
        serializedName: "properties.lifecycle",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createTime: {
        serializedName: "properties.createTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      currentAttempts: {
        serializedName: "properties.currentAttempts",
        type: {
          name: "Number"
        }
      },
      currentAttemptStartTime: {
        serializedName: "properties.currentAttemptStartTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastMessage: {
        serializedName: "properties.lastMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "Composite",
          className: "JobExecutionTarget"
        }
      }
    }
  }
};

export const JobExecutionTarget: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobExecutionTarget",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverName: {
        serializedName: "serverName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Job" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Job: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Job",
    modelProperties: {
      ...Resource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      schedule: {
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "JobSchedule"
        }
      }
    }
  }
};

export const JobSchedule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobSchedule",
    modelProperties: {
      startTime: {
        defaultValue: "0001-01-01T00:00:00Z",
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        defaultValue: "9999-12-31T11:59:59Z",
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      type: {
        defaultValue: "Once",
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: ["Once", "Recurring"]
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      interval: {
        serializedName: "interval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStepListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobStepListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobStep" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStep: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobStep",
    modelProperties: {
      ...Resource.type.modelProperties,
      stepId: {
        serializedName: "properties.stepId",
        type: {
          name: "Number"
        }
      },
      targetGroup: {
        serializedName: "properties.targetGroup",
        type: {
          name: "String"
        }
      },
      credential: {
        serializedName: "properties.credential",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "JobStepAction"
        }
      },
      output: {
        serializedName: "output",
        type: {
          name: "Composite",
          className: "JobStepOutput"
        }
      },
      executionOptions: {
        serializedName: "executionOptions",
        type: {
          name: "Composite",
          className: "JobStepExecutionOptions"
        }
      }
    }
  }
};

export const JobStepAction: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobStepAction",
    modelProperties: {
      type: {
        defaultValue: "TSql",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      source: {
        defaultValue: "Inline",
        isConstant: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStepOutput: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobStepOutput",
    modelProperties: {
      type: {
        defaultValue: "SqlDatabase",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "Uuid"
        }
      },
      resourceGroupName: {
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      },
      serverName: {
        serializedName: "serverName",
        required: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "databaseName",
        required: true,
        type: {
          name: "String"
        }
      },
      schemaName: {
        defaultValue: "dbo",
        serializedName: "schemaName",
        type: {
          name: "String"
        }
      },
      tableName: {
        serializedName: "tableName",
        required: true,
        type: {
          name: "String"
        }
      },
      credential: {
        serializedName: "credential",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStepExecutionOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobStepExecutionOptions",
    modelProperties: {
      timeoutSeconds: {
        defaultValue: 43200,
        serializedName: "timeoutSeconds",
        type: {
          name: "Number"
        }
      },
      retryAttempts: {
        defaultValue: 10,
        serializedName: "retryAttempts",
        type: {
          name: "Number"
        }
      },
      initialRetryIntervalSeconds: {
        defaultValue: 1,
        serializedName: "initialRetryIntervalSeconds",
        type: {
          name: "Number"
        }
      },
      maximumRetryIntervalSeconds: {
        defaultValue: 120,
        serializedName: "maximumRetryIntervalSeconds",
        type: {
          name: "Number"
        }
      },
      retryIntervalBackoffMultiplier: {
        defaultValue: 2,
        serializedName: "retryIntervalBackoffMultiplier",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobTargetGroupListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobTargetGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobTargetGroup" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobTargetGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobTargetGroup",
    modelProperties: {
      ...Resource.type.modelProperties,
      members: {
        serializedName: "properties.members",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobTarget" } }
        }
      }
    }
  }
};

export const JobTarget: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobTarget",
    modelProperties: {
      membershipType: {
        defaultValue: "Include",
        serializedName: "membershipType",
        type: {
          name: "Enum",
          allowedValues: ["Include", "Exclude"]
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      serverName: {
        serializedName: "serverName",
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        serializedName: "elasticPoolName",
        type: {
          name: "String"
        }
      },
      shardMapName: {
        serializedName: "shardMapName",
        type: {
          name: "String"
        }
      },
      refreshCredential: {
        serializedName: "refreshCredential",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobVersionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobVersionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Resource" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LongTermRetentionBackup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LongTermRetentionBackup",
    modelProperties: {
      ...Resource.type.modelProperties,
      serverName: {
        serializedName: "properties.serverName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverCreateTime: {
        serializedName: "properties.serverCreateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseDeletionTime: {
        serializedName: "properties.databaseDeletionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      backupTime: {
        serializedName: "properties.backupTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      backupExpirationTime: {
        serializedName: "properties.backupExpirationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const LongTermRetentionBackupListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LongTermRetentionBackupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "LongTermRetentionBackup" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupLongTermRetentionPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupLongTermRetentionPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      weeklyRetention: {
        serializedName: "properties.weeklyRetention",
        type: {
          name: "String"
        }
      },
      monthlyRetention: {
        serializedName: "properties.monthlyRetention",
        type: {
          name: "String"
        }
      },
      yearlyRetention: {
        serializedName: "properties.yearlyRetention",
        type: {
          name: "String"
        }
      },
      weekOfYear: {
        serializedName: "properties.weekOfYear",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedBackupShortTermRetentionPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedBackupShortTermRetentionPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedBackupShortTermRetentionPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedBackupShortTermRetentionPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedBackupShortTermRetentionPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerAutomaticTuning: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerAutomaticTuning",
    modelProperties: {
      ...Resource.type.modelProperties,
      desiredState: {
        serializedName: "properties.desiredState",
        type: {
          name: "Enum",
          allowedValues: ["Custom", "Auto", "Unspecified"]
        }
      },
      actualState: {
        serializedName: "properties.actualState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Custom", "Auto", "Unspecified"]
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "AutomaticTuningServerOptions"
            }
          }
        }
      }
    }
  }
};

export const AutomaticTuningServerOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutomaticTuningServerOptions",
    modelProperties: {
      desiredState: {
        serializedName: "desiredState",
        type: {
          name: "Enum",
          allowedValues: ["Off", "On", "Default"]
        }
      },
      actualState: {
        serializedName: "actualState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Off", "On"]
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      reasonDesc: {
        serializedName: "reasonDesc",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Default", "Disabled", "AutoConfigured"]
        }
      }
    }
  }
};

export const ServerDnsAlias: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerDnsAlias",
    modelProperties: {
      ...Resource.type.modelProperties,
      azureDnsRecord: {
        serializedName: "properties.azureDnsRecord",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerDnsAliasListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerDnsAliasListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ServerDnsAlias" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerDnsAliasAcquisition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerDnsAliasAcquisition",
    modelProperties: {
      oldServerDnsAliasId: {
        serializedName: "oldServerDnsAliasId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerSecurityAlertPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerSecurityAlertPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["New", "Enabled", "Disabled"]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Boolean"
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const LogicalServerSecurityAlertPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogicalServerSecurityAlertPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServerSecurityAlertPolicy" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableDroppedManagedDatabaseListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableDroppedManagedDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableDroppedManagedDatabase"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableDroppedManagedDatabase: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableDroppedManagedDatabase",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      databaseName: {
        serializedName: "properties.databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      deletionDate: {
        serializedName: "properties.deletionDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      earliestRestoreDate: {
        serializedName: "properties.earliestRestoreDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RestorePointListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorePointListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RestorePoint" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorePoint: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorePoint",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      restorePointType: {
        serializedName: "properties.restorePointType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["CONTINUOUS", "DISCRETE"]
        }
      },
      earliestRestoreDate: {
        serializedName: "properties.earliestRestoreDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      restorePointCreationDate: {
        serializedName: "properties.restorePointCreationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      restorePointLabel: {
        serializedName: "properties.restorePointLabel",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateDatabaseRestorePointDefinition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateDatabaseRestorePointDefinition",
    modelProperties: {
      restorePointLabel: {
        serializedName: "restorePointLabel",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedDatabaseSecurityAlertPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedDatabaseSecurityAlertPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["New", "Enabled", "Disabled"]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Boolean"
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ManagedDatabaseSecurityAlertPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedDatabaseSecurityAlertPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedDatabaseSecurityAlertPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServerSecurityAlertPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServerSecurityAlertPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["New", "Enabled", "Disabled"]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Boolean"
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ManagedServerSecurityAlertPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServerSecurityAlertPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedServerSecurityAlertPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SensitivityLabelListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SensitivityLabelListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SensitivityLabel" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SensitivityLabel: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SensitivityLabel",
    modelProperties: {
      ...Resource.type.modelProperties,
      labelName: {
        serializedName: "properties.labelName",
        type: {
          name: "String"
        }
      },
      labelId: {
        serializedName: "properties.labelId",
        type: {
          name: "String"
        }
      },
      informationType: {
        serializedName: "properties.informationType",
        type: {
          name: "String"
        }
      },
      informationTypeId: {
        serializedName: "properties.informationTypeId",
        type: {
          name: "String"
        }
      },
      isDisabled: {
        serializedName: "properties.isDisabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      rank: {
        serializedName: "properties.rank",
        type: {
          name: "Enum",
          allowedValues: ["None", "Low", "Medium", "High", "Critical"]
        }
      }
    }
  }
};

export const ManagedInstanceAdministratorListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceAdministratorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceAdministrator"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceAdministrator: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceAdministrator",
    modelProperties: {
      ...Resource.type.modelProperties,
      administratorType: {
        defaultValue: "ActiveDirectory",
        isConstant: true,
        serializedName: "properties.administratorType",
        type: {
          name: "String"
        }
      },
      login: {
        serializedName: "properties.login",
        type: {
          name: "String"
        }
      },
      sid: {
        serializedName: "properties.sid",
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const DatabaseOperationListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseOperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DatabaseOperation" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseOperation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseOperation",
    modelProperties: {
      ...Resource.type.modelProperties,
      databaseName: {
        serializedName: "properties.databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "properties.operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationFriendlyName: {
        serializedName: "properties.operationFriendlyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      percentComplete: {
        serializedName: "properties.percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      serverName: {
        serializedName: "properties.serverName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "properties.errorCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errorDescription: {
        serializedName: "properties.errorDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        serializedName: "properties.errorSeverity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      isUserError: {
        serializedName: "properties.isUserError",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      estimatedCompletionTime: {
        serializedName: "properties.estimatedCompletionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isCancellable: {
        serializedName: "properties.isCancellable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ElasticPoolOperationListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPoolOperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ElasticPoolOperation" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolOperation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPoolOperation",
    modelProperties: {
      ...Resource.type.modelProperties,
      elasticPoolName: {
        serializedName: "properties.elasticPoolName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "properties.operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationFriendlyName: {
        serializedName: "properties.operationFriendlyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      percentComplete: {
        serializedName: "properties.percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      serverName: {
        serializedName: "properties.serverName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "properties.errorCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errorDescription: {
        serializedName: "properties.errorDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        serializedName: "properties.errorSeverity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      isUserError: {
        serializedName: "properties.isUserError",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      estimatedCompletionTime: {
        serializedName: "properties.estimatedCompletionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isCancellable: {
        serializedName: "properties.isCancellable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DatabaseListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Database" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Database: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Database",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managedBy: {
        serializedName: "managedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      sampleName: {
        serializedName: "properties.sampleName",
        type: {
          name: "String"
        }
      },
      elasticPoolId: {
        serializedName: "properties.elasticPoolId",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseId: {
        serializedName: "properties.databaseId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      currentServiceObjectiveName: {
        serializedName: "properties.currentServiceObjectiveName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requestedServiceObjectiveName: {
        serializedName: "properties.requestedServiceObjectiveName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultSecondaryLocation: {
        serializedName: "properties.defaultSecondaryLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      failoverGroupId: {
        serializedName: "properties.failoverGroupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      sourceDatabaseDeletionDate: {
        serializedName: "properties.sourceDatabaseDeletionDate",
        type: {
          name: "DateTime"
        }
      },
      recoveryServicesRecoveryPointId: {
        serializedName: "properties.recoveryServicesRecoveryPointId",
        type: {
          name: "String"
        }
      },
      longTermRetentionBackupResourceId: {
        serializedName: "properties.longTermRetentionBackupResourceId",
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      },
      restorableDroppedDatabaseId: {
        serializedName: "properties.restorableDroppedDatabaseId",
        type: {
          name: "String"
        }
      },
      catalogCollation: {
        serializedName: "properties.catalogCollation",
        type: {
          name: "String"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      maxLogSizeBytes: {
        serializedName: "properties.maxLogSizeBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      earliestRestoreDate: {
        serializedName: "properties.earliestRestoreDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      readScale: {
        serializedName: "properties.readScale",
        type: {
          name: "String"
        }
      },
      readReplicaCount: {
        serializedName: "properties.readReplicaCount",
        type: {
          name: "Number"
        }
      },
      currentSku: {
        serializedName: "currentSku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      autoPauseDelay: {
        serializedName: "properties.autoPauseDelay",
        type: {
          name: "Number"
        }
      },
      minCapacity: {
        serializedName: "properties.minCapacity",
        type: {
          name: "Number"
        }
      },
      pausedDate: {
        serializedName: "properties.pausedDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      resumedDate: {
        serializedName: "properties.resumedDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DatabaseUpdate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseUpdate",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      sampleName: {
        serializedName: "properties.sampleName",
        type: {
          name: "String"
        }
      },
      elasticPoolId: {
        serializedName: "properties.elasticPoolId",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseId: {
        serializedName: "properties.databaseId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      currentServiceObjectiveName: {
        serializedName: "properties.currentServiceObjectiveName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requestedServiceObjectiveName: {
        serializedName: "properties.requestedServiceObjectiveName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultSecondaryLocation: {
        serializedName: "properties.defaultSecondaryLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      failoverGroupId: {
        serializedName: "properties.failoverGroupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      sourceDatabaseDeletionDate: {
        serializedName: "properties.sourceDatabaseDeletionDate",
        type: {
          name: "DateTime"
        }
      },
      recoveryServicesRecoveryPointId: {
        serializedName: "properties.recoveryServicesRecoveryPointId",
        type: {
          name: "String"
        }
      },
      longTermRetentionBackupResourceId: {
        serializedName: "properties.longTermRetentionBackupResourceId",
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      },
      restorableDroppedDatabaseId: {
        serializedName: "properties.restorableDroppedDatabaseId",
        type: {
          name: "String"
        }
      },
      catalogCollation: {
        serializedName: "properties.catalogCollation",
        type: {
          name: "String"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      maxLogSizeBytes: {
        serializedName: "properties.maxLogSizeBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      earliestRestoreDate: {
        serializedName: "properties.earliestRestoreDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      readScale: {
        serializedName: "properties.readScale",
        type: {
          name: "String"
        }
      },
      readReplicaCount: {
        serializedName: "properties.readReplicaCount",
        type: {
          name: "Number"
        }
      },
      currentSku: {
        serializedName: "currentSku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      autoPauseDelay: {
        serializedName: "properties.autoPauseDelay",
        type: {
          name: "Number"
        }
      },
      minCapacity: {
        serializedName: "properties.minCapacity",
        type: {
          name: "Number"
        }
      },
      pausedDate: {
        serializedName: "properties.pausedDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      resumedDate: {
        serializedName: "properties.resumedDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ResourceMoveDefinition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceMoveDefinition",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ElasticPool" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPool: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      perDatabaseSettings: {
        serializedName: "perDatabaseSettings",
        type: {
          name: "Composite",
          className: "ElasticPoolPerDatabaseSettings"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerDatabaseSettings: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPoolPerDatabaseSettings",
    modelProperties: {
      minCapacity: {
        serializedName: "minCapacity",
        type: {
          name: "Number"
        }
      },
      maxCapacity: {
        serializedName: "maxCapacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ElasticPoolUpdate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPoolUpdate",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      perDatabaseSettings: {
        serializedName: "perDatabaseSettings",
        type: {
          name: "Composite",
          className: "ElasticPoolPerDatabaseSettings"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanRecordListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanRecordListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VulnerabilityAssessmentScanRecord"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanRecord: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanRecord",
    modelProperties: {
      ...Resource.type.modelProperties,
      scanId: {
        serializedName: "properties.scanId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      triggerType: {
        serializedName: "properties.triggerType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      errors: {
        serializedName: "properties.errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VulnerabilityAssessmentScanError"
            }
          }
        }
      },
      storageContainerPath: {
        serializedName: "properties.storageContainerPath",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      numberOfFailedSecurityChecks: {
        serializedName: "properties.numberOfFailedSecurityChecks",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanError",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessmentScansExport: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessmentScansExport",
    modelProperties: {
      ...Resource.type.modelProperties,
      exportedReportLocation: {
        serializedName: "properties.exportedReportLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstanceFailoverGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceFailoverGroup",
    modelProperties: {
      ...Resource.type.modelProperties,
      readWriteEndpoint: {
        serializedName: "readWriteEndpoint",
        type: {
          name: "Composite",
          className: "InstanceFailoverGroupReadWriteEndpoint"
        }
      },
      readOnlyEndpoint: {
        serializedName: "readOnlyEndpoint",
        type: {
          name: "Composite",
          className: "InstanceFailoverGroupReadOnlyEndpoint"
        }
      },
      replicationRole: {
        serializedName: "properties.replicationRole",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      replicationState: {
        serializedName: "properties.replicationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerRegions: {
        serializedName: "properties.partnerRegions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PartnerRegionInfo" }
          }
        }
      },
      managedInstancePairs: {
        serializedName: "properties.managedInstancePairs",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ManagedInstancePairInfo" }
          }
        }
      }
    }
  }
};

export const InstanceFailoverGroupReadWriteEndpoint: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceFailoverGroupReadWriteEndpoint",
    modelProperties: {
      failoverPolicy: {
        serializedName: "failoverPolicy",
        required: true,
        type: {
          name: "String"
        }
      },
      failoverWithDataLossGracePeriodMinutes: {
        serializedName: "failoverWithDataLossGracePeriodMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InstanceFailoverGroupReadOnlyEndpoint: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceFailoverGroupReadOnlyEndpoint",
    modelProperties: {
      failoverPolicy: {
        serializedName: "failoverPolicy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerRegionInfo: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartnerRegionInfo",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      replicationRole: {
        serializedName: "replicationRole",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstancePairInfo: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstancePairInfo",
    modelProperties: {
      primaryManagedInstanceId: {
        serializedName: "primaryManagedInstanceId",
        type: {
          name: "String"
        }
      },
      partnerManagedInstanceId: {
        serializedName: "partnerManagedInstanceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstanceFailoverGroupListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceFailoverGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "InstanceFailoverGroup" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupShortTermRetentionPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupShortTermRetentionPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupShortTermRetentionPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupShortTermRetentionPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupShortTermRetentionPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TdeCertificate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TdeCertificate",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateBlob: {
        serializedName: "properties.privateBlob",
        type: {
          name: "String"
        }
      },
      certPassword: {
        serializedName: "properties.certPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceKeyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceKeyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ManagedInstanceKey" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceKey: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceKey",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ManagedInstanceEncryptionProtectorListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceEncryptionProtectorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceEncryptionProtector"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceEncryptionProtector: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceEncryptionProtector",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverKeyName: {
        serializedName: "properties.serverKeyName",
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoverableManagedDatabaseListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoverableManagedDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RecoverableManagedDatabase" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoverableManagedDatabase: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoverableManagedDatabase",
    modelProperties: {
      ...Resource.type.modelProperties,
      lastAvailableBackupDate: {
        serializedName: "properties.lastAvailableBackupDate",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceVulnerabilityAssessment: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceVulnerabilityAssessment",
    modelProperties: {
      ...Resource.type.modelProperties,
      storageContainerPath: {
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      storageContainerSasKey: {
        serializedName: "properties.storageContainerSasKey",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      recurringScans: {
        serializedName: "recurringScans",
        type: {
          name: "Composite",
          className: "VulnerabilityAssessmentRecurringScansProperties"
        }
      }
    }
  }
};

export const ManagedInstanceVulnerabilityAssessmentListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceVulnerabilityAssessmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceVulnerabilityAssessment"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerVulnerabilityAssessment: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerVulnerabilityAssessment",
    modelProperties: {
      ...Resource.type.modelProperties,
      storageContainerPath: {
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      storageContainerSasKey: {
        serializedName: "properties.storageContainerSasKey",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      recurringScans: {
        serializedName: "recurringScans",
        type: {
          name: "Composite",
          className: "VulnerabilityAssessmentRecurringScansProperties"
        }
      }
    }
  }
};

export const ServerVulnerabilityAssessmentListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerVulnerabilityAssessmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerVulnerabilityAssessment"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstancePool: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstancePool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      vCores: {
        serializedName: "properties.vCores",
        type: {
          name: "Number"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstancePoolUpdate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstancePoolUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const InstancePoolListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstancePoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InstancePool" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Usage" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "Name"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      requestedLimit: {
        serializedName: "requestedLimit",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Name: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Name",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ManagedInstance" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstance: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      managedInstanceCreateMode: {
        serializedName: "properties.managedInstanceCreateMode",
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        serializedName: "properties.fullyQualifiedDomainName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      vCores: {
        serializedName: "properties.vCores",
        type: {
          name: "Number"
        }
      },
      storageSizeInGB: {
        serializedName: "properties.storageSizeInGB",
        type: {
          name: "Number"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      dnsZone: {
        serializedName: "properties.dnsZone",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dnsZonePartner: {
        serializedName: "properties.dnsZonePartner",
        type: {
          name: "String"
        }
      },
      publicDataEndpointEnabled: {
        serializedName: "properties.publicDataEndpointEnabled",
        type: {
          name: "Boolean"
        }
      },
      sourceManagedInstanceId: {
        serializedName: "properties.sourceManagedInstanceId",
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      proxyOverride: {
        serializedName: "properties.proxyOverride",
        type: {
          name: "String"
        }
      },
      timezoneId: {
        serializedName: "properties.timezoneId",
        type: {
          name: "String"
        }
      },
      instancePoolId: {
        serializedName: "properties.instancePoolId",
        type: {
          name: "String"
        }
      },
      minimalTlsVersion: {
        serializedName: "properties.minimalTlsVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceIdentity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      type: {
        defaultValue: "SystemAssigned",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const ManagedInstanceUpdate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceUpdate",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      managedInstanceCreateMode: {
        serializedName: "properties.managedInstanceCreateMode",
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        serializedName: "properties.fullyQualifiedDomainName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      vCores: {
        serializedName: "properties.vCores",
        type: {
          name: "Number"
        }
      },
      storageSizeInGB: {
        serializedName: "properties.storageSizeInGB",
        type: {
          name: "Number"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      dnsZone: {
        serializedName: "properties.dnsZone",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dnsZonePartner: {
        serializedName: "properties.dnsZonePartner",
        type: {
          name: "String"
        }
      },
      publicDataEndpointEnabled: {
        serializedName: "properties.publicDataEndpointEnabled",
        type: {
          name: "Boolean"
        }
      },
      sourceManagedInstanceId: {
        serializedName: "properties.sourceManagedInstanceId",
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      proxyOverride: {
        serializedName: "properties.proxyOverride",
        type: {
          name: "String"
        }
      },
      timezoneId: {
        serializedName: "properties.timezoneId",
        type: {
          name: "String"
        }
      },
      instancePoolId: {
        serializedName: "properties.instancePoolId",
        type: {
          name: "String"
        }
      },
      minimalTlsVersion: {
        serializedName: "properties.minimalTlsVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointProperty"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionStateProperty"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointProperty: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointProperty",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionStateProperty: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionStateProperty",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        required: true,
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateEndpointConnection" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateLinkResource" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateLinkResourceProperties"
        }
      }
    }
  }
};

export const PrivateLinkResourceProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceProperties",
    modelProperties: {
      groupId: {
        serializedName: "groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ServerListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Server" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Server: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Server",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        serializedName: "properties.fullyQualifiedDomainName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerPrivateEndpointConnection"
            }
          }
        }
      },
      minimalTlsVersion: {
        serializedName: "properties.minimalTlsVersion",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerPrivateEndpointConnection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerPrivateEndpointConnection",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionProperties"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionProperties",
    modelProperties: {
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointProperty"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionStatePropertyAutoGenerated"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionStatePropertyAutoGenerated: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionStatePropertyAutoGenerated",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        required: true,
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        defaultValue: "None",
        isConstant: true,
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerUpdate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        serializedName: "properties.fullyQualifiedDomainName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerPrivateEndpointConnection"
            }
          }
        }
      },
      minimalTlsVersion: {
        serializedName: "properties.minimalTlsVersion",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Sql/servers",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponse",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      available: {
        serializedName: "available",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Invalid", "AlreadyExists"]
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocationCapabilities: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocationCapabilities",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedServerVersions: {
        serializedName: "supportedServerVersions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServerVersionCapability" }
          }
        }
      },
      supportedManagedInstanceVersions: {
        serializedName: "supportedManagedInstanceVersions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceVersionCapability"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerVersionCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerVersionCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedEditions: {
        serializedName: "supportedEditions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EditionCapability" }
          }
        }
      },
      supportedElasticPoolEditions: {
        serializedName: "supportedElasticPoolEditions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolEditionCapability"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EditionCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EditionCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedServiceLevelObjectives: {
        serializedName: "supportedServiceLevelObjectives",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServiceObjectiveCapability" }
          }
        }
      },
      zoneRedundant: {
        serializedName: "zoneRedundant",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      readScale: {
        serializedName: "readScale",
        type: {
          name: "Composite",
          className: "ReadScaleCapability"
        }
      },
      supportedStorageCapabilities: {
        serializedName: "supportedStorageCapabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "StorageCapability" }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceObjectiveCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceObjectiveCapability",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedMaxSizes: {
        serializedName: "supportedMaxSizes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MaxSizeRangeCapability" }
          }
        }
      },
      performanceLevel: {
        serializedName: "performanceLevel",
        type: {
          name: "Composite",
          className: "PerformanceLevelCapability"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      supportedLicenseTypes: {
        serializedName: "supportedLicenseTypes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "LicenseTypeCapability" }
          }
        }
      },
      includedMaxSize: {
        serializedName: "includedMaxSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      zoneRedundant: {
        serializedName: "zoneRedundant",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      supportedAutoPauseDelay: {
        serializedName: "supportedAutoPauseDelay",
        type: {
          name: "Composite",
          className: "AutoPauseDelayTimeRange"
        }
      },
      supportedMinCapacities: {
        serializedName: "supportedMinCapacities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MinCapacityCapability" }
          }
        }
      },
      computeModel: {
        serializedName: "computeModel",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaxSizeRangeCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaxSizeRangeCapability",
    modelProperties: {
      minValue: {
        serializedName: "minValue",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      maxValue: {
        serializedName: "maxValue",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      scaleSize: {
        serializedName: "scaleSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      logSize: {
        serializedName: "logSize",
        type: {
          name: "Composite",
          className: "LogSizeCapability"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaxSizeCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaxSizeCapability",
    modelProperties: {
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogSizeCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogSizeCapability",
    modelProperties: {
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PerformanceLevelCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PerformanceLevelCapability",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LicenseTypeCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LicenseTypeCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoPauseDelayTimeRange: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoPauseDelayTimeRange",
    modelProperties: {
      minValue: {
        serializedName: "minValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxValue: {
        serializedName: "maxValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      stepSize: {
        serializedName: "stepSize",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      default: {
        serializedName: "default",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        defaultValue: "Minutes",
        isConstant: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      doNotPauseValue: {
        serializedName: "doNotPauseValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MinCapacityCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MinCapacityCapability",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReadScaleCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReadScaleCapability",
    modelProperties: {
      maxNumberOfReplicas: {
        serializedName: "maxNumberOfReplicas",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageCapability",
    modelProperties: {
      storageAccountType: {
        serializedName: "storageAccountType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolEditionCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPoolEditionCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedElasticPoolPerformanceLevels: {
        serializedName: "supportedElasticPoolPerformanceLevels",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolPerformanceLevelCapability"
            }
          }
        }
      },
      zoneRedundant: {
        serializedName: "zoneRedundant",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerformanceLevelCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPoolPerformanceLevelCapability",
    modelProperties: {
      performanceLevel: {
        serializedName: "performanceLevel",
        type: {
          name: "Composite",
          className: "PerformanceLevelCapability"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      supportedLicenseTypes: {
        serializedName: "supportedLicenseTypes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "LicenseTypeCapability" }
          }
        }
      },
      maxDatabaseCount: {
        serializedName: "maxDatabaseCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      includedMaxSize: {
        serializedName: "includedMaxSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      supportedMaxSizes: {
        serializedName: "supportedMaxSizes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MaxSizeRangeCapability" }
          }
        }
      },
      supportedPerDatabaseMaxSizes: {
        serializedName: "supportedPerDatabaseMaxSizes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MaxSizeRangeCapability" }
          }
        }
      },
      supportedPerDatabaseMaxPerformanceLevels: {
        serializedName: "supportedPerDatabaseMaxPerformanceLevels",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability"
            }
          }
        }
      },
      zoneRedundant: {
        serializedName: "zoneRedundant",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerDatabaseMaxPerformanceLevelCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability",
    modelProperties: {
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedPerDatabaseMinPerformanceLevels: {
        serializedName: "supportedPerDatabaseMinPerformanceLevels",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolPerDatabaseMinPerformanceLevelCapability"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerDatabaseMinPerformanceLevelCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElasticPoolPerDatabaseMinPerformanceLevelCapability",
    modelProperties: {
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceVersionCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceVersionCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedEditions: {
        serializedName: "supportedEditions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceEditionCapability"
            }
          }
        }
      },
      supportedInstancePoolEditions: {
        serializedName: "supportedInstancePoolEditions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstancePoolEditionCapability"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceEditionCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceEditionCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedFamilies: {
        serializedName: "supportedFamilies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceFamilyCapability"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceFamilyCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceFamilyCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedLicenseTypes: {
        serializedName: "supportedLicenseTypes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "LicenseTypeCapability" }
          }
        }
      },
      supportedVcoresValues: {
        serializedName: "supportedVcoresValues",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceVcoresCapability"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceVcoresCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceVcoresCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      includedMaxSize: {
        serializedName: "includedMaxSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      supportedStorageSizes: {
        serializedName: "supportedStorageSizes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MaxSizeRangeCapability" }
          }
        }
      },
      instancePoolSupported: {
        serializedName: "instancePoolSupported",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      standaloneSupported: {
        serializedName: "standaloneSupported",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstancePoolEditionCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstancePoolEditionCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedFamilies: {
        serializedName: "supportedFamilies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstancePoolFamilyCapability"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstancePoolFamilyCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstancePoolFamilyCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedLicenseTypes: {
        serializedName: "supportedLicenseTypes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "LicenseTypeCapability" }
          }
        }
      },
      supportedVcoresValues: {
        serializedName: "supportedVcoresValues",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstancePoolVcoresCapability"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstancePoolVcoresCapability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstancePoolVcoresCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      storageLimit: {
        serializedName: "storageLimit",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceLongTermRetentionBackup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceLongTermRetentionBackup",
    modelProperties: {
      ...Resource.type.modelProperties,
      managedInstanceName: {
        serializedName: "properties.managedInstanceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managedInstanceCreateTime: {
        serializedName: "properties.managedInstanceCreateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseDeletionTime: {
        serializedName: "properties.databaseDeletionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      backupTime: {
        serializedName: "properties.backupTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      backupExpirationTime: {
        serializedName: "properties.backupExpirationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ManagedInstanceLongTermRetentionBackupListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceLongTermRetentionBackupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceLongTermRetentionBackup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceLongTermRetentionPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceLongTermRetentionPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      weeklyRetention: {
        serializedName: "properties.weeklyRetention",
        type: {
          name: "String"
        }
      },
      monthlyRetention: {
        serializedName: "properties.monthlyRetention",
        type: {
          name: "String"
        }
      },
      yearlyRetention: {
        serializedName: "properties.yearlyRetention",
        type: {
          name: "String"
        }
      },
      weekOfYear: {
        serializedName: "properties.weekOfYear",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedInstanceLongTermRetentionPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceLongTermRetentionPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceLongTermRetentionPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkloadGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadGroup",
    modelProperties: {
      ...Resource.type.modelProperties,
      minResourcePercent: {
        serializedName: "properties.minResourcePercent",
        type: {
          name: "Number"
        }
      },
      maxResourcePercent: {
        serializedName: "properties.maxResourcePercent",
        type: {
          name: "Number"
        }
      },
      minResourcePercentPerRequest: {
        serializedName: "properties.minResourcePercentPerRequest",
        type: {
          name: "Number"
        }
      },
      maxResourcePercentPerRequest: {
        serializedName: "properties.maxResourcePercentPerRequest",
        type: {
          name: "Number"
        }
      },
      importance: {
        serializedName: "properties.importance",
        type: {
          name: "String"
        }
      },
      queryExecutionTimeout: {
        serializedName: "properties.queryExecutionTimeout",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WorkloadGroupListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "WorkloadGroup" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkloadClassifier: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadClassifier",
    modelProperties: {
      ...Resource.type.modelProperties,
      memberName: {
        serializedName: "properties.memberName",
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "properties.label",
        type: {
          name: "String"
        }
      },
      context: {
        serializedName: "properties.context",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        type: {
          name: "String"
        }
      },
      importance: {
        serializedName: "properties.importance",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkloadClassifierListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadClassifierListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "WorkloadClassifier" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedDatabaseRestoreDetailsResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedDatabaseRestoreDetailsResult",
    modelProperties: {
      ...Resource.type.modelProperties,
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentRestoringFileName: {
        serializedName: "properties.currentRestoringFileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastRestoredFileName: {
        serializedName: "properties.lastRestoredFileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastRestoredFileTime: {
        serializedName: "properties.lastRestoredFileTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      percentCompleted: {
        serializedName: "properties.percentCompleted",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unrestorableFiles: {
        serializedName: "properties.unrestorableFiles",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      numberOfFilesDetected: {
        serializedName: "properties.numberOfFilesDetected",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastUploadedFileName: {
        serializedName: "properties.lastUploadedFileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastUploadedFileTime: {
        serializedName: "properties.lastUploadedFileTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      blockReason: {
        serializedName: "properties.blockReason",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedDatabaseListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ManagedDatabase" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedDatabase: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedDatabase",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      earliestRestorePoint: {
        serializedName: "properties.earliestRestorePoint",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      defaultSecondaryLocation: {
        serializedName: "properties.defaultSecondaryLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      catalogCollation: {
        serializedName: "properties.catalogCollation",
        type: {
          name: "String"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      storageContainerUri: {
        serializedName: "properties.storageContainerUri",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      restorableDroppedDatabaseId: {
        serializedName: "properties.restorableDroppedDatabaseId",
        type: {
          name: "String"
        }
      },
      storageContainerSasToken: {
        serializedName: "properties.storageContainerSasToken",
        type: {
          name: "String"
        }
      },
      failoverGroupId: {
        serializedName: "properties.failoverGroupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      },
      longTermRetentionBackupResourceId: {
        serializedName: "properties.longTermRetentionBackupResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedDatabaseUpdate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedDatabaseUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      earliestRestorePoint: {
        serializedName: "properties.earliestRestorePoint",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      defaultSecondaryLocation: {
        serializedName: "properties.defaultSecondaryLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      catalogCollation: {
        serializedName: "properties.catalogCollation",
        type: {
          name: "String"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      storageContainerUri: {
        serializedName: "properties.storageContainerUri",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      restorableDroppedDatabaseId: {
        serializedName: "properties.restorableDroppedDatabaseId",
        type: {
          name: "String"
        }
      },
      storageContainerSasToken: {
        serializedName: "properties.storageContainerSasToken",
        type: {
          name: "String"
        }
      },
      failoverGroupId: {
        serializedName: "properties.failoverGroupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      },
      longTermRetentionBackupResourceId: {
        serializedName: "properties.longTermRetentionBackupResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CompleteDatabaseRestoreDefinition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CompleteDatabaseRestoreDefinition",
    modelProperties: {
      lastBackupName: {
        serializedName: "lastBackupName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerAzureADAdministrator: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerAzureADAdministrator",
    modelProperties: {
      ...Resource.type.modelProperties,
      administratorType: {
        defaultValue: "ActiveDirectory",
        isConstant: true,
        serializedName: "properties.administratorType",
        type: {
          name: "String"
        }
      },
      login: {
        serializedName: "properties.login",
        type: {
          name: "String"
        }
      },
      sid: {
        serializedName: "properties.sid",
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "Uuid"
        }
      },
      azureADOnlyAuthentication: {
        serializedName: "properties.azureADOnlyAuthentication",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AdministratorListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdministratorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServerAzureADAdministrator" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceOperationListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceOperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ManagedInstanceOperation" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceOperation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedInstanceOperation",
    modelProperties: {
      ...Resource.type.modelProperties,
      managedInstanceName: {
        serializedName: "properties.managedInstanceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "properties.operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationFriendlyName: {
        serializedName: "properties.operationFriendlyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      percentComplete: {
        serializedName: "properties.percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "properties.errorCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errorDescription: {
        serializedName: "properties.errorDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        serializedName: "properties.errorSeverity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      isUserError: {
        serializedName: "properties.isUserError",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      estimatedCompletionTime: {
        serializedName: "properties.estimatedCompletionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isCancellable: {
        serializedName: "properties.isCancellable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationImpact: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationImpact",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      changeValueAbsolute: {
        serializedName: "changeValueAbsolute",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      changeValueRelative: {
        serializedName: "changeValueRelative",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RecommendedIndex: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecommendedIndex",
    modelProperties: {
      ...Resource.type.modelProperties,
      action: {
        serializedName: "properties.action",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Create", "Drop", "Rebuild"]
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "Pending",
            "Executing",
            "Verifying",
            "Pending Revert",
            "Reverting",
            "Reverted",
            "Ignored",
            "Expired",
            "Blocked",
            "Success"
          ]
        }
      },
      created: {
        serializedName: "properties.created",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        serializedName: "properties.lastModified",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      indexType: {
        serializedName: "properties.indexType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "CLUSTERED",
            "NONCLUSTERED",
            "COLUMNSTORE",
            "CLUSTERED COLUMNSTORE"
          ]
        }
      },
      schema: {
        serializedName: "properties.schema",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "properties.table",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      columns: {
        serializedName: "properties.columns",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      includedColumns: {
        serializedName: "properties.includedColumns",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      indexScript: {
        serializedName: "properties.indexScript",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      estimatedImpact: {
        serializedName: "properties.estimatedImpact",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OperationImpact" } }
        }
      },
      reportedImpact: {
        serializedName: "properties.reportedImpact",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OperationImpact" } }
        }
      }
    }
  }
};

export const JobVersion: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobVersion",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const ProxyResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};
