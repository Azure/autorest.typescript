/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import { LROOperationState } from "../lro";
import { PollerLike } from "@azure/core-lro";
import {
  LongTermRetentionBackup,
  LongTermRetentionBackupsListByResourceGroupDatabaseNextOptionalParams,
  LongTermRetentionBackupsListByResourceGroupDatabaseOptionalParams,
  LongTermRetentionBackupsListByResourceGroupLocationNextOptionalParams,
  LongTermRetentionBackupsListByResourceGroupLocationOptionalParams,
  LongTermRetentionBackupsListByResourceGroupServerNextOptionalParams,
  LongTermRetentionBackupsListByResourceGroupServerOptionalParams,
  LongTermRetentionBackupsListByDatabaseNextOptionalParams,
  LongTermRetentionBackupsListByDatabaseOptionalParams,
  LongTermRetentionBackupsListByLocationNextOptionalParams,
  LongTermRetentionBackupsListByLocationOptionalParams,
  LongTermRetentionBackupsListByServerNextOptionalParams,
  LongTermRetentionBackupsListByServerOptionalParams,
  LongTermRetentionBackupsGetByResourceGroupResponse,
  LongTermRetentionBackupsGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a LongTermRetentionBackups. */
export interface LongTermRetentionBackups {
  /**
   * Lists all long term retention backups for a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param options The options parameters.
   */
  listByResourceGroupDatabase(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    options?: LongTermRetentionBackupsListByResourceGroupDatabaseOptionalParams
  ): PagedAsyncIterableIterator<LongTermRetentionBackup>;
  /**
   * Lists the long term retention backups for a given location.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param options The options parameters.
   */
  listByResourceGroupLocation(
    resourceGroupName: string,
    locationName: string,
    options?: LongTermRetentionBackupsListByResourceGroupLocationOptionalParams
  ): PagedAsyncIterableIterator<LongTermRetentionBackup>;
  /**
   * Lists the long term retention backups for a given server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param options The options parameters.
   */
  listByResourceGroupServer(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    options?: LongTermRetentionBackupsListByResourceGroupServerOptionalParams
  ): PagedAsyncIterableIterator<LongTermRetentionBackup>;
  /**
   * Lists all long term retention backups for a database.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param options The options parameters.
   */
  listByDatabase(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    options?: LongTermRetentionBackupsListByDatabaseOptionalParams
  ): PagedAsyncIterableIterator<LongTermRetentionBackup>;
  /**
   * Lists the long term retention backups for a given location.
   * @param locationName The location of the database
   * @param options The options parameters.
   */
  listByLocation(
    locationName: string,
    options?: LongTermRetentionBackupsListByLocationOptionalParams
  ): PagedAsyncIterableIterator<LongTermRetentionBackup>;
  /**
   * Lists the long term retention backups for a given server.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param options The options parameters.
   */
  listByServer(
    locationName: string,
    longTermRetentionServerName: string,
    options?: LongTermRetentionBackupsListByServerOptionalParams
  ): PagedAsyncIterableIterator<LongTermRetentionBackup>;
  /**
   * Gets a long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  getByResourceGroup(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LongTermRetentionBackupsGetByResourceGroupResponse>;
  /**
   * Deletes a long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  deleteByResourceGroup(
    resourceGroupName: string,
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<LROOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Gets a long term retention backup.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  get(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LongTermRetentionBackupsGetResponse>;
  /**
   * Deletes a long term retention backup.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  delete(
    locationName: string,
    longTermRetentionServerName: string,
    longTermRetentionDatabaseName: string,
    backupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<LROOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
}
