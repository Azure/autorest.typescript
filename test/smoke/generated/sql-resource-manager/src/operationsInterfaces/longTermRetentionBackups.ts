/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  LongTermRetentionBackup,
  LongTermRetentionBackupsCopyResponse,
  LongTermRetentionBackupsUpdateResponse,
  LongTermRetentionBackupsGetResponse,
  LongTermRetentionBackupsCopyByResourceGroupResponse,
  LongTermRetentionBackupsUpdateByResourceGroupResponse,
  LongTermRetentionBackupsGetByResourceGroupResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a LongTermRetentionBackups. */
export interface LongTermRetentionBackups {
  /**
   * Lists all long term retention backups for a database.
   *
   */
  listByDatabase(): PagedAsyncIterableIterator<LongTermRetentionBackup>;
  /**
   * Lists the long term retention backups for a given location.
   *
   */
  listByLocation(): PagedAsyncIterableIterator<LongTermRetentionBackup>;
  /**
   * Lists the long term retention backups for a given server.
   *
   */
  listByServer(): PagedAsyncIterableIterator<LongTermRetentionBackup>;
  /**
   * Lists all long term retention backups for a database.
   *
   */
  listByResourceGroupDatabase(): PagedAsyncIterableIterator<
    LongTermRetentionBackup
  >;
  /**
   * Lists the long term retention backups for a given location.
   *
   */
  listByResourceGroupLocation(): PagedAsyncIterableIterator<
    LongTermRetentionBackup
  >;
  /**
   * Lists the long term retention backups for a given server.
   *
   */
  listByResourceGroupServer(): PagedAsyncIterableIterator<
    LongTermRetentionBackup
  >;
  /**
   * Copy an existing long term retention backup.
   *
   */
  beginCopy(): Promise<
    PollerLike<
      PollOperationState<LongTermRetentionBackupsCopyResponse>,
      LongTermRetentionBackupsCopyResponse
    >
  >;
  /**
   * Copy an existing long term retention backup.
   *
   */
  beginCopyAndWait(): Promise<LongTermRetentionBackupsCopyResponse>;
  /**
   * Updates an existing long term retention backup.
   *
   */
  beginUpdate(): Promise<
    PollerLike<
      PollOperationState<LongTermRetentionBackupsUpdateResponse>,
      LongTermRetentionBackupsUpdateResponse
    >
  >;
  /**
   * Updates an existing long term retention backup.
   *
   */
  beginUpdateAndWait(): Promise<LongTermRetentionBackupsUpdateResponse>;
  /**
   * Gets a long term retention backup.
   *
   */
  get(): Promise<LongTermRetentionBackupsGetResponse>;
  /**
   * Deletes a long term retention backup.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a long term retention backup.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Copy an existing long term retention backup to a different server.
   *
   */
  beginCopyByResourceGroup(): Promise<
    PollerLike<
      PollOperationState<LongTermRetentionBackupsCopyByResourceGroupResponse>,
      LongTermRetentionBackupsCopyByResourceGroupResponse
    >
  >;
  /**
   * Copy an existing long term retention backup to a different server.
   *
   */
  beginCopyByResourceGroupAndWait(): Promise<
    LongTermRetentionBackupsCopyByResourceGroupResponse
  >;
  /**
   * Updates an existing long term retention backup.
   *
   */
  beginUpdateByResourceGroup(): Promise<
    PollerLike<
      PollOperationState<LongTermRetentionBackupsUpdateByResourceGroupResponse>,
      LongTermRetentionBackupsUpdateByResourceGroupResponse
    >
  >;
  /**
   * Updates an existing long term retention backup.
   *
   */
  beginUpdateByResourceGroupAndWait(): Promise<
    LongTermRetentionBackupsUpdateByResourceGroupResponse
  >;
  /**
   * Gets a long term retention backup.
   *
   */
  getByResourceGroup(): Promise<
    LongTermRetentionBackupsGetByResourceGroupResponse
  >;
  /**
   * Deletes a long term retention backup.
   *
   */
  beginDeleteByResourceGroup(): Promise<
    PollerLike<PollOperationState<void>, void>
  >;
  /**
   * Deletes a long term retention backup.
   *
   */
  beginDeleteByResourceGroupAndWait(): Promise<void>;
}
