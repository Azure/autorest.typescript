/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  SyncDatabaseIdProperties,
  SyncFullSchemaProperties,
  SyncGroupLogProperties,
  SyncGroup,
  SyncGroupsGetResponse,
  SyncGroupsCreateOrUpdateResponse,
  SyncGroupsUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a SyncGroups. */
export interface SyncGroups {
  /**
   * Gets a collection of sync database ids.
   *
   */
  listSyncDatabaseIds(): PagedAsyncIterableIterator<SyncDatabaseIdProperties>;
  /**
   * Gets a collection of hub database schemas.
   *
   */
  listHubSchemas(): PagedAsyncIterableIterator<SyncFullSchemaProperties>;
  /**
   * Gets a collection of sync group logs.
   *
   */
  listLogs(): PagedAsyncIterableIterator<SyncGroupLogProperties>;
  /**
   * Lists sync groups under a hub database.
   *
   */
  listByDatabase(): PagedAsyncIterableIterator<SyncGroup>;
  /**
   * Refreshes a hub database schema.
   *
   */
  beginRefreshHubSchema(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Refreshes a hub database schema.
   *
   */
  beginRefreshHubSchemaAndWait(): Promise<void>;
  /**
   * Cancels a sync group synchronization.
   *
   */
  cancelSync(): Promise<void>;
  /**
   * Triggers a sync group synchronization.
   *
   */
  triggerSync(): Promise<void>;
  /**
   * Gets a sync group.
   *
   */
  get(): Promise<SyncGroupsGetResponse>;
  /**
   * Creates or updates a sync group.
   *
   */
  beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<SyncGroupsCreateOrUpdateResponse>,
      SyncGroupsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a sync group.
   *
   */
  beginCreateOrUpdateAndWait(): Promise<SyncGroupsCreateOrUpdateResponse>;
  /**
   * Deletes a sync group.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a sync group.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Updates a sync group.
   *
   */
  beginUpdate(): Promise<
    PollerLike<
      PollOperationState<SyncGroupsUpdateResponse>,
      SyncGroupsUpdateResponse
    >
  >;
  /**
   * Updates a sync group.
   *
   */
  beginUpdateAndWait(): Promise<SyncGroupsUpdateResponse>;
}
