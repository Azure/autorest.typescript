/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Metric,
  MetricDefinition,
  ElasticPool,
  ElasticPoolsGetResponse,
  ElasticPoolsCreateOrUpdateResponse,
  ElasticPoolsUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ElasticPools. */
export interface ElasticPools {
  /**
   * Returns elastic pool  metrics.
   *
   */
  listMetrics(): PagedAsyncIterableIterator<Metric>;
  /**
   * Returns elastic pool metric definitions.
   *
   */
  listMetricDefinitions(): PagedAsyncIterableIterator<MetricDefinition>;
  /**
   * Gets all elastic pools in a server.
   *
   */
  listByServer(): PagedAsyncIterableIterator<ElasticPool>;
  /**
   * Gets an elastic pool.
   *
   */
  get(): Promise<ElasticPoolsGetResponse>;
  /**
   * Creates or updates an elastic pool.
   *
   */
  beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<ElasticPoolsCreateOrUpdateResponse>,
      ElasticPoolsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates an elastic pool.
   *
   */
  beginCreateOrUpdateAndWait(): Promise<ElasticPoolsCreateOrUpdateResponse>;
  /**
   * Deletes an elastic pool.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes an elastic pool.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Updates an elastic pool.
   *
   */
  beginUpdate(): Promise<
    PollerLike<
      PollOperationState<ElasticPoolsUpdateResponse>,
      ElasticPoolsUpdateResponse
    >
  >;
  /**
   * Updates an elastic pool.
   *
   */
  beginUpdateAndWait(): Promise<ElasticPoolsUpdateResponse>;
  /**
   * Failovers an elastic pool.
   *
   */
  beginFailover(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Failovers an elastic pool.
   *
   */
  beginFailoverAndWait(): Promise<void>;
}
