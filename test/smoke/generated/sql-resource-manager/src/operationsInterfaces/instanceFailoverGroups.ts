/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  InstanceFailoverGroup,
  InstanceFailoverGroupsGetResponse,
  InstanceFailoverGroupsCreateOrUpdateResponse,
  InstanceFailoverGroupsFailoverResponse,
  InstanceFailoverGroupsForceFailoverAllowDataLossResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a InstanceFailoverGroups. */
export interface InstanceFailoverGroups {
  /**
   * Lists the failover groups in a location.
   *
   */
  listByLocation(): PagedAsyncIterableIterator<InstanceFailoverGroup>;
  /**
   * Gets a failover group.
   *
   */
  get(): Promise<InstanceFailoverGroupsGetResponse>;
  /**
   * Creates or updates a failover group.
   *
   */
  beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<InstanceFailoverGroupsCreateOrUpdateResponse>,
      InstanceFailoverGroupsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a failover group.
   *
   */
  beginCreateOrUpdateAndWait(): Promise<
    InstanceFailoverGroupsCreateOrUpdateResponse
  >;
  /**
   * Deletes a failover group.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a failover group.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Fails over from the current primary managed instance to this managed instance.
   *
   */
  beginFailover(): Promise<
    PollerLike<
      PollOperationState<InstanceFailoverGroupsFailoverResponse>,
      InstanceFailoverGroupsFailoverResponse
    >
  >;
  /**
   * Fails over from the current primary managed instance to this managed instance.
   *
   */
  beginFailoverAndWait(): Promise<InstanceFailoverGroupsFailoverResponse>;
  /**
   * Fails over from the current primary managed instance to this managed instance. This operation might
   * result in data loss.
   *
   */
  beginForceFailoverAllowDataLoss(): Promise<
    PollerLike<
      PollOperationState<
        InstanceFailoverGroupsForceFailoverAllowDataLossResponse
      >,
      InstanceFailoverGroupsForceFailoverAllowDataLossResponse
    >
  >;
  /**
   * Fails over from the current primary managed instance to this managed instance. This operation might
   * result in data loss.
   *
   */
  beginForceFailoverAllowDataLossAndWait(): Promise<
    InstanceFailoverGroupsForceFailoverAllowDataLossResponse
  >;
}
