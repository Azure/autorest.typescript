/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Server,
  ServersGetResponse,
  ServersCreateOrUpdateResponse,
  ServersUpdateResponse,
  ServersImportDatabaseResponse,
  ServersCheckNameAvailabilityResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Servers. */
export interface Servers {
  /**
   * Gets a list of servers in a resource groups.
   *
   */
  listByResourceGroup(): PagedAsyncIterableIterator<Server>;
  /**
   * Gets a list of all servers in the subscription.
   *
   */
  list(): PagedAsyncIterableIterator<Server>;
  /**
   * Gets a server.
   *
   */
  get(): Promise<ServersGetResponse>;
  /**
   * Creates or updates a server.
   *
   */
  beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<ServersCreateOrUpdateResponse>,
      ServersCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a server.
   *
   */
  beginCreateOrUpdateAndWait(): Promise<ServersCreateOrUpdateResponse>;
  /**
   * Deletes a server.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a server.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Updates a server.
   *
   */
  beginUpdate(): Promise<
    PollerLike<PollOperationState<ServersUpdateResponse>, ServersUpdateResponse>
  >;
  /**
   * Updates a server.
   *
   */
  beginUpdateAndWait(): Promise<ServersUpdateResponse>;
  /**
   * Imports a bacpac into a new database.
   *
   */
  beginImportDatabase(): Promise<
    PollerLike<
      PollOperationState<ServersImportDatabaseResponse>,
      ServersImportDatabaseResponse
    >
  >;
  /**
   * Imports a bacpac into a new database.
   *
   */
  beginImportDatabaseAndWait(): Promise<ServersImportDatabaseResponse>;
  /**
   * Determines whether a resource can be created with the specified name.
   *
   */
  checkNameAvailability(): Promise<ServersCheckNameAvailabilityResponse>;
}
