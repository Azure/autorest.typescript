/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import { LROOperationState } from "../lro";
import { PollerLike } from "@azure/core-lro";
import {
  VulnerabilityAssessmentScanRecord,
  VulnerabilityAssessmentName,
  ManagedDatabaseVulnerabilityAssessmentScansGetResponse,
  ManagedDatabaseVulnerabilityAssessmentScansExportResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ManagedDatabaseVulnerabilityAssessmentScans. */
export interface ManagedDatabaseVulnerabilityAssessmentScans {
  /**
   * Lists the vulnerability assessment scans of a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param options The options parameters.
   */
  listByDatabase(
    resourceGroupName: string,
    managedInstanceName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<VulnerabilityAssessmentScanRecord>;
  /**
   * Gets a vulnerability assessment scan record of a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    managedInstanceName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ManagedDatabaseVulnerabilityAssessmentScansGetResponse>;
  /**
   * Executes a Vulnerability Assessment database scan.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param options The options parameters.
   */
  initiateScan(
    resourceGroupName: string,
    managedInstanceName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<LROOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Convert an existing scan result to a human readable format. If already exists nothing happens
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the scanned database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id.
   * @param options The options parameters.
   */
  export(
    resourceGroupName: string,
    managedInstanceName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ManagedDatabaseVulnerabilityAssessmentScansExportResponse>;
}
