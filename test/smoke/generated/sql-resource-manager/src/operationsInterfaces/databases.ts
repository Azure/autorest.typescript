/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import { LROOperationState } from "../lro";
import { PollerLike } from "@azure/core-lro";
import {
  Metric,
  MetricDefinition,
  Database,
  ImportRequest,
  DatabasesImportResponse,
  ImportExtensionRequest,
  ExtensionName,
  DatabasesCreateImportOperationResponse,
  ExportRequest,
  DatabasesExportResponse,
  DatabasesGetResponse,
  DatabasesCreateOrUpdateResponse,
  DatabaseUpdate,
  DatabasesUpdateResponse,
  DatabasesPauseResponse,
  DatabasesResumeResponse,
  ResourceMoveDefinition,
  DatabasesFailoverOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Databases. */
export interface Databases {
  /**
   * Returns database metrics.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param filter An OData filter expression that describes a subset of metrics to return.
   * @param options The options parameters.
   */
  listMetrics(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    filter: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Metric>;
  /**
   * Returns database metric definitions.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param options The options parameters.
   */
  listMetricDefinitions(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<MetricDefinition>;
  /**
   * Gets a list of databases.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param options The options parameters.
   */
  listByServer(
    resourceGroupName: string,
    serverName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Database>;
  /**
   * Gets a list of databases in an elastic pool.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param elasticPoolName The name of the elastic pool.
   * @param options The options parameters.
   */
  listByElasticPool(
    resourceGroupName: string,
    serverName: string,
    elasticPoolName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Database>;
  /**
   * Imports a bacpac into a new database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param parameters The required parameters for importing a Bacpac into a database.
   * @param options The options parameters.
   */
  import(
    resourceGroupName: string,
    serverName: string,
    parameters: ImportRequest,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<
      LROOperationState<DatabasesImportResponse>,
      DatabasesImportResponse
    >
  >;
  /**
   * Creates an import operation that imports a bacpac into an existing database. The existing database
   * must be empty.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database to import into
   * @param extensionName The name of the operation to perform
   * @param parameters The required parameters for importing a Bacpac into a database.
   * @param options The options parameters.
   */
  createImportOperation(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    extensionName: ExtensionName,
    parameters: ImportExtensionRequest,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<
      LROOperationState<DatabasesCreateImportOperationResponse>,
      DatabasesCreateImportOperationResponse
    >
  >;
  /**
   * Exports a database to a bacpac.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database to be exported.
   * @param parameters The required parameters for exporting a database.
   * @param options The options parameters.
   */
  export(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    parameters: ExportRequest,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<
      LROOperationState<DatabasesExportResponse>,
      DatabasesExportResponse
    >
  >;
  /**
   * Gets a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DatabasesGetResponse>;
  /**
   * Creates a new database or updates an existing database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param parameters The requested database resource state.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    parameters: Database,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<
      LROOperationState<DatabasesCreateOrUpdateResponse>,
      DatabasesCreateOrUpdateResponse
    >
  >;
  /**
   * Deletes the database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<LROOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Updates an existing database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param parameters The requested database resource state.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    parameters: DatabaseUpdate,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<
      LROOperationState<DatabasesUpdateResponse>,
      DatabasesUpdateResponse
    >
  >;
  /**
   * Pauses a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database to be paused.
   * @param options The options parameters.
   */
  pause(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<
      LROOperationState<DatabasesPauseResponse>,
      DatabasesPauseResponse
    >
  >;
  /**
   * Resumes a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database to be resumed.
   * @param options The options parameters.
   */
  resume(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<
      LROOperationState<DatabasesResumeResponse>,
      DatabasesResumeResponse
    >
  >;
  /**
   * Upgrades a data warehouse.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database to be upgraded.
   * @param options The options parameters.
   */
  upgradeDataWarehouse(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<LROOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Renames a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database to rename.
   * @param parameters The resource move definition for renaming this database.
   * @param options The options parameters.
   */
  rename(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    parameters: ResourceMoveDefinition,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse>;
  /**
   * Failovers a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database to failover.
   * @param options The options parameters.
   */
  failover(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    options?: DatabasesFailoverOptionalParams
  ): Promise<
    PollerLike<LROOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
}
