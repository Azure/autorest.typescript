/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Metric,
  MetricDefinition,
  Database,
  DatabasesGetResponse,
  DatabasesCreateOrUpdateResponse,
  DatabasesUpdateResponse,
  DatabasesPauseResponse,
  DatabasesResumeResponse,
  DatabasesImportResponse,
  DatabasesExportResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Databases. */
export interface Databases {
  /**
   * Returns database metrics.
   *
   */
  listMetrics(): PagedAsyncIterableIterator<Metric>;
  /**
   * Returns database metric definitions.
   *
   */
  listMetricDefinitions(): PagedAsyncIterableIterator<MetricDefinition>;
  /**
   * Gets a list of databases.
   *
   */
  listByServer(): PagedAsyncIterableIterator<Database>;
  /**
   * Gets a list of databases in an elastic pool.
   *
   */
  listByElasticPool(): PagedAsyncIterableIterator<Database>;
  /**
   * Gets a list of inaccessible databases in a logical server
   *
   */
  listInaccessibleByServer(): PagedAsyncIterableIterator<Database>;
  /**
   * Gets a database.
   *
   */
  get(): Promise<DatabasesGetResponse>;
  /**
   * Creates a new database or updates an existing database.
   *
   */
  beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<DatabasesCreateOrUpdateResponse>,
      DatabasesCreateOrUpdateResponse
    >
  >;
  /**
   * Creates a new database or updates an existing database.
   *
   */
  beginCreateOrUpdateAndWait(): Promise<DatabasesCreateOrUpdateResponse>;
  /**
   * Deletes the database.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes the database.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Updates an existing database.
   *
   */
  beginUpdate(): Promise<
    PollerLike<
      PollOperationState<DatabasesUpdateResponse>,
      DatabasesUpdateResponse
    >
  >;
  /**
   * Updates an existing database.
   *
   */
  beginUpdateAndWait(): Promise<DatabasesUpdateResponse>;
  /**
   * Failovers a database.
   *
   */
  beginFailover(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Failovers a database.
   *
   */
  beginFailoverAndWait(): Promise<void>;
  /**
   * Pauses a database.
   *
   */
  beginPause(): Promise<
    PollerLike<
      PollOperationState<DatabasesPauseResponse>,
      DatabasesPauseResponse
    >
  >;
  /**
   * Pauses a database.
   *
   */
  beginPauseAndWait(): Promise<DatabasesPauseResponse>;
  /**
   * Resumes a database.
   *
   */
  beginResume(): Promise<
    PollerLike<
      PollOperationState<DatabasesResumeResponse>,
      DatabasesResumeResponse
    >
  >;
  /**
   * Resumes a database.
   *
   */
  beginResumeAndWait(): Promise<DatabasesResumeResponse>;
  /**
   * Upgrades a data warehouse.
   *
   */
  beginUpgradeDataWarehouse(): Promise<
    PollerLike<PollOperationState<void>, void>
  >;
  /**
   * Upgrades a data warehouse.
   *
   */
  beginUpgradeDataWarehouseAndWait(): Promise<void>;
  /**
   * Renames a database.
   *
   */
  rename(): Promise<void>;
  /**
   * Imports a bacpac into a new database.
   *
   */
  beginImport(): Promise<
    PollerLike<
      PollOperationState<DatabasesImportResponse>,
      DatabasesImportResponse
    >
  >;
  /**
   * Imports a bacpac into a new database.
   *
   */
  beginImportAndWait(): Promise<DatabasesImportResponse>;
  /**
   * Exports a database.
   *
   */
  beginExport(): Promise<
    PollerLike<
      PollOperationState<DatabasesExportResponse>,
      DatabasesExportResponse
    >
  >;
  /**
   * Exports a database.
   *
   */
  beginExportAndWait(): Promise<DatabasesExportResponse>;
}
