/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const text: coreHttp.OperationParameter = {
  parameterPath: "text",
  mapper: {
    serializedName: "text",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: { name: "Composite", className: "BreakSentenceTextInput" }
      }
    }
  }
};

export const endpoint: coreHttp.OperationURLParameter = {
  parameterPath: "endpoint",
  mapper: {
    serializedName: "Endpoint",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "3.0",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const language: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "language"],
  mapper: {
    serializedName: "Language",
    type: {
      name: "String"
    }
  }
};

export const script: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "script"],
  mapper: {
    serializedName: "Script",
    type: {
      name: "String"
    }
  }
};

export const xClientTraceId: coreHttp.OperationParameter = {
  parameterPath: ["options", "xClientTraceId"],
  mapper: {
    serializedName: "X-ClientTraceId",
    type: {
      name: "String"
    }
  }
};

export const text1: coreHttp.OperationParameter = {
  parameterPath: "text",
  mapper: {
    serializedName: "text",
    required: true,
    type: {
      name: "Sequence",
      element: { type: { name: "Composite", className: "DetectTextInput" } }
    }
  }
};

export const text2: coreHttp.OperationParameter = {
  parameterPath: "text",
  mapper: {
    serializedName: "text",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: { name: "Composite", className: "DictionaryLookupTextInput" }
      }
    }
  }
};

export const from: coreHttp.OperationQueryParameter = {
  parameterPath: "from",
  mapper: {
    serializedName: "from",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const to: coreHttp.OperationQueryParameter = {
  parameterPath: "to",
  mapper: {
    serializedName: "to",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const text3: coreHttp.OperationParameter = {
  parameterPath: "text",
  mapper: {
    serializedName: "text",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: { name: "Composite", className: "DictionaryExampleTextInput" }
      }
    }
  }
};

export const to1: coreHttp.OperationQueryParameter = {
  parameterPath: "to",
  mapper: {
    serializedName: "to",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const scope: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "scope"],
  mapper: {
    constraints: {
      MaxItems: 3
    },
    serializedName: "scope",
    type: {
      name: "Sequence",
      element: { type: { name: "String" }, serializedName: "Get1ItemsItem" }
    }
  }
};

export const acceptLanguage: coreHttp.OperationParameter = {
  parameterPath: ["options", "acceptLanguage"],
  mapper: {
    serializedName: "Accept-Language",
    type: {
      name: "String"
    }
  }
};

export const text4: coreHttp.OperationParameter = {
  parameterPath: "text",
  mapper: {
    serializedName: "text",
    required: true,
    type: {
      name: "Sequence",
      element: { type: { name: "Composite", className: "TranslateTextInput" } }
    }
  }
};

export const from1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "from"],
  mapper: {
    serializedName: "from",
    type: {
      name: "String"
    }
  }
};

export const to2: coreHttp.OperationQueryParameter = {
  parameterPath: "to",
  mapper: {
    serializedName: "to",
    required: true,
    type: {
      name: "Sequence",
      element: { type: { name: "String" }, serializedName: "Post2ItemsItem" }
    }
  }
};

export const textType: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "textType"],
  mapper: {
    serializedName: "textType",
    type: {
      name: "String"
    }
  }
};

export const category: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "category"],
  mapper: {
    serializedName: "category",
    type: {
      name: "String"
    }
  }
};

export const profanityAction: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "profanityAction"],
  mapper: {
    serializedName: "profanityAction",
    type: {
      name: "String"
    }
  }
};

export const profanityMarker: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "profanityMarker"],
  mapper: {
    serializedName: "profanityMarker",
    type: {
      name: "String"
    }
  }
};

export const includeAlignment: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "includeAlignment"],
  mapper: {
    serializedName: "includeAlignment",
    type: {
      name: "Boolean"
    }
  }
};

export const includeSentenceLength: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "includeSentenceLength"],
  mapper: {
    serializedName: "includeSentenceLength",
    type: {
      name: "Boolean"
    }
  }
};

export const suggestedFrom: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "suggestedFrom"],
  mapper: {
    serializedName: "suggestedFrom",
    type: {
      name: "String"
    }
  }
};

export const fromScript: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "fromScript"],
  mapper: {
    serializedName: "fromScript",
    type: {
      name: "String"
    }
  }
};

export const toScript: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "toScript"],
  mapper: {
    serializedName: "toScript",
    type: {
      name: "Sequence",
      element: { type: { name: "String" }, serializedName: "Post11ItemsItem" }
    }
  }
};

export const texts: coreHttp.OperationParameter = {
  parameterPath: "texts",
  mapper: {
    serializedName: "texts",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: { name: "Composite", className: "TransliterateTextInput" }
      }
    }
  }
};

export const language1: coreHttp.OperationQueryParameter = {
  parameterPath: "language",
  mapper: {
    serializedName: "language",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const fromScript1: coreHttp.OperationQueryParameter = {
  parameterPath: "fromScript",
  mapper: {
    serializedName: "fromScript",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const toScript1: coreHttp.OperationQueryParameter = {
  parameterPath: "toScript",
  mapper: {
    serializedName: "toScript",
    required: true,
    type: {
      name: "String"
    }
  }
};
