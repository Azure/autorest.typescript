/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GalleryAdminClient } from "../galleryAdminClient";
import {
  GalleryItemsListResponse,
  GalleryItemUriPayload,
  GalleryItemsCreateResponse,
  GalleryItemsGetResponse
} from "../models";

/**
 * Class representing a GalleryItems.
 */
export class GalleryItems {
  private readonly client: GalleryAdminClient;

  /**
   * Initialize a new instance of the class GalleryItems class.
   * @param client Reference to the service client
   */
  constructor(client: GalleryAdminClient) {
    this.client = client;
  }

  /**
   * Lists gallery items.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<GalleryItemsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<GalleryItemsListResponse>;
  }

  /**
   * Uploads a provider gallery item to the storage.
   * @param galleryItemUriPayload The URI to the gallery item JSON file.
   * @param options The options parameters.
   */
  create(
    galleryItemUriPayload: GalleryItemUriPayload,
    options?: coreHttp.OperationOptions
  ): Promise<GalleryItemsCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { galleryItemUriPayload, options: operationOptions },
      createOperationSpec
    ) as Promise<GalleryItemsCreateResponse>;
  }

  /**
   * Get a specific gallery item.
   * @param galleryItemName Identity of the gallery item. Includes publisher name, item name, and may
   *                        include version separated by period character.
   * @param options The options parameters.
   */
  get(
    galleryItemName: string,
    options?: coreHttp.OperationOptions
  ): Promise<GalleryItemsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { galleryItemName, options: operationOptions },
      getOperationSpec
    ) as Promise<GalleryItemsGetResponse>;
  }

  /**
   * Delete a specific gallery item.
   * @param galleryItemName Identity of the gallery item. Includes publisher name, item name, and may
   *                        include version separated by period character.
   * @param options The options parameters.
   */
  delete(
    galleryItemName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { galleryItemName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/microsoft.gallery.admin/galleryItems",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GalleryItemList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/microsoft.gallery.admin/galleryItems",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GalleryItem
    }
  },
  requestBody: Parameters.galleryItemUriPayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/microsoft.gallery.admin/galleryItems/{galleryItemName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GalleryItem
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.galleryItemName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/microsoft.gallery.admin/galleryItems/{galleryItemName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.galleryItemName
  ],
  serializer
};
