/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * List of operations.
 */
export interface OperationList {
  /**
   * List of operations.
   */
  value?: Operation[];
}

/**
 * Represents a REST operation.
 */
export interface Operation {
  /**
   * Name of the REST operation.
   */
  name?: string;
  /**
   * Origin of the REST operation.
   */
  origin?: string;
  /**
   * Information about the REST operation.
   */
  display?: OperationDisplayDefinition;
}

/**
 * Information about the REST operation.
 */
export interface OperationDisplayDefinition {
  /**
   * Description of the REST operation.
   */
  description?: string;
  /**
   * Type of REST operation.
   */
  operation?: string;
  /**
   * Provider of the REST operation.
   */
  provider?: string;
  /**
   * Resource returned by the REST operation.
   */
  resource?: string;
}

/**
 * List of gallery items.
 */
export interface GalleryItemList {
  /**
   * List of gallery items.
   */
  value?: GalleryItem[];
}

/**
 * Base Resource Object.
 */
export interface Resource {
  /**
   * URI of the resource.
   */
  readonly id?: string;
  /**
   * Name of the resource.
   */
  readonly name?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Location of the resource.
   */
  readonly location?: string;
  /**
   * List of key-value pairs.
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * Properties of a gallery item.
 */
export type GalleryItem = Resource & {
  /**
   * Identity of the gallery item.
   */
  identity?: string;
  /**
   * The publisher of the gallery item.
   */
  publisher?: string;
  /**
   * Display name of the publisher.
   */
  publisherDisplayName?: string;
  /**
   * The display name for the gallery item, for the locale of the request.
   */
  itemName?: string;
  /**
   * Displayed name in the portal.
   */
  itemDisplayName?: string;
  /**
   * The version identifier of the gallery item, in Major.Minor.Build format.
   */
  version?: string;
  /**
   * Short summary of the gallery item.
   */
  summary?: string;
  /**
   * Long summary of the gallery item.
   */
  longSummary?: string;
  /**
   * The description of the gallery item.
   */
  description?: string;
  /**
   * The URL of the view definition object that defines the UI information that is used when an instance of the gallery item resource definition is created.
   */
  uiDefinitionUri?: string;
  /**
   * The date and time that the gallery item was created.
   */
  createdTime?: Date;
  /**
   * Last update time of gallery item.
   */
  changedTime?: Date;
  /**
   * Marketing materials for the gallery item.
   */
  marketingMaterial?: MarketingMaterial;
  /**
   * Describes the type of the gallery item, either GalleryItem or ItemGroup.
   */
  itemType?: GalleryItemMenuReferenceType;
  /**
   * List of category IDs the gallery item belongs to.
   */
  readonly categoryIds?: string[];
  /**
   * List of screenshot image URIs provided for the item.
   */
  readonly screenshotUris?: string[];
  /**
   * Links provided for the item.
   */
  readonly links?: LinkProperties[];
  /**
   * List of filters for the gallery item.
   */
  readonly filters?: Filter[];
  /**
   * URIs to icon files.
   */
  readonly iconFileUris?: GalleryItemPropertiesIconFileUris;
  /**
   * List of artifacts for the gallery item.
   */
  readonly artifacts?: Artifact[];
  /**
   * Custom item metadata.
   */
  readonly metadata?: OpenProperty;
  /**
   * List of properties provided for the gallery item.
   */
  readonly properties?: { [propertyName: string]: string };
  /**
   * List of images.
   */
  readonly images?: ImageGroup[];
  /**
   * List of products.
   */
  readonly products?: Product[];
  /**
   * Resource group name the gallery item belongs too.
   */
  resourceGroupName?: string;
  /**
   * Definition template for gallery item.
   */
  readonly definitionTemplates?: DefinitionTemplates;
  /**
   * List of additional properties provided for the item.
   */
  readonly additionalProperties?: { [propertyName: string]: string };
};

/**
 * Marketing material for a gallery item.
 */
export interface MarketingMaterial {
  /**
   * Path to the marketing site.
   */
  path?: string;
  /**
   * URI to educational material.
   */
  learnUri?: string;
}

/**
 * Represents a link item read from the gallery item package.
 */
export interface LinkProperties {
  /**
   * ID of the link.
   */
  id?: string;
  /**
   * Display name of the link.
   */
  displayName?: string;
  /**
   * URI of the link.
   */
  uri?: string;
}

/**
 * Represents a filter item.
 */
export interface Filter {
  /**
   * Filter type.
   */
  type?: string;
  /**
   * Filter value.
   */
  value?: string;
}

/**
 * URIs to icon files.
 */
export interface GalleryItemPropertiesIconFileUris {
  /**
   * URI to the small icon.
   */
  small?: string;
  /**
   * URI to the medium icon.
   */
  medium?: string;
  /**
   * URI to the large icon.
   */
  large?: string;
  /**
   * URI to the wide icon.
   */
  wide?: string;
  /**
   * URI to the hero icon.
   */
  hero?: string;
}

/**
 * Represents gallery item artifacts.
 */
export interface Artifact {
  /**
   * Name of the artifact.
   */
  name?: string;
  /**
   * URI to the artifact.
   */
  uri?: string;
  /**
   * Artifact type.
   */
  type?: ArtifactType;
}

/**
 * Open type used to define dynamic properties.
 */
export interface OpenProperty {
  /**
   * Dictionary of dynamic properties.
   */
  readonly properties?: { [propertyName: string]: any };
}

/**
 * Group of images.
 */
export interface ImageGroup {
  /**
   * Image group identifier.
   */
  context?: string;
  /**
   * List of images.
   */
  readonly items?: Image[];
}

/**
 * Represents an image item.
 */
export interface Image {
  /**
   * ID of the image.
   */
  id?: string;
  /**
   * URI to the image.
   */
  uri?: string;
  /**
   * Type of image.
   */
  type?: string;
}

/**
 * Represents a product item read from the gallery item package.
 */
export interface Product {
  /**
   * Display name of the product.
   */
  displayName?: string;
  /**
   * Publisher display name of the product.
   */
  publisherDisplayName?: string;
  /**
   * URI to the pricing details of the product.
   */
  pricingDetailsUri?: string;
  /**
   * Offer details of the product.
   */
  offerDetails?: OfferDetails;
  /**
   * Legal terms of the product.
   */
  legalTerms?: string;
  /**
   * Privacy policy of the product.
   */
  privacyPolicy?: string;
  /**
   * URI to the legal terms of the product.
   */
  legalTermsUri?: string;
  /**
   * URI to the privacy policy of the product.
   */
  privacyPolicyUri?: string;
}

/**
 * Represents a offer details item read from the gallery item package.
 */
export interface OfferDetails {
  /**
   * Publisher identifier.
   */
  publisherId?: string;
  /**
   * Offer identifier.
   */
  offerId?: string;
  /**
   * List of plans available for the offer.
   */
  readonly plans?: Plan[];
}

/**
 * Represents a plan item read from the gallery item package.
 */
export interface Plan {
  /**
   * Plan identifier.
   */
  planId?: string;
  /**
   * Display name of the plan.
   */
  displayName?: string;
  /**
   * Summary of the plan.
   */
  summary?: string;
  /**
   * Description of the plan.
   */
  description?: string;
}

/**
 * Holds UI definition file Uri and deployment template file URIs.
 */
export interface DefinitionTemplates {
  /**
   * UI definition file URI.
   */
  uiDefinitionFileUri?: string;
  /**
   * Default deployment template ID.
   */
  defaultDeploymentTemplateId?: string;
  /**
   * List of key-value containing the deployment template file IDs defined in the package manifest.
   */
  readonly deploymentTemplateFileUris?: { [propertyName: string]: string };
  /**
   * List of key-value pairs containing the deployment fragment file IDs defined in the package manifest.
   */
  readonly deploymentFragmentFileUris?: { [propertyName: string]: string };
}

/**
 * Location of gallery item payload.
 */
export interface GalleryItemUriPayload {
  /**
   * URI for your gallery package that has already been uploaded online.
   */
  galleryItemUri?: string;
}

/**
 * Defines values for GalleryItemMenuReferenceType.
 */
export type GalleryItemMenuReferenceType = "GalleryItem" | "ItemGroup";
/**
 * Defines values for ArtifactType.
 */
export type ArtifactType = "template" | "fragment" | "custom" | "metadata";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type GalleryItemsListResponse = GalleryItemList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryItemList;
  };
};

/**
 * Contains response data for the create operation.
 */
export type GalleryItemsCreateResponse = GalleryItem & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryItem;
  };
};

/**
 * Contains response data for the get operation.
 */
export type GalleryItemsGetResponse = GalleryItem & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryItem;
  };
};

/**
 * Optional parameters.
 */
export interface GalleryAdminClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
