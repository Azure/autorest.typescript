/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { ApiManagementClientContext } from "./apiManagementClientContext";

class ApiManagementClient extends ApiManagementClientContext {
  /**
   * Initializes a new instance of the ApiManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    options?: Models.ApiManagementClientOptionalParams
  ) {
    super(credentials, options);
    this.policy = new operations.Policy(this);
    this.policySnippets = new operations.PolicySnippets(this);
    this.regions = new operations.Regions(this);
    this.api = new operations.Api(this);
    this.apiOperation = new operations.ApiOperation(this);
    this.apiOperationPolicy = new operations.ApiOperationPolicy(this);
    this.apiProduct = new operations.ApiProduct(this);
    this.apiPolicy = new operations.ApiPolicy(this);
    this.apiSchema = new operations.ApiSchema(this);
    this.apiExport = new operations.ApiExport(this);
    this.authorizationServer = new operations.AuthorizationServer(this);
    this.backend = new operations.Backend(this);
    this.certificate = new operations.Certificate(this);
    this.emailTemplate = new operations.EmailTemplate(this);
    this.group = new operations.Group(this);
    this.groupUser = new operations.GroupUser(this);
    this.identityProvider = new operations.IdentityProvider(this);
    this.logger = new operations.Logger(this);
    this.openIdConnectProvider = new operations.OpenIdConnectProvider(this);
    this.signInSettings = new operations.SignInSettings(this);
    this.signUpSettings = new operations.SignUpSettings(this);
    this.delegationSettings = new operations.DelegationSettings(this);
    this.product = new operations.Product(this);
    this.productApi = new operations.ProductApi(this);
    this.productGroup = new operations.ProductGroup(this);
    this.productSubscriptions = new operations.ProductSubscriptions(this);
    this.productPolicy = new operations.ProductPolicy(this);
    this.property = new operations.Property(this);
    this.quotaByCounterKeys = new operations.QuotaByCounterKeys(this);
    this.quotaByPeriodKeys = new operations.QuotaByPeriodKeys(this);
    this.reports = new operations.Reports(this);
    this.subscription = new operations.Subscription(this);
    this.tenantAccess = new operations.TenantAccess(this);
    this.tenantAccessGit = new operations.TenantAccessGit(this);
    this.tenantConfiguration = new operations.TenantConfiguration(this);
    this.user = new operations.User(this);
    this.userGroup = new operations.UserGroup(this);
    this.userSubscription = new operations.UserSubscription(this);
    this.userIdentities = new operations.UserIdentities(this);
  }

  policy: operations.Policy;
  policySnippets: operations.PolicySnippets;
  regions: operations.Regions;
  api: operations.Api;
  apiOperation: operations.ApiOperation;
  apiOperationPolicy: operations.ApiOperationPolicy;
  apiProduct: operations.ApiProduct;
  apiPolicy: operations.ApiPolicy;
  apiSchema: operations.ApiSchema;
  apiExport: operations.ApiExport;
  authorizationServer: operations.AuthorizationServer;
  backend: operations.Backend;
  certificate: operations.Certificate;
  emailTemplate: operations.EmailTemplate;
  group: operations.Group;
  groupUser: operations.GroupUser;
  identityProvider: operations.IdentityProvider;
  logger: operations.Logger;
  openIdConnectProvider: operations.OpenIdConnectProvider;
  signInSettings: operations.SignInSettings;
  signUpSettings: operations.SignUpSettings;
  delegationSettings: operations.DelegationSettings;
  product: operations.Product;
  productApi: operations.ProductApi;
  productGroup: operations.ProductGroup;
  productSubscriptions: operations.ProductSubscriptions;
  productPolicy: operations.ProductPolicy;
  property: operations.Property;
  quotaByCounterKeys: operations.QuotaByCounterKeys;
  quotaByPeriodKeys: operations.QuotaByPeriodKeys;
  reports: operations.Reports;
  subscription: operations.Subscription;
  tenantAccess: operations.TenantAccess;
  tenantAccessGit: operations.TenantAccessGit;
  tenantConfiguration: operations.TenantConfiguration;
  user: operations.User;
  userGroup: operations.UserGroup;
  userSubscription: operations.UserSubscription;
  userIdentities: operations.UserIdentities;
}

// Operation Specifications

export {
  ApiManagementClient,
  ApiManagementClientContext,
  Models as ApiManagementModels,
  Mappers as ApiManagementMappers
};
export * from "./operations";
