/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClient } from "../apiManagementClient";
import {
  EmailTemplateListOptionalParams,
  EmailTemplateListResponse,
  TemplateName,
  EmailTemplateGetResponse,
  EmailTemplateUpdateParameters,
  EmailTemplateCreateOrUpdateResponse,
  EmailTemplateListNextOptionalParams,
  EmailTemplateListNextResponse
} from "../models";

/**
 * Class representing a EmailTemplate.
 */
export class EmailTemplate {
  private readonly client: ApiManagementClient;

  /**
   * Initialize a new instance of the class EmailTemplate class.
   * @param client Reference to the service client
   */
  constructor(client: ApiManagementClient) {
    this.client = client;
  }

  /**
   * Lists a collection of properties defined within a service instance.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param options The options parameters.
   */
  list(
    apimBaseUrl: string,
    options?: EmailTemplateListOptionalParams
  ): Promise<EmailTemplateListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, options: operationOptions },
      listOperationSpec
    ) as Promise<EmailTemplateListResponse>;
  }

  /**
   * Gets the details of the email template specified by its identifier.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param templateName Email Template Name Identifier.
   * @param options The options parameters.
   */
  get(
    apimBaseUrl: string,
    templateName: TemplateName,
    options?: coreHttp.OperationOptions
  ): Promise<EmailTemplateGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, templateName, options: operationOptions },
      getOperationSpec
    ) as Promise<EmailTemplateGetResponse>;
  }

  /**
   * Updates an Email Template.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param templateName Email Template Name Identifier.
   * @param parameters Email Template update parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    apimBaseUrl: string,
    templateName: TemplateName,
    parameters: EmailTemplateUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<EmailTemplateCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, templateName, parameters, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<EmailTemplateCreateOrUpdateResponse>;
  }

  /**
   * Updates the specific Email Template.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param templateName Email Template Name Identifier.
   * @param parameters Update parameters.
   * @param options The options parameters.
   */
  update(
    apimBaseUrl: string,
    templateName: TemplateName,
    parameters: EmailTemplateUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, templateName, parameters, options: operationOptions },
      updateOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Reset the Email Template to default template provided by the API Management service instance.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param templateName Email Template Name Identifier.
   * @param ifMatch The entity state (Etag) version of the Email Template to delete. A value of "*" can
   *                be used for If-Match to unconditionally apply the operation.
   * @param options The options parameters.
   */
  delete(
    apimBaseUrl: string,
    templateName: TemplateName,
    ifMatch: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, templateName, ifMatch, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListNext
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    apimBaseUrl: string,
    nextLink: string,
    options?: EmailTemplateListNextOptionalParams
  ): Promise<EmailTemplateListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<EmailTemplateListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/templates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EmailTemplateCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter6
  ],
  urlParameters: [Parameters.apimBaseUrl],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/templates/{templateName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EmailTemplateContract,
      headersMapper: Mappers.EmailTemplateGetHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.templateName],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path: "/templates/{templateName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.EmailTemplateContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.templateName],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/templates/{templateName}",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.templateName],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/templates/{templateName}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.templateName],
  headerParameters: [Parameters.ifMatch17],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EmailTemplateCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter6
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.nextLink],
  serializer
};
