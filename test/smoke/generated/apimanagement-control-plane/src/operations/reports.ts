/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClient } from "../apiManagementClient";
import {
  ReportsListByApiOptionalParams,
  ReportsListByApiResponse,
  ReportsListByUserOptionalParams,
  ReportsListByUserResponse,
  ReportsListByOperationOptionalParams,
  ReportsListByOperationResponse,
  ReportsListByProductOptionalParams,
  ReportsListByProductResponse,
  ReportsListByGeoOptionalParams,
  ReportsListByGeoResponse,
  ReportsListBySubscriptionOptionalParams,
  ReportsListBySubscriptionResponse,
  ReportsListByTimeOptionalParams,
  ReportsListByTimeResponse,
  ReportsListByRequestOptionalParams,
  ReportsListByRequestResponse,
  ReportsListByApiNextOptionalParams,
  ReportsListByApiNextResponse,
  ReportsListByUserNextOptionalParams,
  ReportsListByUserNextResponse,
  ReportsListByOperationNextOptionalParams,
  ReportsListByOperationNextResponse,
  ReportsListByProductNextOptionalParams,
  ReportsListByProductNextResponse,
  ReportsListByGeoNextOptionalParams,
  ReportsListByGeoNextResponse,
  ReportsListBySubscriptionNextOptionalParams,
  ReportsListBySubscriptionNextResponse,
  ReportsListByTimeNextOptionalParams,
  ReportsListByTimeNextResponse
} from "../models";

/**
 * Class representing a Reports.
 */
export class Reports {
  private readonly client: ApiManagementClient;

  /**
   * Initialize a new instance of the class Reports class.
   * @param client Reference to the service client
   */
  constructor(client: ApiManagementClient) {
    this.client = client;
  }

  /**
   * Lists report records by API.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param filter The filter to apply on the operation.
   * @param options The options parameters.
   */
  listByApi(
    apimBaseUrl: string,
    filter: string,
    options?: ReportsListByApiOptionalParams
  ): Promise<ReportsListByApiResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, filter, options: operationOptions },
      listByApiOperationSpec
    ) as Promise<ReportsListByApiResponse>;
  }

  /**
   * Lists report records by User.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param filter The filter to apply on the operation.
   * @param options The options parameters.
   */
  listByUser(
    apimBaseUrl: string,
    filter: string,
    options?: ReportsListByUserOptionalParams
  ): Promise<ReportsListByUserResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, filter, options: operationOptions },
      listByUserOperationSpec
    ) as Promise<ReportsListByUserResponse>;
  }

  /**
   * Lists report records by API Operations.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param filter The filter to apply on the operation.
   * @param options The options parameters.
   */
  listByOperation(
    apimBaseUrl: string,
    filter: string,
    options?: ReportsListByOperationOptionalParams
  ): Promise<ReportsListByOperationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, filter, options: operationOptions },
      listByOperationOperationSpec
    ) as Promise<ReportsListByOperationResponse>;
  }

  /**
   * Lists report records by Product.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param filter The filter to apply on the operation.
   * @param options The options parameters.
   */
  listByProduct(
    apimBaseUrl: string,
    filter: string,
    options?: ReportsListByProductOptionalParams
  ): Promise<ReportsListByProductResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, filter, options: operationOptions },
      listByProductOperationSpec
    ) as Promise<ReportsListByProductResponse>;
  }

  /**
   * Lists report records by geography.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param options The options parameters.
   */
  listByGeo(
    apimBaseUrl: string,
    options?: ReportsListByGeoOptionalParams
  ): Promise<ReportsListByGeoResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, options: operationOptions },
      listByGeoOperationSpec
    ) as Promise<ReportsListByGeoResponse>;
  }

  /**
   * Lists report records by subscription.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param options The options parameters.
   */
  listBySubscription(
    apimBaseUrl: string,
    options?: ReportsListBySubscriptionOptionalParams
  ): Promise<ReportsListBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, options: operationOptions },
      listBySubscriptionOperationSpec
    ) as Promise<ReportsListBySubscriptionResponse>;
  }

  /**
   * Lists report records by Time.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The
   *                 value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can
   *                 be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours,
   *                 minutes, seconds))
   * @param options The options parameters.
   */
  listByTime(
    apimBaseUrl: string,
    interval: string,
    options?: ReportsListByTimeOptionalParams
  ): Promise<ReportsListByTimeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, interval, options: operationOptions },
      listByTimeOperationSpec
    ) as Promise<ReportsListByTimeResponse>;
  }

  /**
   * Lists report records by Request.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param filter The filter to apply on the operation.
   * @param options The options parameters.
   */
  listByRequest(
    apimBaseUrl: string,
    filter: string,
    options?: ReportsListByRequestOptionalParams
  ): Promise<ReportsListByRequestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, filter, options: operationOptions },
      listByRequestOperationSpec
    ) as Promise<ReportsListByRequestResponse>;
  }

  /**
   * ListByApiNext
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param nextLink The nextLink from the previous successful call to the ListByApi method.
   * @param filter The filter to apply on the operation.
   * @param options The options parameters.
   */
  listByApiNext(
    apimBaseUrl: string,
    nextLink: string,
    filter: string,
    options?: ReportsListByApiNextOptionalParams
  ): Promise<ReportsListByApiNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, nextLink, filter, options: operationOptions },
      listByApiNextOperationSpec
    ) as Promise<ReportsListByApiNextResponse>;
  }

  /**
   * ListByUserNext
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param filter The filter to apply on the operation.
   * @param nextLink The nextLink from the previous successful call to the ListByUser method.
   * @param options The options parameters.
   */
  listByUserNext(
    apimBaseUrl: string,
    filter: string,
    nextLink: string,
    options?: ReportsListByUserNextOptionalParams
  ): Promise<ReportsListByUserNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, filter, nextLink, options: operationOptions },
      listByUserNextOperationSpec
    ) as Promise<ReportsListByUserNextResponse>;
  }

  /**
   * ListByOperationNext
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param filter The filter to apply on the operation.
   * @param nextLink The nextLink from the previous successful call to the ListByOperation method.
   * @param options The options parameters.
   */
  listByOperationNext(
    apimBaseUrl: string,
    filter: string,
    nextLink: string,
    options?: ReportsListByOperationNextOptionalParams
  ): Promise<ReportsListByOperationNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, filter, nextLink, options: operationOptions },
      listByOperationNextOperationSpec
    ) as Promise<ReportsListByOperationNextResponse>;
  }

  /**
   * ListByProductNext
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param nextLink The nextLink from the previous successful call to the ListByProduct method.
   * @param filter The filter to apply on the operation.
   * @param options The options parameters.
   */
  listByProductNext(
    apimBaseUrl: string,
    nextLink: string,
    filter: string,
    options?: ReportsListByProductNextOptionalParams
  ): Promise<ReportsListByProductNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, nextLink, filter, options: operationOptions },
      listByProductNextOperationSpec
    ) as Promise<ReportsListByProductNextResponse>;
  }

  /**
   * ListByGeoNext
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param nextLink The nextLink from the previous successful call to the ListByGeo method.
   * @param options The options parameters.
   */
  listByGeoNext(
    apimBaseUrl: string,
    nextLink: string,
    options?: ReportsListByGeoNextOptionalParams
  ): Promise<ReportsListByGeoNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, nextLink, options: operationOptions },
      listByGeoNextOperationSpec
    ) as Promise<ReportsListByGeoNextResponse>;
  }

  /**
   * ListBySubscriptionNext
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  listBySubscriptionNext(
    apimBaseUrl: string,
    nextLink: string,
    options?: ReportsListBySubscriptionNextOptionalParams
  ): Promise<ReportsListBySubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, nextLink, options: operationOptions },
      listBySubscriptionNextOperationSpec
    ) as Promise<ReportsListBySubscriptionNextResponse>;
  }

  /**
   * ListByTimeNext
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The
   *                 value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can
   *                 be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours,
   *                 minutes, seconds))
   * @param nextLink The nextLink from the previous successful call to the ListByTime method.
   * @param options The options parameters.
   */
  listByTimeNext(
    apimBaseUrl: string,
    interval: string,
    nextLink: string,
    options?: ReportsListByTimeNextOptionalParams
  ): Promise<ReportsListByTimeNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, interval, nextLink, options: operationOptions },
      listByTimeNextOperationSpec
    ) as Promise<ReportsListByTimeNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByApiOperationSpec: coreHttp.OperationSpec = {
  path: "/reports/byApi",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter14
  ],
  urlParameters: [Parameters.apimBaseUrl],
  serializer
};
const listByUserOperationSpec: coreHttp.OperationSpec = {
  path: "/reports/byUser",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter14
  ],
  urlParameters: [Parameters.apimBaseUrl],
  serializer
};
const listByOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/reports/byOperation",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter14
  ],
  urlParameters: [Parameters.apimBaseUrl],
  serializer
};
const listByProductOperationSpec: coreHttp.OperationSpec = {
  path: "/reports/byProduct",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter14
  ],
  urlParameters: [Parameters.apimBaseUrl],
  serializer
};
const listByGeoOperationSpec: coreHttp.OperationSpec = {
  path: "/reports/byGeo",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter15
  ],
  urlParameters: [Parameters.apimBaseUrl],
  serializer
};
const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path: "/reports/bySubscription",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter15
  ],
  urlParameters: [Parameters.apimBaseUrl],
  serializer
};
const listByTimeOperationSpec: coreHttp.OperationSpec = {
  path: "/reports/byTime",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter15,
    Parameters.interval
  ],
  urlParameters: [Parameters.apimBaseUrl],
  serializer
};
const listByRequestOperationSpec: coreHttp.OperationSpec = {
  path: "/reports/byRequest",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RequestReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter14
  ],
  urlParameters: [Parameters.apimBaseUrl],
  serializer
};
const listByApiNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter14
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.nextLink1],
  serializer
};
const listByUserNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter14
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.nextLink4],
  serializer
};
const listByOperationNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter14
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.nextLink5],
  serializer
};
const listByProductNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter14
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.nextLink3],
  serializer
};
const listByGeoNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter15
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.nextLink6],
  serializer
};
const listBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter15
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.nextLink7],
  serializer
};
const listByTimeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter15,
    Parameters.interval
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.nextLink8],
  serializer
};
