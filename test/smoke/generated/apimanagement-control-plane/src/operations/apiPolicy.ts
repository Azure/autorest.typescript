/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClient } from "../apiManagementClient";
import {
  ApiPolicyListByApiResponse,
  ApiPolicyGetResponse,
  PolicyContract,
  ApiPolicyCreateOrUpdateResponse
} from "../models";

/**
 * Class representing a ApiPolicy.
 */
export class ApiPolicy {
  private readonly client: ApiManagementClient;

  /**
   * Initialize a new instance of the class ApiPolicy class.
   * @param client Reference to the service client
   */
  constructor(client: ApiManagementClient) {
    this.client = client;
  }

  /**
   * Get the policy configuration at the API level.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param apiId API identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  listByApi(
    apimBaseUrl: string,
    apiId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApiPolicyListByApiResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, apiId, options: operationOptions },
      listByApiOperationSpec
    ) as Promise<ApiPolicyListByApiResponse>;
  }

  /**
   * Get the policy configuration at the API level.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param apiId API identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  get(
    apimBaseUrl: string,
    apiId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApiPolicyGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, apiId, options: operationOptions },
      getOperationSpec
    ) as Promise<ApiPolicyGetResponse>;
  }

  /**
   * Creates or updates policy configuration for the API.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param parameters The policy contents to apply.
   * @param apiId API identifier. Must be unique in the current API Management service instance.
   * @param ifMatch The entity state (Etag) version of the Api Policy to update. A value of "*" can be
   *                used for If-Match to unconditionally apply the operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    apimBaseUrl: string,
    parameters: PolicyContract,
    apiId: string,
    ifMatch: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApiPolicyCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, parameters, apiId, ifMatch, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<ApiPolicyCreateOrUpdateResponse>;
  }

  /**
   * Deletes the policy configuration at the Api.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param apiId API identifier. Must be unique in the current API Management service instance.
   * @param ifMatch The entity state (Etag) version of the Api policy to update. A value of "*" can be
   *                used for If-Match to unconditionally apply the operation.
   * @param options The options parameters.
   */
  delete(
    apimBaseUrl: string,
    apiId: string,
    ifMatch: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, apiId, ifMatch, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ true);

const listByApiOperationSpec: coreHttp.OperationSpec = {
  path: "/apis/{apiId}/policies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyCollection,
      headersMapper: Mappers.ApiPolicyListByApiHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.apiId],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/apis/{apiId}/policies/{policyId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyContract,
      headersMapper: Mappers.ApiPolicyGetHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.apimBaseUrl,
    Parameters.policyId,
    Parameters.apiId
  ],
  isXML: true,
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path: "/apis/{apiId}/policies/{policyId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.apimBaseUrl,
    Parameters.policyId,
    Parameters.apiId
  ],
  headerParameters: [Parameters.contentType, Parameters.ifMatch7],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/apis/{apiId}/policies/{policyId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.apimBaseUrl,
    Parameters.policyId,
    Parameters.apiId
  ],
  headerParameters: [Parameters.ifMatch8],
  serializer
};
