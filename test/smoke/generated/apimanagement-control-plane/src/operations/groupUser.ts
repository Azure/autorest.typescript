/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClient } from "../apiManagementClient";
import {
  GroupUserListOptionalParams,
  GroupUserListResponse,
  GroupUserCreateResponse,
  GroupUserListNextOptionalParams,
  GroupUserListNextResponse
} from "../models";

/**
 * Class representing a GroupUser.
 */
export class GroupUser {
  private readonly client: ApiManagementClient;

  /**
   * Initialize a new instance of the class GroupUser class.
   * @param client Reference to the service client
   */
  constructor(client: ApiManagementClient) {
    this.client = client;
  }

  /**
   * Lists a collection of the members of the group, specified by its identifier.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param groupId Group identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  list(
    apimBaseUrl: string,
    groupId: string,
    options?: GroupUserListOptionalParams
  ): Promise<GroupUserListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, groupId, options: operationOptions },
      listOperationSpec
    ) as Promise<GroupUserListResponse>;
  }

  /**
   * Adds a user to the specified group.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param groupId Group identifier. Must be unique in the current API Management service instance.
   * @param uid User identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  create(
    apimBaseUrl: string,
    groupId: string,
    uid: string,
    options?: coreHttp.OperationOptions
  ): Promise<GroupUserCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, groupId, uid, options: operationOptions },
      createOperationSpec
    ) as Promise<GroupUserCreateResponse>;
  }

  /**
   * Remove existing user from existing group.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param groupId Group identifier. Must be unique in the current API Management service instance.
   * @param uid User identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  delete(
    apimBaseUrl: string,
    groupId: string,
    uid: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, groupId, uid, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListNext
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param groupId Group identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  listNext(
    apimBaseUrl: string,
    nextLink: string,
    groupId: string,
    options?: GroupUserListNextOptionalParams
  ): Promise<GroupUserListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, nextLink, groupId, options: operationOptions },
      listNextOperationSpec
    ) as Promise<GroupUserListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/groups/{groupId}/users",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter8
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.groupId],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path: "/groups/{groupId}/users/{uid}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UserContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.groupId, Parameters.uid],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/groups/{groupId}/users/{uid}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.groupId, Parameters.uid],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter8
  ],
  urlParameters: [
    Parameters.apimBaseUrl,
    Parameters.nextLink,
    Parameters.groupId
  ],
  serializer
};
