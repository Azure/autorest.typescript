/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClient } from "../apiManagementClient";
import {
  UserSubscriptionListOptionalParams,
  UserSubscriptionListResponse,
  UserSubscriptionListNextOptionalParams,
  UserSubscriptionListNextResponse
} from "../models";

/**
 * Class representing a UserSubscription.
 */
export class UserSubscription {
  private readonly client: ApiManagementClient;

  /**
   * Initialize a new instance of the class UserSubscription class.
   * @param client Reference to the service client
   */
  constructor(client: ApiManagementClient) {
    this.client = client;
  }

  /**
   * Lists the collection of subscriptions of the specified user.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param uid User identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  list(
    apimBaseUrl: string,
    uid: string,
    options?: UserSubscriptionListOptionalParams
  ): Promise<UserSubscriptionListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, uid, options: operationOptions },
      listOperationSpec
    ) as Promise<UserSubscriptionListResponse>;
  }

  /**
   * ListNext
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param uid User identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  listNext(
    apimBaseUrl: string,
    nextLink: string,
    uid: string,
    options?: UserSubscriptionListNextOptionalParams
  ): Promise<UserSubscriptionListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, nextLink, uid, options: operationOptions },
      listNextOperationSpec
    ) as Promise<UserSubscriptionListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/users/{uid}/subscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter17
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.uid],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter17
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.nextLink, Parameters.uid],
  serializer
};
