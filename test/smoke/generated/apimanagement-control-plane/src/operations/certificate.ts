/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClient } from "../apiManagementClient";
import {
  CertificateListOptionalParams,
  CertificateListResponse,
  CertificateGetResponse,
  CertificateCreateOrUpdateParameters,
  CertificateCreateOrUpdateOptionalParams,
  CertificateCreateOrUpdateResponse,
  CertificateListNextOptionalParams,
  CertificateListNextResponse
} from "../models";

/**
 * Class representing a Certificate.
 */
export class Certificate {
  private readonly client: ApiManagementClient;

  /**
   * Initialize a new instance of the class Certificate class.
   * @param client Reference to the service client
   */
  constructor(client: ApiManagementClient) {
    this.client = client;
  }

  /**
   * Lists a collection of all certificates in the specified service instance.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param options The options parameters.
   */
  list(
    apimBaseUrl: string,
    options?: CertificateListOptionalParams
  ): Promise<CertificateListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, options: operationOptions },
      listOperationSpec
    ) as Promise<CertificateListResponse>;
  }

  /**
   * Gets the details of the certificate specified by its identifier.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   *                      Management service instance.
   * @param options The options parameters.
   */
  get(
    apimBaseUrl: string,
    certificateId: string,
    options?: coreHttp.OperationOptions
  ): Promise<CertificateGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, certificateId, options: operationOptions },
      getOperationSpec
    ) as Promise<CertificateGetResponse>;
  }

  /**
   * Creates or updates the certificate being used for authentication with the backend.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   *                      Management service instance.
   * @param parameters Create or Update parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    apimBaseUrl: string,
    certificateId: string,
    parameters: CertificateCreateOrUpdateParameters,
    options?: CertificateCreateOrUpdateOptionalParams
  ): Promise<CertificateCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, certificateId, parameters, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<CertificateCreateOrUpdateResponse>;
  }

  /**
   * Deletes specific certificate.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   *                      Management service instance.
   * @param ifMatch The entity state (Etag) version of the certificate to delete. A value of "*" can be
   *                used for If-Match to unconditionally apply the operation.
   * @param options The options parameters.
   */
  delete(
    apimBaseUrl: string,
    certificateId: string,
    ifMatch: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, certificateId, ifMatch, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListNext
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    apimBaseUrl: string,
    nextLink: string,
    options?: CertificateListNextOptionalParams
  ): Promise<CertificateListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<CertificateListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter5
  ],
  urlParameters: [Parameters.apimBaseUrl],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificateId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateContract,
      headersMapper: Mappers.CertificateGetHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.certificateId],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificateId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.certificateId],
  headerParameters: [Parameters.contentType, Parameters.ifMatch15],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificateId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.certificateId],
  headerParameters: [Parameters.ifMatch16],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter5
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.nextLink],
  serializer
};
