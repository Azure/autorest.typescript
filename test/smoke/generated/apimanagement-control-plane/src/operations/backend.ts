/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClient } from "../apiManagementClient";
import {
  BackendListOptionalParams,
  BackendListResponse,
  BackendGetResponse,
  BackendContract,
  BackendCreateOrUpdateResponse,
  BackendUpdateParameters,
  BackendListNextOptionalParams,
  BackendListNextResponse
} from "../models";

/**
 * Class representing a Backend.
 */
export class Backend {
  private readonly client: ApiManagementClient;

  /**
   * Initialize a new instance of the class Backend class.
   * @param client Reference to the service client
   */
  constructor(client: ApiManagementClient) {
    this.client = client;
  }

  /**
   * Lists a collection of backends in the specified service instance.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param options The options parameters.
   */
  list(
    apimBaseUrl: string,
    options?: BackendListOptionalParams
  ): Promise<BackendListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, options: operationOptions },
      listOperationSpec
    ) as Promise<BackendListResponse>;
  }

  /**
   * Gets the details of the backend specified by its identifier.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param backendid Identifier of the Backend entity. Must be unique in the current API Management
   *                  service instance.
   * @param options The options parameters.
   */
  get(
    apimBaseUrl: string,
    backendid: string,
    options?: coreHttp.OperationOptions
  ): Promise<BackendGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, backendid, options: operationOptions },
      getOperationSpec
    ) as Promise<BackendGetResponse>;
  }

  /**
   * Creates or Updates a backend.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param backendid Identifier of the Backend entity. Must be unique in the current API Management
   *                  service instance.
   * @param parameters Create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    apimBaseUrl: string,
    backendid: string,
    parameters: BackendContract,
    options?: coreHttp.OperationOptions
  ): Promise<BackendCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, backendid, parameters, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<BackendCreateOrUpdateResponse>;
  }

  /**
   * Updates an existing backend.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param backendid Identifier of the Backend entity. Must be unique in the current API Management
   *                  service instance.
   * @param parameters Update parameters.
   * @param ifMatch The entity state (Etag) version of the backend to update. A value of "*" can be used
   *                for If-Match to unconditionally apply the operation.
   * @param options The options parameters.
   */
  update(
    apimBaseUrl: string,
    backendid: string,
    parameters: BackendUpdateParameters,
    ifMatch: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        apimBaseUrl,
        backendid,
        parameters,
        ifMatch,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Deletes the specified backend.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param backendid Identifier of the Backend entity. Must be unique in the current API Management
   *                  service instance.
   * @param ifMatch The entity state (Etag) version of the backend to delete. A value of "*" can be used
   *                for If-Match to unconditionally apply the operation.
   * @param options The options parameters.
   */
  delete(
    apimBaseUrl: string,
    backendid: string,
    ifMatch: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, backendid, ifMatch, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListNext
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    apimBaseUrl: string,
    nextLink: string,
    options?: BackendListNextOptionalParams
  ): Promise<BackendListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<BackendListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/backends",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackendCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter4
  ],
  urlParameters: [Parameters.apimBaseUrl],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/backends/{backendid}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackendContract,
      headersMapper: Mappers.BackendGetHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.backendid],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path: "/backends/{backendid}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.BackendContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.backendid],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/backends/{backendid}",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.backendid],
  headerParameters: [Parameters.contentType, Parameters.ifMatch13],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/backends/{backendid}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.backendid],
  headerParameters: [Parameters.ifMatch14],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackendCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter4
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.nextLink],
  serializer
};
