/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClient } from "../apiManagementClient";
import {
  ApiOperationListByApiOptionalParams,
  ApiOperationListByApiResponse,
  ApiOperationGetResponse,
  OperationContract,
  ApiOperationCreateOrUpdateResponse,
  OperationUpdateContract,
  ApiOperationListByApiNextOptionalParams,
  ApiOperationListByApiNextResponse
} from "../models";

/**
 * Class representing a ApiOperation.
 */
export class ApiOperation {
  private readonly client: ApiManagementClient;

  /**
   * Initialize a new instance of the class ApiOperation class.
   * @param client Reference to the service client
   */
  constructor(client: ApiManagementClient) {
    this.client = client;
  }

  /**
   * Lists a collection of the operations for the specified API.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param apiId API identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  listByApi(
    apimBaseUrl: string,
    apiId: string,
    options?: ApiOperationListByApiOptionalParams
  ): Promise<ApiOperationListByApiResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, apiId, options: operationOptions },
      listByApiOperationSpec
    ) as Promise<ApiOperationListByApiResponse>;
  }

  /**
   * Gets the details of the API Operation specified by its identifier.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param apiId API identifier. Must be unique in the current API Management service instance.
   * @param operationId Operation identifier within an API. Must be unique in the current API Management
   *                    service instance.
   * @param options The options parameters.
   */
  get(
    apimBaseUrl: string,
    apiId: string,
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApiOperationGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, apiId, operationId, options: operationOptions },
      getOperationSpec
    ) as Promise<ApiOperationGetResponse>;
  }

  /**
   * Creates a new operation in the API or updates an existing one.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param apiId API identifier. Must be unique in the current API Management service instance.
   * @param operationId Operation identifier within an API. Must be unique in the current API Management
   *                    service instance.
   * @param parameters Create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    apimBaseUrl: string,
    apiId: string,
    operationId: string,
    parameters: OperationContract,
    options?: coreHttp.OperationOptions
  ): Promise<ApiOperationCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        apimBaseUrl,
        apiId,
        operationId,
        parameters,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<ApiOperationCreateOrUpdateResponse>;
  }

  /**
   * Updates the details of the operation in the API specified by its identifier.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param apiId API identifier. Must be unique in the current API Management service instance.
   * @param operationId Operation identifier within an API. Must be unique in the current API Management
   *                    service instance.
   * @param parameters API Operation Update parameters.
   * @param ifMatch ETag of the API Operation Entity. ETag should match the current entity state from the
   *                header response of the GET request or it should be * for unconditional update.
   * @param options The options parameters.
   */
  update(
    apimBaseUrl: string,
    apiId: string,
    operationId: string,
    parameters: OperationUpdateContract,
    ifMatch: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        apimBaseUrl,
        apiId,
        operationId,
        parameters,
        ifMatch,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Deletes the specified operation in the API.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param apiId API identifier. Must be unique in the current API Management service instance.
   * @param operationId Operation identifier within an API. Must be unique in the current API Management
   *                    service instance.
   * @param ifMatch ETag of the API Operation Entity. ETag should match the current entity state from the
   *                header response of the GET request or it should be * for unconditional update.
   * @param options The options parameters.
   */
  delete(
    apimBaseUrl: string,
    apiId: string,
    operationId: string,
    ifMatch: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, apiId, operationId, ifMatch, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListByApiNext
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param apiId API identifier. Must be unique in the current API Management service instance.
   * @param nextLink The nextLink from the previous successful call to the ListByApi method.
   * @param options The options parameters.
   */
  listByApiNext(
    apimBaseUrl: string,
    apiId: string,
    nextLink: string,
    options?: ApiOperationListByApiNextOptionalParams
  ): Promise<ApiOperationListByApiNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, apiId, nextLink, options: operationOptions },
      listByApiNextOperationSpec
    ) as Promise<ApiOperationListByApiNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByApiOperationSpec: coreHttp.OperationSpec = {
  path: "/apis/{apiId}/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter1
  ],
  urlParameters: [Parameters.apimBaseUrl, Parameters.apiId],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/apis/{apiId}/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationContract,
      headersMapper: Mappers.ApiOperationGetHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.apimBaseUrl,
    Parameters.apiId,
    Parameters.operationId
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path: "/apis/{apiId}/operations/{operationId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.OperationContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.apimBaseUrl,
    Parameters.apiId,
    Parameters.operationId
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/apis/{apiId}/operations/{operationId}",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.apimBaseUrl,
    Parameters.apiId,
    Parameters.operationId
  ],
  headerParameters: [Parameters.contentType, Parameters.ifMatch4],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/apis/{apiId}/operations/{operationId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.apimBaseUrl,
    Parameters.apiId,
    Parameters.operationId
  ],
  headerParameters: [Parameters.ifMatch4],
  serializer
};
const listByApiNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter1
  ],
  urlParameters: [
    Parameters.apimBaseUrl,
    Parameters.apiId,
    Parameters.nextLink1
  ],
  serializer
};
