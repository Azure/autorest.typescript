/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClient } from "../apiManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  DeployConfigurationParameters,
  TenantConfigurationDeployResponse,
  SaveConfigurationParameter,
  TenantConfigurationSaveResponse,
  TenantConfigurationValidateResponse,
  TenantConfigurationGetSyncStateResponse
} from "../models";

/**
 * Class representing a TenantConfiguration.
 */
export class TenantConfiguration {
  private readonly client: ApiManagementClient;

  /**
   * Initialize a new instance of the class TenantConfiguration class.
   * @param client Reference to the service client
   */
  constructor(client: ApiManagementClient) {
    this.client = client;
  }

  /**
   * This operation applies changes from the specified Git branch to the configuration database. This is
   * a long running operation and could take several minutes to complete.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param parameters Deploy Configuration parameters.
   * @param options The options parameters.
   */
  async deploy(
    apimBaseUrl: string,
    parameters: DeployConfigurationParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<TenantConfigurationDeployResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      apimBaseUrl,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        TenantConfigurationDeployResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deployOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deployOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * This operation creates a commit with the current configuration snapshot to the specified branch in
   * the repository. This is a long running operation and could take several minutes to complete.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param parameters Save Configuration parameters.
   * @param options The options parameters.
   */
  async save(
    apimBaseUrl: string,
    parameters: SaveConfigurationParameter,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<TenantConfigurationSaveResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      apimBaseUrl,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        TenantConfigurationSaveResponse
      >;
    const initialOperationResult = await sendOperation(args, saveOperationSpec);

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: saveOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * This operation validates the changes in the specified Git branch. This is a long running operation
   * and could take several minutes to complete.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param parameters Validate Configuration parameters.
   * @param options The options parameters.
   */
  async validate(
    apimBaseUrl: string,
    parameters: DeployConfigurationParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<TenantConfigurationValidateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      apimBaseUrl,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        TenantConfigurationValidateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      validateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: validateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets the status of the most recent synchronization between the configuration database and the Git
   * repository.
   * @param apimBaseUrl The management endpoint of the API Management service, for example
   *                    https://myapimservice.management.azure-api.net.
   * @param options The options parameters.
   */
  getSyncState(
    apimBaseUrl: string,
    options?: coreHttp.OperationOptions
  ): Promise<TenantConfigurationGetSyncStateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { apimBaseUrl, options: operationOptions },
      getSyncStateOperationSpec
    ) as Promise<TenantConfigurationGetSyncStateResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const deployOperationSpec: coreHttp.OperationSpec = {
  path: "/tenant/{configurationName}/deploy",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationResultContract
    },
    201: {
      bodyMapper: Mappers.OperationResultContract
    },
    202: {
      bodyMapper: Mappers.OperationResultContract
    },
    204: {
      bodyMapper: Mappers.OperationResultContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters36,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.configurationName],
  headerParameters: [Parameters.contentType],
  serializer
};
const saveOperationSpec: coreHttp.OperationSpec = {
  path: "/tenant/{configurationName}/save",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationResultContract
    },
    201: {
      bodyMapper: Mappers.OperationResultContract
    },
    202: {
      bodyMapper: Mappers.OperationResultContract
    },
    204: {
      bodyMapper: Mappers.OperationResultContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters37,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.configurationName],
  headerParameters: [Parameters.contentType],
  serializer
};
const validateOperationSpec: coreHttp.OperationSpec = {
  path: "/tenant/{configurationName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationResultContract
    },
    201: {
      bodyMapper: Mappers.OperationResultContract
    },
    202: {
      bodyMapper: Mappers.OperationResultContract
    },
    204: {
      bodyMapper: Mappers.OperationResultContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters38,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.configurationName],
  headerParameters: [Parameters.contentType],
  serializer
};
const getSyncStateOperationSpec: coreHttp.OperationSpec = {
  path: "/tenant/{configurationName}/syncState",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TenantConfigurationSyncStateContract
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.apimBaseUrl, Parameters.configurationName],
  serializer
};
