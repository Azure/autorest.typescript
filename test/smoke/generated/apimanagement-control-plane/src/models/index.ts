/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The response of the list policy operation.
 */
export interface PolicyCollection {
  /**
   * Policy Contract value.
   */
  value?: PolicyContract[];
  /**
   * Total number of records
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Policy contract Properties.
 */
export interface PolicyContract {
  /**
   * Policy identifier.
   */
  id?: string;
  /**
   * Json escaped Xml Encoded contents of the Policy.
   */
  policyContent: string;
}

/**
 * Error Body contract.
 */
export interface ErrorResponse {
  /**
   * Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response.
   */
  code?: string;
  /**
   * Human-readable representation of the error.
   */
  message?: string;
  /**
   * The list of invalid fields send in request, in case of validation error.
   */
  details?: ErrorFieldContract[];
}

/**
 * Error Field contract.
 */
export interface ErrorFieldContract {
  /**
   * Property level error code.
   */
  code?: string;
  /**
   * Human-readable representation of property-level error.
   */
  message?: string;
  /**
   * Property name.
   */
  target?: string;
}

/**
 * The response of the list policy snippets operation.
 */
export interface PolicySnippetsCollection {
  /**
   * Policy snippet value.
   */
  value?: PolicySnippetContract[];
}

/**
 * Policy snippet.
 */
export interface PolicySnippetContract {
  /**
   * Snippet name.
   */
  readonly name?: string;
  /**
   * Snippet content.
   */
  readonly content?: string;
  /**
   * Snippet toolTip.
   */
  readonly toolTip?: string;
  /**
   * Binary OR value of the Snippet scope.
   */
  readonly scope?: number;
}

/**
 * Lists Regions operation response details.
 */
export interface RegionListResult {
  /**
   * Lists of Regions.
   */
  value?: RegionContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Region profile.
 */
export interface RegionContract {
  /**
   * Region name.
   */
  readonly name?: string;
  /**
   * whether Region is the master region.
   */
  isMasterRegion?: boolean;
  /**
   * whether Region is deleted.
   */
  isDeleted?: boolean;
}

/**
 * Paged Api list representation.
 */
export interface ApiCollection {
  value?: ApiContract[];
  /**
   * Total number of entities
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * API base contract details.
 */
export interface ApiEntityBaseContract {
  /**
   * Description of the API. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Collection of authentication settings included into this API.
   */
  authenticationSettings?: AuthenticationSettingsContract;
  /**
   * Protocols over which API is made available.
   */
  subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
  /**
   * Type of API.
   */
  apiType?: ApiType;
  /**
   * Describes the Revision of the Api. If no value is provided, default revision 1 is created
   */
  apiRevision?: string;
  /**
   * Indicates if API revision is current api revision.
   */
  isCurrent?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   */
  isOnline?: boolean;
}

/**
 * API Authentication Settings.
 */
export interface AuthenticationSettingsContract {
  /**
   * OAuth2 Authentication settings
   */
  oAuth2?: OAuth2AuthenticationSettingsContract;
}

/**
 * API OAuth2 Authentication settings details.
 */
export interface OAuth2AuthenticationSettingsContract {
  /**
   * OAuth authorization server identifier.
   */
  authorizationServerId?: string;
  /**
   * operations scope.
   */
  scope?: string;
}

/**
 * Subscription key parameter names details.
 */
export interface SubscriptionKeyParameterNamesContract {
  /**
   * Subscription key header name.
   */
  header?: string;
  /**
   * Subscription key query string parameter name.
   */
  query?: string;
}

/**
 * Api Entity Properties
 */
export type ApiContractProperties = ApiEntityBaseContract & {
  /**
   * API name.
   */
  name?: string;
  /**
   * Absolute URL of the backend service implementing this API.
   */
  serviceUrl?: string;
  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
   */
  path: string;
  /**
   * Describes on which protocols the operations in this API can be invoked.
   */
  protocols?: Protocol[];
};

/**
 * Api Contract Details
 */
export type ApiContract = ApiContractProperties & {
  /**
   * Identifier of the Entity
   */
  id?: string;
};

/**
 * Api Create or Update Properties.
 */
export type ApiCreateOrUpdateParameter = ApiContractProperties & {
  /**
   * Identifier of the entity
   */
  id?: string;
  /**
   * Content value when Importing an API.
   */
  contentValue?: string;
  /**
   * Format of the Content in which the API is getting imported.
   */
  contentFormat?: ContentFormat;
  /**
   * Criteria to limit import of WSDL to a subset of the document.
   */
  wsdlSelector?: ApiCreateOrUpdateParameterWsdlSelector;
};

/**
 * Criteria to limit import of WSDL to a subset of the document.
 */
export interface ApiCreateOrUpdateParameterWsdlSelector {
  /**
   * Name of service to import from WSDL
   */
  wsdlServiceName?: string;
  /**
   * Name of endpoint(port) to import from WSDL
   */
  wsdlEndpointName?: string;
}

/**
 * API update contract properties.
 */
export type ApiUpdateContract = ApiEntityBaseContract & {
  /**
   * API name.
   */
  name?: string;
  /**
   * Absolute URL of the backend service implementing this API.
   */
  serviceUrl?: string;
  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
   */
  path?: string;
  /**
   * Describes on which protocols the operations in this API can be invoked.
   */
  protocols?: Protocol[];
};

/**
 * Paged Operation list representation.
 */
export interface OperationCollection {
  /**
   * Page values.
   */
  value?: OperationContract[];
  /**
   * Total number of entities
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Api Operation Entity Base Contract details.
 */
export interface OperationEntityBaseContract {
  /**
   * Collection of URL template parameters.
   */
  templateParameters?: ParameterContract[];
  /**
   * Description of the operation. May include HTML formatting tags.
   */
  description?: string;
  /**
   * An entity containing request details.
   */
  request?: RequestContract;
  /**
   * Array of Operation responses.
   */
  responses?: ResponseContract[];
  /**
   * Operation Policies
   */
  policies?: string;
}

/**
 * Operation parameters details.
 */
export interface ParameterContract {
  /**
   * Parameter name.
   */
  name: string;
  /**
   * Parameter description.
   */
  description?: string;
  /**
   * Parameter type.
   */
  type: string;
  /**
   * Default parameter value.
   */
  defaultValue?: string;
  /**
   * whether parameter is required or not.
   */
  required?: boolean;
  /**
   * Parameter values.
   */
  values?: string[];
}

/**
 * Operation request details.
 */
export interface RequestContract {
  /**
   * Operation request description.
   */
  description?: string;
  /**
   * Collection of operation request query parameters.
   */
  queryParameters?: ParameterContract[];
  /**
   * Collection of operation request headers.
   */
  headers?: ParameterContract[];
  /**
   * Collection of operation request representations.
   */
  representations?: RepresentationContract[];
}

/**
 * Operation request/response representation details.
 */
export interface RepresentationContract {
  /**
   * Specifies a registered or custom content type for this representation, e.g. application/xml.
   */
  contentType: string;
  /**
   * An example of the representation.
   */
  sample?: string;
  /**
   * Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
   */
  schemaId?: string;
  /**
   * Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
   */
  typeName?: string;
  /**
   * Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'..
   */
  formParameters?: ParameterContract[];
}

/**
 * Operation response details.
 */
export interface ResponseContract {
  /**
   * Operation response HTTP status code.
   */
  statusCode: number;
  /**
   * Operation response description.
   */
  description?: string;
  /**
   * Collection of operation response representations.
   */
  representations?: RepresentationContract[];
  /**
   * Collection of operation response headers.
   */
  headers?: ParameterContract[];
}

/**
 * Operation Contract Properties
 */
export type OperationContractProperties = OperationEntityBaseContract & {
  /**
   * Operation Name.
   */
  name: string;
  /**
   * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
   */
  method: string;
  /**
   * Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
   */
  urlTemplate: string;
};

/**
 * Api Operation details.
 */
export type OperationContract = OperationContractProperties & {
  /**
   * Identifier of the Operation.
   */
  id?: string;
};

/**
 * Operation Update Contract Properties.
 */
export type OperationUpdateContract = OperationEntityBaseContract & {
  /**
   * Operation Name.
   */
  name?: string;
  /**
   * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
   */
  method?: string;
  /**
   * Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
   */
  urlTemplate?: string;
};

/**
 * Paged Products list representation.
 */
export interface ProductCollection {
  /**
   * Page values.
   */
  value?: ProductContract[];
  /**
   * Total number of entities
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Product Entity Base Parameters
 */
export interface ProductEntityBaseParameters {
  /**
   * Product description. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.
   */
  terms?: string;
  /**
   * Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.
   */
  subscriptionRequired?: boolean;
  /**
   * whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false.
   */
  approvalRequired?: boolean;
  /**
   * Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false.
   */
  subscriptionsLimit?: number;
  /**
   * whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
   */
  state?: ProductState;
}

/**
 * Product profile.
 */
export type ProductContractProperties = ProductEntityBaseParameters & {
  /**
   * Product name.
   */
  name: string;
};

/**
 * Product details.
 */
export type ProductContract = ProductContractProperties & {
  /**
   * Identifier of the Product entity.
   */
  id?: string;
};

/**
 * The response of the list schema operation.
 */
export interface SchemaCollection {
  /**
   * Api Schema Contract value.
   */
  value?: SchemaContract[];
  /**
   * Total number of entities
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Schema contract Properties.
 */
export interface SchemaContractProperties {
  /**
   * Must be a valid a media type used in a Content-Type header as defined in the RFC 2616. Media type of the schema document (e.g. application/json, application/xml).
   */
  contentType: string;
  /**
   * Json escaped string defining the document representing the Schema.
   */
  value?: string;
}

/**
 * Schema Contract details.
 */
export type SchemaContract = SchemaContractProperties & {
  /**
   * Identifier of the Schema.
   */
  id?: string;
};

/**
 * API Export result Blob Uri.
 */
export interface ApiExportResult {
  /**
   * Link to the Storage Blob containing the result of the export operation. The Blob Uri is only valid for 5 minutes.
   */
  link?: string;
}

/**
 * Paged OAuth2 Authorization Servers list representation.
 */
export interface AuthorizationServerCollection {
  /**
   * Page values.
   */
  value?: AuthorizationServerContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * External OAuth authorization server Update settings contract.
 */
export interface AuthorizationServerContractBaseProperties {
  /**
   * Description of the authorization server. Can contain HTML formatting tags.
   */
  description?: string;
  /**
   * HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional.
   */
  authorizationMethods?: AuthorizationMethod[];
  /**
   * Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format.
   */
  clientAuthenticationMethod?: ClientAuthenticationMethod[];
  /**
   * Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {"name" : "name value", "value": "a value"}.
   */
  tokenBodyParameters?: TokenBodyParameterContract[];
  /**
   * OAuth token endpoint. Contains absolute URI to entity being referenced.
   */
  tokenEndpoint?: string;
  /**
   * If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security.
   */
  supportState?: boolean;
  /**
   * Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values.
   */
  defaultScope?: string;
  /**
   * Specifies the mechanism by which access token is passed to the API.
   */
  bearerTokenSendingMethods?: BearerTokenSendingMethod[];
  /**
   * Client or app secret registered with this authorization server.
   */
  clientSecret?: string;
  /**
   * Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username.
   */
  resourceOwnerUsername?: string;
  /**
   * Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password.
   */
  resourceOwnerPassword?: string;
}

/**
 * OAuth acquire token request body parameter (www-url-form-encoded).
 */
export interface TokenBodyParameterContract {
  /**
   * body parameter name.
   */
  name: string;
  /**
   * body parameter value.
   */
  value: string;
}

/**
 * External OAuth authorization server settings Properties.
 */
export type AuthorizationServerContractProperties = AuthorizationServerContractBaseProperties & {
  /**
   * User-friendly authorization server name.
   */
  name: string;
  /**
   * Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.
   */
  clientRegistrationEndpoint: string;
  /**
   * OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
   */
  authorizationEndpoint: string;
  /**
   * Form of an authorization grant, which the client uses to request the access token.
   */
  grantTypes: GrantType[];
  /**
   * Client or app id registered with this authorization server.
   */
  clientId: string;
};

/**
 * External OAuth authorization server settings.
 */
export type AuthorizationServerContract = AuthorizationServerContractProperties & {
  /**
   * Identifier of the Authorization Server entity.
   */
  id?: string;
};

/**
 * External OAuth authorization server Update settings contract.
 */
export type AuthorizationServerUpdateContract = AuthorizationServerContractBaseProperties & {
  /**
   * User-friendly authorization server name.
   */
  name?: string;
  /**
   * Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.
   */
  clientRegistrationEndpoint?: string;
  /**
   * OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
   */
  authorizationEndpoint?: string;
  /**
   * Form of an authorization grant, which the client uses to request the access token.
   */
  grantTypes?: GrantType[];
  /**
   * Client or app id registered with this authorization server.
   */
  clientId?: string;
};

/**
 * Paged Backend list representation.
 */
export interface BackendCollection {
  /**
   * Backend values.
   */
  value?: BackendContract[];
  /**
   * Total number of entities
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Backend entity base Parameter set.
 */
export interface BackendBaseParameters {
  /**
   * Backend Title.
   */
  title?: string;
  /**
   * Backend Description.
   */
  description?: string;
  /**
   * Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps.
   */
  resourceId?: string;
  /**
   * Backend Properties contract
   */
  properties?: BackendProperties;
  /**
   * Backend Credentials Contract Properties
   */
  credentials?: BackendCredentialsContract;
  /**
   * Backend Proxy Contract Properties
   */
  proxy?: BackendProxyContract;
  /**
   * Backend TLS Properties
   */
  tls?: BackendTlsProperties;
}

/**
 * Properties specific to the Backend Type.
 */
export interface BackendProperties {
  /**
   * Backend Service Fabric Cluster Properties
   */
  serviceFabricCluster?: BackendServiceFabricClusterProperties;
}

/**
 * Properties of the Service Fabric Type Backend.
 */
export interface BackendServiceFabricClusterProperties {
  /**
   * The client certificate thumbprint for the management endpoint.
   */
  clientCertificateThumbprint: string;
  /**
   * Maximum number of retries while attempting resolve the partition.
   */
  maxPartitionResolutionRetries?: number;
  /**
   * Maximum time allowed to update partition resolution data. Duration needs to be specified using the format PT[n]H[n]M[n]S as per ISO8601
   */
  partitionResolutionRequestTimeout?: string;
  /**
   * The cluster management endpoint.
   */
  managementEndpoints: string[];
  /**
   * Thumbprints of certificates cluster management service uses for tls communication
   */
  serverCertificateThumbprints?: string[];
  /**
   * Server X509 Certificate Names Collection
   */
  serverX509Names?: X509CertificateName[];
}

/**
 * Properties of server X509Names.
 */
export interface X509CertificateName {
  /**
   * Common Name of the Certificate.
   */
  name?: string;
  /**
   * Thumbprint for the Issuer of the Certificate.
   */
  issuerCertificateThumbprint?: string;
}

/**
 * Details of the Credentials used to connect to Backend.
 */
export interface BackendCredentialsContract {
  /**
   * List of Client Certificate Thumbprint.
   */
  certificate?: string[];
  /**
   * Query Parameter description.
   */
  query?: { [propertyName: string]: string[] };
  /**
   * Header Parameter description.
   */
  header?: { [propertyName: string]: string[] };
  /**
   * Authorization header authentication
   */
  authorization?: BackendAuthorizationHeaderCredentials;
}

/**
 * Authorization header information.
 */
export interface BackendAuthorizationHeaderCredentials {
  /**
   * Authentication Scheme name.
   */
  scheme: string;
  /**
   * Authentication Parameter value.
   */
  parameter: string;
}

/**
 * Details of the Backend WebProxy Server to use in the Request to Backend.
 */
export interface BackendProxyContract {
  /**
   * WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
   */
  url: string;
  /**
   * Username to connect to the WebProxy server
   */
  username?: string;
  /**
   * Password to connect to the WebProxy Server
   */
  password?: string;
}

/**
 * Properties controlling TLS Certificate Validation.
 */
export interface BackendTlsProperties {
  /**
   * Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.
   */
  validateCertificateChain?: boolean;
  /**
   * Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.
   */
  validateCertificateName?: boolean;
}

/**
 * Parameters supplied to the Create Backend operation.
 */
export type BackendContractProperties = BackendBaseParameters & {
  /**
   * Runtime Url of the Backend.
   */
  url: string;
  /**
   * Backend communication protocol.
   */
  protocol: BackendProtocol;
};

/**
 * Backend details.
 */
export type BackendContract = BackendContractProperties & {
  /**
   * Identifier of the Backend entity.
   */
  id?: string;
};

/**
 * Parameters supplied to the Update Backend operation.
 */
export type BackendUpdateParameters = BackendBaseParameters & {
  /**
   * Runtime Url of the Backend.
   */
  url?: string;
  /**
   * Backend communication protocol.
   */
  protocol?: BackendProtocol;
};

/**
 * Paged Certificates list representation.
 */
export interface CertificateCollection {
  /**
   * Page values.
   */
  value?: CertificateContract[];
  /**
   * Total number of entities
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Properties of the Certificate contract.
 */
export interface CertificateContractProperties {
  /**
   * Subject attribute of the certificate.
   */
  subject: string;
  /**
   * Thumbprint of the certificate.
   */
  thumbprint: string;
  /**
   * Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  expirationDate: Date;
}

/**
 * Certificate details.
 */
export type CertificateContract = CertificateContractProperties & {
  /**
   * Identifier of the Certificate entity.
   */
  id?: string;
};

/**
 * Parameters supplied to the CreateOrUpdate certificate operation.
 */
export interface CertificateCreateOrUpdateParameters {
  /**
   * Base 64 encoded certificate using the application/x-pkcs12 representation.
   */
  data: string;
  /**
   * Password for the Certificate
   */
  password: string;
}

/**
 * Paged email template list representation.
 */
export interface EmailTemplateCollection {
  /**
   * Page values.
   */
  value?: EmailTemplateContract[];
  /**
   * Total number of entities
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Email Template Contract properties.
 */
export interface EmailTemplateContractProperties {
  /**
   * Subject of the Template.
   */
  subject: string;
  /**
   * Email Template Body. This should be a valid XDocument
   */
  body: string;
  /**
   * Title of the Template.
   */
  title?: string;
  /**
   * Description of the Email Template.
   */
  description?: string;
  /**
   * Whether the template is the default template provided by Api Management or has been edited.
   */
  readonly isDefault?: boolean;
  /**
   * Email Template Parameter values.
   */
  parameters?: EmailTemplateParametersContractProperties[];
}

/**
 * Email Template Parameter contract.
 */
export interface EmailTemplateParametersContractProperties {
  /**
   * Template parameter name.
   */
  name?: string;
  /**
   * Template parameter title.
   */
  title?: string;
  /**
   * Template parameter description.
   */
  description?: string;
}

/**
 * Email Template details.
 */
export type EmailTemplateContract = EmailTemplateContractProperties & {
  /**
   * Identifier of the Template Contract.
   */
  id?: string;
};

/**
 * Email Template Update Contract properties.
 */
export interface EmailTemplateUpdateParameters {
  /**
   * Subject of the Template.
   */
  subject?: string;
  /**
   * Title of the Template.
   */
  title?: string;
  /**
   * Description of the Email Template.
   */
  description?: string;
  /**
   * Email Template Body. This should be a valid XDocument
   */
  body?: string;
  /**
   * Email Template Parameter values.
   */
  parameters?: EmailTemplateParametersContractProperties[];
}

/**
 * Paged Group list representation.
 */
export interface GroupCollection {
  /**
   * Page values.
   */
  value?: GroupContract[];
  /**
   * Total number of entities
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Developer group.
 */
export interface GroupContractProperties {
  /**
   * Group name.
   */
  name: string;
  /**
   * Group description. Can contain HTML formatting tags.
   */
  description?: string;
  /**
   * true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.
   */
  readonly builtIn?: boolean;
  /**
   * Group type.
   */
  type?: GroupType;
  /**
   * For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory aad://<tenant>.onmicrosoft.com/groups/<group object id>; otherwise the value is null.
   */
  externalId?: string;
}

/**
 * Contract details.
 */
export type GroupContract = GroupContractProperties & {
  /**
   * Identifier of the Group entity.
   */
  id?: string;
};

/**
 * Parameters supplied to the Create Group operation.
 */
export interface GroupCreateParameters {
  /**
   * Group name.
   */
  name: string;
  /**
   * Group description.
   */
  description?: string;
  /**
   * Group type.
   */
  type?: GroupType;
  /**
   * Identifier of the external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory aad://<tenant>.onmicrosoft.com/groups/<group object id>; otherwise the value is null.
   */
  externalId?: string;
}

/**
 * Parameters supplied to the Update Group operation.
 */
export interface GroupUpdateParameters {
  /**
   * Group name.
   */
  name?: string;
  /**
   * Group description.
   */
  description?: string;
  /**
   * Group type.
   */
  type?: GroupType;
  /**
   * Identifier of the external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory aad://<tenant>.onmicrosoft.com/groups/<group object id>; otherwise the value is null.
   */
  externalId?: string;
}

/**
 * Paged Users list representation.
 */
export interface UserCollection {
  /**
   * Page values.
   */
  value?: UserContract[];
  /**
   * Total number of entities
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * User Entity Base Parameters set.
 */
export interface UserEntityBaseParameters {
  /**
   * Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
   */
  state?: UserState;
  /**
   * Optional note about a user set by the administrator.
   */
  note?: string;
  /**
   * Collection of user identities.
   */
  readonly identities?: UserIdentityContract[];
}

/**
 * User identity details.
 */
export interface UserIdentityContract {
  /**
   * Identity provider name.
   */
  provider?: string;
  /**
   * Identifier value within provider.
   */
  id?: string;
}

/**
 * User profile.
 */
export type UserContractProperties = UserEntityBaseParameters & {
  /**
   * First name.
   */
  firstName?: string;
  /**
   * Last name.
   */
  lastName?: string;
  /**
   * Email address.
   */
  email?: string;
  /**
   * Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  registrationDate?: Date;
  /**
   * Collection of groups user is part of.
   */
  readonly groups?: GroupContract[];
};

/**
 * User details.
 */
export type UserContract = UserContractProperties & {
  /**
   * Identifier of the entity.
   */
  id?: string;
};

/**
 * List of all the Identity Providers configured on the service instance.
 */
export interface IdentityProviderList {
  /**
   * Identity Provider configuration values.
   */
  value?: IdentityProviderContract[];
  /**
   * Total number of identity providers
   */
  count?: number;
}

/**
 * Identity Provider Base Parameter Properties.
 */
export interface IdentityProviderBaseParameters {
  /**
   * Identity Provider Type identifier.
   */
  type?: IdentityProviderType;
  /**
   * List of Allowed Tenants when configuring Azure Active Directory login.
   */
  allowedTenants?: string[];
  /**
   * Signup Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signupPolicyName?: string;
  /**
   * Signin Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signinPolicyName?: string;
  /**
   * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
   */
  profileEditingPolicyName?: string;
  /**
   * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
   */
  passwordResetPolicyName?: string;
}

/**
 * The external Identity Providers like Facebook, Google, Microsoft, Twitter or Azure Active Directory which can be used to enable access to the API Management service developer portal for all users.
 */
export type IdentityProviderContractProperties = IdentityProviderBaseParameters & {
  /**
   * Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
   */
  clientId: string;
  /**
   * Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft.
   */
  clientSecret: string;
};

/**
 * Identity Provider details.
 */
export type IdentityProviderContract = IdentityProviderContractProperties & {
  /**
   * Identifier of the identity provider.
   */
  id?: string;
};

/**
 * Parameters supplied to the Update Identity Provider operation.
 */
export type IdentityProviderUpdateParameters = IdentityProviderBaseParameters & {
  /**
   * Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
   */
  clientId?: string;
  /**
   * Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft.
   */
  clientSecret?: string;
};

/**
 * Paged Logger list representation.
 */
export interface LoggerCollection {
  /**
   * Logger values.
   */
  value?: LoggerContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure Event Hubs.
 */
export interface LoggerContractProperties {
  /**
   * Logger type.
   */
  loggerType: "azureEventHub";
  /**
   * Logger description.
   */
  description?: string;
  /**
   * The name and SendRule connection string of the event hub.
   */
  credentials: { [propertyName: string]: string };
  /**
   * Whether records are buffered in the logger before publishing. Default is assumed to be true.
   */
  isBuffered?: boolean;
}

/**
 * Logger details.
 */
export type LoggerContract = LoggerContractProperties & {
  /**
   * Identifier of the Logger Entity.
   */
  id?: string;
};

/**
 * Parameters supplied to the Update Logger operation.
 */
export interface LoggerUpdateContract {
  /**
   * Logger type.
   */
  loggerType?: "azureEventHub";
  /**
   * Logger description.
   */
  description?: string;
  /**
   * Logger credentials.
   */
  credentials?: { [propertyName: string]: string };
  /**
   * Whether records are buffered in the logger before publishing. Default is assumed to be true.
   */
  isBuffered?: boolean;
}

/**
 * Paged OpenIdProviders list representation.
 */
export interface OpenIdConnectProviderCollection {
  /**
   * Page values.
   */
  value?: OpenidConnectProviderContract[];
  /**
   * Total number of entities
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * OpenID Connect Providers Contract.
 */
export interface OpenidConnectProviderContractProperties {
  /**
   * User-friendly OpenID Connect Provider name.
   */
  name: string;
  /**
   * User-friendly description of OpenID Connect Provider.
   */
  description?: string;
  /**
   * Metadata endpoint URI.
   */
  metadataEndpoint: string;
  /**
   * Client ID of developer console which is the client application.
   */
  clientId: string;
  /**
   * Client Secret of developer console which is the client application.
   */
  clientSecret?: string;
}

/**
 * OpenId Connect Provider details.
 */
export type OpenidConnectProviderContract = OpenidConnectProviderContractProperties & {
  /**
   * Identifier of the OpenId Connect Provider.
   */
  id?: string;
};

/**
 * Parameters supplied to the Update OpenID Connect Provider operation.
 */
export interface OpenidConnectProviderUpdateContract {
  /**
   * User-friendly OpenID Connect Provider name.
   */
  name?: string;
  /**
   * User-friendly description of OpenID Connect Provider.
   */
  description?: string;
  /**
   * Metadata endpoint URI.
   */
  metadataEndpoint?: string;
  /**
   * Client ID of developer console which is the client application.
   */
  clientId?: string;
  /**
   * Client Secret of developer console which is the client application.
   */
  clientSecret?: string;
}

/**
 * Sign-In settings for the Developer Portal.
 */
export interface PortalSigninSettings {
  /**
   * Redirect Anonymous users to the Sign-In page.
   */
  enabled?: boolean;
}

/**
 * Sign-up settings contract properties.
 */
export interface PortalSignupSettings {
  /**
   * Allow users to sign up on a developer portal.
   */
  enabled?: boolean;
  /**
   * Terms of service contract properties.
   */
  termsOfService?: TermsOfServiceProperties;
}

/**
 * Terms of service contract properties.
 */
export interface TermsOfServiceProperties {
  /**
   * A terms of service text.
   */
  text?: string;
  /**
   * Display terms of service during a sign-up process.
   */
  enabled?: boolean;
  /**
   * Ask user for consent to the terms of service.
   */
  consentRequired?: boolean;
}

/**
 * Delegation settings for a developer portal.
 */
export interface PortalDelegationSettings {
  /**
   * A delegation Url.
   */
  url?: string;
  /**
   * A base64-encoded validation key to validate, that a request is coming from Azure API Management.
   */
  validationKey?: string;
  /**
   * Subscriptions delegation settings.
   */
  subscriptions?: SubscriptionsDelegationSettingsProperties;
  /**
   * User registration delegation settings.
   */
  userRegistration?: RegistrationDelegationSettingsProperties;
}

/**
 * Subscriptions delegation settings properties.
 */
export interface SubscriptionsDelegationSettingsProperties {
  /**
   * Enable or disable delegation for subscriptions.
   */
  enabled?: boolean;
}

/**
 * User registration delegation settings properties.
 */
export interface RegistrationDelegationSettingsProperties {
  /**
   * Enable or disable delegation for user registration.
   */
  enabled?: boolean;
}

/**
 * Parameters supplied to the Update Product operation.
 */
export type ProductUpdateParameters = ProductEntityBaseParameters & {
  /**
   * Product name.
   */
  name?: string;
};

/**
 * Paged Subscriptions list representation.
 */
export interface SubscriptionCollection {
  /**
   * Page values.
   */
  value?: SubscriptionContract[];
  /**
   * Total number of entities
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Subscription details.
 */
export interface SubscriptionContractProperties {
  /**
   * The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier.
   */
  userId: string;
  /**
   * The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.
   */
  productId: string;
  /**
   * The name of the subscription, or null if the subscription has no name.
   */
  name?: string;
  /**
   * Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
   */
  state: SubscriptionState;
  /**
   * Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  readonly createdDate?: Date;
  /**
   * Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  startDate?: Date;
  /**
   * Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  expirationDate?: Date;
  /**
   * Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  endDate?: Date;
  /**
   * Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  notificationDate?: Date;
  /**
   * Subscription primary key.
   */
  primaryKey: string;
  /**
   * Subscription secondary key.
   */
  secondaryKey: string;
  /**
   * Optional subscription comment added by an administrator.
   */
  stateComment?: string;
}

/**
 * Subscription details.
 */
export type SubscriptionContract = SubscriptionContractProperties & {
  /**
   * Identifier of the Subscription.
   */
  id?: string;
};

/**
 * Paged Property list representation.
 */
export interface PropertyCollection {
  /**
   * Page values.
   */
  value?: PropertyContract[];
  /**
   * Total number of entities
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Property Entity Base Parameters set.
 */
export interface PropertyEntityBaseParameters {
  /**
   * Optional tags that when provided can be used to filter the property list.
   */
  tags?: string[];
  /**
   * Determines whether the value is a secret and should be encrypted or not. Default value is false.
   */
  secret?: boolean;
}

/**
 * Property Contract properties.
 */
export type PropertyContractProperties = PropertyEntityBaseParameters & {
  /**
   * Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.
   */
  name: string;
  /**
   * Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.
   */
  value: string;
};

/**
 * Property details.
 */
export type PropertyContract = PropertyContractProperties & {
  /**
   * Identifier of the Property.
   */
  id?: string;
};

/**
 * Property Contract properties.
 */
export type PropertyUpdateParameters = PropertyEntityBaseParameters & {
  /**
   * Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.
   */
  name?: string;
  /**
   * Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.
   */
  value?: string;
};

/**
 * Paged Quota Counter list representation.
 */
export interface QuotaCounterCollection {
  /**
   * Quota counter values.
   */
  value?: QuotaCounterContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Quota counter details.
 */
export interface QuotaCounterContract {
  /**
   * The Key value of the Counter. Must not be empty.
   */
  counterKey: string;
  /**
   * Identifier of the Period for which the counter was collected. Must not be empty.
   */
  periodKey: string;
  /**
   * The date of the start of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  periodStartTime: Date;
  /**
   * The date of the end of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  periodEndTime: Date;
  /**
   * Quota Value Properties
   */
  value?: QuotaCounterValueContractProperties;
}

/**
 * Quota counter value details.
 */
export interface QuotaCounterValueContractProperties {
  /**
   * Number of times Counter was called.
   */
  callsCount?: number;
  /**
   * Data Transferred in KiloBytes.
   */
  kbTransferred?: number;
}

/**
 * Paged Report records list representation.
 */
export interface ReportCollection {
  /**
   * Page values.
   */
  value?: ReportRecordContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Report data.
 */
export interface ReportRecordContract {
  /**
   * Name depending on report endpoint specifies product, API, operation or developer name.
   */
  name?: string;
  /**
   * Start of aggregation period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  timestamp?: Date;
  /**
   * Length of aggregation period.  Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).
   */
  interval?: string;
  /**
   * Country to which this record data is related.
   */
  country?: string;
  /**
   * Country region to which this record data is related.
   */
  region?: string;
  /**
   * Zip code to which this record data is related.
   */
  zip?: string;
  /**
   * User identifier path. /users/{userId}
   */
  readonly userId?: string;
  /**
   * Product identifier path. /products/{productId}
   */
  readonly productId?: string;
  /**
   * API identifier path. /apis/{apiId}
   */
  apiId?: string;
  /**
   * Operation identifier path. /apis/{apiId}/operations/{operationId}
   */
  operationId?: string;
  /**
   * API region identifier.
   */
  apiRegion?: string;
  /**
   * Subscription identifier path. /subscriptions/{subscriptionId}
   */
  subscriptionId?: string;
  /**
   * Number of successful calls. This includes calls returning HttpStatusCode <= 301 and HttpStatusCode.NotModified and HttpStatusCode.TemporaryRedirect
   */
  callCountSuccess?: number;
  /**
   * Number of calls blocked due to invalid credentials. This includes calls returning HttpStatusCode.Unauthorized and HttpStatusCode.Forbidden and HttpStatusCode.TooManyRequests
   */
  callCountBlocked?: number;
  /**
   * Number of calls failed due to proxy or backend errors. This includes calls returning HttpStatusCode.BadRequest(400) and any Code between HttpStatusCode.InternalServerError (500) and 600
   */
  callCountFailed?: number;
  /**
   * Number of other calls.
   */
  callCountOther?: number;
  /**
   * Total number of calls.
   */
  callCountTotal?: number;
  /**
   * Bandwidth consumed.
   */
  bandwidth?: number;
  /**
   * Number of times when content was served from cache policy.
   */
  cacheHitCount?: number;
  /**
   * Number of times content was fetched from backend.
   */
  cacheMissCount?: number;
  /**
   * Average time it took to process request.
   */
  apiTimeAvg?: number;
  /**
   * Minimum time it took to process request.
   */
  apiTimeMin?: number;
  /**
   * Maximum time it took to process request.
   */
  apiTimeMax?: number;
  /**
   * Average time it took to process request on backend.
   */
  serviceTimeAvg?: number;
  /**
   * Minimum time it took to process request on backend.
   */
  serviceTimeMin?: number;
  /**
   * Maximum time it took to process request on backend.
   */
  serviceTimeMax?: number;
}

/**
 * Paged Report records list representation.
 */
export interface RequestReportCollection {
  /**
   * Page values.
   */
  value?: RequestReportRecordContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
}

/**
 * Request Report data.
 */
export interface RequestReportRecordContract {
  /**
   * API identifier path. /apis/{apiId}
   */
  apiId?: string;
  /**
   * Operation identifier path. /apis/{apiId}/operations/{operationId}
   */
  operationId?: string;
  /**
   * Product identifier path. /products/{productId}
   */
  readonly productId?: string;
  /**
   * User identifier path. /users/{userId}
   */
  readonly userId?: string;
  /**
   * The HTTP method associated with this request..
   */
  method?: string;
  /**
   * The full URL associated with this request.
   */
  url?: string;
  /**
   * The client IP address associated with this request.
   */
  ipAddress?: string;
  /**
   * The HTTP status code received by the gateway as a result of forwarding this request to the backend.
   */
  backendResponseCode?: string;
  /**
   * The HTTP status code returned by the gateway.
   */
  responseCode?: number;
  /**
   * The size of the response returned by the gateway.
   */
  responseSize?: number;
  /**
   * The date and time when this request was received by the gateway in ISO 8601 format.
   */
  timestamp?: Date;
  /**
   * Specifies if response cache was involved in generating the response. If the value is none, the cache was not used. If the value is hit, cached response was returned. If the value is miss, the cache was used but lookup resulted in a miss and request was fulfilled by the backend.
   */
  cache?: string;
  /**
   * The total time it took to process this request.
   */
  apiTime?: number;
  /**
   * he time it took to forward this request to the backend and get the response back.
   */
  serviceTime?: number;
  /**
   * Azure region where the gateway that processed this request is located.
   */
  apiRegion?: string;
  /**
   * Subscription identifier path. /subscriptions/{subscriptionId}
   */
  subscriptionId?: string;
  /**
   * Request Identifier.
   */
  requestId?: string;
  /**
   * The size of this request..
   */
  requestSize?: number;
}

/**
 * Parameters supplied to the Create subscription operation.
 */
export interface SubscriptionCreateParameters {
  /**
   * User (user id path) for whom subscription is being created in form /users/{uid}
   */
  userId: string;
  /**
   * Product (product id path) for which subscription is being created in form /products/{productId}
   */
  productId: string;
  /**
   * Subscription name.
   */
  name?: string;
  /**
   * Primary subscription key. If not specified during request key will be generated automatically.
   */
  primaryKey?: string;
  /**
   * Secondary subscription key. If not specified during request key will be generated automatically.
   */
  secondaryKey?: string;
  /**
   * Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
   */
  state?: SubscriptionState;
}

/**
 * Parameters supplied to the Update subscription operation.
 */
export interface SubscriptionUpdateParameters {
  /**
   * User identifier path: /users/{uid}
   */
  userId?: string;
  /**
   * Product identifier path: /products/{productId}
   */
  productId?: string;
  /**
   * Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   */
  expirationDate?: Date;
  /**
   * Subscription name.
   */
  name?: string;
  /**
   * Primary subscription key.
   */
  primaryKey?: string;
  /**
   * Secondary subscription key.
   */
  secondaryKey?: string;
  /**
   * Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
   */
  state?: SubscriptionState;
  /**
   * Comments describing subscription state change by the administrator.
   */
  stateComment?: string;
}

/**
 * Tenant access information contract of the API Management service.
 */
export interface AccessInformationContract {
  /**
   * Identifier.
   */
  id?: string;
  /**
   * Primary access key.
   */
  primaryKey?: string;
  /**
   * Secondary access key.
   */
  secondaryKey?: string;
  /**
   * Tenant access information of the API Management service.
   */
  enabled?: boolean;
}

/**
 * Tenant access information update parameters of the API Management service.
 */
export interface AccessInformationUpdateParameters {
  /**
   * Tenant access information of the API Management service.
   */
  enabled?: boolean;
}

/**
 * Parameters supplied to the Deploy Configuration operation.
 */
export interface DeployConfigurationParameters {
  /**
   * The name of the Git branch from which the configuration is to be deployed to the configuration database.
   */
  branch: string;
  /**
   * The value enforcing deleting subscriptions to products that are deleted in this update.
   */
  force?: boolean;
}

/**
 * Operation Result.
 */
export interface OperationResultContract {
  /**
   * Operation result identifier.
   */
  id?: string;
  /**
   * Status of an async operation.
   */
  status?: AsyncOperationStatus;
  /**
   * Start time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  started?: Date;
  /**
   * Last update time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  updated?: Date;
  /**
   * Optional result info.
   */
  resultInfo?: string;
  /**
   * Error Body Contract
   */
  error?: ErrorResponse;
  /**
   * This property if only provided as part of the TenantConfiguration_Validate operation. It contains the log the entities which will be updated/created/deleted as part of the TenantConfiguration_Deploy operation.
   */
  readonly actionLog?: OperationResultLogItemContract[];
}

/**
 * Log of the entity being created, updated or deleted.
 */
export interface OperationResultLogItemContract {
  /**
   * The type of entity contract.
   */
  objectType?: string;
  /**
   * Action like create/update/delete.
   */
  action?: string;
  /**
   * Identifier of the entity being created/updated/deleted.
   */
  objectKey?: string;
}

/**
 * Parameters supplied to the Save Tenant Configuration operation.
 */
export interface SaveConfigurationParameter {
  /**
   * The name of the Git branch in which to commit the current configuration snapshot.
   */
  branch: string;
  /**
   * The value if true, the current configuration database is committed to the Git repository, even if the Git repository has newer changes that would be overwritten.
   */
  force?: boolean;
}

/**
 * Tenant Configuration Synchronization State.
 */
export interface TenantConfigurationSyncStateContract {
  /**
   * The name of Git branch.
   */
  branch?: string;
  /**
   * The latest commit Id.
   */
  commitId?: string;
  /**
   * value indicating if last sync was save (true) or deploy (false) operation.
   */
  isExport?: boolean;
  /**
   * value indicating if last synchronization was later than the configuration change.
   */
  isSynced?: boolean;
  /**
   * value indicating whether Git configuration access is enabled.
   */
  isGitEnabled?: boolean;
  /**
   * The date of the latest synchronization. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  syncDate?: Date;
  /**
   * The date of the latest configuration change. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  configurationChangeDate?: Date;
}

/**
 * Parameters supplied to the Create User operation.
 */
export type UserCreateParameters = UserEntityBaseParameters & {
  /**
   * Email address. Must not be empty and must be unique within the service instance.
   */
  email: string;
  /**
   * First name.
   */
  firstName: string;
  /**
   * Last name.
   */
  lastName: string;
  /**
   * User Password. If no value is provided, a default password is generated.
   */
  password?: string;
};

/**
 * Parameters supplied to the Update User operation.
 */
export type UserUpdateParameters = UserEntityBaseParameters & {
  /**
   * Email address. Must not be empty and must be unique within the service instance.
   */
  email?: string;
  /**
   * User Password.
   */
  password?: string;
  /**
   * First name.
   */
  firstName?: string;
  /**
   * Last name.
   */
  lastName?: string;
};

/**
 * Generate SSO Url operations response details.
 */
export interface GenerateSsoUrlResult {
  /**
   * Redirect Url containing the SSO URL value.
   */
  value?: string;
}

/**
 * List of Users Identity list representation.
 */
export interface UserIdentityCollection {
  /**
   * User Identity values.
   */
  value?: UserIdentityContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Parameters supplied to the Get User Token operation.
 */
export interface UserTokenParameters {
  /**
   * The Key to be used to generate token for user.
   */
  keyType: KeyType;
  /**
   * The Expiry time of the Token. Maximum token expiry time is set to 30 days. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  expiry: Date;
}

/**
 * Get User Token response details.
 */
export interface UserTokenResult {
  /**
   * Shared Access Authorization token for the User.
   */
  value?: string;
}

/**
 * Quota counter value details.
 */
export interface QuotaCounterValueContract {
  /**
   * Number of times Counter was called.
   */
  callsCount?: number;
  /**
   * Data Transferred in KiloBytes.
   */
  kbTransferred?: number;
}

/**
 * Defines headers for policy_get operation.
 */
export interface PolicyGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for api_get operation.
 */
export interface ApiGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for api_createOrUpdate operation.
 */
export interface ApiCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiOperation_get operation.
 */
export interface ApiOperationGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiOperationPolicy_get operation.
 */
export interface ApiOperationPolicyGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiPolicy_listByApi operation.
 */
export interface ApiPolicyListByApiHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiPolicy_get operation.
 */
export interface ApiPolicyGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiSchema_listByApi operation.
 */
export interface ApiSchemaListByApiHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiSchema_get operation.
 */
export interface ApiSchemaGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiSchema_listByApiNext operation.
 */
export interface ApiSchemaListByApiNextHeaders {
  eTag?: string;
}

/**
 * Defines headers for authorizationServer_get operation.
 */
export interface AuthorizationServerGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for backend_get operation.
 */
export interface BackendGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for certificate_get operation.
 */
export interface CertificateGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for emailTemplate_get operation.
 */
export interface EmailTemplateGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for group_get operation.
 */
export interface GroupGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for identityProvider_get operation.
 */
export interface IdentityProviderGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for logger_get operation.
 */
export interface LoggerGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for openIdConnectProvider_get operation.
 */
export interface OpenIdConnectProviderGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for signInSettings_get operation.
 */
export interface SignInSettingsGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for signUpSettings_get operation.
 */
export interface SignUpSettingsGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for delegationSettings_get operation.
 */
export interface DelegationSettingsGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for product_get operation.
 */
export interface ProductGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for productPolicy_listByProduct operation.
 */
export interface ProductPolicyListByProductHeaders {
  eTag?: string;
}

/**
 * Defines headers for productPolicy_get operation.
 */
export interface ProductPolicyGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for property_get operation.
 */
export interface PropertyGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for subscription_get operation.
 */
export interface SubscriptionGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for tenantAccess_get operation.
 */
export interface TenantAccessGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for tenantAccessGit_get operation.
 */
export interface TenantAccessGitGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for user_get operation.
 */
export interface UserGetHeaders {
  eTag?: string;
}

/**
 * Defines values for ApiType.
 */
export type ApiType = "http" | "soap";
/**
 * Defines values for ContentFormat.
 */
export type ContentFormat =
  | "wadl-xml"
  | "wadl-link-json"
  | "swagger-json"
  | "swagger-link-json"
  | "wsdl"
  | "wsdl-link";
/**
 * Defines values for ExportFormat.
 */
export type ExportFormat =
  | "application/vnd.swagger.link+json"
  | "application/vnd.ms.wsdl.link+xml"
  | "application/vnd.sun.wadl.link+json";
/**
 * Defines values for ClientAuthenticationMethod.
 */
export type ClientAuthenticationMethod = "Basic" | "Body";
/**
 * Defines values for BearerTokenSendingMethod.
 */
export type BearerTokenSendingMethod = "authorizationHeader" | "query";
/**
 * Defines values for GrantType.
 */
export type GrantType =
  | "authorizationCode"
  | "implicit"
  | "resourceOwnerPassword"
  | "clientCredentials";
/**
 * Defines values for BackendProtocol.
 */
export type BackendProtocol = "http" | "soap";
/**
 * Defines values for TemplateName.
 */
export type TemplateName =
  | "applicationApprovedNotificationMessage"
  | "accountClosedDeveloper"
  | "quotaLimitApproachingDeveloperNotificationMessage"
  | "newDeveloperNotificationMessage"
  | "emailChangeIdentityDefault"
  | "inviteUserNotificationMessage"
  | "newCommentNotificationMessage"
  | "confirmSignUpIdentityDefault"
  | "newIssueNotificationMessage"
  | "purchaseDeveloperNotificationMessage"
  | "passwordResetIdentityDefault"
  | "passwordResetByAdminNotificationMessage"
  | "rejectDeveloperNotificationMessage"
  | "requestDeveloperNotificationMessage";
/**
 * Defines values for UserState.
 */
export type UserState = "active" | "blocked";
/**
 * Defines values for IdentityProviderType.
 */
export type IdentityProviderType =
  | "facebook"
  | "google"
  | "microsoft"
  | "twitter"
  | "aad"
  | "aadB2C";
/**
 * Defines values for Enum10.
 */
export type Enum10 = "False" | "True";
/**
 * Defines values for Enum11.
 */
export type Enum11 = "False" | "True";
/**
 * Defines values for Enum12.
 */
export type Enum12 = "False" | "True";
/**
 * Defines values for Enum13.
 */
export type Enum13 = "False" | "True";
/**
 * Defines values for PolicyScopeContract.
 */
export type PolicyScopeContract =
  | "Tenant"
  | "Product"
  | "Api"
  | "Operation"
  | "All";
/**
 * Defines values for Protocol.
 */
export type Protocol = "http" | "https";
/**
 * Defines values for ProductState.
 */
export type ProductState = "notPublished" | "published";
/**
 * Defines values for AuthorizationMethod.
 */
export type AuthorizationMethod =
  | "HEAD"
  | "OPTIONS"
  | "TRACE"
  | "GET"
  | "POST"
  | "PUT"
  | "PATCH"
  | "DELETE";
/**
 * Defines values for GroupType.
 */
export type GroupType = "custom" | "system" | "external";
/**
 * Defines values for SubscriptionState.
 */
export type SubscriptionState =
  | "suspended"
  | "active"
  | "expired"
  | "submitted"
  | "rejected"
  | "cancelled";
/**
 * Defines values for AsyncOperationStatus.
 */
export type AsyncOperationStatus =
  | "Started"
  | "InProgress"
  | "Succeeded"
  | "Failed";
/**
 * Defines values for KeyType.
 */
export type KeyType = "primary" | "secondary";

/**
 * Optional parameters.
 */
export interface PolicyListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Policy scope.
   */
  scope?: PolicyScopeContract;
}

/**
 * Contains response data for the list operation.
 */
export type PolicyListResponse = PolicyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PolicyGetResponse = PolicyGetHeaders &
  PolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PolicyGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PolicyCreateOrUpdateResponse = PolicyContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyContract;
  };
};

/**
 * Optional parameters.
 */
export interface PolicySnippetsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Policy scope.
   */
  scope?: PolicyScopeContract;
}

/**
 * Contains response data for the list operation.
 */
export type PolicySnippetsListResponse = PolicySnippetsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySnippetsCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type RegionsListResponse = RegionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ApiListOptionalParams extends coreHttp.OperationOptions {
  /**
   * | Field       | Supported operators    | Supported functions               |
   * |-------------|------------------------|-----------------------------------|
   * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | name        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | serviceUrl  | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | path        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   */
  filter?: string;
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the list operation.
 */
export type ApiListResponse = ApiCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiGetResponse = ApiGetHeaders &
  ApiContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApiContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Api Entity. For Create Api Etag should not be specified. For Update Etag should match the existing Entity or it can be * for unconditional update.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiCreateOrUpdateResponse = ApiCreateOrUpdateHeaders &
  ApiContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApiContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiListNextOptionalParams extends coreHttp.OperationOptions {
  /**
   * | Field       | Supported operators    | Supported functions               |
   * |-------------|------------------------|-----------------------------------|
   * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | name        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | serviceUrl  | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | path        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   */
  filter?: string;
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listNext operation.
 */
export type ApiListNextResponse = ApiCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiOperationListByApiOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions               |
   * |-------------|------------------------|-----------------------------------|
   * | name        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | method      | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | urlTemplate | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the listByApi operation.
 */
export type ApiOperationListByApiResponse = OperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiOperationGetResponse = ApiOperationGetHeaders &
  OperationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiOperationGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiOperationCreateOrUpdateResponse = OperationContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationContract;
  };
};

/**
 * Optional parameters.
 */
export interface ApiOperationListByApiNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions               |
   * |-------------|------------------------|-----------------------------------|
   * | name        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | method      | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   * | urlTemplate | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the listByApiNext operation.
 */
export type ApiOperationListByApiNextResponse = OperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationCollection;
  };
};

/**
 * Contains response data for the listByOperation operation.
 */
export type ApiOperationPolicyListByOperationResponse = PolicyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiOperationPolicyGetResponse = ApiOperationPolicyGetHeaders &
  PolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiOperationPolicyGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiOperationPolicyCreateOrUpdateResponse = PolicyContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyContract;
  };
};

/**
 * Optional parameters.
 */
export interface ApiProductListByApisOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field | Supported operators    | Supported functions                         |
   * |-------|------------------------|---------------------------------------------|
   * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the listByApis operation.
 */
export type ApiProductListByApisResponse = ProductCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiProductListByApisNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field | Supported operators    | Supported functions                         |
   * |-------|------------------------|---------------------------------------------|
   * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the listByApisNext operation.
 */
export type ApiProductListByApisNextResponse = ProductCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductCollection;
  };
};

/**
 * Contains response data for the listByApi operation.
 */
export type ApiPolicyListByApiResponse = ApiPolicyListByApiHeaders &
  PolicyCollection & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyCollection;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiPolicyListByApiHeaders;
    };
  };

/**
 * Contains response data for the get operation.
 */
export type ApiPolicyGetResponse = ApiPolicyGetHeaders &
  PolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiPolicyGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiPolicyCreateOrUpdateResponse = PolicyContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyContract;
  };
};

/**
 * Contains response data for the listByApi operation.
 */
export type ApiSchemaListByApiResponse = ApiSchemaListByApiHeaders &
  SchemaCollection & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SchemaCollection;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiSchemaListByApiHeaders;
    };
  };

/**
 * Contains response data for the get operation.
 */
export type ApiSchemaGetResponse = ApiSchemaGetHeaders &
  SchemaContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SchemaContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiSchemaGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiSchemaCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The entity state (Etag) version of the Api Schema to update. A value of "*" can be used for If-Match to unconditionally apply the operation.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiSchemaCreateOrUpdateResponse = SchemaContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SchemaContract;
  };
};

/**
 * Contains response data for the listByApiNext operation.
 */
export type ApiSchemaListByApiNextResponse = ApiSchemaListByApiNextHeaders &
  SchemaCollection & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SchemaCollection;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiSchemaListByApiNextHeaders;
    };
  };

/**
 * Contains response data for the get operation.
 */
export type ApiExportGetResponse = ApiExportResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiExportResult;
  };
};

/**
 * Optional parameters.
 */
export interface AuthorizationServerListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field | Supported operators    | Supported functions                         |
   * |-------|------------------------|---------------------------------------------|
   * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type AuthorizationServerListResponse = AuthorizationServerCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationServerCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AuthorizationServerGetResponse = AuthorizationServerGetHeaders &
  AuthorizationServerContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationServerContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: AuthorizationServerGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AuthorizationServerCreateOrUpdateResponse = AuthorizationServerContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationServerContract;
  };
};

/**
 * Optional parameters.
 */
export interface AuthorizationServerListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field | Supported operators    | Supported functions                         |
   * |-------|------------------------|---------------------------------------------|
   * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type AuthorizationServerListNextResponse = AuthorizationServerCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationServerCollection;
  };
};

/**
 * Optional parameters.
 */
export interface BackendListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field | Supported operators    | Supported functions                         |
   * |-------|------------------------|---------------------------------------------|
   * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | host  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type BackendListResponse = BackendCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackendCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BackendGetResponse = BackendGetHeaders &
  BackendContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BackendContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BackendGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type BackendCreateOrUpdateResponse = BackendContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackendContract;
  };
};

/**
 * Optional parameters.
 */
export interface BackendListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field | Supported operators    | Supported functions                         |
   * |-------|------------------------|---------------------------------------------|
   * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | host  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type BackendListNextResponse = BackendCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackendCollection;
  };
};

/**
 * Optional parameters.
 */
export interface CertificateListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field          | Supported operators    | Supported functions                         |
   * |----------------|------------------------|---------------------------------------------|
   * | id             | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | subject        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | thumbprint     | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | expirationDate | ge, le, eq, ne, gt, lt | N/A                                         |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type CertificateListResponse = CertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type CertificateGetResponse = CertificateGetHeaders &
  CertificateContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CertificateContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface CertificateCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The entity state (Etag) version of the certificate to update. A value of "*" can be used for If-Match to unconditionally apply the operation..
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type CertificateCreateOrUpdateResponse = CertificateContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateContract;
  };
};

/**
 * Optional parameters.
 */
export interface CertificateListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field          | Supported operators    | Supported functions                         |
   * |----------------|------------------------|---------------------------------------------|
   * | id             | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | subject        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | thumbprint     | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | expirationDate | ge, le, eq, ne, gt, lt | N/A                                         |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type CertificateListNextResponse = CertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateCollection;
  };
};

/**
 * Optional parameters.
 */
export interface EmailTemplateListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field          | Supported operators    | Supported functions                         |
   * |----------------|------------------------|---------------------------------------------|
   * | id             | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type EmailTemplateListResponse = EmailTemplateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EmailTemplateCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type EmailTemplateGetResponse = EmailTemplateGetHeaders &
  EmailTemplateContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EmailTemplateContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: EmailTemplateGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type EmailTemplateCreateOrUpdateResponse = EmailTemplateContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EmailTemplateContract;
  };
};

/**
 * Optional parameters.
 */
export interface EmailTemplateListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field          | Supported operators    | Supported functions                         |
   * |----------------|------------------------|---------------------------------------------|
   * | id             | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type EmailTemplateListNextResponse = EmailTemplateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EmailTemplateCollection;
  };
};

/**
 * Optional parameters.
 */
export interface GroupListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions                         |
   * |-------------|------------------------|---------------------------------------------|
   * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | type        | eq, ne                 | N/A                                         |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type GroupListResponse = GroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type GroupGetResponse = GroupGetHeaders &
  GroupContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GroupContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: GroupGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GroupCreateOrUpdateResponse = GroupContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupContract;
  };
};

/**
 * Optional parameters.
 */
export interface GroupListNextOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions                         |
   * |-------------|------------------------|---------------------------------------------|
   * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | type        | eq, ne                 | N/A                                         |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type GroupListNextResponse = GroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupCollection;
  };
};

/**
 * Optional parameters.
 */
export interface GroupUserListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field            | Supported operators    | Supported functions               |
   * |------------------|------------------------|-----------------------------------|
   * | id               | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | firstName        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | lastName         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | email            | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | state            | eq                     | N/A                               |
   * | registrationDate | ge, le, eq, ne, gt, lt | N/A                               |
   * | note             | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type GroupUserListResponse = UserCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserCollection;
  };
};

/**
 * Contains response data for the create operation.
 */
export type GroupUserCreateResponse = UserContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserContract;
  };
};

/**
 * Optional parameters.
 */
export interface GroupUserListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field            | Supported operators    | Supported functions               |
   * |------------------|------------------------|-----------------------------------|
   * | id               | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | firstName        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | lastName         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | email            | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | state            | eq                     | N/A                               |
   * | registrationDate | ge, le, eq, ne, gt, lt | N/A                               |
   * | note             | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type GroupUserListNextResponse = UserCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type IdentityProviderListResponse = IdentityProviderList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IdentityProviderList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IdentityProviderGetResponse = IdentityProviderGetHeaders &
  IdentityProviderContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IdentityProviderContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: IdentityProviderGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IdentityProviderCreateOrUpdateResponse = IdentityProviderContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IdentityProviderContract;
  };
};

/**
 * Optional parameters.
 */
export interface LoggerListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field | Supported operators    | Supported functions                         |
   * |-------|------------------------|---------------------------------------------|
   * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | type  | eq                     |                                             |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type LoggerListResponse = LoggerCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoggerCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type LoggerGetResponse = LoggerGetHeaders &
  LoggerContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoggerContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: LoggerGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LoggerCreateOrUpdateResponse = LoggerContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoggerContract;
  };
};

/**
 * Optional parameters.
 */
export interface LoggerListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field | Supported operators    | Supported functions                         |
   * |-------|------------------------|---------------------------------------------|
   * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | type  | eq                     |                                             |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type LoggerListNextResponse = LoggerCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoggerCollection;
  };
};

/**
 * Optional parameters.
 */
export interface OpenIdConnectProviderListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field | Supported operators    | Supported functions                         |
   * |-------|------------------------|---------------------------------------------|
   * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type OpenIdConnectProviderListResponse = OpenIdConnectProviderCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OpenIdConnectProviderCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type OpenIdConnectProviderGetResponse = OpenIdConnectProviderGetHeaders &
  OpenidConnectProviderContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OpenidConnectProviderContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: OpenIdConnectProviderGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type OpenIdConnectProviderCreateOrUpdateResponse = OpenidConnectProviderContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OpenidConnectProviderContract;
  };
};

/**
 * Optional parameters.
 */
export interface OpenIdConnectProviderListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field | Supported operators    | Supported functions                         |
   * |-------|------------------------|---------------------------------------------|
   * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type OpenIdConnectProviderListNextResponse = OpenIdConnectProviderCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OpenIdConnectProviderCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SignInSettingsGetResponse = SignInSettingsGetHeaders &
  PortalSigninSettings & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortalSigninSettings;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: SignInSettingsGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SignInSettingsCreateOrUpdateResponse = PortalSigninSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PortalSigninSettings;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SignUpSettingsGetResponse = SignUpSettingsGetHeaders &
  PortalSignupSettings & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortalSignupSettings;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: SignUpSettingsGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SignUpSettingsCreateOrUpdateResponse = PortalSignupSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PortalSignupSettings;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DelegationSettingsGetResponse = DelegationSettingsGetHeaders &
  PortalDelegationSettings & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortalDelegationSettings;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DelegationSettingsGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DelegationSettingsCreateOrUpdateResponse = PortalDelegationSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PortalDelegationSettings;
  };
};

/**
 * Optional parameters.
 */
export interface ProductListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions                         |
   * |-------------|------------------------|---------------------------------------------|
   * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | terms       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | state       | eq                     |                                             |
   */
  filter?: string;
  /**
   * When set to true, the response contains an array of groups that have visibility to the product. The default is false.
   */
  expandGroups?: boolean;
}

/**
 * Contains response data for the list operation.
 */
export type ProductListResponse = ProductCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ProductGetResponse = ProductGetHeaders &
  ProductContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProductContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ProductGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProductCreateOrUpdateResponse = ProductContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductContract;
  };
};

/**
 * Optional parameters.
 */
export interface ProductDeleteOptionalParams extends coreHttp.OperationOptions {
  /**
   * Delete existing subscriptions to the product or not.
   */
  deleteSubscriptions?: boolean;
}

/**
 * Optional parameters.
 */
export interface ProductListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions                         |
   * |-------------|------------------------|---------------------------------------------|
   * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | terms       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | state       | eq                     |                                             |
   */
  filter?: string;
  /**
   * When set to true, the response contains an array of groups that have visibility to the product. The default is false.
   */
  expandGroups?: boolean;
}

/**
 * Contains response data for the listNext operation.
 */
export type ProductListNextResponse = ProductCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProductApiListByProductOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions                         |
   * |-------------|------------------------|---------------------------------------------|
   * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | serviceUrl  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | path        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   *
   */
  filter?: string;
}

/**
 * Contains response data for the listByProduct operation.
 */
export type ProductApiListByProductResponse = ApiCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiCollection;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProductApiCreateOrUpdateResponse = ApiContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiContract;
  };
};

/**
 * Optional parameters.
 */
export interface ProductApiListByProductNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions                         |
   * |-------------|------------------------|---------------------------------------------|
   * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | serviceUrl  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | path        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   *
   */
  filter?: string;
}

/**
 * Contains response data for the listByProductNext operation.
 */
export type ProductApiListByProductNextResponse = ApiCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProductGroupListByProductOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions                         |
   * |-------------|------------------------|---------------------------------------------|
   * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | type        | eq, ne                 | N/A                                         |
   */
  filter?: string;
}

/**
 * Contains response data for the listByProduct operation.
 */
export type ProductGroupListByProductResponse = GroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupCollection;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProductGroupCreateOrUpdateResponse = GroupContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupContract;
  };
};

/**
 * Optional parameters.
 */
export interface ProductGroupListByProductNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions                         |
   * |-------------|------------------------|---------------------------------------------|
   * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | type        | eq, ne                 | N/A                                         |
   */
  filter?: string;
}

/**
 * Contains response data for the listByProductNext operation.
 */
export type ProductGroupListByProductNextResponse = GroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProductSubscriptionsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field        | Supported operators    | Supported functions                         |
   * |--------------|------------------------|---------------------------------------------|
   * | id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | state        | eq                     |                                             |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ProductSubscriptionsListResponse = SubscriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProductSubscriptionsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field        | Supported operators    | Supported functions                         |
   * |--------------|------------------------|---------------------------------------------|
   * | id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | state        | eq                     |                                             |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ProductSubscriptionsListNextResponse = SubscriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionCollection;
  };
};

/**
 * Contains response data for the listByProduct operation.
 */
export type ProductPolicyListByProductResponse = ProductPolicyListByProductHeaders &
  PolicyCollection & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyCollection;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ProductPolicyListByProductHeaders;
    };
  };

/**
 * Contains response data for the get operation.
 */
export type ProductPolicyGetResponse = ProductPolicyGetHeaders &
  PolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ProductPolicyGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProductPolicyCreateOrUpdateResponse = PolicyContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyContract;
  };
};

/**
 * Optional parameters.
 */
export interface PropertyListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field | Supported operators    | Supported functions                                   |
   * |-------|------------------------|-------------------------------------------------------|
   * | tags  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith, any, all |
   * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith           |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type PropertyListResponse = PropertyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PropertyCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PropertyGetResponse = PropertyGetHeaders &
  PropertyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PropertyContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PropertyGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PropertyCreateOrUpdateResponse = PropertyContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PropertyContract;
  };
};

/**
 * Optional parameters.
 */
export interface PropertyListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field | Supported operators    | Supported functions                                   |
   * |-------|------------------------|-------------------------------------------------------|
   * | tags  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith, any, all |
   * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith           |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type PropertyListNextResponse = PropertyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PropertyCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type QuotaByCounterKeysListResponse = QuotaCounterCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QuotaCounterCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type QuotaByPeriodKeysGetResponse = QuotaCounterContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QuotaCounterContract;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByApiOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByApi operation.
 */
export type ReportsListByApiResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByUserOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByUser operation.
 */
export type ReportsListByUserResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByOperationOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByOperation operation.
 */
export type ReportsListByOperationResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByProductOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByProduct operation.
 */
export type ReportsListByProductResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByGeoOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * The filter to apply on the operation.
   */
  filter?: string;
}

/**
 * Contains response data for the listByGeo operation.
 */
export type ReportsListByGeoResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * The filter to apply on the operation.
   */
  filter?: string;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type ReportsListBySubscriptionResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByTimeOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * The filter to apply on the operation.
   */
  filter?: string;
}

/**
 * Contains response data for the listByTime operation.
 */
export type ReportsListByTimeResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByRequestOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByRequest operation.
 */
export type ReportsListByRequestResponse = RequestReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RequestReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByApiNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByApiNext operation.
 */
export type ReportsListByApiNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByUserNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByUserNext operation.
 */
export type ReportsListByUserNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByOperationNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByOperationNext operation.
 */
export type ReportsListByOperationNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByProductNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByProductNext operation.
 */
export type ReportsListByProductNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByGeoNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * The filter to apply on the operation.
   */
  filter?: string;
}

/**
 * Contains response data for the listByGeoNext operation.
 */
export type ReportsListByGeoNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * The filter to apply on the operation.
   */
  filter?: string;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type ReportsListBySubscriptionNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByTimeNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * The filter to apply on the operation.
   */
  filter?: string;
}

/**
 * Contains response data for the listByTimeNext operation.
 */
export type ReportsListByTimeNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface SubscriptionListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field        | Supported operators    | Supported functions                         |
   * |--------------|------------------------|---------------------------------------------|
   * | id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | state        | eq                     |                                             |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type SubscriptionListResponse = SubscriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SubscriptionGetResponse = SubscriptionGetHeaders &
  SubscriptionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubscriptionContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: SubscriptionGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface SubscriptionCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Notify the subscriber of the subscription state change to Submitted or Active state.
   */
  notify?: Enum10;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SubscriptionCreateOrUpdateResponse = SubscriptionContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionContract;
  };
};

/**
 * Optional parameters.
 */
export interface SubscriptionUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Notify the subscriber of the subscription state change to Submitted or Active state.
   */
  notify?: Enum11;
}

/**
 * Optional parameters.
 */
export interface SubscriptionListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field        | Supported operators    | Supported functions                         |
   * |--------------|------------------------|---------------------------------------------|
   * | id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | state        | eq                     |                                             |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type SubscriptionListNextResponse = SubscriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type TenantAccessGetResponse = TenantAccessGetHeaders &
  AccessInformationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessInformationContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TenantAccessGetHeaders;
    };
  };

/**
 * Contains response data for the get operation.
 */
export type TenantAccessGitGetResponse = TenantAccessGitGetHeaders &
  AccessInformationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessInformationContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TenantAccessGitGetHeaders;
    };
  };

/**
 * Contains response data for the deploy operation.
 */
export type TenantConfigurationDeployResponse = OperationResultContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationResultContract;
  };
};

/**
 * Contains response data for the save operation.
 */
export type TenantConfigurationSaveResponse = OperationResultContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationResultContract;
  };
};

/**
 * Contains response data for the validate operation.
 */
export type TenantConfigurationValidateResponse = OperationResultContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationResultContract;
  };
};

/**
 * Contains response data for the getSyncState operation.
 */
export type TenantConfigurationGetSyncStateResponse = TenantConfigurationSyncStateContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TenantConfigurationSyncStateContract;
  };
};

/**
 * Optional parameters.
 */
export interface UserListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field            | Supported operators    | Supported functions               |
   * |------------------|------------------------|-----------------------------------|
   * | id               | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | firstName        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | lastName         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | email            | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | state            | eq                     | N/A                               |
   * | registrationDate | ge, le, eq, ne, gt, lt | N/A                               |
   * | note             | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type UserListResponse = UserCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type UserGetResponse = UserGetHeaders &
  UserContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UserContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: UserGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type UserCreateOrUpdateResponse = UserContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserContract;
  };
};

/**
 * Optional parameters.
 */
export interface UserDeleteOptionalParams extends coreHttp.OperationOptions {
  /**
   * Whether to delete user's subscription or not.
   */
  deleteSubscriptions?: Enum12;
  /**
   * Send an Account Closed Email notification to the User.
   */
  notify?: Enum13;
}

/**
 * Contains response data for the generateSsoUrl operation.
 */
export type UserGenerateSsoUrlResponse = GenerateSsoUrlResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GenerateSsoUrlResult;
  };
};

/**
 * Contains response data for the getSharedAccessToken operation.
 */
export type UserGetSharedAccessTokenResponse = UserTokenResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserTokenResult;
  };
};

/**
 * Optional parameters.
 */
export interface UserListNextOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field            | Supported operators    | Supported functions               |
   * |------------------|------------------------|-----------------------------------|
   * | id               | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | firstName        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | lastName         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | email            | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | state            | eq                     | N/A                               |
   * | registrationDate | ge, le, eq, ne, gt, lt | N/A                               |
   * | note             | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type UserListNextResponse = UserCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserCollection;
  };
};

/**
 * Optional parameters.
 */
export interface UserGroupListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions                         |
   * |-------------|------------------------|---------------------------------------------|
   * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type UserGroupListResponse = GroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupCollection;
  };
};

/**
 * Optional parameters.
 */
export interface UserGroupListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions                         |
   * |-------------|------------------------|---------------------------------------------|
   * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type UserGroupListNextResponse = GroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupCollection;
  };
};

/**
 * Optional parameters.
 */
export interface UserSubscriptionListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field        | Supported operators    | Supported functions                         |
   * |--------------|------------------------|---------------------------------------------|
   * | id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | state        | eq                     |                                             |
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type UserSubscriptionListResponse = SubscriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionCollection;
  };
};

/**
 * Optional parameters.
 */
export interface UserSubscriptionListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field        | Supported operators    | Supported functions                         |
   * |--------------|------------------------|---------------------------------------------|
   * | id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
   * | state        | eq                     |                                             |
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type UserSubscriptionListNextResponse = SubscriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type UserIdentitiesListResponse = UserIdentityCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserIdentityCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
