/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const PolicyCollection: coreHttp.CompositeMapper = {
  serializedName: "PolicyCollection",
  type: {
    name: "Composite",
    className: "PolicyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "PolicyContract",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PolicyContract" } }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyContract: coreHttp.CompositeMapper = {
  serializedName: "PolicyContract",
  type: {
    name: "Composite",
    className: "PolicyContract",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      policyContent: {
        serializedName: "policyContent",
        required: true,
        xmlName: "policyContent",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        xmlName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        xmlName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        xmlName: "details",
        xmlElementName: "ErrorFieldContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ErrorFieldContract" }
          }
        }
      }
    }
  }
};

export const ErrorFieldContract: coreHttp.CompositeMapper = {
  serializedName: "ErrorFieldContract",
  type: {
    name: "Composite",
    className: "ErrorFieldContract",
    modelProperties: {
      code: {
        serializedName: "code",
        xmlName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        xmlName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        xmlName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicySnippetsCollection: coreHttp.CompositeMapper = {
  serializedName: "PolicySnippetsCollection",
  type: {
    name: "Composite",
    className: "PolicySnippetsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "PolicySnippetContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PolicySnippetContract" }
          }
        }
      }
    }
  }
};

export const PolicySnippetContract: coreHttp.CompositeMapper = {
  serializedName: "PolicySnippetContract",
  type: {
    name: "Composite",
    className: "PolicySnippetContract",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      content: {
        serializedName: "content",
        readOnly: true,
        xmlName: "content",
        type: {
          name: "String"
        }
      },
      toolTip: {
        serializedName: "toolTip",
        readOnly: true,
        xmlName: "toolTip",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        readOnly: true,
        xmlName: "scope",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RegionListResult: coreHttp.CompositeMapper = {
  serializedName: "RegionListResult",
  type: {
    name: "Composite",
    className: "RegionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "RegionContract",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RegionContract" } }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegionContract: coreHttp.CompositeMapper = {
  serializedName: "RegionContract",
  type: {
    name: "Composite",
    className: "RegionContract",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      isMasterRegion: {
        serializedName: "isMasterRegion",
        xmlName: "isMasterRegion",
        type: {
          name: "Boolean"
        }
      },
      isDeleted: {
        serializedName: "isDeleted",
        xmlName: "isDeleted",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ApiCollection: coreHttp.CompositeMapper = {
  serializedName: "ApiCollection",
  type: {
    name: "Composite",
    className: "ApiCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "ApiContract",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ApiContract" } }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiEntityBaseContract: coreHttp.CompositeMapper = {
  serializedName: "ApiEntityBaseContract",
  type: {
    name: "Composite",
    className: "ApiEntityBaseContract",
    modelProperties: {
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      authenticationSettings: {
        serializedName: "authenticationSettings",
        xmlName: "authenticationSettings",
        type: {
          name: "Composite",
          className: "AuthenticationSettingsContract"
        }
      },
      subscriptionKeyParameterNames: {
        serializedName: "subscriptionKeyParameterNames",
        xmlName: "subscriptionKeyParameterNames",
        type: {
          name: "Composite",
          className: "SubscriptionKeyParameterNamesContract"
        }
      },
      apiType: {
        serializedName: "type",
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      apiRevision: {
        constraints: {
          MaxLength: 100,
          MinLength: 1
        },
        serializedName: "apiRevision",
        xmlName: "apiRevision",
        type: {
          name: "String"
        }
      },
      isCurrent: {
        serializedName: "isCurrent",
        xmlName: "isCurrent",
        type: {
          name: "Boolean"
        }
      },
      isOnline: {
        serializedName: "isOnline",
        xmlName: "isOnline",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AuthenticationSettingsContract: coreHttp.CompositeMapper = {
  serializedName: "AuthenticationSettingsContract",
  type: {
    name: "Composite",
    className: "AuthenticationSettingsContract",
    modelProperties: {
      oAuth2: {
        serializedName: "oAuth2",
        xmlName: "oAuth2",
        type: {
          name: "Composite",
          className: "OAuth2AuthenticationSettingsContract"
        }
      }
    }
  }
};

export const OAuth2AuthenticationSettingsContract: coreHttp.CompositeMapper = {
  serializedName: "OAuth2AuthenticationSettingsContract",
  type: {
    name: "Composite",
    className: "OAuth2AuthenticationSettingsContract",
    modelProperties: {
      authorizationServerId: {
        serializedName: "authorizationServerId",
        xmlName: "authorizationServerId",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        xmlName: "scope",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionKeyParameterNamesContract: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionKeyParameterNamesContract",
  type: {
    name: "Composite",
    className: "SubscriptionKeyParameterNamesContract",
    modelProperties: {
      header: {
        serializedName: "header",
        xmlName: "header",
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        xmlName: "query",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiContractProperties: coreHttp.CompositeMapper = {
  serializedName: "ApiContractProperties",
  type: {
    name: "Composite",
    className: "ApiContractProperties",
    modelProperties: {
      ...ApiEntityBaseContract.type.modelProperties,
      name: {
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      serviceUrl: {
        constraints: {
          MaxLength: 2000,
          MinLength: 1
        },
        serializedName: "serviceUrl",
        xmlName: "serviceUrl",
        type: {
          name: "String"
        }
      },
      path: {
        constraints: {
          MaxLength: 400
        },
        serializedName: "path",
        required: true,
        xmlName: "path",
        type: {
          name: "String"
        }
      },
      protocols: {
        serializedName: "protocols",
        xmlName: "protocols",
        xmlElementName: "Protocol",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Enum", allowedValues: ["http", "https"] },
            serializedName: "Protocol"
          }
        }
      }
    }
  }
};

export const ApiContract: coreHttp.CompositeMapper = {
  serializedName: "ApiContract",
  type: {
    name: "Composite",
    className: "ApiContract",
    modelProperties: {
      ...ApiContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiCreateOrUpdateParameter: coreHttp.CompositeMapper = {
  serializedName: "ApiCreateOrUpdateParameter",
  type: {
    name: "Composite",
    className: "ApiCreateOrUpdateParameter",
    modelProperties: {
      ...ApiContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      contentValue: {
        serializedName: "contentValue",
        xmlName: "contentValue",
        type: {
          name: "String"
        }
      },
      contentFormat: {
        serializedName: "contentFormat",
        xmlName: "contentFormat",
        type: {
          name: "String"
        }
      },
      wsdlSelector: {
        serializedName: "wsdlSelector",
        xmlName: "wsdlSelector",
        type: {
          name: "Composite",
          className: "ApiCreateOrUpdateParameterWsdlSelector"
        }
      }
    }
  }
};

export const ApiCreateOrUpdateParameterWsdlSelector: coreHttp.CompositeMapper = {
  serializedName: "ApiCreateOrUpdateParameterWsdlSelector",
  type: {
    name: "Composite",
    className: "ApiCreateOrUpdateParameterWsdlSelector",
    modelProperties: {
      wsdlServiceName: {
        serializedName: "wsdlServiceName",
        xmlName: "wsdlServiceName",
        type: {
          name: "String"
        }
      },
      wsdlEndpointName: {
        serializedName: "wsdlEndpointName",
        xmlName: "wsdlEndpointName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiUpdateContract: coreHttp.CompositeMapper = {
  serializedName: "ApiUpdateContract",
  type: {
    name: "Composite",
    className: "ApiUpdateContract",
    modelProperties: {
      ...ApiEntityBaseContract.type.modelProperties,
      name: {
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      serviceUrl: {
        constraints: {
          MaxLength: 2000,
          MinLength: 1
        },
        serializedName: "serviceUrl",
        xmlName: "serviceUrl",
        type: {
          name: "String"
        }
      },
      path: {
        constraints: {
          MaxLength: 400
        },
        serializedName: "path",
        xmlName: "path",
        type: {
          name: "String"
        }
      },
      protocols: {
        serializedName: "protocols",
        xmlName: "protocols",
        xmlElementName: "Protocol",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Enum", allowedValues: ["http", "https"] },
            serializedName: "Protocol"
          }
        }
      }
    }
  }
};

export const OperationCollection: coreHttp.CompositeMapper = {
  serializedName: "OperationCollection",
  type: {
    name: "Composite",
    className: "OperationCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "OperationContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "OperationContract" }
          }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationEntityBaseContract: coreHttp.CompositeMapper = {
  serializedName: "OperationEntityBaseContract",
  type: {
    name: "Composite",
    className: "OperationEntityBaseContract",
    modelProperties: {
      templateParameters: {
        serializedName: "templateParameters",
        xmlName: "templateParameters",
        xmlElementName: "ParameterContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ParameterContract" }
          }
        }
      },
      description: {
        constraints: {
          MaxLength: 1000
        },
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      request: {
        serializedName: "request",
        xmlName: "request",
        type: {
          name: "Composite",
          className: "RequestContract"
        }
      },
      responses: {
        serializedName: "responses",
        xmlName: "responses",
        xmlElementName: "ResponseContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ResponseContract" }
          }
        }
      },
      policies: {
        serializedName: "policies",
        xmlName: "policies",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ParameterContract: coreHttp.CompositeMapper = {
  serializedName: "ParameterContract",
  type: {
    name: "Composite",
    className: "ParameterContract",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "defaultValue",
        xmlName: "defaultValue",
        type: {
          name: "String"
        }
      },
      required: {
        serializedName: "required",
        xmlName: "required",
        type: {
          name: "Boolean"
        }
      },
      values: {
        serializedName: "values",
        xmlName: "values",
        xmlElementName: "ParameterContractValuesItem",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ParameterContractValuesItem"
          }
        }
      }
    }
  }
};

export const RequestContract: coreHttp.CompositeMapper = {
  serializedName: "RequestContract",
  type: {
    name: "Composite",
    className: "RequestContract",
    modelProperties: {
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      queryParameters: {
        serializedName: "queryParameters",
        xmlName: "queryParameters",
        xmlElementName: "ParameterContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ParameterContract" }
          }
        }
      },
      headers: {
        serializedName: "headers",
        xmlName: "headers",
        xmlElementName: "ParameterContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ParameterContract" }
          }
        }
      },
      representations: {
        serializedName: "representations",
        xmlName: "representations",
        xmlElementName: "RepresentationContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RepresentationContract" }
          }
        }
      }
    }
  }
};

export const RepresentationContract: coreHttp.CompositeMapper = {
  serializedName: "RepresentationContract",
  type: {
    name: "Composite",
    className: "RepresentationContract",
    modelProperties: {
      contentType: {
        serializedName: "contentType",
        required: true,
        xmlName: "contentType",
        type: {
          name: "String"
        }
      },
      sample: {
        serializedName: "sample",
        xmlName: "sample",
        type: {
          name: "String"
        }
      },
      schemaId: {
        serializedName: "schemaId",
        xmlName: "schemaId",
        type: {
          name: "String"
        }
      },
      typeName: {
        serializedName: "typeName",
        xmlName: "typeName",
        type: {
          name: "String"
        }
      },
      formParameters: {
        serializedName: "formParameters",
        xmlName: "formParameters",
        xmlElementName: "ParameterContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ParameterContract" }
          }
        }
      }
    }
  }
};

export const ResponseContract: coreHttp.CompositeMapper = {
  serializedName: "ResponseContract",
  type: {
    name: "Composite",
    className: "ResponseContract",
    modelProperties: {
      statusCode: {
        serializedName: "statusCode",
        required: true,
        xmlName: "statusCode",
        type: {
          name: "Number"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      representations: {
        serializedName: "representations",
        xmlName: "representations",
        xmlElementName: "RepresentationContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RepresentationContract" }
          }
        }
      },
      headers: {
        serializedName: "headers",
        xmlName: "headers",
        xmlElementName: "ParameterContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ParameterContract" }
          }
        }
      }
    }
  }
};

export const OperationContractProperties: coreHttp.CompositeMapper = {
  serializedName: "OperationContractProperties",
  type: {
    name: "Composite",
    className: "OperationContractProperties",
    modelProperties: {
      ...OperationEntityBaseContract.type.modelProperties,
      name: {
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      method: {
        serializedName: "method",
        required: true,
        xmlName: "method",
        type: {
          name: "String"
        }
      },
      urlTemplate: {
        constraints: {
          MaxLength: 1000,
          MinLength: 1
        },
        serializedName: "urlTemplate",
        required: true,
        xmlName: "urlTemplate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationContract: coreHttp.CompositeMapper = {
  serializedName: "OperationContract",
  type: {
    name: "Composite",
    className: "OperationContract",
    modelProperties: {
      ...OperationContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationUpdateContract: coreHttp.CompositeMapper = {
  serializedName: "OperationUpdateContract",
  type: {
    name: "Composite",
    className: "OperationUpdateContract",
    modelProperties: {
      ...OperationEntityBaseContract.type.modelProperties,
      name: {
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      method: {
        serializedName: "method",
        xmlName: "method",
        type: {
          name: "String"
        }
      },
      urlTemplate: {
        constraints: {
          MaxLength: 1000,
          MinLength: 1
        },
        serializedName: "urlTemplate",
        xmlName: "urlTemplate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProductCollection: coreHttp.CompositeMapper = {
  serializedName: "ProductCollection",
  type: {
    name: "Composite",
    className: "ProductCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "ProductContract",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ProductContract" } }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProductEntityBaseParameters: coreHttp.CompositeMapper = {
  serializedName: "ProductEntityBaseParameters",
  type: {
    name: "Composite",
    className: "ProductEntityBaseParameters",
    modelProperties: {
      description: {
        constraints: {
          MaxLength: 1000,
          MinLength: 1
        },
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      terms: {
        serializedName: "terms",
        xmlName: "terms",
        type: {
          name: "String"
        }
      },
      subscriptionRequired: {
        serializedName: "subscriptionRequired",
        xmlName: "subscriptionRequired",
        type: {
          name: "Boolean"
        }
      },
      approvalRequired: {
        serializedName: "approvalRequired",
        xmlName: "approvalRequired",
        type: {
          name: "Boolean"
        }
      },
      subscriptionsLimit: {
        serializedName: "subscriptionsLimit",
        xmlName: "subscriptionsLimit",
        type: {
          name: "Number"
        }
      },
      state: {
        serializedName: "state",
        xmlName: "state",
        type: {
          name: "Enum",
          allowedValues: ["notPublished", "published"]
        }
      }
    }
  }
};

export const ProductContractProperties: coreHttp.CompositeMapper = {
  serializedName: "ProductContractProperties",
  type: {
    name: "Composite",
    className: "ProductContractProperties",
    modelProperties: {
      ...ProductEntityBaseParameters.type.modelProperties,
      name: {
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProductContract: coreHttp.CompositeMapper = {
  serializedName: "ProductContract",
  type: {
    name: "Composite",
    className: "ProductContract",
    modelProperties: {
      ...ProductContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SchemaCollection: coreHttp.CompositeMapper = {
  serializedName: "SchemaCollection",
  type: {
    name: "Composite",
    className: "SchemaCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "SchemaContract",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SchemaContract" } }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SchemaContractProperties: coreHttp.CompositeMapper = {
  serializedName: "SchemaContractProperties",
  type: {
    name: "Composite",
    className: "SchemaContractProperties",
    modelProperties: {
      contentType: {
        serializedName: "contentType",
        required: true,
        xmlName: "contentType",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "document.value",
        xmlName: "document.value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SchemaContract: coreHttp.CompositeMapper = {
  serializedName: "SchemaContract",
  type: {
    name: "Composite",
    className: "SchemaContract",
    modelProperties: {
      ...SchemaContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiExportResult: coreHttp.CompositeMapper = {
  serializedName: "ApiExportResult",
  type: {
    name: "Composite",
    className: "ApiExportResult",
    modelProperties: {
      link: {
        serializedName: "link",
        xmlName: "link",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthorizationServerCollection: coreHttp.CompositeMapper = {
  serializedName: "AuthorizationServerCollection",
  type: {
    name: "Composite",
    className: "AuthorizationServerCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "AuthorizationServerContract",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AuthorizationServerContract"
            }
          }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthorizationServerContractBaseProperties: coreHttp.CompositeMapper = {
  serializedName: "AuthorizationServerContractBaseProperties",
  type: {
    name: "Composite",
    className: "AuthorizationServerContractBaseProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      authorizationMethods: {
        serializedName: "authorizationMethods",
        xmlName: "authorizationMethods",
        xmlElementName: "AuthorizationMethod",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "HEAD",
                "OPTIONS",
                "TRACE",
                "GET",
                "POST",
                "PUT",
                "PATCH",
                "DELETE"
              ]
            },
            serializedName: "AuthorizationMethod"
          }
        }
      },
      clientAuthenticationMethod: {
        serializedName: "clientAuthenticationMethod",
        xmlName: "clientAuthenticationMethod",
        xmlElementName: "ClientAuthenticationMethod",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ClientAuthenticationMethod"
          }
        }
      },
      tokenBodyParameters: {
        serializedName: "tokenBodyParameters",
        xmlName: "tokenBodyParameters",
        xmlElementName: "TokenBodyParameterContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TokenBodyParameterContract" }
          }
        }
      },
      tokenEndpoint: {
        serializedName: "tokenEndpoint",
        xmlName: "tokenEndpoint",
        type: {
          name: "String"
        }
      },
      supportState: {
        serializedName: "supportState",
        xmlName: "supportState",
        type: {
          name: "Boolean"
        }
      },
      defaultScope: {
        serializedName: "defaultScope",
        xmlName: "defaultScope",
        type: {
          name: "String"
        }
      },
      bearerTokenSendingMethods: {
        serializedName: "bearerTokenSendingMethods",
        xmlName: "bearerTokenSendingMethods",
        xmlElementName: "BearerTokenSendingMethod",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "BearerTokenSendingMethod"
          }
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        xmlName: "clientSecret",
        type: {
          name: "String"
        }
      },
      resourceOwnerUsername: {
        serializedName: "resourceOwnerUsername",
        xmlName: "resourceOwnerUsername",
        type: {
          name: "String"
        }
      },
      resourceOwnerPassword: {
        serializedName: "resourceOwnerPassword",
        xmlName: "resourceOwnerPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TokenBodyParameterContract: coreHttp.CompositeMapper = {
  serializedName: "TokenBodyParameterContract",
  type: {
    name: "Composite",
    className: "TokenBodyParameterContract",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthorizationServerContractProperties: coreHttp.CompositeMapper = {
  serializedName: "AuthorizationServerContractProperties",
  type: {
    name: "Composite",
    className: "AuthorizationServerContractProperties",
    modelProperties: {
      ...AuthorizationServerContractBaseProperties.type.modelProperties,
      name: {
        constraints: {
          MaxLength: 50,
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      clientRegistrationEndpoint: {
        serializedName: "clientRegistrationEndpoint",
        required: true,
        xmlName: "clientRegistrationEndpoint",
        type: {
          name: "String"
        }
      },
      authorizationEndpoint: {
        serializedName: "authorizationEndpoint",
        required: true,
        xmlName: "authorizationEndpoint",
        type: {
          name: "String"
        }
      },
      grantTypes: {
        serializedName: "grantTypes",
        required: true,
        xmlName: "grantTypes",
        xmlElementName: "GrantType",
        type: {
          name: "Sequence",
          element: { type: { name: "String" }, serializedName: "GrantType" }
        }
      },
      clientId: {
        serializedName: "clientId",
        required: true,
        xmlName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthorizationServerContract: coreHttp.CompositeMapper = {
  serializedName: "AuthorizationServerContract",
  type: {
    name: "Composite",
    className: "AuthorizationServerContract",
    modelProperties: {
      ...AuthorizationServerContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthorizationServerUpdateContract: coreHttp.CompositeMapper = {
  serializedName: "AuthorizationServerUpdateContract",
  type: {
    name: "Composite",
    className: "AuthorizationServerUpdateContract",
    modelProperties: {
      ...AuthorizationServerContractBaseProperties.type.modelProperties,
      name: {
        constraints: {
          MaxLength: 50,
          MinLength: 1
        },
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      clientRegistrationEndpoint: {
        serializedName: "clientRegistrationEndpoint",
        xmlName: "clientRegistrationEndpoint",
        type: {
          name: "String"
        }
      },
      authorizationEndpoint: {
        serializedName: "authorizationEndpoint",
        xmlName: "authorizationEndpoint",
        type: {
          name: "String"
        }
      },
      grantTypes: {
        serializedName: "grantTypes",
        xmlName: "grantTypes",
        xmlElementName: "GrantType",
        type: {
          name: "Sequence",
          element: { type: { name: "String" }, serializedName: "GrantType" }
        }
      },
      clientId: {
        serializedName: "clientId",
        xmlName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackendCollection: coreHttp.CompositeMapper = {
  serializedName: "BackendCollection",
  type: {
    name: "Composite",
    className: "BackendCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "BackendContract",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "BackendContract" } }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackendBaseParameters: coreHttp.CompositeMapper = {
  serializedName: "BackendBaseParameters",
  type: {
    name: "Composite",
    className: "BackendBaseParameters",
    modelProperties: {
      title: {
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        serializedName: "title",
        xmlName: "title",
        type: {
          name: "String"
        }
      },
      description: {
        constraints: {
          MaxLength: 2000,
          MinLength: 1
        },
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      resourceId: {
        constraints: {
          MaxLength: 2000,
          MinLength: 1
        },
        serializedName: "resourceId",
        xmlName: "resourceId",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        xmlName: "properties",
        type: {
          name: "Composite",
          className: "BackendProperties"
        }
      },
      credentials: {
        serializedName: "credentials",
        xmlName: "credentials",
        type: {
          name: "Composite",
          className: "BackendCredentialsContract"
        }
      },
      proxy: {
        serializedName: "proxy",
        xmlName: "proxy",
        type: {
          name: "Composite",
          className: "BackendProxyContract"
        }
      },
      tls: {
        serializedName: "tls",
        xmlName: "tls",
        type: {
          name: "Composite",
          className: "BackendTlsProperties"
        }
      }
    }
  }
};

export const BackendProperties: coreHttp.CompositeMapper = {
  serializedName: "BackendProperties",
  type: {
    name: "Composite",
    className: "BackendProperties",
    modelProperties: {
      serviceFabricCluster: {
        serializedName: "serviceFabricCluster",
        xmlName: "serviceFabricCluster",
        type: {
          name: "Composite",
          className: "BackendServiceFabricClusterProperties"
        }
      }
    }
  }
};

export const BackendServiceFabricClusterProperties: coreHttp.CompositeMapper = {
  serializedName: "BackendServiceFabricClusterProperties",
  type: {
    name: "Composite",
    className: "BackendServiceFabricClusterProperties",
    modelProperties: {
      clientCertificateThumbprint: {
        serializedName: "clientCertificateThumbprint",
        required: true,
        xmlName: "clientCertificateThumbprint",
        type: {
          name: "String"
        }
      },
      maxPartitionResolutionRetries: {
        serializedName: "maxPartitionResolutionRetries",
        xmlName: "maxPartitionResolutionRetries",
        type: {
          name: "Number"
        }
      },
      partitionResolutionRequestTimeout: {
        serializedName: "partitionResolutionRequestTimeout",
        xmlName: "partitionResolutionRequestTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      managementEndpoints: {
        serializedName: "managementEndpoints",
        required: true,
        xmlName: "managementEndpoints",
        xmlElementName:
          "BackendServiceFabricClusterPropertiesManagementEndpointsItem",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "BackendServiceFabricClusterPropertiesManagementEndpointsItem"
          }
        }
      },
      serverCertificateThumbprints: {
        serializedName: "serverCertificateThumbprints",
        xmlName: "serverCertificateThumbprints",
        xmlElementName:
          "BackendServiceFabricClusterPropertiesServerCertificateThumbprintsItem",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "BackendServiceFabricClusterPropertiesServerCertificateThumbprintsItem"
          }
        }
      },
      serverX509Names: {
        serializedName: "serverX509Names",
        xmlName: "serverX509Names",
        xmlElementName: "X509CertificateName",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "X509CertificateName" }
          }
        }
      }
    }
  }
};

export const X509CertificateName: coreHttp.CompositeMapper = {
  serializedName: "X509CertificateName",
  type: {
    name: "Composite",
    className: "X509CertificateName",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      issuerCertificateThumbprint: {
        serializedName: "issuerCertificateThumbprint",
        xmlName: "issuerCertificateThumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackendCredentialsContract: coreHttp.CompositeMapper = {
  serializedName: "BackendCredentialsContract",
  type: {
    name: "Composite",
    className: "BackendCredentialsContract",
    modelProperties: {
      certificate: {
        constraints: {
          MaxItems: 32
        },
        serializedName: "certificate",
        xmlName: "certificate",
        xmlElementName: "BackendCredentialsContractCertificateItem",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "BackendCredentialsContractCertificateItem"
          }
        }
      },
      query: {
        serializedName: "query",
        xmlName: "query",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: { name: "String" },
                serializedName: "BackendCredentialsContractQueryItemsItem"
              }
            },
            serializedName: "ArrayOfBackendCredentialsContractQueryItemsItem"
          }
        }
      },
      header: {
        serializedName: "header",
        xmlName: "header",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: { name: "String" },
                serializedName: "BackendCredentialsContractHeaderItemsItem"
              }
            },
            serializedName: "ArrayOfBackendCredentialsContractHeaderItemsItem"
          }
        }
      },
      authorization: {
        serializedName: "authorization",
        xmlName: "authorization",
        type: {
          name: "Composite",
          className: "BackendAuthorizationHeaderCredentials"
        }
      }
    }
  }
};

export const BackendAuthorizationHeaderCredentials: coreHttp.CompositeMapper = {
  serializedName: "BackendAuthorizationHeaderCredentials",
  type: {
    name: "Composite",
    className: "BackendAuthorizationHeaderCredentials",
    modelProperties: {
      scheme: {
        constraints: {
          MaxLength: 100,
          MinLength: 1
        },
        serializedName: "scheme",
        required: true,
        xmlName: "scheme",
        type: {
          name: "String"
        }
      },
      parameter: {
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        serializedName: "parameter",
        required: true,
        xmlName: "parameter",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackendProxyContract: coreHttp.CompositeMapper = {
  serializedName: "BackendProxyContract",
  type: {
    name: "Composite",
    className: "BackendProxyContract",
    modelProperties: {
      url: {
        constraints: {
          MaxLength: 2000,
          MinLength: 1
        },
        serializedName: "url",
        required: true,
        xmlName: "url",
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        xmlName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        xmlName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackendTlsProperties: coreHttp.CompositeMapper = {
  serializedName: "BackendTlsProperties",
  type: {
    name: "Composite",
    className: "BackendTlsProperties",
    modelProperties: {
      validateCertificateChain: {
        defaultValue: true,
        serializedName: "validateCertificateChain",
        xmlName: "validateCertificateChain",
        type: {
          name: "Boolean"
        }
      },
      validateCertificateName: {
        defaultValue: true,
        serializedName: "validateCertificateName",
        xmlName: "validateCertificateName",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const BackendContractProperties: coreHttp.CompositeMapper = {
  serializedName: "BackendContractProperties",
  type: {
    name: "Composite",
    className: "BackendContractProperties",
    modelProperties: {
      ...BackendBaseParameters.type.modelProperties,
      url: {
        constraints: {
          MaxLength: 2000,
          MinLength: 1
        },
        serializedName: "url",
        required: true,
        xmlName: "url",
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        xmlName: "protocol",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackendContract: coreHttp.CompositeMapper = {
  serializedName: "BackendContract",
  type: {
    name: "Composite",
    className: "BackendContract",
    modelProperties: {
      ...BackendContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackendUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "BackendUpdateParameters",
  type: {
    name: "Composite",
    className: "BackendUpdateParameters",
    modelProperties: {
      ...BackendBaseParameters.type.modelProperties,
      url: {
        constraints: {
          MaxLength: 2000,
          MinLength: 1
        },
        serializedName: "url",
        xmlName: "url",
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        xmlName: "protocol",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateCollection: coreHttp.CompositeMapper = {
  serializedName: "CertificateCollection",
  type: {
    name: "Composite",
    className: "CertificateCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "CertificateContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CertificateContract" }
          }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateContractProperties: coreHttp.CompositeMapper = {
  serializedName: "CertificateContractProperties",
  type: {
    name: "Composite",
    className: "CertificateContractProperties",
    modelProperties: {
      subject: {
        serializedName: "subject",
        required: true,
        xmlName: "subject",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        required: true,
        xmlName: "thumbprint",
        type: {
          name: "String"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        required: true,
        xmlName: "expirationDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CertificateContract: coreHttp.CompositeMapper = {
  serializedName: "CertificateContract",
  type: {
    name: "Composite",
    className: "CertificateContract",
    modelProperties: {
      ...CertificateContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "CertificateCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "CertificateCreateOrUpdateParameters",
    modelProperties: {
      data: {
        serializedName: "data",
        required: true,
        xmlName: "data",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        xmlName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EmailTemplateCollection: coreHttp.CompositeMapper = {
  serializedName: "EmailTemplateCollection",
  type: {
    name: "Composite",
    className: "EmailTemplateCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "EmailTemplateContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EmailTemplateContract" }
          }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EmailTemplateContractProperties: coreHttp.CompositeMapper = {
  serializedName: "EmailTemplateContractProperties",
  type: {
    name: "Composite",
    className: "EmailTemplateContractProperties",
    modelProperties: {
      subject: {
        constraints: {
          MaxLength: 1000,
          MinLength: 1
        },
        serializedName: "subject",
        required: true,
        xmlName: "subject",
        type: {
          name: "String"
        }
      },
      body: {
        constraints: {
          MinLength: 1
        },
        serializedName: "body",
        required: true,
        xmlName: "body",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        xmlName: "title",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      isDefault: {
        serializedName: "isDefault",
        readOnly: true,
        xmlName: "isDefault",
        type: {
          name: "Boolean"
        }
      },
      parameters: {
        serializedName: "parameters",
        xmlName: "parameters",
        xmlElementName: "EmailTemplateParametersContractProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EmailTemplateParametersContractProperties"
            }
          }
        }
      }
    }
  }
};

export const EmailTemplateParametersContractProperties: coreHttp.CompositeMapper = {
  serializedName: "EmailTemplateParametersContractProperties",
  type: {
    name: "Composite",
    className: "EmailTemplateParametersContractProperties",
    modelProperties: {
      name: {
        constraints: {
          Pattern: new RegExp("^[A-Za-z0-9-._]+$"),
          MaxLength: 256,
          MinLength: 1
        },
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      title: {
        constraints: {
          MaxLength: 4096,
          MinLength: 1
        },
        serializedName: "title",
        xmlName: "title",
        type: {
          name: "String"
        }
      },
      description: {
        constraints: {
          Pattern: new RegExp("^[A-Za-z0-9-._]+$"),
          MaxLength: 256,
          MinLength: 1
        },
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EmailTemplateContract: coreHttp.CompositeMapper = {
  serializedName: "EmailTemplateContract",
  type: {
    name: "Composite",
    className: "EmailTemplateContract",
    modelProperties: {
      ...EmailTemplateContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EmailTemplateUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "EmailTemplateUpdateParameters",
  type: {
    name: "Composite",
    className: "EmailTemplateUpdateParameters",
    modelProperties: {
      subject: {
        constraints: {
          MaxLength: 1000,
          MinLength: 1
        },
        serializedName: "subject",
        xmlName: "subject",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        xmlName: "title",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      body: {
        constraints: {
          MinLength: 1
        },
        serializedName: "body",
        xmlName: "body",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        xmlName: "parameters",
        xmlElementName: "EmailTemplateParametersContractProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EmailTemplateParametersContractProperties"
            }
          }
        }
      }
    }
  }
};

export const GroupCollection: coreHttp.CompositeMapper = {
  serializedName: "GroupCollection",
  type: {
    name: "Composite",
    className: "GroupCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "GroupContract",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "GroupContract" } }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupContractProperties: coreHttp.CompositeMapper = {
  serializedName: "GroupContractProperties",
  type: {
    name: "Composite",
    className: "GroupContractProperties",
    modelProperties: {
      name: {
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        constraints: {
          MaxLength: 1000
        },
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      builtIn: {
        serializedName: "builtIn",
        readOnly: true,
        xmlName: "builtIn",
        type: {
          name: "Boolean"
        }
      },
      type: {
        serializedName: "type",
        xmlName: "type",
        type: {
          name: "Enum",
          allowedValues: ["custom", "system", "external"]
        }
      },
      externalId: {
        serializedName: "externalId",
        xmlName: "externalId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupContract: coreHttp.CompositeMapper = {
  serializedName: "GroupContract",
  type: {
    name: "Composite",
    className: "GroupContract",
    modelProperties: {
      ...GroupContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "GroupCreateParameters",
  type: {
    name: "Composite",
    className: "GroupCreateParameters",
    modelProperties: {
      name: {
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        xmlName: "type",
        type: {
          name: "Enum",
          allowedValues: ["custom", "system", "external"]
        }
      },
      externalId: {
        serializedName: "externalId",
        xmlName: "externalId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "GroupUpdateParameters",
  type: {
    name: "Composite",
    className: "GroupUpdateParameters",
    modelProperties: {
      name: {
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        xmlName: "type",
        type: {
          name: "Enum",
          allowedValues: ["custom", "system", "external"]
        }
      },
      externalId: {
        serializedName: "externalId",
        xmlName: "externalId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserCollection: coreHttp.CompositeMapper = {
  serializedName: "UserCollection",
  type: {
    name: "Composite",
    className: "UserCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "UserContract",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UserContract" } }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserEntityBaseParameters: coreHttp.CompositeMapper = {
  serializedName: "UserEntityBaseParameters",
  type: {
    name: "Composite",
    className: "UserEntityBaseParameters",
    modelProperties: {
      state: {
        defaultValue: "active",
        serializedName: "state",
        xmlName: "state",
        type: {
          name: "String"
        }
      },
      note: {
        serializedName: "note",
        xmlName: "note",
        type: {
          name: "String"
        }
      },
      identities: {
        serializedName: "identities",
        readOnly: true,
        xmlName: "identities",
        xmlElementName: "UserIdentityContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "UserIdentityContract" }
          }
        }
      }
    }
  }
};

export const UserIdentityContract: coreHttp.CompositeMapper = {
  serializedName: "UserIdentityContract",
  type: {
    name: "Composite",
    className: "UserIdentityContract",
    modelProperties: {
      provider: {
        serializedName: "provider",
        xmlName: "provider",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserContractProperties: coreHttp.CompositeMapper = {
  serializedName: "UserContractProperties",
  type: {
    name: "Composite",
    className: "UserContractProperties",
    modelProperties: {
      ...UserEntityBaseParameters.type.modelProperties,
      firstName: {
        serializedName: "firstName",
        xmlName: "firstName",
        type: {
          name: "String"
        }
      },
      lastName: {
        serializedName: "lastName",
        xmlName: "lastName",
        type: {
          name: "String"
        }
      },
      email: {
        serializedName: "email",
        xmlName: "email",
        type: {
          name: "String"
        }
      },
      registrationDate: {
        serializedName: "registrationDate",
        xmlName: "registrationDate",
        type: {
          name: "DateTime"
        }
      },
      groups: {
        serializedName: "groups",
        readOnly: true,
        xmlName: "groups",
        xmlElementName: "GroupContract",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "GroupContract" } }
        }
      }
    }
  }
};

export const UserContract: coreHttp.CompositeMapper = {
  serializedName: "UserContract",
  type: {
    name: "Composite",
    className: "UserContract",
    modelProperties: {
      ...UserContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityProviderList: coreHttp.CompositeMapper = {
  serializedName: "IdentityProviderList",
  type: {
    name: "Composite",
    className: "IdentityProviderList",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "IdentityProviderContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "IdentityProviderContract" }
          }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IdentityProviderBaseParameters: coreHttp.CompositeMapper = {
  serializedName: "IdentityProviderBaseParameters",
  type: {
    name: "Composite",
    className: "IdentityProviderBaseParameters",
    modelProperties: {
      type: {
        serializedName: "type",
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      allowedTenants: {
        constraints: {
          MaxItems: 32
        },
        serializedName: "allowedTenants",
        xmlName: "allowedTenants",
        xmlElementName: "IdentityProviderBaseParametersAllowedTenantsItem",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "IdentityProviderBaseParametersAllowedTenantsItem"
          }
        }
      },
      signupPolicyName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "signupPolicyName",
        xmlName: "signupPolicyName",
        type: {
          name: "String"
        }
      },
      signinPolicyName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "signinPolicyName",
        xmlName: "signinPolicyName",
        type: {
          name: "String"
        }
      },
      profileEditingPolicyName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "profileEditingPolicyName",
        xmlName: "profileEditingPolicyName",
        type: {
          name: "String"
        }
      },
      passwordResetPolicyName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "passwordResetPolicyName",
        xmlName: "passwordResetPolicyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityProviderContractProperties: coreHttp.CompositeMapper = {
  serializedName: "IdentityProviderContractProperties",
  type: {
    name: "Composite",
    className: "IdentityProviderContractProperties",
    modelProperties: {
      ...IdentityProviderBaseParameters.type.modelProperties,
      clientId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "clientId",
        required: true,
        xmlName: "clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        constraints: {
          MinLength: 1
        },
        serializedName: "clientSecret",
        required: true,
        xmlName: "clientSecret",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityProviderContract: coreHttp.CompositeMapper = {
  serializedName: "IdentityProviderContract",
  type: {
    name: "Composite",
    className: "IdentityProviderContract",
    modelProperties: {
      ...IdentityProviderContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityProviderUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "IdentityProviderUpdateParameters",
  type: {
    name: "Composite",
    className: "IdentityProviderUpdateParameters",
    modelProperties: {
      ...IdentityProviderBaseParameters.type.modelProperties,
      clientId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "clientId",
        xmlName: "clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        constraints: {
          MinLength: 1
        },
        serializedName: "clientSecret",
        xmlName: "clientSecret",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoggerCollection: coreHttp.CompositeMapper = {
  serializedName: "LoggerCollection",
  type: {
    name: "Composite",
    className: "LoggerCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "LoggerContract",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "LoggerContract" } }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoggerContractProperties: coreHttp.CompositeMapper = {
  serializedName: "LoggerContractProperties",
  type: {
    name: "Composite",
    className: "LoggerContractProperties",
    modelProperties: {
      loggerType: {
        defaultValue: "azureEventHub",
        serializedName: "loggerType",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      description: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        required: true,
        xmlName: "credentials",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      isBuffered: {
        serializedName: "isBuffered",
        xmlName: "isBuffered",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const LoggerContract: coreHttp.CompositeMapper = {
  serializedName: "LoggerContract",
  type: {
    name: "Composite",
    className: "LoggerContract",
    modelProperties: {
      ...LoggerContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoggerUpdateContract: coreHttp.CompositeMapper = {
  serializedName: "LoggerUpdateContract",
  type: {
    name: "Composite",
    className: "LoggerUpdateContract",
    modelProperties: {
      loggerType: {
        defaultValue: "azureEventHub",
        serializedName: "loggerType",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        xmlName: "credentials",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      isBuffered: {
        serializedName: "isBuffered",
        xmlName: "isBuffered",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OpenIdConnectProviderCollection: coreHttp.CompositeMapper = {
  serializedName: "OpenIdConnectProviderCollection",
  type: {
    name: "Composite",
    className: "OpenIdConnectProviderCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "OpenidConnectProviderContract",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OpenidConnectProviderContract"
            }
          }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OpenidConnectProviderContractProperties: coreHttp.CompositeMapper = {
  serializedName: "OpenidConnectProviderContractProperties",
  type: {
    name: "Composite",
    className: "OpenidConnectProviderContractProperties",
    modelProperties: {
      name: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      metadataEndpoint: {
        serializedName: "metadataEndpoint",
        required: true,
        xmlName: "metadataEndpoint",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        required: true,
        xmlName: "clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        xmlName: "clientSecret",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OpenidConnectProviderContract: coreHttp.CompositeMapper = {
  serializedName: "OpenidConnectProviderContract",
  type: {
    name: "Composite",
    className: "OpenidConnectProviderContract",
    modelProperties: {
      ...OpenidConnectProviderContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OpenidConnectProviderUpdateContract: coreHttp.CompositeMapper = {
  serializedName: "OpenidConnectProviderUpdateContract",
  type: {
    name: "Composite",
    className: "OpenidConnectProviderUpdateContract",
    modelProperties: {
      name: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      metadataEndpoint: {
        serializedName: "metadataEndpoint",
        xmlName: "metadataEndpoint",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        xmlName: "clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        xmlName: "clientSecret",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PortalSigninSettings: coreHttp.CompositeMapper = {
  serializedName: "PortalSigninSettings",
  type: {
    name: "Composite",
    className: "PortalSigninSettings",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        xmlName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PortalSignupSettings: coreHttp.CompositeMapper = {
  serializedName: "PortalSignupSettings",
  type: {
    name: "Composite",
    className: "PortalSignupSettings",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        xmlName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      termsOfService: {
        serializedName: "termsOfService",
        xmlName: "termsOfService",
        type: {
          name: "Composite",
          className: "TermsOfServiceProperties"
        }
      }
    }
  }
};

export const TermsOfServiceProperties: coreHttp.CompositeMapper = {
  serializedName: "TermsOfServiceProperties",
  type: {
    name: "Composite",
    className: "TermsOfServiceProperties",
    modelProperties: {
      text: {
        serializedName: "text",
        xmlName: "text",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "enabled",
        xmlName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      consentRequired: {
        serializedName: "consentRequired",
        xmlName: "consentRequired",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PortalDelegationSettings: coreHttp.CompositeMapper = {
  serializedName: "PortalDelegationSettings",
  type: {
    name: "Composite",
    className: "PortalDelegationSettings",
    modelProperties: {
      url: {
        serializedName: "url",
        xmlName: "url",
        type: {
          name: "String"
        }
      },
      validationKey: {
        serializedName: "validationKey",
        xmlName: "validationKey",
        type: {
          name: "String"
        }
      },
      subscriptions: {
        serializedName: "subscriptions",
        xmlName: "subscriptions",
        type: {
          name: "Composite",
          className: "SubscriptionsDelegationSettingsProperties"
        }
      },
      userRegistration: {
        serializedName: "userRegistration",
        xmlName: "userRegistration",
        type: {
          name: "Composite",
          className: "RegistrationDelegationSettingsProperties"
        }
      }
    }
  }
};

export const SubscriptionsDelegationSettingsProperties: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionsDelegationSettingsProperties",
  type: {
    name: "Composite",
    className: "SubscriptionsDelegationSettingsProperties",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        xmlName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RegistrationDelegationSettingsProperties: coreHttp.CompositeMapper = {
  serializedName: "RegistrationDelegationSettingsProperties",
  type: {
    name: "Composite",
    className: "RegistrationDelegationSettingsProperties",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        xmlName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ProductUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "ProductUpdateParameters",
  type: {
    name: "Composite",
    className: "ProductUpdateParameters",
    modelProperties: {
      ...ProductEntityBaseParameters.type.modelProperties,
      name: {
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionCollection: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionCollection",
  type: {
    name: "Composite",
    className: "SubscriptionCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "SubscriptionContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SubscriptionContract" }
          }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionContractProperties: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionContractProperties",
  type: {
    name: "Composite",
    className: "SubscriptionContractProperties",
    modelProperties: {
      userId: {
        serializedName: "userId",
        required: true,
        xmlName: "userId",
        type: {
          name: "String"
        }
      },
      productId: {
        serializedName: "productId",
        required: true,
        xmlName: "productId",
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          MaxLength: 100
        },
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        required: true,
        xmlName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "suspended",
            "active",
            "expired",
            "submitted",
            "rejected",
            "cancelled"
          ]
        }
      },
      createdDate: {
        serializedName: "createdDate",
        readOnly: true,
        xmlName: "createdDate",
        type: {
          name: "DateTime"
        }
      },
      startDate: {
        serializedName: "startDate",
        xmlName: "startDate",
        type: {
          name: "DateTime"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        xmlName: "expirationDate",
        type: {
          name: "DateTime"
        }
      },
      endDate: {
        serializedName: "endDate",
        xmlName: "endDate",
        type: {
          name: "DateTime"
        }
      },
      notificationDate: {
        serializedName: "notificationDate",
        xmlName: "notificationDate",
        type: {
          name: "DateTime"
        }
      },
      primaryKey: {
        constraints: {
          MaxLength: 256,
          MinLength: 1
        },
        serializedName: "primaryKey",
        required: true,
        xmlName: "primaryKey",
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        constraints: {
          MaxLength: 256,
          MinLength: 1
        },
        serializedName: "secondaryKey",
        required: true,
        xmlName: "secondaryKey",
        type: {
          name: "String"
        }
      },
      stateComment: {
        serializedName: "stateComment",
        xmlName: "stateComment",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionContract: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionContract",
  type: {
    name: "Composite",
    className: "SubscriptionContract",
    modelProperties: {
      ...SubscriptionContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PropertyCollection: coreHttp.CompositeMapper = {
  serializedName: "PropertyCollection",
  type: {
    name: "Composite",
    className: "PropertyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "PropertyContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PropertyContract" }
          }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PropertyEntityBaseParameters: coreHttp.CompositeMapper = {
  serializedName: "PropertyEntityBaseParameters",
  type: {
    name: "Composite",
    className: "PropertyEntityBaseParameters",
    modelProperties: {
      tags: {
        constraints: {
          MaxItems: 32
        },
        serializedName: "tags",
        xmlName: "tags",
        xmlElementName: "PropertyEntityBaseParametersTagsItem",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PropertyEntityBaseParametersTagsItem"
          }
        }
      },
      secret: {
        serializedName: "secret",
        xmlName: "secret",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PropertyContractProperties: coreHttp.CompositeMapper = {
  serializedName: "PropertyContractProperties",
  type: {
    name: "Composite",
    className: "PropertyContractProperties",
    modelProperties: {
      ...PropertyEntityBaseParameters.type.modelProperties,
      name: {
        constraints: {
          Pattern: new RegExp("^[A-Za-z0-9-._]+$"),
          MaxLength: 256,
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        constraints: {
          MaxLength: 4096,
          MinLength: 1
        },
        serializedName: "value",
        required: true,
        xmlName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PropertyContract: coreHttp.CompositeMapper = {
  serializedName: "PropertyContract",
  type: {
    name: "Composite",
    className: "PropertyContract",
    modelProperties: {
      ...PropertyContractProperties.type.modelProperties,
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PropertyUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "PropertyUpdateParameters",
  type: {
    name: "Composite",
    className: "PropertyUpdateParameters",
    modelProperties: {
      ...PropertyEntityBaseParameters.type.modelProperties,
      name: {
        constraints: {
          Pattern: new RegExp("^[A-Za-z0-9-._]+$"),
          MaxLength: 256,
          MinLength: 1
        },
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        constraints: {
          MaxLength: 4096,
          MinLength: 1
        },
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaCounterCollection: coreHttp.CompositeMapper = {
  serializedName: "QuotaCounterCollection",
  type: {
    name: "Composite",
    className: "QuotaCounterCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "QuotaCounterContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "QuotaCounterContract" }
          }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaCounterContract: coreHttp.CompositeMapper = {
  serializedName: "QuotaCounterContract",
  type: {
    name: "Composite",
    className: "QuotaCounterContract",
    modelProperties: {
      counterKey: {
        constraints: {
          MinLength: 1
        },
        serializedName: "counterKey",
        required: true,
        xmlName: "counterKey",
        type: {
          name: "String"
        }
      },
      periodKey: {
        constraints: {
          MinLength: 1
        },
        serializedName: "periodKey",
        required: true,
        xmlName: "periodKey",
        type: {
          name: "String"
        }
      },
      periodStartTime: {
        serializedName: "periodStartTime",
        required: true,
        xmlName: "periodStartTime",
        type: {
          name: "DateTime"
        }
      },
      periodEndTime: {
        serializedName: "periodEndTime",
        required: true,
        xmlName: "periodEndTime",
        type: {
          name: "DateTime"
        }
      },
      value: {
        serializedName: "Value",
        xmlName: "Value",
        type: {
          name: "Composite",
          className: "QuotaCounterValueContractProperties"
        }
      }
    }
  }
};

export const QuotaCounterValueContractProperties: coreHttp.CompositeMapper = {
  serializedName: "QuotaCounterValueContractProperties",
  type: {
    name: "Composite",
    className: "QuotaCounterValueContractProperties",
    modelProperties: {
      callsCount: {
        serializedName: "callsCount",
        xmlName: "callsCount",
        type: {
          name: "Number"
        }
      },
      kbTransferred: {
        serializedName: "kbTransferred",
        xmlName: "kbTransferred",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ReportCollection: coreHttp.CompositeMapper = {
  serializedName: "ReportCollection",
  type: {
    name: "Composite",
    className: "ReportCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "ReportRecordContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReportRecordContract" }
          }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReportRecordContract: coreHttp.CompositeMapper = {
  serializedName: "ReportRecordContract",
  type: {
    name: "Composite",
    className: "ReportRecordContract",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        xmlName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      interval: {
        serializedName: "interval",
        xmlName: "interval",
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "country",
        xmlName: "country",
        type: {
          name: "String"
        }
      },
      region: {
        serializedName: "region",
        xmlName: "region",
        type: {
          name: "String"
        }
      },
      zip: {
        serializedName: "zip",
        xmlName: "zip",
        type: {
          name: "String"
        }
      },
      userId: {
        serializedName: "userId",
        readOnly: true,
        xmlName: "userId",
        type: {
          name: "String"
        }
      },
      productId: {
        serializedName: "productId",
        readOnly: true,
        xmlName: "productId",
        type: {
          name: "String"
        }
      },
      apiId: {
        serializedName: "apiId",
        xmlName: "apiId",
        type: {
          name: "String"
        }
      },
      operationId: {
        serializedName: "operationId",
        xmlName: "operationId",
        type: {
          name: "String"
        }
      },
      apiRegion: {
        serializedName: "apiRegion",
        xmlName: "apiRegion",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        xmlName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      callCountSuccess: {
        serializedName: "callCountSuccess",
        xmlName: "callCountSuccess",
        type: {
          name: "Number"
        }
      },
      callCountBlocked: {
        serializedName: "callCountBlocked",
        xmlName: "callCountBlocked",
        type: {
          name: "Number"
        }
      },
      callCountFailed: {
        serializedName: "callCountFailed",
        xmlName: "callCountFailed",
        type: {
          name: "Number"
        }
      },
      callCountOther: {
        serializedName: "callCountOther",
        xmlName: "callCountOther",
        type: {
          name: "Number"
        }
      },
      callCountTotal: {
        serializedName: "callCountTotal",
        xmlName: "callCountTotal",
        type: {
          name: "Number"
        }
      },
      bandwidth: {
        serializedName: "bandwidth",
        xmlName: "bandwidth",
        type: {
          name: "Number"
        }
      },
      cacheHitCount: {
        serializedName: "cacheHitCount",
        xmlName: "cacheHitCount",
        type: {
          name: "Number"
        }
      },
      cacheMissCount: {
        serializedName: "cacheMissCount",
        xmlName: "cacheMissCount",
        type: {
          name: "Number"
        }
      },
      apiTimeAvg: {
        serializedName: "apiTimeAvg",
        xmlName: "apiTimeAvg",
        type: {
          name: "Number"
        }
      },
      apiTimeMin: {
        serializedName: "apiTimeMin",
        xmlName: "apiTimeMin",
        type: {
          name: "Number"
        }
      },
      apiTimeMax: {
        serializedName: "apiTimeMax",
        xmlName: "apiTimeMax",
        type: {
          name: "Number"
        }
      },
      serviceTimeAvg: {
        serializedName: "serviceTimeAvg",
        xmlName: "serviceTimeAvg",
        type: {
          name: "Number"
        }
      },
      serviceTimeMin: {
        serializedName: "serviceTimeMin",
        xmlName: "serviceTimeMin",
        type: {
          name: "Number"
        }
      },
      serviceTimeMax: {
        serializedName: "serviceTimeMax",
        xmlName: "serviceTimeMax",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RequestReportCollection: coreHttp.CompositeMapper = {
  serializedName: "RequestReportCollection",
  type: {
    name: "Composite",
    className: "RequestReportCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "RequestReportRecordContract",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RequestReportRecordContract"
            }
          }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RequestReportRecordContract: coreHttp.CompositeMapper = {
  serializedName: "RequestReportRecordContract",
  type: {
    name: "Composite",
    className: "RequestReportRecordContract",
    modelProperties: {
      apiId: {
        serializedName: "apiId",
        xmlName: "apiId",
        type: {
          name: "String"
        }
      },
      operationId: {
        serializedName: "operationId",
        xmlName: "operationId",
        type: {
          name: "String"
        }
      },
      productId: {
        serializedName: "productId",
        readOnly: true,
        xmlName: "productId",
        type: {
          name: "String"
        }
      },
      userId: {
        serializedName: "userId",
        readOnly: true,
        xmlName: "userId",
        type: {
          name: "String"
        }
      },
      method: {
        serializedName: "method",
        xmlName: "method",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        xmlName: "url",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        xmlName: "ipAddress",
        type: {
          name: "String"
        }
      },
      backendResponseCode: {
        serializedName: "backendResponseCode",
        xmlName: "backendResponseCode",
        type: {
          name: "String"
        }
      },
      responseCode: {
        serializedName: "responseCode",
        xmlName: "responseCode",
        type: {
          name: "Number"
        }
      },
      responseSize: {
        serializedName: "responseSize",
        xmlName: "responseSize",
        type: {
          name: "Number"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        xmlName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      cache: {
        serializedName: "cache",
        xmlName: "cache",
        type: {
          name: "String"
        }
      },
      apiTime: {
        serializedName: "apiTime",
        xmlName: "apiTime",
        type: {
          name: "Number"
        }
      },
      serviceTime: {
        serializedName: "serviceTime",
        xmlName: "serviceTime",
        type: {
          name: "Number"
        }
      },
      apiRegion: {
        serializedName: "apiRegion",
        xmlName: "apiRegion",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        xmlName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "requestId",
        xmlName: "requestId",
        type: {
          name: "String"
        }
      },
      requestSize: {
        serializedName: "requestSize",
        xmlName: "requestSize",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SubscriptionCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionCreateParameters",
  type: {
    name: "Composite",
    className: "SubscriptionCreateParameters",
    modelProperties: {
      userId: {
        serializedName: "userId",
        required: true,
        xmlName: "userId",
        type: {
          name: "String"
        }
      },
      productId: {
        serializedName: "productId",
        required: true,
        xmlName: "productId",
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          MaxLength: 100
        },
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      primaryKey: {
        constraints: {
          MaxLength: 256,
          MinLength: 1
        },
        serializedName: "primaryKey",
        xmlName: "primaryKey",
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        constraints: {
          MaxLength: 256,
          MinLength: 1
        },
        serializedName: "secondaryKey",
        xmlName: "secondaryKey",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        xmlName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "suspended",
            "active",
            "expired",
            "submitted",
            "rejected",
            "cancelled"
          ]
        }
      }
    }
  }
};

export const SubscriptionUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionUpdateParameters",
  type: {
    name: "Composite",
    className: "SubscriptionUpdateParameters",
    modelProperties: {
      userId: {
        serializedName: "userId",
        xmlName: "userId",
        type: {
          name: "String"
        }
      },
      productId: {
        serializedName: "productId",
        xmlName: "productId",
        type: {
          name: "String"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        xmlName: "expirationDate",
        type: {
          name: "DateTime"
        }
      },
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      primaryKey: {
        constraints: {
          MaxLength: 256,
          MinLength: 1
        },
        serializedName: "primaryKey",
        xmlName: "primaryKey",
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        constraints: {
          MaxLength: 256,
          MinLength: 1
        },
        serializedName: "secondaryKey",
        xmlName: "secondaryKey",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        xmlName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "suspended",
            "active",
            "expired",
            "submitted",
            "rejected",
            "cancelled"
          ]
        }
      },
      stateComment: {
        serializedName: "stateComment",
        xmlName: "stateComment",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessInformationContract: coreHttp.CompositeMapper = {
  serializedName: "AccessInformationContract",
  type: {
    name: "Composite",
    className: "AccessInformationContract",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      primaryKey: {
        serializedName: "primaryKey",
        xmlName: "primaryKey",
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        serializedName: "secondaryKey",
        xmlName: "secondaryKey",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "enabled",
        xmlName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AccessInformationUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "AccessInformationUpdateParameters",
  type: {
    name: "Composite",
    className: "AccessInformationUpdateParameters",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        xmlName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DeployConfigurationParameters: coreHttp.CompositeMapper = {
  serializedName: "DeployConfigurationParameters",
  type: {
    name: "Composite",
    className: "DeployConfigurationParameters",
    modelProperties: {
      branch: {
        serializedName: "branch",
        required: true,
        xmlName: "branch",
        type: {
          name: "String"
        }
      },
      force: {
        serializedName: "force",
        xmlName: "force",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationResultContract: coreHttp.CompositeMapper = {
  serializedName: "OperationResultContract",
  type: {
    name: "Composite",
    className: "OperationResultContract",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        xmlName: "status",
        type: {
          name: "Enum",
          allowedValues: ["Started", "InProgress", "Succeeded", "Failed"]
        }
      },
      started: {
        serializedName: "started",
        xmlName: "started",
        type: {
          name: "DateTime"
        }
      },
      updated: {
        serializedName: "updated",
        xmlName: "updated",
        type: {
          name: "DateTime"
        }
      },
      resultInfo: {
        serializedName: "resultInfo",
        xmlName: "resultInfo",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        xmlName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponse"
        }
      },
      actionLog: {
        serializedName: "actionLog",
        readOnly: true,
        xmlName: "actionLog",
        xmlElementName: "OperationResultLogItemContract",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationResultLogItemContract"
            }
          }
        }
      }
    }
  }
};

export const OperationResultLogItemContract: coreHttp.CompositeMapper = {
  serializedName: "OperationResultLogItemContract",
  type: {
    name: "Composite",
    className: "OperationResultLogItemContract",
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        xmlName: "objectType",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        xmlName: "action",
        type: {
          name: "String"
        }
      },
      objectKey: {
        serializedName: "objectKey",
        xmlName: "objectKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SaveConfigurationParameter: coreHttp.CompositeMapper = {
  serializedName: "SaveConfigurationParameter",
  type: {
    name: "Composite",
    className: "SaveConfigurationParameter",
    modelProperties: {
      branch: {
        serializedName: "branch",
        required: true,
        xmlName: "branch",
        type: {
          name: "String"
        }
      },
      force: {
        serializedName: "force",
        xmlName: "force",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TenantConfigurationSyncStateContract: coreHttp.CompositeMapper = {
  serializedName: "TenantConfigurationSyncStateContract",
  type: {
    name: "Composite",
    className: "TenantConfigurationSyncStateContract",
    modelProperties: {
      branch: {
        serializedName: "branch",
        xmlName: "branch",
        type: {
          name: "String"
        }
      },
      commitId: {
        serializedName: "commitId",
        xmlName: "commitId",
        type: {
          name: "String"
        }
      },
      isExport: {
        serializedName: "isExport",
        xmlName: "isExport",
        type: {
          name: "Boolean"
        }
      },
      isSynced: {
        serializedName: "isSynced",
        xmlName: "isSynced",
        type: {
          name: "Boolean"
        }
      },
      isGitEnabled: {
        serializedName: "isGitEnabled",
        xmlName: "isGitEnabled",
        type: {
          name: "Boolean"
        }
      },
      syncDate: {
        serializedName: "syncDate",
        xmlName: "syncDate",
        type: {
          name: "DateTime"
        }
      },
      configurationChangeDate: {
        serializedName: "configurationChangeDate",
        xmlName: "configurationChangeDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const UserCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "UserCreateParameters",
  type: {
    name: "Composite",
    className: "UserCreateParameters",
    modelProperties: {
      ...UserEntityBaseParameters.type.modelProperties,
      email: {
        constraints: {
          MaxLength: 254,
          MinLength: 1
        },
        serializedName: "email",
        required: true,
        xmlName: "email",
        type: {
          name: "String"
        }
      },
      firstName: {
        constraints: {
          MaxLength: 100,
          MinLength: 1
        },
        serializedName: "firstName",
        required: true,
        xmlName: "firstName",
        type: {
          name: "String"
        }
      },
      lastName: {
        constraints: {
          MaxLength: 100,
          MinLength: 1
        },
        serializedName: "lastName",
        required: true,
        xmlName: "lastName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        xmlName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "UserUpdateParameters",
  type: {
    name: "Composite",
    className: "UserUpdateParameters",
    modelProperties: {
      ...UserEntityBaseParameters.type.modelProperties,
      email: {
        constraints: {
          MaxLength: 254,
          MinLength: 1
        },
        serializedName: "email",
        xmlName: "email",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        xmlName: "password",
        type: {
          name: "String"
        }
      },
      firstName: {
        constraints: {
          MaxLength: 100,
          MinLength: 1
        },
        serializedName: "firstName",
        xmlName: "firstName",
        type: {
          name: "String"
        }
      },
      lastName: {
        constraints: {
          MaxLength: 100,
          MinLength: 1
        },
        serializedName: "lastName",
        xmlName: "lastName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenerateSsoUrlResult: coreHttp.CompositeMapper = {
  serializedName: "GenerateSsoUrlResult",
  type: {
    name: "Composite",
    className: "GenerateSsoUrlResult",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserIdentityCollection: coreHttp.CompositeMapper = {
  serializedName: "UserIdentityCollection",
  type: {
    name: "Composite",
    className: "UserIdentityCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "UserIdentityContract",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "UserIdentityContract" }
          }
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserTokenParameters: coreHttp.CompositeMapper = {
  serializedName: "UserTokenParameters",
  type: {
    name: "Composite",
    className: "UserTokenParameters",
    modelProperties: {
      keyType: {
        defaultValue: "primary",
        serializedName: "keyType",
        required: true,
        xmlName: "keyType",
        type: {
          name: "Enum",
          allowedValues: ["primary", "secondary"]
        }
      },
      expiry: {
        serializedName: "expiry",
        required: true,
        xmlName: "expiry",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const UserTokenResult: coreHttp.CompositeMapper = {
  serializedName: "UserTokenResult",
  type: {
    name: "Composite",
    className: "UserTokenResult",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaCounterValueContract: coreHttp.CompositeMapper = {
  serializedName: "QuotaCounterValueContract",
  type: {
    name: "Composite",
    className: "QuotaCounterValueContract",
    modelProperties: {
      callsCount: {
        serializedName: "value.callsCount",
        xmlName: "value.callsCount",
        type: {
          name: "Number"
        }
      },
      kbTransferred: {
        serializedName: "value.kbTransferred",
        xmlName: "value.kbTransferred",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PolicyGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "policy_getHeaders",
  type: {
    name: "Composite",
    className: "PolicyGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "api_getHeaders",
  type: {
    name: "Composite",
    className: "ApiGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiCreateOrUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "api_createOrUpdateHeaders",
  type: {
    name: "Composite",
    className: "ApiCreateOrUpdateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiOperationGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "apiOperation_getHeaders",
  type: {
    name: "Composite",
    className: "ApiOperationGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiOperationPolicyGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "apiOperationPolicy_getHeaders",
  type: {
    name: "Composite",
    className: "ApiOperationPolicyGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiPolicyListByApiHeaders: coreHttp.CompositeMapper = {
  serializedName: "apiPolicy_listByApiHeaders",
  type: {
    name: "Composite",
    className: "ApiPolicyListByApiHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiPolicyGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "apiPolicy_getHeaders",
  type: {
    name: "Composite",
    className: "ApiPolicyGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiSchemaListByApiHeaders: coreHttp.CompositeMapper = {
  serializedName: "apiSchema_listByApiHeaders",
  type: {
    name: "Composite",
    className: "ApiSchemaListByApiHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiSchemaGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "apiSchema_getHeaders",
  type: {
    name: "Composite",
    className: "ApiSchemaGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiSchemaListByApiNextHeaders: coreHttp.CompositeMapper = {
  serializedName: "apiSchema_listByApiNextHeaders",
  type: {
    name: "Composite",
    className: "ApiSchemaListByApiNextHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthorizationServerGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "authorizationServer_getHeaders",
  type: {
    name: "Composite",
    className: "AuthorizationServerGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackendGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "backend_getHeaders",
  type: {
    name: "Composite",
    className: "BackendGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate_getHeaders",
  type: {
    name: "Composite",
    className: "CertificateGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EmailTemplateGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "emailTemplate_getHeaders",
  type: {
    name: "Composite",
    className: "EmailTemplateGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "group_getHeaders",
  type: {
    name: "Composite",
    className: "GroupGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityProviderGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "identityProvider_getHeaders",
  type: {
    name: "Composite",
    className: "IdentityProviderGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoggerGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "logger_getHeaders",
  type: {
    name: "Composite",
    className: "LoggerGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OpenIdConnectProviderGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "openIdConnectProvider_getHeaders",
  type: {
    name: "Composite",
    className: "OpenIdConnectProviderGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SignInSettingsGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "signInSettings_getHeaders",
  type: {
    name: "Composite",
    className: "SignInSettingsGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SignUpSettingsGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "signUpSettings_getHeaders",
  type: {
    name: "Composite",
    className: "SignUpSettingsGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DelegationSettingsGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "delegationSettings_getHeaders",
  type: {
    name: "Composite",
    className: "DelegationSettingsGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProductGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "product_getHeaders",
  type: {
    name: "Composite",
    className: "ProductGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProductPolicyListByProductHeaders: coreHttp.CompositeMapper = {
  serializedName: "productPolicy_listByProductHeaders",
  type: {
    name: "Composite",
    className: "ProductPolicyListByProductHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProductPolicyGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "productPolicy_getHeaders",
  type: {
    name: "Composite",
    className: "ProductPolicyGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PropertyGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "property_getHeaders",
  type: {
    name: "Composite",
    className: "PropertyGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "subscription_getHeaders",
  type: {
    name: "Composite",
    className: "SubscriptionGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TenantAccessGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "tenantAccess_getHeaders",
  type: {
    name: "Composite",
    className: "TenantAccessGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TenantAccessGitGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "tenantAccessGit_getHeaders",
  type: {
    name: "Composite",
    className: "TenantAccessGitGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "user_getHeaders",
  type: {
    name: "Composite",
    className: "UserGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};
