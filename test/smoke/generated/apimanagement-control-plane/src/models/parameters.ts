/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const apimBaseUrl: coreHttp.OperationURLParameter = {
  parameterPath: "apimBaseUrl",
  mapper: {
    serializedName: "apimBaseUrl",
    required: true,
    xmlName: "apimBaseUrl",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const scope: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "scope"],
  mapper: {
    serializedName: "scope",
    xmlName: "scope",
    type: {
      name: "Enum",
      allowedValues: ["Tenant", "Product", "Api", "Operation", "All"]
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2017-03-01",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const policyId: coreHttp.OperationURLParameter = {
  parameterPath: "policyId",
  mapper: {
    defaultValue: "policy",
    serializedName: "policyId",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PolicyContract
};

export const ifMatch: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const top: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    constraints: {
      InclusiveMinimum: 1
    },
    serializedName: "$top",
    xmlName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const skip: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    constraints: {},
    serializedName: "$skip",
    xmlName: "$skip",
    type: {
      name: "Number"
    }
  }
};

export const apiId: coreHttp.OperationURLParameter = {
  parameterPath: "apiId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256,
      MinLength: 1
    },
    serializedName: "apiId",
    required: true,
    xmlName: "apiId",
    type: {
      name: "String"
    }
  }
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApiCreateOrUpdateParameter
};

export const ifMatch1: coreHttp.OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApiUpdateContract
};

export const ifMatch2: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifMatch3: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const operationId: coreHttp.OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256,
      MinLength: 1
    },
    serializedName: "operationId",
    required: true,
    xmlName: "operationId",
    type: {
      name: "String"
    }
  }
};

export const parameters3: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.OperationContract
};

export const parameters4: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.OperationUpdateContract
};

export const ifMatch4: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const ifMatch5: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifMatch6: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const filter2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const ifMatch7: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifMatch8: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const schemaId: coreHttp.OperationURLParameter = {
  parameterPath: "schemaId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256,
      MinLength: 1
    },
    serializedName: "schemaId",
    required: true,
    xmlName: "schemaId",
    type: {
      name: "String"
    }
  }
};

export const parameters5: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SchemaContract
};

export const ifMatch9: coreHttp.OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifMatch10: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const accept: coreHttp.OperationParameter = {
  parameterPath: "accept",
  mapper: {
    serializedName: "Accept",
    required: true,
    xmlName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const exportModel: coreHttp.OperationQueryParameter = {
  parameterPath: "exportModel",
  mapper: {
    defaultValue: "true",
    serializedName: "export",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const filter3: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const authsid: coreHttp.OperationURLParameter = {
  parameterPath: "authsid",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256
    },
    serializedName: "authsid",
    required: true,
    xmlName: "authsid",
    type: {
      name: "String"
    }
  }
};

export const parameters6: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AuthorizationServerContract
};

export const parameters7: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AuthorizationServerUpdateContract
};

export const ifMatch11: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifMatch12: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const filter4: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const backendid: coreHttp.OperationURLParameter = {
  parameterPath: "backendid",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 255,
      MinLength: 1
    },
    serializedName: "backendid",
    required: true,
    xmlName: "backendid",
    type: {
      name: "String"
    }
  }
};

export const parameters8: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BackendContract
};

export const parameters9: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BackendUpdateParameters
};

export const ifMatch13: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifMatch14: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const filter5: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const certificateId: coreHttp.OperationURLParameter = {
  parameterPath: "certificateId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256,
      MinLength: 1
    },
    serializedName: "certificateId",
    required: true,
    xmlName: "certificateId",
    type: {
      name: "String"
    }
  }
};

export const parameters10: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CertificateCreateOrUpdateParameters
};

export const ifMatch15: coreHttp.OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifMatch16: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const filter6: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const templateName: coreHttp.OperationURLParameter = {
  parameterPath: "templateName",
  mapper: {
    serializedName: "templateName",
    required: true,
    xmlName: "templateName",
    type: {
      name: "String"
    }
  }
};

export const parameters11: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.EmailTemplateUpdateParameters
};

export const parameters12: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.EmailTemplateUpdateParameters
};

export const ifMatch17: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const filter7: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const groupId: coreHttp.OperationURLParameter = {
  parameterPath: "groupId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256,
      MinLength: 1
    },
    serializedName: "groupId",
    required: true,
    xmlName: "groupId",
    type: {
      name: "String"
    }
  }
};

export const parameters13: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.GroupCreateParameters
};

export const parameters14: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.GroupUpdateParameters
};

export const ifMatch18: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const filter8: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const uid: coreHttp.OperationURLParameter = {
  parameterPath: "uid",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256,
      MinLength: 1
    },
    serializedName: "uid",
    required: true,
    xmlName: "uid",
    type: {
      name: "String"
    }
  }
};

export const identityProviderName: coreHttp.OperationURLParameter = {
  parameterPath: "identityProviderName",
  mapper: {
    serializedName: "identityProviderName",
    required: true,
    xmlName: "identityProviderName",
    type: {
      name: "String"
    }
  }
};

export const parameters15: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.IdentityProviderContract
};

export const parameters16: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.IdentityProviderUpdateParameters
};

export const ifMatch19: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const filter9: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const loggerid: coreHttp.OperationURLParameter = {
  parameterPath: "loggerid",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256
    },
    serializedName: "loggerid",
    required: true,
    xmlName: "loggerid",
    type: {
      name: "String"
    }
  }
};

export const parameters17: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.LoggerContract
};

export const parameters18: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.LoggerUpdateContract
};

export const ifMatch20: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifMatch21: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const opid: coreHttp.OperationURLParameter = {
  parameterPath: "opid",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256
    },
    serializedName: "opid",
    required: true,
    xmlName: "opid",
    type: {
      name: "String"
    }
  }
};

export const parameters19: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.OpenidConnectProviderContract
};

export const parameters20: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.OpenidConnectProviderUpdateContract
};

export const ifMatch22: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifMatch23: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const parameters21: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PortalSigninSettings
};

export const ifMatch24: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const parameters22: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PortalSigninSettings
};

export const parameters23: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PortalSignupSettings
};

export const parameters24: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PortalSignupSettings
};

export const parameters25: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PortalDelegationSettings
};

export const parameters26: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PortalDelegationSettings
};

export const filter10: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const expandGroups: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expandGroups"],
  mapper: {
    serializedName: "expandGroups",
    xmlName: "expandGroups",
    type: {
      name: "Boolean"
    }
  }
};

export const productId: coreHttp.OperationURLParameter = {
  parameterPath: "productId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256,
      MinLength: 1
    },
    serializedName: "productId",
    required: true,
    xmlName: "productId",
    type: {
      name: "String"
    }
  }
};

export const parameters27: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ProductContract
};

export const parameters28: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ProductUpdateParameters
};

export const ifMatch25: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const deleteSubscriptions: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "deleteSubscriptions"],
  mapper: {
    serializedName: "deleteSubscriptions",
    xmlName: "deleteSubscriptions",
    type: {
      name: "Boolean"
    }
  }
};

export const filter11: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const filter12: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const ifMatch26: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const filter13: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const propId: coreHttp.OperationURLParameter = {
  parameterPath: "propId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256
    },
    serializedName: "propId",
    required: true,
    xmlName: "propId",
    type: {
      name: "String"
    }
  }
};

export const parameters29: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PropertyContract
};

export const parameters30: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PropertyUpdateParameters
};

export const ifMatch27: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const quotaCounterKey: coreHttp.OperationURLParameter = {
  parameterPath: "quotaCounterKey",
  mapper: {
    serializedName: "quotaCounterKey",
    required: true,
    xmlName: "quotaCounterKey",
    type: {
      name: "String"
    }
  }
};

export const parameters31: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.QuotaCounterValueContractProperties
};

export const quotaPeriodKey: coreHttp.OperationURLParameter = {
  parameterPath: "quotaPeriodKey",
  mapper: {
    serializedName: "quotaPeriodKey",
    required: true,
    xmlName: "quotaPeriodKey",
    type: {
      name: "String"
    }
  }
};

export const parameters32: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.QuotaCounterValueContractProperties
};

export const filter14: coreHttp.OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const filter15: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const interval: coreHttp.OperationQueryParameter = {
  parameterPath: "interval",
  mapper: {
    serializedName: "interval",
    required: true,
    xmlName: "interval",
    type: {
      name: "TimeSpan"
    }
  }
};

export const nextLink4: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink5: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink6: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink7: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink8: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const sid: coreHttp.OperationURLParameter = {
  parameterPath: "sid",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256
    },
    serializedName: "sid",
    required: true,
    xmlName: "sid",
    type: {
      name: "String"
    }
  }
};

export const parameters33: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SubscriptionCreateParameters
};

export const notify: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "notify"],
  mapper: {
    defaultValue: "False",
    serializedName: "notify",
    xmlName: "notify",
    type: {
      name: "String"
    }
  }
};

export const parameters34: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SubscriptionUpdateParameters
};

export const ifMatch28: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const notify1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "notify"],
  mapper: {
    defaultValue: "False",
    serializedName: "notify",
    xmlName: "notify",
    type: {
      name: "String"
    }
  }
};

export const accessName: coreHttp.OperationURLParameter = {
  parameterPath: "accessName",
  mapper: {
    defaultValue: "access",
    serializedName: "accessName",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const parameters35: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AccessInformationUpdateParameters
};

export const parameters36: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DeployConfigurationParameters
};

export const configurationName: coreHttp.OperationURLParameter = {
  parameterPath: "configurationName",
  mapper: {
    defaultValue: "configuration",
    serializedName: "configurationName",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const parameters37: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SaveConfigurationParameter
};

export const parameters38: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DeployConfigurationParameters
};

export const parameters39: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.UserCreateParameters
};

export const parameters40: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.UserUpdateParameters
};

export const ifMatch29: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const deleteSubscriptions1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "deleteSubscriptions"],
  mapper: {
    defaultValue: "False",
    serializedName: "deleteSubscriptions",
    xmlName: "deleteSubscriptions",
    type: {
      name: "String"
    }
  }
};

export const notify2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "notify"],
  mapper: {
    defaultValue: "False",
    serializedName: "notify",
    xmlName: "notify",
    type: {
      name: "String"
    }
  }
};

export const ifMatch30: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const parameters41: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.UserTokenParameters
};

export const filter16: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const filter17: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};
