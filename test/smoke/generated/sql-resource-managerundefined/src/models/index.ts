/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * ARM resource.
 */
export interface Resource {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
}

/**
 * A recoverable database
 */
export type RecoverableDatabase = Resource & {
  /**
   * The edition of the database
   */
  readonly edition?: string;
  /**
   * The service level objective name of the database
   */
  readonly serviceLevelObjective?: string;
  /**
   * The elastic pool name of the database
   */
  readonly elasticPoolName?: string;
  /**
   * The last available backup date of the database (ISO8601 format)
   */
  readonly lastAvailableBackupDate?: Date;
};

/**
 * The response to a list recoverable databases request
 */
export interface RecoverableDatabaseListResult {
  /**
   * A list of recoverable databases
   */
  value: RecoverableDatabase[];
}

/**
 * A restorable dropped database
 */
export type RestorableDroppedDatabase = Resource & {
  /**
   * The geo-location where the resource lives
   */
  readonly location?: string;
  /**
   * The name of the database
   */
  readonly databaseName?: string;
  /**
   * The edition of the database
   */
  readonly edition?: string;
  /**
   * The max size in bytes of the database
   */
  readonly maxSizeBytes?: string;
  /**
   * The service level objective name of the database
   */
  readonly serviceLevelObjective?: string;
  /**
   * The elastic pool name of the database
   */
  readonly elasticPoolName?: string;
  /**
   * The creation date of the database (ISO8601 format)
   */
  readonly creationDate?: Date;
  /**
   * The deletion date of the database (ISO8601 format)
   */
  readonly deletionDate?: Date;
  /**
   * The earliest restore date of the database (ISO8601 format)
   */
  readonly earliestRestoreDate?: Date;
};

/**
 * The response to a list restorable dropped databases request
 */
export interface RestorableDroppedDatabaseListResult {
  /**
   * A list of restorable dropped databases
   */
  value: RestorableDroppedDatabase[];
}

/**
 * A server secure connection policy.
 */
export type ServerConnectionPolicy = Resource & {
  /**
   * Metadata used for the Azure portal experience.
   */
  readonly kind?: string;
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * The server connection type.
   */
  connectionType?: ServerConnectionType;
};

/**
 * Contains information about a database Threat Detection policy.
 */
export type DatabaseSecurityAlertPolicy = Resource & {
  /**
   * The geo-location where the resource lives
   */
  location?: string;
  /**
   * Resource kind.
   */
  readonly kind?: string;
  /**
   * Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
   */
  state?: SecurityAlertPolicyState;
  /**
   * Specifies the semicolon-separated list of alerts that are disabled, or empty string to disable no alerts. Possible values: Sql_Injection; Sql_Injection_Vulnerability; Access_Anomaly; Data_Exfiltration; Unsafe_Action.
   */
  disabledAlerts?: string;
  /**
   * Specifies the semicolon-separated list of e-mail addresses to which the alert is sent.
   */
  emailAddresses?: string;
  /**
   * Specifies that the alert is sent to the account administrators.
   */
  emailAccountAdmins?: SecurityAlertPolicyEmailAccountAdmins;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. If state is Enabled, storageEndpoint is required.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the Threat Detection audit storage account. If state is Enabled, storageAccountAccessKey is required.
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the Threat Detection audit logs.
   */
  retentionDays?: number;
  /**
   * Specifies whether to use the default server policy.
   */
  useServerDefault?: SecurityAlertPolicyUseServerDefault;
};

/**
 * Represents a database data masking policy.
 */
export type DataMaskingPolicy = Resource & {
  /**
   * The location of the data masking policy.
   */
  readonly location?: string;
  /**
   * The kind of data masking policy. Metadata, used for Azure portal.
   */
  readonly kind?: string;
  /**
   * The state of the data masking policy.
   */
  dataMaskingState?: DataMaskingState;
  /**
   * The list of the exempt principals. Specifies the semicolon-separated list of database users for which the data masking policy does not apply. The specified users receive data results without masking for all of the database queries.
   */
  exemptPrincipals?: string;
  /**
   * The list of the application principals. This is a legacy parameter and is no longer used.
   */
  readonly applicationPrincipals?: string;
  /**
   * The masking level. This is a legacy parameter and is no longer used.
   */
  readonly maskingLevel?: string;
};

/**
 * Represents a database data masking rule.
 */
export type DataMaskingRule = Resource & {
  /**
   * The location of the data masking rule.
   */
  readonly location?: string;
  /**
   * The kind of Data Masking Rule. Metadata, used for Azure portal.
   */
  readonly kind?: string;
  /**
   * The rule Id.
   */
  readonly idPropertiesId?: string;
  /**
   * The alias name. This is a legacy parameter and is no longer used.
   */
  aliasName?: string;
  /**
   * The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName, tableName, columnName, maskingFunction, and specify ruleState as disabled. However, if the rule doesn't already exist, the rule will be created with ruleState set to enabled, regardless of the provided value of ruleState.
   */
  ruleState?: DataMaskingRuleState;
  /**
   * The schema name on which the data masking rule is applied.
   */
  schemaName?: string;
  /**
   * The table name on which the data masking rule is applied.
   */
  tableName?: string;
  /**
   * The column name on which the data masking rule is applied.
   */
  columnName?: string;
  /**
   * The masking function that is used for the data masking rule.
   */
  maskingFunction?: DataMaskingFunction;
  /**
   * The numberFrom property of the masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.
   */
  numberFrom?: string;
  /**
   * The numberTo property of the data masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.
   */
  numberTo?: string;
  /**
   * If maskingFunction is set to Text, the number of characters to show unmasked in the beginning of the string. Otherwise, this parameter will be ignored.
   */
  prefixSize?: string;
  /**
   * If maskingFunction is set to Text, the number of characters to show unmasked at the end of the string. Otherwise, this parameter will be ignored.
   */
  suffixSize?: string;
  /**
   * If maskingFunction is set to Text, the character to use for masking the unexposed part of the string. Otherwise, this parameter will be ignored.
   */
  replacementString?: string;
};

/**
 * The response to a list data masking rules request.
 */
export interface DataMaskingRuleListResult {
  /**
   * The list of database data masking rules.
   */
  value?: DataMaskingRule[];
}

/**
 * Represents a server firewall rule.
 */
export type FirewallRule = Resource & {
  /**
   * Kind of server that contains this firewall rule.
   */
  readonly kind?: string;
  /**
   * Location of the server that contains this firewall rule.
   */
  readonly location?: string;
  /**
   * The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all Azure-internal IP addresses.
   */
  startIpAddress?: string;
  /**
   * The end IP address of the firewall rule. Must be IPv4 format. Must be greater than or equal to startIpAddress. Use value '0.0.0.0' to represent all Azure-internal IP addresses.
   */
  endIpAddress?: string;
};

/**
 * Represents the response to a List Firewall Rules request.
 */
export interface FirewallRuleListResult {
  /**
   * The list of server firewall rules.
   */
  value?: FirewallRule[];
}

/**
 * A database geo backup policy.
 */
export type GeoBackupPolicy = Resource & {
  /**
   * Kind of geo backup policy.  This is metadata used for the Azure portal experience.
   */
  readonly kind?: string;
  /**
   * Backup policy location.
   */
  readonly location?: string;
  /**
   * The state of the geo backup policy.
   */
  state: GeoBackupPolicyState;
  /**
   * The storage type of the geo backup policy.
   */
  readonly storageType?: string;
};

/**
 * The response to a list geo backup policies request.
 */
export interface GeoBackupPolicyListResult {
  /**
   * The list of geo backup policies.
   */
  value?: GeoBackupPolicy[];
}

/**
 * Export database parameters.
 */
export interface ExportRequest {
  /**
   * The type of the storage key to use.
   */
  storageKeyType: StorageKeyType;
  /**
   * The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a "?."
   */
  storageKey: string;
  /**
   * The storage uri to use.
   */
  storageUri: string;
  /**
   * The name of the SQL administrator.
   */
  administratorLogin: string;
  /**
   * The password of the SQL administrator.
   */
  administratorLoginPassword: string;
  /**
   * The authentication type.
   */
  authenticationType?: AuthenticationType;
}

/**
 * Import database parameters.
 */
export type ImportRequest = ExportRequest & {
  /**
   * The name of the database to import.
   */
  databaseName: string;
  /**
   * The edition for the database being created.
   *
   * The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
   *
   * ```azurecli
   * az sql db list-editions -l <location> -o table
   * ````
   *
   * ```powershell
   * Get-AzSqlServerServiceObjective -Location <location>
   * ````
   *
   */
  edition: DatabaseEdition;
  /**
   * The name of the service objective to assign to the database.
   */
  serviceObjectiveName: ServiceObjectiveName;
  /**
   * The maximum size for the newly imported database.
   */
  maxSizeBytes: string;
};

/**
 * Response for Import/Export Get operation.
 */
export type ImportExportResponse = Resource & {
  /**
   * The request type of the operation.
   */
  readonly requestType?: string;
  /**
   * The request type of the operation.
   */
  readonly requestId?: string;
  /**
   * The name of the server.
   */
  readonly serverName?: string;
  /**
   * The name of the database.
   */
  readonly databaseName?: string;
  /**
   * The status message returned from the server.
   */
  readonly status?: string;
  /**
   * The operation status last modified time.
   */
  readonly lastModifiedTime?: string;
  /**
   * The operation queued time.
   */
  readonly queuedTime?: string;
  /**
   * The blob uri.
   */
  readonly blobUri?: string;
  /**
   * The error message returned from the server.
   */
  readonly errorMessage?: string;
};

/**
 * Import database parameters.
 */
export interface ImportExtensionRequest {
  /**
   * The name of the extension.
   */
  name?: string;
  /**
   * The type of the extension.
   */
  type?: string;
  /**
   * The type of the storage key to use.
   */
  storageKeyType?: StorageKeyType;
  /**
   * The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a "?."
   */
  storageKey?: string;
  /**
   * The storage uri to use.
   */
  storageUri?: string;
  /**
   * The name of the SQL administrator.
   */
  administratorLogin?: string;
  /**
   * The password of the SQL administrator.
   */
  administratorLoginPassword?: string;
  /**
   * The authentication type.
   */
  authenticationType?: AuthenticationType;
  /**
   * The type of import operation being performed. This is always Import.
   */
  operationMode?: "Import";
}

/**
 * Represents the properties for an import operation
 */
export type ImportExtensionProperties = ExportRequest & {
  /**
   * The type of import operation being performed. This is always Import.
   */
  operationMode: "Import";
};

/**
 * The response to a list database metrics request.
 */
export interface MetricListResult {
  /**
   * The list of metrics for the database.
   */
  value: Metric[];
}

/**
 * Database metrics.
 */
export interface Metric {
  /**
   * The start time for the metric (ISO-8601 format).
   */
  readonly startTime?: Date;
  /**
   * The end time for the metric (ISO-8601 format).
   */
  readonly endTime?: Date;
  /**
   * The time step to be used to summarize the metric values.
   */
  readonly timeGrain?: string;
  /**
   * The unit of the metric.
   */
  readonly unit?: UnitType;
  /**
   * The name information for the metric.
   */
  readonly name?: MetricName;
  /**
   * The metric values for the specified time window and timestep.
   */
  readonly metricValues?: MetricValue[];
}

/**
 * A database metric name.
 */
export interface MetricName {
  /**
   * The name of the database metric.
   */
  readonly value?: string;
  /**
   * The friendly name of the database metric.
   */
  readonly localizedValue?: string;
}

/**
 * Represents database metrics.
 */
export interface MetricValue {
  /**
   * The number of values for the metric.
   */
  readonly count?: number;
  /**
   * The average value of the metric.
   */
  readonly average?: number;
  /**
   * The max value of the metric.
   */
  readonly maximum?: number;
  /**
   * The min value of the metric.
   */
  readonly minimum?: number;
  /**
   * The metric timestamp (ISO-8601 format).
   */
  readonly timestamp?: Date;
  /**
   * The total value of the metric.
   */
  readonly total?: number;
}

/**
 * The response to a list database metric definitions request.
 */
export interface MetricDefinitionListResult {
  /**
   * The list of metric definitions for the database.
   */
  value: MetricDefinition[];
}

/**
 * A database metric definition.
 */
export interface MetricDefinition {
  /**
   * The name information for the metric.
   */
  readonly name?: MetricName;
  /**
   * The primary aggregation type defining how metric values are displayed.
   */
  readonly primaryAggregationType?: PrimaryAggregationType;
  /**
   * The resource uri of the database.
   */
  readonly resourceUri?: string;
  /**
   * The unit of the metric.
   */
  readonly unit?: UnitDefinitionType;
  /**
   * The list of database metric availabilities for the metric.
   */
  readonly metricAvailabilities?: MetricAvailability[];
}

/**
 * A metric availability value.
 */
export interface MetricAvailability {
  /**
   * The length of retention for the database metric.
   */
  readonly retention?: string;
  /**
   * The granularity of the database metric.
   */
  readonly timeGrain?: string;
}

/**
 * Represents a recommended elastic pool.
 */
export type RecommendedElasticPool = Resource & {
  /**
   * The edition of the recommended elastic pool. The ElasticPoolEdition enumeration contains all the valid editions.
   */
  readonly databaseEdition?: ElasticPoolEdition;
  /**
   * The DTU for the recommended elastic pool.
   */
  dtu?: number;
  /**
   * The minimum DTU for the database.
   */
  databaseDtuMin?: number;
  /**
   * The maximum DTU for the database.
   */
  databaseDtuMax?: number;
  /**
   * Gets storage size in megabytes.
   */
  storageMB?: number;
  /**
   * The observation period start (ISO8601 format).
   */
  readonly observationPeriodStart?: Date;
  /**
   * The observation period start (ISO8601 format).
   */
  readonly observationPeriodEnd?: Date;
  /**
   * Gets maximum observed DTU.
   */
  readonly maxObservedDtu?: number;
  /**
   * Gets maximum observed storage in megabytes.
   */
  readonly maxObservedStorageMB?: number;
  /**
   * The list of databases in this pool. Expanded property
   */
  readonly databases?: TrackedResource[];
  /**
   * The list of databases housed in the server. Expanded property
   */
  readonly metrics?: RecommendedElasticPoolMetric[];
};

/**
 * ARM tracked top level resource.
 */
export type TrackedResource = Resource & {
  /**
   * Resource location.
   */
  location: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
};

/**
 * Represents recommended elastic pool metric.
 */
export interface RecommendedElasticPoolMetric {
  /**
   * The time of metric (ISO8601 format).
   */
  dateTime?: Date;
  /**
   * Gets or sets the DTUs (Database Transaction Units). See https://azure.microsoft.com/documentation/articles/sql-database-what-is-a-dtu/
   */
  dtu?: number;
  /**
   * Gets or sets size in gigabytes.
   */
  sizeGB?: number;
}

/**
 * Represents the response to a list recommended elastic pool request.
 */
export interface RecommendedElasticPoolListResult {
  /**
   * The list of recommended elastic pools hosted in the server.
   */
  value: RecommendedElasticPool[];
}

/**
 * Represents the response to a list recommended elastic pool metrics request.
 */
export interface RecommendedElasticPoolListMetricsResult {
  /**
   * The list of recommended elastic pools metrics.
   */
  value: RecommendedElasticPoolMetric[];
}

/**
 * Represents a database replication link.
 */
export type ReplicationLink = Resource & {
  /**
   * Location of the server that contains this firewall rule.
   */
  readonly location?: string;
  /**
   * Legacy value indicating whether termination is allowed.  Currently always returns true.
   */
  readonly isTerminationAllowed?: boolean;
  /**
   * Replication mode of this replication link.
   */
  readonly replicationMode?: string;
  /**
   * The name of the server hosting the partner database.
   */
  readonly partnerServer?: string;
  /**
   * The name of the partner database.
   */
  readonly partnerDatabase?: string;
  /**
   * The Azure Region of the partner database.
   */
  readonly partnerLocation?: string;
  /**
   * The role of the database in the replication link.
   */
  readonly role?: ReplicationRole;
  /**
   * The role of the partner database in the replication link.
   */
  readonly partnerRole?: ReplicationRole;
  /**
   * The start time for the replication link.
   */
  readonly startTime?: Date;
  /**
   * The percentage of seeding complete for the replication link.
   */
  readonly percentComplete?: number;
  /**
   * The replication state for the replication link.
   */
  readonly replicationState?: ReplicationState;
};

/**
 * Represents the parameters for Unlink Replication Link request.
 */
export interface UnlinkParameters {
  /**
   * Determines whether link will be terminated in a forced or a friendly way.
   */
  forcedTermination?: boolean;
}

/**
 * Represents the response to a List database replication link request.
 */
export interface ReplicationLinkListResult {
  /**
   * The list of database replication links housed in the database.
   */
  value?: ReplicationLink[];
}

/**
 * Server communication link.
 */
export type ServerCommunicationLink = Resource & {
  /**
   * Communication link location.
   */
  readonly location?: string;
  /**
   * Communication link kind.  This property is used for Azure Portal metadata.
   */
  readonly kind?: string;
  /**
   * The state.
   */
  readonly state?: string;
  /**
   * The name of the partner server.
   */
  partnerServer?: string;
};

/**
 * A list of server communication links.
 */
export interface ServerCommunicationLinkListResult {
  /**
   * The list of server communication links.
   */
  value?: ServerCommunicationLink[];
}

/**
 * Represents a database service objective.
 */
export type ServiceObjective = Resource & {
  /**
   * The name for the service objective.
   */
  readonly serviceObjectiveName?: string;
  /**
   * Gets whether the service level objective is the default service objective.
   */
  readonly isDefault?: boolean;
  /**
   * Gets whether the service level objective is a system service objective.
   */
  readonly isSystem?: boolean;
  /**
   * The description for the service level objective.
   */
  readonly description?: string;
  /**
   * Gets whether the service level objective is enabled.
   */
  readonly enabled?: boolean;
};

/**
 * Represents the response to a get database service objectives request.
 */
export interface ServiceObjectiveListResult {
  /**
   * The list of database service objectives.
   */
  value: ServiceObjective[];
}

/**
 * Represents the response to a list elastic pool activity request.
 */
export interface ElasticPoolActivityListResult {
  /**
   * The list of elastic pool activities.
   */
  value: ElasticPoolActivity[];
}

/**
 * Represents the activity on an elastic pool.
 */
export type ElasticPoolActivity = Resource & {
  /**
   * The geo-location where the resource lives
   */
  location?: string;
  /**
   * The time the operation finished (ISO8601 format).
   */
  readonly endTime?: Date;
  /**
   * The error code if available.
   */
  readonly errorCode?: number;
  /**
   * The error message if available.
   */
  readonly errorMessage?: string;
  /**
   * The error severity if available.
   */
  readonly errorSeverity?: number;
  /**
   * The operation name.
   */
  readonly operation?: string;
  /**
   * The unique operation ID.
   */
  readonly operationId?: string;
  /**
   * The percentage complete if available.
   */
  readonly percentComplete?: number;
  /**
   * The requested max DTU per database if available.
   */
  readonly requestedDatabaseDtuMax?: number;
  /**
   * The requested min DTU per database if available.
   */
  readonly requestedDatabaseDtuMin?: number;
  /**
   * The requested DTU for the pool if available.
   */
  readonly requestedDtu?: number;
  /**
   * The requested name for the elastic pool if available.
   */
  readonly requestedElasticPoolName?: string;
  /**
   * The requested storage limit for the pool in GB if available.
   */
  readonly requestedStorageLimitInGB?: number;
  /**
   * The name of the elastic pool.
   */
  readonly elasticPoolName?: string;
  /**
   * The name of the server the elastic pool is in.
   */
  readonly serverName?: string;
  /**
   * The time the operation started (ISO8601 format).
   */
  readonly startTime?: Date;
  /**
   * The current state of the operation.
   */
  readonly state?: string;
  /**
   * The requested storage limit in MB.
   */
  readonly requestedStorageLimitInMB?: number;
  /**
   * The requested per database DTU guarantee.
   */
  readonly requestedDatabaseDtuGuarantee?: number;
  /**
   * The requested per database DTU cap.
   */
  readonly requestedDatabaseDtuCap?: number;
  /**
   * The requested DTU guarantee.
   */
  readonly requestedDtuGuarantee?: number;
};

/**
 * Represents the response to a list elastic pool database activity request.
 */
export interface ElasticPoolDatabaseActivityListResult {
  /**
   * The list of elastic pool database activities.
   */
  value: ElasticPoolDatabaseActivity[];
}

/**
 * Represents the activity on an elastic pool.
 */
export type ElasticPoolDatabaseActivity = Resource & {
  /**
   * The geo-location where the resource lives
   */
  location?: string;
  /**
   * The database name.
   */
  readonly databaseName?: string;
  /**
   * The time the operation finished (ISO8601 format).
   */
  readonly endTime?: Date;
  /**
   * The error code if available.
   */
  readonly errorCode?: number;
  /**
   * The error message if available.
   */
  readonly errorMessage?: string;
  /**
   * The error severity if available.
   */
  readonly errorSeverity?: number;
  /**
   * The operation name.
   */
  readonly operation?: string;
  /**
   * The unique operation ID.
   */
  readonly operationId?: string;
  /**
   * The percentage complete if available.
   */
  readonly percentComplete?: number;
  /**
   * The name for the elastic pool the database is moving into if available.
   */
  readonly requestedElasticPoolName?: string;
  /**
   * The name of the current elastic pool the database is in if available.
   */
  readonly currentElasticPoolName?: string;
  /**
   * The name of the current service objective if available.
   */
  readonly currentServiceObjective?: string;
  /**
   * The name of the requested service objective if available.
   */
  readonly requestedServiceObjective?: string;
  /**
   * The name of the server the elastic pool is in.
   */
  readonly serverName?: string;
  /**
   * The time the operation started (ISO8601 format).
   */
  readonly startTime?: Date;
  /**
   * The current state of the operation.
   */
  readonly state?: string;
};

/**
 * Represents a Service Tier Advisor.
 */
export type ServiceTierAdvisor = Resource & {
  /**
   * The observation period start (ISO8601 format).
   */
  readonly observationPeriodStart?: Date;
  /**
   * The observation period start (ISO8601 format).
   */
  readonly observationPeriodEnd?: Date;
  /**
   * The activeTimeRatio for service tier advisor.
   */
  readonly activeTimeRatio?: number;
  /**
   * Gets or sets minDtu for service tier advisor.
   */
  readonly minDtu?: number;
  /**
   * Gets or sets avgDtu for service tier advisor.
   */
  readonly avgDtu?: number;
  /**
   * Gets or sets maxDtu for service tier advisor.
   */
  readonly maxDtu?: number;
  /**
   * Gets or sets maxSizeInGB for service tier advisor.
   */
  readonly maxSizeInGB?: number;
  /**
   * Gets or sets serviceLevelObjectiveUsageMetrics for the service tier advisor.
   */
  readonly serviceLevelObjectiveUsageMetrics?: SloUsageMetric[];
  /**
   * Gets or sets currentServiceLevelObjective for service tier advisor.
   */
  readonly currentServiceLevelObjective?: string;
  /**
   * Gets or sets currentServiceLevelObjectiveId for service tier advisor.
   */
  readonly currentServiceLevelObjectiveId?: string;
  /**
   * Gets or sets usageBasedRecommendationServiceLevelObjective for service tier advisor.
   */
  readonly usageBasedRecommendationServiceLevelObjective?: string;
  /**
   * Gets or sets usageBasedRecommendationServiceLevelObjectiveId for service tier advisor.
   */
  readonly usageBasedRecommendationServiceLevelObjectiveId?: string;
  /**
   * Gets or sets databaseSizeBasedRecommendationServiceLevelObjective for service tier advisor.
   */
  readonly databaseSizeBasedRecommendationServiceLevelObjective?: string;
  /**
   * Gets or sets databaseSizeBasedRecommendationServiceLevelObjectiveId for service tier advisor.
   */
  readonly databaseSizeBasedRecommendationServiceLevelObjectiveId?: string;
  /**
   * Gets or sets disasterPlanBasedRecommendationServiceLevelObjective for service tier advisor.
   */
  readonly disasterPlanBasedRecommendationServiceLevelObjective?: string;
  /**
   * Gets or sets disasterPlanBasedRecommendationServiceLevelObjectiveId for service tier advisor.
   */
  readonly disasterPlanBasedRecommendationServiceLevelObjectiveId?: string;
  /**
   * Gets or sets overallRecommendationServiceLevelObjective for service tier advisor.
   */
  readonly overallRecommendationServiceLevelObjective?: string;
  /**
   * Gets or sets overallRecommendationServiceLevelObjectiveId for service tier advisor.
   */
  readonly overallRecommendationServiceLevelObjectiveId?: string;
  /**
   * Gets or sets confidence for service tier advisor.
   */
  readonly confidence?: number;
};

/**
 * A Slo Usage Metric.
 */
export interface SloUsageMetric {
  /**
   * The serviceLevelObjective for SLO usage metric.
   */
  readonly serviceLevelObjective?: ServiceObjectiveName;
  /**
   * The serviceLevelObjectiveId for SLO usage metric.
   */
  readonly serviceLevelObjectiveId?: string;
  /**
   * Gets or sets inRangeTimeRatio for SLO usage metric.
   */
  readonly inRangeTimeRatio?: number;
}

/**
 * Represents the response to a list service tier advisor request.
 */
export interface ServiceTierAdvisorListResult {
  /**
   * The list of service tier advisors for specified database.
   */
  value: ServiceTierAdvisor[];
}

/**
 * Represents a database transparent data encryption configuration.
 */
export type TransparentDataEncryption = Resource & {
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * The status of the database transparent data encryption.
   */
  status?: TransparentDataEncryptionStatus;
};

/**
 * Represents the response to a list database transparent data encryption activity request.
 */
export interface TransparentDataEncryptionActivityListResult {
  /**
   * The list of database transparent data encryption activities.
   */
  value: TransparentDataEncryptionActivity[];
}

/**
 * Represents a database transparent data encryption Scan.
 */
export type TransparentDataEncryptionActivity = Resource & {
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * The status of the database.
   */
  readonly status?: TransparentDataEncryptionActivityStatus;
  /**
   * The percent complete of the transparent data encryption scan for a database.
   */
  readonly percentComplete?: number;
};

/**
 * Represents the response to a list server metrics request.
 */
export interface ServerUsageListResult {
  /**
   * The list of server metrics for the server.
   */
  value: ServerUsage[];
}

/**
 * Represents server metrics.
 */
export interface ServerUsage {
  /**
   * Name of the server usage metric.
   */
  readonly name?: string;
  /**
   * The name of the resource.
   */
  readonly resourceName?: string;
  /**
   * The metric display name.
   */
  readonly displayName?: string;
  /**
   * The current value of the metric.
   */
  readonly currentValue?: number;
  /**
   * The current limit of the metric.
   */
  readonly limit?: number;
  /**
   * The units of the metric.
   */
  readonly unit?: string;
  /**
   * The next reset time for the metric (ISO8601 format).
   */
  readonly nextResetTime?: Date;
}

/**
 * The response to a list database metrics request.
 */
export interface DatabaseUsageListResult {
  /**
   * The list of database usages for the database.
   */
  value: DatabaseUsage[];
}

/**
 * The database usages.
 */
export interface DatabaseUsage {
  /**
   * The name of the usage metric.
   */
  readonly name?: string;
  /**
   * The name of the resource.
   */
  readonly resourceName?: string;
  /**
   * The usage metric display name.
   */
  readonly displayName?: string;
  /**
   * The current value of the usage metric.
   */
  readonly currentValue?: number;
  /**
   * The current limit of the usage metric.
   */
  readonly limit?: number;
  /**
   * The units of the usage metric.
   */
  readonly unit?: string;
  /**
   * The next reset time for the usage metric (ISO8601 format).
   */
  readonly nextResetTime?: Date;
}

/**
 * Database-level Automatic Tuning.
 */
export type DatabaseAutomaticTuning = Resource & {
  /**
   * Automatic tuning desired state.
   */
  desiredState?: AutomaticTuningMode;
  /**
   * Automatic tuning actual state.
   */
  readonly actualState?: AutomaticTuningMode;
  /**
   * Automatic tuning options definition.
   */
  options?: { [propertyName: string]: AutomaticTuningOptions };
};

/**
 * Automatic tuning properties for individual advisors.
 */
export interface AutomaticTuningOptions {
  /**
   * Automatic tuning option desired state.
   */
  desiredState?: AutomaticTuningOptionModeDesired;
  /**
   * Automatic tuning option actual state.
   */
  readonly actualState?: AutomaticTuningOptionModeActual;
  /**
   * Reason code if desired and actual state are different.
   */
  readonly reasonCode?: number;
  /**
   * Reason description if desired and actual state are different.
   */
  readonly reasonDesc?: AutomaticTuningDisabledReason;
}

/**
 * A list of server encryption protectors.
 */
export interface EncryptionProtectorListResult {
  /**
   * Array of results.
   */
  readonly value?: EncryptionProtector[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * The server encryption protector.
 */
export type EncryptionProtector = Resource & {
  /**
   * Kind of encryption protector. This is metadata used for the Azure portal experience.
   */
  readonly kind?: string;
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * Subregion of the encryption protector.
   */
  readonly subregion?: string;
  /**
   * The name of the server key.
   */
  serverKeyName?: string;
  /**
   * The encryption protector type like 'ServiceManaged', 'AzureKeyVault'.
   */
  serverKeyType?: ServerKeyType;
  /**
   * The URI of the server key.
   */
  readonly uri?: string;
  /**
   * Thumbprint of the server key.
   */
  readonly thumbprint?: string;
};

/**
 * A failover group.
 */
export type FailoverGroup = Resource & {
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Read-write endpoint of the failover group instance.
   */
  readWriteEndpoint?: FailoverGroupReadWriteEndpoint;
  /**
   * Read-only endpoint of the failover group instance.
   */
  readOnlyEndpoint?: FailoverGroupReadOnlyEndpoint;
  /**
   * Local replication role of the failover group instance.
   */
  readonly replicationRole?: FailoverGroupReplicationRole;
  /**
   * Replication state of the failover group instance.
   */
  readonly replicationState?: string;
  /**
   * List of partner server information for the failover group.
   */
  partnerServers?: PartnerInfo[];
  /**
   * List of databases in the failover group.
   */
  databases?: string[];
};

/**
 * Read-write endpoint of the failover group instance.
 */
export interface FailoverGroupReadWriteEndpoint {
  /**
   * Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
   */
  failoverPolicy: ReadWriteEndpointFailoverPolicy;
  /**
   * Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
   */
  failoverWithDataLossGracePeriodMinutes?: number;
}

/**
 * Read-only endpoint of the failover group instance.
 */
export interface FailoverGroupReadOnlyEndpoint {
  /**
   * Failover policy of the read-only endpoint for the failover group.
   */
  failoverPolicy?: ReadOnlyEndpointFailoverPolicy;
}

/**
 * Partner server information for the failover group.
 */
export interface PartnerInfo {
  /**
   * Resource identifier of the partner server.
   */
  id: string;
  /**
   * Geo location of the partner server.
   */
  readonly location?: string;
  /**
   * Replication role of the partner server.
   */
  readonly replicationRole?: FailoverGroupReplicationRole;
}

/**
 * A failover group update request.
 */
export interface FailoverGroupUpdate {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Read-write endpoint of the failover group instance.
   */
  readWriteEndpoint?: FailoverGroupReadWriteEndpoint;
  /**
   * Read-only endpoint of the failover group instance.
   */
  readOnlyEndpoint?: FailoverGroupReadOnlyEndpoint;
  /**
   * List of databases in the failover group.
   */
  databases?: string[];
}

/**
 * A list of failover groups.
 */
export interface FailoverGroupListResult {
  /**
   * Array of results.
   */
  readonly value?: FailoverGroup[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * Result of the request to list SQL operations.
 */
export interface OperationListResult {
  /**
   * Array of results.
   */
  readonly value?: Operation[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * SQL REST API operation definition.
 */
export interface Operation {
  /**
   * The name of the operation being performed on this particular object.
   */
  readonly name?: string;
  /**
   * The localized display information for this particular operation / action.
   */
  readonly display?: OperationDisplay;
  /**
   * The intended executor of the operation.
   */
  readonly origin?: OperationOrigin;
  /**
   * Additional descriptions for the operation.
   */
  readonly properties?: { [propertyName: string]: any };
}

/**
 * Display metadata associated with the operation.
 */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name.
   */
  readonly provider?: string;
  /**
   * The localized friendly form of the resource type related to this action/operation.
   */
  readonly resource?: string;
  /**
   * The localized friendly name for the operation.
   */
  readonly operation?: string;
  /**
   * The localized friendly description for the operation.
   */
  readonly description?: string;
}

/**
 * A list of server keys.
 */
export interface ServerKeyListResult {
  /**
   * Array of results.
   */
  readonly value?: ServerKey[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A server key.
 */
export type ServerKey = Resource & {
  /**
   * Kind of encryption protector. This is metadata used for the Azure portal experience.
   */
  kind?: string;
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * Subregion of the server key.
   */
  readonly subregion?: string;
  /**
   * The server key type like 'ServiceManaged', 'AzureKeyVault'.
   */
  serverKeyType?: ServerKeyType;
  /**
   * The URI of the server key.
   */
  uri?: string;
  /**
   * Thumbprint of the server key.
   */
  thumbprint?: string;
  /**
   * The server key creation date.
   */
  creationDate?: Date;
};

/**
 * An Azure SQL Database sync agent.
 */
export type SyncAgent = Resource & {
  /**
   * Name of the sync agent.
   */
  readonly namePropertiesName?: string;
  /**
   * ARM resource id of the sync database in the sync agent.
   */
  syncDatabaseId?: string;
  /**
   * Last alive time of the sync agent.
   */
  readonly lastAliveTime?: Date;
  /**
   * State of the sync agent.
   */
  readonly state?: SyncAgentState;
  /**
   * If the sync agent version is up to date.
   */
  readonly isUpToDate?: boolean;
  /**
   * Expiration time of the sync agent version.
   */
  readonly expiryTime?: Date;
  /**
   * Version of the sync agent.
   */
  readonly version?: string;
};

/**
 * A list of sync agents.
 */
export interface SyncAgentListResult {
  /**
   * Array of results.
   */
  readonly value?: SyncAgent[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * Properties of an Azure SQL Database sync agent key.
 */
export interface SyncAgentKeyProperties {
  /**
   * Key of sync agent.
   */
  readonly syncAgentKey?: string;
}

/**
 * A list of sync agent linked databases.
 */
export interface SyncAgentLinkedDatabaseListResult {
  /**
   * Array of results.
   */
  readonly value?: SyncAgentLinkedDatabase[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An Azure SQL Database sync agent linked database.
 */
export type SyncAgentLinkedDatabase = Resource & {
  /**
   * Type of the sync agent linked database.
   */
  readonly databaseType?: SyncMemberDbType;
  /**
   * Id of the sync agent linked database.
   */
  readonly databaseId?: string;
  /**
   * Description of the sync agent linked database.
   */
  readonly description?: string;
  /**
   * Server name of the sync agent linked database.
   */
  readonly serverName?: string;
  /**
   * Database name of the sync agent linked database.
   */
  readonly databaseName?: string;
  /**
   * User name of the sync agent linked database.
   */
  readonly userName?: string;
};

/**
 * A list of sync database ID properties.
 */
export interface SyncDatabaseIdListResult {
  /**
   * Array of results.
   */
  readonly value?: SyncDatabaseIdProperties[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * Properties of the sync database id.
 */
export interface SyncDatabaseIdProperties {
  /**
   * ARM resource id of sync database.
   */
  readonly id?: string;
}

/**
 * A list of sync schema properties.
 */
export interface SyncFullSchemaPropertiesListResult {
  /**
   * Array of results.
   */
  readonly value?: SyncFullSchemaProperties[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * Properties of the database full schema.
 */
export interface SyncFullSchemaProperties {
  /**
   * List of tables in the database full schema.
   */
  readonly tables?: SyncFullSchemaTable[];
  /**
   * Last update time of the database schema.
   */
  readonly lastUpdateTime?: Date;
}

/**
 * Properties of the table in the database full schema.
 */
export interface SyncFullSchemaTable {
  /**
   * List of columns in the table of database full schema.
   */
  readonly columns?: SyncFullSchemaTableColumn[];
  /**
   * Error id of the table.
   */
  readonly errorId?: string;
  /**
   * If there is error in the table.
   */
  readonly hasError?: boolean;
  /**
   * Name of the table.
   */
  readonly name?: string;
  /**
   * Quoted name of the table.
   */
  readonly quotedName?: string;
}

/**
 * Properties of the column in the table of database full schema.
 */
export interface SyncFullSchemaTableColumn {
  /**
   * Data size of the column.
   */
  readonly dataSize?: string;
  /**
   * Data type of the column.
   */
  readonly dataType?: string;
  /**
   * Error id of the column.
   */
  readonly errorId?: string;
  /**
   * If there is error in the table.
   */
  readonly hasError?: boolean;
  /**
   * If it is the primary key of the table.
   */
  readonly isPrimaryKey?: boolean;
  /**
   * Name of the column.
   */
  readonly name?: string;
  /**
   * Quoted name of the column.
   */
  readonly quotedName?: string;
}

/**
 * A list of sync group log properties.
 */
export interface SyncGroupLogListResult {
  /**
   * Array of results.
   */
  readonly value?: SyncGroupLogProperties[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * Properties of an Azure SQL Database sync group log.
 */
export interface SyncGroupLogProperties {
  /**
   * Timestamp of the sync group log.
   */
  readonly timestamp?: Date;
  /**
   * Type of the sync group log.
   */
  readonly type?: SyncGroupLogType;
  /**
   * Source of the sync group log.
   */
  readonly source?: string;
  /**
   * Details of the sync group log.
   */
  readonly details?: string;
  /**
   * TracingId of the sync group log.
   */
  readonly tracingId?: string;
  /**
   * OperationStatus of the sync group log.
   */
  readonly operationStatus?: string;
}

/**
 * An Azure SQL Database sync group.
 */
export type SyncGroup = Resource & {
  /**
   * Sync interval of the sync group.
   */
  interval?: number;
  /**
   * Last sync time of the sync group.
   */
  readonly lastSyncTime?: Date;
  /**
   * Conflict resolution policy of the sync group.
   */
  conflictResolutionPolicy?: SyncConflictResolutionPolicy;
  /**
   * ARM resource id of the sync database in the sync group.
   */
  syncDatabaseId?: string;
  /**
   * User name for the sync group hub database credential.
   */
  hubDatabaseUserName?: string;
  /**
   * Password for the sync group hub database credential.
   */
  hubDatabasePassword?: string;
  /**
   * Sync state of the sync group.
   */
  readonly syncState?: SyncGroupState;
  /**
   * Sync schema of the sync group.
   */
  schema?: SyncGroupSchema;
};

/**
 * Properties of sync group schema.
 */
export interface SyncGroupSchema {
  /**
   * List of tables in sync group schema.
   */
  tables?: SyncGroupSchemaTable[];
  /**
   * Name of master sync member where the schema is from.
   */
  masterSyncMemberName?: string;
}

/**
 * Properties of table in sync group schema.
 */
export interface SyncGroupSchemaTable {
  /**
   * List of columns in sync group schema.
   */
  columns?: SyncGroupSchemaTableColumn[];
  /**
   * Quoted name of sync group schema table.
   */
  quotedName?: string;
}

/**
 * Properties of column in sync group table.
 */
export interface SyncGroupSchemaTableColumn {
  /**
   * Quoted name of sync group table column.
   */
  quotedName?: string;
  /**
   * Data size of the column.
   */
  dataSize?: string;
  /**
   * Data type of the column.
   */
  dataType?: string;
}

/**
 * A list of sync groups.
 */
export interface SyncGroupListResult {
  /**
   * Array of results.
   */
  readonly value?: SyncGroup[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An Azure SQL Database sync member.
 */
export type SyncMember = Resource & {
  /**
   * Database type of the sync member.
   */
  databaseType?: SyncMemberDbType;
  /**
   * ARM resource id of the sync agent in the sync member.
   */
  syncAgentId?: string;
  /**
   * SQL Server database id of the sync member.
   */
  sqlServerDatabaseId?: string;
  /**
   * Server name of the member database in the sync member
   */
  serverName?: string;
  /**
   * Database name of the member database in the sync member.
   */
  databaseName?: string;
  /**
   * User name of the member database in the sync member.
   */
  userName?: string;
  /**
   * Password of the member database in the sync member.
   */
  password?: string;
  /**
   * Sync direction of the sync member.
   */
  syncDirection?: SyncDirection;
  /**
   * Sync state of the sync member.
   */
  readonly syncState?: SyncMemberState;
};

/**
 * A list of Azure SQL Database sync members.
 */
export interface SyncMemberListResult {
  /**
   * Array of results.
   */
  readonly value?: SyncMember[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A list of subscription usage metrics in a location.
 */
export interface SubscriptionUsageListResult {
  /**
   * Array of results.
   */
  readonly value?: SubscriptionUsage[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * Usage Metric of a Subscription in a Location.
 */
export type SubscriptionUsage = Resource & {
  /**
   * User-readable name of the metric.
   */
  readonly displayName?: string;
  /**
   * Current value of the metric.
   */
  readonly currentValue?: number;
  /**
   * Boundary value of the metric.
   */
  readonly limit?: number;
  /**
   * Unit of the metric.
   */
  readonly unit?: string;
};

/**
 * A list of virtual clusters.
 */
export interface VirtualClusterListResult {
  /**
   * Array of results.
   */
  readonly value?: VirtualCluster[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An Azure SQL virtual cluster.
 */
export type VirtualCluster = TrackedResource & {
  /**
   * Subnet resource ID for the virtual cluster.
   */
  readonly subnetId?: string;
  /**
   * If the service has different generations of hardware, for the same SKU, then that can be captured here.
   */
  family?: string;
  /**
   * List of resources in this virtual cluster.
   */
  readonly childResources?: string[];
};

/**
 * An update request for an Azure SQL Database virtual cluster.
 */
export interface VirtualClusterUpdate {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Subnet resource ID for the virtual cluster.
   */
  readonly subnetId?: string;
  /**
   * If the service has different generations of hardware, for the same SKU, then that can be captured here.
   */
  family?: string;
  /**
   * List of resources in this virtual cluster.
   */
  readonly childResources?: string[];
}

/**
 * A virtual network rule.
 */
export type VirtualNetworkRule = Resource & {
  /**
   * The ARM resource id of the virtual network subnet.
   */
  virtualNetworkSubnetId?: string;
  /**
   * Create firewall rule before the virtual network has vnet service endpoint enabled.
   */
  ignoreMissingVnetServiceEndpoint?: boolean;
  /**
   * Virtual Network Rule State
   */
  readonly state?: VirtualNetworkRuleState;
};

/**
 * A list of virtual network rules.
 */
export interface VirtualNetworkRuleListResult {
  /**
   * Array of results.
   */
  readonly value?: VirtualNetworkRule[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An extended database blob auditing policy.
 */
export type ExtendedDatabaseBlobAuditingPolicy = Resource & {
  /**
   * Specifies condition of where clause when creating an audit.
   */
  predicateExpression?: string;
  /**
   * Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
   */
  state?: BlobAuditingPolicyState;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the auditing storage account.
   * If state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.
   * Prerequisites for using managed identity authentication:
   * 1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).
   * 2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity.
   * For more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the audit logs in the storage account.
   */
  retentionDays?: number;
  /**
   * Specifies the Actions-Groups and Actions to audit.
   *
   * The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
   *
   * BATCH_COMPLETED_GROUP,
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
   * FAILED_DATABASE_AUTHENTICATION_GROUP.
   *
   * This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
   *
   * The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
   *
   * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
   * BACKUP_RESTORE_GROUP
   * DATABASE_LOGOUT_GROUP
   * DATABASE_OBJECT_CHANGE_GROUP
   * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
   * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
   * DATABASE_OPERATION_GROUP
   * DATABASE_PERMISSION_CHANGE_GROUP
   * DATABASE_PRINCIPAL_CHANGE_GROUP
   * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
   * DATABASE_ROLE_MEMBER_CHANGE_GROUP
   * FAILED_DATABASE_AUTHENTICATION_GROUP
   * SCHEMA_OBJECT_ACCESS_GROUP
   * SCHEMA_OBJECT_CHANGE_GROUP
   * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
   * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
   * USER_CHANGE_PASSWORD_GROUP
   * BATCH_STARTED_GROUP
   * BATCH_COMPLETED_GROUP
   *
   * These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
   *
   * For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
   *
   * For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
   * SELECT
   * UPDATE
   * INSERT
   * DELETE
   * EXECUTE
   * RECEIVE
   * REFERENCES
   *
   * The general form for defining an action to be audited is:
   * {action} ON {object} BY {principal}
   *
   * Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
   *
   * For example:
   * SELECT on dbo.myTable by public
   * SELECT on DATABASE::myDatabase by public
   * SELECT on SCHEMA::mySchema by public
   *
   * For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
   */
  auditActionsAndGroups?: string[];
  /**
   * Specifies the blob storage subscription Id.
   */
  storageAccountSubscriptionId?: string;
  /**
   * Specifies whether storageAccountAccessKey value is the storage's secondary key.
   */
  isStorageSecondaryKeyInUse?: boolean;
  /**
   * Specifies whether audit events are sent to Azure Monitor.
   * In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.
   *
   * When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
   * Note that for server level audit you should use the 'master' database as {databaseName}.
   *
   * Diagnostic Settings URI format:
   * PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
   *
   * For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
   * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
   *
   */
  isAzureMonitorTargetEnabled?: boolean;
  /**
   * Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
   * The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
   */
  queueDelayMs?: number;
};

/**
 * A list of database extended auditing settings.
 */
export interface ExtendedDatabaseBlobAuditingPolicyListResult {
  /**
   * Array of results.
   */
  readonly value?: ExtendedDatabaseBlobAuditingPolicy[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An extended server blob auditing policy.
 */
export type ExtendedServerBlobAuditingPolicy = Resource & {
  /**
   * Specifies condition of where clause when creating an audit.
   */
  predicateExpression?: string;
  /**
   * Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
   */
  state?: BlobAuditingPolicyState;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the auditing storage account.
   * If state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.
   * Prerequisites for using managed identity authentication:
   * 1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).
   * 2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity.
   * For more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the audit logs in the storage account.
   */
  retentionDays?: number;
  /**
   * Specifies the Actions-Groups and Actions to audit.
   *
   * The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
   *
   * BATCH_COMPLETED_GROUP,
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
   * FAILED_DATABASE_AUTHENTICATION_GROUP.
   *
   * This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
   *
   * The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
   *
   * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
   * BACKUP_RESTORE_GROUP
   * DATABASE_LOGOUT_GROUP
   * DATABASE_OBJECT_CHANGE_GROUP
   * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
   * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
   * DATABASE_OPERATION_GROUP
   * DATABASE_PERMISSION_CHANGE_GROUP
   * DATABASE_PRINCIPAL_CHANGE_GROUP
   * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
   * DATABASE_ROLE_MEMBER_CHANGE_GROUP
   * FAILED_DATABASE_AUTHENTICATION_GROUP
   * SCHEMA_OBJECT_ACCESS_GROUP
   * SCHEMA_OBJECT_CHANGE_GROUP
   * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
   * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
   * USER_CHANGE_PASSWORD_GROUP
   * BATCH_STARTED_GROUP
   * BATCH_COMPLETED_GROUP
   *
   * These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
   *
   * For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
   *
   * For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
   * SELECT
   * UPDATE
   * INSERT
   * DELETE
   * EXECUTE
   * RECEIVE
   * REFERENCES
   *
   * The general form for defining an action to be audited is:
   * {action} ON {object} BY {principal}
   *
   * Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
   *
   * For example:
   * SELECT on dbo.myTable by public
   * SELECT on DATABASE::myDatabase by public
   * SELECT on SCHEMA::mySchema by public
   *
   * For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
   */
  auditActionsAndGroups?: string[];
  /**
   * Specifies the blob storage subscription Id.
   */
  storageAccountSubscriptionId?: string;
  /**
   * Specifies whether storageAccountAccessKey value is the storage's secondary key.
   */
  isStorageSecondaryKeyInUse?: boolean;
  /**
   * Specifies whether audit events are sent to Azure Monitor.
   * In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.
   *
   * When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
   * Note that for server level audit you should use the 'master' database as {databaseName}.
   *
   * Diagnostic Settings URI format:
   * PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
   *
   * For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
   * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
   *
   */
  isAzureMonitorTargetEnabled?: boolean;
  /**
   * Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
   * The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
   */
  queueDelayMs?: number;
};

/**
 * A list of server extended auditing settings.
 */
export interface ExtendedServerBlobAuditingPolicyListResult {
  /**
   * Array of results.
   */
  readonly value?: ExtendedServerBlobAuditingPolicy[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A server blob auditing policy.
 */
export type ServerBlobAuditingPolicy = Resource & {
  /**
   * Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
   */
  state?: BlobAuditingPolicyState;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the auditing storage account.
   * If state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.
   * Prerequisites for using managed identity authentication:
   * 1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).
   * 2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity.
   * For more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the audit logs in the storage account.
   */
  retentionDays?: number;
  /**
   * Specifies the Actions-Groups and Actions to audit.
   *
   * The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
   *
   * BATCH_COMPLETED_GROUP,
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
   * FAILED_DATABASE_AUTHENTICATION_GROUP.
   *
   * This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
   *
   * The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
   *
   * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
   * BACKUP_RESTORE_GROUP
   * DATABASE_LOGOUT_GROUP
   * DATABASE_OBJECT_CHANGE_GROUP
   * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
   * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
   * DATABASE_OPERATION_GROUP
   * DATABASE_PERMISSION_CHANGE_GROUP
   * DATABASE_PRINCIPAL_CHANGE_GROUP
   * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
   * DATABASE_ROLE_MEMBER_CHANGE_GROUP
   * FAILED_DATABASE_AUTHENTICATION_GROUP
   * SCHEMA_OBJECT_ACCESS_GROUP
   * SCHEMA_OBJECT_CHANGE_GROUP
   * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
   * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
   * USER_CHANGE_PASSWORD_GROUP
   * BATCH_STARTED_GROUP
   * BATCH_COMPLETED_GROUP
   *
   * These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
   *
   * For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
   *
   * For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
   * SELECT
   * UPDATE
   * INSERT
   * DELETE
   * EXECUTE
   * RECEIVE
   * REFERENCES
   *
   * The general form for defining an action to be audited is:
   * {action} ON {object} BY {principal}
   *
   * Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
   *
   * For example:
   * SELECT on dbo.myTable by public
   * SELECT on DATABASE::myDatabase by public
   * SELECT on SCHEMA::mySchema by public
   *
   * For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
   */
  auditActionsAndGroups?: string[];
  /**
   * Specifies the blob storage subscription Id.
   */
  storageAccountSubscriptionId?: string;
  /**
   * Specifies whether storageAccountAccessKey value is the storage's secondary key.
   */
  isStorageSecondaryKeyInUse?: boolean;
  /**
   * Specifies whether audit events are sent to Azure Monitor.
   * In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.
   *
   * When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
   * Note that for server level audit you should use the 'master' database as {databaseName}.
   *
   * Diagnostic Settings URI format:
   * PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
   *
   * For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
   * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
   *
   */
  isAzureMonitorTargetEnabled?: boolean;
  /**
   * Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
   * The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
   */
  queueDelayMs?: number;
};

/**
 * A list of server auditing settings.
 */
export interface ServerBlobAuditingPolicyListResult {
  /**
   * Array of results.
   */
  readonly value?: ServerBlobAuditingPolicy[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A database blob auditing policy.
 */
export type DatabaseBlobAuditingPolicy = Resource & {
  /**
   * Resource kind.
   */
  readonly kind?: string;
  /**
   * Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
   */
  state?: BlobAuditingPolicyState;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the auditing storage account.
   * If state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.
   * Prerequisites for using managed identity authentication:
   * 1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).
   * 2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity.
   * For more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the audit logs in the storage account.
   */
  retentionDays?: number;
  /**
   * Specifies the Actions-Groups and Actions to audit.
   *
   * The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
   *
   * BATCH_COMPLETED_GROUP,
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
   * FAILED_DATABASE_AUTHENTICATION_GROUP.
   *
   * This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
   *
   * The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
   *
   * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
   * BACKUP_RESTORE_GROUP
   * DATABASE_LOGOUT_GROUP
   * DATABASE_OBJECT_CHANGE_GROUP
   * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
   * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
   * DATABASE_OPERATION_GROUP
   * DATABASE_PERMISSION_CHANGE_GROUP
   * DATABASE_PRINCIPAL_CHANGE_GROUP
   * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
   * DATABASE_ROLE_MEMBER_CHANGE_GROUP
   * FAILED_DATABASE_AUTHENTICATION_GROUP
   * SCHEMA_OBJECT_ACCESS_GROUP
   * SCHEMA_OBJECT_CHANGE_GROUP
   * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
   * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
   * USER_CHANGE_PASSWORD_GROUP
   * BATCH_STARTED_GROUP
   * BATCH_COMPLETED_GROUP
   *
   * These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
   *
   * For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
   *
   * For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
   * SELECT
   * UPDATE
   * INSERT
   * DELETE
   * EXECUTE
   * RECEIVE
   * REFERENCES
   *
   * The general form for defining an action to be audited is:
   * {action} ON {object} BY {principal}
   *
   * Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
   *
   * For example:
   * SELECT on dbo.myTable by public
   * SELECT on DATABASE::myDatabase by public
   * SELECT on SCHEMA::mySchema by public
   *
   * For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
   */
  auditActionsAndGroups?: string[];
  /**
   * Specifies the blob storage subscription Id.
   */
  storageAccountSubscriptionId?: string;
  /**
   * Specifies whether storageAccountAccessKey value is the storage's secondary key.
   */
  isStorageSecondaryKeyInUse?: boolean;
  /**
   * Specifies whether audit events are sent to Azure Monitor.
   * In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.
   *
   * When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
   * Note that for server level audit you should use the 'master' database as {databaseName}.
   *
   * Diagnostic Settings URI format:
   * PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
   *
   * For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
   * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
   *
   */
  isAzureMonitorTargetEnabled?: boolean;
  /**
   * Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
   * The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
   */
  queueDelayMs?: number;
};

/**
 * A list of database auditing settings.
 */
export interface DatabaseBlobAuditingPolicyListResult {
  /**
   * Array of results.
   */
  readonly value?: DatabaseBlobAuditingPolicy[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A database vulnerability assessment rule baseline.
 */
export type DatabaseVulnerabilityAssessmentRuleBaseline = Resource & {
  /**
   * The rule baseline result
   */
  baselineResults?: DatabaseVulnerabilityAssessmentRuleBaselineItem[];
};

/**
 * Properties for an Azure SQL Database Vulnerability Assessment rule baseline's result.
 */
export interface DatabaseVulnerabilityAssessmentRuleBaselineItem {
  /**
   * The rule baseline result
   */
  result: string[];
}

/**
 * A database vulnerability assessment.
 */
export type DatabaseVulnerabilityAssessment = Resource & {
  /**
   * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
   */
  storageContainerPath?: string;
  /**
   * A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
   */
  storageContainerSasKey?: string;
  /**
   * Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
   */
  storageAccountAccessKey?: string;
  /**
   * The recurring scans settings
   */
  recurringScans?: VulnerabilityAssessmentRecurringScansProperties;
};

/**
 * Properties of a Vulnerability Assessment recurring scans.
 */
export interface VulnerabilityAssessmentRecurringScansProperties {
  /**
   * Recurring scans state.
   */
  isEnabled?: boolean;
  /**
   * Specifies that the schedule scan notification will be is sent to the subscription administrators.
   */
  emailSubscriptionAdmins?: boolean;
  /**
   * Specifies an array of e-mail addresses to which the scan notification is sent.
   */
  emails?: string[];
}

/**
 * A list of the database's vulnerability assessments.
 */
export interface DatabaseVulnerabilityAssessmentListResult {
  /**
   * Array of results.
   */
  readonly value?: DatabaseVulnerabilityAssessment[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A list of Azure SQL job agents.
 */
export interface JobAgentListResult {
  /**
   * Array of results.
   */
  readonly value?: JobAgent[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An Azure SQL job agent.
 */
export type JobAgent = TrackedResource & {
  /**
   * The name and tier of the SKU.
   */
  sku?: Sku;
  /**
   * Resource ID of the database to store job metadata in.
   */
  databaseId?: string;
  /**
   * The state of the job agent.
   */
  readonly state?: JobAgentState;
};

/**
 * An ARM Resource SKU.
 */
export interface Sku {
  /**
   * The name of the SKU, typically, a letter + Number code, e.g. P3.
   */
  name: string;
  /**
   * The tier or edition of the particular SKU, e.g. Basic, Premium.
   */
  tier?: string;
  /**
   * Size of the particular SKU
   */
  size?: string;
  /**
   * If the service has different generations of hardware, for the same SKU, then that can be captured here.
   */
  family?: string;
  /**
   * Capacity of the particular SKU.
   */
  capacity?: number;
}

/**
 * An update to an Azure SQL job agent.
 */
export interface JobAgentUpdate {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A list of job credentials.
 */
export interface JobCredentialListResult {
  /**
   * Array of results.
   */
  readonly value?: JobCredential[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A stored credential that can be used by a job to connect to target databases.
 */
export type JobCredential = Resource & {
  /**
   * The credential user name.
   */
  username?: string;
  /**
   * The credential password.
   */
  password?: string;
};

/**
 * A list of job executions.
 */
export interface JobExecutionListResult {
  /**
   * Array of results.
   */
  readonly value?: JobExecution[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An execution of a job
 */
export type JobExecution = Resource & {
  /**
   * The job version number.
   */
  readonly jobVersion?: number;
  /**
   * The job step name.
   */
  readonly stepName?: string;
  /**
   * The job step id.
   */
  readonly stepId?: number;
  /**
   * The unique identifier of the job execution.
   */
  readonly jobExecutionId?: string;
  /**
   * The detailed state of the job execution.
   */
  readonly lifecycle?: JobExecutionLifecycle;
  /**
   * The ARM provisioning state of the job execution.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The time that the job execution was created.
   */
  readonly createTime?: Date;
  /**
   * The time that the job execution started.
   */
  readonly startTime?: Date;
  /**
   * The time that the job execution completed.
   */
  readonly endTime?: Date;
  /**
   * Number of times the job execution has been attempted.
   */
  currentAttempts?: number;
  /**
   * Start time of the current attempt.
   */
  readonly currentAttemptStartTime?: Date;
  /**
   * The last status or error message.
   */
  readonly lastMessage?: string;
  /**
   * The target that this execution is executed on.
   */
  readonly target?: JobExecutionTarget;
};

/**
 * The target that a job execution is executed on.
 */
export interface JobExecutionTarget {
  /**
   * The type of the target.
   */
  readonly type?: JobTargetType;
  /**
   * The server name.
   */
  readonly serverName?: string;
  /**
   * The database name.
   */
  readonly databaseName?: string;
}

/**
 * A list of jobs.
 */
export interface JobListResult {
  /**
   * Array of results.
   */
  readonly value?: Job[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A job.
 */
export type Job = Resource & {
  /**
   * User-defined description of the job.
   */
  description?: string;
  /**
   * The job version number.
   */
  readonly version?: number;
  /**
   * Schedule properties of the job.
   */
  schedule?: JobSchedule;
};

/**
 * Scheduling properties of a job.
 */
export interface JobSchedule {
  /**
   * Schedule start time.
   */
  startTime?: Date;
  /**
   * Schedule end time.
   */
  endTime?: Date;
  /**
   * Schedule interval type
   */
  type?: JobScheduleType;
  /**
   * Whether or not the schedule is enabled.
   */
  enabled?: boolean;
  /**
   * Value of the schedule's recurring interval, if the schedule type is recurring. ISO8601 duration format.
   */
  interval?: string;
}

/**
 * A list of job steps.
 */
export interface JobStepListResult {
  /**
   * Array of results.
   */
  readonly value?: JobStep[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A job step.
 */
export type JobStep = Resource & {
  /**
   * The job step's index within the job. If not specified when creating the job step, it will be created as the last step. If not specified when updating the job step, the step id is not modified.
   */
  stepId?: number;
  /**
   * The resource ID of the target group that the job step will be executed on.
   */
  targetGroup?: string;
  /**
   * The resource ID of the job credential that will be used to connect to the targets.
   */
  credential?: string;
  /**
   * The action payload of the job step.
   */
  action?: JobStepAction;
  /**
   * Output destination properties of the job step.
   */
  output?: JobStepOutput;
  /**
   * Execution options for the job step.
   */
  executionOptions?: JobStepExecutionOptions;
};

/**
 * The action to be executed by a job step.
 */
export interface JobStepAction {
  /**
   * Type of action being executed by the job step.
   */
  type?: "TSql";
  /**
   * The source of the action to execute.
   */
  source?: "Inline";
  /**
   * The action value, for example the text of the T-SQL script to execute.
   */
  value: string;
}

/**
 * The output configuration of a job step.
 */
export interface JobStepOutput {
  /**
   * The output destination type.
   */
  type?: "SqlDatabase";
  /**
   * The output destination subscription id.
   */
  subscriptionId?: string;
  /**
   * The output destination resource group.
   */
  resourceGroupName?: string;
  /**
   * The output destination server name.
   */
  serverName: string;
  /**
   * The output destination database.
   */
  databaseName: string;
  /**
   * The output destination schema.
   */
  schemaName?: string;
  /**
   * The output destination table.
   */
  tableName: string;
  /**
   * The resource ID of the credential to use to connect to the output destination.
   */
  credential: string;
}

/**
 * The execution options of a job step.
 */
export interface JobStepExecutionOptions {
  /**
   * Execution timeout for the job step.
   */
  timeoutSeconds?: number;
  /**
   * Maximum number of times the job step will be reattempted if the first attempt fails.
   */
  retryAttempts?: number;
  /**
   * Initial delay between retries for job step execution.
   */
  initialRetryIntervalSeconds?: number;
  /**
   * The maximum amount of time to wait between retries for job step execution.
   */
  maximumRetryIntervalSeconds?: number;
  /**
   * The backoff multiplier for the time between retries.
   */
  retryIntervalBackoffMultiplier?: number;
}

/**
 * A list of target groups.
 */
export interface JobTargetGroupListResult {
  /**
   * Array of results.
   */
  readonly value?: JobTargetGroup[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A group of job targets.
 */
export type JobTargetGroup = Resource & {
  /**
   * Members of the target group.
   */
  members?: JobTarget[];
};

/**
 * A job target, for example a specific database or a container of databases that is evaluated during job execution.
 */
export interface JobTarget {
  /**
   * Whether the target is included or excluded from the group.
   */
  membershipType?: JobTargetGroupMembershipType;
  /**
   * The target type.
   */
  type: JobTargetType;
  /**
   * The target server name.
   */
  serverName?: string;
  /**
   * The target database name.
   */
  databaseName?: string;
  /**
   * The target elastic pool name.
   */
  elasticPoolName?: string;
  /**
   * The target shard map.
   */
  shardMapName?: string;
  /**
   * The resource ID of the credential that is used during job execution to connect to the target and determine the list of databases inside the target.
   */
  refreshCredential?: string;
}

/**
 * A list of job versions.
 */
export interface JobVersionListResult {
  /**
   * Array of results.
   */
  readonly value?: Resource[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A long term retention backup.
 */
export type LongTermRetentionBackup = Resource & {
  /**
   * The server name that the backup database belong to.
   */
  readonly serverName?: string;
  /**
   * The create time of the server.
   */
  readonly serverCreateTime?: Date;
  /**
   * The name of the database the backup belong to
   */
  readonly databaseName?: string;
  /**
   * The delete time of the database
   */
  readonly databaseDeletionTime?: Date;
  /**
   * The time the backup was taken
   */
  readonly backupTime?: Date;
  /**
   * The time the long term retention backup will expire.
   */
  readonly backupExpirationTime?: Date;
};

/**
 * A list of long term retention backups.
 */
export interface LongTermRetentionBackupListResult {
  /**
   * Array of results.
   */
  readonly value?: LongTermRetentionBackup[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A long term retention policy.
 */
export type BackupLongTermRetentionPolicy = Resource & {
  /**
   * The weekly retention policy for an LTR backup in an ISO 8601 format.
   */
  weeklyRetention?: string;
  /**
   * The monthly retention policy for an LTR backup in an ISO 8601 format.
   */
  monthlyRetention?: string;
  /**
   * The yearly retention policy for an LTR backup in an ISO 8601 format.
   */
  yearlyRetention?: string;
  /**
   * The week of year to take the yearly backup in an ISO 8601 format.
   */
  weekOfYear?: number;
};

/**
 * A short term retention policy.
 */
export type ManagedBackupShortTermRetentionPolicy = Resource & {
  /**
   * The backup retention period in days. This is how many days Point-in-Time Restore will be supported.
   */
  retentionDays?: number;
};

/**
 * A list of short term retention policies.
 */
export interface ManagedBackupShortTermRetentionPolicyListResult {
  /**
   * Array of results.
   */
  readonly value?: ManagedBackupShortTermRetentionPolicy[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * Server-level Automatic Tuning.
 */
export type ServerAutomaticTuning = Resource & {
  /**
   * Automatic tuning desired state.
   */
  desiredState?: AutomaticTuningServerMode;
  /**
   * Automatic tuning actual state.
   */
  readonly actualState?: AutomaticTuningServerMode;
  /**
   * Automatic tuning options definition.
   */
  options?: { [propertyName: string]: AutomaticTuningServerOptions };
};

/**
 * Automatic tuning properties for individual advisors.
 */
export interface AutomaticTuningServerOptions {
  /**
   * Automatic tuning option desired state.
   */
  desiredState?: AutomaticTuningOptionModeDesired;
  /**
   * Automatic tuning option actual state.
   */
  readonly actualState?: AutomaticTuningOptionModeActual;
  /**
   * Reason code if desired and actual state are different.
   */
  readonly reasonCode?: number;
  /**
   * Reason description if desired and actual state are different.
   */
  readonly reasonDesc?: AutomaticTuningServerReason;
}

/**
 * A server DNS alias.
 */
export type ServerDnsAlias = Resource & {
  /**
   * The fully qualified DNS record for alias
   */
  readonly azureDnsRecord?: string;
};

/**
 * A list of server DNS aliases.
 */
export interface ServerDnsAliasListResult {
  /**
   * Array of results.
   */
  readonly value?: ServerDnsAlias[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A server DNS alias acquisition request.
 */
export interface ServerDnsAliasAcquisition {
  /**
   * The id of the server alias that will be acquired to point to this server instead.
   */
  oldServerDnsAliasId?: string;
}

/**
 * A server security alert policy.
 */
export type ServerSecurityAlertPolicy = Resource & {
  /**
   * Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
   */
  state?: SecurityAlertPolicyState;
  /**
   * Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action
   */
  disabledAlerts?: string[];
  /**
   * Specifies an array of e-mail addresses to which the alert is sent.
   */
  emailAddresses?: string[];
  /**
   * Specifies that the alert is sent to the account administrators.
   */
  emailAccountAdmins?: boolean;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the Threat Detection audit storage account.
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the Threat Detection audit logs.
   */
  retentionDays?: number;
  /**
   * Specifies the UTC creation time of the policy.
   */
  readonly creationTime?: Date;
};

/**
 * A list of the server's security alert policies.
 */
export interface LogicalServerSecurityAlertPolicyListResult {
  /**
   * Array of results.
   */
  readonly value?: ServerSecurityAlertPolicy[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A list of restorable dropped managed databases.
 */
export interface RestorableDroppedManagedDatabaseListResult {
  /**
   * Array of results.
   */
  readonly value?: RestorableDroppedManagedDatabase[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A restorable dropped managed database resource.
 */
export type RestorableDroppedManagedDatabase = TrackedResource & {
  /**
   * The name of the database.
   */
  readonly databaseName?: string;
  /**
   * The creation date of the database (ISO8601 format).
   */
  readonly creationDate?: Date;
  /**
   * The deletion date of the database (ISO8601 format).
   */
  readonly deletionDate?: Date;
  /**
   * The earliest restore date of the database (ISO8601 format).
   */
  readonly earliestRestoreDate?: Date;
};

/**
 * A list of long term retention backups.
 */
export interface RestorePointListResult {
  /**
   * Array of results.
   */
  readonly value?: RestorePoint[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * Database restore points.
 */
export type RestorePoint = Resource & {
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * The type of restore point
   */
  readonly restorePointType?: RestorePointType;
  /**
   * The earliest time to which this database can be restored
   */
  readonly earliestRestoreDate?: Date;
  /**
   * The time the backup was taken
   */
  readonly restorePointCreationDate?: Date;
  /**
   * The label of restore point for backup request by user
   */
  readonly restorePointLabel?: string;
};

/**
 * Contains the information necessary to perform a create database restore point operation.
 */
export interface CreateDatabaseRestorePointDefinition {
  /**
   * The restore point label to apply
   */
  restorePointLabel: string;
}

/**
 * A managed database security alert policy.
 */
export type ManagedDatabaseSecurityAlertPolicy = Resource & {
  /**
   * Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
   */
  state?: SecurityAlertPolicyState;
  /**
   * Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action
   */
  disabledAlerts?: string[];
  /**
   * Specifies an array of e-mail addresses to which the alert is sent.
   */
  emailAddresses?: string[];
  /**
   * Specifies that the alert is sent to the account administrators.
   */
  emailAccountAdmins?: boolean;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the Threat Detection audit storage account.
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the Threat Detection audit logs.
   */
  retentionDays?: number;
  /**
   * Specifies the UTC creation time of the policy.
   */
  readonly creationTime?: Date;
};

/**
 * A list of the managed database's security alert policies.
 */
export interface ManagedDatabaseSecurityAlertPolicyListResult {
  /**
   * Array of results.
   */
  readonly value?: ManagedDatabaseSecurityAlertPolicy[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A managed server security alert policy.
 */
export type ManagedServerSecurityAlertPolicy = Resource & {
  /**
   * Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
   */
  state?: SecurityAlertPolicyState;
  /**
   * Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action
   */
  disabledAlerts?: string[];
  /**
   * Specifies an array of e-mail addresses to which the alert is sent.
   */
  emailAddresses?: string[];
  /**
   * Specifies that the alert is sent to the account administrators.
   */
  emailAccountAdmins?: boolean;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the Threat Detection audit storage account.
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the Threat Detection audit logs.
   */
  retentionDays?: number;
  /**
   * Specifies the UTC creation time of the policy.
   */
  readonly creationTime?: Date;
};

/**
 * A list of the managed Server's security alert policies.
 */
export interface ManagedServerSecurityAlertPolicyListResult {
  /**
   * Array of results.
   */
  readonly value?: ManagedServerSecurityAlertPolicy[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A list of sensitivity labels.
 */
export interface SensitivityLabelListResult {
  /**
   * Array of results.
   */
  readonly value?: SensitivityLabel[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A sensitivity label.
 */
export type SensitivityLabel = Resource & {
  /**
   * The label name.
   */
  labelName?: string;
  /**
   * The label ID.
   */
  labelId?: string;
  /**
   * The information type.
   */
  informationType?: string;
  /**
   * The information type ID.
   */
  informationTypeId?: string;
  /**
   * Is sensitivity recommendation disabled. Applicable for recommended sensitivity label only. Specifies whether the sensitivity recommendation on this column is disabled (dismissed) or not.
   */
  readonly isDisabled?: boolean;
  rank?: SensitivityLabelRank;
};

/**
 * A list of managed instance administrators.
 */
export interface ManagedInstanceAdministratorListResult {
  /**
   * Array of results.
   */
  readonly value?: ManagedInstanceAdministrator[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An Azure SQL managed instance administrator.
 */
export type ManagedInstanceAdministrator = Resource & {
  /**
   * Type of the managed instance administrator.
   */
  administratorType?: "ActiveDirectory";
  /**
   * Login name of the managed instance administrator.
   */
  login?: string;
  /**
   * SID (object ID) of the managed instance administrator.
   */
  sid?: string;
  /**
   * Tenant ID of the managed instance administrator.
   */
  tenantId?: string;
};

/**
 * The response to a list database operations request
 */
export interface DatabaseOperationListResult {
  /**
   * Array of results.
   */
  readonly value?: DatabaseOperation[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A database operation.
 */
export type DatabaseOperation = Resource & {
  /**
   * The name of the database the operation is being performed on.
   */
  readonly databaseName?: string;
  /**
   * The name of operation.
   */
  readonly operation?: string;
  /**
   * The friendly name of operation.
   */
  readonly operationFriendlyName?: string;
  /**
   * The percentage of the operation completed.
   */
  readonly percentComplete?: number;
  /**
   * The name of the server.
   */
  readonly serverName?: string;
  /**
   * The operation start time.
   */
  readonly startTime?: Date;
  /**
   * The operation state.
   */
  readonly state?: ManagementOperationState;
  /**
   * The operation error code.
   */
  readonly errorCode?: number;
  /**
   * The operation error description.
   */
  readonly errorDescription?: string;
  /**
   * The operation error severity.
   */
  readonly errorSeverity?: number;
  /**
   * Whether or not the error is a user error.
   */
  readonly isUserError?: boolean;
  /**
   * The estimated completion time of the operation.
   */
  readonly estimatedCompletionTime?: Date;
  /**
   * The operation description.
   */
  readonly description?: string;
  /**
   * Whether the operation can be cancelled.
   */
  readonly isCancellable?: boolean;
};

/**
 * The response to a list elastic pool operations request
 */
export interface ElasticPoolOperationListResult {
  /**
   * Array of results.
   */
  readonly value?: ElasticPoolOperation[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A elastic pool operation.
 */
export type ElasticPoolOperation = Resource & {
  /**
   * The name of the elastic pool the operation is being performed on.
   */
  readonly elasticPoolName?: string;
  /**
   * The name of operation.
   */
  readonly operation?: string;
  /**
   * The friendly name of operation.
   */
  readonly operationFriendlyName?: string;
  /**
   * The percentage of the operation completed.
   */
  readonly percentComplete?: number;
  /**
   * The name of the server.
   */
  readonly serverName?: string;
  /**
   * The operation start time.
   */
  readonly startTime?: Date;
  /**
   * The operation state.
   */
  readonly state?: string;
  /**
   * The operation error code.
   */
  readonly errorCode?: number;
  /**
   * The operation error description.
   */
  readonly errorDescription?: string;
  /**
   * The operation error severity.
   */
  readonly errorSeverity?: number;
  /**
   * Whether or not the error is a user error.
   */
  readonly isUserError?: boolean;
  /**
   * The estimated completion time of the operation.
   */
  readonly estimatedCompletionTime?: Date;
  /**
   * The operation description.
   */
  readonly description?: string;
  /**
   * Whether the operation can be cancelled.
   */
  readonly isCancellable?: boolean;
};

/**
 * A list of databases.
 */
export interface DatabaseListResult {
  /**
   * Array of results.
   */
  readonly value?: Database[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A database resource.
 */
export type Database = TrackedResource & {
  /**
   * The database SKU.
   *
   * The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
   *
   * ```azurecli
   * az sql db list-editions -l <location> -o table
   * ````
   *
   * ```powershell
   * Get-AzSqlServerServiceObjective -Location <location>
   * ````
   *
   */
  sku?: Sku;
  /**
   * Kind of database. This is metadata used for the Azure portal experience.
   */
  readonly kind?: string;
  /**
   * Resource that manages the database.
   */
  readonly managedBy?: string;
  /**
   * Specifies the mode of database creation.
   *
   * Default: regular database creation.
   *
   * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
   *
   * Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
   *
   * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
   *
   * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
   *
   * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
   *
   * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
   *
   * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
   */
  createMode?: CreateMode;
  /**
   * The collation of the database.
   */
  collation?: string;
  /**
   * The max size of the database expressed in bytes.
   */
  maxSizeBytes?: number;
  /**
   * The name of the sample schema to apply when creating this database.
   */
  sampleName?: SampleName;
  /**
   * The resource identifier of the elastic pool containing this database.
   */
  elasticPoolId?: string;
  /**
   * The resource identifier of the source database associated with create operation of this database.
   */
  sourceDatabaseId?: string;
  /**
   * The status of the database.
   */
  readonly status?: DatabaseStatus;
  /**
   * The ID of the database.
   */
  readonly databaseId?: string;
  /**
   * The creation date of the database (ISO8601 format).
   */
  readonly creationDate?: Date;
  /**
   * The current service level objective name of the database.
   */
  readonly currentServiceObjectiveName?: string;
  /**
   * The requested service level objective name of the database.
   */
  readonly requestedServiceObjectiveName?: string;
  /**
   * The default secondary region for this database.
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * Failover Group resource identifier that this database belongs to.
   */
  readonly failoverGroupId?: string;
  /**
   * Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
   */
  restorePointInTime?: Date;
  /**
   * Specifies the time that the database was deleted.
   */
  sourceDatabaseDeletionDate?: Date;
  /**
   * The resource identifier of the recovery point associated with create operation of this database.
   */
  recoveryServicesRecoveryPointId?: string;
  /**
   * The resource identifier of the long term retention backup associated with create operation of this database.
   */
  longTermRetentionBackupResourceId?: string;
  /**
   * The resource identifier of the recoverable database associated with create operation of this database.
   */
  recoverableDatabaseId?: string;
  /**
   * The resource identifier of the restorable dropped database associated with create operation of this database.
   */
  restorableDroppedDatabaseId?: string;
  /**
   * Collation of the metadata catalog.
   */
  catalogCollation?: CatalogCollationType;
  /**
   * Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
   */
  zoneRedundant?: boolean;
  /**
   * The license type to apply for this database.
   */
  licenseType?: DatabaseLicenseType;
  /**
   * The max log size for this database.
   */
  readonly maxLogSizeBytes?: number;
  /**
   * This records the earliest start date and time that restore is available for this database (ISO8601 format).
   */
  readonly earliestRestoreDate?: Date;
  /**
   * If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica. This property is only settable for Premium and Business Critical databases.
   */
  readScale?: DatabaseReadScale;
  /**
   * The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed. This property is only settable for Hyperscale edition databases.
   */
  readReplicaCount?: number;
  /**
   * The name and tier of the SKU.
   */
  readonly currentSku?: Sku;
  /**
   * Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled
   */
  autoPauseDelay?: number;
  /**
   * Minimal capacity that database will always have allocated, if not paused
   */
  minCapacity?: number;
  /**
   * The date when database was paused by user configuration or action (ISO8601 format). Null if the database is ready.
   */
  readonly pausedDate?: Date;
  /**
   * The date when database was resumed by user action or database login (ISO8601 format). Null if the database is paused.
   */
  readonly resumedDate?: Date;
};

/**
 * A database resource.
 */
export interface DatabaseUpdate {
  /**
   * The name and tier of the SKU.
   */
  sku?: Sku;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Specifies the mode of database creation.
   *
   * Default: regular database creation.
   *
   * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
   *
   * Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
   *
   * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
   *
   * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
   *
   * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
   *
   * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
   *
   * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
   */
  createMode?: CreateMode;
  /**
   * The collation of the database.
   */
  collation?: string;
  /**
   * The max size of the database expressed in bytes.
   */
  maxSizeBytes?: number;
  /**
   * The name of the sample schema to apply when creating this database.
   */
  sampleName?: SampleName;
  /**
   * The resource identifier of the elastic pool containing this database.
   */
  elasticPoolId?: string;
  /**
   * The resource identifier of the source database associated with create operation of this database.
   */
  sourceDatabaseId?: string;
  /**
   * The status of the database.
   */
  readonly status?: DatabaseStatus;
  /**
   * The ID of the database.
   */
  readonly databaseId?: string;
  /**
   * The creation date of the database (ISO8601 format).
   */
  readonly creationDate?: Date;
  /**
   * The current service level objective name of the database.
   */
  readonly currentServiceObjectiveName?: string;
  /**
   * The requested service level objective name of the database.
   */
  readonly requestedServiceObjectiveName?: string;
  /**
   * The default secondary region for this database.
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * Failover Group resource identifier that this database belongs to.
   */
  readonly failoverGroupId?: string;
  /**
   * Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
   */
  restorePointInTime?: Date;
  /**
   * Specifies the time that the database was deleted.
   */
  sourceDatabaseDeletionDate?: Date;
  /**
   * The resource identifier of the recovery point associated with create operation of this database.
   */
  recoveryServicesRecoveryPointId?: string;
  /**
   * The resource identifier of the long term retention backup associated with create operation of this database.
   */
  longTermRetentionBackupResourceId?: string;
  /**
   * The resource identifier of the recoverable database associated with create operation of this database.
   */
  recoverableDatabaseId?: string;
  /**
   * The resource identifier of the restorable dropped database associated with create operation of this database.
   */
  restorableDroppedDatabaseId?: string;
  /**
   * Collation of the metadata catalog.
   */
  catalogCollation?: CatalogCollationType;
  /**
   * Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
   */
  zoneRedundant?: boolean;
  /**
   * The license type to apply for this database.
   */
  licenseType?: DatabaseLicenseType;
  /**
   * The max log size for this database.
   */
  readonly maxLogSizeBytes?: number;
  /**
   * This records the earliest start date and time that restore is available for this database (ISO8601 format).
   */
  readonly earliestRestoreDate?: Date;
  /**
   * If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica. This property is only settable for Premium and Business Critical databases.
   */
  readScale?: DatabaseReadScale;
  /**
   * The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed. This property is only settable for Hyperscale edition databases.
   */
  readReplicaCount?: number;
  /**
   * The name and tier of the SKU.
   */
  readonly currentSku?: Sku;
  /**
   * Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled
   */
  autoPauseDelay?: number;
  /**
   * Minimal capacity that database will always have allocated, if not paused
   */
  minCapacity?: number;
  /**
   * The date when database was paused by user configuration or action (ISO8601 format). Null if the database is ready.
   */
  readonly pausedDate?: Date;
  /**
   * The date when database was resumed by user action or database login (ISO8601 format). Null if the database is paused.
   */
  readonly resumedDate?: Date;
}

/**
 * Contains the information necessary to perform a resource move (rename).
 */
export interface ResourceMoveDefinition {
  /**
   * The target ID for the resource
   */
  id: string;
}

/**
 * The result of an elastic pool list request.
 */
export interface ElasticPoolListResult {
  /**
   * Array of results.
   */
  readonly value?: ElasticPool[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An elastic pool.
 */
export type ElasticPool = TrackedResource & {
  /**
   * The elastic pool SKU.
   *
   * The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or the following command:
   *
   * ```azurecli
   * az sql elastic-pool list-editions -l <location> -o table
   * ````
   *
   */
  sku?: Sku;
  /**
   * Kind of elastic pool. This is metadata used for the Azure portal experience.
   */
  readonly kind?: string;
  /**
   * The state of the elastic pool.
   */
  readonly state?: ElasticPoolState;
  /**
   * The creation date of the elastic pool (ISO8601 format).
   */
  readonly creationDate?: Date;
  /**
   * The storage limit for the database elastic pool in bytes.
   */
  maxSizeBytes?: number;
  /**
   * The per database settings for the elastic pool.
   */
  perDatabaseSettings?: ElasticPoolPerDatabaseSettings;
  /**
   * Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be spread across multiple availability zones.
   */
  zoneRedundant?: boolean;
  /**
   * The license type to apply for this elastic pool.
   */
  licenseType?: ElasticPoolLicenseType;
};

/**
 * Per database settings of an elastic pool.
 */
export interface ElasticPoolPerDatabaseSettings {
  /**
   * The minimum capacity all databases are guaranteed.
   */
  minCapacity?: number;
  /**
   * The maximum capacity any one database can consume.
   */
  maxCapacity?: number;
}

/**
 * An elastic pool update.
 */
export interface ElasticPoolUpdate {
  /**
   * An ARM Resource SKU.
   */
  sku?: Sku;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The storage limit for the database elastic pool in bytes.
   */
  maxSizeBytes?: number;
  /**
   * The per database settings for the elastic pool.
   */
  perDatabaseSettings?: ElasticPoolPerDatabaseSettings;
  /**
   * Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be spread across multiple availability zones.
   */
  zoneRedundant?: boolean;
  /**
   * The license type to apply for this elastic pool.
   */
  licenseType?: ElasticPoolLicenseType;
}

/**
 * A list of vulnerability assessment scan records.
 */
export interface VulnerabilityAssessmentScanRecordListResult {
  /**
   * Array of results.
   */
  readonly value?: VulnerabilityAssessmentScanRecord[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A vulnerability assessment scan record.
 */
export type VulnerabilityAssessmentScanRecord = Resource & {
  /**
   * The scan ID.
   */
  readonly scanId?: string;
  /**
   * The scan trigger type.
   */
  readonly triggerType?: VulnerabilityAssessmentScanTriggerType;
  /**
   * The scan status.
   */
  readonly state?: VulnerabilityAssessmentScanState;
  /**
   * The scan start time (UTC).
   */
  readonly startTime?: Date;
  /**
   * The scan end time (UTC).
   */
  readonly endTime?: Date;
  /**
   * The scan errors.
   */
  readonly errors?: VulnerabilityAssessmentScanError[];
  /**
   * The scan results storage container path.
   */
  readonly storageContainerPath?: string;
  /**
   * The number of failed security checks.
   */
  readonly numberOfFailedSecurityChecks?: number;
};

/**
 * Properties of a vulnerability assessment scan error.
 */
export interface VulnerabilityAssessmentScanError {
  /**
   * The error code.
   */
  readonly code?: string;
  /**
   * The error message.
   */
  readonly message?: string;
}

/**
 * A database Vulnerability Assessment scan export resource.
 */
export type DatabaseVulnerabilityAssessmentScansExport = Resource & {
  /**
   * Location of the exported report (e.g. https://myStorage.blob.core.windows.net/VaScans/scans/serverName/databaseName/scan_scanId.xlsx).
   */
  readonly exportedReportLocation?: string;
};

/**
 * An instance failover group.
 */
export type InstanceFailoverGroup = Resource & {
  /**
   * Read-write endpoint of the failover group instance.
   */
  readWriteEndpoint?: InstanceFailoverGroupReadWriteEndpoint;
  /**
   * Read-only endpoint of the failover group instance.
   */
  readOnlyEndpoint?: InstanceFailoverGroupReadOnlyEndpoint;
  /**
   * Local replication role of the failover group instance.
   */
  readonly replicationRole?: InstanceFailoverGroupReplicationRole;
  /**
   * Replication state of the failover group instance.
   */
  readonly replicationState?: string;
  /**
   * Partner region information for the failover group.
   */
  partnerRegions?: PartnerRegionInfo[];
  /**
   * List of managed instance pairs in the failover group.
   */
  managedInstancePairs?: ManagedInstancePairInfo[];
};

/**
 * Read-write endpoint of the failover group instance.
 */
export interface InstanceFailoverGroupReadWriteEndpoint {
  /**
   * Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
   */
  failoverPolicy: ReadWriteEndpointFailoverPolicy;
  /**
   * Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
   */
  failoverWithDataLossGracePeriodMinutes?: number;
}

/**
 * Read-only endpoint of the failover group instance.
 */
export interface InstanceFailoverGroupReadOnlyEndpoint {
  /**
   * Failover policy of the read-only endpoint for the failover group.
   */
  failoverPolicy?: ReadOnlyEndpointFailoverPolicy;
}

/**
 * Partner region information for the failover group.
 */
export interface PartnerRegionInfo {
  /**
   * Geo location of the partner managed instances.
   */
  location?: string;
  /**
   * Replication role of the partner managed instances.
   */
  readonly replicationRole?: InstanceFailoverGroupReplicationRole;
}

/**
 * Pairs of Managed Instances in the failover group.
 */
export interface ManagedInstancePairInfo {
  /**
   * Id of Primary Managed Instance in pair.
   */
  primaryManagedInstanceId?: string;
  /**
   * Id of Partner Managed Instance in pair.
   */
  partnerManagedInstanceId?: string;
}

/**
 * A list of instance failover groups.
 */
export interface InstanceFailoverGroupListResult {
  /**
   * Array of results.
   */
  readonly value?: InstanceFailoverGroup[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A short term retention policy.
 */
export type BackupShortTermRetentionPolicy = Resource & {
  /**
   * The backup retention period in days. This is how many days Point-in-Time Restore will be supported.
   */
  retentionDays?: number;
};

/**
 * A list of short term retention policies.
 */
export interface BackupShortTermRetentionPolicyListResult {
  /**
   * Array of results.
   */
  readonly value?: BackupShortTermRetentionPolicy[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A TDE certificate that can be uploaded into a server.
 */
export type TdeCertificate = Resource & {
  /**
   * The base64 encoded certificate private blob.
   */
  privateBlob?: string;
  /**
   * The certificate password.
   */
  certPassword?: string;
};

/**
 * A list of managed instance keys.
 */
export interface ManagedInstanceKeyListResult {
  /**
   * Array of results.
   */
  readonly value?: ManagedInstanceKey[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A managed instance key.
 */
export type ManagedInstanceKey = Resource & {
  /**
   * Kind of encryption protector. This is metadata used for the Azure portal experience.
   */
  readonly kind?: string;
  /**
   * The key type like 'ServiceManaged', 'AzureKeyVault'.
   */
  serverKeyType?: ServerKeyType;
  /**
   * The URI of the key. If the ServerKeyType is AzureKeyVault, then the URI is required.
   */
  uri?: string;
  /**
   * Thumbprint of the key.
   */
  readonly thumbprint?: string;
  /**
   * The key creation date.
   */
  readonly creationDate?: Date;
};

/**
 * A list of managed instance encryption protectors.
 */
export interface ManagedInstanceEncryptionProtectorListResult {
  /**
   * Array of results.
   */
  readonly value?: ManagedInstanceEncryptionProtector[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * The managed instance encryption protector.
 */
export type ManagedInstanceEncryptionProtector = Resource & {
  /**
   * Kind of encryption protector. This is metadata used for the Azure portal experience.
   */
  readonly kind?: string;
  /**
   * The name of the managed instance key.
   */
  serverKeyName?: string;
  /**
   * The encryption protector type like 'ServiceManaged', 'AzureKeyVault'.
   */
  serverKeyType?: ServerKeyType;
  /**
   * The URI of the server key.
   */
  readonly uri?: string;
  /**
   * Thumbprint of the server key.
   */
  readonly thumbprint?: string;
};

/**
 * A list of recoverable managed databases.
 */
export interface RecoverableManagedDatabaseListResult {
  /**
   * Array of results.
   */
  readonly value?: RecoverableManagedDatabase[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A recoverable managed database resource.
 */
export type RecoverableManagedDatabase = Resource & {
  /**
   * The last available backup date.
   */
  readonly lastAvailableBackupDate?: string;
};

/**
 * A managed instance vulnerability assessment.
 */
export type ManagedInstanceVulnerabilityAssessment = Resource & {
  /**
   * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
   */
  storageContainerPath?: string;
  /**
   * A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
   */
  storageContainerSasKey?: string;
  /**
   * Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
   */
  storageAccountAccessKey?: string;
  /**
   * The recurring scans settings
   */
  recurringScans?: VulnerabilityAssessmentRecurringScansProperties;
};

/**
 * A list of the ManagedInstance's vulnerability assessments.
 */
export interface ManagedInstanceVulnerabilityAssessmentListResult {
  /**
   * Array of results.
   */
  readonly value?: ManagedInstanceVulnerabilityAssessment[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A server vulnerability assessment.
 */
export type ServerVulnerabilityAssessment = Resource & {
  /**
   * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
   */
  storageContainerPath?: string;
  /**
   * A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
   */
  storageContainerSasKey?: string;
  /**
   * Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
   */
  storageAccountAccessKey?: string;
  /**
   * The recurring scans settings
   */
  recurringScans?: VulnerabilityAssessmentRecurringScansProperties;
};

/**
 * A list of the server's vulnerability assessments.
 */
export interface ServerVulnerabilityAssessmentListResult {
  /**
   * Array of results.
   */
  readonly value?: ServerVulnerabilityAssessment[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An Azure SQL instance pool.
 */
export type InstancePool = TrackedResource & {
  /**
   * The name and tier of the SKU.
   */
  sku?: Sku;
  /**
   * Resource ID of the subnet to place this instance pool in.
   */
  subnetId?: string;
  /**
   * Count of vCores belonging to this instance pool.
   */
  vCores?: number;
  /**
   * The license type. Possible values are 'LicenseIncluded' (price for SQL license is included) and 'BasePrice' (without SQL license price).
   */
  licenseType?: InstancePoolLicenseType;
};

/**
 * An update to an Instance pool.
 */
export interface InstancePoolUpdate {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A list of Azure SQL instance pools.
 */
export interface InstancePoolListResult {
  /**
   * Array of results.
   */
  readonly value?: InstancePool[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A list of usages.
 */
export interface UsageListResult {
  /**
   * Array of results.
   */
  readonly value?: Usage[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * ARM usage.
 */
export interface Usage {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: Name;
  /**
   * Resource type.
   */
  readonly type?: string;
  /**
   * Usage unit.
   */
  readonly unit?: string;
  /**
   * Usage current value.
   */
  readonly currentValue?: number;
  /**
   * Usage limit.
   */
  readonly limit?: number;
  /**
   * Usage requested limit.
   */
  readonly requestedLimit?: number;
}

/**
 * ARM Usage Name
 */
export interface Name {
  /**
   * Usage name value
   */
  value?: string;
  /**
   * Usage name localized value.
   */
  localizedValue?: string;
}

/**
 * A list of managed instances.
 */
export interface ManagedInstanceListResult {
  /**
   * Array of results.
   */
  readonly value?: ManagedInstance[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An Azure SQL managed instance.
 */
export type ManagedInstance = TrackedResource & {
  /**
   * The Azure Active Directory identity of the managed instance.
   */
  identity?: ResourceIdentity;
  /**
   * Managed instance SKU. Allowed values for sku.name: GP_Gen4, GP_Gen5, BC_Gen4, BC_Gen5
   */
  sku?: Sku;
  /**
   * Specifies the mode of database creation.
   *
   * Default: Regular instance creation.
   *
   * Restore: Creates an instance by restoring a set of backups to specific point in time. RestorePointInTime and SourceManagedInstanceId must be specified.
   */
  managedInstanceCreateMode?: ManagedServerCreateMode;
  /**
   * The fully qualified domain name of the managed instance.
   */
  readonly fullyQualifiedDomainName?: string;
  /**
   * Administrator username for the managed instance. Can only be specified when the managed instance is being created (and is required for creation).
   */
  administratorLogin?: string;
  /**
   * The administrator login password (required for managed instance creation).
   */
  administratorLoginPassword?: string;
  /**
   * Subnet resource ID for the managed instance.
   */
  subnetId?: string;
  /**
   * The state of the managed instance.
   */
  readonly state?: string;
  /**
   * The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).
   */
  licenseType?: ManagedInstanceLicenseType;
  /**
   * The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.
   */
  vCores?: number;
  /**
   * Storage size in GB. Minimum value: 32. Maximum value: 8192. Increments of 32 GB allowed only.
   */
  storageSizeInGB?: number;
  /**
   * Collation of the managed instance.
   */
  collation?: string;
  /**
   * The Dns Zone that the managed instance is in.
   */
  readonly dnsZone?: string;
  /**
   * The resource id of another managed instance whose DNS zone this managed instance will share after creation.
   */
  dnsZonePartner?: string;
  /**
   * Whether or not the public data endpoint is enabled.
   */
  publicDataEndpointEnabled?: boolean;
  /**
   * The resource identifier of the source managed instance associated with create operation of this instance.
   */
  sourceManagedInstanceId?: string;
  /**
   * Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
   */
  restorePointInTime?: Date;
  /**
   * Connection type used for connecting to the instance.
   */
  proxyOverride?: ManagedInstanceProxyOverride;
  /**
   * Id of the timezone. Allowed values are timezones supported by Windows.
   * Windows keeps details on supported timezones, including the id, in registry under
   * KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones.
   * You can get those registry values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info.
   * List of Ids can also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
   * An example of valid timezone id is "Pacific Standard Time" or "W. Europe Standard Time".
   */
  timezoneId?: string;
  /**
   * The Id of the instance pool this managed server belongs to.
   */
  instancePoolId?: string;
  /**
   * Minimal TLS version. Allowed values: 'None', '1.0', '1.1', '1.2'
   */
  minimalTlsVersion?: string;
};

/**
 * Azure Active Directory identity configuration for a resource.
 */
export interface ResourceIdentity {
  /**
   * The Azure Active Directory principal id.
   */
  readonly principalId?: string;
  /**
   * The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
   */
  type?: "SystemAssigned";
  /**
   * The Azure Active Directory tenant id.
   */
  readonly tenantId?: string;
}

/**
 * An update request for an Azure SQL Database managed instance.
 */
export interface ManagedInstanceUpdate {
  /**
   * Managed instance sku
   */
  sku?: Sku;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Specifies the mode of database creation.
   *
   * Default: Regular instance creation.
   *
   * Restore: Creates an instance by restoring a set of backups to specific point in time. RestorePointInTime and SourceManagedInstanceId must be specified.
   */
  managedInstanceCreateMode?: ManagedServerCreateMode;
  /**
   * The fully qualified domain name of the managed instance.
   */
  readonly fullyQualifiedDomainName?: string;
  /**
   * Administrator username for the managed instance. Can only be specified when the managed instance is being created (and is required for creation).
   */
  administratorLogin?: string;
  /**
   * The administrator login password (required for managed instance creation).
   */
  administratorLoginPassword?: string;
  /**
   * Subnet resource ID for the managed instance.
   */
  subnetId?: string;
  /**
   * The state of the managed instance.
   */
  readonly state?: string;
  /**
   * The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).
   */
  licenseType?: ManagedInstanceLicenseType;
  /**
   * The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.
   */
  vCores?: number;
  /**
   * Storage size in GB. Minimum value: 32. Maximum value: 8192. Increments of 32 GB allowed only.
   */
  storageSizeInGB?: number;
  /**
   * Collation of the managed instance.
   */
  collation?: string;
  /**
   * The Dns Zone that the managed instance is in.
   */
  readonly dnsZone?: string;
  /**
   * The resource id of another managed instance whose DNS zone this managed instance will share after creation.
   */
  dnsZonePartner?: string;
  /**
   * Whether or not the public data endpoint is enabled.
   */
  publicDataEndpointEnabled?: boolean;
  /**
   * The resource identifier of the source managed instance associated with create operation of this instance.
   */
  sourceManagedInstanceId?: string;
  /**
   * Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
   */
  restorePointInTime?: Date;
  /**
   * Connection type used for connecting to the instance.
   */
  proxyOverride?: ManagedInstanceProxyOverride;
  /**
   * Id of the timezone. Allowed values are timezones supported by Windows.
   * Windows keeps details on supported timezones, including the id, in registry under
   * KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones.
   * You can get those registry values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info.
   * List of Ids can also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
   * An example of valid timezone id is "Pacific Standard Time" or "W. Europe Standard Time".
   */
  timezoneId?: string;
  /**
   * The Id of the instance pool this managed server belongs to.
   */
  instancePoolId?: string;
  /**
   * Minimal TLS version. Allowed values: 'None', '1.0', '1.1', '1.2'
   */
  minimalTlsVersion?: string;
}

/**
 * A private endpoint connection
 */
export type PrivateEndpointConnection = Resource & {
  /**
   * Private endpoint which the connection belongs to.
   */
  privateEndpoint?: PrivateEndpointProperty;
  /**
   * Connection state of the private endpoint connection.
   */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionStateProperty;
  /**
   * State of the private endpoint connection.
   */
  readonly provisioningState?: string;
};

export interface PrivateEndpointProperty {
  /**
   * Resource id of the private endpoint.
   */
  id?: string;
}

export interface PrivateLinkServiceConnectionStateProperty {
  /**
   * The private link service connection status.
   */
  status: string;
  /**
   * The private link service connection description.
   */
  description: string;
  /**
   * The actions required for private link service connection.
   */
  readonly actionsRequired?: string;
}

/**
 * A list of private endpoint connections.
 */
export interface PrivateEndpointConnectionListResult {
  /**
   * Array of results.
   */
  readonly value?: PrivateEndpointConnection[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A list of private link resources
 */
export interface PrivateLinkResourceListResult {
  /**
   * Array of results.
   */
  readonly value?: PrivateLinkResource[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A private link resource
 */
export type PrivateLinkResource = Resource & {
  /**
   * The private link resource group id.
   */
  readonly properties?: PrivateLinkResourceProperties;
};

/**
 * Properties of a private link resource.
 */
export interface PrivateLinkResourceProperties {
  /**
   * The private link resource group id.
   */
  readonly groupId?: string;
  /**
   * The private link resource required member names.
   */
  readonly requiredMembers?: string[];
}

/**
 * A list of servers.
 */
export interface ServerListResult {
  /**
   * Array of results.
   */
  readonly value?: Server[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An Azure SQL Database server.
 */
export type Server = TrackedResource & {
  /**
   * The Azure Active Directory identity of the server.
   */
  identity?: ResourceIdentity;
  /**
   * Kind of sql server. This is metadata used for the Azure portal experience.
   */
  readonly kind?: string;
  /**
   * Administrator username for the server. Once created it cannot be changed.
   */
  administratorLogin?: string;
  /**
   * The administrator login password (required for server creation).
   */
  administratorLoginPassword?: string;
  /**
   * The version of the server.
   */
  version?: string;
  /**
   * The state of the server.
   */
  readonly state?: string;
  /**
   * The fully qualified domain name of the server.
   */
  readonly fullyQualifiedDomainName?: string;
  /**
   * List of private endpoint connections on a server
   */
  readonly privateEndpointConnections?: ServerPrivateEndpointConnection[];
  /**
   * Minimal TLS version. Allowed values: '1.0', '1.1', '1.2'
   */
  minimalTlsVersion?: string;
  /**
   * Whether or not public endpoint access is allowed for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
   */
  publicNetworkAccess?: ServerPublicNetworkAccess;
};

/**
 * A private endpoint connection under a server
 */
export interface ServerPrivateEndpointConnection {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * Private endpoint connection properties
   */
  readonly properties?: PrivateEndpointConnectionProperties;
}

/**
 * Properties of a private endpoint connection.
 */
export interface PrivateEndpointConnectionProperties {
  /**
   * Private endpoint which the connection belongs to.
   */
  privateEndpoint?: PrivateEndpointProperty;
  /**
   * Connection state of the private endpoint connection.
   */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionStatePropertyAutoGenerated;
  /**
   * State of the private endpoint connection.
   */
  readonly provisioningState?: PrivateEndpointProvisioningState;
}

export interface PrivateLinkServiceConnectionStatePropertyAutoGenerated {
  /**
   * The private link service connection status.
   */
  status: PrivateLinkServiceConnectionStateStatus;
  /**
   * The private link service connection description.
   */
  description: string;
  /**
   * The actions required for private link service connection.
   */
  readonly actionsRequired?: "None";
}

/**
 * An update request for an Azure SQL Database server.
 */
export interface ServerUpdate {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Administrator username for the server. Once created it cannot be changed.
   */
  administratorLogin?: string;
  /**
   * The administrator login password (required for server creation).
   */
  administratorLoginPassword?: string;
  /**
   * The version of the server.
   */
  version?: string;
  /**
   * The state of the server.
   */
  readonly state?: string;
  /**
   * The fully qualified domain name of the server.
   */
  readonly fullyQualifiedDomainName?: string;
  /**
   * List of private endpoint connections on a server
   */
  readonly privateEndpointConnections?: ServerPrivateEndpointConnection[];
  /**
   * Minimal TLS version. Allowed values: '1.0', '1.1', '1.2'
   */
  minimalTlsVersion?: string;
  /**
   * Whether or not public endpoint access is allowed for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
   */
  publicNetworkAccess?: ServerPublicNetworkAccess;
}

/**
 * A request to check whether the specified name for a resource is available.
 */
export interface CheckNameAvailabilityRequest {
  name: string;
  type: "Microsoft.Sql/servers";
}

/**
 * The result of a name availability check.
 */
export interface CheckNameAvailabilityResponse {
  /**
   * The name whose availability was checked.
   */
  readonly name?: string;
  /**
   * True if the name is available, otherwise false.
   */
  readonly available?: boolean;
  /**
   * The reason code explaining why the name is unavailable. Will be undefined if the name is available.
   */
  readonly reason?: CheckNameAvailabilityReason;
  /**
   * A message explaining why the name is unavailable. Will be undefined if the name is available.
   */
  readonly message?: string;
}

/**
 * The location capability.
 */
export interface LocationCapabilities {
  /**
   * The location name.
   */
  readonly name?: string;
  /**
   * The list of supported server versions.
   */
  readonly supportedServerVersions?: ServerVersionCapability[];
  /**
   * The list of supported managed instance versions.
   */
  readonly supportedManagedInstanceVersions?: ManagedInstanceVersionCapability[];
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The server capability
 */
export interface ServerVersionCapability {
  /**
   * The server version name.
   */
  readonly name?: string;
  /**
   * The list of supported database editions.
   */
  readonly supportedEditions?: EditionCapability[];
  /**
   * The list of supported elastic pool editions.
   */
  readonly supportedElasticPoolEditions?: ElasticPoolEditionCapability[];
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The edition capability.
 */
export interface EditionCapability {
  /**
   * The database edition name.
   */
  readonly name?: string;
  /**
   * The list of supported service objectives for the edition.
   */
  readonly supportedServiceLevelObjectives?: ServiceObjectiveCapability[];
  /**
   * Whether or not zone redundancy is supported for the edition.
   */
  readonly zoneRedundant?: boolean;
  /**
   * The read scale capability for the edition.
   */
  readonly readScale?: ReadScaleCapability;
  /**
   * The list of supported storage capabilities for this edition
   */
  readonly supportedStorageCapabilities?: StorageCapability[];
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The service objectives capability.
 */
export interface ServiceObjectiveCapability {
  /**
   * The unique ID of the service objective.
   */
  readonly id?: string;
  /**
   * The service objective name.
   */
  readonly name?: string;
  /**
   * The list of supported maximum database sizes.
   */
  readonly supportedMaxSizes?: MaxSizeRangeCapability[];
  /**
   * The performance level.
   */
  readonly performanceLevel?: PerformanceLevelCapability;
  /**
   * The sku.
   */
  readonly sku?: Sku;
  /**
   * List of supported license types.
   */
  readonly supportedLicenseTypes?: LicenseTypeCapability[];
  /**
   * The included (free) max size.
   */
  readonly includedMaxSize?: MaxSizeCapability;
  /**
   * Whether or not zone redundancy is supported for the service objective.
   */
  readonly zoneRedundant?: boolean;
  /**
   * Supported time range for auto pause delay
   */
  readonly supportedAutoPauseDelay?: AutoPauseDelayTimeRange;
  /**
   * List of supported min capacities
   */
  readonly supportedMinCapacities?: MinCapacityCapability[];
  /**
   * The compute model
   */
  readonly computeModel?: string;
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The maximum size range capability.
 */
export interface MaxSizeRangeCapability {
  /**
   * Minimum value.
   */
  readonly minValue?: MaxSizeCapability;
  /**
   * Maximum value.
   */
  readonly maxValue?: MaxSizeCapability;
  /**
   * Scale/step size for discrete values between the minimum value and the maximum value.
   */
  readonly scaleSize?: MaxSizeCapability;
  /**
   * Size of transaction log.
   */
  readonly logSize?: LogSizeCapability;
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The maximum size capability.
 */
export interface MaxSizeCapability {
  /**
   * The maximum size limit (see 'unit' for the units).
   */
  readonly limit?: number;
  /**
   * The units that the limit is expressed in.
   */
  readonly unit?: MaxSizeUnit;
}

/**
 * The log size capability.
 */
export interface LogSizeCapability {
  /**
   * The log size limit (see 'unit' for the units).
   */
  readonly limit?: number;
  /**
   * The units that the limit is expressed in.
   */
  readonly unit?: LogSizeUnit;
}

/**
 * The performance level capability.
 */
export interface PerformanceLevelCapability {
  /**
   * Performance level value.
   */
  readonly value?: number;
  /**
   * Unit type used to measure performance level.
   */
  readonly unit?: PerformanceLevelUnit;
}

/**
 * The license type capability
 */
export interface LicenseTypeCapability {
  /**
   * License type identifier.
   */
  readonly name?: string;
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * Supported auto pause delay time range
 */
export interface AutoPauseDelayTimeRange {
  /**
   * Minimum value
   */
  readonly minValue?: number;
  /**
   * Maximum value
   */
  readonly maxValue?: number;
  /**
   * Step value for discrete values between the minimum value and the maximum value.
   */
  readonly stepSize?: number;
  /**
   * Default value is no value is provided
   */
  readonly default?: number;
  /**
   * Unit of time that delay is expressed in
   */
  readonly unit?: "Minutes";
  /**
   * Value that is used to not pause (infinite delay before pause)
   */
  readonly doNotPauseValue?: number;
}

/**
 * The min capacity capability
 */
export interface MinCapacityCapability {
  /**
   * Min capacity value
   */
  readonly value?: number;
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The read scale capability.
 */
export interface ReadScaleCapability {
  /**
   * The maximum number of read scale replicas.
   */
  readonly maxNumberOfReplicas?: number;
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The storage account type capability.
 */
export interface StorageCapability {
  /**
   * The storage account type for the database's backups.
   */
  readonly storageAccountType?: StorageCapabilityStorageAccountType;
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The elastic pool edition capability.
 */
export interface ElasticPoolEditionCapability {
  /**
   * The elastic pool edition name.
   */
  readonly name?: string;
  /**
   * The list of supported elastic pool DTU levels for the edition.
   */
  readonly supportedElasticPoolPerformanceLevels?: ElasticPoolPerformanceLevelCapability[];
  /**
   * Whether or not zone redundancy is supported for the edition.
   */
  readonly zoneRedundant?: boolean;
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The Elastic Pool performance level capability.
 */
export interface ElasticPoolPerformanceLevelCapability {
  /**
   * The performance level for the pool.
   */
  readonly performanceLevel?: PerformanceLevelCapability;
  /**
   * The sku.
   */
  readonly sku?: Sku;
  /**
   * List of supported license types.
   */
  readonly supportedLicenseTypes?: LicenseTypeCapability[];
  /**
   * The maximum number of databases supported.
   */
  readonly maxDatabaseCount?: number;
  /**
   * The included (free) max size for this performance level.
   */
  readonly includedMaxSize?: MaxSizeCapability;
  /**
   * The list of supported max sizes.
   */
  readonly supportedMaxSizes?: MaxSizeRangeCapability[];
  /**
   * The list of supported per database max sizes.
   */
  readonly supportedPerDatabaseMaxSizes?: MaxSizeRangeCapability[];
  /**
   * The list of supported per database max performance levels.
   */
  readonly supportedPerDatabaseMaxPerformanceLevels?: ElasticPoolPerDatabaseMaxPerformanceLevelCapability[];
  /**
   * Whether or not zone redundancy is supported for the performance level.
   */
  readonly zoneRedundant?: boolean;
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The max per-database performance level capability.
 */
export interface ElasticPoolPerDatabaseMaxPerformanceLevelCapability {
  /**
   * The maximum performance level per database.
   */
  readonly limit?: number;
  /**
   * Unit type used to measure performance level.
   */
  readonly unit?: PerformanceLevelUnit;
  /**
   * The list of supported min database performance levels.
   */
  readonly supportedPerDatabaseMinPerformanceLevels?: ElasticPoolPerDatabaseMinPerformanceLevelCapability[];
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The minimum per-database performance level capability.
 */
export interface ElasticPoolPerDatabaseMinPerformanceLevelCapability {
  /**
   * The minimum performance level per database.
   */
  readonly limit?: number;
  /**
   * Unit type used to measure performance level.
   */
  readonly unit?: PerformanceLevelUnit;
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The managed instance capability
 */
export interface ManagedInstanceVersionCapability {
  /**
   * The server version name.
   */
  readonly name?: string;
  /**
   * The list of supported managed instance editions.
   */
  readonly supportedEditions?: ManagedInstanceEditionCapability[];
  /**
   * The list of supported instance pool editions.
   */
  readonly supportedInstancePoolEditions?: InstancePoolEditionCapability[];
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The managed server capability
 */
export interface ManagedInstanceEditionCapability {
  /**
   * The managed server version name.
   */
  readonly name?: string;
  /**
   * The supported families.
   */
  readonly supportedFamilies?: ManagedInstanceFamilyCapability[];
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The managed server family capability.
 */
export interface ManagedInstanceFamilyCapability {
  /**
   * Family name.
   */
  readonly name?: string;
  /**
   * SKU name.
   */
  readonly sku?: string;
  /**
   * List of supported license types.
   */
  readonly supportedLicenseTypes?: LicenseTypeCapability[];
  /**
   * List of supported virtual cores values.
   */
  readonly supportedVcoresValues?: ManagedInstanceVcoresCapability[];
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The managed instance virtual cores capability.
 */
export interface ManagedInstanceVcoresCapability {
  /**
   * The virtual cores identifier.
   */
  readonly name?: string;
  /**
   * The virtual cores value.
   */
  readonly value?: number;
  /**
   * Included size.
   */
  readonly includedMaxSize?: MaxSizeCapability;
  /**
   * Storage size ranges.
   */
  readonly supportedStorageSizes?: MaxSizeRangeCapability[];
  /**
   * True if this service objective is supported for managed instances in an instance pool.
   */
  readonly instancePoolSupported?: boolean;
  /**
   * True if this service objective is supported for standalone managed instances.
   */
  readonly standaloneSupported?: boolean;
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The instance pool capability
 */
export interface InstancePoolEditionCapability {
  /**
   * The instance pool version name.
   */
  readonly name?: string;
  /**
   * The supported families.
   */
  readonly supportedFamilies?: InstancePoolFamilyCapability[];
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The instance pool family capability.
 */
export interface InstancePoolFamilyCapability {
  /**
   * Family name.
   */
  readonly name?: string;
  /**
   * List of supported license types.
   */
  readonly supportedLicenseTypes?: LicenseTypeCapability[];
  /**
   * List of supported virtual cores values.
   */
  readonly supportedVcoresValues?: InstancePoolVcoresCapability[];
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The managed instance virtual cores capability.
 */
export interface InstancePoolVcoresCapability {
  /**
   * The virtual cores identifier.
   */
  readonly name?: string;
  /**
   * The virtual cores value.
   */
  readonly value?: number;
  /**
   * Storage limit.
   */
  readonly storageLimit?: MaxSizeCapability;
  /**
   * The status of the capability.
   */
  readonly status?: CapabilityStatus;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * A long term retention backup for a managed database.
 */
export type ManagedInstanceLongTermRetentionBackup = Resource & {
  /**
   * The managed instance that the backup database belongs to.
   */
  readonly managedInstanceName?: string;
  /**
   * The create time of the instance.
   */
  readonly managedInstanceCreateTime?: Date;
  /**
   * The name of the database the backup belong to
   */
  readonly databaseName?: string;
  /**
   * The delete time of the database
   */
  readonly databaseDeletionTime?: Date;
  /**
   * The time the backup was taken
   */
  readonly backupTime?: Date;
  /**
   * The time the long term retention backup will expire.
   */
  readonly backupExpirationTime?: Date;
};

/**
 * A list of long term retention backups for managed database(s).
 */
export interface ManagedInstanceLongTermRetentionBackupListResult {
  /**
   * Array of results.
   */
  readonly value?: ManagedInstanceLongTermRetentionBackup[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A long term retention policy.
 */
export type ManagedInstanceLongTermRetentionPolicy = Resource & {
  /**
   * The weekly retention policy for an LTR backup in an ISO 8601 format.
   */
  weeklyRetention?: string;
  /**
   * The monthly retention policy for an LTR backup in an ISO 8601 format.
   */
  monthlyRetention?: string;
  /**
   * The yearly retention policy for an LTR backup in an ISO 8601 format.
   */
  yearlyRetention?: string;
  /**
   * The week of year to take the yearly backup in an ISO 8601 format.
   */
  weekOfYear?: number;
};

/**
 * A list of long term retention policies.
 */
export interface ManagedInstanceLongTermRetentionPolicyListResult {
  /**
   * Array of results.
   */
  readonly value?: ManagedInstanceLongTermRetentionPolicy[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * Workload group operations for a data warehouse
 */
export type WorkloadGroup = Resource & {
  /**
   * The workload group minimum percentage resource.
   */
  minResourcePercent?: number;
  /**
   * The workload group cap percentage resource.
   */
  maxResourcePercent?: number;
  /**
   * The workload group request minimum grant percentage.
   */
  minResourcePercentPerRequest?: number;
  /**
   * The workload group request maximum grant percentage.
   */
  maxResourcePercentPerRequest?: number;
  /**
   * The workload group importance level.
   */
  importance?: string;
  /**
   * The workload group query execution timeout.
   */
  queryExecutionTimeout?: number;
};

/**
 * A list of workload groups.
 */
export interface WorkloadGroupListResult {
  /**
   * Array of results.
   */
  readonly value?: WorkloadGroup[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * Workload classifier operations for a data warehouse
 */
export type WorkloadClassifier = Resource & {
  /**
   * The workload classifier member name.
   */
  memberName?: string;
  /**
   * The workload classifier label.
   */
  label?: string;
  /**
   * The workload classifier context.
   */
  context?: string;
  /**
   * The workload classifier start time for classification.
   */
  startTime?: string;
  /**
   * The workload classifier end time for classification.
   */
  endTime?: string;
  /**
   * The workload classifier importance.
   */
  importance?: string;
};

/**
 * A list of workload classifiers for a workload group.
 */
export interface WorkloadClassifierListResult {
  /**
   * Array of results.
   */
  readonly value?: WorkloadClassifier[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A managed database restore details.
 */
export type ManagedDatabaseRestoreDetailsResult = Resource & {
  /**
   * Restore status.
   */
  readonly status?: string;
  /**
   * Current restoring file name.
   */
  readonly currentRestoringFileName?: string;
  /**
   * Last restored file name.
   */
  readonly lastRestoredFileName?: string;
  /**
   * Last restored file time.
   */
  readonly lastRestoredFileTime?: Date;
  /**
   * Percent completed.
   */
  readonly percentCompleted?: number;
  /**
   * List of unrestorable files.
   */
  readonly unrestorableFiles?: string[];
  /**
   * Number of files detected.
   */
  readonly numberOfFilesDetected?: number;
  /**
   * Last uploaded file name.
   */
  readonly lastUploadedFileName?: string;
  /**
   * Last uploaded file time.
   */
  readonly lastUploadedFileTime?: Date;
  /**
   * The reason why restore is in Blocked state.
   */
  readonly blockReason?: string;
};

/**
 * A list of managed databases.
 */
export interface ManagedDatabaseListResult {
  /**
   * Array of results.
   */
  readonly value?: ManagedDatabase[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A managed database resource.
 */
export type ManagedDatabase = TrackedResource & {
  /**
   * Collation of the managed database.
   */
  collation?: string;
  /**
   * Status of the database.
   */
  readonly status?: ManagedDatabaseStatus;
  /**
   * Creation date of the database.
   */
  readonly creationDate?: Date;
  /**
   * Earliest restore point in time for point in time restore.
   */
  readonly earliestRestorePoint?: Date;
  /**
   * Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
   */
  restorePointInTime?: Date;
  /**
   * Geo paired region.
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * Collation of the metadata catalog.
   */
  catalogCollation?: CatalogCollationType;
  /**
   * Managed database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be specified. Recovery: Creates a database by restoring a geo-replicated backup. RecoverableDatabaseId must be specified as the recoverable database resource ID to restore.
   */
  createMode?: ManagedDatabaseCreateMode;
  /**
   * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the uri of the storage container where backups for this restore are stored.
   */
  storageContainerUri?: string;
  /**
   * The resource identifier of the source database associated with create operation of this database.
   */
  sourceDatabaseId?: string;
  /**
   * The restorable dropped database resource id to restore when creating this database.
   */
  restorableDroppedDatabaseId?: string;
  /**
   * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the storage container sas token.
   */
  storageContainerSasToken?: string;
  /**
   * Instance Failover Group resource identifier that this managed database belongs to.
   */
  readonly failoverGroupId?: string;
  /**
   * The resource identifier of the recoverable database associated with create operation of this database.
   */
  recoverableDatabaseId?: string;
  /**
   * The name of the Long Term Retention backup to be used for restore of this managed database.
   */
  longTermRetentionBackupResourceId?: string;
};

/**
 * An managed database update.
 */
export interface ManagedDatabaseUpdate {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Collation of the managed database.
   */
  collation?: string;
  /**
   * Status of the database.
   */
  readonly status?: ManagedDatabaseStatus;
  /**
   * Creation date of the database.
   */
  readonly creationDate?: Date;
  /**
   * Earliest restore point in time for point in time restore.
   */
  readonly earliestRestorePoint?: Date;
  /**
   * Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
   */
  restorePointInTime?: Date;
  /**
   * Geo paired region.
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * Collation of the metadata catalog.
   */
  catalogCollation?: CatalogCollationType;
  /**
   * Managed database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be specified. Recovery: Creates a database by restoring a geo-replicated backup. RecoverableDatabaseId must be specified as the recoverable database resource ID to restore.
   */
  createMode?: ManagedDatabaseCreateMode;
  /**
   * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the uri of the storage container where backups for this restore are stored.
   */
  storageContainerUri?: string;
  /**
   * The resource identifier of the source database associated with create operation of this database.
   */
  sourceDatabaseId?: string;
  /**
   * The restorable dropped database resource id to restore when creating this database.
   */
  restorableDroppedDatabaseId?: string;
  /**
   * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the storage container sas token.
   */
  storageContainerSasToken?: string;
  /**
   * Instance Failover Group resource identifier that this managed database belongs to.
   */
  readonly failoverGroupId?: string;
  /**
   * The resource identifier of the recoverable database associated with create operation of this database.
   */
  recoverableDatabaseId?: string;
  /**
   * The name of the Long Term Retention backup to be used for restore of this managed database.
   */
  longTermRetentionBackupResourceId?: string;
}

/**
 * Contains the information necessary to perform a complete database restore operation.
 */
export interface CompleteDatabaseRestoreDefinition {
  /**
   * The last backup name to apply
   */
  lastBackupName: string;
}

/**
 * Azure Active Directory administrator.
 */
export type ServerAzureADAdministrator = Resource & {
  /**
   * Type of the sever administrator.
   */
  administratorType?: "ActiveDirectory";
  /**
   * Login name of the server administrator.
   */
  login?: string;
  /**
   * SID (object ID) of the server administrator.
   */
  sid?: string;
  /**
   * Tenant ID of the administrator.
   */
  tenantId?: string;
  /**
   * Azure Active Directory only Authentication enabled.
   */
  azureADOnlyAuthentication?: boolean;
};

/**
 * A list of active directory administrators.
 */
export interface AdministratorListResult {
  /**
   * Array of results.
   */
  readonly value?: ServerAzureADAdministrator[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * The response to a list managed instance operations request
 */
export interface ManagedInstanceOperationListResult {
  /**
   * Array of results.
   */
  readonly value?: ManagedInstanceOperation[];
  /**
   * Link to retrieve next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A managed instance operation.
 */
export type ManagedInstanceOperation = Resource & {
  /**
   * The name of the managed instance the operation is being performed on.
   */
  readonly managedInstanceName?: string;
  /**
   * The name of operation.
   */
  readonly operation?: string;
  /**
   * The friendly name of operation.
   */
  readonly operationFriendlyName?: string;
  /**
   * The percentage of the operation completed.
   */
  readonly percentComplete?: number;
  /**
   * The operation start time.
   */
  readonly startTime?: Date;
  /**
   * The operation state.
   */
  readonly state?: ManagementOperationState;
  /**
   * The operation error code.
   */
  readonly errorCode?: number;
  /**
   * The operation error description.
   */
  readonly errorDescription?: string;
  /**
   * The operation error severity.
   */
  readonly errorSeverity?: number;
  /**
   * Whether or not the error is a user error.
   */
  readonly isUserError?: boolean;
  /**
   * The estimated completion time of the operation.
   */
  readonly estimatedCompletionTime?: Date;
  /**
   * The operation description.
   */
  readonly description?: string;
  /**
   * Whether the operation can be cancelled.
   */
  readonly isCancellable?: boolean;
};

/**
 * The impact of an operation, both in absolute and relative terms.
 */
export interface OperationImpact {
  /**
   * The name of the impact dimension.
   */
  readonly name?: string;
  /**
   * The unit in which estimated impact to dimension is measured.
   */
  readonly unit?: string;
  /**
   * The absolute impact to dimension.
   */
  readonly changeValueAbsolute?: number;
  /**
   * The relative impact to dimension (null if not applicable)
   */
  readonly changeValueRelative?: number;
}

/**
 * Represents a database recommended index.
 */
export type RecommendedIndex = Resource & {
  /**
   * The proposed index action. You can create a missing index, drop an unused index, or rebuild an existing index to improve its performance.
   */
  readonly action?: RecommendedIndexAction;
  /**
   * The current recommendation state.
   */
  readonly state?: RecommendedIndexState;
  /**
   * The UTC datetime showing when this resource was created (ISO8601 format).
   */
  readonly created?: Date;
  /**
   * The UTC datetime of when was this resource last changed (ISO8601 format).
   */
  readonly lastModified?: Date;
  /**
   * The type of index (CLUSTERED, NONCLUSTERED, COLUMNSTORE, CLUSTERED COLUMNSTORE)
   */
  readonly indexType?: RecommendedIndexType;
  /**
   * The schema where table to build index over resides
   */
  readonly schema?: string;
  /**
   * The table on which to build index.
   */
  readonly table?: string;
  /**
   * Columns over which to build index
   */
  readonly columns?: string[];
  /**
   * The list of column names to be included in the index
   */
  readonly includedColumns?: string[];
  /**
   * The full build index script
   */
  readonly indexScript?: string;
  /**
   * The estimated impact of doing recommended index action.
   */
  readonly estimatedImpact?: OperationImpact[];
  /**
   * The values reported after index action is complete.
   */
  readonly reportedImpact?: OperationImpact[];
};

/**
 * A job version.
 */
export type JobVersion = Resource & {};

/**
 * ARM proxy resource.
 */
export type ProxyResource = Resource & {};
/**
 * Defines values for DatabaseEdition.
 */
export type DatabaseEdition =
  | "Web"
  | "Business"
  | "Basic"
  | "Standard"
  | "Premium"
  | "PremiumRS"
  | "Free"
  | "Stretch"
  | "DataWarehouse"
  | "System"
  | "System2"
  | "GeneralPurpose"
  | "BusinessCritical"
  | "Hyperscale";
/**
 * Defines values for ServiceObjectiveName.
 */
export type ServiceObjectiveName =
  | "System"
  | "System0"
  | "System1"
  | "System2"
  | "System3"
  | "System4"
  | "System2L"
  | "System3L"
  | "System4L"
  | "Free"
  | "Basic"
  | "S0"
  | "S1"
  | "S2"
  | "S3"
  | "S4"
  | "S6"
  | "S7"
  | "S9"
  | "S12"
  | "P1"
  | "P2"
  | "P3"
  | "P4"
  | "P6"
  | "P11"
  | "P15"
  | "PRS1"
  | "PRS2"
  | "PRS4"
  | "PRS6"
  | "DW100"
  | "DW200"
  | "DW300"
  | "DW400"
  | "DW500"
  | "DW600"
  | "DW1000"
  | "DW1200"
  | "DW1000c"
  | "DW1500"
  | "DW1500c"
  | "DW2000"
  | "DW2000c"
  | "DW3000"
  | "DW2500c"
  | "DW3000c"
  | "DW6000"
  | "DW5000c"
  | "DW6000c"
  | "DW7500c"
  | "DW10000c"
  | "DW15000c"
  | "DW30000c"
  | "DS100"
  | "DS200"
  | "DS300"
  | "DS400"
  | "DS500"
  | "DS600"
  | "DS1000"
  | "DS1200"
  | "DS1500"
  | "DS2000"
  | "ElasticPool";
/**
 * Defines values for UnitType.
 */
export type UnitType =
  | "count"
  | "bytes"
  | "seconds"
  | "percent"
  | "countPerSecond"
  | "bytesPerSecond";
/**
 * Defines values for PrimaryAggregationType.
 */
export type PrimaryAggregationType =
  | "None"
  | "Average"
  | "Count"
  | "Minimum"
  | "Maximum"
  | "Total";
/**
 * Defines values for UnitDefinitionType.
 */
export type UnitDefinitionType =
  | "Count"
  | "Bytes"
  | "Seconds"
  | "Percent"
  | "CountPerSecond"
  | "BytesPerSecond";
/**
 * Defines values for ElasticPoolEdition.
 */
export type ElasticPoolEdition =
  | "Basic"
  | "Standard"
  | "Premium"
  | "GeneralPurpose"
  | "BusinessCritical";
/**
 * Defines values for ReplicationState.
 */
export type ReplicationState = "PENDING" | "SEEDING" | "CATCH_UP" | "SUSPENDED";
/**
 * Defines values for TransparentDataEncryptionActivityStatus.
 */
export type TransparentDataEncryptionActivityStatus =
  | "Encrypting"
  | "Decrypting";
/**
 * Defines values for ServerKeyType.
 */
export type ServerKeyType = "ServiceManaged" | "AzureKeyVault";
/**
 * Defines values for ReadWriteEndpointFailoverPolicy.
 */
export type ReadWriteEndpointFailoverPolicy = "Manual" | "Automatic";
/**
 * Defines values for ReadOnlyEndpointFailoverPolicy.
 */
export type ReadOnlyEndpointFailoverPolicy = "Disabled" | "Enabled";
/**
 * Defines values for FailoverGroupReplicationRole.
 */
export type FailoverGroupReplicationRole = "Primary" | "Secondary";
/**
 * Defines values for OperationOrigin.
 */
export type OperationOrigin = "user" | "system";
/**
 * Defines values for SyncAgentState.
 */
export type SyncAgentState = "Online" | "Offline" | "NeverConnected";
/**
 * Defines values for SyncMemberDbType.
 */
export type SyncMemberDbType = "AzureSqlDatabase" | "SqlServerDatabase";
/**
 * Defines values for Enum15.
 */
export type Enum15 = "All" | "Error" | "Warning" | "Success";
/**
 * Defines values for SyncGroupLogType.
 */
export type SyncGroupLogType = "All" | "Error" | "Warning" | "Success";
/**
 * Defines values for SyncConflictResolutionPolicy.
 */
export type SyncConflictResolutionPolicy = "HubWin" | "MemberWin";
/**
 * Defines values for SyncGroupState.
 */
export type SyncGroupState =
  | "NotReady"
  | "Error"
  | "Warning"
  | "Progressing"
  | "Good";
/**
 * Defines values for SyncDirection.
 */
export type SyncDirection =
  | "Bidirectional"
  | "OneWayMemberToHub"
  | "OneWayHubToMember";
/**
 * Defines values for SyncMemberState.
 */
export type SyncMemberState =
  | "SyncInProgress"
  | "SyncSucceeded"
  | "SyncFailed"
  | "DisabledTombstoneCleanup"
  | "DisabledBackupRestore"
  | "SyncSucceededWithWarnings"
  | "SyncCancelling"
  | "SyncCancelled"
  | "UnProvisioned"
  | "Provisioning"
  | "Provisioned"
  | "ProvisionFailed"
  | "DeProvisioning"
  | "DeProvisioned"
  | "DeProvisionFailed"
  | "Reprovisioning"
  | "ReprovisionFailed"
  | "UnReprovisioned";
/**
 * Defines values for VirtualNetworkRuleState.
 */
export type VirtualNetworkRuleState =
  | "Initializing"
  | "InProgress"
  | "Ready"
  | "Deleting"
  | "Unknown";
/**
 * Defines values for JobAgentState.
 */
export type JobAgentState =
  | "Creating"
  | "Ready"
  | "Updating"
  | "Deleting"
  | "Disabled";
/**
 * Defines values for JobExecutionLifecycle.
 */
export type JobExecutionLifecycle =
  | "Created"
  | "InProgress"
  | "WaitingForChildJobExecutions"
  | "WaitingForRetry"
  | "Succeeded"
  | "SucceededWithSkipped"
  | "Failed"
  | "TimedOut"
  | "Canceled"
  | "Skipped";
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState =
  | "Created"
  | "InProgress"
  | "Succeeded"
  | "Failed"
  | "Canceled";
/**
 * Defines values for JobTargetType.
 */
export type JobTargetType =
  | "TargetGroup"
  | "SqlDatabase"
  | "SqlElasticPool"
  | "SqlShardMap"
  | "SqlServer";
/**
 * Defines values for LongTermRetentionDatabaseState.
 */
export type LongTermRetentionDatabaseState = "All" | "Live" | "Deleted";
/**
 * Defines values for ManagementOperationState.
 */
export type ManagementOperationState =
  | "Pending"
  | "InProgress"
  | "Succeeded"
  | "Failed"
  | "CancelInProgress"
  | "Cancelled";
/**
 * Defines values for CreateMode.
 */
export type CreateMode =
  | "Default"
  | "Copy"
  | "Secondary"
  | "PointInTimeRestore"
  | "Restore"
  | "Recovery"
  | "RestoreExternalBackup"
  | "RestoreExternalBackupSecondary"
  | "RestoreLongTermRetentionBackup"
  | "OnlineSecondary";
/**
 * Defines values for SampleName.
 */
export type SampleName =
  | "AdventureWorksLT"
  | "WideWorldImportersStd"
  | "WideWorldImportersFull";
/**
 * Defines values for DatabaseStatus.
 */
export type DatabaseStatus =
  | "Online"
  | "Restoring"
  | "RecoveryPending"
  | "Recovering"
  | "Suspect"
  | "Offline"
  | "Standby"
  | "Shutdown"
  | "EmergencyMode"
  | "AutoClosed"
  | "Copying"
  | "Creating"
  | "Inaccessible"
  | "OfflineSecondary"
  | "Pausing"
  | "Paused"
  | "Resuming"
  | "Scaling"
  | "OfflineChangingDwPerformanceTiers"
  | "OnlineChangingDwPerformanceTiers"
  | "Disabled";
/**
 * Defines values for CatalogCollationType.
 */
export type CatalogCollationType =
  | "DATABASE_DEFAULT"
  | "SQL_Latin1_General_CP1_CI_AS";
/**
 * Defines values for DatabaseLicenseType.
 */
export type DatabaseLicenseType = "LicenseIncluded" | "BasePrice";
/**
 * Defines values for DatabaseReadScale.
 */
export type DatabaseReadScale = "Enabled" | "Disabled";
/**
 * Defines values for ElasticPoolState.
 */
export type ElasticPoolState = "Creating" | "Ready" | "Disabled";
/**
 * Defines values for ElasticPoolLicenseType.
 */
export type ElasticPoolLicenseType = "LicenseIncluded" | "BasePrice";
/**
 * Defines values for VulnerabilityAssessmentScanTriggerType.
 */
export type VulnerabilityAssessmentScanTriggerType = "OnDemand" | "Recurring";
/**
 * Defines values for VulnerabilityAssessmentScanState.
 */
export type VulnerabilityAssessmentScanState =
  | "Passed"
  | "Failed"
  | "FailedToRun"
  | "InProgress";
/**
 * Defines values for InstanceFailoverGroupReplicationRole.
 */
export type InstanceFailoverGroupReplicationRole = "Primary" | "Secondary";
/**
 * Defines values for InstancePoolLicenseType.
 */
export type InstancePoolLicenseType = "LicenseIncluded" | "BasePrice";
/**
 * Defines values for ManagedServerCreateMode.
 */
export type ManagedServerCreateMode = "Default" | "PointInTimeRestore";
/**
 * Defines values for ManagedInstanceLicenseType.
 */
export type ManagedInstanceLicenseType = "LicenseIncluded" | "BasePrice";
/**
 * Defines values for ManagedInstanceProxyOverride.
 */
export type ManagedInstanceProxyOverride = "Proxy" | "Redirect" | "Default";
/**
 * Defines values for ReplicaType.
 */
export type ReplicaType = "Primary" | "ReadableSecondary";
/**
 * Defines values for PrivateLinkServiceConnectionStateStatus.
 */
export type PrivateLinkServiceConnectionStateStatus =
  | "Approved"
  | "Pending"
  | "Rejected"
  | "Disconnected";
/**
 * Defines values for PrivateEndpointProvisioningState.
 */
export type PrivateEndpointProvisioningState =
  | "Approving"
  | "Ready"
  | "Dropping"
  | "Failed"
  | "Rejecting";
/**
 * Defines values for ServerPublicNetworkAccess.
 */
export type ServerPublicNetworkAccess = "Enabled" | "Disabled";
/**
 * Defines values for CapabilityGroup.
 */
export type CapabilityGroup =
  | "supportedEditions"
  | "supportedElasticPoolEditions"
  | "supportedManagedInstanceVersions"
  | "supportedInstancePoolEditions"
  | "supportedManagedInstanceEditions";
/**
 * Defines values for MaxSizeUnit.
 */
export type MaxSizeUnit = "Megabytes" | "Gigabytes" | "Terabytes" | "Petabytes";
/**
 * Defines values for LogSizeUnit.
 */
export type LogSizeUnit =
  | "Megabytes"
  | "Gigabytes"
  | "Terabytes"
  | "Petabytes"
  | "Percent";
/**
 * Defines values for PerformanceLevelUnit.
 */
export type PerformanceLevelUnit = "DTU" | "VCores";
/**
 * Defines values for StorageCapabilityStorageAccountType.
 */
export type StorageCapabilityStorageAccountType = "GRS" | "LRS" | "ZRS";
/**
 * Defines values for DatabaseState.
 */
export type DatabaseState = "All" | "Live" | "Deleted";
/**
 * Defines values for ManagedDatabaseStatus.
 */
export type ManagedDatabaseStatus =
  | "Online"
  | "Offline"
  | "Shutdown"
  | "Creating"
  | "Inaccessible"
  | "Restoring"
  | "Updating";
/**
 * Defines values for ManagedDatabaseCreateMode.
 */
export type ManagedDatabaseCreateMode =
  | "Default"
  | "RestoreExternalBackup"
  | "PointInTimeRestore"
  | "Recovery"
  | "RestoreLongTermRetentionBackup";
/**
 * Defines values for ServerConnectionType.
 */
export type ServerConnectionType = "Default" | "Proxy" | "Redirect";
/**
 * Defines values for SecurityAlertPolicyState.
 */
export type SecurityAlertPolicyState = "New" | "Enabled" | "Disabled";
/**
 * Defines values for SecurityAlertPolicyEmailAccountAdmins.
 */
export type SecurityAlertPolicyEmailAccountAdmins = "Enabled" | "Disabled";
/**
 * Defines values for SecurityAlertPolicyUseServerDefault.
 */
export type SecurityAlertPolicyUseServerDefault = "Enabled" | "Disabled";
/**
 * Defines values for DataMaskingState.
 */
export type DataMaskingState = "Disabled" | "Enabled";
/**
 * Defines values for DataMaskingRuleState.
 */
export type DataMaskingRuleState = "Disabled" | "Enabled";
/**
 * Defines values for DataMaskingFunction.
 */
export type DataMaskingFunction =
  | "Default"
  | "CCN"
  | "Email"
  | "Number"
  | "SSN"
  | "Text";
/**
 * Defines values for GeoBackupPolicyState.
 */
export type GeoBackupPolicyState = "Disabled" | "Enabled";
/**
 * Defines values for StorageKeyType.
 */
export type StorageKeyType = "StorageAccessKey" | "SharedAccessKey";
/**
 * Defines values for AuthenticationType.
 */
export type AuthenticationType = "SQL" | "ADPassword";
/**
 * Defines values for ReplicationRole.
 */
export type ReplicationRole =
  | "Primary"
  | "Secondary"
  | "NonReadableSecondary"
  | "Source"
  | "Copy";
/**
 * Defines values for TransparentDataEncryptionStatus.
 */
export type TransparentDataEncryptionStatus = "Enabled" | "Disabled";
/**
 * Defines values for AutomaticTuningMode.
 */
export type AutomaticTuningMode = "Inherit" | "Custom" | "Auto" | "Unspecified";
/**
 * Defines values for AutomaticTuningOptionModeDesired.
 */
export type AutomaticTuningOptionModeDesired = "Off" | "On" | "Default";
/**
 * Defines values for AutomaticTuningOptionModeActual.
 */
export type AutomaticTuningOptionModeActual = "Off" | "On";
/**
 * Defines values for AutomaticTuningDisabledReason.
 */
export type AutomaticTuningDisabledReason =
  | "Default"
  | "Disabled"
  | "AutoConfigured"
  | "InheritedFromServer"
  | "QueryStoreOff"
  | "QueryStoreReadOnly"
  | "NotSupported";
/**
 * Defines values for BlobAuditingPolicyState.
 */
export type BlobAuditingPolicyState = "Enabled" | "Disabled";
/**
 * Defines values for VulnerabilityAssessmentPolicyBaselineName.
 */
export type VulnerabilityAssessmentPolicyBaselineName = "master" | "default";
/**
 * Defines values for JobScheduleType.
 */
export type JobScheduleType = "Once" | "Recurring";
/**
 * Defines values for JobTargetGroupMembershipType.
 */
export type JobTargetGroupMembershipType = "Include" | "Exclude";
/**
 * Defines values for AutomaticTuningServerMode.
 */
export type AutomaticTuningServerMode = "Custom" | "Auto" | "Unspecified";
/**
 * Defines values for AutomaticTuningServerReason.
 */
export type AutomaticTuningServerReason =
  | "Default"
  | "Disabled"
  | "AutoConfigured";
/**
 * Defines values for RestorePointType.
 */
export type RestorePointType = "CONTINUOUS" | "DISCRETE";
/**
 * Defines values for SensitivityLabelRank.
 */
export type SensitivityLabelRank =
  | "None"
  | "Low"
  | "Medium"
  | "High"
  | "Critical";
/**
 * Defines values for SensitivityLabelSource.
 */
export type SensitivityLabelSource = "current" | "recommended";
/**
 * Defines values for CheckNameAvailabilityReason.
 */
export type CheckNameAvailabilityReason = "Invalid" | "AlreadyExists";
/**
 * Defines values for CapabilityStatus.
 */
export type CapabilityStatus = "Visible" | "Available" | "Default" | "Disabled";
/**
 * Defines values for RecommendedIndexAction.
 */
export type RecommendedIndexAction = "Create" | "Drop" | "Rebuild";
/**
 * Defines values for RecommendedIndexState.
 */
export type RecommendedIndexState =
  | "Active"
  | "Pending"
  | "Executing"
  | "Verifying"
  | "Pending Revert"
  | "Reverting"
  | "Reverted"
  | "Ignored"
  | "Expired"
  | "Blocked"
  | "Success";
/**
 * Defines values for RecommendedIndexType.
 */
export type RecommendedIndexType =
  | "CLUSTERED"
  | "NONCLUSTERED"
  | "COLUMNSTORE"
  | "CLUSTERED COLUMNSTORE";

/**
 * Contains response data for the get operation.
 */
export type RecoverableDatabasesGetResponse = RecoverableDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecoverableDatabase;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type RecoverableDatabasesListByServerResponse = RecoverableDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecoverableDatabaseListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type RestorableDroppedDatabasesGetResponse = RestorableDroppedDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RestorableDroppedDatabase;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type RestorableDroppedDatabasesListByServerResponse = RestorableDroppedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RestorableDroppedDatabaseListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerConnectionPoliciesCreateOrUpdateResponse = ServerConnectionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerConnectionPolicy;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServerConnectionPoliciesGetResponse = ServerConnectionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerConnectionPolicy;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DatabaseThreatDetectionPoliciesGetResponse = DatabaseSecurityAlertPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseSecurityAlertPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabaseThreatDetectionPoliciesCreateOrUpdateResponse = DatabaseSecurityAlertPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseSecurityAlertPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DataMaskingPoliciesCreateOrUpdateResponse = DataMaskingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataMaskingPolicy;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DataMaskingPoliciesGetResponse = DataMaskingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataMaskingPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DataMaskingRulesCreateOrUpdateResponse = DataMaskingRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataMaskingRule;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type DataMaskingRulesListByDatabaseResponse = DataMaskingRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataMaskingRuleListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type FirewallRulesCreateOrUpdateResponse = FirewallRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallRule;
  };
};

/**
 * Contains response data for the get operation.
 */
export type FirewallRulesGetResponse = FirewallRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallRule;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type FirewallRulesListByServerResponse = FirewallRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallRuleListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GeoBackupPoliciesCreateOrUpdateResponse = GeoBackupPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GeoBackupPolicy;
  };
};

/**
 * Contains response data for the get operation.
 */
export type GeoBackupPoliciesGetResponse = GeoBackupPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GeoBackupPolicy;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type GeoBackupPoliciesListByDatabaseResponse = GeoBackupPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GeoBackupPolicyListResult;
  };
};

/**
 * Contains response data for the import operation.
 */
export type DatabasesImportResponse = ImportExportResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ImportExportResponse;
  };
};

/**
 * Contains response data for the createImportOperation operation.
 */
export type DatabasesCreateImportOperationResponse = ImportExportResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ImportExportResponse;
  };
};

/**
 * Contains response data for the export operation.
 */
export type DatabasesExportResponse = ImportExportResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ImportExportResponse;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type DatabasesListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricListResult;
  };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type DatabasesListMetricDefinitionsResponse = MetricDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricDefinitionListResult;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type DatabasesListByServerResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DatabasesGetResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Database;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabasesCreateOrUpdateResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Database;
  };
};

/**
 * Contains response data for the update operation.
 */
export type DatabasesUpdateResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Database;
  };
};

/**
 * Contains response data for the listByElasticPool operation.
 */
export type DatabasesListByElasticPoolResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseListResult;
  };
};

/**
 * Contains response data for the pause operation.
 */
export type DatabasesPauseResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Database;
  };
};

/**
 * Contains response data for the resume operation.
 */
export type DatabasesResumeResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Database;
  };
};

/**
 * Optional parameters.
 */
export interface DatabasesFailoverOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The type of replica to be failed over.
   */
  replicaType?: ReplicaType;
}

/**
 * Contains response data for the listByServerNext operation.
 */
export type DatabasesListByServerNextResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseListResult;
  };
};

/**
 * Contains response data for the listByElasticPoolNext operation.
 */
export type DatabasesListByElasticPoolNextResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseListResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type ElasticPoolsListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricListResult;
  };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type ElasticPoolsListMetricDefinitionsResponse = MetricDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricDefinitionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ElasticPoolsListByServerOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of elements in the collection to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByServer operation.
 */
export type ElasticPoolsListByServerResponse = ElasticPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ElasticPoolListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ElasticPoolsGetResponse = ElasticPool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ElasticPool;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ElasticPoolsCreateOrUpdateResponse = ElasticPool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ElasticPool;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ElasticPoolsUpdateResponse = ElasticPool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ElasticPool;
  };
};

/**
 * Optional parameters.
 */
export interface ElasticPoolsListByServerNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of elements in the collection to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByServerNext operation.
 */
export type ElasticPoolsListByServerNextResponse = ElasticPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ElasticPoolListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type RecommendedElasticPoolsGetResponse = RecommendedElasticPool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendedElasticPool;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type RecommendedElasticPoolsListByServerResponse = RecommendedElasticPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendedElasticPoolListResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type RecommendedElasticPoolsListMetricsResponse = RecommendedElasticPoolListMetricsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendedElasticPoolListMetricsResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ReplicationLinksGetResponse = ReplicationLink & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReplicationLink;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type ReplicationLinksListByDatabaseResponse = ReplicationLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReplicationLinkListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServerCommunicationLinksGetResponse = ServerCommunicationLink & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerCommunicationLink;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerCommunicationLinksCreateOrUpdateResponse = ServerCommunicationLink & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerCommunicationLink;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerCommunicationLinksListByServerResponse = ServerCommunicationLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerCommunicationLinkListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceObjectivesGetResponse = ServiceObjective & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceObjective;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServiceObjectivesListByServerResponse = ServiceObjectiveListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceObjectiveListResult;
  };
};

/**
 * Contains response data for the listByElasticPool operation.
 */
export type ElasticPoolActivitiesListByElasticPoolResponse = ElasticPoolActivityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ElasticPoolActivityListResult;
  };
};

/**
 * Contains response data for the listByElasticPool operation.
 */
export type ElasticPoolDatabaseActivitiesListByElasticPoolResponse = ElasticPoolDatabaseActivityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ElasticPoolDatabaseActivityListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceTierAdvisorsGetResponse = ServiceTierAdvisor & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceTierAdvisor;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type ServiceTierAdvisorsListByDatabaseResponse = ServiceTierAdvisorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceTierAdvisorListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TransparentDataEncryptionsCreateOrUpdateResponse = TransparentDataEncryption & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TransparentDataEncryption;
  };
};

/**
 * Contains response data for the get operation.
 */
export type TransparentDataEncryptionsGetResponse = TransparentDataEncryption & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TransparentDataEncryption;
  };
};

/**
 * Contains response data for the listByConfiguration operation.
 */
export type TransparentDataEncryptionActivitiesListByConfigurationResponse = TransparentDataEncryptionActivityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TransparentDataEncryptionActivityListResult;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerUsagesListByServerResponse = ServerUsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerUsageListResult;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type DatabaseUsagesListByDatabaseResponse = DatabaseUsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseUsageListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DatabaseAutomaticTuningGetResponse = DatabaseAutomaticTuning & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseAutomaticTuning;
  };
};

/**
 * Contains response data for the update operation.
 */
export type DatabaseAutomaticTuningUpdateResponse = DatabaseAutomaticTuning & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseAutomaticTuning;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type EncryptionProtectorsListByServerResponse = EncryptionProtectorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EncryptionProtectorListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type EncryptionProtectorsGetResponse = EncryptionProtector & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EncryptionProtector;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type EncryptionProtectorsCreateOrUpdateResponse = EncryptionProtector & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EncryptionProtector;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type EncryptionProtectorsListByServerNextResponse = EncryptionProtectorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EncryptionProtectorListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type FailoverGroupsGetResponse = FailoverGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FailoverGroup;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type FailoverGroupsCreateOrUpdateResponse = FailoverGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FailoverGroup;
  };
};

/**
 * Contains response data for the update operation.
 */
export type FailoverGroupsUpdateResponse = FailoverGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FailoverGroup;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type FailoverGroupsListByServerResponse = FailoverGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FailoverGroupListResult;
  };
};

/**
 * Contains response data for the failover operation.
 */
export type FailoverGroupsFailoverResponse = FailoverGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FailoverGroup;
  };
};

/**
 * Contains response data for the forceFailoverAllowDataLoss operation.
 */
export type FailoverGroupsForceFailoverAllowDataLossResponse = FailoverGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FailoverGroup;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type FailoverGroupsListByServerNextResponse = FailoverGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FailoverGroupListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerKeysListByServerResponse = ServerKeyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerKeyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServerKeysGetResponse = ServerKey & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerKey;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerKeysCreateOrUpdateResponse = ServerKey & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerKey;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type ServerKeysListByServerNextResponse = ServerKeyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerKeyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SyncAgentsGetResponse = SyncAgent & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncAgent;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SyncAgentsCreateOrUpdateResponse = SyncAgent & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncAgent;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type SyncAgentsListByServerResponse = SyncAgentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncAgentListResult;
  };
};

/**
 * Contains response data for the generateKey operation.
 */
export type SyncAgentsGenerateKeyResponse = SyncAgentKeyProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncAgentKeyProperties;
  };
};

/**
 * Contains response data for the listLinkedDatabases operation.
 */
export type SyncAgentsListLinkedDatabasesResponse = SyncAgentLinkedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncAgentLinkedDatabaseListResult;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type SyncAgentsListByServerNextResponse = SyncAgentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncAgentListResult;
  };
};

/**
 * Contains response data for the listLinkedDatabasesNext operation.
 */
export type SyncAgentsListLinkedDatabasesNextResponse = SyncAgentLinkedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncAgentLinkedDatabaseListResult;
  };
};

/**
 * Contains response data for the listSyncDatabaseIds operation.
 */
export type SyncGroupsListSyncDatabaseIdsResponse = SyncDatabaseIdListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncDatabaseIdListResult;
  };
};

/**
 * Contains response data for the listHubSchemas operation.
 */
export type SyncGroupsListHubSchemasResponse = SyncFullSchemaPropertiesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncFullSchemaPropertiesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface SyncGroupsListLogsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The continuation token for this operation.
   */
  continuationToken?: string;
}

/**
 * Contains response data for the listLogs operation.
 */
export type SyncGroupsListLogsResponse = SyncGroupLogListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncGroupLogListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SyncGroupsGetResponse = SyncGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncGroup;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SyncGroupsCreateOrUpdateResponse = SyncGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncGroup;
  };
};

/**
 * Contains response data for the update operation.
 */
export type SyncGroupsUpdateResponse = SyncGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncGroup;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type SyncGroupsListByDatabaseResponse = SyncGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncGroupListResult;
  };
};

/**
 * Contains response data for the listSyncDatabaseIdsNext operation.
 */
export type SyncGroupsListSyncDatabaseIdsNextResponse = SyncDatabaseIdListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncDatabaseIdListResult;
  };
};

/**
 * Contains response data for the listHubSchemasNext operation.
 */
export type SyncGroupsListHubSchemasNextResponse = SyncFullSchemaPropertiesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncFullSchemaPropertiesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface SyncGroupsListLogsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The continuation token for this operation.
   */
  continuationToken?: string;
}

/**
 * Contains response data for the listLogsNext operation.
 */
export type SyncGroupsListLogsNextResponse = SyncGroupLogListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncGroupLogListResult;
  };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type SyncGroupsListByDatabaseNextResponse = SyncGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncGroupListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SyncMembersGetResponse = SyncMember & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncMember;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SyncMembersCreateOrUpdateResponse = SyncMember & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncMember;
  };
};

/**
 * Contains response data for the update operation.
 */
export type SyncMembersUpdateResponse = SyncMember & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncMember;
  };
};

/**
 * Contains response data for the listBySyncGroup operation.
 */
export type SyncMembersListBySyncGroupResponse = SyncMemberListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncMemberListResult;
  };
};

/**
 * Contains response data for the listMemberSchemas operation.
 */
export type SyncMembersListMemberSchemasResponse = SyncFullSchemaPropertiesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncFullSchemaPropertiesListResult;
  };
};

/**
 * Contains response data for the listBySyncGroupNext operation.
 */
export type SyncMembersListBySyncGroupNextResponse = SyncMemberListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncMemberListResult;
  };
};

/**
 * Contains response data for the listMemberSchemasNext operation.
 */
export type SyncMembersListMemberSchemasNextResponse = SyncFullSchemaPropertiesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SyncFullSchemaPropertiesListResult;
  };
};

/**
 * Contains response data for the listByLocation operation.
 */
export type SubscriptionUsagesListByLocationResponse = SubscriptionUsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionUsageListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SubscriptionUsagesGetResponse = SubscriptionUsage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionUsage;
  };
};

/**
 * Contains response data for the listByLocationNext operation.
 */
export type SubscriptionUsagesListByLocationNextResponse = SubscriptionUsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionUsageListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualClustersListResponse = VirtualClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualClusterListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VirtualClustersListByResourceGroupResponse = VirtualClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualClusterListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualClustersGetResponse = VirtualCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualCluster;
  };
};

/**
 * Contains response data for the update operation.
 */
export type VirtualClustersUpdateResponse = VirtualCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualCluster;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualClustersListNextResponse = VirtualClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualClusterListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VirtualClustersListByResourceGroupNextResponse = VirtualClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualClusterListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkRulesGetResponse = VirtualNetworkRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkRule;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkRulesCreateOrUpdateResponse = VirtualNetworkRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkRule;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type VirtualNetworkRulesListByServerResponse = VirtualNetworkRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkRuleListResult;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type VirtualNetworkRulesListByServerNextResponse = VirtualNetworkRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkRuleListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExtendedDatabaseBlobAuditingPoliciesGetResponse = ExtendedDatabaseBlobAuditingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExtendedDatabaseBlobAuditingPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExtendedDatabaseBlobAuditingPoliciesCreateOrUpdateResponse = ExtendedDatabaseBlobAuditingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExtendedDatabaseBlobAuditingPolicy;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type ExtendedDatabaseBlobAuditingPoliciesListByDatabaseResponse = ExtendedDatabaseBlobAuditingPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExtendedDatabaseBlobAuditingPolicyListResult;
  };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type ExtendedDatabaseBlobAuditingPoliciesListByDatabaseNextResponse = ExtendedDatabaseBlobAuditingPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExtendedDatabaseBlobAuditingPolicyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExtendedServerBlobAuditingPoliciesGetResponse = ExtendedServerBlobAuditingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExtendedServerBlobAuditingPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExtendedServerBlobAuditingPoliciesCreateOrUpdateResponse = ExtendedServerBlobAuditingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExtendedServerBlobAuditingPolicy;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ExtendedServerBlobAuditingPoliciesListByServerResponse = ExtendedServerBlobAuditingPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExtendedServerBlobAuditingPolicyListResult;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type ExtendedServerBlobAuditingPoliciesListByServerNextResponse = ExtendedServerBlobAuditingPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExtendedServerBlobAuditingPolicyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServerBlobAuditingPoliciesGetResponse = ServerBlobAuditingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerBlobAuditingPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerBlobAuditingPoliciesCreateOrUpdateResponse = ServerBlobAuditingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerBlobAuditingPolicy;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerBlobAuditingPoliciesListByServerResponse = ServerBlobAuditingPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerBlobAuditingPolicyListResult;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type ServerBlobAuditingPoliciesListByServerNextResponse = ServerBlobAuditingPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerBlobAuditingPolicyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DatabaseBlobAuditingPoliciesGetResponse = DatabaseBlobAuditingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseBlobAuditingPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabaseBlobAuditingPoliciesCreateOrUpdateResponse = DatabaseBlobAuditingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseBlobAuditingPolicy;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type DatabaseBlobAuditingPoliciesListByDatabaseResponse = DatabaseBlobAuditingPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseBlobAuditingPolicyListResult;
  };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type DatabaseBlobAuditingPoliciesListByDatabaseNextResponse = DatabaseBlobAuditingPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseBlobAuditingPolicyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DatabaseVulnerabilityAssessmentRuleBaselinesGetResponse = DatabaseVulnerabilityAssessmentRuleBaseline & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessmentRuleBaseline;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateResponse = DatabaseVulnerabilityAssessmentRuleBaseline & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessmentRuleBaseline;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DatabaseVulnerabilityAssessmentsGetResponse = DatabaseVulnerabilityAssessment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessment;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabaseVulnerabilityAssessmentsCreateOrUpdateResponse = DatabaseVulnerabilityAssessment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessment;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type DatabaseVulnerabilityAssessmentsListByDatabaseResponse = DatabaseVulnerabilityAssessmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessmentListResult;
  };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type DatabaseVulnerabilityAssessmentsListByDatabaseNextResponse = DatabaseVulnerabilityAssessmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessmentListResult;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type JobAgentsListByServerResponse = JobAgentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobAgentListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type JobAgentsGetResponse = JobAgent & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobAgent;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type JobAgentsCreateOrUpdateResponse = JobAgent & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobAgent;
  };
};

/**
 * Contains response data for the update operation.
 */
export type JobAgentsUpdateResponse = JobAgent & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobAgent;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type JobAgentsListByServerNextResponse = JobAgentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobAgentListResult;
  };
};

/**
 * Contains response data for the listByAgent operation.
 */
export type JobCredentialsListByAgentResponse = JobCredentialListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobCredentialListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type JobCredentialsGetResponse = JobCredential & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobCredential;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type JobCredentialsCreateOrUpdateResponse = JobCredential & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobCredential;
  };
};

/**
 * Contains response data for the listByAgentNext operation.
 */
export type JobCredentialsListByAgentNextResponse = JobCredentialListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobCredentialListResult;
  };
};

/**
 * Optional parameters.
 */
export interface JobExecutionsListByAgentOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of elements in the collection to skip.
   */
  skip?: number;
  /**
   * If specified, only job executions created at or after the specified time are included.
   */
  createTimeMin?: Date;
  /**
   * If specified, only job executions created before the specified time are included.
   */
  createTimeMax?: Date;
  /**
   * If specified, only job executions completed at or after the specified time are included.
   */
  endTimeMin?: Date;
  /**
   * If specified, only job executions completed before the specified time are included.
   */
  endTimeMax?: Date;
  /**
   * If specified, only active or only completed job executions are included.
   */
  isActive?: boolean;
  /**
   * The number of elements to return from the collection.
   */
  top?: number;
}

/**
 * Contains response data for the listByAgent operation.
 */
export type JobExecutionsListByAgentResponse = JobExecutionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecutionListResult;
  };
};

/**
 * Contains response data for the create operation.
 */
export type JobExecutionsCreateResponse = JobExecution & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecution;
  };
};

/**
 * Optional parameters.
 */
export interface JobExecutionsListByJobOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of elements in the collection to skip.
   */
  skip?: number;
  /**
   * If specified, only job executions created at or after the specified time are included.
   */
  createTimeMin?: Date;
  /**
   * If specified, only job executions created before the specified time are included.
   */
  createTimeMax?: Date;
  /**
   * If specified, only job executions completed at or after the specified time are included.
   */
  endTimeMin?: Date;
  /**
   * If specified, only job executions completed before the specified time are included.
   */
  endTimeMax?: Date;
  /**
   * If specified, only active or only completed job executions are included.
   */
  isActive?: boolean;
  /**
   * The number of elements to return from the collection.
   */
  top?: number;
}

/**
 * Contains response data for the listByJob operation.
 */
export type JobExecutionsListByJobResponse = JobExecutionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecutionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type JobExecutionsGetResponse = JobExecution & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecution;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type JobExecutionsCreateOrUpdateResponse = JobExecution & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecution;
  };
};

/**
 * Optional parameters.
 */
export interface JobExecutionsListByAgentNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of elements in the collection to skip.
   */
  skip?: number;
  /**
   * If specified, only job executions created at or after the specified time are included.
   */
  createTimeMin?: Date;
  /**
   * If specified, only job executions created before the specified time are included.
   */
  createTimeMax?: Date;
  /**
   * If specified, only job executions completed at or after the specified time are included.
   */
  endTimeMin?: Date;
  /**
   * If specified, only job executions completed before the specified time are included.
   */
  endTimeMax?: Date;
  /**
   * If specified, only active or only completed job executions are included.
   */
  isActive?: boolean;
  /**
   * The number of elements to return from the collection.
   */
  top?: number;
}

/**
 * Contains response data for the listByAgentNext operation.
 */
export type JobExecutionsListByAgentNextResponse = JobExecutionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecutionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface JobExecutionsListByJobNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of elements in the collection to skip.
   */
  skip?: number;
  /**
   * If specified, only job executions created at or after the specified time are included.
   */
  createTimeMin?: Date;
  /**
   * If specified, only job executions created before the specified time are included.
   */
  createTimeMax?: Date;
  /**
   * If specified, only job executions completed at or after the specified time are included.
   */
  endTimeMin?: Date;
  /**
   * If specified, only job executions completed before the specified time are included.
   */
  endTimeMax?: Date;
  /**
   * If specified, only active or only completed job executions are included.
   */
  isActive?: boolean;
  /**
   * The number of elements to return from the collection.
   */
  top?: number;
}

/**
 * Contains response data for the listByJobNext operation.
 */
export type JobExecutionsListByJobNextResponse = JobExecutionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecutionListResult;
  };
};

/**
 * Contains response data for the listByAgent operation.
 */
export type JobsListByAgentResponse = JobListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type JobsGetResponse = Job & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Job;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type JobsCreateOrUpdateResponse = Job & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Job;
  };
};

/**
 * Contains response data for the listByAgentNext operation.
 */
export type JobsListByAgentNextResponse = JobListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobListResult;
  };
};

/**
 * Optional parameters.
 */
export interface JobStepExecutionsListByJobExecutionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of elements in the collection to skip.
   */
  skip?: number;
  /**
   * If specified, only job executions created at or after the specified time are included.
   */
  createTimeMin?: Date;
  /**
   * If specified, only job executions created before the specified time are included.
   */
  createTimeMax?: Date;
  /**
   * If specified, only job executions completed at or after the specified time are included.
   */
  endTimeMin?: Date;
  /**
   * If specified, only job executions completed before the specified time are included.
   */
  endTimeMax?: Date;
  /**
   * If specified, only active or only completed job executions are included.
   */
  isActive?: boolean;
  /**
   * The number of elements to return from the collection.
   */
  top?: number;
}

/**
 * Contains response data for the listByJobExecution operation.
 */
export type JobStepExecutionsListByJobExecutionResponse = JobExecutionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecutionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type JobStepExecutionsGetResponse = JobExecution & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecution;
  };
};

/**
 * Optional parameters.
 */
export interface JobStepExecutionsListByJobExecutionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of elements in the collection to skip.
   */
  skip?: number;
  /**
   * If specified, only job executions created at or after the specified time are included.
   */
  createTimeMin?: Date;
  /**
   * If specified, only job executions created before the specified time are included.
   */
  createTimeMax?: Date;
  /**
   * If specified, only job executions completed at or after the specified time are included.
   */
  endTimeMin?: Date;
  /**
   * If specified, only job executions completed before the specified time are included.
   */
  endTimeMax?: Date;
  /**
   * If specified, only active or only completed job executions are included.
   */
  isActive?: boolean;
  /**
   * The number of elements to return from the collection.
   */
  top?: number;
}

/**
 * Contains response data for the listByJobExecutionNext operation.
 */
export type JobStepExecutionsListByJobExecutionNextResponse = JobExecutionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecutionListResult;
  };
};

/**
 * Contains response data for the listByVersion operation.
 */
export type JobStepsListByVersionResponse = JobStepListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobStepListResult;
  };
};

/**
 * Contains response data for the getByVersion operation.
 */
export type JobStepsGetByVersionResponse = JobStep & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobStep;
  };
};

/**
 * Contains response data for the listByJob operation.
 */
export type JobStepsListByJobResponse = JobStepListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobStepListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type JobStepsGetResponse = JobStep & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobStep;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type JobStepsCreateOrUpdateResponse = JobStep & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobStep;
  };
};

/**
 * Contains response data for the listByVersionNext operation.
 */
export type JobStepsListByVersionNextResponse = JobStepListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobStepListResult;
  };
};

/**
 * Contains response data for the listByJobNext operation.
 */
export type JobStepsListByJobNextResponse = JobStepListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobStepListResult;
  };
};

/**
 * Optional parameters.
 */
export interface JobTargetExecutionsListByJobExecutionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of elements in the collection to skip.
   */
  skip?: number;
  /**
   * If specified, only job executions created at or after the specified time are included.
   */
  createTimeMin?: Date;
  /**
   * If specified, only job executions created before the specified time are included.
   */
  createTimeMax?: Date;
  /**
   * If specified, only job executions completed at or after the specified time are included.
   */
  endTimeMin?: Date;
  /**
   * If specified, only job executions completed before the specified time are included.
   */
  endTimeMax?: Date;
  /**
   * If specified, only active or only completed job executions are included.
   */
  isActive?: boolean;
  /**
   * The number of elements to return from the collection.
   */
  top?: number;
}

/**
 * Contains response data for the listByJobExecution operation.
 */
export type JobTargetExecutionsListByJobExecutionResponse = JobExecutionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecutionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface JobTargetExecutionsListByStepOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of elements in the collection to skip.
   */
  skip?: number;
  /**
   * If specified, only job executions created at or after the specified time are included.
   */
  createTimeMin?: Date;
  /**
   * If specified, only job executions created before the specified time are included.
   */
  createTimeMax?: Date;
  /**
   * If specified, only job executions completed at or after the specified time are included.
   */
  endTimeMin?: Date;
  /**
   * If specified, only job executions completed before the specified time are included.
   */
  endTimeMax?: Date;
  /**
   * If specified, only active or only completed job executions are included.
   */
  isActive?: boolean;
  /**
   * The number of elements to return from the collection.
   */
  top?: number;
}

/**
 * Contains response data for the listByStep operation.
 */
export type JobTargetExecutionsListByStepResponse = JobExecutionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecutionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type JobTargetExecutionsGetResponse = JobExecution & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecution;
  };
};

/**
 * Optional parameters.
 */
export interface JobTargetExecutionsListByJobExecutionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of elements in the collection to skip.
   */
  skip?: number;
  /**
   * If specified, only job executions created at or after the specified time are included.
   */
  createTimeMin?: Date;
  /**
   * If specified, only job executions created before the specified time are included.
   */
  createTimeMax?: Date;
  /**
   * If specified, only job executions completed at or after the specified time are included.
   */
  endTimeMin?: Date;
  /**
   * If specified, only job executions completed before the specified time are included.
   */
  endTimeMax?: Date;
  /**
   * If specified, only active or only completed job executions are included.
   */
  isActive?: boolean;
  /**
   * The number of elements to return from the collection.
   */
  top?: number;
}

/**
 * Contains response data for the listByJobExecutionNext operation.
 */
export type JobTargetExecutionsListByJobExecutionNextResponse = JobExecutionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecutionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface JobTargetExecutionsListByStepNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of elements in the collection to skip.
   */
  skip?: number;
  /**
   * If specified, only job executions created at or after the specified time are included.
   */
  createTimeMin?: Date;
  /**
   * If specified, only job executions created before the specified time are included.
   */
  createTimeMax?: Date;
  /**
   * If specified, only job executions completed at or after the specified time are included.
   */
  endTimeMin?: Date;
  /**
   * If specified, only job executions completed before the specified time are included.
   */
  endTimeMax?: Date;
  /**
   * If specified, only active or only completed job executions are included.
   */
  isActive?: boolean;
  /**
   * The number of elements to return from the collection.
   */
  top?: number;
}

/**
 * Contains response data for the listByStepNext operation.
 */
export type JobTargetExecutionsListByStepNextResponse = JobExecutionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobExecutionListResult;
  };
};

/**
 * Contains response data for the listByAgent operation.
 */
export type JobTargetGroupsListByAgentResponse = JobTargetGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobTargetGroupListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type JobTargetGroupsGetResponse = JobTargetGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobTargetGroup;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type JobTargetGroupsCreateOrUpdateResponse = JobTargetGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobTargetGroup;
  };
};

/**
 * Contains response data for the listByAgentNext operation.
 */
export type JobTargetGroupsListByAgentNextResponse = JobTargetGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobTargetGroupListResult;
  };
};

/**
 * Contains response data for the listByJob operation.
 */
export type JobVersionsListByJobResponse = JobVersionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobVersionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type JobVersionsGetResponse = Resource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Resource;
  };
};

/**
 * Contains response data for the listByJobNext operation.
 */
export type JobVersionsListByJobNextResponse = JobVersionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobVersionListResult;
  };
};

/**
 * Contains response data for the getByResourceGroup operation.
 */
export type LongTermRetentionBackupsGetByResourceGroupResponse = LongTermRetentionBackup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackup;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionBackupsListByResourceGroupDatabaseOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: LongTermRetentionDatabaseState;
}

/**
 * Contains response data for the listByResourceGroupDatabase operation.
 */
export type LongTermRetentionBackupsListByResourceGroupDatabaseResponse = LongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionBackupsListByResourceGroupLocationOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: LongTermRetentionDatabaseState;
}

/**
 * Contains response data for the listByResourceGroupLocation operation.
 */
export type LongTermRetentionBackupsListByResourceGroupLocationResponse = LongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionBackupsListByResourceGroupServerOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: LongTermRetentionDatabaseState;
}

/**
 * Contains response data for the listByResourceGroupServer operation.
 */
export type LongTermRetentionBackupsListByResourceGroupServerResponse = LongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackupListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type LongTermRetentionBackupsGetResponse = LongTermRetentionBackup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackup;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionBackupsListByDatabaseOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: LongTermRetentionDatabaseState;
}

/**
 * Contains response data for the listByDatabase operation.
 */
export type LongTermRetentionBackupsListByDatabaseResponse = LongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionBackupsListByLocationOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: LongTermRetentionDatabaseState;
}

/**
 * Contains response data for the listByLocation operation.
 */
export type LongTermRetentionBackupsListByLocationResponse = LongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionBackupsListByServerOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: LongTermRetentionDatabaseState;
}

/**
 * Contains response data for the listByServer operation.
 */
export type LongTermRetentionBackupsListByServerResponse = LongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionBackupsListByResourceGroupDatabaseNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: LongTermRetentionDatabaseState;
}

/**
 * Contains response data for the listByResourceGroupDatabaseNext operation.
 */
export type LongTermRetentionBackupsListByResourceGroupDatabaseNextResponse = LongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionBackupsListByResourceGroupLocationNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: LongTermRetentionDatabaseState;
}

/**
 * Contains response data for the listByResourceGroupLocationNext operation.
 */
export type LongTermRetentionBackupsListByResourceGroupLocationNextResponse = LongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionBackupsListByResourceGroupServerNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: LongTermRetentionDatabaseState;
}

/**
 * Contains response data for the listByResourceGroupServerNext operation.
 */
export type LongTermRetentionBackupsListByResourceGroupServerNextResponse = LongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionBackupsListByDatabaseNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: LongTermRetentionDatabaseState;
}

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type LongTermRetentionBackupsListByDatabaseNextResponse = LongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionBackupsListByLocationNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: LongTermRetentionDatabaseState;
}

/**
 * Contains response data for the listByLocationNext operation.
 */
export type LongTermRetentionBackupsListByLocationNextResponse = LongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionBackupsListByServerNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: LongTermRetentionDatabaseState;
}

/**
 * Contains response data for the listByServerNext operation.
 */
export type LongTermRetentionBackupsListByServerNextResponse = LongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LongTermRetentionBackupListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BackupLongTermRetentionPoliciesGetResponse = BackupLongTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupLongTermRetentionPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type BackupLongTermRetentionPoliciesCreateOrUpdateResponse = BackupLongTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupLongTermRetentionPolicy;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type BackupLongTermRetentionPoliciesListByDatabaseResponse = BackupLongTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupLongTermRetentionPolicy;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedBackupShortTermRetentionPoliciesGetResponse = ManagedBackupShortTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedBackupShortTermRetentionPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedBackupShortTermRetentionPoliciesCreateOrUpdateResponse = ManagedBackupShortTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedBackupShortTermRetentionPolicy;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ManagedBackupShortTermRetentionPoliciesUpdateResponse = ManagedBackupShortTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedBackupShortTermRetentionPolicy;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type ManagedBackupShortTermRetentionPoliciesListByDatabaseResponse = ManagedBackupShortTermRetentionPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedBackupShortTermRetentionPolicyListResult;
  };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type ManagedBackupShortTermRetentionPoliciesListByDatabaseNextResponse = ManagedBackupShortTermRetentionPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedBackupShortTermRetentionPolicyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesGetResponse = ManagedBackupShortTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedBackupShortTermRetentionPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesCreateOrUpdateResponse = ManagedBackupShortTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedBackupShortTermRetentionPolicy;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesUpdateResponse = ManagedBackupShortTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedBackupShortTermRetentionPolicy;
  };
};

/**
 * Contains response data for the listByRestorableDroppedDatabase operation.
 */
export type ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesListByRestorableDroppedDatabaseResponse = ManagedBackupShortTermRetentionPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedBackupShortTermRetentionPolicyListResult;
  };
};

/**
 * Contains response data for the listByRestorableDroppedDatabaseNext operation.
 */
export type ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesListByRestorableDroppedDatabaseNextResponse = ManagedBackupShortTermRetentionPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedBackupShortTermRetentionPolicyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServerAutomaticTuningGetResponse = ServerAutomaticTuning & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerAutomaticTuning;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ServerAutomaticTuningUpdateResponse = ServerAutomaticTuning & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerAutomaticTuning;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServerDnsAliasesGetResponse = ServerDnsAlias & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerDnsAlias;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerDnsAliasesCreateOrUpdateResponse = ServerDnsAlias & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerDnsAlias;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerDnsAliasesListByServerResponse = ServerDnsAliasListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerDnsAliasListResult;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type ServerDnsAliasesListByServerNextResponse = ServerDnsAliasListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerDnsAliasListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServerSecurityAlertPoliciesGetResponse = ServerSecurityAlertPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerSecurityAlertPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerSecurityAlertPoliciesCreateOrUpdateResponse = ServerSecurityAlertPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerSecurityAlertPolicy;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerSecurityAlertPoliciesListByServerResponse = LogicalServerSecurityAlertPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LogicalServerSecurityAlertPolicyListResult;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type ServerSecurityAlertPoliciesListByServerNextResponse = LogicalServerSecurityAlertPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LogicalServerSecurityAlertPolicyListResult;
  };
};

/**
 * Contains response data for the listByInstance operation.
 */
export type RestorableDroppedManagedDatabasesListByInstanceResponse = RestorableDroppedManagedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RestorableDroppedManagedDatabaseListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type RestorableDroppedManagedDatabasesGetResponse = RestorableDroppedManagedDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RestorableDroppedManagedDatabase;
  };
};

/**
 * Contains response data for the listByInstanceNext operation.
 */
export type RestorableDroppedManagedDatabasesListByInstanceNextResponse = RestorableDroppedManagedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RestorableDroppedManagedDatabaseListResult;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type RestorePointsListByDatabaseResponse = RestorePointListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RestorePointListResult;
  };
};

/**
 * Contains response data for the create operation.
 */
export type RestorePointsCreateResponse = RestorePoint & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RestorePoint;
  };
};

/**
 * Contains response data for the get operation.
 */
export type RestorePointsGetResponse = RestorePoint & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RestorePoint;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedDatabaseSecurityAlertPoliciesGetResponse = ManagedDatabaseSecurityAlertPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedDatabaseSecurityAlertPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedDatabaseSecurityAlertPoliciesCreateOrUpdateResponse = ManagedDatabaseSecurityAlertPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedDatabaseSecurityAlertPolicy;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type ManagedDatabaseSecurityAlertPoliciesListByDatabaseResponse = ManagedDatabaseSecurityAlertPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedDatabaseSecurityAlertPolicyListResult;
  };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type ManagedDatabaseSecurityAlertPoliciesListByDatabaseNextResponse = ManagedDatabaseSecurityAlertPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedDatabaseSecurityAlertPolicyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedServerSecurityAlertPoliciesGetResponse = ManagedServerSecurityAlertPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedServerSecurityAlertPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedServerSecurityAlertPoliciesCreateOrUpdateResponse = ManagedServerSecurityAlertPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedServerSecurityAlertPolicy;
  };
};

/**
 * Contains response data for the listByInstance operation.
 */
export type ManagedServerSecurityAlertPoliciesListByInstanceResponse = ManagedServerSecurityAlertPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedServerSecurityAlertPolicyListResult;
  };
};

/**
 * Contains response data for the listByInstanceNext operation.
 */
export type ManagedServerSecurityAlertPoliciesListByInstanceNextResponse = ManagedServerSecurityAlertPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedServerSecurityAlertPolicyListResult;
  };
};

/**
 * Optional parameters.
 */
export interface SensitivityLabelsListCurrentByDatabaseOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that filters elements in the collection.
   */
  filter?: string;
}

/**
 * Contains response data for the listCurrentByDatabase operation.
 */
export type SensitivityLabelsListCurrentByDatabaseResponse = SensitivityLabelListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SensitivityLabelListResult;
  };
};

/**
 * Optional parameters.
 */
export interface SensitivityLabelsListRecommendedByDatabaseOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that filters elements in the collection.
   */
  filter?: string;
  /**
   * Specifies whether to include disabled recommendations or not.
   */
  includeDisabledRecommendations?: boolean;
  skipToken?: string;
}

/**
 * Contains response data for the listRecommendedByDatabase operation.
 */
export type SensitivityLabelsListRecommendedByDatabaseResponse = SensitivityLabelListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SensitivityLabelListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SensitivityLabelsGetResponse = SensitivityLabel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SensitivityLabel;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SensitivityLabelsCreateOrUpdateResponse = SensitivityLabel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SensitivityLabel;
  };
};

/**
 * Optional parameters.
 */
export interface SensitivityLabelsListCurrentByDatabaseNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that filters elements in the collection.
   */
  filter?: string;
}

/**
 * Contains response data for the listCurrentByDatabaseNext operation.
 */
export type SensitivityLabelsListCurrentByDatabaseNextResponse = SensitivityLabelListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SensitivityLabelListResult;
  };
};

/**
 * Optional parameters.
 */
export interface SensitivityLabelsListRecommendedByDatabaseNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that filters elements in the collection.
   */
  filter?: string;
  /**
   * Specifies whether to include disabled recommendations or not.
   */
  includeDisabledRecommendations?: boolean;
  skipToken?: string;
}

/**
 * Contains response data for the listRecommendedByDatabaseNext operation.
 */
export type SensitivityLabelsListRecommendedByDatabaseNextResponse = SensitivityLabelListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SensitivityLabelListResult;
  };
};

/**
 * Contains response data for the listByInstance operation.
 */
export type ManagedInstanceAdministratorsListByInstanceResponse = ManagedInstanceAdministratorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceAdministratorListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedInstanceAdministratorsGetResponse = ManagedInstanceAdministrator & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceAdministrator;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedInstanceAdministratorsCreateOrUpdateResponse = ManagedInstanceAdministrator & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceAdministrator;
  };
};

/**
 * Contains response data for the listByInstanceNext operation.
 */
export type ManagedInstanceAdministratorsListByInstanceNextResponse = ManagedInstanceAdministratorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceAdministratorListResult;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type DatabaseOperationsListByDatabaseResponse = DatabaseOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseOperationListResult;
  };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type DatabaseOperationsListByDatabaseNextResponse = DatabaseOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseOperationListResult;
  };
};

/**
 * Contains response data for the listByElasticPool operation.
 */
export type ElasticPoolOperationsListByElasticPoolResponse = ElasticPoolOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ElasticPoolOperationListResult;
  };
};

/**
 * Contains response data for the listByElasticPoolNext operation.
 */
export type ElasticPoolOperationsListByElasticPoolNextResponse = ElasticPoolOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ElasticPoolOperationListResult;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type DatabaseVulnerabilityAssessmentScansListByDatabaseResponse = VulnerabilityAssessmentScanRecordListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VulnerabilityAssessmentScanRecordListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DatabaseVulnerabilityAssessmentScansGetResponse = VulnerabilityAssessmentScanRecord & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VulnerabilityAssessmentScanRecord;
  };
};

/**
 * Contains response data for the export operation.
 */
export type DatabaseVulnerabilityAssessmentScansExportResponse = DatabaseVulnerabilityAssessmentScansExport & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessmentScansExport;
  };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type DatabaseVulnerabilityAssessmentScansListByDatabaseNextResponse = VulnerabilityAssessmentScanRecordListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VulnerabilityAssessmentScanRecordListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedDatabaseVulnerabilityAssessmentRuleBaselinesGetResponse = DatabaseVulnerabilityAssessmentRuleBaseline & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessmentRuleBaseline;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateResponse = DatabaseVulnerabilityAssessmentRuleBaseline & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessmentRuleBaseline;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseResponse = VulnerabilityAssessmentScanRecordListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VulnerabilityAssessmentScanRecordListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedDatabaseVulnerabilityAssessmentScansGetResponse = VulnerabilityAssessmentScanRecord & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VulnerabilityAssessmentScanRecord;
  };
};

/**
 * Contains response data for the export operation.
 */
export type ManagedDatabaseVulnerabilityAssessmentScansExportResponse = DatabaseVulnerabilityAssessmentScansExport & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessmentScansExport;
  };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseNextResponse = VulnerabilityAssessmentScanRecordListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VulnerabilityAssessmentScanRecordListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedDatabaseVulnerabilityAssessmentsGetResponse = DatabaseVulnerabilityAssessment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessment;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedDatabaseVulnerabilityAssessmentsCreateOrUpdateResponse = DatabaseVulnerabilityAssessment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessment;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type ManagedDatabaseVulnerabilityAssessmentsListByDatabaseResponse = DatabaseVulnerabilityAssessmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessmentListResult;
  };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type ManagedDatabaseVulnerabilityAssessmentsListByDatabaseNextResponse = DatabaseVulnerabilityAssessmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseVulnerabilityAssessmentListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type InstanceFailoverGroupsGetResponse = InstanceFailoverGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InstanceFailoverGroup;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type InstanceFailoverGroupsCreateOrUpdateResponse = InstanceFailoverGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InstanceFailoverGroup;
  };
};

/**
 * Contains response data for the listByLocation operation.
 */
export type InstanceFailoverGroupsListByLocationResponse = InstanceFailoverGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InstanceFailoverGroupListResult;
  };
};

/**
 * Contains response data for the failover operation.
 */
export type InstanceFailoverGroupsFailoverResponse = InstanceFailoverGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InstanceFailoverGroup;
  };
};

/**
 * Contains response data for the forceFailoverAllowDataLoss operation.
 */
export type InstanceFailoverGroupsForceFailoverAllowDataLossResponse = InstanceFailoverGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InstanceFailoverGroup;
  };
};

/**
 * Contains response data for the listByLocationNext operation.
 */
export type InstanceFailoverGroupsListByLocationNextResponse = InstanceFailoverGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InstanceFailoverGroupListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BackupShortTermRetentionPoliciesGetResponse = BackupShortTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupShortTermRetentionPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type BackupShortTermRetentionPoliciesCreateOrUpdateResponse = BackupShortTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupShortTermRetentionPolicy;
  };
};

/**
 * Contains response data for the update operation.
 */
export type BackupShortTermRetentionPoliciesUpdateResponse = BackupShortTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupShortTermRetentionPolicy;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type BackupShortTermRetentionPoliciesListByDatabaseResponse = BackupShortTermRetentionPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupShortTermRetentionPolicyListResult;
  };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type BackupShortTermRetentionPoliciesListByDatabaseNextResponse = BackupShortTermRetentionPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupShortTermRetentionPolicyListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedInstanceKeysListByInstanceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that filters elements in the collection.
   */
  filter?: string;
}

/**
 * Contains response data for the listByInstance operation.
 */
export type ManagedInstanceKeysListByInstanceResponse = ManagedInstanceKeyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceKeyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedInstanceKeysGetResponse = ManagedInstanceKey & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceKey;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedInstanceKeysCreateOrUpdateResponse = ManagedInstanceKey & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceKey;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedInstanceKeysListByInstanceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that filters elements in the collection.
   */
  filter?: string;
}

/**
 * Contains response data for the listByInstanceNext operation.
 */
export type ManagedInstanceKeysListByInstanceNextResponse = ManagedInstanceKeyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceKeyListResult;
  };
};

/**
 * Contains response data for the listByInstance operation.
 */
export type ManagedInstanceEncryptionProtectorsListByInstanceResponse = ManagedInstanceEncryptionProtectorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceEncryptionProtectorListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedInstanceEncryptionProtectorsGetResponse = ManagedInstanceEncryptionProtector & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceEncryptionProtector;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedInstanceEncryptionProtectorsCreateOrUpdateResponse = ManagedInstanceEncryptionProtector & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceEncryptionProtector;
  };
};

/**
 * Contains response data for the listByInstanceNext operation.
 */
export type ManagedInstanceEncryptionProtectorsListByInstanceNextResponse = ManagedInstanceEncryptionProtectorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceEncryptionProtectorListResult;
  };
};

/**
 * Contains response data for the listByInstance operation.
 */
export type RecoverableManagedDatabasesListByInstanceResponse = RecoverableManagedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecoverableManagedDatabaseListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type RecoverableManagedDatabasesGetResponse = RecoverableManagedDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecoverableManagedDatabase;
  };
};

/**
 * Contains response data for the listByInstanceNext operation.
 */
export type RecoverableManagedDatabasesListByInstanceNextResponse = RecoverableManagedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecoverableManagedDatabaseListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedInstanceVulnerabilityAssessmentsGetResponse = ManagedInstanceVulnerabilityAssessment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceVulnerabilityAssessment;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedInstanceVulnerabilityAssessmentsCreateOrUpdateResponse = ManagedInstanceVulnerabilityAssessment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceVulnerabilityAssessment;
  };
};

/**
 * Contains response data for the listByInstance operation.
 */
export type ManagedInstanceVulnerabilityAssessmentsListByInstanceResponse = ManagedInstanceVulnerabilityAssessmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceVulnerabilityAssessmentListResult;
  };
};

/**
 * Contains response data for the listByInstanceNext operation.
 */
export type ManagedInstanceVulnerabilityAssessmentsListByInstanceNextResponse = ManagedInstanceVulnerabilityAssessmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceVulnerabilityAssessmentListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServerVulnerabilityAssessmentsGetResponse = ServerVulnerabilityAssessment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerVulnerabilityAssessment;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerVulnerabilityAssessmentsCreateOrUpdateResponse = ServerVulnerabilityAssessment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerVulnerabilityAssessment;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerVulnerabilityAssessmentsListByServerResponse = ServerVulnerabilityAssessmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerVulnerabilityAssessmentListResult;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type ServerVulnerabilityAssessmentsListByServerNextResponse = ServerVulnerabilityAssessmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerVulnerabilityAssessmentListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedDatabaseSensitivityLabelsGetResponse = SensitivityLabel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SensitivityLabel;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedDatabaseSensitivityLabelsCreateOrUpdateResponse = SensitivityLabel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SensitivityLabel;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedDatabaseSensitivityLabelsListCurrentByDatabaseOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that filters elements in the collection.
   */
  filter?: string;
}

/**
 * Contains response data for the listCurrentByDatabase operation.
 */
export type ManagedDatabaseSensitivityLabelsListCurrentByDatabaseResponse = SensitivityLabelListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SensitivityLabelListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that filters elements in the collection.
   */
  filter?: string;
  /**
   * Specifies whether to include disabled recommendations or not.
   */
  includeDisabledRecommendations?: boolean;
  skipToken?: string;
}

/**
 * Contains response data for the listRecommendedByDatabase operation.
 */
export type ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseResponse = SensitivityLabelListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SensitivityLabelListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedDatabaseSensitivityLabelsListCurrentByDatabaseNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that filters elements in the collection.
   */
  filter?: string;
}

/**
 * Contains response data for the listCurrentByDatabaseNext operation.
 */
export type ManagedDatabaseSensitivityLabelsListCurrentByDatabaseNextResponse = SensitivityLabelListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SensitivityLabelListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that filters elements in the collection.
   */
  filter?: string;
  /**
   * Specifies whether to include disabled recommendations or not.
   */
  includeDisabledRecommendations?: boolean;
  skipToken?: string;
}

/**
 * Contains response data for the listRecommendedByDatabaseNext operation.
 */
export type ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseNextResponse = SensitivityLabelListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SensitivityLabelListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type InstancePoolsGetResponse = InstancePool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InstancePool;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type InstancePoolsCreateOrUpdateResponse = InstancePool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InstancePool;
  };
};

/**
 * Contains response data for the update operation.
 */
export type InstancePoolsUpdateResponse = InstancePool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InstancePool;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type InstancePoolsListByResourceGroupResponse = InstancePoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InstancePoolListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type InstancePoolsListResponse = InstancePoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InstancePoolListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type InstancePoolsListByResourceGroupNextResponse = InstancePoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InstancePoolListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type InstancePoolsListNextResponse = InstancePoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InstancePoolListResult;
  };
};

/**
 * Optional parameters.
 */
export interface UsagesListByInstancePoolOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Optional request parameter to include managed instance usages within the instance pool.
   */
  expandChildren?: boolean;
}

/**
 * Contains response data for the listByInstancePool operation.
 */
export type UsagesListByInstancePoolResponse = UsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsageListResult;
  };
};

/**
 * Optional parameters.
 */
export interface UsagesListByInstancePoolNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Optional request parameter to include managed instance usages within the instance pool.
   */
  expandChildren?: boolean;
}

/**
 * Contains response data for the listByInstancePoolNext operation.
 */
export type UsagesListByInstancePoolNextResponse = UsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsageListResult;
  };
};

/**
 * Contains response data for the listByInstancePool operation.
 */
export type ManagedInstancesListByInstancePoolResponse = ManagedInstanceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ManagedInstancesListByResourceGroupResponse = ManagedInstanceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedInstancesGetResponse = ManagedInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstance;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedInstancesCreateOrUpdateResponse = ManagedInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstance;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ManagedInstancesUpdateResponse = ManagedInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstance;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ManagedInstancesListResponse = ManagedInstanceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceListResult;
  };
};

/**
 * Contains response data for the listByInstancePoolNext operation.
 */
export type ManagedInstancesListByInstancePoolNextResponse = ManagedInstanceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ManagedInstancesListByResourceGroupNextResponse = ManagedInstanceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ManagedInstancesListNextResponse = ManagedInstanceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnection;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnection;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type PrivateEndpointConnectionsListByServerResponse = PrivateEndpointConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnectionListResult;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type PrivateEndpointConnectionsListByServerNextResponse = PrivateEndpointConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnectionListResult;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type PrivateLinkResourcesListByServerResponse = PrivateLinkResourceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkResourceListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PrivateLinkResourcesGetResponse = PrivateLinkResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkResource;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type PrivateLinkResourcesListByServerNextResponse = PrivateLinkResourceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkResourceListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ServersListByResourceGroupResponse = ServerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServersGetResponse = Server & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Server;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServersCreateOrUpdateResponse = Server & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Server;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ServersUpdateResponse = Server & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Server;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ServersListResponse = ServerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerListResult;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type ServersCheckNameAvailabilityResponse = CheckNameAvailabilityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameAvailabilityResponse;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ServersListByResourceGroupNextResponse = ServerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ServersListNextResponse = ServerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerListResult;
  };
};

/**
 * Optional parameters.
 */
export interface CapabilitiesListByLocationOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * If specified, restricts the response to only include the selected item.
   */
  include?: CapabilityGroup;
}

/**
 * Contains response data for the listByLocation operation.
 */
export type CapabilitiesListByLocationResponse = LocationCapabilities & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LocationCapabilities;
  };
};

/**
 * Contains response data for the get operation.
 */
export type LongTermRetentionManagedInstanceBackupsGetResponse = ManagedInstanceLongTermRetentionBackup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackup;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionManagedInstanceBackupsListByDatabaseOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: DatabaseState;
}

/**
 * Contains response data for the listByDatabase operation.
 */
export type LongTermRetentionManagedInstanceBackupsListByDatabaseResponse = ManagedInstanceLongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionManagedInstanceBackupsListByInstanceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: DatabaseState;
}

/**
 * Contains response data for the listByInstance operation.
 */
export type LongTermRetentionManagedInstanceBackupsListByInstanceResponse = ManagedInstanceLongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionManagedInstanceBackupsListByLocationOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: DatabaseState;
}

/**
 * Contains response data for the listByLocation operation.
 */
export type LongTermRetentionManagedInstanceBackupsListByLocationResponse = ManagedInstanceLongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackupListResult;
  };
};

/**
 * Contains response data for the getByResourceGroup operation.
 */
export type LongTermRetentionManagedInstanceBackupsGetByResourceGroupResponse = ManagedInstanceLongTermRetentionBackup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackup;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: DatabaseState;
}

/**
 * Contains response data for the listByResourceGroupDatabase operation.
 */
export type LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseResponse = ManagedInstanceLongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: DatabaseState;
}

/**
 * Contains response data for the listByResourceGroupInstance operation.
 */
export type LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceResponse = ManagedInstanceLongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: DatabaseState;
}

/**
 * Contains response data for the listByResourceGroupLocation operation.
 */
export type LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationResponse = ManagedInstanceLongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionManagedInstanceBackupsListByDatabaseNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: DatabaseState;
}

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type LongTermRetentionManagedInstanceBackupsListByDatabaseNextResponse = ManagedInstanceLongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionManagedInstanceBackupsListByInstanceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: DatabaseState;
}

/**
 * Contains response data for the listByInstanceNext operation.
 */
export type LongTermRetentionManagedInstanceBackupsListByInstanceNextResponse = ManagedInstanceLongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionManagedInstanceBackupsListByLocationNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: DatabaseState;
}

/**
 * Contains response data for the listByLocationNext operation.
 */
export type LongTermRetentionManagedInstanceBackupsListByLocationNextResponse = ManagedInstanceLongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: DatabaseState;
}

/**
 * Contains response data for the listByResourceGroupDatabaseNext operation.
 */
export type LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseNextResponse = ManagedInstanceLongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: DatabaseState;
}

/**
 * Contains response data for the listByResourceGroupInstanceNext operation.
 */
export type LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceNextResponse = ManagedInstanceLongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Whether or not to only get the latest backup for each database.
   */
  onlyLatestPerDatabase?: boolean;
  /**
   * Whether to query against just live databases, just deleted databases, or all databases.
   */
  databaseState?: DatabaseState;
}

/**
 * Contains response data for the listByResourceGroupLocationNext operation.
 */
export type LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationNextResponse = ManagedInstanceLongTermRetentionBackupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionBackupListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedInstanceLongTermRetentionPoliciesGetResponse = ManagedInstanceLongTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedInstanceLongTermRetentionPoliciesCreateOrUpdateResponse = ManagedInstanceLongTermRetentionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionPolicy;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type ManagedInstanceLongTermRetentionPoliciesListByDatabaseResponse = ManagedInstanceLongTermRetentionPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionPolicyListResult;
  };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type ManagedInstanceLongTermRetentionPoliciesListByDatabaseNextResponse = ManagedInstanceLongTermRetentionPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceLongTermRetentionPolicyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WorkloadGroupsGetResponse = WorkloadGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkloadGroup;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type WorkloadGroupsCreateOrUpdateResponse = WorkloadGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkloadGroup;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type WorkloadGroupsListByDatabaseResponse = WorkloadGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkloadGroupListResult;
  };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type WorkloadGroupsListByDatabaseNextResponse = WorkloadGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkloadGroupListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WorkloadClassifiersGetResponse = WorkloadClassifier & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkloadClassifier;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type WorkloadClassifiersCreateOrUpdateResponse = WorkloadClassifier & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkloadClassifier;
  };
};

/**
 * Contains response data for the listByWorkloadGroup operation.
 */
export type WorkloadClassifiersListByWorkloadGroupResponse = WorkloadClassifierListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkloadClassifierListResult;
  };
};

/**
 * Contains response data for the listByWorkloadGroupNext operation.
 */
export type WorkloadClassifiersListByWorkloadGroupNextResponse = WorkloadClassifierListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkloadClassifierListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedDatabaseRestoreDetailsGetResponse = ManagedDatabaseRestoreDetailsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedDatabaseRestoreDetailsResult;
  };
};

/**
 * Contains response data for the listByInstance operation.
 */
export type ManagedDatabasesListByInstanceResponse = ManagedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedDatabaseListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedDatabasesGetResponse = ManagedDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedDatabase;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedDatabasesCreateOrUpdateResponse = ManagedDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedDatabase;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ManagedDatabasesUpdateResponse = ManagedDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedDatabase;
  };
};

/**
 * Contains response data for the listInaccessibleByInstance operation.
 */
export type ManagedDatabasesListInaccessibleByInstanceResponse = ManagedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedDatabaseListResult;
  };
};

/**
 * Contains response data for the listByInstanceNext operation.
 */
export type ManagedDatabasesListByInstanceNextResponse = ManagedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedDatabaseListResult;
  };
};

/**
 * Contains response data for the listInaccessibleByInstanceNext operation.
 */
export type ManagedDatabasesListInaccessibleByInstanceNextResponse = ManagedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedDatabaseListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServerAzureADAdministratorsGetResponse = ServerAzureADAdministrator & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerAzureADAdministrator;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerAzureADAdministratorsCreateOrUpdateResponse = ServerAzureADAdministrator & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerAzureADAdministrator;
  };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerAzureADAdministratorsListByServerResponse = AdministratorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AdministratorListResult;
  };
};

/**
 * Contains response data for the disableAzureADOnlyAuthentication operation.
 */
export type ServerAzureADAdministratorsDisableAzureADOnlyAuthenticationResponse = ServerAzureADAdministrator & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServerAzureADAdministrator;
  };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type ServerAzureADAdministratorsListByServerNextResponse = AdministratorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AdministratorListResult;
  };
};

/**
 * Contains response data for the listByManagedInstance operation.
 */
export type ManagedInstanceOperationsListByManagedInstanceResponse = ManagedInstanceOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceOperationListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedInstanceOperationsGetResponse = ManagedInstanceOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceOperation;
  };
};

/**
 * Contains response data for the listByManagedInstanceNext operation.
 */
export type ManagedInstanceOperationsListByManagedInstanceNextResponse = ManagedInstanceOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedInstanceOperationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface SqlManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
