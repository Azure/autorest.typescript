/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  InstanceFailoverGroupsGetResponse,
  InstanceFailoverGroup,
  InstanceFailoverGroupsCreateOrUpdateResponse,
  InstanceFailoverGroupsListByLocationResponse,
  InstanceFailoverGroupsFailoverResponse,
  InstanceFailoverGroupsForceFailoverAllowDataLossResponse,
  InstanceFailoverGroupsListByLocationNextResponse
} from "../models";

/**
 * Class representing a InstanceFailoverGroups.
 */
export class InstanceFailoverGroups {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class InstanceFailoverGroups class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Gets a failover group.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param failoverGroupName The name of the failover group.
   * @param locationName The name of the region where the resource is located.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    failoverGroupName: string,
    locationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<InstanceFailoverGroupsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        failoverGroupName,
        locationName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<InstanceFailoverGroupsGetResponse>;
  }

  /**
   * Creates or updates a failover group.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param failoverGroupName The name of the failover group.
   * @param locationName The name of the region where the resource is located.
   * @param parameters The failover group parameters.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    failoverGroupName: string,
    locationName: string,
    parameters: InstanceFailoverGroup,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<InstanceFailoverGroupsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      failoverGroupName,
      locationName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        InstanceFailoverGroupsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes a failover group.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param failoverGroupName The name of the failover group.
   * @param locationName The name of the region where the resource is located.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    failoverGroupName: string,
    locationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      failoverGroupName,
      locationName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Lists the failover groups in a location.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The name of the region where the resource is located.
   * @param options The options parameters.
   */
  listByLocation(
    resourceGroupName: string,
    locationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<InstanceFailoverGroupsListByLocationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, locationName, options: operationOptions },
      listByLocationOperationSpec
    ) as Promise<InstanceFailoverGroupsListByLocationResponse>;
  }

  /**
   * Fails over from the current primary managed instance to this managed instance.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param failoverGroupName The name of the failover group.
   * @param locationName The name of the region where the resource is located.
   * @param options The options parameters.
   */
  async failover(
    resourceGroupName: string,
    failoverGroupName: string,
    locationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<InstanceFailoverGroupsFailoverResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      failoverGroupName,
      locationName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        InstanceFailoverGroupsFailoverResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      failoverOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: failoverOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Fails over from the current primary managed instance to this managed instance. This operation might
   * result in data loss.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param failoverGroupName The name of the failover group.
   * @param locationName The name of the region where the resource is located.
   * @param options The options parameters.
   */
  async forceFailoverAllowDataLoss(
    resourceGroupName: string,
    failoverGroupName: string,
    locationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<InstanceFailoverGroupsForceFailoverAllowDataLossResponse>
  > {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      failoverGroupName,
      locationName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        InstanceFailoverGroupsForceFailoverAllowDataLossResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      forceFailoverAllowDataLossOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: forceFailoverAllowDataLossOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListByLocationNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param locationName The name of the region where the resource is located.
   * @param nextLink The nextLink from the previous successful call to the ListByLocation method.
   * @param options The options parameters.
   */
  listByLocationNext(
    resourceGroupName: string,
    locationName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<InstanceFailoverGroupsListByLocationNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, locationName, nextLink, options: operationOptions },
      listByLocationNextOperationSpec
    ) as Promise<InstanceFailoverGroupsListByLocationNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InstanceFailoverGroup
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.failoverGroupName,
    Parameters.locationName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.InstanceFailoverGroup
    },
    201: {
      bodyMapper: Mappers.InstanceFailoverGroup
    },
    202: {
      bodyMapper: Mappers.InstanceFailoverGroup
    },
    204: {
      bodyMapper: Mappers.InstanceFailoverGroup
    }
  },
  requestBody: Parameters.parameters50,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.failoverGroupName,
    Parameters.locationName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.failoverGroupName,
    Parameters.locationName
  ],
  serializer
};
const listByLocationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InstanceFailoverGroupListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName
  ],
  serializer
};
const failoverOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}/failover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.InstanceFailoverGroup
    },
    201: {
      bodyMapper: Mappers.InstanceFailoverGroup
    },
    202: {
      bodyMapper: Mappers.InstanceFailoverGroup
    },
    204: {
      bodyMapper: Mappers.InstanceFailoverGroup
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.failoverGroupName,
    Parameters.locationName
  ],
  serializer
};
const forceFailoverAllowDataLossOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}/forceFailoverAllowDataLoss",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.InstanceFailoverGroup
    },
    201: {
      bodyMapper: Mappers.InstanceFailoverGroup
    },
    202: {
      bodyMapper: Mappers.InstanceFailoverGroup
    },
    204: {
      bodyMapper: Mappers.InstanceFailoverGroup
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.failoverGroupName,
    Parameters.locationName
  ],
  serializer
};
const listByLocationNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InstanceFailoverGroupListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.nextLink10
  ],
  serializer
};
