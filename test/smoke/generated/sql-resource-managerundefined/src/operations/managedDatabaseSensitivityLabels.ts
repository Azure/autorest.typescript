/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  SensitivityLabelSource,
  ManagedDatabaseSensitivityLabelsGetResponse,
  SensitivityLabel,
  ManagedDatabaseSensitivityLabelsCreateOrUpdateResponse,
  ManagedDatabaseSensitivityLabelsListCurrentByDatabaseOptionalParams,
  ManagedDatabaseSensitivityLabelsListCurrentByDatabaseResponse,
  ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseOptionalParams,
  ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseResponse,
  ManagedDatabaseSensitivityLabelsListCurrentByDatabaseNextOptionalParams,
  ManagedDatabaseSensitivityLabelsListCurrentByDatabaseNextResponse,
  ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseNextOptionalParams,
  ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseNextResponse
} from "../models";

/**
 * Class representing a ManagedDatabaseSensitivityLabels.
 */
export class ManagedDatabaseSensitivityLabels {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class ManagedDatabaseSensitivityLabels class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Gets the sensitivity label of a given column
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param databaseName The name of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param schemaName The name of the schema.
   * @param tableName The name of the table.
   * @param columnName The name of the column.
   * @param sensitivityLabelSource The source of the sensitivity label.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    databaseName: string,
    managedInstanceName: string,
    schemaName: string,
    tableName: string,
    columnName: string,
    sensitivityLabelSource: SensitivityLabelSource,
    options?: coreHttp.OperationOptions
  ): Promise<ManagedDatabaseSensitivityLabelsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        databaseName,
        managedInstanceName,
        schemaName,
        tableName,
        columnName,
        sensitivityLabelSource,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ManagedDatabaseSensitivityLabelsGetResponse>;
  }

  /**
   * Creates or updates the sensitivity label of a given column
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param databaseName The name of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param schemaName The name of the schema.
   * @param tableName The name of the table.
   * @param columnName The name of the column.
   * @param parameters The column sensitivity label resource.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    databaseName: string,
    managedInstanceName: string,
    schemaName: string,
    tableName: string,
    columnName: string,
    parameters: SensitivityLabel,
    options?: coreHttp.OperationOptions
  ): Promise<ManagedDatabaseSensitivityLabelsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        databaseName,
        managedInstanceName,
        schemaName,
        tableName,
        columnName,
        parameters,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<ManagedDatabaseSensitivityLabelsCreateOrUpdateResponse>;
  }

  /**
   * Deletes the sensitivity label of a given column
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param databaseName The name of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param schemaName The name of the schema.
   * @param tableName The name of the table.
   * @param columnName The name of the column.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    databaseName: string,
    managedInstanceName: string,
    schemaName: string,
    tableName: string,
    columnName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        databaseName,
        managedInstanceName,
        schemaName,
        tableName,
        columnName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Disables sensitivity recommendations on a given column
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param databaseName The name of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param schemaName The name of the schema.
   * @param tableName The name of the table.
   * @param columnName The name of the column.
   * @param options The options parameters.
   */
  disableRecommendation(
    resourceGroupName: string,
    databaseName: string,
    managedInstanceName: string,
    schemaName: string,
    tableName: string,
    columnName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        databaseName,
        managedInstanceName,
        schemaName,
        tableName,
        columnName,
        options: operationOptions
      },
      disableRecommendationOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Enables sensitivity recommendations on a given column (recommendations are enabled by default on all
   * columns)
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param databaseName The name of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param schemaName The name of the schema.
   * @param tableName The name of the table.
   * @param columnName The name of the column.
   * @param options The options parameters.
   */
  enableRecommendation(
    resourceGroupName: string,
    databaseName: string,
    managedInstanceName: string,
    schemaName: string,
    tableName: string,
    columnName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        databaseName,
        managedInstanceName,
        schemaName,
        tableName,
        columnName,
        options: operationOptions
      },
      enableRecommendationOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets the sensitivity labels of a given database
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param databaseName The name of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param options The options parameters.
   */
  listCurrentByDatabase(
    resourceGroupName: string,
    databaseName: string,
    managedInstanceName: string,
    options?: ManagedDatabaseSensitivityLabelsListCurrentByDatabaseOptionalParams
  ): Promise<ManagedDatabaseSensitivityLabelsListCurrentByDatabaseResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        databaseName,
        managedInstanceName,
        options: operationOptions
      },
      listCurrentByDatabaseOperationSpec
    ) as Promise<ManagedDatabaseSensitivityLabelsListCurrentByDatabaseResponse>;
  }

  /**
   * Gets the sensitivity labels of a given database
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param databaseName The name of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param options The options parameters.
   */
  listRecommendedByDatabase(
    resourceGroupName: string,
    databaseName: string,
    managedInstanceName: string,
    options?: ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseOptionalParams
  ): Promise<
    ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        databaseName,
        managedInstanceName,
        options: operationOptions
      },
      listRecommendedByDatabaseOperationSpec
    ) as Promise<
      ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseResponse
    >;
  }

  /**
   * ListCurrentByDatabaseNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param databaseName The name of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param nextLink The nextLink from the previous successful call to the ListCurrentByDatabase method.
   * @param options The options parameters.
   */
  listCurrentByDatabaseNext(
    resourceGroupName: string,
    databaseName: string,
    managedInstanceName: string,
    nextLink: string,
    options?: ManagedDatabaseSensitivityLabelsListCurrentByDatabaseNextOptionalParams
  ): Promise<
    ManagedDatabaseSensitivityLabelsListCurrentByDatabaseNextResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        databaseName,
        managedInstanceName,
        nextLink,
        options: operationOptions
      },
      listCurrentByDatabaseNextOperationSpec
    ) as Promise<
      ManagedDatabaseSensitivityLabelsListCurrentByDatabaseNextResponse
    >;
  }

  /**
   * ListRecommendedByDatabaseNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param databaseName The name of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param nextLink The nextLink from the previous successful call to the ListRecommendedByDatabase
   *                 method.
   * @param options The options parameters.
   */
  listRecommendedByDatabaseNext(
    resourceGroupName: string,
    databaseName: string,
    managedInstanceName: string,
    nextLink: string,
    options?: ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseNextOptionalParams
  ): Promise<
    ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseNextResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        databaseName,
        managedInstanceName,
        nextLink,
        options: operationOptions
      },
      listRecommendedByDatabaseNextOperationSpec
    ) as Promise<
      ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseNextResponse
    >;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SensitivityLabel
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName2,
    Parameters.managedInstanceName,
    Parameters.schemaName,
    Parameters.tableName,
    Parameters.columnName,
    Parameters.sensitivityLabelSource1
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SensitivityLabel
    },
    201: {
      bodyMapper: Mappers.SensitivityLabel
    },
    default: {}
  },
  requestBody: Parameters.parameters48,
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName2,
    Parameters.managedInstanceName,
    Parameters.schemaName,
    Parameters.tableName,
    Parameters.columnName,
    Parameters.sensitivityLabelSource2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}",
  httpMethod: "DELETE",
  responses: { 200: {}, default: {} },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName2,
    Parameters.managedInstanceName,
    Parameters.schemaName,
    Parameters.tableName,
    Parameters.columnName,
    Parameters.sensitivityLabelSource2
  ],
  serializer
};
const disableRecommendationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}/disable",
  httpMethod: "POST",
  responses: { 200: {}, default: {} },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName2,
    Parameters.managedInstanceName,
    Parameters.schemaName,
    Parameters.tableName,
    Parameters.columnName,
    Parameters.sensitivityLabelSource
  ],
  serializer
};
const enableRecommendationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}/enable",
  httpMethod: "POST",
  responses: { 200: {}, default: {} },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName2,
    Parameters.managedInstanceName,
    Parameters.schemaName,
    Parameters.tableName,
    Parameters.columnName,
    Parameters.sensitivityLabelSource
  ],
  serializer
};
const listCurrentByDatabaseOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/currentSensitivityLabels",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SensitivityLabelListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion2, Parameters.filter1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName2,
    Parameters.managedInstanceName
  ],
  serializer
};
const listRecommendedByDatabaseOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/recommendedSensitivityLabels",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SensitivityLabelListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.filter1,
    Parameters.includeDisabledRecommendations,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName2,
    Parameters.managedInstanceName
  ],
  serializer
};
const listCurrentByDatabaseNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SensitivityLabelListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion2, Parameters.filter1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName2,
    Parameters.managedInstanceName,
    Parameters.nextLink22
  ],
  serializer
};
const listRecommendedByDatabaseNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SensitivityLabelListResult
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.filter1,
    Parameters.includeDisabledRecommendations,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.databaseName2,
    Parameters.managedInstanceName,
    Parameters.nextLink23
  ],
  serializer
};
