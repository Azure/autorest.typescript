/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureBridgeAdminClient } from "../azureBridgeAdminClient";
import {
  ActivationsListResponse,
  ActivationsGetResponse,
  Activation,
  ActivationsCreateOrUpdateResponse,
  ActivationsDeleteResponse,
  ActivationsListNextResponse
} from "../models";

/**
 * Class representing a Activations.
 */
export class Activations {
  private readonly client: AzureBridgeAdminClient;

  /**
   * Initialize a new instance of the class Activations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureBridgeAdminClient) {
    this.client = client;
  }

  /**
   * Returns the list of activations.
   * @param resourceGroup The resource group the resource is located under.
   * @param options The options parameters.
   */
  list(
    resourceGroup: string,
    options?: coreHttp.OperationOptions
  ): Promise<ActivationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, options: operationOptions },
      listOperationSpec
    ) as Promise<ActivationsListResponse>;
  }

  /**
   * Returns activation name.
   * @param resourceGroup The resource group the resource is located under.
   * @param activationName Name of the activation.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    activationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ActivationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, activationName, options: operationOptions },
      getOperationSpec
    ) as Promise<ActivationsGetResponse>;
  }

  /**
   * Create a new activation.
   * @param resourceGroup The resource group the resource is located under.
   * @param activationName Name of the activation.
   * @param activation new activation.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroup: string,
    activationName: string,
    activation: Activation,
    options?: coreHttp.OperationOptions
  ): Promise<ActivationsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, activationName, activation, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<ActivationsCreateOrUpdateResponse>;
  }

  /**
   * Delete an activation.
   * @param resourceGroup The resource group the resource is located under.
   * @param activationName Name of the activation.
   * @param options The options parameters.
   */
  delete(
    resourceGroup: string,
    activationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ActivationsDeleteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, activationName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<ActivationsDeleteResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroup The resource group the resource is located under.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroup: string,
    options?: coreHttp.OperationOptions
  ): Promise<ActivationsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroup, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ActivationsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ActivationResourcesPage
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ActivationResource
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.activationName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ActivationResource
    }
  },
  requestBody: Parameters.activation,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.activationName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.ActivationResource
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.activationName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ActivationResourcesPage
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  serializer
};
