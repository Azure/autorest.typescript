/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureBridgeAdminClient } from "../azureBridgeAdminClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ProductsListResponse,
  ProductsGetResponse,
  ProductsDownloadResponse,
  ProductsListNextResponse
} from "../models";

/**
 * Class representing a Products.
 */
export class Products {
  private readonly client: AzureBridgeAdminClient;

  /**
   * Initialize a new instance of the class Products class.
   * @param client Reference to the service client
   */
  constructor(client: AzureBridgeAdminClient) {
    this.client = client;
  }

  /**
   * Return product name.
   * @param resourceGroup The resource group the resource is located under.
   * @param activationName Name of the activation.
   * @param options The options parameters.
   */
  list(
    resourceGroup: string,
    activationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProductsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, activationName, options: operationOptions },
      listOperationSpec
    ) as Promise<ProductsListResponse>;
  }

  /**
   * Return product name.
   * @param resourceGroup The resource group the resource is located under.
   * @param activationName Name of the activation.
   * @param productName Name of the product.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    activationName: string,
    productName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProductsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, activationName, productName, options: operationOptions },
      getOperationSpec
    ) as Promise<ProductsGetResponse>;
  }

  /**
   * Downloads a product from azure marketplace.
   * @param resourceGroup The resource group the resource is located under.
   * @param activationName Name of the activation.
   * @param productName Name of the product.
   * @param options The options parameters.
   */
  async download(
    resourceGroup: string,
    activationName: string,
    productName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ProductsDownloadResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "location"
    );

    const args: coreHttp.OperationArguments = {
      resourceGroup,
      activationName,
      productName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ProductsDownloadResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      downloadOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: downloadOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroup The resource group the resource is located under.
   * @param activationName Name of the activation.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroup: string,
    activationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProductsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroup, activationName, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ProductsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}/products",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResourcesPage
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.activationName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}/products/{productName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResource
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.activationName,
    Parameters.productName
  ],
  serializer
};
const downloadOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}/products/{productName}/download",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadedProductResource
    },
    201: {
      bodyMapper: Mappers.DownloadedProductResource
    },
    202: {
      bodyMapper: Mappers.DownloadedProductResource
    },
    204: {
      bodyMapper: Mappers.DownloadedProductResource
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.activationName,
    Parameters.productName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductResourcesPage
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.activationName
  ],
  serializer
};
