/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureContainerRegistry } from "../azureContainerRegistry";
import {
  RepositoryGetListOptionalParams,
  RepositoryGetListResponse,
  RepositoryGetAttributesResponse,
  RepositoryDeleteResponse,
  RepositoryUpdateAttributesOptionalParams
} from "../models";

/**
 * Class representing a Repository.
 */
export class Repository {
  private readonly client: AzureContainerRegistry;

  /**
   * Initialize a new instance of the class Repository class.
   * @param client Reference to the service client
   */
  constructor(client: AzureContainerRegistry) {
    this.client = client;
  }

  /**
   * List repositories
   * @param options The options parameters.
   */
  getList(
    options?: RepositoryGetListOptionalParams
  ): Promise<RepositoryGetListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getListOperationSpec
    ) as Promise<RepositoryGetListResponse>;
  }

  /**
   * Get repository attributes
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  getAttributes(
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<RepositoryGetAttributesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { name, options: operationOptions },
      getAttributesOperationSpec
    ) as Promise<RepositoryGetAttributesResponse>;
  }

  /**
   * Delete the repository identified by `name`
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  delete(
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<RepositoryDeleteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { name, options: operationOptions },
      deleteOperationSpec
    ) as Promise<RepositoryDeleteResponse>;
  }

  /**
   * Update the attribute identified by `name` where `reference` is the name of the repository.
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  updateAttributes(
    name: string,
    options?: RepositoryUpdateAttributesOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { name, options: operationOptions },
      updateAttributesOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getListOperationSpec: coreHttp.OperationSpec = {
  path: "/acr/v1/_catalog",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Repositories,
      headersMapper: Mappers.RepositoryGetListHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  queryParameters: [Parameters.last, Parameters.n],
  urlParameters: [Parameters.url],
  serializer
};
const getAttributesOperationSpec: coreHttp.OperationSpec = {
  path: "/acr/v1/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RepositoryAttributes
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/acr/v1/{name}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.DeletedRepository
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name],
  serializer
};
const updateAttributesOperationSpec: coreHttp.OperationSpec = {
  path: "/acr/v1/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  requestBody: Parameters.value,
  urlParameters: [Parameters.url, Parameters.name],
  headerParameters: [Parameters.contentType1],
  serializer
};
