/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureContainerRegistry } from "../azureContainerRegistry";
import {
  ManifestsGetOptionalParams,
  ManifestsGetResponse,
  Manifest,
  ManifestsCreateResponse,
  ManifestsGetListOptionalParams,
  ManifestsGetListResponse,
  ManifestsGetAttributesResponse,
  ManifestsUpdateAttributesOptionalParams
} from "../models";

/**
 * Class representing a Manifests.
 */
export class Manifests {
  private readonly client: AzureContainerRegistry;

  /**
   * Initialize a new instance of the class Manifests class.
   * @param client Reference to the service client
   */
  constructor(client: AzureContainerRegistry) {
    this.client = client;
  }

  /**
   * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
   * @param name Name of the image (including the namespace)
   * @param reference A tag or a digest, pointing to a specific image
   * @param options The options parameters.
   */
  get(
    name: string,
    reference: string,
    options?: ManifestsGetOptionalParams
  ): Promise<ManifestsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { name, reference, options: operationOptions },
      getOperationSpec
    ) as Promise<ManifestsGetResponse>;
  }

  /**
   * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
   * @param name Name of the image (including the namespace)
   * @param reference A tag or a digest, pointing to a specific image
   * @param payload Manifest body, can take v1 or v2 values depending on accept header
   * @param options The options parameters.
   */
  create(
    name: string,
    reference: string,
    payload: Manifest,
    options?: coreHttp.OperationOptions
  ): Promise<ManifestsCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { name, reference, payload, options: operationOptions },
      createOperationSpec
    ) as Promise<ManifestsCreateResponse>;
  }

  /**
   * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted
   * by `digest`.
   * @param name Name of the image (including the namespace)
   * @param reference A tag or a digest, pointing to a specific image
   * @param options The options parameters.
   */
  delete(
    name: string,
    reference: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { name, reference, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * List manifests of a repository
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  getList(
    name: string,
    options?: ManifestsGetListOptionalParams
  ): Promise<ManifestsGetListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { name, options: operationOptions },
      getListOperationSpec
    ) as Promise<ManifestsGetListResponse>;
  }

  /**
   * Get manifest attributes
   * @param name Name of the image (including the namespace)
   * @param reference A tag or a digest, pointing to a specific image
   * @param options The options parameters.
   */
  getAttributes(
    name: string,
    reference: string,
    options?: coreHttp.OperationOptions
  ): Promise<ManifestsGetAttributesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { name, reference, options: operationOptions },
      getAttributesOperationSpec
    ) as Promise<ManifestsGetAttributesResponse>;
  }

  /**
   * Update attributes of a manifest
   * @param name Name of the image (including the namespace)
   * @param reference A tag or a digest, pointing to a specific image
   * @param options The options parameters.
   */
  updateAttributes(
    name: string,
    reference: string,
    options?: ManifestsUpdateAttributesOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { name, reference, options: operationOptions },
      updateAttributesOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/v2/{name}/manifests/{reference}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManifestWrapper
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path: "/v2/{name}/manifests/{reference}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" },
      headersMapper: Mappers.ManifestsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  requestBody: Parameters.payload,
  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/v2/{name}/manifests/{reference}",
  httpMethod: "DELETE",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],
  serializer
};
const getListOperationSpec: coreHttp.OperationSpec = {
  path: "/acr/v1/{name}/_manifests",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AcrManifests
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  queryParameters: [Parameters.last, Parameters.n, Parameters.orderby],
  urlParameters: [Parameters.url, Parameters.name],
  serializer
};
const getAttributesOperationSpec: coreHttp.OperationSpec = {
  path: "/acr/v1/{name}/_manifests/{reference}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManifestAttributes
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],
  serializer
};
const updateAttributesOperationSpec: coreHttp.OperationSpec = {
  path: "/acr/v1/{name}/_manifests/{reference}",
  httpMethod: "PATCH",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  requestBody: Parameters.value,
  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],
  headerParameters: [Parameters.contentType1],
  serializer
};
