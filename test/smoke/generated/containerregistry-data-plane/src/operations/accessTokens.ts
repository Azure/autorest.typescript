/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureContainerRegistry } from "../azureContainerRegistry";
import {
  AccessTokensGetOptionalParams,
  AccessTokensGetResponse,
  AccessTokensGetFromLoginResponse
} from "../models";

/**
 * Class representing a AccessTokens.
 */
export class AccessTokens {
  private readonly client: AzureContainerRegistry;

  /**
   * Initialize a new instance of the class AccessTokens class.
   * @param client Reference to the service client
   */
  constructor(client: AzureContainerRegistry) {
    this.client = client;
  }

  /**
   * Exchange ACR Refresh token for an ACR Access Token
   * @param options The options parameters.
   */
  get(
    options?: AccessTokensGetOptionalParams
  ): Promise<AccessTokensGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getOperationSpec
    ) as Promise<AccessTokensGetResponse>;
  }

  /**
   * Exchange Username, Password and Scope an ACR Access Token
   * @param service Indicates the name of your Azure container registry.
   * @param scope Expected to be a valid scope, and can be specified more than once for multiple scope
   *              requests. You can obtain this from the Www-Authenticate response header from the challenge.
   * @param options The options parameters.
   */
  getFromLogin(
    service: string,
    scope: string,
    options?: coreHttp.OperationOptions
  ): Promise<AccessTokensGetFromLoginResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { service, scope, options: operationOptions },
      getFromLoginOperationSpec
    ) as Promise<AccessTokensGetFromLoginResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/oauth2/token",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessToken
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  requestBody: Parameters.refreshToken,
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.contentType3],
  serializer
};
const getFromLoginOperationSpec: coreHttp.OperationSpec = {
  path: "/oauth2/token",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessToken
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  queryParameters: [Parameters.service, Parameters.scope],
  urlParameters: [Parameters.url],
  serializer
};
