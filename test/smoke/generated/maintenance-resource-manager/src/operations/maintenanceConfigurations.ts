/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MaintenanceManagementClient } from "../maintenanceManagementClient";
import {
  MaintenanceConfigurationsGetResponse,
  MaintenanceConfiguration,
  MaintenanceConfigurationsCreateOrUpdateResponse,
  MaintenanceConfigurationsDeleteResponse,
  MaintenanceConfigurationsUpdateResponse,
  MaintenanceConfigurationsListResponse
} from "../models";

/**
 * Class representing a MaintenanceConfigurations.
 */
export class MaintenanceConfigurations {
  private readonly client: MaintenanceManagementClient;

  /**
   * Initialize a new instance of the class MaintenanceConfigurations class.
   * @param client Reference to the service client
   */
  constructor(client: MaintenanceManagementClient) {
    this.client = client;
  }

  /**
   * Get Configuration record
   * @param resourceGroupName Resource Group Name
   * @param resourceName Resource Identifier
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<MaintenanceConfigurationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options: operationOptions },
      getOperationSpec
    ) as Promise<MaintenanceConfigurationsGetResponse>;
  }

  /**
   * Create or Update configuration record
   * @param resourceGroupName Resource Group Name
   * @param resourceName Resource Identifier
   * @param configuration The configuration
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    resourceName: string,
    configuration: MaintenanceConfiguration,
    options?: coreHttp.OperationOptions
  ): Promise<MaintenanceConfigurationsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        configuration,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<MaintenanceConfigurationsCreateOrUpdateResponse>;
  }

  /**
   * Delete Configuration record
   * @param resourceGroupName Resource Group Name
   * @param resourceName Resource Identifier
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    resourceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<MaintenanceConfigurationsDeleteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<MaintenanceConfigurationsDeleteResponse>;
  }

  /**
   * Patch configuration record
   * @param resourceGroupName Resource Group Name
   * @param resourceName Resource Identifier
   * @param configuration The configuration
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    resourceName: string,
    configuration: MaintenanceConfiguration,
    options?: coreHttp.OperationOptions
  ): Promise<MaintenanceConfigurationsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        configuration,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<MaintenanceConfigurationsUpdateResponse>;
  }

  /**
   * Get Configuration records within a subscription
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<MaintenanceConfigurationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<MaintenanceConfigurationsListResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MaintenanceConfiguration
    },
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.resourceName1
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MaintenanceConfiguration
    },
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  requestBody: Parameters.configuration,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.resourceName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.MaintenanceConfiguration
    },
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.resourceName1
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MaintenanceConfiguration
    },
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  requestBody: Parameters.configuration,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.resourceName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Maintenance/maintenanceConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListMaintenanceConfigurationsResult
    },
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
