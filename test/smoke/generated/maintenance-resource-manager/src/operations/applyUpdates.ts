/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MaintenanceManagementClient } from "../maintenanceManagementClient";
import {
  ApplyUpdatesGetParentResponse,
  ApplyUpdatesGetResponse,
  ApplyUpdatesCreateOrUpdateParentResponse,
  ApplyUpdatesCreateOrUpdateResponse
} from "../models";

/**
 * Class representing a ApplyUpdates.
 */
export class ApplyUpdates {
  private readonly client: MaintenanceManagementClient;

  /**
   * Initialize a new instance of the class ApplyUpdates class.
   * @param client Reference to the service client
   */
  constructor(client: MaintenanceManagementClient) {
    this.client = client;
  }

  /**
   * Track maintenance updates to resource with parent
   * @param resourceGroupName Resource group name
   * @param resourceParentType Resource parent type
   * @param resourceParentName Resource parent identifier
   * @param providerName Resource provider name
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param applyUpdateName applyUpdate Id
   * @param options The options parameters.
   */
  getParent(
    resourceGroupName: string,
    resourceParentType: string,
    resourceParentName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    applyUpdateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplyUpdatesGetParentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceParentType,
        resourceParentName,
        providerName,
        resourceType,
        resourceName,
        applyUpdateName,
        options: operationOptions
      },
      getParentOperationSpec
    ) as Promise<ApplyUpdatesGetParentResponse>;
  }

  /**
   * Track maintenance updates to resource
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param applyUpdateName applyUpdate Id
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    applyUpdateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplyUpdatesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerName,
        resourceType,
        resourceName,
        applyUpdateName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ApplyUpdatesGetResponse>;
  }

  /**
   * Apply maintenance updates to resource with parent
   * @param resourceGroupName Resource group name
   * @param resourceParentType Resource parent type
   * @param resourceParentName Resource parent identifier
   * @param providerName Resource provider name
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param options The options parameters.
   */
  createOrUpdateParent(
    resourceGroupName: string,
    resourceParentType: string,
    resourceParentName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplyUpdatesCreateOrUpdateParentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceParentType,
        resourceParentName,
        providerName,
        resourceType,
        resourceName,
        options: operationOptions
      },
      createOrUpdateParentOperationSpec
    ) as Promise<ApplyUpdatesCreateOrUpdateParentResponse>;
  }

  /**
   * Apply maintenance updates to resource
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplyUpdatesCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerName,
        resourceType,
        resourceName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<ApplyUpdatesCreateOrUpdateResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getParentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/applyUpdates/{applyUpdateName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplyUpdate
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceParentType,
    Parameters.resourceParentName,
    Parameters.providerName,
    Parameters.resourceType,
    Parameters.resourceName,
    Parameters.applyUpdateName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/applyUpdates/{applyUpdateName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplyUpdate
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceType,
    Parameters.resourceName,
    Parameters.applyUpdateName
  ],
  serializer
};
const createOrUpdateParentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/applyUpdates/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ApplyUpdate
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceParentType,
    Parameters.resourceParentName,
    Parameters.providerName,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/applyUpdates/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ApplyUpdate
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  serializer
};
