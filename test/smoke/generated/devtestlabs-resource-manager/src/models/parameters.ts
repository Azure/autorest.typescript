/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2018-09-15",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const top: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const orderby: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "orderby"],
  mapper: {
    serializedName: "$orderby",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const lab: coreHttp.OperationParameter = {
  parameterPath: "lab",
  mapper: Mappers.Lab
};

export const lab1: coreHttp.OperationParameter = {
  parameterPath: "lab",
  mapper: Mappers.LabFragment
};

export const labVirtualMachineCreationParameter: coreHttp.OperationParameter = {
  parameterPath: "labVirtualMachineCreationParameter",
  mapper: Mappers.LabVirtualMachineCreationParameter
};

export const exportResourceUsageParameters: coreHttp.OperationParameter = {
  parameterPath: "exportResourceUsageParameters",
  mapper: Mappers.ExportResourceUsageParameters
};

export const generateUploadUriParameter: coreHttp.OperationParameter = {
  parameterPath: "generateUploadUriParameter",
  mapper: Mappers.GenerateUploadUriParameter
};

export const importLabVirtualMachineRequest: coreHttp.OperationParameter = {
  parameterPath: "importLabVirtualMachineRequest",
  mapper: Mappers.ImportLabVirtualMachineRequest
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const locationName: coreHttp.OperationURLParameter = {
  parameterPath: "locationName",
  mapper: {
    serializedName: "locationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name1: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const name2: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const schedule: coreHttp.OperationParameter = {
  parameterPath: "schedule",
  mapper: Mappers.Schedule
};

export const schedule1: coreHttp.OperationParameter = {
  parameterPath: "schedule",
  mapper: Mappers.ScheduleFragment
};

export const retargetScheduleProperties: coreHttp.OperationParameter = {
  parameterPath: "retargetScheduleProperties",
  mapper: Mappers.RetargetScheduleProperties
};

export const labName: coreHttp.OperationURLParameter = {
  parameterPath: "labName",
  mapper: {
    serializedName: "labName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const name3: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const artifactSource: coreHttp.OperationParameter = {
  parameterPath: "artifactSource",
  mapper: Mappers.ArtifactSource
};

export const artifactSource1: coreHttp.OperationParameter = {
  parameterPath: "artifactSource",
  mapper: Mappers.ArtifactSourceFragment
};

export const artifactSourceName: coreHttp.OperationURLParameter = {
  parameterPath: "artifactSourceName",
  mapper: {
    serializedName: "artifactSourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name4: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand3: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const name5: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const generateArmTemplateRequest: coreHttp.OperationParameter = {
  parameterPath: "generateArmTemplateRequest",
  mapper: Mappers.GenerateArmTemplateRequest
};

export const name6: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand4: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const labCost: coreHttp.OperationParameter = {
  parameterPath: "labCost",
  mapper: Mappers.LabCost
};

export const expand5: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const name7: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const customImage: coreHttp.OperationParameter = {
  parameterPath: "customImage",
  mapper: Mappers.CustomImage
};

export const customImage1: coreHttp.OperationParameter = {
  parameterPath: "customImage",
  mapper: Mappers.CustomImageFragment
};

export const expand6: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const name8: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const formula: coreHttp.OperationParameter = {
  parameterPath: "formula",
  mapper: Mappers.Formula
};

export const formula1: coreHttp.OperationParameter = {
  parameterPath: "formula",
  mapper: Mappers.FormulaFragment
};

export const expand7: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const expand8: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const name9: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const notificationChannel: coreHttp.OperationParameter = {
  parameterPath: "notificationChannel",
  mapper: Mappers.NotificationChannel
};

export const notificationChannel1: coreHttp.OperationParameter = {
  parameterPath: "notificationChannel",
  mapper: Mappers.NotificationChannelFragment
};

export const notifyParameters: coreHttp.OperationParameter = {
  parameterPath: "notifyParameters",
  mapper: Mappers.NotifyParameters
};

export const evaluatePoliciesRequest: coreHttp.OperationParameter = {
  parameterPath: "evaluatePoliciesRequest",
  mapper: Mappers.EvaluatePoliciesRequest
};

export const name10: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const policySetName: coreHttp.OperationURLParameter = {
  parameterPath: "policySetName",
  mapper: {
    serializedName: "policySetName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name11: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const policy: coreHttp.OperationParameter = {
  parameterPath: "policy",
  mapper: Mappers.Policy
};

export const policy1: coreHttp.OperationParameter = {
  parameterPath: "policy",
  mapper: Mappers.PolicyFragment
};

export const nextLink4: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const name12: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceRunner: coreHttp.OperationParameter = {
  parameterPath: "serviceRunner",
  mapper: Mappers.ServiceRunner
};

export const expand9: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const name13: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const user: coreHttp.OperationParameter = {
  parameterPath: "user",
  mapper: Mappers.User
};

export const user1: coreHttp.OperationParameter = {
  parameterPath: "user",
  mapper: Mappers.UserFragment
};

export const userName: coreHttp.OperationURLParameter = {
  parameterPath: "userName",
  mapper: {
    serializedName: "userName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand10: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const name14: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const disk: coreHttp.OperationParameter = {
  parameterPath: "disk",
  mapper: Mappers.Disk
};

export const disk1: coreHttp.OperationParameter = {
  parameterPath: "disk",
  mapper: Mappers.DiskFragment
};

export const attachDiskProperties: coreHttp.OperationParameter = {
  parameterPath: "attachDiskProperties",
  mapper: Mappers.AttachDiskProperties
};

export const detachDiskProperties: coreHttp.OperationParameter = {
  parameterPath: "detachDiskProperties",
  mapper: Mappers.DetachDiskProperties
};

export const expand11: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const name15: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const dtlEnvironment: coreHttp.OperationParameter = {
  parameterPath: "dtlEnvironment",
  mapper: Mappers.DtlEnvironment
};

export const dtlEnvironment1: coreHttp.OperationParameter = {
  parameterPath: "dtlEnvironment",
  mapper: Mappers.DtlEnvironmentFragment
};

export const expand12: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const name16: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const secret: coreHttp.OperationParameter = {
  parameterPath: "secret",
  mapper: Mappers.Secret
};

export const secret1: coreHttp.OperationParameter = {
  parameterPath: "secret",
  mapper: Mappers.SecretFragment
};

export const expand13: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const name17: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceFabric: coreHttp.OperationParameter = {
  parameterPath: "serviceFabric",
  mapper: Mappers.ServiceFabric
};

export const serviceFabric1: coreHttp.OperationParameter = {
  parameterPath: "serviceFabric",
  mapper: Mappers.ServiceFabricFragment
};

export const serviceFabricName: coreHttp.OperationURLParameter = {
  parameterPath: "serviceFabricName",
  mapper: {
    serializedName: "serviceFabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand14: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const name18: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const labVirtualMachine: coreHttp.OperationParameter = {
  parameterPath: "labVirtualMachine",
  mapper: Mappers.LabVirtualMachine
};

export const labVirtualMachine1: coreHttp.OperationParameter = {
  parameterPath: "labVirtualMachine",
  mapper: Mappers.LabVirtualMachineFragment
};

export const dataDiskProperties: coreHttp.OperationParameter = {
  parameterPath: "dataDiskProperties",
  mapper: Mappers.DataDiskProperties
};

export const applyArtifactsRequest: coreHttp.OperationParameter = {
  parameterPath: "applyArtifactsRequest",
  mapper: Mappers.ApplyArtifactsRequest
};

export const detachDataDiskProperties: coreHttp.OperationParameter = {
  parameterPath: "detachDataDiskProperties",
  mapper: Mappers.DetachDataDiskProperties
};

export const resizeLabVirtualMachineProperties: coreHttp.OperationParameter = {
  parameterPath: "resizeLabVirtualMachineProperties",
  mapper: Mappers.ResizeLabVirtualMachineProperties
};

export const virtualMachineName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualMachineName",
  mapper: {
    serializedName: "virtualMachineName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand15: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const name19: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualNetwork: coreHttp.OperationParameter = {
  parameterPath: "virtualNetwork",
  mapper: Mappers.VirtualNetwork
};

export const virtualNetwork1: coreHttp.OperationParameter = {
  parameterPath: "virtualNetwork",
  mapper: Mappers.VirtualNetworkFragment
};
