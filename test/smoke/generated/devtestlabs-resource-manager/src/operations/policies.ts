/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DevTestLabsClient } from "../devTestLabsClient";
import {
  PoliciesListOptionalParams,
  PoliciesListResponse,
  PoliciesGetOptionalParams,
  PoliciesGetResponse,
  Policy,
  PoliciesCreateOrUpdateResponse,
  PolicyFragment,
  PoliciesUpdateResponse,
  PoliciesListNextOptionalParams,
  PoliciesListNextResponse
} from "../models";

/**
 * Class representing a Policies.
 */
export class Policies {
  private readonly client: DevTestLabsClient;

  /**
   * Initialize a new instance of the class Policies class.
   * @param client Reference to the service client
   */
  constructor(client: DevTestLabsClient) {
    this.client = client;
  }

  /**
   * List policies in a given policy set.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    labName: string,
    policySetName: string,
    options?: PoliciesListOptionalParams
  ): Promise<PoliciesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, labName, policySetName, options: operationOptions },
      listOperationSpec
    ) as Promise<PoliciesListResponse>;
  }

  /**
   * Get policy.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    labName: string,
    policySetName: string,
    name: string,
    options?: PoliciesGetOptionalParams
  ): Promise<PoliciesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        policySetName,
        name,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<PoliciesGetResponse>;
  }

  /**
   * Create or replace an existing policy.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param policy A Policy.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    labName: string,
    policySetName: string,
    name: string,
    policy: Policy,
    options?: coreHttp.OperationOptions
  ): Promise<PoliciesCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        policySetName,
        name,
        policy,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<PoliciesCreateOrUpdateResponse>;
  }

  /**
   * Delete policy.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    labName: string,
    policySetName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        policySetName,
        name,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Allows modifying tags of policies. All other properties will be ignored.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param policy A Policy.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    labName: string,
    policySetName: string,
    name: string,
    policy: PolicyFragment,
    options?: coreHttp.OperationOptions
  ): Promise<PoliciesUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        policySetName,
        name,
        policy,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<PoliciesUpdateResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroupName: string,
    labName: string,
    policySetName: string,
    options?: PoliciesListNextOptionalParams
  ): Promise<PoliciesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        nextLink,
        resourceGroupName,
        labName,
        policySetName,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<PoliciesListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.expand6
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.policySetName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Policy
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand6],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.policySetName,
    Parameters.name11
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Policy
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.policy,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.policySetName,
    Parameters.name11
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.policySetName,
    Parameters.name11
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Policy
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.policy1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.policySetName,
    Parameters.name11
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.expand6
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.policySetName
  ],
  serializer
};
