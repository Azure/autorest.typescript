/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DevTestLabsClient } from "../devTestLabsClient";
import {
  EvaluatePoliciesRequest,
  PolicySetsEvaluatePoliciesResponse
} from "../models";

/**
 * Class representing a PolicySets.
 */
export class PolicySets {
  private readonly client: DevTestLabsClient;

  /**
   * Initialize a new instance of the class PolicySets class.
   * @param client Reference to the service client
   */
  constructor(client: DevTestLabsClient) {
    this.client = client;
  }

  /**
   * Evaluates lab policy.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param evaluatePoliciesRequest Request body for evaluating a policy set.
   * @param name The name of the policy set.
   * @param options The options parameters.
   */
  evaluatePolicies(
    resourceGroupName: string,
    labName: string,
    evaluatePoliciesRequest: EvaluatePoliciesRequest,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<PolicySetsEvaluatePoliciesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        evaluatePoliciesRequest,
        name,
        options: operationOptions
      },
      evaluatePoliciesOperationSpec
    ) as Promise<PolicySetsEvaluatePoliciesResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const evaluatePoliciesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{name}/evaluatePolicies",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EvaluatePoliciesResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.evaluatePoliciesRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name10
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
