/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DevTestLabsClient } from "../devTestLabsClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  LabsListBySubscriptionOptionalParams,
  LabsListBySubscriptionResponse,
  LabsListByResourceGroupOptionalParams,
  LabsListByResourceGroupResponse,
  LabsGetOptionalParams,
  LabsGetResponse,
  Lab,
  LabsCreateOrUpdateResponse,
  LabFragment,
  LabsUpdateResponse,
  LabVirtualMachineCreationParameter,
  ExportResourceUsageParameters,
  GenerateUploadUriParameter,
  LabsGenerateUploadUriResponse,
  ImportLabVirtualMachineRequest,
  LabsListVhdsResponse,
  LabsListBySubscriptionNextOptionalParams,
  LabsListBySubscriptionNextResponse,
  LabsListByResourceGroupNextOptionalParams,
  LabsListByResourceGroupNextResponse,
  LabsListVhdsNextResponse
} from "../models";

/**
 * Class representing a Labs.
 */
export class Labs {
  private readonly client: DevTestLabsClient;

  /**
   * Initialize a new instance of the class Labs class.
   * @param client Reference to the service client
   */
  constructor(client: DevTestLabsClient) {
    this.client = client;
  }

  /**
   * List labs in a subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: LabsListBySubscriptionOptionalParams
  ): Promise<LabsListBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listBySubscriptionOperationSpec
    ) as Promise<LabsListBySubscriptionResponse>;
  }

  /**
   * List labs in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: LabsListByResourceGroupOptionalParams
  ): Promise<LabsListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<LabsListByResourceGroupResponse>;
  }

  /**
   * Get lab.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    name: string,
    options?: LabsGetOptionalParams
  ): Promise<LabsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getOperationSpec
    ) as Promise<LabsGetResponse>;
  }

  /**
   * Create or replace an existing lab. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param lab A lab.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    name: string,
    lab: Lab,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<LabsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      lab,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LabsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Delete lab. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Allows modifying tags of labs. All other properties will be ignored.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param lab A lab.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    name: string,
    lab: LabFragment,
    options?: coreHttp.OperationOptions
  ): Promise<LabsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, lab, options: operationOptions },
      updateOperationSpec
    ) as Promise<LabsUpdateResponse>;
  }

  /**
   * Claim a random claimable virtual machine in the lab. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param options The options parameters.
   */
  async claimAnyVm(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      claimAnyVmOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: claimAnyVmOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Create virtual machines in a lab. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
   * @param options The options parameters.
   */
  async createEnvironment(
    resourceGroupName: string,
    name: string,
    labVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      labVirtualMachineCreationParameter,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createEnvironmentOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createEnvironmentOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Exports the lab resource usage into a storage account This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param exportResourceUsageParameters The parameters of the export operation.
   * @param options The options parameters.
   */
  async exportResourceUsage(
    resourceGroupName: string,
    name: string,
    exportResourceUsageParameters: ExportResourceUsageParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      exportResourceUsageParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      exportResourceUsageOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: exportResourceUsageOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Generate a URI for uploading custom disk images to a Lab.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param generateUploadUriParameter Properties for generating an upload URI.
   * @param options The options parameters.
   */
  generateUploadUri(
    resourceGroupName: string,
    name: string,
    generateUploadUriParameter: GenerateUploadUriParameter,
    options?: coreHttp.OperationOptions
  ): Promise<LabsGenerateUploadUriResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        generateUploadUriParameter,
        options: operationOptions
      },
      generateUploadUriOperationSpec
    ) as Promise<LabsGenerateUploadUriResponse>;
  }

  /**
   * Import a virtual machine into a different lab. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param importLabVirtualMachineRequest This represents the payload required to import a virtual
   *                                       machine from a different lab into the current one
   * @param options The options parameters.
   */
  async importVirtualMachine(
    resourceGroupName: string,
    name: string,
    importLabVirtualMachineRequest: ImportLabVirtualMachineRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      importLabVirtualMachineRequest,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      importVirtualMachineOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: importVirtualMachineOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * List disk images available for custom image creation.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param options The options parameters.
   */
  listVhds(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LabsListVhdsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listVhdsOperationSpec
    ) as Promise<LabsListVhdsResponse>;
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  listBySubscriptionNext(
    nextLink: string,
    options?: LabsListBySubscriptionNextOptionalParams
  ): Promise<LabsListBySubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listBySubscriptionNextOperationSpec
    ) as Promise<LabsListBySubscriptionNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: LabsListByResourceGroupNextOptionalParams
  ): Promise<LabsListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<LabsListByResourceGroupNextResponse>;
  }

  /**
   * ListVhdsNext
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param nextLink The nextLink from the previous successful call to the ListVhds method.
   * @param options The options parameters.
   */
  listVhdsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<LabsListVhdsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listVhdsNextOperationSpec
    ) as Promise<LabsListVhdsNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/labs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LabList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LabList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Lab
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Lab
    },
    201: {
      bodyMapper: Mappers.Lab
    },
    202: {
      bodyMapper: Mappers.Lab
    },
    204: {
      bodyMapper: Mappers.Lab
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.lab,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Lab
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.lab1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const claimAnyVmOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/claimAnyVm",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const createEnvironmentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/createEnvironment",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.labVirtualMachineCreationParameter,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const exportResourceUsageOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/exportResourceUsage",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.exportResourceUsageParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const generateUploadUriOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/generateUploadUri",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GenerateUploadUriResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.generateUploadUriParameter,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const importVirtualMachineOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/importVirtualMachine",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.importLabVirtualMachineRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listVhdsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/listVhds",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LabVhdList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LabList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink1
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LabList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink2
  ],
  serializer
};
const listVhdsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LabVhdList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink3
  ],
  serializer
};
