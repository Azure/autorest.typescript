/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DevTestLabsClient } from "../devTestLabsClient";
import {
  ArtifactsListOptionalParams,
  ArtifactsListResponse,
  ArtifactsGetOptionalParams,
  ArtifactsGetResponse,
  GenerateArmTemplateRequest,
  ArtifactsGenerateArmTemplateResponse,
  ArtifactsListNextOptionalParams,
  ArtifactsListNextResponse
} from "../models";

/**
 * Class representing a Artifacts.
 */
export class Artifacts {
  private readonly client: DevTestLabsClient;

  /**
   * Initialize a new instance of the class Artifacts class.
   * @param client Reference to the service client
   */
  constructor(client: DevTestLabsClient) {
    this.client = client;
  }

  /**
   * List artifacts in a given artifact source.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param artifactSourceName The name of the artifact source.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    labName: string,
    artifactSourceName: string,
    options?: ArtifactsListOptionalParams
  ): Promise<ArtifactsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        artifactSourceName,
        options: operationOptions
      },
      listOperationSpec
    ) as Promise<ArtifactsListResponse>;
  }

  /**
   * Get artifact.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param artifactSourceName The name of the artifact source.
   * @param name The name of the artifact.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    labName: string,
    artifactSourceName: string,
    name: string,
    options?: ArtifactsGetOptionalParams
  ): Promise<ArtifactsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        artifactSourceName,
        name,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ArtifactsGetResponse>;
  }

  /**
   * Generates an ARM template for the given artifact, uploads the required files to a storage account,
   * and validates the generated artifact.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param artifactSourceName The name of the artifact source.
   * @param name The name of the artifact.
   * @param generateArmTemplateRequest Parameters for generating an ARM template for deploying artifacts.
   * @param options The options parameters.
   */
  generateArmTemplate(
    resourceGroupName: string,
    labName: string,
    artifactSourceName: string,
    name: string,
    generateArmTemplateRequest: GenerateArmTemplateRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ArtifactsGenerateArmTemplateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        artifactSourceName,
        name,
        generateArmTemplateRequest,
        options: operationOptions
      },
      generateArmTemplateOperationSpec
    ) as Promise<ArtifactsGenerateArmTemplateResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param artifactSourceName The name of the artifact source.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroupName: string,
    labName: string,
    artifactSourceName: string,
    options?: ArtifactsListNextOptionalParams
  ): Promise<ArtifactsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        nextLink,
        resourceGroupName,
        labName,
        artifactSourceName,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<ArtifactsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ArtifactList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.expand3
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.artifactSourceName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Artifact
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.artifactSourceName,
    Parameters.name5
  ],
  serializer
};
const generateArmTemplateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts/{name}/generateArmTemplate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ArmTemplateInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.generateArmTemplateRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.artifactSourceName,
    Parameters.name5
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ArtifactList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.expand3
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.artifactSourceName
  ],
  serializer
};
