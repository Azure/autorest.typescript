/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import { LROPoller, shouldDeserializeLRO } from "./lro";
import * as operations from "./operations";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { NetworkManagementClientContext } from "./networkManagementClientContext";
import {
  NetworkManagementClientOptionalParams,
  BastionShareableLinkListRequest,
  NetworkManagementClientPutBastionShareableLinkResponse,
  NetworkManagementClientGetBastionShareableLinkResponse,
  NetworkManagementClientGetActiveSessionsResponse,
  SessionIds,
  NetworkManagementClientDisconnectActiveSessionsResponse,
  NetworkManagementClientCheckDnsNameAvailabilityResponse,
  NetworkManagementClientSupportedSecurityProvidersResponse,
  VirtualWanVpnProfileParameters,
  NetworkManagementClientGeneratevirtualwanvpnserverconfigurationvpnprofileResponse,
  NetworkManagementClientPutBastionShareableLinkNextResponse,
  NetworkManagementClientGetBastionShareableLinkNextResponse,
  NetworkManagementClientGetActiveSessionsNextResponse,
  NetworkManagementClientDisconnectActiveSessionsNextResponse
} from "./models";

class NetworkManagementClient extends NetworkManagementClientContext {
  /**
   * Initializes a new instance of the NetworkManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure
   *                       subscription. The subscription ID forms part of the URI for every service call.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    subscriptionId: string,
    options?: NetworkManagementClientOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.applicationGateways = new operations.ApplicationGateways(this);
    this.applicationSecurityGroups = new operations.ApplicationSecurityGroups(
      this
    );
    this.availableDelegations = new operations.AvailableDelegations(this);
    this.availableResourceGroupDelegations = new operations.AvailableResourceGroupDelegations(
      this
    );
    this.availableServiceAliases = new operations.AvailableServiceAliases(this);
    this.azureFirewalls = new operations.AzureFirewalls(this);
    this.azureFirewallFqdnTags = new operations.AzureFirewallFqdnTags(this);
    this.bastionHosts = new operations.BastionHosts(this);
    this.ddosCustomPolicies = new operations.DdosCustomPolicies(this);
    this.ddosProtectionPlans = new operations.DdosProtectionPlans(this);
    this.availableEndpointServices = new operations.AvailableEndpointServices(
      this
    );
    this.expressRouteCircuitAuthorizations = new operations.ExpressRouteCircuitAuthorizations(
      this
    );
    this.expressRouteCircuitPeerings = new operations.ExpressRouteCircuitPeerings(
      this
    );
    this.expressRouteCircuitConnections = new operations.ExpressRouteCircuitConnections(
      this
    );
    this.peerExpressRouteCircuitConnections = new operations.PeerExpressRouteCircuitConnections(
      this
    );
    this.expressRouteCircuits = new operations.ExpressRouteCircuits(this);
    this.expressRouteServiceProviders = new operations.ExpressRouteServiceProviders(
      this
    );
    this.expressRouteCrossConnections = new operations.ExpressRouteCrossConnections(
      this
    );
    this.expressRouteCrossConnectionPeerings = new operations.ExpressRouteCrossConnectionPeerings(
      this
    );
    this.expressRoutePortsLocations = new operations.ExpressRoutePortsLocations(
      this
    );
    this.expressRoutePorts = new operations.ExpressRoutePorts(this);
    this.expressRouteLinks = new operations.ExpressRouteLinks(this);
    this.firewallPolicies = new operations.FirewallPolicies(this);
    this.firewallPolicyRuleGroups = new operations.FirewallPolicyRuleGroups(
      this
    );
    this.ipAllocations = new operations.IpAllocations(this);
    this.ipGroups = new operations.IpGroups(this);
    this.loadBalancers = new operations.LoadBalancers(this);
    this.loadBalancerBackendAddressPools = new operations.LoadBalancerBackendAddressPools(
      this
    );
    this.loadBalancerFrontendIPConfigurations = new operations.LoadBalancerFrontendIPConfigurations(
      this
    );
    this.inboundNatRules = new operations.InboundNatRules(this);
    this.loadBalancerLoadBalancingRules = new operations.LoadBalancerLoadBalancingRules(
      this
    );
    this.loadBalancerOutboundRules = new operations.LoadBalancerOutboundRules(
      this
    );
    this.loadBalancerNetworkInterfaces = new operations.LoadBalancerNetworkInterfaces(
      this
    );
    this.loadBalancerProbes = new operations.LoadBalancerProbes(this);
    this.natGateways = new operations.NatGateways(this);
    this.networkInterfaces = new operations.NetworkInterfaces(this);
    this.networkInterfaceIPConfigurations = new operations.NetworkInterfaceIPConfigurations(
      this
    );
    this.networkInterfaceLoadBalancers = new operations.NetworkInterfaceLoadBalancers(
      this
    );
    this.networkInterfaceTapConfigurations = new operations.NetworkInterfaceTapConfigurations(
      this
    );
    this.networkProfiles = new operations.NetworkProfiles(this);
    this.networkSecurityGroups = new operations.NetworkSecurityGroups(this);
    this.securityRules = new operations.SecurityRules(this);
    this.defaultSecurityRules = new operations.DefaultSecurityRules(this);
    this.networkVirtualAppliances = new operations.NetworkVirtualAppliances(
      this
    );
    this.networkWatchers = new operations.NetworkWatchers(this);
    this.packetCaptures = new operations.PacketCaptures(this);
    this.connectionMonitors = new operations.ConnectionMonitors(this);
    this.flowLogs = new operations.FlowLogs(this);
    this.operations = new operations.Operations(this);
    this.privateEndpoints = new operations.PrivateEndpoints(this);
    this.availablePrivateEndpointTypes = new operations.AvailablePrivateEndpointTypes(
      this
    );
    this.privateDnsZoneGroups = new operations.PrivateDnsZoneGroups(this);
    this.privateLinkServices = new operations.PrivateLinkServices(this);
    this.publicIPAddresses = new operations.PublicIPAddresses(this);
    this.publicIPPrefixes = new operations.PublicIPPrefixes(this);
    this.routeFilters = new operations.RouteFilters(this);
    this.routeFilterRules = new operations.RouteFilterRules(this);
    this.routeTables = new operations.RouteTables(this);
    this.routes = new operations.Routes(this);
    this.securityPartnerProviders = new operations.SecurityPartnerProviders(
      this
    );
    this.bgpServiceCommunities = new operations.BgpServiceCommunities(this);
    this.serviceEndpointPolicies = new operations.ServiceEndpointPolicies(this);
    this.serviceEndpointPolicyDefinitions = new operations.ServiceEndpointPolicyDefinitions(
      this
    );
    this.serviceTags = new operations.ServiceTags(this);
    this.usages = new operations.Usages(this);
    this.virtualNetworks = new operations.VirtualNetworks(this);
    this.subnets = new operations.Subnets(this);
    this.resourceNavigationLinks = new operations.ResourceNavigationLinks(this);
    this.serviceAssociationLinks = new operations.ServiceAssociationLinks(this);
    this.virtualNetworkPeerings = new operations.VirtualNetworkPeerings(this);
    this.virtualNetworkGateways = new operations.VirtualNetworkGateways(this);
    this.virtualNetworkGatewayConnections = new operations.VirtualNetworkGatewayConnections(
      this
    );
    this.localNetworkGateways = new operations.LocalNetworkGateways(this);
    this.virtualNetworkTaps = new operations.VirtualNetworkTaps(this);
    this.virtualRouters = new operations.VirtualRouters(this);
    this.virtualRouterPeerings = new operations.VirtualRouterPeerings(this);
    this.virtualWans = new operations.VirtualWans(this);
    this.vpnSites = new operations.VpnSites(this);
    this.vpnSiteLinks = new operations.VpnSiteLinks(this);
    this.vpnSitesConfiguration = new operations.VpnSitesConfiguration(this);
    this.vpnServerConfigurations = new operations.VpnServerConfigurations(this);
    this.virtualHubs = new operations.VirtualHubs(this);
    this.hubVirtualNetworkConnections = new operations.HubVirtualNetworkConnections(
      this
    );
    this.vpnGateways = new operations.VpnGateways(this);
    this.vpnConnections = new operations.VpnConnections(this);
    this.vpnSiteLinkConnections = new operations.VpnSiteLinkConnections(this);
    this.vpnLinkConnections = new operations.VpnLinkConnections(this);
    this.p2SVpnGateways = new operations.P2SVpnGateways(this);
    this.vpnServerConfigurationsAssociatedWithVirtualWan = new operations.VpnServerConfigurationsAssociatedWithVirtualWan(
      this
    );
    this.virtualHubRouteTableV2S = new operations.VirtualHubRouteTableV2S(this);
    this.expressRouteGateways = new operations.ExpressRouteGateways(this);
    this.expressRouteConnections = new operations.ExpressRouteConnections(this);
    this.hubRouteTables = new operations.HubRouteTables(this);
    this.webApplicationFirewallPolicies = new operations.WebApplicationFirewallPolicies(
      this
    );
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }

  /**
   * Creates a Bastion Shareable Links for all the VMs specified in the request.
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param bslRequest Post request for all the Bastion Shareable Link endpoints.
   * @param options The options parameters.
   */
  async putBastionShareableLink(
    resourceGroupName: string,
    bastionHostName: string,
    bslRequest: BastionShareableLinkListRequest,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<NetworkManagementClientPutBastionShareableLinkResponse>
  > {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "location"
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      bastionHostName,
      bslRequest,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.sendOperationRequest(args, spec) as Promise<
        NetworkManagementClientPutBastionShareableLinkResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      putBastionShareableLinkOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: putBastionShareableLinkOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Deletes the Bastion Shareable Links for all the VMs specified in the request.
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param bslRequest Post request for all the Bastion Shareable Link endpoints.
   * @param options The options parameters.
   */
  async deleteBastionShareableLink(
    resourceGroupName: string,
    bastionHostName: string,
    bslRequest: BastionShareableLinkListRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "location"
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      bastionHostName,
      bslRequest,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.sendOperationRequest(args, spec) as Promise<coreHttp.RestResponse>;
    const initialOperationResult = await sendOperation(
      args,
      deleteBastionShareableLinkOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteBastionShareableLinkOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Return the Bastion Shareable Links for all the VMs specified in the request.
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param bslRequest Post request for all the Bastion Shareable Link endpoints.
   * @param options The options parameters.
   */
  getBastionShareableLink(
    resourceGroupName: string,
    bastionHostName: string,
    bslRequest: BastionShareableLinkListRequest,
    options?: coreHttp.OperationOptions
  ): Promise<NetworkManagementClientGetBastionShareableLinkResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        resourceGroupName,
        bastionHostName,
        bslRequest,
        options: operationOptions
      },
      getBastionShareableLinkOperationSpec
    ) as Promise<NetworkManagementClientGetBastionShareableLinkResponse>;
  }

  /**
   * Returns the list of currently active sessions on the Bastion.
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param options The options parameters.
   */
  async getActiveSessions(
    resourceGroupName: string,
    bastionHostName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<NetworkManagementClientGetActiveSessionsResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "location"
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      bastionHostName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.sendOperationRequest(args, spec) as Promise<
        NetworkManagementClientGetActiveSessionsResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      getActiveSessionsOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: getActiveSessionsOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Returns the list of currently active sessions on the Bastion.
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param sessionIds The list of sessionids to disconnect.
   * @param options The options parameters.
   */
  disconnectActiveSessions(
    resourceGroupName: string,
    bastionHostName: string,
    sessionIds: SessionIds,
    options?: coreHttp.OperationOptions
  ): Promise<NetworkManagementClientDisconnectActiveSessionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        resourceGroupName,
        bastionHostName,
        sessionIds,
        options: operationOptions
      },
      disconnectActiveSessionsOperationSpec
    ) as Promise<NetworkManagementClientDisconnectActiveSessionsResponse>;
  }

  /**
   * Checks whether a domain name in the cloudapp.azure.com zone is available for use.
   * @param location The location of the domain name.
   * @param domainNameLabel The domain name to be verified. It must conform to the following regular
   *                        expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
   * @param options The options parameters.
   */
  checkDnsNameAvailability(
    location: string,
    domainNameLabel: string,
    options?: coreHttp.OperationOptions
  ): Promise<NetworkManagementClientCheckDnsNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { location, domainNameLabel, options: operationOptions },
      checkDnsNameAvailabilityOperationSpec
    ) as Promise<NetworkManagementClientCheckDnsNameAvailabilityResponse>;
  }

  /**
   * Gives the supported security providers for the virtual wan.
   * @param resourceGroupName The resource group name.
   * @param virtualWANName The name of the VirtualWAN for which supported security providers are needed.
   * @param options The options parameters.
   */
  supportedSecurityProviders(
    resourceGroupName: string,
    virtualWANName: string,
    options?: coreHttp.OperationOptions
  ): Promise<NetworkManagementClientSupportedSecurityProvidersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { resourceGroupName, virtualWANName, options: operationOptions },
      supportedSecurityProvidersOperationSpec
    ) as Promise<NetworkManagementClientSupportedSecurityProvidersResponse>;
  }

  /**
   * Generates a unique VPN profile for P2S clients for VirtualWan and associated VpnServerConfiguration
   * combination in the specified resource group.
   * @param resourceGroupName The resource group name.
   * @param virtualWANName The name of the VirtualWAN whose associated VpnServerConfigurations is needed.
   * @param vpnClientParams Parameters supplied to the generate VirtualWan VPN profile generation
   *                        operation.
   * @param options The options parameters.
   */
  async generatevirtualwanvpnserverconfigurationvpnprofile(
    resourceGroupName: string,
    virtualWANName: string,
    vpnClientParams: VirtualWanVpnProfileParameters,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<
      NetworkManagementClientGeneratevirtualwanvpnserverconfigurationvpnprofileResponse
    >
  > {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "location"
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualWANName,
      vpnClientParams,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.sendOperationRequest(args, spec) as Promise<
        NetworkManagementClientGeneratevirtualwanvpnserverconfigurationvpnprofileResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      generatevirtualwanvpnserverconfigurationvpnprofileOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: generatevirtualwanvpnserverconfigurationvpnprofileOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * PutBastionShareableLinkNext
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param bslRequest Post request for all the Bastion Shareable Link endpoints.
   * @param nextLink The nextLink from the previous successful call to the PutBastionShareableLink
   *                 method.
   * @param options The options parameters.
   */
  putBastionShareableLinkNext(
    resourceGroupName: string,
    bastionHostName: string,
    bslRequest: BastionShareableLinkListRequest,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<NetworkManagementClientPutBastionShareableLinkNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        resourceGroupName,
        bastionHostName,
        bslRequest,
        nextLink,
        options: operationOptions
      },
      putBastionShareableLinkNextOperationSpec
    ) as Promise<NetworkManagementClientPutBastionShareableLinkNextResponse>;
  }

  /**
   * GetBastionShareableLinkNext
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param bslRequest Post request for all the Bastion Shareable Link endpoints.
   * @param nextLink The nextLink from the previous successful call to the GetBastionShareableLink
   *                 method.
   * @param options The options parameters.
   */
  getBastionShareableLinkNext(
    resourceGroupName: string,
    bastionHostName: string,
    bslRequest: BastionShareableLinkListRequest,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<NetworkManagementClientGetBastionShareableLinkNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        resourceGroupName,
        bastionHostName,
        bslRequest,
        nextLink,
        options: operationOptions
      },
      getBastionShareableLinkNextOperationSpec
    ) as Promise<NetworkManagementClientGetBastionShareableLinkNextResponse>;
  }

  /**
   * GetActiveSessionsNext
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param nextLink The nextLink from the previous successful call to the GetActiveSessions method.
   * @param options The options parameters.
   */
  getActiveSessionsNext(
    resourceGroupName: string,
    bastionHostName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<NetworkManagementClientGetActiveSessionsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        resourceGroupName,
        bastionHostName,
        nextLink,
        options: operationOptions
      },
      getActiveSessionsNextOperationSpec
    ) as Promise<NetworkManagementClientGetActiveSessionsNextResponse>;
  }

  /**
   * DisconnectActiveSessionsNext
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param sessionIds The list of sessionids to disconnect.
   * @param nextLink The nextLink from the previous successful call to the DisconnectActiveSessions
   *                 method.
   * @param options The options parameters.
   */
  disconnectActiveSessionsNext(
    resourceGroupName: string,
    bastionHostName: string,
    sessionIds: SessionIds,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<NetworkManagementClientDisconnectActiveSessionsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        resourceGroupName,
        bastionHostName,
        sessionIds,
        nextLink,
        options: operationOptions
      },
      disconnectActiveSessionsNextOperationSpec
    ) as Promise<NetworkManagementClientDisconnectActiveSessionsNextResponse>;
  }

  applicationGateways: operations.ApplicationGateways;
  applicationSecurityGroups: operations.ApplicationSecurityGroups;
  availableDelegations: operations.AvailableDelegations;
  availableResourceGroupDelegations: operations.AvailableResourceGroupDelegations;
  availableServiceAliases: operations.AvailableServiceAliases;
  azureFirewalls: operations.AzureFirewalls;
  azureFirewallFqdnTags: operations.AzureFirewallFqdnTags;
  bastionHosts: operations.BastionHosts;
  ddosCustomPolicies: operations.DdosCustomPolicies;
  ddosProtectionPlans: operations.DdosProtectionPlans;
  availableEndpointServices: operations.AvailableEndpointServices;
  expressRouteCircuitAuthorizations: operations.ExpressRouteCircuitAuthorizations;
  expressRouteCircuitPeerings: operations.ExpressRouteCircuitPeerings;
  expressRouteCircuitConnections: operations.ExpressRouteCircuitConnections;
  peerExpressRouteCircuitConnections: operations.PeerExpressRouteCircuitConnections;
  expressRouteCircuits: operations.ExpressRouteCircuits;
  expressRouteServiceProviders: operations.ExpressRouteServiceProviders;
  expressRouteCrossConnections: operations.ExpressRouteCrossConnections;
  expressRouteCrossConnectionPeerings: operations.ExpressRouteCrossConnectionPeerings;
  expressRoutePortsLocations: operations.ExpressRoutePortsLocations;
  expressRoutePorts: operations.ExpressRoutePorts;
  expressRouteLinks: operations.ExpressRouteLinks;
  firewallPolicies: operations.FirewallPolicies;
  firewallPolicyRuleGroups: operations.FirewallPolicyRuleGroups;
  ipAllocations: operations.IpAllocations;
  ipGroups: operations.IpGroups;
  loadBalancers: operations.LoadBalancers;
  loadBalancerBackendAddressPools: operations.LoadBalancerBackendAddressPools;
  loadBalancerFrontendIPConfigurations: operations.LoadBalancerFrontendIPConfigurations;
  inboundNatRules: operations.InboundNatRules;
  loadBalancerLoadBalancingRules: operations.LoadBalancerLoadBalancingRules;
  loadBalancerOutboundRules: operations.LoadBalancerOutboundRules;
  loadBalancerNetworkInterfaces: operations.LoadBalancerNetworkInterfaces;
  loadBalancerProbes: operations.LoadBalancerProbes;
  natGateways: operations.NatGateways;
  networkInterfaces: operations.NetworkInterfaces;
  networkInterfaceIPConfigurations: operations.NetworkInterfaceIPConfigurations;
  networkInterfaceLoadBalancers: operations.NetworkInterfaceLoadBalancers;
  networkInterfaceTapConfigurations: operations.NetworkInterfaceTapConfigurations;
  networkProfiles: operations.NetworkProfiles;
  networkSecurityGroups: operations.NetworkSecurityGroups;
  securityRules: operations.SecurityRules;
  defaultSecurityRules: operations.DefaultSecurityRules;
  networkVirtualAppliances: operations.NetworkVirtualAppliances;
  networkWatchers: operations.NetworkWatchers;
  packetCaptures: operations.PacketCaptures;
  connectionMonitors: operations.ConnectionMonitors;
  flowLogs: operations.FlowLogs;
  operations: operations.Operations;
  privateEndpoints: operations.PrivateEndpoints;
  availablePrivateEndpointTypes: operations.AvailablePrivateEndpointTypes;
  privateDnsZoneGroups: operations.PrivateDnsZoneGroups;
  privateLinkServices: operations.PrivateLinkServices;
  publicIPAddresses: operations.PublicIPAddresses;
  publicIPPrefixes: operations.PublicIPPrefixes;
  routeFilters: operations.RouteFilters;
  routeFilterRules: operations.RouteFilterRules;
  routeTables: operations.RouteTables;
  routes: operations.Routes;
  securityPartnerProviders: operations.SecurityPartnerProviders;
  bgpServiceCommunities: operations.BgpServiceCommunities;
  serviceEndpointPolicies: operations.ServiceEndpointPolicies;
  serviceEndpointPolicyDefinitions: operations.ServiceEndpointPolicyDefinitions;
  serviceTags: operations.ServiceTags;
  usages: operations.Usages;
  virtualNetworks: operations.VirtualNetworks;
  subnets: operations.Subnets;
  resourceNavigationLinks: operations.ResourceNavigationLinks;
  serviceAssociationLinks: operations.ServiceAssociationLinks;
  virtualNetworkPeerings: operations.VirtualNetworkPeerings;
  virtualNetworkGateways: operations.VirtualNetworkGateways;
  virtualNetworkGatewayConnections: operations.VirtualNetworkGatewayConnections;
  localNetworkGateways: operations.LocalNetworkGateways;
  virtualNetworkTaps: operations.VirtualNetworkTaps;
  virtualRouters: operations.VirtualRouters;
  virtualRouterPeerings: operations.VirtualRouterPeerings;
  virtualWans: operations.VirtualWans;
  vpnSites: operations.VpnSites;
  vpnSiteLinks: operations.VpnSiteLinks;
  vpnSitesConfiguration: operations.VpnSitesConfiguration;
  vpnServerConfigurations: operations.VpnServerConfigurations;
  virtualHubs: operations.VirtualHubs;
  hubVirtualNetworkConnections: operations.HubVirtualNetworkConnections;
  vpnGateways: operations.VpnGateways;
  vpnConnections: operations.VpnConnections;
  vpnSiteLinkConnections: operations.VpnSiteLinkConnections;
  vpnLinkConnections: operations.VpnLinkConnections;
  p2SVpnGateways: operations.P2SVpnGateways;
  vpnServerConfigurationsAssociatedWithVirtualWan: operations.VpnServerConfigurationsAssociatedWithVirtualWan;
  virtualHubRouteTableV2S: operations.VirtualHubRouteTableV2S;
  expressRouteGateways: operations.ExpressRouteGateways;
  expressRouteConnections: operations.ExpressRouteConnections;
  hubRouteTables: operations.HubRouteTables;
  webApplicationFirewallPolicies: operations.WebApplicationFirewallPolicies;
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const putBastionShareableLinkOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/createShareableLinks",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BastionShareableLinkListResult
    },
    201: {
      bodyMapper: Mappers.BastionShareableLinkListResult
    },
    202: {
      bodyMapper: Mappers.BastionShareableLinkListResult
    },
    204: {
      bodyMapper: Mappers.BastionShareableLinkListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.bslRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.bastionHostName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteBastionShareableLinkOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/deleteShareableLinks",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.bslRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.bastionHostName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getBastionShareableLinkOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/getShareableLinks",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BastionShareableLinkListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.bslRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.bastionHostName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getActiveSessionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/getActiveSessions",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BastionActiveSessionListResult
    },
    201: {
      bodyMapper: Mappers.BastionActiveSessionListResult
    },
    202: {
      bodyMapper: Mappers.BastionActiveSessionListResult
    },
    204: {
      bodyMapper: Mappers.BastionActiveSessionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.bastionHostName
  ],
  serializer
};
const disconnectActiveSessionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/disconnectActiveSessions",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BastionSessionDeleteResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.sessionIds,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.bastionHostName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const checkDnsNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DnsNameAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.domainNameLabel],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  serializer
};
const supportedSecurityProvidersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWANName}/supportedSecurityProviders",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualWanSecurityProviders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualWANName
  ],
  serializer
};
const generatevirtualwanvpnserverconfigurationvpnprofileOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWANName}/GenerateVpnProfile",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VpnProfileResponse
    },
    201: {
      bodyMapper: Mappers.VpnProfileResponse
    },
    202: {
      bodyMapper: Mappers.VpnProfileResponse
    },
    204: {
      bodyMapper: Mappers.VpnProfileResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.vpnClientParams,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualWANName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const putBastionShareableLinkNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BastionShareableLinkListResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.bastionHostName,
    Parameters.nextLink1
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getBastionShareableLinkNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BastionShareableLinkListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.bastionHostName,
    Parameters.nextLink1
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getActiveSessionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BastionActiveSessionListResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.bastionHostName
  ],
  serializer
};
const disconnectActiveSessionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BastionSessionDeleteResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.bastionHostName,
    Parameters.nextLink1
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};

// Operation Specifications

export {
  NetworkManagementClient,
  NetworkManagementClientContext,
  Models as NetworkManagementModels,
  Mappers as NetworkManagementMappers
};
export * from "./operations";
