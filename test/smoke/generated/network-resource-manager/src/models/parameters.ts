/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const applicationGatewayName: coreHttp.OperationURLParameter = {
  parameterPath: "applicationGatewayName",
  mapper: {
    serializedName: "applicationGatewayName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-12-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApplicationGateway
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const expand: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const probeRequest: coreHttp.OperationParameter = {
  parameterPath: "probeRequest",
  mapper: Mappers.ApplicationGatewayOnDemandProbe
};

export const predefinedPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "predefinedPolicyName",
  mapper: {
    serializedName: "predefinedPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const applicationSecurityGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "applicationSecurityGroupName",
  mapper: {
    serializedName: "applicationSecurityGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApplicationSecurityGroup
};

export const parameters3: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const location: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const location1: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const location2: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const azureFirewallName: coreHttp.OperationURLParameter = {
  parameterPath: "azureFirewallName",
  mapper: {
    serializedName: "azureFirewallName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters4: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AzureFirewall
};

export const azureFirewallName1: coreHttp.OperationURLParameter = {
  parameterPath: "azureFirewallName",
  mapper: {
    constraints: {
      MaxLength: 56,
      MinLength: 1
    },
    serializedName: "azureFirewallName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters5: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const bastionHostName: coreHttp.OperationURLParameter = {
  parameterPath: "bastionHostName",
  mapper: {
    serializedName: "bastionHostName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters6: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BastionHost
};

export const bslRequest: coreHttp.OperationParameter = {
  parameterPath: "bslRequest",
  mapper: Mappers.BastionShareableLinkListRequest
};

export const sessionIds: coreHttp.OperationParameter = {
  parameterPath: "sessionIds",
  mapper: Mappers.SessionIds
};

export const domainNameLabel: coreHttp.OperationQueryParameter = {
  parameterPath: "domainNameLabel",
  mapper: {
    serializedName: "domainNameLabel",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName1: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualWANName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualWANName",
  mapper: {
    serializedName: "virtualWANName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vpnClientParams: coreHttp.OperationParameter = {
  parameterPath: "vpnClientParams",
  mapper: Mappers.VirtualWanVpnProfileParameters
};

export const virtualWANName1: coreHttp.OperationURLParameter = {
  parameterPath: "virtualWANName",
  mapper: {
    serializedName: "virtualWANName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink4: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink5: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink6: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink7: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const ddosCustomPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "ddosCustomPolicyName",
  mapper: {
    serializedName: "ddosCustomPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters7: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DdosCustomPolicy
};

export const parameters8: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const ddosProtectionPlanName: coreHttp.OperationURLParameter = {
  parameterPath: "ddosProtectionPlanName",
  mapper: {
    serializedName: "ddosProtectionPlanName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters9: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DdosProtectionPlan
};

export const parameters10: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const location3: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const circuitName: coreHttp.OperationURLParameter = {
  parameterPath: "circuitName",
  mapper: {
    serializedName: "circuitName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const authorizationName: coreHttp.OperationURLParameter = {
  parameterPath: "authorizationName",
  mapper: {
    serializedName: "authorizationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const authorizationParameters: coreHttp.OperationParameter = {
  parameterPath: "authorizationParameters",
  mapper: Mappers.ExpressRouteCircuitAuthorization
};

export const circuitName1: coreHttp.OperationURLParameter = {
  parameterPath: "circuitName",
  mapper: {
    serializedName: "circuitName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const peeringName: coreHttp.OperationURLParameter = {
  parameterPath: "peeringName",
  mapper: {
    serializedName: "peeringName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const peeringParameters: coreHttp.OperationParameter = {
  parameterPath: "peeringParameters",
  mapper: Mappers.ExpressRouteCircuitPeering
};

export const connectionName: coreHttp.OperationURLParameter = {
  parameterPath: "connectionName",
  mapper: {
    serializedName: "connectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expressRouteCircuitConnectionParameters: coreHttp.OperationParameter = {
  parameterPath: "expressRouteCircuitConnectionParameters",
  mapper: Mappers.ExpressRouteCircuitConnection
};

export const connectionName1: coreHttp.OperationURLParameter = {
  parameterPath: "connectionName",
  mapper: {
    serializedName: "connectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const circuitName2: coreHttp.OperationURLParameter = {
  parameterPath: "circuitName",
  mapper: {
    serializedName: "circuitName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters11: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ExpressRouteCircuit
};

export const parameters12: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const devicePath: coreHttp.OperationURLParameter = {
  parameterPath: "devicePath",
  mapper: {
    serializedName: "devicePath",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName2: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const crossConnectionName: coreHttp.OperationURLParameter = {
  parameterPath: "crossConnectionName",
  mapper: {
    serializedName: "crossConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters13: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ExpressRouteCrossConnection
};

export const crossConnectionName1: coreHttp.OperationURLParameter = {
  parameterPath: "crossConnectionName",
  mapper: {
    serializedName: "crossConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const crossConnectionParameters: coreHttp.OperationParameter = {
  parameterPath: "crossConnectionParameters",
  mapper: Mappers.TagsObject
};

export const crossConnectionName2: coreHttp.OperationURLParameter = {
  parameterPath: "crossConnectionName",
  mapper: {
    serializedName: "crossConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const peeringParameters1: coreHttp.OperationParameter = {
  parameterPath: "peeringParameters",
  mapper: Mappers.ExpressRouteCrossConnectionPeering
};

export const putExpressRouteGatewayParameters: coreHttp.OperationParameter = {
  parameterPath: "putExpressRouteGatewayParameters",
  mapper: Mappers.ExpressRouteGateway
};

export const expressRouteGatewayName: coreHttp.OperationURLParameter = {
  parameterPath: "expressRouteGatewayName",
  mapper: {
    serializedName: "expressRouteGatewayName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const putExpressRouteConnectionParameters: coreHttp.OperationParameter = {
  parameterPath: "putExpressRouteConnectionParameters",
  mapper: Mappers.ExpressRouteConnection
};

export const connectionName2: coreHttp.OperationURLParameter = {
  parameterPath: "connectionName",
  mapper: {
    serializedName: "connectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const connectionName3: coreHttp.OperationURLParameter = {
  parameterPath: "connectionName",
  mapper: {
    serializedName: "connectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const locationName: coreHttp.OperationURLParameter = {
  parameterPath: "locationName",
  mapper: {
    serializedName: "locationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expressRoutePortName: coreHttp.OperationURLParameter = {
  parameterPath: "expressRoutePortName",
  mapper: {
    serializedName: "expressRoutePortName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expressRoutePortName1: coreHttp.OperationURLParameter = {
  parameterPath: "expressRoutePortName",
  mapper: {
    serializedName: "expressRoutePortName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters14: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ExpressRoutePort
};

export const parameters15: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const linkName: coreHttp.OperationURLParameter = {
  parameterPath: "linkName",
  mapper: {
    serializedName: "linkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const firewallPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "firewallPolicyName",
  mapper: {
    serializedName: "firewallPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const parameters16: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.FirewallPolicy
};

export const ruleGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "ruleGroupName",
  mapper: {
    serializedName: "ruleGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters17: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.FirewallPolicyRuleGroup
};

export const ipGroupsName: coreHttp.OperationURLParameter = {
  parameterPath: "ipGroupsName",
  mapper: {
    serializedName: "ipGroupsName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const parameters18: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.IpGroup
};

export const parameters19: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const loadBalancerName: coreHttp.OperationURLParameter = {
  parameterPath: "loadBalancerName",
  mapper: {
    serializedName: "loadBalancerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters20: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.LoadBalancer
};

export const parameters21: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const backendAddressPoolName: coreHttp.OperationURLParameter = {
  parameterPath: "backendAddressPoolName",
  mapper: {
    serializedName: "backendAddressPoolName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const frontendIPConfigurationName: coreHttp.OperationURLParameter = {
  parameterPath: "frontendIPConfigurationName",
  mapper: {
    serializedName: "frontendIPConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const inboundNatRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "inboundNatRuleName",
  mapper: {
    serializedName: "inboundNatRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const inboundNatRuleParameters: coreHttp.OperationParameter = {
  parameterPath: "inboundNatRuleParameters",
  mapper: Mappers.InboundNatRule
};

export const loadBalancingRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "loadBalancingRuleName",
  mapper: {
    serializedName: "loadBalancingRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const outboundRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "outboundRuleName",
  mapper: {
    serializedName: "outboundRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const probeName: coreHttp.OperationURLParameter = {
  parameterPath: "probeName",
  mapper: {
    serializedName: "probeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const natGatewayName: coreHttp.OperationURLParameter = {
  parameterPath: "natGatewayName",
  mapper: {
    serializedName: "natGatewayName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters22: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.NatGateway
};

export const parameters23: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const networkInterfaceName: coreHttp.OperationURLParameter = {
  parameterPath: "networkInterfaceName",
  mapper: {
    serializedName: "networkInterfaceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters24: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.NetworkInterface
};

export const parameters25: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const virtualMachineScaleSetName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualMachineScaleSetName",
  mapper: {
    serializedName: "virtualMachineScaleSetName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualmachineIndex: coreHttp.OperationURLParameter = {
  parameterPath: "virtualmachineIndex",
  mapper: {
    serializedName: "virtualmachineIndex",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion1: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2018-10-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const ipConfigurationName: coreHttp.OperationURLParameter = {
  parameterPath: "ipConfigurationName",
  mapper: {
    serializedName: "ipConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink8: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink9: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink10: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const ipConfigurationName1: coreHttp.OperationURLParameter = {
  parameterPath: "ipConfigurationName",
  mapper: {
    serializedName: "ipConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const tapConfigurationName: coreHttp.OperationURLParameter = {
  parameterPath: "tapConfigurationName",
  mapper: {
    serializedName: "tapConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const tapConfigurationParameters: coreHttp.OperationParameter = {
  parameterPath: "tapConfigurationParameters",
  mapper: Mappers.NetworkInterfaceTapConfiguration
};

export const networkProfileName: coreHttp.OperationURLParameter = {
  parameterPath: "networkProfileName",
  mapper: {
    serializedName: "networkProfileName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const networkProfileName1: coreHttp.OperationURLParameter = {
  parameterPath: "networkProfileName",
  mapper: {
    serializedName: "networkProfileName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters26: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.NetworkProfile
};

export const networkProfileName2: coreHttp.OperationURLParameter = {
  parameterPath: "networkProfileName",
  mapper: {
    serializedName: "networkProfileName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters27: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const networkSecurityGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "networkSecurityGroupName",
  mapper: {
    serializedName: "networkSecurityGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters28: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.NetworkSecurityGroup
};

export const parameters29: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const securityRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "securityRuleName",
  mapper: {
    serializedName: "securityRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const securityRuleParameters: coreHttp.OperationParameter = {
  parameterPath: "securityRuleParameters",
  mapper: Mappers.SecurityRule
};

export const defaultSecurityRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "defaultSecurityRuleName",
  mapper: {
    serializedName: "defaultSecurityRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const networkVirtualApplianceName: coreHttp.OperationURLParameter = {
  parameterPath: "networkVirtualApplianceName",
  mapper: {
    serializedName: "networkVirtualApplianceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters30: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const resourceGroupName3: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const networkVirtualApplianceName1: coreHttp.OperationURLParameter = {
  parameterPath: "networkVirtualApplianceName",
  mapper: {
    serializedName: "networkVirtualApplianceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters31: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.NetworkVirtualAppliance
};

export const parameters32: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.NetworkWatcher
};

export const networkWatcherName: coreHttp.OperationURLParameter = {
  parameterPath: "networkWatcherName",
  mapper: {
    serializedName: "networkWatcherName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters33: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const parameters34: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TopologyParameters
};

export const parameters35: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VerificationIPFlowParameters
};

export const parameters36: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.NextHopParameters
};

export const parameters37: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SecurityGroupViewParameters
};

export const parameters38: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TroubleshootingParameters
};

export const networkWatcherName1: coreHttp.OperationURLParameter = {
  parameterPath: "networkWatcherName",
  mapper: {
    serializedName: "networkWatcherName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters39: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.QueryTroubleshootingParameters
};

export const parameters40: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.FlowLogInformation
};

export const resourceGroupName4: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters41: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.FlowLogStatusParameters
};

export const parameters42: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ConnectivityParameters
};

export const parameters43: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AzureReachabilityReportParameters
};

export const parameters44: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AvailableProvidersListParameters
};

export const parameters45: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.NetworkConfigurationDiagnosticParameters
};

export const parameters46: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PacketCapture
};

export const packetCaptureName: coreHttp.OperationURLParameter = {
  parameterPath: "packetCaptureName",
  mapper: {
    serializedName: "packetCaptureName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const networkWatcherName2: coreHttp.OperationURLParameter = {
  parameterPath: "networkWatcherName",
  mapper: {
    serializedName: "networkWatcherName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const packetCaptureName1: coreHttp.OperationURLParameter = {
  parameterPath: "packetCaptureName",
  mapper: {
    serializedName: "packetCaptureName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters47: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ConnectionMonitor
};

export const resourceGroupName5: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const connectionMonitorName: coreHttp.OperationURLParameter = {
  parameterPath: "connectionMonitorName",
  mapper: {
    serializedName: "connectionMonitorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters48: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const connectionMonitorName1: coreHttp.OperationURLParameter = {
  parameterPath: "connectionMonitorName",
  mapper: {
    serializedName: "connectionMonitorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters49: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.FlowLog
};

export const flowLogName: coreHttp.OperationURLParameter = {
  parameterPath: "flowLogName",
  mapper: {
    serializedName: "flowLogName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const flowLogName1: coreHttp.OperationURLParameter = {
  parameterPath: "flowLogName",
  mapper: {
    serializedName: "flowLogName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateEndpointName: coreHttp.OperationURLParameter = {
  parameterPath: "privateEndpointName",
  mapper: {
    serializedName: "privateEndpointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters50: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PrivateEndpoint
};

export const nextLink11: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const serviceName: coreHttp.OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    serializedName: "serviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters51: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PrivateLinkService
};

export const peConnectionName: coreHttp.OperationURLParameter = {
  parameterPath: "peConnectionName",
  mapper: {
    serializedName: "peConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters52: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PrivateEndpointConnection
};

export const parameters53: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CheckPrivateLinkServiceVisibilityRequest
};

export const nextLink12: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink13: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink14: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const publicIpAddressName: coreHttp.OperationURLParameter = {
  parameterPath: "publicIpAddressName",
  mapper: {
    serializedName: "publicIpAddressName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters54: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PublicIPAddress
};

export const publicIpAddressName1: coreHttp.OperationURLParameter = {
  parameterPath: "publicIpAddressName",
  mapper: {
    serializedName: "publicIpAddressName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters55: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const networkInterfaceName1: coreHttp.OperationURLParameter = {
  parameterPath: "networkInterfaceName",
  mapper: {
    serializedName: "networkInterfaceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const ipConfigurationName2: coreHttp.OperationURLParameter = {
  parameterPath: "ipConfigurationName",
  mapper: {
    serializedName: "ipConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const ipConfigurationName3: coreHttp.OperationURLParameter = {
  parameterPath: "ipConfigurationName",
  mapper: {
    serializedName: "ipConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const publicIpAddressName2: coreHttp.OperationURLParameter = {
  parameterPath: "publicIpAddressName",
  mapper: {
    serializedName: "publicIpAddressName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink15: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink16: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const publicIpPrefixName: coreHttp.OperationURLParameter = {
  parameterPath: "publicIpPrefixName",
  mapper: {
    serializedName: "publicIpPrefixName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const publicIpPrefixName1: coreHttp.OperationURLParameter = {
  parameterPath: "publicIpPrefixName",
  mapper: {
    serializedName: "publicIpPrefixName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters56: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PublicIPPrefix
};

export const parameters57: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const routeFilterName: coreHttp.OperationURLParameter = {
  parameterPath: "routeFilterName",
  mapper: {
    serializedName: "routeFilterName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand3: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const routeFilterParameters: coreHttp.OperationParameter = {
  parameterPath: "routeFilterParameters",
  mapper: Mappers.RouteFilter
};

export const parameters58: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const ruleName: coreHttp.OperationURLParameter = {
  parameterPath: "ruleName",
  mapper: {
    serializedName: "ruleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const routeFilterRuleParameters: coreHttp.OperationParameter = {
  parameterPath: "routeFilterRuleParameters",
  mapper: Mappers.RouteFilterRule
};

export const ruleName1: coreHttp.OperationURLParameter = {
  parameterPath: "ruleName",
  mapper: {
    serializedName: "ruleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink17: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const routeTableName: coreHttp.OperationURLParameter = {
  parameterPath: "routeTableName",
  mapper: {
    serializedName: "routeTableName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters59: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.RouteTable
};

export const parameters60: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const routeName: coreHttp.OperationURLParameter = {
  parameterPath: "routeName",
  mapper: {
    serializedName: "routeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const routeParameters: coreHttp.OperationParameter = {
  parameterPath: "routeParameters",
  mapper: Mappers.Route
};

export const serviceEndpointPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "serviceEndpointPolicyName",
  mapper: {
    serializedName: "serviceEndpointPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters61: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ServiceEndpointPolicy
};

export const parameters62: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const serviceEndpointPolicyName1: coreHttp.OperationURLParameter = {
  parameterPath: "serviceEndpointPolicyName",
  mapper: {
    serializedName: "serviceEndpointPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceEndpointPolicyDefinitionName: coreHttp.OperationURLParameter = {
  parameterPath: "serviceEndpointPolicyDefinitionName",
  mapper: {
    serializedName: "serviceEndpointPolicyDefinitionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceEndpointPolicyName2: coreHttp.OperationURLParameter = {
  parameterPath: "serviceEndpointPolicyName",
  mapper: {
    serializedName: "serviceEndpointPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceEndpointPolicyDefinitionName1: coreHttp.OperationURLParameter = {
  parameterPath: "serviceEndpointPolicyDefinitionName",
  mapper: {
    serializedName: "serviceEndpointPolicyDefinitionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceEndpointPolicyDefinitions: coreHttp.OperationParameter = {
  parameterPath: "serviceEndpointPolicyDefinitions",
  mapper: Mappers.ServiceEndpointPolicyDefinition
};

export const location4: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const location5: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-w._ ]+$")
    },
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualNetworkName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkName",
  mapper: {
    serializedName: "virtualNetworkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters63: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VirtualNetwork
};

export const parameters64: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const ipAddress: coreHttp.OperationQueryParameter = {
  parameterPath: "ipAddress",
  mapper: {
    serializedName: "ipAddress",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink18: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subnetName: coreHttp.OperationURLParameter = {
  parameterPath: "subnetName",
  mapper: {
    serializedName: "subnetName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const subnetParameters: coreHttp.OperationParameter = {
  parameterPath: "subnetParameters",
  mapper: Mappers.Subnet
};

export const prepareNetworkPoliciesRequestParameters: coreHttp.OperationParameter = {
  parameterPath: "prepareNetworkPoliciesRequestParameters",
  mapper: Mappers.PrepareNetworkPoliciesRequest
};

export const unprepareNetworkPoliciesRequestParameters: coreHttp.OperationParameter = {
  parameterPath: "unprepareNetworkPoliciesRequestParameters",
  mapper: Mappers.UnprepareNetworkPoliciesRequest
};

export const virtualNetworkPeeringName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkPeeringName",
  mapper: {
    serializedName: "virtualNetworkPeeringName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualNetworkPeeringParameters: coreHttp.OperationParameter = {
  parameterPath: "virtualNetworkPeeringParameters",
  mapper: Mappers.VirtualNetworkPeering
};

export const virtualNetworkPeeringName1: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkPeeringName",
  mapper: {
    serializedName: "virtualNetworkPeeringName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters65: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VirtualNetworkGateway
};

export const virtualNetworkGatewayName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkGatewayName",
  mapper: {
    serializedName: "virtualNetworkGatewayName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters66: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const gatewayVip: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "gatewayVip"],
  mapper: {
    serializedName: "gatewayVip",
    type: {
      name: "String"
    }
  }
};

export const parameters67: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VpnClientParameters
};

export const peer: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "peer"],
  mapper: {
    serializedName: "peer",
    type: {
      name: "String"
    }
  }
};

export const peer1: coreHttp.OperationQueryParameter = {
  parameterPath: "peer",
  mapper: {
    serializedName: "peer",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vpnclientIpsecParams: coreHttp.OperationParameter = {
  parameterPath: "vpnclientIpsecParams",
  mapper: Mappers.VpnClientIPsecParameters
};

export const virtualNetworkGatewayName1: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkGatewayName",
  mapper: {
    serializedName: "virtualNetworkGatewayName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters68: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VpnDeviceScriptParameters
};

export const virtualNetworkGatewayConnectionName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkGatewayConnectionName",
  mapper: {
    serializedName: "virtualNetworkGatewayConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters69: coreHttp.OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: Mappers.VpnPacketCaptureStartParameters
};

export const parameters70: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VpnPacketCaptureStopParameters
};

export const request: coreHttp.OperationParameter = {
  parameterPath: "request",
  mapper: Mappers.P2SVpnConnectionRequest
};

export const nextLink19: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters71: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VirtualNetworkGatewayConnection
};

export const virtualNetworkGatewayConnectionName1: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkGatewayConnectionName",
  mapper: {
    serializedName: "virtualNetworkGatewayConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters72: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const parameters73: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ConnectionSharedKey
};

export const virtualNetworkGatewayConnectionName2: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkGatewayConnectionName",
  mapper: {
    serializedName: "virtualNetworkGatewayConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualNetworkGatewayConnectionName3: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkGatewayConnectionName",
  mapper: {
    serializedName: "virtualNetworkGatewayConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters74: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ConnectionResetSharedKey
};

export const virtualNetworkGatewayConnectionName4: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkGatewayConnectionName",
  mapper: {
    serializedName: "virtualNetworkGatewayConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters75: coreHttp.OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: Mappers.VpnPacketCaptureStartParameters
};

export const parameters76: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VpnPacketCaptureStopParameters
};

export const virtualNetworkGatewayConnectionName5: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkGatewayConnectionName",
  mapper: {
    serializedName: "virtualNetworkGatewayConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters77: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.LocalNetworkGateway
};

export const localNetworkGatewayName: coreHttp.OperationURLParameter = {
  parameterPath: "localNetworkGatewayName",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "localNetworkGatewayName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters78: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagsObject
};

export const tapName: coreHttp.OperationURLParameter = {
  parameterPath: "tapName",
  mapper: {
    serializedName: "tapName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const tapName1: coreHttp.OperationURLParameter = {
  parameterPath: "tapName",
  mapper: {
    serializedName: "tapName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters79: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VirtualNetworkTap
};

export const tapParameters: coreHttp.OperationParameter = {
  parameterPath: "tapParameters",
  mapper: Mappers.TagsObject
};

export const tapName2: coreHttp.OperationURLParameter = {
  parameterPath: "tapName",
  mapper: {
    serializedName: "tapName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualRouterName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualRouterName",
  mapper: {
    serializedName: "virtualRouterName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters80: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VirtualRouter
};

export const peeringName1: coreHttp.OperationURLParameter = {
  parameterPath: "peeringName",
  mapper: {
    serializedName: "peeringName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters81: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VirtualRouterPeering
};

export const resourceGroupName6: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualWANName2: coreHttp.OperationURLParameter = {
  parameterPath: "virtualWANName",
  mapper: {
    serializedName: "VirtualWANName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const wANParameters: coreHttp.OperationParameter = {
  parameterPath: "wANParameters",
  mapper: Mappers.VirtualWAN
};

export const virtualWANName3: coreHttp.OperationURLParameter = {
  parameterPath: "virtualWANName",
  mapper: {
    serializedName: "VirtualWANName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const wANParameters1: coreHttp.OperationParameter = {
  parameterPath: "wANParameters",
  mapper: Mappers.TagsObject
};

export const virtualWANName4: coreHttp.OperationURLParameter = {
  parameterPath: "virtualWANName",
  mapper: {
    serializedName: "VirtualWANName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualWANName5: coreHttp.OperationURLParameter = {
  parameterPath: "virtualWANName",
  mapper: {
    serializedName: "VirtualWANName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName7: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vpnSiteName: coreHttp.OperationURLParameter = {
  parameterPath: "vpnSiteName",
  mapper: {
    serializedName: "vpnSiteName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vpnSiteParameters: coreHttp.OperationParameter = {
  parameterPath: "vpnSiteParameters",
  mapper: Mappers.VpnSite
};

export const vpnSiteName1: coreHttp.OperationURLParameter = {
  parameterPath: "vpnSiteName",
  mapper: {
    serializedName: "vpnSiteName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vpnSiteParameters1: coreHttp.OperationParameter = {
  parameterPath: "vpnSiteParameters",
  mapper: Mappers.TagsObject
};

export const vpnSiteName2: coreHttp.OperationURLParameter = {
  parameterPath: "vpnSiteName",
  mapper: {
    serializedName: "vpnSiteName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vpnSiteName3: coreHttp.OperationURLParameter = {
  parameterPath: "vpnSiteName",
  mapper: {
    serializedName: "vpnSiteName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vpnSiteName4: coreHttp.OperationURLParameter = {
  parameterPath: "vpnSiteName",
  mapper: {
    serializedName: "vpnSiteName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vpnSiteLinkName: coreHttp.OperationURLParameter = {
  parameterPath: "vpnSiteLinkName",
  mapper: {
    serializedName: "vpnSiteLinkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink20: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const request1: coreHttp.OperationParameter = {
  parameterPath: "request",
  mapper: Mappers.GetVpnSitesConfigurationRequest
};

export const virtualWANName6: coreHttp.OperationURLParameter = {
  parameterPath: "virtualWANName",
  mapper: {
    serializedName: "virtualWANName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName8: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vpnServerConfigurationName: coreHttp.OperationURLParameter = {
  parameterPath: "vpnServerConfigurationName",
  mapper: {
    serializedName: "vpnServerConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vpnServerConfigurationParameters: coreHttp.OperationParameter = {
  parameterPath: "vpnServerConfigurationParameters",
  mapper: Mappers.VpnServerConfiguration
};

export const vpnServerConfigurationName1: coreHttp.OperationURLParameter = {
  parameterPath: "vpnServerConfigurationName",
  mapper: {
    serializedName: "vpnServerConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vpnServerConfigurationParameters1: coreHttp.OperationParameter = {
  parameterPath: "vpnServerConfigurationParameters",
  mapper: Mappers.TagsObject
};

export const vpnServerConfigurationName2: coreHttp.OperationURLParameter = {
  parameterPath: "vpnServerConfigurationName",
  mapper: {
    serializedName: "vpnServerConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vpnServerConfigurationName3: coreHttp.OperationURLParameter = {
  parameterPath: "vpnServerConfigurationName",
  mapper: {
    serializedName: "vpnServerConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName9: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualHubName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualHubName",
  mapper: {
    serializedName: "virtualHubName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualHubParameters: coreHttp.OperationParameter = {
  parameterPath: "virtualHubParameters",
  mapper: Mappers.VirtualHub
};

export const virtualHubParameters1: coreHttp.OperationParameter = {
  parameterPath: "virtualHubParameters",
  mapper: Mappers.TagsObject
};

export const connectionName4: coreHttp.OperationURLParameter = {
  parameterPath: "connectionName",
  mapper: {
    serializedName: "connectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName10: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const gatewayName: coreHttp.OperationURLParameter = {
  parameterPath: "gatewayName",
  mapper: {
    serializedName: "gatewayName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vpnGatewayParameters: coreHttp.OperationParameter = {
  parameterPath: "vpnGatewayParameters",
  mapper: Mappers.VpnGateway
};

export const vpnGatewayParameters1: coreHttp.OperationParameter = {
  parameterPath: "vpnGatewayParameters",
  mapper: Mappers.TagsObject
};

export const vpnConnectionParameters: coreHttp.OperationParameter = {
  parameterPath: "vpnConnectionParameters",
  mapper: Mappers.VpnConnection
};

export const connectionName5: coreHttp.OperationURLParameter = {
  parameterPath: "connectionName",
  mapper: {
    serializedName: "connectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink21: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const linkConnectionName: coreHttp.OperationURLParameter = {
  parameterPath: "linkConnectionName",
  mapper: {
    serializedName: "linkConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink22: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceGroupName11: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const p2SVpnGatewayParameters: coreHttp.OperationParameter = {
  parameterPath: "p2SVpnGatewayParameters",
  mapper: Mappers.P2SVpnGateway
};

export const p2SVpnGatewayParameters1: coreHttp.OperationParameter = {
  parameterPath: "p2SVpnGatewayParameters",
  mapper: Mappers.TagsObject
};

export const parameters82: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.P2SVpnProfileParameters
};

export const gatewayName1: coreHttp.OperationURLParameter = {
  parameterPath: "gatewayName",
  mapper: {
    serializedName: "gatewayName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const request2: coreHttp.OperationParameter = {
  parameterPath: "request",
  mapper: Mappers.P2SVpnConnectionHealthRequest
};

export const request3: coreHttp.OperationParameter = {
  parameterPath: "request",
  mapper: Mappers.P2SVpnConnectionRequest
};

export const p2SVpnGatewayName: coreHttp.OperationURLParameter = {
  parameterPath: "p2SVpnGatewayName",
  mapper: {
    serializedName: "p2sVpnGatewayName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName12: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const routeTableName1: coreHttp.OperationURLParameter = {
  parameterPath: "routeTableName",
  mapper: {
    serializedName: "routeTableName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualHubRouteTableV2Parameters: coreHttp.OperationParameter = {
  parameterPath: "virtualHubRouteTableV2Parameters",
  mapper: Mappers.VirtualHubRouteTableV2
};

export const policyName: coreHttp.OperationURLParameter = {
  parameterPath: "policyName",
  mapper: {
    constraints: {
      MaxLength: 128
    },
    serializedName: "policyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters83: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.WebApplicationFirewallPolicy
};
