/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const CloudError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudErrorBody" } }
        }
      }
    }
  }
};

export const ApplicationGatewaySku: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewaySku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ApplicationGatewaySslPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewaySslPolicy",
    modelProperties: {
      disabledSslProtocols: {
        serializedName: "disabledSslProtocols",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      policyType: {
        serializedName: "policyType",
        type: {
          name: "String"
        }
      },
      policyName: {
        serializedName: "policyName",
        type: {
          name: "String"
        }
      },
      cipherSuites: {
        serializedName: "cipherSuites",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      minProtocolVersion: {
        serializedName: "minProtocolVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayProbeHealthResponseMatch: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayProbeHealthResponseMatch",
    modelProperties: {
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      },
      statusCodes: {
        serializedName: "statusCodes",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDnsConfigPropertiesFormat: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDnsConfigPropertiesFormat",
    modelProperties: {
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const NetworkInterfaceDnsSettings: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceDnsSettings",
    modelProperties: {
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      appliedDnsServers: {
        serializedName: "appliedDnsServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      internalDnsNameLabel: {
        serializedName: "internalDnsNameLabel",
        type: {
          name: "String"
        }
      },
      internalFqdn: {
        serializedName: "internalFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      internalDomainNameSuffix: {
        serializedName: "internalDomainNameSuffix",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RetentionPolicyParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetentionPolicyParameters",
    modelProperties: {
      days: {
        serializedName: "days",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FlowLogFormatParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlowLogFormatParameters",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TrafficAnalyticsProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficAnalyticsProperties",
    modelProperties: {
      networkWatcherFlowAnalyticsConfiguration: {
        serializedName: "networkWatcherFlowAnalyticsConfiguration",
        type: {
          name: "Composite",
          className: "TrafficAnalyticsConfigurationProperties"
        }
      }
    }
  }
};

export const TrafficAnalyticsConfigurationProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficAnalyticsConfigurationProperties",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      workspaceId: {
        serializedName: "workspaceId",
        type: {
          name: "String"
        }
      },
      workspaceRegion: {
        serializedName: "workspaceRegion",
        type: {
          name: "String"
        }
      },
      workspaceResourceId: {
        serializedName: "workspaceResourceId",
        type: {
          name: "String"
        }
      },
      trafficAnalyticsInterval: {
        serializedName: "trafficAnalyticsInterval",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServiceEndpointPropertiesFormat: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceEndpointPropertiesFormat",
    modelProperties: {
      service: {
        serializedName: "service",
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPAddressSku: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublicIPAddressSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPAddressDnsSettings: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublicIPAddressDnsSettings",
    modelProperties: {
      domainNameLabel: {
        serializedName: "domainNameLabel",
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      reverseFqdn: {
        serializedName: "reverseFqdn",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DdosSettings: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DdosSettings",
    modelProperties: {
      ddosCustomPolicy: {
        serializedName: "ddosCustomPolicy",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      protectionCoverage: {
        serializedName: "protectionCoverage",
        type: {
          name: "String"
        }
      },
      protectedIP: {
        serializedName: "protectedIP",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const IpTag: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpTag",
    modelProperties: {
      ipTagType: {
        serializedName: "ipTagType",
        type: {
          name: "String"
        }
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerBackendAddress: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerBackendAddress",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      virtualNetwork: {
        serializedName: "virtualNetwork",
        type: {
          name: "Composite",
          className: "VirtualNetwork"
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        type: {
          name: "String"
        }
      },
      networkInterfaceIPConfiguration: {
        serializedName: "networkInterfaceIPConfiguration",
        type: {
          name: "Composite",
          className: "NetworkInterfaceIPConfiguration"
        }
      }
    }
  }
};

export const AddressSpace: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddressSpace",
    modelProperties: {
      addressPrefixes: {
        serializedName: "addressPrefixes",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const DhcpOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DhcpOptions",
    modelProperties: {
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VirtualNetworkBgpCommunities: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkBgpCommunities",
    modelProperties: {
      virtualNetworkCommunity: {
        serializedName: "virtualNetworkCommunity",
        required: true,
        type: {
          name: "String"
        }
      },
      regionalCommunity: {
        serializedName: "regionalCommunity",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties",
    modelProperties: {
      groupId: {
        serializedName: "groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMemberName: {
        serializedName: "requiredMemberName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdns: {
        serializedName: "fqdns",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ApplicationGatewayBackendAddress: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendAddress",
    modelProperties: {
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayConnectionDraining: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayConnectionDraining",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      drainTimeoutInSec: {
        constraints: {
          InclusiveMaximum: 3600,
          InclusiveMinimum: 1
        },
        serializedName: "drainTimeoutInSec",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ApplicationGatewayCustomError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayCustomError",
    modelProperties: {
      statusCode: {
        serializedName: "statusCode",
        type: {
          name: "String"
        }
      },
      customErrorPageUrl: {
        serializedName: "customErrorPageUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayRewriteRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayRewriteRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      ruleSequence: {
        serializedName: "ruleSequence",
        type: {
          name: "Number"
        }
      },
      conditions: {
        serializedName: "conditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayRewriteRuleCondition"
            }
          }
        }
      },
      actionSet: {
        serializedName: "actionSet",
        type: {
          name: "Composite",
          className: "ApplicationGatewayRewriteRuleActionSet"
        }
      }
    }
  }
};

export const ApplicationGatewayRewriteRuleCondition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayRewriteRuleCondition",
    modelProperties: {
      variable: {
        serializedName: "variable",
        type: {
          name: "String"
        }
      },
      pattern: {
        serializedName: "pattern",
        type: {
          name: "String"
        }
      },
      ignoreCase: {
        serializedName: "ignoreCase",
        type: {
          name: "Boolean"
        }
      },
      negate: {
        serializedName: "negate",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ApplicationGatewayRewriteRuleActionSet: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayRewriteRuleActionSet",
    modelProperties: {
      requestHeaderConfigurations: {
        serializedName: "requestHeaderConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayHeaderConfiguration"
            }
          }
        }
      },
      responseHeaderConfigurations: {
        serializedName: "responseHeaderConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayHeaderConfiguration"
            }
          }
        }
      },
      urlConfiguration: {
        serializedName: "urlConfiguration",
        type: {
          name: "Composite",
          className: "ApplicationGatewayUrlConfiguration"
        }
      }
    }
  }
};

export const ApplicationGatewayHeaderConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayHeaderConfiguration",
    modelProperties: {
      headerName: {
        serializedName: "headerName",
        type: {
          name: "String"
        }
      },
      headerValue: {
        serializedName: "headerValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayUrlConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayUrlConfiguration",
    modelProperties: {
      modifiedPath: {
        serializedName: "modifiedPath",
        type: {
          name: "String"
        }
      },
      modifiedQueryString: {
        serializedName: "modifiedQueryString",
        type: {
          name: "String"
        }
      },
      reroute: {
        serializedName: "reroute",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ApplicationGatewayWebApplicationFirewallConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayWebApplicationFirewallConfiguration",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      firewallMode: {
        serializedName: "firewallMode",
        required: true,
        type: {
          name: "String"
        }
      },
      ruleSetType: {
        serializedName: "ruleSetType",
        required: true,
        type: {
          name: "String"
        }
      },
      ruleSetVersion: {
        serializedName: "ruleSetVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      disabledRuleGroups: {
        serializedName: "disabledRuleGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFirewallDisabledRuleGroup"
            }
          }
        }
      },
      requestBodyCheck: {
        serializedName: "requestBodyCheck",
        type: {
          name: "Boolean"
        }
      },
      maxRequestBodySize: {
        constraints: {
          InclusiveMaximum: 128,
          InclusiveMinimum: 8
        },
        serializedName: "maxRequestBodySize",
        type: {
          name: "Number"
        }
      },
      maxRequestBodySizeInKb: {
        constraints: {
          InclusiveMaximum: 128,
          InclusiveMinimum: 8
        },
        serializedName: "maxRequestBodySizeInKb",
        type: {
          name: "Number"
        }
      },
      fileUploadLimitInMb: {
        constraints: {},
        serializedName: "fileUploadLimitInMb",
        type: {
          name: "Number"
        }
      },
      exclusions: {
        serializedName: "exclusions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFirewallExclusion"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayFirewallDisabledRuleGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayFirewallDisabledRuleGroup",
    modelProperties: {
      ruleGroupName: {
        serializedName: "ruleGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: { type: { name: "Number" } }
        }
      }
    }
  }
};

export const ApplicationGatewayFirewallExclusion: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayFirewallExclusion",
    modelProperties: {
      matchVariable: {
        serializedName: "matchVariable",
        required: true,
        type: {
          name: "String"
        }
      },
      selectorMatchOperator: {
        serializedName: "selectorMatchOperator",
        required: true,
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayAutoscaleConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayAutoscaleConfiguration",
    modelProperties: {
      minCapacity: {
        constraints: {},
        serializedName: "minCapacity",
        required: true,
        type: {
          name: "Number"
        }
      },
      maxCapacity: {
        constraints: {
          InclusiveMinimum: 2
        },
        serializedName: "maxCapacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned, UserAssigned",
            "None"
          ]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className:
                "Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties"
            }
          }
        }
      }
    }
  }
};

export const Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TagsObject: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ApplicationGatewayListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ApplicationGateway" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayBackendHealth: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendHealth",
    modelProperties: {
      backendAddressPools: {
        serializedName: "backendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendHealthPool"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayBackendHealthPool: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendHealthPool",
    modelProperties: {
      backendAddressPool: {
        serializedName: "backendAddressPool",
        type: {
          name: "Composite",
          className: "ApplicationGatewayBackendAddressPool"
        }
      },
      backendHttpSettingsCollection: {
        serializedName: "backendHttpSettingsCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendHealthHttpSettings"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayBackendHealthHttpSettings: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendHealthHttpSettings",
    modelProperties: {
      backendHttpSettings: {
        serializedName: "backendHttpSettings",
        type: {
          name: "Composite",
          className: "ApplicationGatewayBackendHttpSettings"
        }
      },
      servers: {
        serializedName: "servers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendHealthServer"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayBackendHealthServer: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendHealthServer",
    modelProperties: {
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      ipConfiguration: {
        serializedName: "ipConfiguration",
        type: {
          name: "Composite",
          className: "NetworkInterfaceIPConfiguration"
        }
      },
      health: {
        serializedName: "health",
        type: {
          name: "String"
        }
      },
      healthProbeLog: {
        serializedName: "healthProbeLog",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayOnDemandProbe: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayOnDemandProbe",
    modelProperties: {
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      host: {
        serializedName: "host",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      timeout: {
        serializedName: "timeout",
        type: {
          name: "Number"
        }
      },
      pickHostNameFromBackendHttpSettings: {
        serializedName: "pickHostNameFromBackendHttpSettings",
        type: {
          name: "Boolean"
        }
      },
      match: {
        serializedName: "match",
        type: {
          name: "Composite",
          className: "ApplicationGatewayProbeHealthResponseMatch"
        }
      },
      backendAddressPool: {
        serializedName: "backendAddressPool",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      backendHttpSettings: {
        serializedName: "backendHttpSettings",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const ApplicationGatewayBackendHealthOnDemand: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendHealthOnDemand",
    modelProperties: {
      backendAddressPool: {
        serializedName: "backendAddressPool",
        type: {
          name: "Composite",
          className: "ApplicationGatewayBackendAddressPool"
        }
      },
      backendHealthHttpSettings: {
        serializedName: "backendHealthHttpSettings",
        type: {
          name: "Composite",
          className: "ApplicationGatewayBackendHealthHttpSettings"
        }
      }
    }
  }
};

export const ErrorModel: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ErrorDetails" } }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorDetails: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayAvailableWafRuleSetsResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayAvailableWafRuleSetsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFirewallRuleSet"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayFirewallRuleGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayFirewallRuleGroup",
    modelProperties: {
      ruleGroupName: {
        serializedName: "ruleGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "rules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFirewallRule"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayFirewallRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayFirewallRule",
    modelProperties: {
      ruleId: {
        serializedName: "ruleId",
        required: true,
        type: {
          name: "Number"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayAvailableSslPredefinedPolicies: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayAvailableSslPredefinedPolicies",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewaySslPredefinedPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationSecurityGroupListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationSecurityGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ApplicationSecurityGroup" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableDelegationsResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableDelegationsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AvailableDelegation" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableDelegation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableDelegation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      serviceName: {
        serializedName: "serviceName",
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "actions",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AvailableServiceAliasesResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableServiceAliasesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AvailableServiceAlias" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableServiceAlias: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableServiceAlias",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallRCAction: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallRCAction",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallApplicationRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallApplicationRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      sourceAddresses: {
        serializedName: "sourceAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      protocols: {
        serializedName: "protocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallApplicationRuleProtocol"
            }
          }
        }
      },
      targetFqdns: {
        serializedName: "targetFqdns",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      fqdnTags: {
        serializedName: "fqdnTags",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      sourceIpGroups: {
        serializedName: "sourceIpGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AzureFirewallApplicationRuleProtocol: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallApplicationRuleProtocol",
    modelProperties: {
      protocolType: {
        serializedName: "protocolType",
        type: {
          name: "String"
        }
      },
      port: {
        constraints: {
          InclusiveMaximum: 64000
        },
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AzureFirewallNatRCAction: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallNatRCAction",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallNatRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallNatRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      sourceAddresses: {
        serializedName: "sourceAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationAddresses: {
        serializedName: "destinationAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationPorts: {
        serializedName: "destinationPorts",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      protocols: {
        serializedName: "protocols",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      translatedAddress: {
        serializedName: "translatedAddress",
        type: {
          name: "String"
        }
      },
      translatedPort: {
        serializedName: "translatedPort",
        type: {
          name: "String"
        }
      },
      translatedFqdn: {
        serializedName: "translatedFqdn",
        type: {
          name: "String"
        }
      },
      sourceIpGroups: {
        serializedName: "sourceIpGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AzureFirewallNetworkRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallNetworkRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      protocols: {
        serializedName: "protocols",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      sourceAddresses: {
        serializedName: "sourceAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationAddresses: {
        serializedName: "destinationAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationPorts: {
        serializedName: "destinationPorts",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationFqdns: {
        serializedName: "destinationFqdns",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      sourceIpGroups: {
        serializedName: "sourceIpGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationIpGroups: {
        serializedName: "destinationIpGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const HubIPAddresses: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HubIPAddresses",
    modelProperties: {
      publicIPAddresses: {
        serializedName: "publicIPAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallPublicIPAddress"
            }
          }
        }
      },
      privateIPAddress: {
        serializedName: "privateIPAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallPublicIPAddress: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallPublicIPAddress",
    modelProperties: {
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallIpGroups: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallIpGroups",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      changeNumber: {
        serializedName: "changeNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallSku: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "AzureFirewall" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallFqdnTagListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallFqdnTagListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AzureFirewallFqdnTag" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BastionHostListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BastionHostListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "BastionHost" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BastionShareableLinkListRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BastionShareableLinkListRequest",
    modelProperties: {
      vms: {
        serializedName: "vms",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "BastionShareableLink" }
          }
        }
      }
    }
  }
};

export const BastionShareableLink: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BastionShareableLink",
    modelProperties: {
      vm: {
        serializedName: "vm",
        type: {
          name: "Composite",
          className: "Resource"
        }
      },
      bsl: {
        serializedName: "bsl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BastionShareableLinkListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BastionShareableLinkListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "BastionShareableLink" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BastionActiveSessionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BastionActiveSessionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "BastionActiveSession" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BastionActiveSession: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BastionActiveSession",
    modelProperties: {
      sessionId: {
        serializedName: "sessionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "any"
        }
      },
      targetSubscriptionId: {
        serializedName: "targetSubscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetHostName: {
        serializedName: "targetHostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetResourceGroup: {
        serializedName: "targetResourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "userName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetIpAddress: {
        serializedName: "targetIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetResourceId: {
        serializedName: "targetResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sessionDurationInMins: {
        serializedName: "sessionDurationInMins",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SessionIds: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionIds",
    modelProperties: {
      sessionIds: {
        serializedName: "sessionIds",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const BastionSessionDeleteResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BastionSessionDeleteResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "BastionSessionState" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BastionSessionState: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BastionSessionState",
    modelProperties: {
      sessionId: {
        serializedName: "sessionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DnsNameAvailabilityResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DnsNameAvailabilityResult",
    modelProperties: {
      available: {
        serializedName: "available",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ProtocolCustomSettingsFormat: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtocolCustomSettingsFormat",
    modelProperties: {
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      triggerRateOverride: {
        serializedName: "triggerRateOverride",
        type: {
          name: "String"
        }
      },
      sourceRateOverride: {
        serializedName: "sourceRateOverride",
        type: {
          name: "String"
        }
      },
      triggerSensitivityOverride: {
        serializedName: "triggerSensitivityOverride",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DdosProtectionPlan: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DdosProtectionPlan",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualNetworks: {
        serializedName: "properties.virtualNetworks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      }
    }
  }
};

export const DdosProtectionPlanListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DdosProtectionPlanListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DdosProtectionPlan" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointServicesListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointServicesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EndpointServiceResult" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthorizationListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthorizationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitAuthorization"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitPeeringConfig: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitPeeringConfig",
    modelProperties: {
      advertisedPublicPrefixes: {
        serializedName: "advertisedPublicPrefixes",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      advertisedCommunities: {
        serializedName: "advertisedCommunities",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      advertisedPublicPrefixesState: {
        serializedName: "advertisedPublicPrefixesState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      legacyMode: {
        serializedName: "legacyMode",
        type: {
          name: "Number"
        }
      },
      customerASN: {
        serializedName: "customerASN",
        type: {
          name: "Number"
        }
      },
      routingRegistryName: {
        serializedName: "routingRegistryName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitStats: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitStats",
    modelProperties: {
      primarybytesIn: {
        serializedName: "primarybytesIn",
        type: {
          name: "Number"
        }
      },
      primarybytesOut: {
        serializedName: "primarybytesOut",
        type: {
          name: "Number"
        }
      },
      secondarybytesIn: {
        serializedName: "secondarybytesIn",
        type: {
          name: "Number"
        }
      },
      secondarybytesOut: {
        serializedName: "secondarybytesOut",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Ipv6ExpressRouteCircuitPeeringConfig: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Ipv6ExpressRouteCircuitPeeringConfig",
    modelProperties: {
      primaryPeerAddressPrefix: {
        serializedName: "primaryPeerAddressPrefix",
        type: {
          name: "String"
        }
      },
      secondaryPeerAddressPrefix: {
        serializedName: "secondaryPeerAddressPrefix",
        type: {
          name: "String"
        }
      },
      microsoftPeeringConfig: {
        serializedName: "microsoftPeeringConfig",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitPeeringConfig"
        }
      },
      routeFilter: {
        serializedName: "routeFilter",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteConnectionId: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteConnectionId",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Ipv6CircuitConnectionConfig: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Ipv6CircuitConnectionConfig",
    modelProperties: {
      addressPrefix: {
        serializedName: "addressPrefix",
        type: {
          name: "String"
        }
      },
      circuitConnectionStatus: {
        serializedName: "circuitConnectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitPeeringListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitPeeringListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRouteCircuitPeering" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitConnectionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeerExpressRouteCircuitConnectionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeerExpressRouteCircuitConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeerExpressRouteCircuitConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitSku: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitServiceProviderProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitServiceProviderProperties",
    modelProperties: {
      serviceProviderName: {
        serializedName: "serviceProviderName",
        type: {
          name: "String"
        }
      },
      peeringLocation: {
        serializedName: "peeringLocation",
        type: {
          name: "String"
        }
      },
      bandwidthInMbps: {
        serializedName: "bandwidthInMbps",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExpressRouteCircuitsArpTableListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitsArpTableListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitArpTable"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitArpTable: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitArpTable",
    modelProperties: {
      age: {
        serializedName: "age",
        type: {
          name: "Number"
        }
      },
      interface: {
        serializedName: "interface",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitsRoutesTableListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitsRoutesTableListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitRoutesTable"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitRoutesTable: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitRoutesTable",
    modelProperties: {
      network: {
        serializedName: "network",
        type: {
          name: "String"
        }
      },
      nextHop: {
        serializedName: "nextHop",
        type: {
          name: "String"
        }
      },
      locPrf: {
        serializedName: "locPrf",
        type: {
          name: "String"
        }
      },
      weight: {
        serializedName: "weight",
        type: {
          name: "Number"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitsRoutesTableSummaryListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitsRoutesTableSummaryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitRoutesTableSummary"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitRoutesTableSummary: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitRoutesTableSummary",
    modelProperties: {
      neighbor: {
        serializedName: "neighbor",
        type: {
          name: "String"
        }
      },
      v: {
        serializedName: "v",
        type: {
          name: "Number"
        }
      },
      as: {
        serializedName: "as",
        type: {
          name: "Number"
        }
      },
      upDown: {
        serializedName: "upDown",
        type: {
          name: "String"
        }
      },
      statePfxRcd: {
        serializedName: "statePfxRcd",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRouteCircuit" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteServiceProviderListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteServiceProviderListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteServiceProvider"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteServiceProviderBandwidthsOffered: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteServiceProviderBandwidthsOffered",
    modelProperties: {
      offerName: {
        serializedName: "offerName",
        type: {
          name: "String"
        }
      },
      valueInMbps: {
        serializedName: "valueInMbps",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExpressRouteCrossConnectionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCrossConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCrossConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitReference: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitReference",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCrossConnectionPeeringList: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCrossConnectionPeeringList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCrossConnectionPeering"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCrossConnectionsRoutesTableSummaryListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCrossConnectionsRoutesTableSummaryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCrossConnectionRoutesTableSummary"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCrossConnectionRoutesTableSummary: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCrossConnectionRoutesTableSummary",
    modelProperties: {
      neighbor: {
        serializedName: "neighbor",
        type: {
          name: "String"
        }
      },
      asn: {
        serializedName: "asn",
        type: {
          name: "Number"
        }
      },
      upDown: {
        serializedName: "upDown",
        type: {
          name: "String"
        }
      },
      stateOrPrefixesReceived: {
        serializedName: "stateOrPrefixesReceived",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRoutePortsLocationListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRoutePortsLocationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRoutePortsLocation" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRoutePortsLocationBandwidths: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRoutePortsLocationBandwidths",
    modelProperties: {
      offerName: {
        serializedName: "offerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      valueInGbps: {
        serializedName: "valueInGbps",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExpressRouteLinkMacSecConfig: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteLinkMacSecConfig",
    modelProperties: {
      cknSecretIdentifier: {
        serializedName: "cknSecretIdentifier",
        type: {
          name: "String"
        }
      },
      cakSecretIdentifier: {
        serializedName: "cakSecretIdentifier",
        type: {
          name: "String"
        }
      },
      cipher: {
        serializedName: "cipher",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRoutePortListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRoutePortListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRoutePort" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteLinkListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteLinkListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRouteLink" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyThreatIntelWhitelist: coreHttp.CompositeMapper = {
  serializedName: "FirewallPolicyThreatIntelWhitelist",
  type: {
    name: "Composite",
    className: "FirewallPolicyThreatIntelWhitelist",
    modelProperties: {
      ipAddresses: {
        serializedName: "ipAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      fqdns: {
        serializedName: "fqdns",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const FirewallPolicyTransportSecurity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallPolicyTransportSecurity",
    modelProperties: {
      certificateAuthority: {
        serializedName: "certificateAuthority",
        type: {
          name: "Composite",
          className: "FirewallPolicyCertificateAuthority"
        }
      },
      excludedDomains: {
        serializedName: "excludedDomains",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      trustedRootCertificates: {
        serializedName: "trustedRootCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallPolicyTrustedRootCertificate"
            }
          }
        }
      }
    }
  }
};

export const FirewallPolicyCertificateAuthority: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallPolicyCertificateAuthority",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      keyVaultSecretId: {
        serializedName: "properties.keyVaultSecretId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyTrustedRootCertificate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallPolicyTrustedRootCertificate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      keyVaultSecretId: {
        serializedName: "properties.keyVaultSecretId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FirewallPolicy" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallPolicyRule",
    uberParent: "FirewallPolicyRule",
    polymorphicDiscriminator: {
      serializedName: "ruleType",
      clientName: "ruleType"
    },
    modelProperties: {
      ruleType: {
        serializedName: "ruleType",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 65000,
          InclusiveMinimum: 100
        },
        serializedName: "priority",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FirewallPolicyRuleGroupListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallPolicyRuleGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "FirewallPolicyRuleGroup" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpAllocationListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpAllocationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IpAllocation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpGroupListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IpGroup" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerSku: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "LoadBalancer" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerBackendAddressPoolListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerBackendAddressPoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "BackendAddressPool" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerFrontendIPConfigurationListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerFrontendIPConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "FrontendIPConfiguration" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InboundNatRuleListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InboundNatRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InboundNatRule" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerLoadBalancingRuleListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerLoadBalancingRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "LoadBalancingRule" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerOutboundRuleListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerOutboundRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OutboundRule" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NetworkInterface" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerProbeListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerProbeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Probe" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NatGatewaySku: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NatGatewaySku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NatGatewayListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NatGatewayListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NatGateway" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EffectiveRouteListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EffectiveRouteListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "EffectiveRoute" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EffectiveRoute: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EffectiveRoute",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      disableBgpRoutePropagation: {
        serializedName: "disableBgpRoutePropagation",
        type: {
          name: "Boolean"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      addressPrefix: {
        serializedName: "addressPrefix",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      nextHopIpAddress: {
        serializedName: "nextHopIpAddress",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      nextHopType: {
        serializedName: "nextHopType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EffectiveNetworkSecurityGroupListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EffectiveNetworkSecurityGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EffectiveNetworkSecurityGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EffectiveNetworkSecurityGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EffectiveNetworkSecurityGroup",
    modelProperties: {
      networkSecurityGroup: {
        serializedName: "networkSecurityGroup",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      association: {
        serializedName: "association",
        type: {
          name: "Composite",
          className: "EffectiveNetworkSecurityGroupAssociation"
        }
      },
      effectiveSecurityRules: {
        serializedName: "effectiveSecurityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EffectiveNetworkSecurityRule"
            }
          }
        }
      },
      tagMap: {
        serializedName: "tagMap",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EffectiveNetworkSecurityGroupAssociation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EffectiveNetworkSecurityGroupAssociation",
    modelProperties: {
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      networkInterface: {
        serializedName: "networkInterface",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const EffectiveNetworkSecurityRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EffectiveNetworkSecurityRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      sourcePortRange: {
        serializedName: "sourcePortRange",
        type: {
          name: "String"
        }
      },
      destinationPortRange: {
        serializedName: "destinationPortRange",
        type: {
          name: "String"
        }
      },
      sourcePortRanges: {
        serializedName: "sourcePortRanges",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationPortRanges: {
        serializedName: "destinationPortRanges",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      sourceAddressPrefix: {
        serializedName: "sourceAddressPrefix",
        type: {
          name: "String"
        }
      },
      destinationAddressPrefix: {
        serializedName: "destinationAddressPrefix",
        type: {
          name: "String"
        }
      },
      sourceAddressPrefixes: {
        serializedName: "sourceAddressPrefixes",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationAddressPrefixes: {
        serializedName: "destinationAddressPrefixes",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      expandedSourceAddressPrefix: {
        serializedName: "expandedSourceAddressPrefix",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      expandedDestinationAddressPrefix: {
        serializedName: "expandedDestinationAddressPrefix",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      access: {
        serializedName: "access",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      direction: {
        serializedName: "direction",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceIPConfigurationListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceIPConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceIPConfiguration"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceLoadBalancerListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceLoadBalancerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "LoadBalancer" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceTapConfigurationListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceTapConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceTapConfiguration"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerNetworkInterfaceIpConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerNetworkInterfaceIpConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkProfileListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfileListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkProfile" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkSecurityGroupListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkSecurityGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NetworkSecurityGroup" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityRuleListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SecurityRule" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualApplianceNicProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualApplianceNicProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicIpAddress: {
        serializedName: "publicIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIpAddress: {
        serializedName: "privateIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualApplianceSkuProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualApplianceSkuProperties",
    modelProperties: {
      vendor: {
        serializedName: "vendor",
        type: {
          name: "String"
        }
      },
      bundledScaleUnit: {
        serializedName: "bundledScaleUnit",
        type: {
          name: "String"
        }
      },
      marketPlaceVersion: {
        serializedName: "marketPlaceVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkVirtualApplianceListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkVirtualApplianceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NetworkVirtualAppliance" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const NetworkWatcherListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkWatcherListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkWatcher" } }
        }
      }
    }
  }
};

export const TopologyParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopologyParameters",
    modelProperties: {
      targetResourceGroupName: {
        serializedName: "targetResourceGroupName",
        type: {
          name: "String"
        }
      },
      targetVirtualNetwork: {
        serializedName: "targetVirtualNetwork",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      targetSubnet: {
        serializedName: "targetSubnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const Topology: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Topology",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        serializedName: "createdDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        serializedName: "lastModified",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TopologyResource" }
          }
        }
      }
    }
  }
};

export const TopologyResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopologyResource",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      associations: {
        serializedName: "associations",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TopologyAssociation" }
          }
        }
      }
    }
  }
};

export const TopologyAssociation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopologyAssociation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      associationType: {
        serializedName: "associationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VerificationIPFlowParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VerificationIPFlowParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      direction: {
        serializedName: "direction",
        required: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "String"
        }
      },
      localPort: {
        serializedName: "localPort",
        required: true,
        type: {
          name: "String"
        }
      },
      remotePort: {
        serializedName: "remotePort",
        required: true,
        type: {
          name: "String"
        }
      },
      localIPAddress: {
        serializedName: "localIPAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      remoteIPAddress: {
        serializedName: "remoteIPAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      targetNicResourceId: {
        serializedName: "targetNicResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VerificationIPFlowResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VerificationIPFlowResult",
    modelProperties: {
      access: {
        serializedName: "access",
        type: {
          name: "String"
        }
      },
      ruleName: {
        serializedName: "ruleName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NextHopParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NextHopParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceIPAddress: {
        serializedName: "sourceIPAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      destinationIPAddress: {
        serializedName: "destinationIPAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      targetNicResourceId: {
        serializedName: "targetNicResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NextHopResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NextHopResult",
    modelProperties: {
      nextHopType: {
        serializedName: "nextHopType",
        type: {
          name: "String"
        }
      },
      nextHopIpAddress: {
        serializedName: "nextHopIpAddress",
        type: {
          name: "String"
        }
      },
      routeTableId: {
        serializedName: "routeTableId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityGroupViewParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityGroupViewParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityGroupViewResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityGroupViewResult",
    modelProperties: {
      networkInterfaces: {
        serializedName: "networkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityGroupNetworkInterface"
            }
          }
        }
      }
    }
  }
};

export const SecurityGroupNetworkInterface: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityGroupNetworkInterface",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      securityRuleAssociations: {
        serializedName: "securityRuleAssociations",
        type: {
          name: "Composite",
          className: "SecurityRuleAssociations"
        }
      }
    }
  }
};

export const SecurityRuleAssociations: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityRuleAssociations",
    modelProperties: {
      networkInterfaceAssociation: {
        serializedName: "networkInterfaceAssociation",
        type: {
          name: "Composite",
          className: "NetworkInterfaceAssociation"
        }
      },
      subnetAssociation: {
        serializedName: "subnetAssociation",
        type: {
          name: "Composite",
          className: "SubnetAssociation"
        }
      },
      defaultSecurityRules: {
        serializedName: "defaultSecurityRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SecurityRule" } }
        }
      },
      effectiveSecurityRules: {
        serializedName: "effectiveSecurityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EffectiveNetworkSecurityRule"
            }
          }
        }
      }
    }
  }
};

export const NetworkInterfaceAssociation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceAssociation",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      securityRules: {
        serializedName: "securityRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SecurityRule" } }
        }
      }
    }
  }
};

export const SubnetAssociation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubnetAssociation",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      securityRules: {
        serializedName: "securityRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SecurityRule" } }
        }
      }
    }
  }
};

export const PacketCapture: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCapture",
    modelProperties: {
      target: {
        serializedName: "properties.target",
        required: true,
        type: {
          name: "String"
        }
      },
      bytesToCapturePerPacket: {
        serializedName: "properties.bytesToCapturePerPacket",
        type: {
          name: "Number"
        }
      },
      totalBytesPerSession: {
        defaultValue: 1073741824,
        serializedName: "properties.totalBytesPerSession",
        type: {
          name: "Number"
        }
      },
      timeLimitInSeconds: {
        defaultValue: 18000,
        serializedName: "properties.timeLimitInSeconds",
        type: {
          name: "Number"
        }
      },
      storageLocation: {
        serializedName: "storageLocation",
        type: {
          name: "Composite",
          className: "PacketCaptureStorageLocation"
        }
      },
      filters: {
        serializedName: "properties.filters",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PacketCaptureFilter" }
          }
        }
      }
    }
  }
};

export const PacketCaptureParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureParameters",
    modelProperties: {
      target: {
        serializedName: "target",
        required: true,
        type: {
          name: "String"
        }
      },
      bytesToCapturePerPacket: {
        serializedName: "bytesToCapturePerPacket",
        type: {
          name: "Number"
        }
      },
      totalBytesPerSession: {
        defaultValue: 1073741824,
        serializedName: "totalBytesPerSession",
        type: {
          name: "Number"
        }
      },
      timeLimitInSeconds: {
        defaultValue: 18000,
        serializedName: "timeLimitInSeconds",
        type: {
          name: "Number"
        }
      },
      storageLocation: {
        serializedName: "storageLocation",
        type: {
          name: "Composite",
          className: "PacketCaptureStorageLocation"
        }
      },
      filters: {
        serializedName: "filters",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PacketCaptureFilter" }
          }
        }
      }
    }
  }
};

export const PacketCaptureStorageLocation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureStorageLocation",
    modelProperties: {
      storageId: {
        serializedName: "storageId",
        type: {
          name: "String"
        }
      },
      storagePath: {
        serializedName: "storagePath",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "filePath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCaptureFilter: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureFilter",
    modelProperties: {
      protocol: {
        defaultValue: "Any",
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      localIPAddress: {
        serializedName: "localIPAddress",
        type: {
          name: "String"
        }
      },
      remoteIPAddress: {
        serializedName: "remoteIPAddress",
        type: {
          name: "String"
        }
      },
      localPort: {
        serializedName: "localPort",
        type: {
          name: "String"
        }
      },
      remotePort: {
        serializedName: "remotePort",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCaptureResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "properties.target",
        type: {
          name: "String"
        }
      },
      bytesToCapturePerPacket: {
        serializedName: "properties.bytesToCapturePerPacket",
        type: {
          name: "Number"
        }
      },
      totalBytesPerSession: {
        defaultValue: 1073741824,
        serializedName: "properties.totalBytesPerSession",
        type: {
          name: "Number"
        }
      },
      timeLimitInSeconds: {
        defaultValue: 18000,
        serializedName: "properties.timeLimitInSeconds",
        type: {
          name: "Number"
        }
      },
      storageLocation: {
        serializedName: "storageLocation",
        type: {
          name: "Composite",
          className: "PacketCaptureStorageLocation"
        }
      },
      filters: {
        serializedName: "properties.filters",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PacketCaptureFilter" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCaptureQueryStatusResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureQueryStatusResult",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      captureStartTime: {
        serializedName: "captureStartTime",
        type: {
          name: "DateTime"
        }
      },
      packetCaptureStatus: {
        serializedName: "packetCaptureStatus",
        type: {
          name: "String"
        }
      },
      stopReason: {
        serializedName: "stopReason",
        type: {
          name: "String"
        }
      },
      packetCaptureError: {
        serializedName: "packetCaptureError",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const PacketCaptureListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PacketCaptureResult" }
          }
        }
      }
    }
  }
};

export const TroubleshootingParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TroubleshootingParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      storageId: {
        serializedName: "properties.storageId",
        required: true,
        type: {
          name: "String"
        }
      },
      storagePath: {
        serializedName: "properties.storagePath",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TroubleshootingResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TroubleshootingResult",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      results: {
        serializedName: "results",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TroubleshootingDetails" }
          }
        }
      }
    }
  }
};

export const TroubleshootingDetails: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TroubleshootingDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      reasonType: {
        serializedName: "reasonType",
        type: {
          name: "String"
        }
      },
      summary: {
        serializedName: "summary",
        type: {
          name: "String"
        }
      },
      detail: {
        serializedName: "detail",
        type: {
          name: "String"
        }
      },
      recommendedActions: {
        serializedName: "recommendedActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TroubleshootingRecommendedActions"
            }
          }
        }
      }
    }
  }
};

export const TroubleshootingRecommendedActions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TroubleshootingRecommendedActions",
    modelProperties: {
      actionId: {
        serializedName: "actionId",
        type: {
          name: "String"
        }
      },
      actionText: {
        serializedName: "actionText",
        type: {
          name: "String"
        }
      },
      actionUri: {
        serializedName: "actionUri",
        type: {
          name: "String"
        }
      },
      actionUriText: {
        serializedName: "actionUriText",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryTroubleshootingParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryTroubleshootingParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FlowLogInformation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlowLogInformation",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      flowAnalyticsConfiguration: {
        serializedName: "flowAnalyticsConfiguration",
        type: {
          name: "Composite",
          className: "TrafficAnalyticsProperties"
        }
      },
      storageId: {
        serializedName: "properties.storageId",
        required: true,
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicyParameters"
        }
      },
      format: {
        serializedName: "format",
        type: {
          name: "Composite",
          className: "FlowLogFormatParameters"
        }
      }
    }
  }
};

export const FlowLogStatusParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlowLogStatusParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectivityParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivityParameters",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "ConnectivitySource"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "ConnectivityDestination"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      protocolConfiguration: {
        serializedName: "protocolConfiguration",
        type: {
          name: "Composite",
          className: "ProtocolConfiguration"
        }
      },
      preferredIPVersion: {
        serializedName: "preferredIPVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectivitySource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivitySource",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectivityDestination: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivityDestination",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ProtocolConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtocolConfiguration",
    modelProperties: {
      httpConfiguration: {
        serializedName: "HTTPConfiguration",
        type: {
          name: "Composite",
          className: "HttpConfiguration"
        }
      }
    }
  }
};

export const HttpConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpConfiguration",
    modelProperties: {
      method: {
        serializedName: "method",
        type: {
          name: "String"
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HttpHeader" } }
        }
      },
      validStatusCodes: {
        serializedName: "validStatusCodes",
        type: {
          name: "Sequence",
          element: { type: { name: "Number" } }
        }
      }
    }
  }
};

export const HttpHeader: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpHeader",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectivityInformation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivityInformation",
    modelProperties: {
      hops: {
        serializedName: "hops",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ConnectivityHop" } }
        }
      },
      connectionStatus: {
        serializedName: "connectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      avgLatencyInMs: {
        serializedName: "avgLatencyInMs",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minLatencyInMs: {
        serializedName: "minLatencyInMs",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxLatencyInMs: {
        serializedName: "maxLatencyInMs",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      probesSent: {
        serializedName: "probesSent",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      probesFailed: {
        serializedName: "probesFailed",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectivityHop: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivityHop",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nextHopIds: {
        serializedName: "nextHopIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      issues: {
        serializedName: "issues",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectivityIssue" }
          }
        }
      }
    }
  }
};

export const ConnectivityIssue: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivityIssue",
    modelProperties: {
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      context: {
        serializedName: "context",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Dictionary", value: { type: { name: "String" } } }
          }
        }
      }
    }
  }
};

export const AzureReachabilityReportParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureReachabilityReportParameters",
    modelProperties: {
      providerLocation: {
        serializedName: "providerLocation",
        type: {
          name: "Composite",
          className: "AzureReachabilityReportLocation"
        }
      },
      providers: {
        serializedName: "providers",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      azureLocations: {
        serializedName: "azureLocations",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AzureReachabilityReportLocation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureReachabilityReportLocation",
    modelProperties: {
      country: {
        serializedName: "country",
        required: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureReachabilityReport: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureReachabilityReport",
    modelProperties: {
      aggregationLevel: {
        serializedName: "aggregationLevel",
        required: true,
        type: {
          name: "String"
        }
      },
      providerLocation: {
        serializedName: "providerLocation",
        type: {
          name: "Composite",
          className: "AzureReachabilityReportLocation"
        }
      },
      reachabilityReport: {
        serializedName: "reachabilityReport",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureReachabilityReportItem"
            }
          }
        }
      }
    }
  }
};

export const AzureReachabilityReportItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureReachabilityReportItem",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      azureLocation: {
        serializedName: "azureLocation",
        type: {
          name: "String"
        }
      },
      latencies: {
        serializedName: "latencies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureReachabilityReportLatencyInfo"
            }
          }
        }
      }
    }
  }
};

export const AzureReachabilityReportLatencyInfo: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureReachabilityReportLatencyInfo",
    modelProperties: {
      timeStamp: {
        serializedName: "timeStamp",
        type: {
          name: "DateTime"
        }
      },
      score: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 1
        },
        serializedName: "score",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AvailableProvidersListParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableProvidersListParameters",
    modelProperties: {
      azureLocations: {
        serializedName: "azureLocations",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      country: {
        serializedName: "country",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableProvidersList: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableProvidersList",
    modelProperties: {
      countries: {
        serializedName: "countries",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableProvidersListCountry"
            }
          }
        }
      }
    }
  }
};

export const AvailableProvidersListCountry: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableProvidersListCountry",
    modelProperties: {
      countryName: {
        serializedName: "countryName",
        type: {
          name: "String"
        }
      },
      providers: {
        serializedName: "providers",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      states: {
        serializedName: "states",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableProvidersListState"
            }
          }
        }
      }
    }
  }
};

export const AvailableProvidersListState: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableProvidersListState",
    modelProperties: {
      stateName: {
        serializedName: "stateName",
        type: {
          name: "String"
        }
      },
      providers: {
        serializedName: "providers",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      cities: {
        serializedName: "cities",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AvailableProvidersListCity" }
          }
        }
      }
    }
  }
};

export const AvailableProvidersListCity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableProvidersListCity",
    modelProperties: {
      cityName: {
        serializedName: "cityName",
        type: {
          name: "String"
        }
      },
      providers: {
        serializedName: "providers",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const NetworkConfigurationDiagnosticParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConfigurationDiagnosticParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      verbosityLevel: {
        serializedName: "verbosityLevel",
        type: {
          name: "String"
        }
      },
      profiles: {
        serializedName: "profiles",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkConfigurationDiagnosticProfile"
            }
          }
        }
      }
    }
  }
};

export const NetworkConfigurationDiagnosticProfile: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConfigurationDiagnosticProfile",
    modelProperties: {
      direction: {
        serializedName: "direction",
        required: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        required: true,
        type: {
          name: "String"
        }
      },
      destination: {
        serializedName: "destination",
        required: true,
        type: {
          name: "String"
        }
      },
      destinationPort: {
        serializedName: "destinationPort",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkConfigurationDiagnosticResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConfigurationDiagnosticResponse",
    modelProperties: {
      results: {
        serializedName: "results",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkConfigurationDiagnosticResult"
            }
          }
        }
      }
    }
  }
};

export const NetworkConfigurationDiagnosticResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConfigurationDiagnosticResult",
    modelProperties: {
      profile: {
        serializedName: "profile",
        type: {
          name: "Composite",
          className: "NetworkConfigurationDiagnosticProfile"
        }
      },
      networkSecurityGroupResult: {
        serializedName: "networkSecurityGroupResult",
        type: {
          name: "Composite",
          className: "NetworkSecurityGroupResult"
        }
      }
    }
  }
};

export const NetworkSecurityGroupResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkSecurityGroupResult",
    modelProperties: {
      securityRuleAccessResult: {
        serializedName: "securityRuleAccessResult",
        type: {
          name: "String"
        }
      },
      evaluatedNetworkSecurityGroups: {
        serializedName: "evaluatedNetworkSecurityGroups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EvaluatedNetworkSecurityGroup"
            }
          }
        }
      }
    }
  }
};

export const EvaluatedNetworkSecurityGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EvaluatedNetworkSecurityGroup",
    modelProperties: {
      networkSecurityGroupId: {
        serializedName: "networkSecurityGroupId",
        type: {
          name: "String"
        }
      },
      appliedTo: {
        serializedName: "appliedTo",
        type: {
          name: "String"
        }
      },
      matchedRule: {
        serializedName: "matchedRule",
        type: {
          name: "Composite",
          className: "MatchedRule"
        }
      },
      rulesEvaluationResult: {
        serializedName: "rulesEvaluationResult",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkSecurityRulesEvaluationResult"
            }
          }
        }
      }
    }
  }
};

export const MatchedRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MatchedRule",
    modelProperties: {
      ruleName: {
        serializedName: "ruleName",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkSecurityRulesEvaluationResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkSecurityRulesEvaluationResult",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      protocolMatched: {
        serializedName: "protocolMatched",
        type: {
          name: "Boolean"
        }
      },
      sourceMatched: {
        serializedName: "sourceMatched",
        type: {
          name: "Boolean"
        }
      },
      sourcePortMatched: {
        serializedName: "sourcePortMatched",
        type: {
          name: "Boolean"
        }
      },
      destinationMatched: {
        serializedName: "destinationMatched",
        type: {
          name: "Boolean"
        }
      },
      destinationPortMatched: {
        serializedName: "destinationPortMatched",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ConnectionMonitor: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitor",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "ConnectionMonitorSource"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "ConnectionMonitorDestination"
        }
      },
      autoStart: {
        defaultValue: true,
        serializedName: "properties.autoStart",
        type: {
          name: "Boolean"
        }
      },
      monitoringIntervalInSeconds: {
        defaultValue: 60,
        serializedName: "properties.monitoringIntervalInSeconds",
        type: {
          name: "Number"
        }
      },
      endpoints: {
        serializedName: "properties.endpoints",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectionMonitorEndpoint" }
          }
        }
      },
      testConfigurations: {
        serializedName: "properties.testConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorTestConfiguration"
            }
          }
        }
      },
      testGroups: {
        serializedName: "properties.testGroups",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectionMonitorTestGroup" }
          }
        }
      },
      outputs: {
        serializedName: "properties.outputs",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectionMonitorOutput" }
          }
        }
      },
      notes: {
        serializedName: "properties.notes",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorParameters",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "ConnectionMonitorSource"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "ConnectionMonitorDestination"
        }
      },
      autoStart: {
        defaultValue: true,
        serializedName: "autoStart",
        type: {
          name: "Boolean"
        }
      },
      monitoringIntervalInSeconds: {
        defaultValue: 60,
        serializedName: "monitoringIntervalInSeconds",
        type: {
          name: "Number"
        }
      },
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectionMonitorEndpoint" }
          }
        }
      },
      testConfigurations: {
        serializedName: "testConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorTestConfiguration"
            }
          }
        }
      },
      testGroups: {
        serializedName: "testGroups",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectionMonitorTestGroup" }
          }
        }
      },
      outputs: {
        serializedName: "outputs",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectionMonitorOutput" }
          }
        }
      },
      notes: {
        serializedName: "notes",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorSource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorSource",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectionMonitorDestination: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorDestination",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectionMonitorEndpoint: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorEndpoint",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "ConnectionMonitorEndpointFilter"
        }
      }
    }
  }
};

export const ConnectionMonitorEndpointFilter: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorEndpointFilter",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      items: {
        serializedName: "items",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorEndpointFilterItem"
            }
          }
        }
      }
    }
  }
};

export const ConnectionMonitorEndpointFilterItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorEndpointFilterItem",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorTestConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorTestConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      testFrequencySec: {
        serializedName: "testFrequencySec",
        type: {
          name: "Number"
        }
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "String"
        }
      },
      preferredIPVersion: {
        serializedName: "preferredIPVersion",
        type: {
          name: "String"
        }
      },
      httpConfiguration: {
        serializedName: "httpConfiguration",
        type: {
          name: "Composite",
          className: "ConnectionMonitorHttpConfiguration"
        }
      },
      tcpConfiguration: {
        serializedName: "tcpConfiguration",
        type: {
          name: "Composite",
          className: "ConnectionMonitorTcpConfiguration"
        }
      },
      icmpConfiguration: {
        serializedName: "icmpConfiguration",
        type: {
          name: "Composite",
          className: "ConnectionMonitorIcmpConfiguration"
        }
      },
      successThreshold: {
        serializedName: "successThreshold",
        type: {
          name: "Composite",
          className: "ConnectionMonitorSuccessThreshold"
        }
      }
    }
  }
};

export const ConnectionMonitorHttpConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorHttpConfiguration",
    modelProperties: {
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      },
      method: {
        serializedName: "method",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      requestHeaders: {
        serializedName: "requestHeaders",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HttpHeader" } }
        }
      },
      validStatusCodeRanges: {
        serializedName: "validStatusCodeRanges",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      preferHttps: {
        serializedName: "preferHTTPS",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ConnectionMonitorTcpConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorTcpConfiguration",
    modelProperties: {
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      },
      disableTraceRoute: {
        serializedName: "disableTraceRoute",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ConnectionMonitorIcmpConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorIcmpConfiguration",
    modelProperties: {
      disableTraceRoute: {
        serializedName: "disableTraceRoute",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ConnectionMonitorSuccessThreshold: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorSuccessThreshold",
    modelProperties: {
      checksFailedPercent: {
        serializedName: "checksFailedPercent",
        type: {
          name: "Number"
        }
      },
      roundTripTimeMs: {
        serializedName: "roundTripTimeMs",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectionMonitorTestGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorTestGroup",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      disable: {
        serializedName: "disable",
        type: {
          name: "Boolean"
        }
      },
      testConfigurations: {
        serializedName: "testConfigurations",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      sources: {
        serializedName: "sources",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinations: {
        serializedName: "destinations",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ConnectionMonitorOutput: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorOutput",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      workspaceSettings: {
        serializedName: "workspaceSettings",
        type: {
          name: "Composite",
          className: "ConnectionMonitorWorkspaceSettings"
        }
      }
    }
  }
};

export const ConnectionMonitorWorkspaceSettings: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorWorkspaceSettings",
    modelProperties: {
      workspaceResourceId: {
        serializedName: "workspaceResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "ConnectionMonitorSource"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "ConnectionMonitorDestination"
        }
      },
      autoStart: {
        defaultValue: true,
        serializedName: "properties.autoStart",
        type: {
          name: "Boolean"
        }
      },
      monitoringIntervalInSeconds: {
        defaultValue: 60,
        serializedName: "properties.monitoringIntervalInSeconds",
        type: {
          name: "Number"
        }
      },
      endpoints: {
        serializedName: "properties.endpoints",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectionMonitorEndpoint" }
          }
        }
      },
      testConfigurations: {
        serializedName: "properties.testConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorTestConfiguration"
            }
          }
        }
      },
      testGroups: {
        serializedName: "properties.testGroups",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectionMonitorTestGroup" }
          }
        }
      },
      outputs: {
        serializedName: "properties.outputs",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectionMonitorOutput" }
          }
        }
      },
      notes: {
        serializedName: "properties.notes",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      monitoringStatus: {
        serializedName: "properties.monitoringStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectionMonitorType: {
        serializedName: "properties.connectionMonitorType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorQueryResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorQueryResult",
    modelProperties: {
      sourceStatus: {
        serializedName: "sourceStatus",
        type: {
          name: "String"
        }
      },
      states: {
        serializedName: "states",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectionStateSnapshot" }
          }
        }
      }
    }
  }
};

export const ConnectionStateSnapshot: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionStateSnapshot",
    modelProperties: {
      connectionState: {
        serializedName: "connectionState",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      evaluationState: {
        serializedName: "evaluationState",
        type: {
          name: "String"
        }
      },
      avgLatencyInMs: {
        serializedName: "avgLatencyInMs",
        type: {
          name: "Number"
        }
      },
      minLatencyInMs: {
        serializedName: "minLatencyInMs",
        type: {
          name: "Number"
        }
      },
      maxLatencyInMs: {
        serializedName: "maxLatencyInMs",
        type: {
          name: "Number"
        }
      },
      probesSent: {
        serializedName: "probesSent",
        type: {
          name: "Number"
        }
      },
      probesFailed: {
        serializedName: "probesFailed",
        type: {
          name: "Number"
        }
      },
      hops: {
        serializedName: "hops",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ConnectivityHop" } }
        }
      }
    }
  }
};

export const ConnectionMonitorListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectionMonitorResult" }
          }
        }
      }
    }
  }
};

export const FlowLogListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlowLogListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FlowLog" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "OperationPropertiesFormatServiceSpecification"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationPropertiesFormatServiceSpecification: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationPropertiesFormatServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricSpecification" }
          }
        }
      },
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "LogSpecification" }
          }
        }
      }
    }
  }
};

export const MetricSpecification: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      availabilities: {
        serializedName: "availabilities",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Availability" } }
        }
      },
      enableRegionalMdmAccount: {
        serializedName: "enableRegionalMdmAccount",
        type: {
          name: "Boolean"
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      metricFilterPattern: {
        serializedName: "metricFilterPattern",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Dimension" } }
        }
      },
      isInternal: {
        serializedName: "isInternal",
        type: {
          name: "Boolean"
        }
      },
      sourceMdmAccount: {
        serializedName: "sourceMdmAccount",
        type: {
          name: "String"
        }
      },
      sourceMdmNamespace: {
        serializedName: "sourceMdmNamespace",
        type: {
          name: "String"
        }
      },
      resourceIdDimensionNameOverride: {
        serializedName: "resourceIdDimensionNameOverride",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Availability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Availability",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      retention: {
        serializedName: "retention",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Dimension: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      internalName: {
        serializedName: "internalName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogSpecification: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PrivateEndpoint" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailablePrivateEndpointTypesResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailablePrivateEndpointTypesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailablePrivateEndpointType"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailablePrivateEndpointType: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailablePrivateEndpointType",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateDnsZoneConfig: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateDnsZoneConfig",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      privateDnsZoneId: {
        serializedName: "properties.privateDnsZoneId",
        type: {
          name: "String"
        }
      },
      recordSets: {
        serializedName: "properties.recordSets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RecordSet" } }
        }
      }
    }
  }
};

export const RecordSet: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecordSet",
    modelProperties: {
      recordType: {
        serializedName: "recordType",
        type: {
          name: "String"
        }
      },
      recordSetName: {
        serializedName: "recordSetName",
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        serializedName: "ttl",
        type: {
          name: "Number"
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const PrivateDnsZoneGroupListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateDnsZoneGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateDnsZoneGroup" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSet: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSet",
    modelProperties: {
      subscriptions: {
        serializedName: "subscriptions",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const PrivateLinkServiceListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateLinkService" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateEndpointConnection" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckPrivateLinkServiceVisibilityRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckPrivateLinkServiceVisibilityRequest",
    modelProperties: {
      privateLinkServiceAlias: {
        serializedName: "privateLinkServiceAlias",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceVisibility: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceVisibility",
    modelProperties: {
      visible: {
        serializedName: "visible",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AutoApprovedPrivateLinkServicesResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoApprovedPrivateLinkServicesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutoApprovedPrivateLinkService"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoApprovedPrivateLinkService: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoApprovedPrivateLinkService",
    modelProperties: {
      privateLinkService: {
        serializedName: "privateLinkService",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPAddressListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublicIPAddressListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PublicIPAddress" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPPrefixSku: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublicIPPrefixSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReferencedPublicIpAddress: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReferencedPublicIpAddress",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPPrefixListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublicIPPrefixListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PublicIPPrefix" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteFilterListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteFilterListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RouteFilter" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteFilterRuleListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteFilterRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RouteFilterRule" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteTableListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteTableListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RouteTable" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Route" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityPartnerProviderListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityPartnerProviderListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SecurityPartnerProvider" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BgpServiceCommunityListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BgpServiceCommunityListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "BgpServiceCommunity" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BGPCommunity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BGPCommunity",
    modelProperties: {
      serviceSupportedRegion: {
        serializedName: "serviceSupportedRegion",
        type: {
          name: "String"
        }
      },
      communityName: {
        serializedName: "communityName",
        type: {
          name: "String"
        }
      },
      communityValue: {
        serializedName: "communityValue",
        type: {
          name: "String"
        }
      },
      communityPrefixes: {
        serializedName: "communityPrefixes",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      isAuthorizedToUse: {
        serializedName: "isAuthorizedToUse",
        type: {
          name: "Boolean"
        }
      },
      serviceGroup: {
        serializedName: "serviceGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceEndpointPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceEndpointPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServiceEndpointPolicy" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceEndpointPolicyDefinitionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceEndpointPolicyDefinitionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceEndpointPolicyDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceTagsListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceTagsListResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      changeNumber: {
        serializedName: "changeNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      cloud: {
        serializedName: "cloud",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServiceTagInformation" }
          }
        }
      }
    }
  }
};

export const ServiceTagInformation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceTagInformation",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ServiceTagInformationPropertiesFormat"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceTagInformationPropertiesFormat: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceTagInformationPropertiesFormat",
    modelProperties: {
      changeNumber: {
        serializedName: "changeNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      region: {
        serializedName: "region",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemService: {
        serializedName: "systemService",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      addressPrefixes: {
        serializedName: "addressPrefixes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const UsagesListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsagesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Usage" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        required: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        required: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const UsageName: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VirtualNetwork" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrepareNetworkPoliciesRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrepareNetworkPoliciesRequest",
    modelProperties: {
      serviceName: {
        serializedName: "serviceName",
        type: {
          name: "String"
        }
      },
      networkIntentPolicyConfigurations: {
        serializedName: "networkIntentPolicyConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkIntentPolicyConfiguration"
            }
          }
        }
      }
    }
  }
};

export const NetworkIntentPolicyConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkIntentPolicyConfiguration",
    modelProperties: {
      networkIntentPolicyName: {
        serializedName: "networkIntentPolicyName",
        type: {
          name: "String"
        }
      },
      sourceNetworkIntentPolicy: {
        serializedName: "sourceNetworkIntentPolicy",
        type: {
          name: "Composite",
          className: "NetworkIntentPolicy"
        }
      }
    }
  }
};

export const UnprepareNetworkPoliciesRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnprepareNetworkPoliciesRequest",
    modelProperties: {
      serviceName: {
        serializedName: "serviceName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceNavigationLinksListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceNavigationLinksListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ResourceNavigationLink" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceAssociationLinksListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceAssociationLinksListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServiceAssociationLink" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubnetListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubnetListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Subnet" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkPeeringListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkPeeringListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkPeering" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IPAddressAvailabilityResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IPAddressAvailabilityResult",
    modelProperties: {
      available: {
        serializedName: "available",
        type: {
          name: "Boolean"
        }
      },
      availableIPAddresses: {
        serializedName: "availableIPAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VirtualNetworkListUsageResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkListUsageResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkUsage" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkUsage: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkUsage",
    modelProperties: {
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "VirtualNetworkUsageName"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkUsageName: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkUsageName",
    modelProperties: {
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGatewaySku: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewaySku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VpnClientConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnClientConfiguration",
    modelProperties: {
      vpnClientAddressPool: {
        serializedName: "vpnClientAddressPool",
        type: {
          name: "Composite",
          className: "AddressSpace"
        }
      },
      vpnClientRootCertificates: {
        serializedName: "vpnClientRootCertificates",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VpnClientRootCertificate" }
          }
        }
      },
      vpnClientRevokedCertificates: {
        serializedName: "vpnClientRevokedCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VpnClientRevokedCertificate"
            }
          }
        }
      },
      vpnClientProtocols: {
        serializedName: "vpnClientProtocols",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      vpnClientIpsecPolicies: {
        serializedName: "vpnClientIpsecPolicies",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IpsecPolicy" } }
        }
      },
      radiusServerAddress: {
        serializedName: "radiusServerAddress",
        type: {
          name: "String"
        }
      },
      radiusServerSecret: {
        serializedName: "radiusServerSecret",
        type: {
          name: "String"
        }
      },
      radiusServers: {
        serializedName: "radiusServers",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RadiusServer" } }
        }
      },
      aadTenant: {
        serializedName: "aadTenant",
        type: {
          name: "String"
        }
      },
      aadAudience: {
        serializedName: "aadAudience",
        type: {
          name: "String"
        }
      },
      aadIssuer: {
        serializedName: "aadIssuer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpsecPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpsecPolicy",
    modelProperties: {
      saLifeTimeSeconds: {
        serializedName: "saLifeTimeSeconds",
        required: true,
        type: {
          name: "Number"
        }
      },
      saDataSizeKilobytes: {
        serializedName: "saDataSizeKilobytes",
        required: true,
        type: {
          name: "Number"
        }
      },
      ipsecEncryption: {
        serializedName: "ipsecEncryption",
        required: true,
        type: {
          name: "String"
        }
      },
      ipsecIntegrity: {
        serializedName: "ipsecIntegrity",
        required: true,
        type: {
          name: "String"
        }
      },
      ikeEncryption: {
        serializedName: "ikeEncryption",
        required: true,
        type: {
          name: "String"
        }
      },
      ikeIntegrity: {
        serializedName: "ikeIntegrity",
        required: true,
        type: {
          name: "String"
        }
      },
      dhGroup: {
        serializedName: "dhGroup",
        required: true,
        type: {
          name: "String"
        }
      },
      pfsGroup: {
        serializedName: "pfsGroup",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RadiusServer: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RadiusServer",
    modelProperties: {
      radiusServerAddress: {
        serializedName: "radiusServerAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      radiusServerScore: {
        serializedName: "radiusServerScore",
        type: {
          name: "Number"
        }
      },
      radiusServerSecret: {
        serializedName: "radiusServerSecret",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BgpSettings: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BgpSettings",
    modelProperties: {
      asn: {
        constraints: {
          InclusiveMaximum: 4294967295
        },
        serializedName: "asn",
        type: {
          name: "Number"
        }
      },
      bgpPeeringAddress: {
        serializedName: "bgpPeeringAddress",
        type: {
          name: "String"
        }
      },
      peerWeight: {
        serializedName: "peerWeight",
        type: {
          name: "Number"
        }
      },
      bgpPeeringAddresses: {
        serializedName: "bgpPeeringAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPConfigurationBgpPeeringAddress"
            }
          }
        }
      }
    }
  }
};

export const IPConfigurationBgpPeeringAddress: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IPConfigurationBgpPeeringAddress",
    modelProperties: {
      ipconfigurationId: {
        serializedName: "ipconfigurationId",
        type: {
          name: "String"
        }
      },
      defaultBgpIpAddresses: {
        serializedName: "defaultBgpIpAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      customBgpIpAddresses: {
        serializedName: "customBgpIpAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      tunnelIpAddresses: {
        serializedName: "tunnelIpAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VirtualNetworkGatewayListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewayListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkGateway" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGatewayListConnectionsResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewayListConnectionsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkGatewayConnectionListEntity"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkConnectionGatewayReference: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkConnectionGatewayReference",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TunnelConnectionHealth: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TunnelConnectionHealth",
    modelProperties: {
      tunnel: {
        serializedName: "tunnel",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectionStatus: {
        serializedName: "connectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ingressBytesTransferred: {
        serializedName: "ingressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      egressBytesTransferred: {
        serializedName: "egressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastConnectionEstablishedUtcTime: {
        serializedName: "lastConnectionEstablishedUtcTime",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrafficSelectorPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficSelectorPolicy",
    modelProperties: {
      localAddressRanges: {
        serializedName: "localAddressRanges",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      remoteAddressRanges: {
        serializedName: "remoteAddressRanges",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VpnClientParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnClientParameters",
    modelProperties: {
      processorArchitecture: {
        serializedName: "processorArchitecture",
        type: {
          name: "String"
        }
      },
      authenticationMethod: {
        serializedName: "authenticationMethod",
        type: {
          name: "String"
        }
      },
      radiusServerAuthCertificate: {
        serializedName: "radiusServerAuthCertificate",
        type: {
          name: "String"
        }
      },
      clientRootCertificates: {
        serializedName: "clientRootCertificates",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const BgpPeerStatusListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BgpPeerStatusListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "BgpPeerStatus" } }
        }
      }
    }
  }
};

export const BgpPeerStatus: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BgpPeerStatus",
    modelProperties: {
      localAddress: {
        serializedName: "localAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      neighbor: {
        serializedName: "neighbor",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      asn: {
        constraints: {
          InclusiveMaximum: 4294967295
        },
        serializedName: "asn",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectedDuration: {
        serializedName: "connectedDuration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      routesReceived: {
        serializedName: "routesReceived",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      messagesSent: {
        serializedName: "messagesSent",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      messagesReceived: {
        serializedName: "messagesReceived",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GatewayRouteListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayRouteListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "GatewayRoute" } }
        }
      }
    }
  }
};

export const GatewayRoute: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayRoute",
    modelProperties: {
      localAddress: {
        serializedName: "localAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      network: {
        serializedName: "network",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nextHop: {
        serializedName: "nextHop",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourcePeer: {
        serializedName: "sourcePeer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      asPath: {
        serializedName: "asPath",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      weight: {
        serializedName: "weight",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VpnClientIPsecParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnClientIPsecParameters",
    modelProperties: {
      saLifeTimeSeconds: {
        serializedName: "saLifeTimeSeconds",
        required: true,
        type: {
          name: "Number"
        }
      },
      saDataSizeKilobytes: {
        serializedName: "saDataSizeKilobytes",
        required: true,
        type: {
          name: "Number"
        }
      },
      ipsecEncryption: {
        serializedName: "ipsecEncryption",
        required: true,
        type: {
          name: "String"
        }
      },
      ipsecIntegrity: {
        serializedName: "ipsecIntegrity",
        required: true,
        type: {
          name: "String"
        }
      },
      ikeEncryption: {
        serializedName: "ikeEncryption",
        required: true,
        type: {
          name: "String"
        }
      },
      ikeIntegrity: {
        serializedName: "ikeIntegrity",
        required: true,
        type: {
          name: "String"
        }
      },
      dhGroup: {
        serializedName: "dhGroup",
        required: true,
        type: {
          name: "String"
        }
      },
      pfsGroup: {
        serializedName: "pfsGroup",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnDeviceScriptParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnDeviceScriptParameters",
    modelProperties: {
      vendor: {
        serializedName: "vendor",
        type: {
          name: "String"
        }
      },
      deviceFamily: {
        serializedName: "deviceFamily",
        type: {
          name: "String"
        }
      },
      firmwareVersion: {
        serializedName: "firmwareVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnPacketCaptureStartParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnPacketCaptureStartParameters",
    modelProperties: {
      filterData: {
        serializedName: "filterData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnPacketCaptureStopParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnPacketCaptureStopParameters",
    modelProperties: {
      sasUrl: {
        serializedName: "sasUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGatewayConnectionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewayConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkGatewayConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionResetSharedKey: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionResetSharedKey",
    modelProperties: {
      keyLength: {
        constraints: {
          InclusiveMaximum: 128,
          InclusiveMinimum: 1
        },
        serializedName: "keyLength",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LocalNetworkGatewayListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocalNetworkGatewayListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "LocalNetworkGateway" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnClientConnectionHealthDetailListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnClientConnectionHealthDetailListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VpnClientConnectionHealthDetail"
            }
          }
        }
      }
    }
  }
};

export const VpnClientConnectionHealthDetail: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnClientConnectionHealthDetail",
    modelProperties: {
      vpnConnectionId: {
        serializedName: "vpnConnectionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vpnConnectionDuration: {
        serializedName: "vpnConnectionDuration",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      vpnConnectionTime: {
        serializedName: "vpnConnectionTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicIpAddress: {
        serializedName: "publicIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIpAddress: {
        serializedName: "privateIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vpnUserName: {
        serializedName: "vpnUserName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxBandwidth: {
        serializedName: "maxBandwidth",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      egressPacketsTransferred: {
        serializedName: "egressPacketsTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      egressBytesTransferred: {
        serializedName: "egressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      ingressPacketsTransferred: {
        serializedName: "ingressPacketsTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      ingressBytesTransferred: {
        serializedName: "ingressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxPacketsPerSecond: {
        serializedName: "maxPacketsPerSecond",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const P2SVpnConnectionRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "P2SVpnConnectionRequest",
    modelProperties: {
      vpnConnectionIds: {
        serializedName: "vpnConnectionIds",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VirtualNetworkTapListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkTapListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkTap" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualRouterListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualRouterListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VirtualRouter" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualRouterPeeringListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualRouterPeeringListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualRouterPeering" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListVirtualWANsResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListVirtualWANsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VirtualWAN" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceProperties",
    modelProperties: {
      deviceVendor: {
        serializedName: "deviceVendor",
        type: {
          name: "String"
        }
      },
      deviceModel: {
        serializedName: "deviceModel",
        type: {
          name: "String"
        }
      },
      linkSpeedInMbps: {
        serializedName: "linkSpeedInMbps",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VpnLinkProviderProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnLinkProviderProperties",
    modelProperties: {
      linkProviderName: {
        serializedName: "linkProviderName",
        type: {
          name: "String"
        }
      },
      linkSpeedInMbps: {
        serializedName: "linkSpeedInMbps",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VpnLinkBgpSettings: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnLinkBgpSettings",
    modelProperties: {
      asn: {
        serializedName: "asn",
        type: {
          name: "Number"
        }
      },
      bgpPeeringAddress: {
        serializedName: "bgpPeeringAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListVpnSitesResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListVpnSitesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VpnSite" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListVpnSiteLinksResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListVpnSiteLinksResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VpnSiteLink" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetVpnSitesConfigurationRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetVpnSitesConfigurationRequest",
    modelProperties: {
      vpnSites: {
        serializedName: "vpnSites",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      outputBlobSasUrl: {
        serializedName: "outputBlobSasUrl",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualWanSecurityProviders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualWanSecurityProviders",
    modelProperties: {
      supportedProviders: {
        serializedName: "supportedProviders",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualWanSecurityProvider" }
          }
        }
      }
    }
  }
};

export const VirtualWanSecurityProvider: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualWanSecurityProvider",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnServerConfigVpnClientRootCertificate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnServerConfigVpnClientRootCertificate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      publicCertData: {
        serializedName: "publicCertData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnServerConfigVpnClientRevokedCertificate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnServerConfigVpnClientRevokedCertificate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnServerConfigRadiusServerRootCertificate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnServerConfigRadiusServerRootCertificate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      publicCertData: {
        serializedName: "publicCertData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnServerConfigRadiusClientRootCertificate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnServerConfigRadiusClientRootCertificate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AadAuthenticationParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AadAuthenticationParameters",
    modelProperties: {
      aadTenant: {
        serializedName: "aadTenant",
        type: {
          name: "String"
        }
      },
      aadAudience: {
        serializedName: "aadAudience",
        type: {
          name: "String"
        }
      },
      aadIssuer: {
        serializedName: "aadIssuer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutingConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutingConfiguration",
    modelProperties: {
      associatedRouteTable: {
        serializedName: "associatedRouteTable",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      propagatedRouteTables: {
        serializedName: "propagatedRouteTables",
        type: {
          name: "Composite",
          className: "PropagatedRouteTable"
        }
      },
      vnetRoutes: {
        serializedName: "vnetRoutes",
        type: {
          name: "Composite",
          className: "VnetRoute"
        }
      }
    }
  }
};

export const PropagatedRouteTable: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PropagatedRouteTable",
    modelProperties: {
      labels: {
        serializedName: "labels",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      ids: {
        serializedName: "ids",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      }
    }
  }
};

export const VnetRoute: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VnetRoute",
    modelProperties: {
      staticRoutes: {
        serializedName: "staticRoutes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "StaticRoute" } }
        }
      }
    }
  }
};

export const StaticRoute: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StaticRoute",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      addressPrefixes: {
        serializedName: "addressPrefixes",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      nextHopIpAddress: {
        serializedName: "nextHopIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnClientConnectionHealth: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnClientConnectionHealth",
    modelProperties: {
      totalIngressBytesTransferred: {
        serializedName: "totalIngressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalEgressBytesTransferred: {
        serializedName: "totalEgressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      vpnClientConnectionsCount: {
        serializedName: "vpnClientConnectionsCount",
        type: {
          name: "Number"
        }
      },
      allocatedIpAddresses: {
        serializedName: "allocatedIpAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ListVpnServerConfigurationsResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListVpnServerConfigurationsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VpnServerConfiguration" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualHubRouteTable: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualHubRouteTable",
    modelProperties: {
      routes: {
        serializedName: "routes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VirtualHubRoute" } }
        }
      }
    }
  }
};

export const VirtualHubRoute: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualHubRoute",
    modelProperties: {
      addressPrefixes: {
        serializedName: "addressPrefixes",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      nextHopIpAddress: {
        serializedName: "nextHopIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualHubRouteV2: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualHubRouteV2",
    modelProperties: {
      destinationType: {
        serializedName: "destinationType",
        type: {
          name: "String"
        }
      },
      destinations: {
        serializedName: "destinations",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      nextHopType: {
        serializedName: "nextHopType",
        type: {
          name: "String"
        }
      },
      nextHops: {
        serializedName: "nextHops",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ListVirtualHubsResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListVirtualHubsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VirtualHub" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListHubVirtualNetworkConnectionsResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListHubVirtualNetworkConnectionsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HubVirtualNetworkConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListVpnGatewaysResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListVpnGatewaysResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VpnGateway" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListVpnConnectionsResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListVpnConnectionsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VpnConnection" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListVpnSiteLinkConnectionsResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListVpnSiteLinkConnectionsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VpnSiteLinkConnection" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListP2SVpnGatewaysResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListP2SVpnGatewaysResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "P2SVpnGateway" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const P2SVpnProfileParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "P2SVpnProfileParameters",
    modelProperties: {
      authenticationMethod: {
        serializedName: "authenticationMethod",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnProfileResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnProfileResponse",
    modelProperties: {
      profileUrl: {
        serializedName: "profileUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const P2SVpnConnectionHealthRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "P2SVpnConnectionHealthRequest",
    modelProperties: {
      vpnUserNamesFilter: {
        serializedName: "vpnUserNamesFilter",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      outputBlobSasUrl: {
        serializedName: "outputBlobSasUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const P2SVpnConnectionHealth: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "P2SVpnConnectionHealth",
    modelProperties: {
      sasUrl: {
        serializedName: "sasUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnServerConfigurationsResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnServerConfigurationsResponse",
    modelProperties: {
      vpnServerConfigurationResourceIds: {
        serializedName: "vpnServerConfigurationResourceIds",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VirtualWanVpnProfileParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualWanVpnProfileParameters",
    modelProperties: {
      vpnServerConfigurationResourceId: {
        serializedName: "vpnServerConfigurationResourceId",
        type: {
          name: "String"
        }
      },
      authenticationMethod: {
        serializedName: "authenticationMethod",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListVirtualHubRouteTableV2SResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListVirtualHubRouteTableV2SResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualHubRouteTableV2" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteGatewayList: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteGatewayList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRouteGateway" }
          }
        }
      }
    }
  }
};

export const ExpressRouteGatewayPropertiesAutoScaleConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteGatewayPropertiesAutoScaleConfiguration",
    modelProperties: {
      bounds: {
        serializedName: "bounds",
        type: {
          name: "Composite",
          className: "ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds"
        }
      }
    }
  }
};

export const ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds",
    modelProperties: {
      min: {
        serializedName: "min",
        type: {
          name: "Number"
        }
      },
      max: {
        serializedName: "max",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExpressRouteCircuitPeeringId: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitPeeringId",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualHubId: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualHubId",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteConnectionList: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteConnectionList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRouteConnection" }
          }
        }
      }
    }
  }
};

export const HubRoute: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HubRoute",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      destinationType: {
        serializedName: "destinationType",
        required: true,
        type: {
          name: "String"
        }
      },
      destinations: {
        serializedName: "destinations",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      nextHopType: {
        serializedName: "nextHopType",
        required: true,
        type: {
          name: "String"
        }
      },
      nextHop: {
        serializedName: "nextHop",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListHubRouteTablesResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListHubRouteTablesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HubRouteTable" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebApplicationFirewallPolicyListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebApplicationFirewallPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebApplicationFirewallPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicySettings: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicySettings",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      requestBodyCheck: {
        serializedName: "requestBodyCheck",
        type: {
          name: "Boolean"
        }
      },
      maxRequestBodySizeInKb: {
        constraints: {
          InclusiveMaximum: 128,
          InclusiveMinimum: 8
        },
        serializedName: "maxRequestBodySizeInKb",
        type: {
          name: "Number"
        }
      },
      fileUploadLimitInMb: {
        constraints: {},
        serializedName: "fileUploadLimitInMb",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WebApplicationFirewallCustomRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebApplicationFirewallCustomRule",
    modelProperties: {
      name: {
        constraints: {
          MaxLength: 128
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        required: true,
        type: {
          name: "Number"
        }
      },
      ruleType: {
        serializedName: "ruleType",
        required: true,
        type: {
          name: "String"
        }
      },
      matchConditions: {
        serializedName: "matchConditions",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MatchCondition" } }
        }
      },
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MatchCondition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MatchCondition",
    modelProperties: {
      matchVariables: {
        serializedName: "matchVariables",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MatchVariable" } }
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negationConditon: {
        serializedName: "negationConditon",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const MatchVariable: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MatchVariable",
    modelProperties: {
      variableName: {
        serializedName: "variableName",
        required: true,
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRulesDefinition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRulesDefinition",
    modelProperties: {
      exclusions: {
        serializedName: "exclusions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "OwaspCrsExclusionEntry" }
          }
        }
      },
      managedRuleSets: {
        serializedName: "managedRuleSets",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ManagedRuleSet" } }
        }
      }
    }
  }
};

export const OwaspCrsExclusionEntry: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OwaspCrsExclusionEntry",
    modelProperties: {
      matchVariable: {
        serializedName: "matchVariable",
        required: true,
        type: {
          name: "String"
        }
      },
      selectorMatchOperator: {
        serializedName: "selectorMatchOperator",
        required: true,
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRuleSet: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleSet",
    modelProperties: {
      ruleSetType: {
        serializedName: "ruleSetType",
        required: true,
        type: {
          name: "String"
        }
      },
      ruleSetVersion: {
        serializedName: "ruleSetVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      ruleGroupOverrides: {
        serializedName: "ruleGroupOverrides",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ManagedRuleGroupOverride" }
          }
        }
      }
    }
  }
};

export const ManagedRuleGroupOverride: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleGroupOverride",
    modelProperties: {
      ruleGroupName: {
        serializedName: "ruleGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ManagedRuleOverride" }
          }
        }
      }
    }
  }
};

export const ManagedRuleOverride: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleOverride",
    modelProperties: {
      ruleId: {
        serializedName: "ruleId",
        required: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyNatRuleAction: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallPolicyNatRuleAction",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyRuleCondition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallPolicyRuleCondition",
    uberParent: "FirewallPolicyRuleCondition",
    polymorphicDiscriminator: {
      serializedName: "ruleConditionType",
      clientName: "ruleConditionType"
    },
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      ruleConditionType: {
        serializedName: "ruleConditionType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyFilterRuleAction: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallPolicyFilterRuleAction",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyRuleConditionApplicationProtocol: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallPolicyRuleConditionApplicationProtocol",
    modelProperties: {
      protocolType: {
        serializedName: "protocolType",
        type: {
          name: "String"
        }
      },
      port: {
        constraints: {
          InclusiveMaximum: 64000
        },
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AzureAsyncOperationResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureAsyncOperationResult",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const VpnSiteId: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnSiteId",
    modelProperties: {
      vpnSite: {
        serializedName: "vpnSite",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayIPConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayIPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayAuthenticationCertificate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayAuthenticationCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "properties.data",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayTrustedRootCertificate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayTrustedRootCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "properties.data",
        type: {
          name: "String"
        }
      },
      keyVaultSecretId: {
        serializedName: "properties.keyVaultSecretId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewaySslCertificate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewaySslCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "properties.data",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      publicCertData: {
        serializedName: "properties.publicCertData",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      keyVaultSecretId: {
        serializedName: "properties.keyVaultSecretId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayFrontendIPConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayFrontendIPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIPAddress: {
        serializedName: "properties.privateIPAddress",
        type: {
          name: "String"
        }
      },
      privateIPAllocationMethod: {
        serializedName: "properties.privateIPAllocationMethod",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      publicIPAddress: {
        serializedName: "publicIPAddress",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayFrontendPort: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayFrontendPort",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayProbe: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayProbe",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      host: {
        serializedName: "properties.host",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "properties.path",
        type: {
          name: "String"
        }
      },
      interval: {
        serializedName: "properties.interval",
        type: {
          name: "Number"
        }
      },
      timeout: {
        serializedName: "properties.timeout",
        type: {
          name: "Number"
        }
      },
      unhealthyThreshold: {
        serializedName: "properties.unhealthyThreshold",
        type: {
          name: "Number"
        }
      },
      pickHostNameFromBackendHttpSettings: {
        serializedName: "properties.pickHostNameFromBackendHttpSettings",
        type: {
          name: "Boolean"
        }
      },
      minServers: {
        serializedName: "properties.minServers",
        type: {
          name: "Number"
        }
      },
      match: {
        serializedName: "match",
        type: {
          name: "Composite",
          className: "ApplicationGatewayProbeHealthResponseMatch"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NetworkInterfaceTapConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceTapConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualNetworkTap: {
        serializedName: "virtualNetworkTap",
        type: {
          name: "Composite",
          className: "VirtualNetworkTap"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      sourcePortRange: {
        serializedName: "properties.sourcePortRange",
        type: {
          name: "String"
        }
      },
      destinationPortRange: {
        serializedName: "properties.destinationPortRange",
        type: {
          name: "String"
        }
      },
      sourceAddressPrefix: {
        serializedName: "properties.sourceAddressPrefix",
        type: {
          name: "String"
        }
      },
      sourceAddressPrefixes: {
        serializedName: "properties.sourceAddressPrefixes",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      sourceApplicationSecurityGroups: {
        serializedName: "properties.sourceApplicationSecurityGroups",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ApplicationSecurityGroup" }
          }
        }
      },
      destinationAddressPrefix: {
        serializedName: "properties.destinationAddressPrefix",
        type: {
          name: "String"
        }
      },
      destinationAddressPrefixes: {
        serializedName: "properties.destinationAddressPrefixes",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationApplicationSecurityGroups: {
        serializedName: "properties.destinationApplicationSecurityGroups",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ApplicationSecurityGroup" }
          }
        }
      },
      sourcePortRanges: {
        serializedName: "properties.sourcePortRanges",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationPortRanges: {
        serializedName: "properties.destinationPortRanges",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      access: {
        serializedName: "properties.access",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      direction: {
        serializedName: "properties.direction",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateLinkServiceId: {
        serializedName: "properties.privateLinkServiceId",
        type: {
          name: "String"
        }
      },
      groupIds: {
        serializedName: "properties.groupIds",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      requestMessage: {
        serializedName: "properties.requestMessage",
        type: {
          name: "String"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      }
    }
  }
};

export const Route: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Route",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      addressPrefix: {
        serializedName: "properties.addressPrefix",
        type: {
          name: "String"
        }
      },
      nextHopType: {
        serializedName: "properties.nextHopType",
        type: {
          name: "String"
        }
      },
      nextHopIpAddress: {
        serializedName: "properties.nextHopIpAddress",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceEndpointPolicyDefinition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceEndpointPolicyDefinition",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      service: {
        serializedName: "properties.service",
        type: {
          name: "String"
        }
      },
      serviceResources: {
        serializedName: "properties.serviceResources",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IPConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIPAddress: {
        serializedName: "properties.privateIPAddress",
        type: {
          name: "String"
        }
      },
      privateIPAllocationMethod: {
        serializedName: "properties.privateIPAllocationMethod",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "Subnet"
        }
      },
      publicIPAddress: {
        serializedName: "publicIPAddress",
        type: {
          name: "Composite",
          className: "PublicIPAddress"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IPConfigurationProfile: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IPConfigurationProfile",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "Subnet"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceNavigationLink: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceNavigationLink",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      linkedResourceType: {
        serializedName: "properties.linkedResourceType",
        type: {
          name: "String"
        }
      },
      link: {
        serializedName: "properties.link",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceAssociationLink: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceAssociationLink",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      linkedResourceType: {
        serializedName: "properties.linkedResourceType",
        type: {
          name: "String"
        }
      },
      link: {
        serializedName: "properties.link",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowDelete: {
        serializedName: "properties.allowDelete",
        type: {
          name: "Boolean"
        }
      },
      locations: {
        serializedName: "properties.locations",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const Delegation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Delegation",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceName: {
        serializedName: "properties.serviceName",
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "properties.actions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Subnet: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Subnet",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      addressPrefix: {
        serializedName: "properties.addressPrefix",
        type: {
          name: "String"
        }
      },
      addressPrefixes: {
        serializedName: "properties.addressPrefixes",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      networkSecurityGroup: {
        serializedName: "networkSecurityGroup",
        type: {
          name: "Composite",
          className: "NetworkSecurityGroup"
        }
      },
      routeTable: {
        serializedName: "routeTable",
        type: {
          name: "Composite",
          className: "RouteTable"
        }
      },
      natGateway: {
        serializedName: "natGateway",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      serviceEndpoints: {
        serializedName: "properties.serviceEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceEndpointPropertiesFormat"
            }
          }
        }
      },
      serviceEndpointPolicies: {
        serializedName: "properties.serviceEndpointPolicies",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServiceEndpointPolicy" }
          }
        }
      },
      privateEndpoints: {
        serializedName: "properties.privateEndpoints",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PrivateEndpoint" } }
        }
      },
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IPConfiguration" } }
        }
      },
      ipConfigurationProfiles: {
        serializedName: "properties.ipConfigurationProfiles",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "IPConfigurationProfile" }
          }
        }
      },
      ipAllocations: {
        serializedName: "properties.ipAllocations",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      resourceNavigationLinks: {
        serializedName: "properties.resourceNavigationLinks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ResourceNavigationLink" }
          }
        }
      },
      serviceAssociationLinks: {
        serializedName: "properties.serviceAssociationLinks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServiceAssociationLink" }
          }
        }
      },
      delegations: {
        serializedName: "properties.delegations",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Delegation" } }
        }
      },
      purpose: {
        serializedName: "properties.purpose",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateEndpointNetworkPolicies: {
        serializedName: "properties.privateEndpointNetworkPolicies",
        type: {
          name: "String"
        }
      },
      privateLinkServiceNetworkPolicies: {
        serializedName: "properties.privateLinkServiceNetworkPolicies",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FrontendIPConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FrontendIPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      inboundNatRules: {
        serializedName: "properties.inboundNatRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      inboundNatPools: {
        serializedName: "properties.inboundNatPools",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      outboundRules: {
        serializedName: "properties.outboundRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      loadBalancingRules: {
        serializedName: "properties.loadBalancingRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      privateIPAddress: {
        serializedName: "properties.privateIPAddress",
        type: {
          name: "String"
        }
      },
      privateIPAllocationMethod: {
        serializedName: "properties.privateIPAllocationMethod",
        type: {
          name: "String"
        }
      },
      privateIPAddressVersion: {
        serializedName: "properties.privateIPAddressVersion",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "Subnet"
        }
      },
      publicIPAddress: {
        serializedName: "publicIPAddress",
        type: {
          name: "Composite",
          className: "PublicIPAddress"
        }
      },
      publicIPPrefix: {
        serializedName: "publicIPPrefix",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkPeering: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkPeering",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowVirtualNetworkAccess: {
        serializedName: "properties.allowVirtualNetworkAccess",
        type: {
          name: "Boolean"
        }
      },
      allowForwardedTraffic: {
        serializedName: "properties.allowForwardedTraffic",
        type: {
          name: "Boolean"
        }
      },
      allowGatewayTransit: {
        serializedName: "properties.allowGatewayTransit",
        type: {
          name: "Boolean"
        }
      },
      useRemoteGateways: {
        serializedName: "properties.useRemoteGateways",
        type: {
          name: "Boolean"
        }
      },
      remoteVirtualNetwork: {
        serializedName: "remoteVirtualNetwork",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      remoteAddressSpace: {
        serializedName: "remoteAddressSpace",
        type: {
          name: "Composite",
          className: "AddressSpace"
        }
      },
      peeringState: {
        serializedName: "properties.peeringState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackendAddressPool: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackendAddressPool",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      backendIPConfigurations: {
        serializedName: "properties.backendIPConfigurations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceIPConfiguration"
            }
          }
        }
      },
      loadBalancerBackendAddresses: {
        serializedName: "properties.loadBalancerBackendAddresses",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "LoadBalancerBackendAddress" }
          }
        }
      },
      loadBalancingRules: {
        serializedName: "properties.loadBalancingRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      outboundRule: {
        serializedName: "outboundRule",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      outboundRules: {
        serializedName: "properties.outboundRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InboundNatRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InboundNatRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      frontendIPConfiguration: {
        serializedName: "frontendIPConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      backendIPConfiguration: {
        serializedName: "backendIPConfiguration",
        type: {
          name: "Composite",
          className: "NetworkInterfaceIPConfiguration"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      frontendPort: {
        serializedName: "properties.frontendPort",
        type: {
          name: "Number"
        }
      },
      backendPort: {
        serializedName: "properties.backendPort",
        type: {
          name: "Number"
        }
      },
      idleTimeoutInMinutes: {
        serializedName: "properties.idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      },
      enableFloatingIP: {
        serializedName: "properties.enableFloatingIP",
        type: {
          name: "Boolean"
        }
      },
      enableTcpReset: {
        serializedName: "properties.enableTcpReset",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceIPConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceIPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualNetworkTaps: {
        serializedName: "properties.virtualNetworkTaps",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkTap" }
          }
        }
      },
      applicationGatewayBackendAddressPools: {
        serializedName: "properties.applicationGatewayBackendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendAddressPool"
            }
          }
        }
      },
      loadBalancerBackendAddressPools: {
        serializedName: "properties.loadBalancerBackendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "BackendAddressPool" }
          }
        }
      },
      loadBalancerInboundNatRules: {
        serializedName: "properties.loadBalancerInboundNatRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InboundNatRule" } }
        }
      },
      privateIPAddress: {
        serializedName: "properties.privateIPAddress",
        type: {
          name: "String"
        }
      },
      privateIPAllocationMethod: {
        serializedName: "properties.privateIPAllocationMethod",
        type: {
          name: "String"
        }
      },
      privateIPAddressVersion: {
        serializedName: "properties.privateIPAddressVersion",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "Subnet"
        }
      },
      primary: {
        serializedName: "properties.primary",
        type: {
          name: "Boolean"
        }
      },
      publicIPAddress: {
        serializedName: "publicIPAddress",
        type: {
          name: "Composite",
          className: "PublicIPAddress"
        }
      },
      applicationSecurityGroups: {
        serializedName: "properties.applicationSecurityGroups",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ApplicationSecurityGroup" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateLinkConnectionProperties: {
        serializedName: "privateLinkConnectionProperties",
        type: {
          name: "Composite",
          className:
            "NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties"
        }
      }
    }
  }
};

export const ApplicationGatewayBackendAddressPool: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendAddressPool",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      backendIPConfigurations: {
        serializedName: "properties.backendIPConfigurations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceIPConfiguration"
            }
          }
        }
      },
      backendAddresses: {
        serializedName: "properties.backendAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendAddress"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayBackendHttpSettings: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendHttpSettings",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      cookieBasedAffinity: {
        serializedName: "properties.cookieBasedAffinity",
        type: {
          name: "String"
        }
      },
      requestTimeout: {
        serializedName: "properties.requestTimeout",
        type: {
          name: "Number"
        }
      },
      probe: {
        serializedName: "probe",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      authenticationCertificates: {
        serializedName: "properties.authenticationCertificates",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      trustedRootCertificates: {
        serializedName: "properties.trustedRootCertificates",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      connectionDraining: {
        serializedName: "connectionDraining",
        type: {
          name: "Composite",
          className: "ApplicationGatewayConnectionDraining"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      pickHostNameFromBackendAddress: {
        serializedName: "properties.pickHostNameFromBackendAddress",
        type: {
          name: "Boolean"
        }
      },
      affinityCookieName: {
        serializedName: "properties.affinityCookieName",
        type: {
          name: "String"
        }
      },
      probeEnabled: {
        serializedName: "properties.probeEnabled",
        type: {
          name: "Boolean"
        }
      },
      path: {
        serializedName: "properties.path",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayHttpListener: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayHttpListener",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      frontendIPConfiguration: {
        serializedName: "frontendIPConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      frontendPort: {
        serializedName: "frontendPort",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      sslCertificate: {
        serializedName: "sslCertificate",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      requireServerNameIndication: {
        serializedName: "properties.requireServerNameIndication",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customErrorConfigurations: {
        serializedName: "properties.customErrorConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayCustomError"
            }
          }
        }
      },
      firewallPolicy: {
        serializedName: "firewallPolicy",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      hostNames: {
        serializedName: "properties.hostNames",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ApplicationGatewayPathRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayPathRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      paths: {
        serializedName: "properties.paths",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      backendAddressPool: {
        serializedName: "backendAddressPool",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      backendHttpSettings: {
        serializedName: "backendHttpSettings",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      redirectConfiguration: {
        serializedName: "redirectConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      rewriteRuleSet: {
        serializedName: "rewriteRuleSet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      firewallPolicy: {
        serializedName: "firewallPolicy",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const ApplicationGatewayUrlPathMap: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayUrlPathMap",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultBackendAddressPool: {
        serializedName: "defaultBackendAddressPool",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      defaultBackendHttpSettings: {
        serializedName: "defaultBackendHttpSettings",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      defaultRewriteRuleSet: {
        serializedName: "defaultRewriteRuleSet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      defaultRedirectConfiguration: {
        serializedName: "defaultRedirectConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      pathRules: {
        serializedName: "properties.pathRules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ApplicationGatewayPathRule" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayRequestRoutingRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayRequestRoutingRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ruleType: {
        serializedName: "properties.ruleType",
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 20000,
          InclusiveMinimum: 1
        },
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      backendAddressPool: {
        serializedName: "backendAddressPool",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      backendHttpSettings: {
        serializedName: "backendHttpSettings",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      httpListener: {
        serializedName: "httpListener",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      urlPathMap: {
        serializedName: "urlPathMap",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      rewriteRuleSet: {
        serializedName: "rewriteRuleSet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      redirectConfiguration: {
        serializedName: "redirectConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayRewriteRuleSet: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayRewriteRuleSet",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rewriteRules: {
        serializedName: "properties.rewriteRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayRewriteRule"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayRedirectConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayRedirectConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      redirectType: {
        serializedName: "properties.redirectType",
        type: {
          name: "String"
        }
      },
      targetListener: {
        serializedName: "targetListener",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      targetUrl: {
        serializedName: "properties.targetUrl",
        type: {
          name: "String"
        }
      },
      includePath: {
        serializedName: "properties.includePath",
        type: {
          name: "Boolean"
        }
      },
      includeQueryString: {
        serializedName: "properties.includeQueryString",
        type: {
          name: "Boolean"
        }
      },
      requestRoutingRules: {
        serializedName: "properties.requestRoutingRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      urlPathMaps: {
        serializedName: "properties.urlPathMaps",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      pathRules: {
        serializedName: "properties.pathRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      }
    }
  }
};

export const ApplicationGatewaySslPredefinedPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewaySslPredefinedPolicy",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      cipherSuites: {
        serializedName: "properties.cipherSuites",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      minProtocolVersion: {
        serializedName: "properties.minProtocolVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallApplicationRuleCollection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallApplicationRuleCollection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 65000,
          InclusiveMinimum: 100
        },
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "AzureFirewallRCAction"
        }
      },
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallApplicationRule"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallNatRuleCollection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallNatRuleCollection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 65000,
          InclusiveMinimum: 100
        },
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "AzureFirewallNatRCAction"
        }
      },
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AzureFirewallNatRule" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallNetworkRuleCollection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallNetworkRuleCollection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 65000,
          InclusiveMinimum: 100
        },
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "AzureFirewallRCAction"
        }
      },
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AzureFirewallNetworkRule" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallIPConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallIPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIPAddress: {
        serializedName: "properties.privateIPAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      publicIPAddress: {
        serializedName: "publicIPAddress",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BastionHostIPConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BastionHostIPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      publicIPAddress: {
        serializedName: "publicIPAddress",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIPAllocationMethod: {
        serializedName: "properties.privateIPAllocationMethod",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointServiceResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointServiceResult",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitAuthorization: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitAuthorization",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      authorizationKey: {
        serializedName: "properties.authorizationKey",
        type: {
          name: "String"
        }
      },
      authorizationUseStatus: {
        serializedName: "properties.authorizationUseStatus",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitConnection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitConnection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expressRouteCircuitPeering: {
        serializedName: "expressRouteCircuitPeering",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      peerExpressRouteCircuitPeering: {
        serializedName: "peerExpressRouteCircuitPeering",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      addressPrefix: {
        serializedName: "properties.addressPrefix",
        type: {
          name: "String"
        }
      },
      authorizationKey: {
        serializedName: "properties.authorizationKey",
        type: {
          name: "String"
        }
      },
      ipv6CircuitConnectionConfig: {
        serializedName: "ipv6CircuitConnectionConfig",
        type: {
          name: "Composite",
          className: "Ipv6CircuitConnectionConfig"
        }
      },
      circuitConnectionStatus: {
        serializedName: "properties.circuitConnectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeerExpressRouteCircuitConnection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeerExpressRouteCircuitConnection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expressRouteCircuitPeering: {
        serializedName: "expressRouteCircuitPeering",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      peerExpressRouteCircuitPeering: {
        serializedName: "peerExpressRouteCircuitPeering",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      addressPrefix: {
        serializedName: "properties.addressPrefix",
        type: {
          name: "String"
        }
      },
      circuitConnectionStatus: {
        serializedName: "properties.circuitConnectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectionName: {
        serializedName: "properties.connectionName",
        type: {
          name: "String"
        }
      },
      authResourceGuid: {
        serializedName: "properties.authResourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitPeering: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitPeering",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      peeringType: {
        serializedName: "properties.peeringType",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      azureASN: {
        serializedName: "properties.azureASN",
        type: {
          name: "Number"
        }
      },
      peerASN: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "properties.peerASN",
        type: {
          name: "Number"
        }
      },
      primaryPeerAddressPrefix: {
        serializedName: "properties.primaryPeerAddressPrefix",
        type: {
          name: "String"
        }
      },
      secondaryPeerAddressPrefix: {
        serializedName: "properties.secondaryPeerAddressPrefix",
        type: {
          name: "String"
        }
      },
      primaryAzurePort: {
        serializedName: "properties.primaryAzurePort",
        type: {
          name: "String"
        }
      },
      secondaryAzurePort: {
        serializedName: "properties.secondaryAzurePort",
        type: {
          name: "String"
        }
      },
      sharedKey: {
        serializedName: "properties.sharedKey",
        type: {
          name: "String"
        }
      },
      vlanId: {
        serializedName: "properties.vlanId",
        type: {
          name: "Number"
        }
      },
      microsoftPeeringConfig: {
        serializedName: "microsoftPeeringConfig",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitPeeringConfig"
        }
      },
      stats: {
        serializedName: "stats",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitStats"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      gatewayManagerEtag: {
        serializedName: "properties.gatewayManagerEtag",
        type: {
          name: "String"
        }
      },
      lastModifiedBy: {
        serializedName: "properties.lastModifiedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      routeFilter: {
        serializedName: "routeFilter",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      ipv6PeeringConfig: {
        serializedName: "ipv6PeeringConfig",
        type: {
          name: "Composite",
          className: "Ipv6ExpressRouteCircuitPeeringConfig"
        }
      },
      expressRouteConnection: {
        serializedName: "expressRouteConnection",
        type: {
          name: "Composite",
          className: "ExpressRouteConnectionId"
        }
      },
      connections: {
        serializedName: "properties.connections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitConnection"
            }
          }
        }
      },
      peeredConnections: {
        serializedName: "properties.peeredConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeerExpressRouteCircuitConnection"
            }
          }
        }
      }
    }
  }
};

export const ExpressRouteCrossConnectionPeering: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCrossConnectionPeering",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      peeringType: {
        serializedName: "properties.peeringType",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      azureASN: {
        serializedName: "properties.azureASN",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      peerASN: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "properties.peerASN",
        type: {
          name: "Number"
        }
      },
      primaryPeerAddressPrefix: {
        serializedName: "properties.primaryPeerAddressPrefix",
        type: {
          name: "String"
        }
      },
      secondaryPeerAddressPrefix: {
        serializedName: "properties.secondaryPeerAddressPrefix",
        type: {
          name: "String"
        }
      },
      primaryAzurePort: {
        serializedName: "properties.primaryAzurePort",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryAzurePort: {
        serializedName: "properties.secondaryAzurePort",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sharedKey: {
        serializedName: "properties.sharedKey",
        type: {
          name: "String"
        }
      },
      vlanId: {
        serializedName: "properties.vlanId",
        type: {
          name: "Number"
        }
      },
      microsoftPeeringConfig: {
        serializedName: "microsoftPeeringConfig",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitPeeringConfig"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      gatewayManagerEtag: {
        serializedName: "properties.gatewayManagerEtag",
        type: {
          name: "String"
        }
      },
      lastModifiedBy: {
        serializedName: "properties.lastModifiedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipv6PeeringConfig: {
        serializedName: "ipv6PeeringConfig",
        type: {
          name: "Composite",
          className: "Ipv6ExpressRouteCircuitPeeringConfig"
        }
      }
    }
  }
};

export const ExpressRouteLink: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteLink",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      routerName: {
        serializedName: "properties.routerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      interfaceName: {
        serializedName: "properties.interfaceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      patchPanelId: {
        serializedName: "properties.patchPanelId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rackId: {
        serializedName: "properties.rackId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectorType: {
        serializedName: "properties.connectorType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      adminState: {
        serializedName: "properties.adminState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      macSecConfig: {
        serializedName: "macSecConfig",
        type: {
          name: "Composite",
          className: "ExpressRouteLinkMacSecConfig"
        }
      }
    }
  }
};

export const FirewallPolicyRuleGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallPolicyRuleGroup",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 65000,
          InclusiveMinimum: 100
        },
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "FirewallPolicyRule" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancingRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancingRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      frontendIPConfiguration: {
        serializedName: "frontendIPConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      backendAddressPool: {
        serializedName: "backendAddressPool",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      probe: {
        serializedName: "probe",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      loadDistribution: {
        serializedName: "properties.loadDistribution",
        type: {
          name: "String"
        }
      },
      frontendPort: {
        serializedName: "properties.frontendPort",
        type: {
          name: "Number"
        }
      },
      backendPort: {
        serializedName: "properties.backendPort",
        type: {
          name: "Number"
        }
      },
      idleTimeoutInMinutes: {
        serializedName: "properties.idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      },
      enableFloatingIP: {
        serializedName: "properties.enableFloatingIP",
        type: {
          name: "Boolean"
        }
      },
      enableTcpReset: {
        serializedName: "properties.enableTcpReset",
        type: {
          name: "Boolean"
        }
      },
      disableOutboundSnat: {
        serializedName: "properties.disableOutboundSnat",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Probe: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Probe",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      loadBalancingRules: {
        serializedName: "properties.loadBalancingRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      },
      intervalInSeconds: {
        serializedName: "properties.intervalInSeconds",
        type: {
          name: "Number"
        }
      },
      numberOfProbes: {
        serializedName: "properties.numberOfProbes",
        type: {
          name: "Number"
        }
      },
      requestPath: {
        serializedName: "properties.requestPath",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InboundNatPool: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InboundNatPool",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      frontendIPConfiguration: {
        serializedName: "frontendIPConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      frontendPortRangeStart: {
        serializedName: "properties.frontendPortRangeStart",
        type: {
          name: "Number"
        }
      },
      frontendPortRangeEnd: {
        serializedName: "properties.frontendPortRangeEnd",
        type: {
          name: "Number"
        }
      },
      backendPort: {
        serializedName: "properties.backendPort",
        type: {
          name: "Number"
        }
      },
      idleTimeoutInMinutes: {
        serializedName: "properties.idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      },
      enableFloatingIP: {
        serializedName: "properties.enableFloatingIP",
        type: {
          name: "Boolean"
        }
      },
      enableTcpReset: {
        serializedName: "properties.enableTcpReset",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutboundRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutboundRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allocatedOutboundPorts: {
        serializedName: "properties.allocatedOutboundPorts",
        type: {
          name: "Number"
        }
      },
      frontendIPConfigurations: {
        serializedName: "properties.frontendIPConfigurations",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      backendAddressPool: {
        serializedName: "backendAddressPool",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      enableTcpReset: {
        serializedName: "properties.enableTcpReset",
        type: {
          name: "Boolean"
        }
      },
      idleTimeoutInMinutes: {
        serializedName: "properties.idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContainerNetworkInterfaceConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerNetworkInterfaceConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "IPConfigurationProfile" }
          }
        }
      },
      containerNetworkInterfaces: {
        serializedName: "properties.containerNetworkInterfaces",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerNetworkInterface: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerNetworkInterface",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      containerNetworkInterfaceConfiguration: {
        serializedName: "containerNetworkInterfaceConfiguration",
        type: {
          name: "Composite",
          className: "ContainerNetworkInterfaceConfiguration"
        }
      },
      container: {
        serializedName: "container",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerNetworkInterfaceIpConfiguration"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateDnsZoneGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateDnsZoneGroup",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateDnsZoneConfigs: {
        serializedName: "properties.privateDnsZoneConfigs",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateDnsZoneConfig" }
          }
        }
      }
    }
  }
};

export const PrivateLinkServiceIpConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceIpConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIPAddress: {
        serializedName: "properties.privateIPAddress",
        type: {
          name: "String"
        }
      },
      privateIPAllocationMethod: {
        serializedName: "properties.privateIPAllocationMethod",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "Subnet"
        }
      },
      primary: {
        serializedName: "properties.primary",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIPAddressVersion: {
        serializedName: "properties.privateIPAddressVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      linkIdentifier: {
        serializedName: "properties.linkIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteFilterRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteFilterRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      access: {
        serializedName: "properties.access",
        type: {
          name: "String"
        }
      },
      routeFilterRuleType: {
        serializedName: "properties.routeFilterRuleType",
        type: {
          name: "String"
        }
      },
      communities: {
        serializedName: "properties.communities",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGatewayIPConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewayIPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIPAllocationMethod: {
        serializedName: "properties.privateIPAllocationMethod",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      publicIPAddress: {
        serializedName: "publicIPAddress",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      privateIPAddress: {
        serializedName: "properties.privateIPAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnClientRootCertificate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnClientRootCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicCertData: {
        serializedName: "properties.publicCertData",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnClientRevokedCertificate: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnClientRevokedCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionSharedKey: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionSharedKey",
    modelProperties: {
      ...SubResource.type.modelProperties,
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualRouterPeering: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualRouterPeering",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      peerAsn: {
        constraints: {
          InclusiveMaximum: 4294967295
        },
        serializedName: "properties.peerAsn",
        type: {
          name: "Number"
        }
      },
      peerIp: {
        serializedName: "properties.peerIp",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnSiteLink: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnSiteLink",
    modelProperties: {
      ...SubResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      linkProperties: {
        serializedName: "linkProperties",
        type: {
          name: "Composite",
          className: "VpnLinkProviderProperties"
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "properties.fqdn",
        type: {
          name: "String"
        }
      },
      bgpProperties: {
        serializedName: "bgpProperties",
        type: {
          name: "Composite",
          className: "VpnLinkBgpSettings"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const P2SConnectionConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "P2SConnectionConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vpnClientAddressPool: {
        serializedName: "vpnClientAddressPool",
        type: {
          name: "Composite",
          className: "AddressSpace"
        }
      },
      routingConfiguration: {
        serializedName: "routingConfiguration",
        type: {
          name: "Composite",
          className: "RoutingConfiguration"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HubVirtualNetworkConnection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HubVirtualNetworkConnection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      remoteVirtualNetwork: {
        serializedName: "remoteVirtualNetwork",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      allowHubToRemoteVnetTransit: {
        serializedName: "properties.allowHubToRemoteVnetTransit",
        type: {
          name: "Boolean"
        }
      },
      allowRemoteVnetToUseHubVnetGateways: {
        serializedName: "properties.allowRemoteVnetToUseHubVnetGateways",
        type: {
          name: "Boolean"
        }
      },
      enableInternetSecurity: {
        serializedName: "properties.enableInternetSecurity",
        type: {
          name: "Boolean"
        }
      },
      routingConfiguration: {
        serializedName: "routingConfiguration",
        type: {
          name: "Composite",
          className: "RoutingConfiguration"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualHubRouteTableV2: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualHubRouteTableV2",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      routes: {
        serializedName: "properties.routes",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualHubRouteV2" }
          }
        }
      },
      attachedConnections: {
        serializedName: "properties.attachedConnections",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnSiteLinkConnection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnSiteLinkConnection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vpnSiteLink: {
        serializedName: "vpnSiteLink",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      routingWeight: {
        serializedName: "properties.routingWeight",
        type: {
          name: "Number"
        }
      },
      connectionStatus: {
        serializedName: "properties.connectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vpnConnectionProtocolType: {
        serializedName: "properties.vpnConnectionProtocolType",
        type: {
          name: "String"
        }
      },
      ingressBytesTransferred: {
        serializedName: "properties.ingressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      egressBytesTransferred: {
        serializedName: "properties.egressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      connectionBandwidth: {
        serializedName: "properties.connectionBandwidth",
        type: {
          name: "Number"
        }
      },
      sharedKey: {
        serializedName: "properties.sharedKey",
        type: {
          name: "String"
        }
      },
      enableBgp: {
        serializedName: "properties.enableBgp",
        type: {
          name: "Boolean"
        }
      },
      usePolicyBasedTrafficSelectors: {
        serializedName: "properties.usePolicyBasedTrafficSelectors",
        type: {
          name: "Boolean"
        }
      },
      ipsecPolicies: {
        serializedName: "properties.ipsecPolicies",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IpsecPolicy" } }
        }
      },
      enableRateLimiting: {
        serializedName: "properties.enableRateLimiting",
        type: {
          name: "Boolean"
        }
      },
      useLocalAzureIpAddress: {
        serializedName: "properties.useLocalAzureIpAddress",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnConnection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnConnection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      remoteVpnSite: {
        serializedName: "remoteVpnSite",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      routingWeight: {
        serializedName: "properties.routingWeight",
        type: {
          name: "Number"
        }
      },
      dpdTimeoutSeconds: {
        serializedName: "properties.dpdTimeoutSeconds",
        type: {
          name: "Number"
        }
      },
      connectionStatus: {
        serializedName: "properties.connectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vpnConnectionProtocolType: {
        serializedName: "properties.vpnConnectionProtocolType",
        type: {
          name: "String"
        }
      },
      ingressBytesTransferred: {
        serializedName: "properties.ingressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      egressBytesTransferred: {
        serializedName: "properties.egressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      connectionBandwidth: {
        serializedName: "properties.connectionBandwidth",
        type: {
          name: "Number"
        }
      },
      sharedKey: {
        serializedName: "properties.sharedKey",
        type: {
          name: "String"
        }
      },
      enableBgp: {
        serializedName: "properties.enableBgp",
        type: {
          name: "Boolean"
        }
      },
      usePolicyBasedTrafficSelectors: {
        serializedName: "properties.usePolicyBasedTrafficSelectors",
        type: {
          name: "Boolean"
        }
      },
      ipsecPolicies: {
        serializedName: "properties.ipsecPolicies",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IpsecPolicy" } }
        }
      },
      enableRateLimiting: {
        serializedName: "properties.enableRateLimiting",
        type: {
          name: "Boolean"
        }
      },
      enableInternetSecurity: {
        serializedName: "properties.enableInternetSecurity",
        type: {
          name: "Boolean"
        }
      },
      useLocalAzureIpAddress: {
        serializedName: "properties.useLocalAzureIpAddress",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vpnLinkConnections: {
        serializedName: "properties.vpnLinkConnections",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VpnSiteLinkConnection" }
          }
        }
      },
      routingConfiguration: {
        serializedName: "routingConfiguration",
        type: {
          name: "Composite",
          className: "RoutingConfiguration"
        }
      }
    }
  }
};

export const ExpressRouteConnection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteConnection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expressRouteCircuitPeering: {
        serializedName: "expressRouteCircuitPeering",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitPeeringId"
        }
      },
      authorizationKey: {
        serializedName: "properties.authorizationKey",
        type: {
          name: "String"
        }
      },
      routingWeight: {
        serializedName: "properties.routingWeight",
        type: {
          name: "Number"
        }
      },
      enableInternetSecurity: {
        serializedName: "properties.enableInternetSecurity",
        type: {
          name: "Boolean"
        }
      },
      routingConfiguration: {
        serializedName: "routingConfiguration",
        type: {
          name: "Composite",
          className: "RoutingConfiguration"
        }
      }
    }
  }
};

export const HubRouteTable: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HubRouteTable",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      routes: {
        serializedName: "properties.routes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HubRoute" } }
        }
      },
      labels: {
        serializedName: "properties.labels",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      associatedConnections: {
        serializedName: "properties.associatedConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      propagatingConnections: {
        serializedName: "properties.propagatingConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Container: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Container",
    modelProperties: {
      ...SubResource.type.modelProperties
    }
  }
};

export const PatchRouteFilterRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchRouteFilterRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      access: {
        serializedName: "properties.access",
        type: {
          name: "String"
        }
      },
      routeFilterRuleType: {
        serializedName: "properties.routeFilterRuleType",
        type: {
          name: "String"
        }
      },
      communities: {
        serializedName: "properties.communities",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PatchRouteFilter: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchRouteFilter",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RouteFilterRule" } }
        }
      },
      peerings: {
        serializedName: "properties.peerings",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRouteCircuitPeering" }
          }
        }
      },
      ipv6Peerings: {
        serializedName: "properties.ipv6Peerings",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRouteCircuitPeering" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationSecurityGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationSecurityGroup",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "Subnet"
        }
      },
      networkInterfaces: {
        serializedName: "properties.networkInterfaces",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NetworkInterface" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateLinkServiceConnections: {
        serializedName: "properties.privateLinkServiceConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkServiceConnection"
            }
          }
        }
      },
      manualPrivateLinkServiceConnections: {
        serializedName: "properties.manualPrivateLinkServiceConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkServiceConnection"
            }
          }
        }
      },
      customDnsConfigs: {
        serializedName: "properties.customDnsConfigs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomDnsConfigPropertiesFormat"
            }
          }
        }
      }
    }
  }
};

export const NetworkInterface: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterface",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualMachine: {
        serializedName: "virtualMachine",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      networkSecurityGroup: {
        serializedName: "networkSecurityGroup",
        type: {
          name: "Composite",
          className: "NetworkSecurityGroup"
        }
      },
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceIPConfiguration"
            }
          }
        }
      },
      tapConfigurations: {
        serializedName: "properties.tapConfigurations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceTapConfiguration"
            }
          }
        }
      },
      dnsSettings: {
        serializedName: "dnsSettings",
        type: {
          name: "Composite",
          className: "NetworkInterfaceDnsSettings"
        }
      },
      macAddress: {
        serializedName: "properties.macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      primary: {
        serializedName: "properties.primary",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      enableAcceleratedNetworking: {
        serializedName: "properties.enableAcceleratedNetworking",
        type: {
          name: "Boolean"
        }
      },
      enableIPForwarding: {
        serializedName: "properties.enableIPForwarding",
        type: {
          name: "Boolean"
        }
      },
      hostedWorkloads: {
        serializedName: "properties.hostedWorkloads",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FlowLog: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlowLog",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetResourceId: {
        serializedName: "properties.targetResourceId",
        type: {
          name: "String"
        }
      },
      targetResourceGuid: {
        serializedName: "properties.targetResourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageId: {
        serializedName: "properties.storageId",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicyParameters"
        }
      },
      format: {
        serializedName: "format",
        type: {
          name: "Composite",
          className: "FlowLogFormatParameters"
        }
      },
      flowAnalyticsConfiguration: {
        serializedName: "flowAnalyticsConfiguration",
        type: {
          name: "Composite",
          className: "TrafficAnalyticsProperties"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkSecurityGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkSecurityGroup",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      securityRules: {
        serializedName: "properties.securityRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SecurityRule" } }
        }
      },
      defaultSecurityRules: {
        serializedName: "properties.defaultSecurityRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SecurityRule" } }
        }
      },
      networkInterfaces: {
        serializedName: "properties.networkInterfaces",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NetworkInterface" }
          }
        }
      },
      subnets: {
        serializedName: "properties.subnets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Subnet" } }
        }
      },
      flowLogs: {
        serializedName: "properties.flowLogs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FlowLog" } }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteTable: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteTable",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      routes: {
        serializedName: "properties.routes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Route" } }
        }
      },
      subnets: {
        serializedName: "properties.subnets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Subnet" } }
        }
      },
      disableBgpRoutePropagation: {
        serializedName: "properties.disableBgpRoutePropagation",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceEndpointPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceEndpointPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceEndpointPolicyDefinitions: {
        serializedName: "properties.serviceEndpointPolicyDefinitions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceEndpointPolicyDefinition"
            }
          }
        }
      },
      subnets: {
        serializedName: "properties.subnets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Subnet" } }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPAddress: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublicIPAddress",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "PublicIPAddressSku"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      publicIPAllocationMethod: {
        serializedName: "properties.publicIPAllocationMethod",
        type: {
          name: "String"
        }
      },
      publicIPAddressVersion: {
        serializedName: "properties.publicIPAddressVersion",
        type: {
          name: "String"
        }
      },
      ipConfiguration: {
        serializedName: "ipConfiguration",
        type: {
          name: "Composite",
          className: "IPConfiguration"
        }
      },
      dnsSettings: {
        serializedName: "dnsSettings",
        type: {
          name: "Composite",
          className: "PublicIPAddressDnsSettings"
        }
      },
      ddosSettings: {
        serializedName: "ddosSettings",
        type: {
          name: "Composite",
          className: "DdosSettings"
        }
      },
      ipTags: {
        serializedName: "properties.ipTags",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IpTag" } }
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        type: {
          name: "String"
        }
      },
      publicIPPrefix: {
        serializedName: "publicIPPrefix",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      idleTimeoutInMinutes: {
        serializedName: "properties.idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkTap: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkTap",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkInterfaceTapConfigurations: {
        serializedName: "properties.networkInterfaceTapConfigurations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceTapConfiguration"
            }
          }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      destinationNetworkInterfaceIPConfiguration: {
        serializedName: "destinationNetworkInterfaceIPConfiguration",
        type: {
          name: "Composite",
          className: "NetworkInterfaceIPConfiguration"
        }
      },
      destinationLoadBalancerFrontEndIPConfiguration: {
        serializedName: "destinationLoadBalancerFrontEndIPConfiguration",
        type: {
          name: "Composite",
          className: "FrontendIPConfiguration"
        }
      },
      destinationPort: {
        serializedName: "properties.destinationPort",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualNetwork: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetwork",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      addressSpace: {
        serializedName: "addressSpace",
        type: {
          name: "Composite",
          className: "AddressSpace"
        }
      },
      dhcpOptions: {
        serializedName: "dhcpOptions",
        type: {
          name: "Composite",
          className: "DhcpOptions"
        }
      },
      subnets: {
        serializedName: "properties.subnets",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Subnet" } }
        }
      },
      virtualNetworkPeerings: {
        serializedName: "properties.virtualNetworkPeerings",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkPeering" }
          }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enableDdosProtection: {
        serializedName: "properties.enableDdosProtection",
        type: {
          name: "Boolean"
        }
      },
      enableVmProtection: {
        serializedName: "properties.enableVmProtection",
        type: {
          name: "Boolean"
        }
      },
      ddosProtectionPlan: {
        serializedName: "ddosProtectionPlan",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      bgpCommunities: {
        serializedName: "bgpCommunities",
        type: {
          name: "Composite",
          className: "VirtualNetworkBgpCommunities"
        }
      },
      ipAllocations: {
        serializedName: "properties.ipAllocations",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      }
    }
  }
};

export const ApplicationGateway: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ApplicationGatewaySku"
        }
      },
      sslPolicy: {
        serializedName: "sslPolicy",
        type: {
          name: "Composite",
          className: "ApplicationGatewaySslPolicy"
        }
      },
      operationalState: {
        serializedName: "properties.operationalState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      gatewayIPConfigurations: {
        serializedName: "properties.gatewayIPConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayIPConfiguration"
            }
          }
        }
      },
      authenticationCertificates: {
        serializedName: "properties.authenticationCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayAuthenticationCertificate"
            }
          }
        }
      },
      trustedRootCertificates: {
        serializedName: "properties.trustedRootCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayTrustedRootCertificate"
            }
          }
        }
      },
      sslCertificates: {
        serializedName: "properties.sslCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewaySslCertificate"
            }
          }
        }
      },
      frontendIPConfigurations: {
        serializedName: "properties.frontendIPConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFrontendIPConfiguration"
            }
          }
        }
      },
      frontendPorts: {
        serializedName: "properties.frontendPorts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFrontendPort"
            }
          }
        }
      },
      probes: {
        serializedName: "properties.probes",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ApplicationGatewayProbe" }
          }
        }
      },
      backendAddressPools: {
        serializedName: "properties.backendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendAddressPool"
            }
          }
        }
      },
      backendHttpSettingsCollection: {
        serializedName: "properties.backendHttpSettingsCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendHttpSettings"
            }
          }
        }
      },
      httpListeners: {
        serializedName: "properties.httpListeners",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayHttpListener"
            }
          }
        }
      },
      urlPathMaps: {
        serializedName: "properties.urlPathMaps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayUrlPathMap"
            }
          }
        }
      },
      requestRoutingRules: {
        serializedName: "properties.requestRoutingRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayRequestRoutingRule"
            }
          }
        }
      },
      rewriteRuleSets: {
        serializedName: "properties.rewriteRuleSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayRewriteRuleSet"
            }
          }
        }
      },
      redirectConfigurations: {
        serializedName: "properties.redirectConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayRedirectConfiguration"
            }
          }
        }
      },
      webApplicationFirewallConfiguration: {
        serializedName: "webApplicationFirewallConfiguration",
        type: {
          name: "Composite",
          className: "ApplicationGatewayWebApplicationFirewallConfiguration"
        }
      },
      firewallPolicy: {
        serializedName: "firewallPolicy",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      enableHttp2: {
        serializedName: "properties.enableHttp2",
        type: {
          name: "Boolean"
        }
      },
      enableFips: {
        serializedName: "properties.enableFips",
        type: {
          name: "Boolean"
        }
      },
      autoscaleConfiguration: {
        serializedName: "autoscaleConfiguration",
        type: {
          name: "Composite",
          className: "ApplicationGatewayAutoscaleConfiguration"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customErrorConfigurations: {
        serializedName: "properties.customErrorConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayCustomError"
            }
          }
        }
      },
      forceFirewallPolicyAssociation: {
        serializedName: "properties.forceFirewallPolicyAssociation",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ApplicationGatewayFirewallRuleSet: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayFirewallRuleSet",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ruleSetType: {
        serializedName: "properties.ruleSetType",
        type: {
          name: "String"
        }
      },
      ruleSetVersion: {
        serializedName: "properties.ruleSetVersion",
        type: {
          name: "String"
        }
      },
      ruleGroups: {
        serializedName: "properties.ruleGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFirewallRuleGroup"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayAvailableSslOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGatewayAvailableSslOptions",
    modelProperties: {
      ...Resource.type.modelProperties,
      predefinedPolicies: {
        serializedName: "properties.predefinedPolicies",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      defaultPolicy: {
        serializedName: "properties.defaultPolicy",
        type: {
          name: "String"
        }
      },
      availableCipherSuites: {
        serializedName: "properties.availableCipherSuites",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      availableProtocols: {
        serializedName: "properties.availableProtocols",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AzureFirewall: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewall",
    modelProperties: {
      ...Resource.type.modelProperties,
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      applicationRuleCollections: {
        serializedName: "properties.applicationRuleCollections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallApplicationRuleCollection"
            }
          }
        }
      },
      natRuleCollections: {
        serializedName: "properties.natRuleCollections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallNatRuleCollection"
            }
          }
        }
      },
      networkRuleCollections: {
        serializedName: "properties.networkRuleCollections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallNetworkRuleCollection"
            }
          }
        }
      },
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallIPConfiguration"
            }
          }
        }
      },
      managementIpConfiguration: {
        serializedName: "managementIpConfiguration",
        type: {
          name: "Composite",
          className: "AzureFirewallIPConfiguration"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      threatIntelMode: {
        serializedName: "properties.threatIntelMode",
        type: {
          name: "String"
        }
      },
      virtualHub: {
        serializedName: "virtualHub",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      firewallPolicy: {
        serializedName: "firewallPolicy",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      hubIpAddresses: {
        serializedName: "hubIpAddresses",
        type: {
          name: "Composite",
          className: "HubIPAddresses"
        }
      },
      ipGroups: {
        serializedName: "properties.ipGroups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AzureFirewallIpGroups" }
          }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "AzureFirewallSku"
        }
      },
      additionalProperties: {
        serializedName: "properties.additionalProperties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AzureFirewallFqdnTag: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirewallFqdnTag",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdnTagName: {
        serializedName: "properties.fqdnTagName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BastionHost: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BastionHost",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "BastionHostIPConfiguration" }
          }
        }
      },
      dnsName: {
        serializedName: "properties.dnsName",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DdosCustomPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DdosCustomPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicIPAddresses: {
        serializedName: "properties.publicIPAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      protocolCustomSettings: {
        serializedName: "properties.protocolCustomSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProtocolCustomSettingsFormat"
            }
          }
        }
      }
    }
  }
};

export const ExpressRouteCircuit: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCircuit",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitSku"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowClassicOperations: {
        serializedName: "properties.allowClassicOperations",
        type: {
          name: "Boolean"
        }
      },
      circuitProvisioningState: {
        serializedName: "properties.circuitProvisioningState",
        type: {
          name: "String"
        }
      },
      serviceProviderProvisioningState: {
        serializedName: "properties.serviceProviderProvisioningState",
        type: {
          name: "String"
        }
      },
      authorizations: {
        serializedName: "properties.authorizations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitAuthorization"
            }
          }
        }
      },
      peerings: {
        serializedName: "properties.peerings",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRouteCircuitPeering" }
          }
        }
      },
      serviceKey: {
        serializedName: "properties.serviceKey",
        type: {
          name: "String"
        }
      },
      serviceProviderNotes: {
        serializedName: "properties.serviceProviderNotes",
        type: {
          name: "String"
        }
      },
      serviceProviderProperties: {
        serializedName: "serviceProviderProperties",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitServiceProviderProperties"
        }
      },
      expressRoutePort: {
        serializedName: "expressRoutePort",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      bandwidthInGbps: {
        serializedName: "properties.bandwidthInGbps",
        type: {
          name: "Number"
        }
      },
      stag: {
        serializedName: "properties.stag",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      gatewayManagerEtag: {
        serializedName: "properties.gatewayManagerEtag",
        type: {
          name: "String"
        }
      },
      globalReachEnabled: {
        serializedName: "properties.globalReachEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ExpressRouteServiceProvider: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteServiceProvider",
    modelProperties: {
      ...Resource.type.modelProperties,
      peeringLocations: {
        serializedName: "properties.peeringLocations",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      bandwidthsOffered: {
        serializedName: "properties.bandwidthsOffered",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteServiceProviderBandwidthsOffered"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCrossConnection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteCrossConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      primaryAzurePort: {
        serializedName: "properties.primaryAzurePort",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryAzurePort: {
        serializedName: "properties.secondaryAzurePort",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sTag: {
        serializedName: "properties.sTag",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      peeringLocation: {
        serializedName: "properties.peeringLocation",
        type: {
          name: "String"
        }
      },
      bandwidthInMbps: {
        serializedName: "properties.bandwidthInMbps",
        type: {
          name: "Number"
        }
      },
      expressRouteCircuit: {
        serializedName: "expressRouteCircuit",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitReference"
        }
      },
      serviceProviderProvisioningState: {
        serializedName: "properties.serviceProviderProvisioningState",
        type: {
          name: "String"
        }
      },
      serviceProviderNotes: {
        serializedName: "properties.serviceProviderNotes",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      peerings: {
        serializedName: "properties.peerings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCrossConnectionPeering"
            }
          }
        }
      }
    }
  }
};

export const ExpressRoutePortsLocation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRoutePortsLocation",
    modelProperties: {
      ...Resource.type.modelProperties,
      address: {
        serializedName: "properties.address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      contact: {
        serializedName: "properties.contact",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      availableBandwidths: {
        serializedName: "properties.availableBandwidths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRoutePortsLocationBandwidths"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRoutePort: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRoutePort",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      peeringLocation: {
        serializedName: "properties.peeringLocation",
        type: {
          name: "String"
        }
      },
      bandwidthInGbps: {
        serializedName: "properties.bandwidthInGbps",
        type: {
          name: "Number"
        }
      },
      provisionedBandwidthInGbps: {
        serializedName: "properties.provisionedBandwidthInGbps",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      mtu: {
        serializedName: "properties.mtu",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encapsulation: {
        serializedName: "properties.encapsulation",
        type: {
          name: "String"
        }
      },
      etherType: {
        serializedName: "properties.etherType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allocationDate: {
        serializedName: "properties.allocationDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      links: {
        serializedName: "properties.links",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRouteLink" }
          }
        }
      },
      circuits: {
        serializedName: "properties.circuits",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      ruleGroups: {
        serializedName: "properties.ruleGroups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      basePolicy: {
        serializedName: "basePolicy",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      firewalls: {
        serializedName: "properties.firewalls",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      childPolicies: {
        serializedName: "properties.childPolicies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      threatIntelMode: {
        serializedName: "properties.threatIntelMode",
        type: {
          name: "String"
        }
      },
      threatIntelWhitelist: {
        serializedName: "threatIntelWhitelist",
        type: {
          name: "Composite",
          className: "FirewallPolicyThreatIntelWhitelist"
        }
      },
      intrusionSystemMode: {
        serializedName: "properties.intrusionSystemMode",
        type: {
          name: "String"
        }
      },
      transportSecurity: {
        serializedName: "transportSecurity",
        type: {
          name: "Composite",
          className: "FirewallPolicyTransportSecurity"
        }
      }
    }
  }
};

export const IpAllocation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpAllocation",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      virtualNetwork: {
        serializedName: "virtualNetwork",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "properties.prefix",
        type: {
          name: "String"
        }
      },
      prefixLength: {
        serializedName: "properties.prefixLength",
        type: {
          name: "Number"
        }
      },
      prefixType: {
        serializedName: "properties.prefixType",
        type: {
          name: "String"
        }
      },
      ipamAllocationId: {
        serializedName: "properties.ipamAllocationId",
        type: {
          name: "String"
        }
      },
      allocationTags: {
        serializedName: "properties.allocationTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const IpGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpGroup",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddresses: {
        serializedName: "properties.ipAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      firewalls: {
        serializedName: "properties.firewalls",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      }
    }
  }
};

export const LoadBalancer: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancer",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "LoadBalancerSku"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      frontendIPConfigurations: {
        serializedName: "properties.frontendIPConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "FrontendIPConfiguration" }
          }
        }
      },
      backendAddressPools: {
        serializedName: "properties.backendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "BackendAddressPool" }
          }
        }
      },
      loadBalancingRules: {
        serializedName: "properties.loadBalancingRules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "LoadBalancingRule" }
          }
        }
      },
      probes: {
        serializedName: "properties.probes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Probe" } }
        }
      },
      inboundNatRules: {
        serializedName: "properties.inboundNatRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InboundNatRule" } }
        }
      },
      inboundNatPools: {
        serializedName: "properties.inboundNatPools",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InboundNatPool" } }
        }
      },
      outboundRules: {
        serializedName: "properties.outboundRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OutboundRule" } }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NatGateway: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NatGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "NatGatewaySku"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      idleTimeoutInMinutes: {
        serializedName: "properties.idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      },
      publicIpAddresses: {
        serializedName: "properties.publicIpAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      publicIpPrefixes: {
        serializedName: "properties.publicIpPrefixes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      subnets: {
        serializedName: "properties.subnets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkProfile: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfile",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      containerNetworkInterfaces: {
        serializedName: "properties.containerNetworkInterfaces",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ContainerNetworkInterface" }
          }
        }
      },
      containerNetworkInterfaceConfigurations: {
        serializedName: "properties.containerNetworkInterfaceConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerNetworkInterfaceConfiguration"
            }
          }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkVirtualAppliance: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkVirtualAppliance",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "VirtualApplianceSkuProperties"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bootStrapConfigurationBlob: {
        serializedName: "properties.bootStrapConfigurationBlob",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      virtualHub: {
        serializedName: "virtualHub",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      cloudInitConfigurationBlob: {
        serializedName: "properties.cloudInitConfigurationBlob",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      virtualApplianceAsn: {
        constraints: {
          InclusiveMaximum: 4294967295
        },
        serializedName: "properties.virtualApplianceAsn",
        type: {
          name: "Number"
        }
      },
      virtualApplianceNics: {
        serializedName: "properties.virtualApplianceNics",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualApplianceNicProperties"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkWatcher: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkWatcher",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkService: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkService",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      loadBalancerFrontendIpConfigurations: {
        serializedName: "properties.loadBalancerFrontendIpConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "FrontendIPConfiguration" }
          }
        }
      },
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkServiceIpConfiguration"
            }
          }
        }
      },
      networkInterfaces: {
        serializedName: "properties.networkInterfaces",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NetworkInterface" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateEndpointConnection" }
          }
        }
      },
      visibility: {
        serializedName: "visibility",
        type: {
          name: "Composite",
          className: "ResourceSet"
        }
      },
      autoApproval: {
        serializedName: "autoApproval",
        type: {
          name: "Composite",
          className: "ResourceSet"
        }
      },
      fqdns: {
        serializedName: "properties.fqdns",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      alias: {
        serializedName: "properties.alias",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enableProxyProtocol: {
        serializedName: "properties.enableProxyProtocol",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PublicIPPrefix: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublicIPPrefix",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "PublicIPPrefixSku"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      publicIPAddressVersion: {
        serializedName: "properties.publicIPAddressVersion",
        type: {
          name: "String"
        }
      },
      ipTags: {
        serializedName: "properties.ipTags",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IpTag" } }
        }
      },
      prefixLength: {
        serializedName: "properties.prefixLength",
        type: {
          name: "Number"
        }
      },
      ipPrefix: {
        serializedName: "properties.ipPrefix",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicIPAddresses: {
        serializedName: "properties.publicIPAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReferencedPublicIpAddress" }
          }
        }
      },
      loadBalancerFrontendIpConfiguration: {
        serializedName: "loadBalancerFrontendIpConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteFilter: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteFilter",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RouteFilterRule" } }
        }
      },
      peerings: {
        serializedName: "properties.peerings",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRouteCircuitPeering" }
          }
        }
      },
      ipv6Peerings: {
        serializedName: "properties.ipv6Peerings",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRouteCircuitPeering" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityPartnerProvider: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityPartnerProvider",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      securityProviderName: {
        serializedName: "properties.securityProviderName",
        type: {
          name: "String"
        }
      },
      connectionStatus: {
        serializedName: "properties.connectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualHub: {
        serializedName: "virtualHub",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const BgpServiceCommunity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BgpServiceCommunity",
    modelProperties: {
      ...Resource.type.modelProperties,
      serviceName: {
        serializedName: "properties.serviceName",
        type: {
          name: "String"
        }
      },
      bgpCommunities: {
        serializedName: "properties.bgpCommunities",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "BGPCommunity" } }
        }
      }
    }
  }
};

export const NetworkIntentPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkIntentPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGateway: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkGatewayIPConfiguration"
            }
          }
        }
      },
      gatewayType: {
        serializedName: "properties.gatewayType",
        type: {
          name: "String"
        }
      },
      vpnType: {
        serializedName: "properties.vpnType",
        type: {
          name: "String"
        }
      },
      vpnGatewayGeneration: {
        serializedName: "properties.vpnGatewayGeneration",
        type: {
          name: "String"
        }
      },
      enableBgp: {
        serializedName: "properties.enableBgp",
        type: {
          name: "Boolean"
        }
      },
      enablePrivateIpAddress: {
        serializedName: "properties.enablePrivateIpAddress",
        type: {
          name: "Boolean"
        }
      },
      active: {
        serializedName: "properties.activeActive",
        type: {
          name: "Boolean"
        }
      },
      gatewayDefaultSite: {
        serializedName: "gatewayDefaultSite",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "VirtualNetworkGatewaySku"
        }
      },
      vpnClientConfiguration: {
        serializedName: "vpnClientConfiguration",
        type: {
          name: "Composite",
          className: "VpnClientConfiguration"
        }
      },
      bgpSettings: {
        serializedName: "bgpSettings",
        type: {
          name: "Composite",
          className: "BgpSettings"
        }
      },
      customRoutes: {
        serializedName: "customRoutes",
        type: {
          name: "Composite",
          className: "AddressSpace"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enableDnsForwarding: {
        serializedName: "properties.enableDnsForwarding",
        type: {
          name: "Boolean"
        }
      },
      inboundDnsForwardingEndpoint: {
        serializedName: "properties.inboundDnsForwardingEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGatewayConnectionListEntity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewayConnectionListEntity",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      authorizationKey: {
        serializedName: "properties.authorizationKey",
        type: {
          name: "String"
        }
      },
      virtualNetworkGateway1: {
        serializedName: "virtualNetworkGateway1",
        type: {
          name: "Composite",
          className: "VirtualNetworkConnectionGatewayReference"
        }
      },
      virtualNetworkGateway2: {
        serializedName: "virtualNetworkGateway2",
        type: {
          name: "Composite",
          className: "VirtualNetworkConnectionGatewayReference"
        }
      },
      localNetworkGateway2: {
        serializedName: "localNetworkGateway2",
        type: {
          name: "Composite",
          className: "VirtualNetworkConnectionGatewayReference"
        }
      },
      connectionType: {
        serializedName: "properties.connectionType",
        required: true,
        type: {
          name: "String"
        }
      },
      connectionProtocol: {
        serializedName: "properties.connectionProtocol",
        type: {
          name: "String"
        }
      },
      routingWeight: {
        serializedName: "properties.routingWeight",
        type: {
          name: "Number"
        }
      },
      sharedKey: {
        serializedName: "properties.sharedKey",
        type: {
          name: "String"
        }
      },
      connectionStatus: {
        serializedName: "properties.connectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tunnelConnectionStatus: {
        serializedName: "properties.tunnelConnectionStatus",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TunnelConnectionHealth" }
          }
        }
      },
      egressBytesTransferred: {
        serializedName: "properties.egressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      ingressBytesTransferred: {
        serializedName: "properties.ingressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      peer: {
        serializedName: "peer",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      enableBgp: {
        serializedName: "properties.enableBgp",
        type: {
          name: "Boolean"
        }
      },
      usePolicyBasedTrafficSelectors: {
        serializedName: "properties.usePolicyBasedTrafficSelectors",
        type: {
          name: "Boolean"
        }
      },
      ipsecPolicies: {
        serializedName: "properties.ipsecPolicies",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IpsecPolicy" } }
        }
      },
      trafficSelectorPolicies: {
        serializedName: "properties.trafficSelectorPolicies",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TrafficSelectorPolicy" }
          }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expressRouteGatewayBypass: {
        serializedName: "properties.expressRouteGatewayBypass",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const LocalNetworkGateway: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocalNetworkGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localNetworkAddressSpace: {
        serializedName: "localNetworkAddressSpace",
        type: {
          name: "Composite",
          className: "AddressSpace"
        }
      },
      gatewayIpAddress: {
        serializedName: "properties.gatewayIpAddress",
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "properties.fqdn",
        type: {
          name: "String"
        }
      },
      bgpSettings: {
        serializedName: "bgpSettings",
        type: {
          name: "Composite",
          className: "BgpSettings"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGatewayConnection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewayConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      authorizationKey: {
        serializedName: "properties.authorizationKey",
        type: {
          name: "String"
        }
      },
      virtualNetworkGateway1: {
        serializedName: "virtualNetworkGateway1",
        type: {
          name: "Composite",
          className: "VirtualNetworkGateway"
        }
      },
      virtualNetworkGateway2: {
        serializedName: "virtualNetworkGateway2",
        type: {
          name: "Composite",
          className: "VirtualNetworkGateway"
        }
      },
      localNetworkGateway2: {
        serializedName: "localNetworkGateway2",
        type: {
          name: "Composite",
          className: "LocalNetworkGateway"
        }
      },
      connectionType: {
        serializedName: "properties.connectionType",
        required: true,
        type: {
          name: "String"
        }
      },
      connectionProtocol: {
        serializedName: "properties.connectionProtocol",
        type: {
          name: "String"
        }
      },
      routingWeight: {
        serializedName: "properties.routingWeight",
        type: {
          name: "Number"
        }
      },
      dpdTimeoutSeconds: {
        serializedName: "properties.dpdTimeoutSeconds",
        type: {
          name: "Number"
        }
      },
      sharedKey: {
        serializedName: "properties.sharedKey",
        type: {
          name: "String"
        }
      },
      connectionStatus: {
        serializedName: "properties.connectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tunnelConnectionStatus: {
        serializedName: "properties.tunnelConnectionStatus",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TunnelConnectionHealth" }
          }
        }
      },
      egressBytesTransferred: {
        serializedName: "properties.egressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      ingressBytesTransferred: {
        serializedName: "properties.ingressBytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      peer: {
        serializedName: "peer",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      enableBgp: {
        serializedName: "properties.enableBgp",
        type: {
          name: "Boolean"
        }
      },
      useLocalAzureIpAddress: {
        serializedName: "properties.useLocalAzureIpAddress",
        type: {
          name: "Boolean"
        }
      },
      usePolicyBasedTrafficSelectors: {
        serializedName: "properties.usePolicyBasedTrafficSelectors",
        type: {
          name: "Boolean"
        }
      },
      ipsecPolicies: {
        serializedName: "properties.ipsecPolicies",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IpsecPolicy" } }
        }
      },
      trafficSelectorPolicies: {
        serializedName: "properties.trafficSelectorPolicies",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TrafficSelectorPolicy" }
          }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expressRouteGatewayBypass: {
        serializedName: "properties.expressRouteGatewayBypass",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VirtualRouter: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualRouter",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualRouterAsn: {
        constraints: {
          InclusiveMaximum: 4294967295
        },
        serializedName: "properties.virtualRouterAsn",
        type: {
          name: "Number"
        }
      },
      virtualRouterIps: {
        serializedName: "properties.virtualRouterIps",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      hostedSubnet: {
        serializedName: "hostedSubnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      hostedGateway: {
        serializedName: "hostedGateway",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      peerings: {
        serializedName: "properties.peerings",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualWAN: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualWAN",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      disableVpnEncryption: {
        serializedName: "properties.disableVpnEncryption",
        type: {
          name: "Boolean"
        }
      },
      virtualHubs: {
        serializedName: "properties.virtualHubs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      vpnSites: {
        serializedName: "properties.vpnSites",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      allowBranchToBranchTraffic: {
        serializedName: "properties.allowBranchToBranchTraffic",
        type: {
          name: "Boolean"
        }
      },
      allowVnetToVnetTraffic: {
        serializedName: "properties.allowVnetToVnetTraffic",
        type: {
          name: "Boolean"
        }
      },
      office365LocalBreakoutCategory: {
        serializedName: "properties.office365LocalBreakoutCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnSite: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnSite",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualWan: {
        serializedName: "virtualWan",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      deviceProperties: {
        serializedName: "deviceProperties",
        type: {
          name: "Composite",
          className: "DeviceProperties"
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        type: {
          name: "String"
        }
      },
      siteKey: {
        serializedName: "properties.siteKey",
        type: {
          name: "String"
        }
      },
      addressSpace: {
        serializedName: "addressSpace",
        type: {
          name: "Composite",
          className: "AddressSpace"
        }
      },
      bgpProperties: {
        serializedName: "bgpProperties",
        type: {
          name: "Composite",
          className: "BgpSettings"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isSecuritySite: {
        serializedName: "properties.isSecuritySite",
        type: {
          name: "Boolean"
        }
      },
      vpnSiteLinks: {
        serializedName: "properties.vpnSiteLinks",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VpnSiteLink" } }
        }
      }
    }
  }
};

export const P2SVpnGateway: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "P2SVpnGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualHub: {
        serializedName: "virtualHub",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      p2SConnectionConfigurations: {
        serializedName: "properties.p2SConnectionConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "P2SConnectionConfiguration" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vpnGatewayScaleUnit: {
        serializedName: "properties.vpnGatewayScaleUnit",
        type: {
          name: "Number"
        }
      },
      vpnServerConfiguration: {
        serializedName: "vpnServerConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      vpnClientConnectionHealth: {
        serializedName: "vpnClientConnectionHealth",
        type: {
          name: "Composite",
          className: "VpnClientConnectionHealth"
        }
      }
    }
  }
};

export const VpnServerConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnServerConfiguration",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      namePropertiesName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      vpnProtocols: {
        serializedName: "properties.vpnProtocols",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      vpnAuthenticationTypes: {
        serializedName: "properties.vpnAuthenticationTypes",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      vpnClientRootCertificates: {
        serializedName: "properties.vpnClientRootCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VpnServerConfigVpnClientRootCertificate"
            }
          }
        }
      },
      vpnClientRevokedCertificates: {
        serializedName: "properties.vpnClientRevokedCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VpnServerConfigVpnClientRevokedCertificate"
            }
          }
        }
      },
      radiusServerRootCertificates: {
        serializedName: "properties.radiusServerRootCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VpnServerConfigRadiusServerRootCertificate"
            }
          }
        }
      },
      radiusClientRootCertificates: {
        serializedName: "properties.radiusClientRootCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VpnServerConfigRadiusClientRootCertificate"
            }
          }
        }
      },
      vpnClientIpsecPolicies: {
        serializedName: "properties.vpnClientIpsecPolicies",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IpsecPolicy" } }
        }
      },
      radiusServerAddress: {
        serializedName: "properties.radiusServerAddress",
        type: {
          name: "String"
        }
      },
      radiusServerSecret: {
        serializedName: "properties.radiusServerSecret",
        type: {
          name: "String"
        }
      },
      radiusServers: {
        serializedName: "properties.radiusServers",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RadiusServer" } }
        }
      },
      aadAuthenticationParameters: {
        serializedName: "aadAuthenticationParameters",
        type: {
          name: "Composite",
          className: "AadAuthenticationParameters"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      p2SVpnGateways: {
        serializedName: "properties.p2SVpnGateways",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "P2SVpnGateway" } }
        }
      },
      etagPropertiesEtag: {
        serializedName: "properties.etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualHub: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualHub",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualWan: {
        serializedName: "virtualWan",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      vpnGateway: {
        serializedName: "vpnGateway",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      p2SVpnGateway: {
        serializedName: "p2SVpnGateway",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      expressRouteGateway: {
        serializedName: "expressRouteGateway",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      azureFirewall: {
        serializedName: "azureFirewall",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      securityPartnerProvider: {
        serializedName: "securityPartnerProvider",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      virtualNetworkConnections: {
        serializedName: "properties.virtualNetworkConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HubVirtualNetworkConnection"
            }
          }
        }
      },
      addressPrefix: {
        serializedName: "properties.addressPrefix",
        type: {
          name: "String"
        }
      },
      routeTable: {
        serializedName: "routeTable",
        type: {
          name: "Composite",
          className: "VirtualHubRouteTable"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      securityProviderName: {
        serializedName: "properties.securityProviderName",
        type: {
          name: "String"
        }
      },
      virtualHubRouteTableV2S: {
        serializedName: "properties.virtualHubRouteTableV2s",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualHubRouteTableV2" }
          }
        }
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnGateway: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualHub: {
        serializedName: "virtualHub",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      connections: {
        serializedName: "properties.connections",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VpnConnection" } }
        }
      },
      bgpSettings: {
        serializedName: "bgpSettings",
        type: {
          name: "Composite",
          className: "BgpSettings"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vpnGatewayScaleUnit: {
        serializedName: "properties.vpnGatewayScaleUnit",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExpressRouteGateway: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      autoScaleConfiguration: {
        serializedName: "autoScaleConfiguration",
        type: {
          name: "Composite",
          className: "ExpressRouteGatewayPropertiesAutoScaleConfiguration"
        }
      },
      expressRouteConnections: {
        serializedName: "properties.expressRouteConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExpressRouteConnection" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualHub: {
        serializedName: "virtualHub",
        type: {
          name: "Composite",
          className: "VirtualHubId"
        }
      }
    }
  }
};

export const WebApplicationFirewallPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebApplicationFirewallPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      policySettings: {
        serializedName: "policySettings",
        type: {
          name: "Composite",
          className: "PolicySettings"
        }
      },
      customRules: {
        serializedName: "properties.customRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebApplicationFirewallCustomRule"
            }
          }
        }
      },
      applicationGateways: {
        serializedName: "properties.applicationGateways",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ApplicationGateway" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managedRules: {
        serializedName: "managedRules",
        type: {
          name: "Composite",
          className: "ManagedRulesDefinition"
        }
      },
      httpListeners: {
        serializedName: "properties.httpListeners",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      },
      pathBasedRules: {
        serializedName: "properties.pathBasedRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SubResource" } }
        }
      }
    }
  }
};

export const Vm: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Vm",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const FirewallPolicyNatRule: coreHttp.CompositeMapper = {
  serializedName: "FirewallPolicyNatRule",
  type: {
    name: "Composite",
    className: "FirewallPolicyNatRule",
    uberParent: "FirewallPolicyRule",
    polymorphicDiscriminator: FirewallPolicyRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...FirewallPolicyRule.type.modelProperties,
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "FirewallPolicyNatRuleAction"
        }
      },
      translatedAddress: {
        serializedName: "translatedAddress",
        type: {
          name: "String"
        }
      },
      translatedPort: {
        serializedName: "translatedPort",
        type: {
          name: "String"
        }
      },
      ruleCondition: {
        serializedName: "ruleCondition",
        type: {
          name: "Composite",
          className: "FirewallPolicyRuleCondition"
        }
      }
    }
  }
};

export const FirewallPolicyFilterRule: coreHttp.CompositeMapper = {
  serializedName: "FirewallPolicyFilterRule",
  type: {
    name: "Composite",
    className: "FirewallPolicyFilterRule",
    uberParent: "FirewallPolicyRule",
    polymorphicDiscriminator: FirewallPolicyRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...FirewallPolicyRule.type.modelProperties,
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "FirewallPolicyFilterRuleAction"
        }
      },
      ruleConditions: {
        serializedName: "ruleConditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallPolicyRuleCondition"
            }
          }
        }
      }
    }
  }
};

export const PacketCaptureResultProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureResultProperties",
    modelProperties: {
      ...PacketCaptureParameters.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorResultProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorResultProperties",
    modelProperties: {
      ...ConnectionMonitorParameters.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      monitoringStatus: {
        serializedName: "monitoringStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectionMonitorType: {
        serializedName: "connectionMonitorType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServicePropertiesVisibility: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServicePropertiesVisibility",
    modelProperties: {
      ...ResourceSet.type.modelProperties
    }
  }
};

export const PrivateLinkServicePropertiesAutoApproval: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServicePropertiesAutoApproval",
    modelProperties: {
      ...ResourceSet.type.modelProperties
    }
  }
};

export const ApplicationRuleCondition: coreHttp.CompositeMapper = {
  serializedName: "ApplicationRuleCondition",
  type: {
    name: "Composite",
    className: "ApplicationRuleCondition",
    uberParent: "FirewallPolicyRuleCondition",
    polymorphicDiscriminator:
      FirewallPolicyRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...FirewallPolicyRuleCondition.type.modelProperties,
      sourceAddresses: {
        serializedName: "sourceAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationAddresses: {
        serializedName: "destinationAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      protocols: {
        serializedName: "protocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallPolicyRuleConditionApplicationProtocol"
            }
          }
        }
      },
      targetUrls: {
        serializedName: "targetUrls",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      targetFqdns: {
        serializedName: "targetFqdns",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      fqdnTags: {
        serializedName: "fqdnTags",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      sourceIpGroups: {
        serializedName: "sourceIpGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const NatRuleCondition: coreHttp.CompositeMapper = {
  serializedName: "NatRuleCondition",
  type: {
    name: "Composite",
    className: "NatRuleCondition",
    uberParent: "FirewallPolicyRuleCondition",
    polymorphicDiscriminator:
      FirewallPolicyRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...FirewallPolicyRuleCondition.type.modelProperties,
      ipProtocols: {
        serializedName: "ipProtocols",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      sourceAddresses: {
        serializedName: "sourceAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationAddresses: {
        serializedName: "destinationAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationPorts: {
        serializedName: "destinationPorts",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      sourceIpGroups: {
        serializedName: "sourceIpGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      terminateTLS: {
        serializedName: "terminateTLS",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NetworkRuleCondition: coreHttp.CompositeMapper = {
  serializedName: "NetworkRuleCondition",
  type: {
    name: "Composite",
    className: "NetworkRuleCondition",
    uberParent: "FirewallPolicyRuleCondition",
    polymorphicDiscriminator:
      FirewallPolicyRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...FirewallPolicyRuleCondition.type.modelProperties,
      ipProtocols: {
        serializedName: "ipProtocols",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      sourceAddresses: {
        serializedName: "sourceAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationAddresses: {
        serializedName: "destinationAddresses",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationPorts: {
        serializedName: "destinationPorts",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      sourceIpGroups: {
        serializedName: "sourceIpGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      destinationIpGroups: {
        serializedName: "destinationIpGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export let discriminators = {
  FirewallPolicyRule: FirewallPolicyRule,
  FirewallPolicyRuleCondition: FirewallPolicyRuleCondition,
  "FirewallPolicyRule.FirewallPolicyNatRule": FirewallPolicyNatRule,
  "FirewallPolicyRule.FirewallPolicyFilterRule": FirewallPolicyFilterRule,
  "FirewallPolicyRuleCondition.ApplicationRuleCondition": ApplicationRuleCondition,
  "FirewallPolicyRuleCondition.NatRuleCondition": NatRuleCondition,
  "FirewallPolicyRuleCondition.NetworkRuleCondition": NetworkRuleCondition
};
