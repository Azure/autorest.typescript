/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type FirewallPolicyRuleUnion =
  | FirewallPolicyRule
  | FirewallPolicyNatRule
  | FirewallPolicyFilterRule;
export type FirewallPolicyRuleConditionUnion =
  | FirewallPolicyRuleCondition
  | ApplicationRuleCondition
  | NatRuleCondition
  | NetworkRuleCondition;

/**
 * An error response from the service.
 */
export interface CloudError {
  /**
   * Cloud error body.
   */
  error?: CloudErrorBody;
}

/**
 * An error response from the service.
 */
export interface CloudErrorBody {
  /**
   * An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
   */
  code?: string;
  /**
   * A message describing the error, intended to be suitable for display in a user interface.
   */
  message?: string;
  /**
   * The target of the particular error. For example, the name of the property in error.
   */
  target?: string;
  /**
   * A list of additional details about the error.
   */
  details?: CloudErrorBody[];
}

/**
 * SKU of an application gateway.
 */
export interface ApplicationGatewaySku {
  /**
   * Name of an application gateway SKU.
   */
  name?: ApplicationGatewaySkuName;
  /**
   * Tier of an application gateway.
   */
  tier?: ApplicationGatewayTier;
  /**
   * Capacity (instance count) of an application gateway.
   */
  capacity?: number;
}

/**
 * Application Gateway Ssl policy.
 */
export interface ApplicationGatewaySslPolicy {
  /**
   * Ssl protocols to be disabled on application gateway.
   */
  disabledSslProtocols?: ApplicationGatewaySslProtocol[];
  /**
   * Type of Ssl Policy.
   */
  policyType?: ApplicationGatewaySslPolicyType;
  /**
   * Name of Ssl predefined policy.
   */
  policyName?: ApplicationGatewaySslPolicyName;
  /**
   * Ssl cipher suites to be enabled in the specified order to application gateway.
   */
  cipherSuites?: ApplicationGatewaySslCipherSuite[];
  /**
   * Minimum version of Ssl protocol to be supported on application gateway.
   */
  minProtocolVersion?: ApplicationGatewaySslProtocol;
}

/**
 * Reference to another subresource.
 */
export interface SubResource {
  /**
   * Resource ID.
   */
  id?: string;
}

/**
 * Application gateway probe health response match.
 */
export interface ApplicationGatewayProbeHealthResponseMatch {
  /**
   * Body that must be contained in the health response. Default value is empty.
   */
  body?: string;
  /**
   * Allowed ranges of healthy status codes. Default range of healthy status codes is 200-399.
   */
  statusCodes?: string[];
}

/**
 * Common resource representation.
 */
export interface Resource {
  /**
   * Resource ID.
   */
  id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A collection of information about the state of the connection between service consumer and provider.
 */
export interface PrivateLinkServiceConnectionState {
  /**
   * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
   */
  status?: string;
  /**
   * The reason for approval/rejection of the connection.
   */
  description?: string;
  /**
   * A message indicating if changes on the service provider require any updates on the consumer.
   */
  actionsRequired?: string;
}

/**
 * Contains custom Dns resolution configuration from customer.
 */
export interface CustomDnsConfigPropertiesFormat {
  /**
   * Fqdn that resolves to private endpoint ip address.
   */
  fqdn?: string;
  /**
   * A list of private ip addresses of the private endpoint.
   */
  ipAddresses?: string[];
}

/**
 * DNS settings of a network interface.
 */
export interface NetworkInterfaceDnsSettings {
  /**
   * List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection.
   */
  dnsServers?: string[];
  /**
   * If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs.
   */
  readonly appliedDnsServers?: string[];
  /**
   * Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.
   */
  internalDnsNameLabel?: string;
  /**
   * Fully qualified DNS name supporting internal communications between VMs in the same virtual network.
   */
  readonly internalFqdn?: string;
  /**
   * Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the VM name with the value of internalDomainNameSuffix.
   */
  readonly internalDomainNameSuffix?: string;
}

/**
 * Parameters that define the retention policy for flow log.
 */
export interface RetentionPolicyParameters {
  /**
   * Number of days to retain flow log records.
   */
  days?: number;
  /**
   * Flag to enable/disable retention.
   */
  enabled?: boolean;
}

/**
 * Parameters that define the flow log format.
 */
export interface FlowLogFormatParameters {
  /**
   * The file type of flow log.
   */
  type?: FlowLogFormatType;
  /**
   * The version (revision) of the flow log.
   */
  version?: number;
}

/**
 * Parameters that define the configuration of traffic analytics.
 */
export interface TrafficAnalyticsProperties {
  /**
   * Parameters that define the configuration of traffic analytics.
   */
  networkWatcherFlowAnalyticsConfiguration?: TrafficAnalyticsConfigurationProperties;
}

/**
 * Parameters that define the configuration of traffic analytics.
 */
export interface TrafficAnalyticsConfigurationProperties {
  /**
   * Flag to enable/disable traffic analytics.
   */
  enabled?: boolean;
  /**
   * The resource guid of the attached workspace.
   */
  workspaceId?: string;
  /**
   * The location of the attached workspace.
   */
  workspaceRegion?: string;
  /**
   * Resource Id of the attached workspace.
   */
  workspaceResourceId?: string;
  /**
   * The interval in minutes which would decide how frequently TA service should do flow analytics.
   */
  trafficAnalyticsInterval?: number;
}

/**
 * The service endpoint properties.
 */
export interface ServiceEndpointPropertiesFormat {
  /**
   * The type of the endpoint service.
   */
  service?: string;
  /**
   * A list of locations.
   */
  locations?: string[];
  /**
   * The provisioning state of the service endpoint resource.
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * SKU of a public IP address.
 */
export interface PublicIPAddressSku {
  /**
   * Name of a public IP address SKU.
   */
  name?: PublicIPAddressSkuName;
}

/**
 * Contains FQDN of the DNS record associated with the public IP address.
 */
export interface PublicIPAddressDnsSettings {
  /**
   * The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.
   */
  domainNameLabel?: string;
  /**
   * The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
   */
  fqdn?: string;
  /**
   * The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
   */
  reverseFqdn?: string;
}

/**
 * Contains the DDoS protection settings of the public IP.
 */
export interface DdosSettings {
  /**
   * The DDoS custom policy associated with the public IP.
   */
  ddosCustomPolicy?: SubResource;
  /**
   * The DDoS protection policy customizability of the public IP. Only standard coverage will have the ability to be customized.
   */
  protectionCoverage?: DdosSettingsProtectionCoverage;
  /**
   * Enables DDoS protection on the public IP.
   */
  protectedIP?: boolean;
}

/**
 * Contains the IpTag associated with the object.
 */
export interface IpTag {
  /**
   * The IP tag type. Example: FirstPartyUsage.
   */
  ipTagType?: string;
  /**
   * The value of the IP tag associated with the public IP. Example: SQL.
   */
  tag?: string;
}

/**
 * Load balancer backend addresses.
 */
export interface LoadBalancerBackendAddress {
  /**
   * Name of the backend address.
   */
  name?: string;
  /**
   * Reference to an existing virtual network.
   */
  virtualNetwork?: VirtualNetwork;
  /**
   * IP Address belonging to the referenced virtual network.
   */
  ipAddress?: string;
  /**
   * Reference to IP address defined in network interfaces.
   */
  networkInterfaceIPConfiguration?: NetworkInterfaceIPConfiguration;
}

/**
 * AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual network.
 */
export interface AddressSpace {
  /**
   * A list of address blocks reserved for this virtual network in CIDR notation.
   */
  addressPrefixes?: string[];
}

/**
 * DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
 */
export interface DhcpOptions {
  /**
   * The list of DNS servers IP addresses.
   */
  dnsServers?: string[];
}

/**
 * Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
 */
export interface VirtualNetworkBgpCommunities {
  /**
   * The BGP community associated with the virtual network.
   */
  virtualNetworkCommunity: string;
  /**
   * The BGP community associated with the region of the virtual network.
   */
  readonly regionalCommunity?: string;
}

/**
 * PrivateLinkConnection properties for the network interface.
 */
export interface NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties {
  /**
   * The group ID for current private link connection.
   */
  readonly groupId?: string;
  /**
   * The required member name for current private link connection.
   */
  readonly requiredMemberName?: string;
  /**
   * List of FQDNs for current private link connection.
   */
  readonly fqdns?: string[];
}

/**
 * Backend address of an application gateway.
 */
export interface ApplicationGatewayBackendAddress {
  /**
   * Fully qualified domain name (FQDN).
   */
  fqdn?: string;
  /**
   * IP address.
   */
  ipAddress?: string;
}

/**
 * Connection draining allows open connections to a backend server to be active for a specified time after the backend server got removed from the configuration.
 */
export interface ApplicationGatewayConnectionDraining {
  /**
   * Whether connection draining is enabled or not.
   */
  enabled: boolean;
  /**
   * The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.
   */
  drainTimeoutInSec: number;
}

/**
 * Customer error of an application gateway.
 */
export interface ApplicationGatewayCustomError {
  /**
   * Status code of the application gateway customer error.
   */
  statusCode?: ApplicationGatewayCustomErrorStatusCode;
  /**
   * Error page URL of the application gateway customer error.
   */
  customErrorPageUrl?: string;
}

/**
 * Rewrite rule of an application gateway.
 */
export interface ApplicationGatewayRewriteRule {
  /**
   * Name of the rewrite rule that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * Rule Sequence of the rewrite rule that determines the order of execution of a particular rule in a RewriteRuleSet.
   */
  ruleSequence?: number;
  /**
   * Conditions based on which the action set execution will be evaluated.
   */
  conditions?: ApplicationGatewayRewriteRuleCondition[];
  /**
   * Set of actions to be done as part of the rewrite Rule.
   */
  actionSet?: ApplicationGatewayRewriteRuleActionSet;
}

/**
 * Set of conditions in the Rewrite Rule in Application Gateway.
 */
export interface ApplicationGatewayRewriteRuleCondition {
  /**
   * The condition parameter of the RewriteRuleCondition.
   */
  variable?: string;
  /**
   * The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
   */
  pattern?: string;
  /**
   * Setting this paramter to truth value with force the pattern to do a case in-sensitive comparison.
   */
  ignoreCase?: boolean;
  /**
   * Setting this value as truth will force to check the negation of the condition given by the user.
   */
  negate?: boolean;
}

/**
 * Set of actions in the Rewrite Rule in Application Gateway.
 */
export interface ApplicationGatewayRewriteRuleActionSet {
  /**
   * Request Header Actions in the Action Set.
   */
  requestHeaderConfigurations?: ApplicationGatewayHeaderConfiguration[];
  /**
   * Response Header Actions in the Action Set.
   */
  responseHeaderConfigurations?: ApplicationGatewayHeaderConfiguration[];
  /**
   * Url Configuration Action in the Action Set.
   */
  urlConfiguration?: ApplicationGatewayUrlConfiguration;
}

/**
 * Header configuration of the Actions set in Application Gateway.
 */
export interface ApplicationGatewayHeaderConfiguration {
  /**
   * Header name of the header configuration.
   */
  headerName?: string;
  /**
   * Header value of the header configuration.
   */
  headerValue?: string;
}

/**
 * Url configuration of the Actions set in Application Gateway.
 */
export interface ApplicationGatewayUrlConfiguration {
  /**
   * Url path which user has provided for url rewrite. Null means no path will be updated. Default value is null.
   */
  modifiedPath?: string;
  /**
   * Query string which user has provided for url rewrite. Null means no query string will be updated. Default value is null.
   */
  modifiedQueryString?: string;
  /**
   * If set as true, it will re-evaluate the url path map provided in path based request routing rules using modified path. Default value is false.
   */
  reroute?: boolean;
}

/**
 * Application gateway web application firewall configuration.
 */
export interface ApplicationGatewayWebApplicationFirewallConfiguration {
  /**
   * Whether the web application firewall is enabled or not.
   */
  enabled: boolean;
  /**
   * Web application firewall mode.
   */
  firewallMode: ApplicationGatewayFirewallMode;
  /**
   * The type of the web application firewall rule set. Possible values are: 'OWASP'.
   */
  ruleSetType: string;
  /**
   * The version of the rule set type.
   */
  ruleSetVersion: string;
  /**
   * The disabled rule groups.
   */
  disabledRuleGroups?: ApplicationGatewayFirewallDisabledRuleGroup[];
  /**
   * Whether allow WAF to check request Body.
   */
  requestBodyCheck?: boolean;
  /**
   * Maximum request body size for WAF.
   */
  maxRequestBodySize?: number;
  /**
   * Maximum request body size in Kb for WAF.
   */
  maxRequestBodySizeInKb?: number;
  /**
   * Maximum file upload size in Mb for WAF.
   */
  fileUploadLimitInMb?: number;
  /**
   * The exclusion list.
   */
  exclusions?: ApplicationGatewayFirewallExclusion[];
}

/**
 * Allows to disable rules within a rule group or an entire rule group.
 */
export interface ApplicationGatewayFirewallDisabledRuleGroup {
  /**
   * The name of the rule group that will be disabled.
   */
  ruleGroupName: string;
  /**
   * The list of rules that will be disabled. If null, all rules of the rule group will be disabled.
   */
  rules?: number[];
}

/**
 * Allow to exclude some variable satisfy the condition for the WAF check.
 */
export interface ApplicationGatewayFirewallExclusion {
  /**
   * The variable to be excluded.
   */
  matchVariable: string;
  /**
   * When matchVariable is a collection, operate on the selector to specify which elements in the collection this exclusion applies to.
   */
  selectorMatchOperator: string;
  /**
   * When matchVariable is a collection, operator used to specify which elements in the collection this exclusion applies to.
   */
  selector: string;
}

/**
 * Application Gateway autoscale configuration.
 */
export interface ApplicationGatewayAutoscaleConfiguration {
  /**
   * Lower bound on number of Application Gateway capacity.
   */
  minCapacity: number;
  /**
   * Upper bound on number of Application Gateway capacity.
   */
  maxCapacity?: number;
}

/**
 * Identity for the resource.
 */
export interface ManagedServiceIdentity {
  /**
   * The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
   */
  readonly principalId?: string;
  /**
   * The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
   */
  readonly tenantId?: string;
  /**
   * The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
   */
  type?: ResourceIdentityType;
  /**
   * The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   */
  userAssignedIdentities?: {
    [propertyName: string]: Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties;
  };
}

export interface Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties {
  /**
   * The principal id of user assigned identity.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   */
  readonly clientId?: string;
}

/**
 * Tags object for patch operations.
 */
export interface TagsObject {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Response for ListApplicationGateways API service call.
 */
export interface ApplicationGatewayListResult {
  /**
   * List of an application gateways in a resource group.
   */
  value?: ApplicationGateway[];
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for ApplicationGatewayBackendHealth API service call.
 */
export interface ApplicationGatewayBackendHealth {
  /**
   * A list of ApplicationGatewayBackendHealthPool resources.
   */
  backendAddressPools?: ApplicationGatewayBackendHealthPool[];
}

/**
 * Application gateway BackendHealth pool.
 */
export interface ApplicationGatewayBackendHealthPool {
  /**
   * Reference to an ApplicationGatewayBackendAddressPool resource.
   */
  backendAddressPool?: ApplicationGatewayBackendAddressPool;
  /**
   * List of ApplicationGatewayBackendHealthHttpSettings resources.
   */
  backendHttpSettingsCollection?: ApplicationGatewayBackendHealthHttpSettings[];
}

/**
 * Application gateway BackendHealthHttp settings.
 */
export interface ApplicationGatewayBackendHealthHttpSettings {
  /**
   * Reference to an ApplicationGatewayBackendHttpSettings resource.
   */
  backendHttpSettings?: ApplicationGatewayBackendHttpSettings;
  /**
   * List of ApplicationGatewayBackendHealthServer resources.
   */
  servers?: ApplicationGatewayBackendHealthServer[];
}

/**
 * Application gateway backendhealth http settings.
 */
export interface ApplicationGatewayBackendHealthServer {
  /**
   * IP address or FQDN of backend server.
   */
  address?: string;
  /**
   * Reference to IP configuration of backend server.
   */
  ipConfiguration?: NetworkInterfaceIPConfiguration;
  /**
   * Health of backend server.
   */
  health?: ApplicationGatewayBackendHealthServerHealth;
  /**
   * Health Probe Log.
   */
  healthProbeLog?: string;
}

/**
 * Details of on demand test probe request.
 */
export interface ApplicationGatewayOnDemandProbe {
  /**
   * The protocol used for the probe.
   */
  protocol?: ApplicationGatewayProtocol;
  /**
   * Host name to send the probe to.
   */
  host?: string;
  /**
   * Relative path of probe. Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>.
   */
  path?: string;
  /**
   * The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
   */
  timeout?: number;
  /**
   * Whether the host header should be picked from the backend http settings. Default value is false.
   */
  pickHostNameFromBackendHttpSettings?: boolean;
  /**
   * Criterion for classifying a healthy probe response.
   */
  match?: ApplicationGatewayProbeHealthResponseMatch;
  /**
   * Reference to backend pool of application gateway to which probe request will be sent.
   */
  backendAddressPool?: SubResource;
  /**
   * Reference to backend http setting of application gateway to be used for test probe.
   */
  backendHttpSettings?: SubResource;
}

/**
 * Result of on demand test probe.
 */
export interface ApplicationGatewayBackendHealthOnDemand {
  /**
   * Reference to an ApplicationGatewayBackendAddressPool resource.
   */
  backendAddressPool?: ApplicationGatewayBackendAddressPool;
  /**
   * Application gateway BackendHealthHttp settings.
   */
  backendHealthHttpSettings?: ApplicationGatewayBackendHealthHttpSettings;
}

/**
 * Common error representation.
 */
export interface ErrorModel {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message.
   */
  message?: string;
  /**
   * Error target.
   */
  target?: string;
  /**
   * Error details.
   */
  details?: ErrorDetails[];
  /**
   * Inner error message.
   */
  innerError?: string;
}

/**
 * Common error details representation.
 */
export interface ErrorDetails {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error target.
   */
  target?: string;
  /**
   * Error message.
   */
  message?: string;
}

/**
 * Response for ApplicationGatewayAvailableWafRuleSets API service call.
 */
export interface ApplicationGatewayAvailableWafRuleSetsResult {
  /**
   * The list of application gateway rule sets.
   */
  value?: ApplicationGatewayFirewallRuleSet[];
}

/**
 * A web application firewall rule group.
 */
export interface ApplicationGatewayFirewallRuleGroup {
  /**
   * The name of the web application firewall rule group.
   */
  ruleGroupName: string;
  /**
   * The description of the web application firewall rule group.
   */
  description?: string;
  /**
   * The rules of the web application firewall rule group.
   */
  rules: ApplicationGatewayFirewallRule[];
}

/**
 * A web application firewall rule.
 */
export interface ApplicationGatewayFirewallRule {
  /**
   * The identifier of the web application firewall rule.
   */
  ruleId: number;
  /**
   * The description of the web application firewall rule.
   */
  description?: string;
}

/**
 * Response for ApplicationGatewayAvailableSslOptions API service call.
 */
export interface ApplicationGatewayAvailableSslPredefinedPolicies {
  /**
   * List of available Ssl predefined policy.
   */
  value?: ApplicationGatewaySslPredefinedPolicy[];
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * A list of application security groups.
 */
export interface ApplicationSecurityGroupListResult {
  /**
   * A list of application security groups.
   */
  value?: ApplicationSecurityGroup[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * An array of available delegations.
 */
export interface AvailableDelegationsResult {
  /**
   * An array of available delegations.
   */
  value?: AvailableDelegation[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The serviceName of an AvailableDelegation indicates a possible delegation for a subnet.
 */
export interface AvailableDelegation {
  /**
   * The name of the AvailableDelegation resource.
   */
  name?: string;
  /**
   * A unique identifier of the AvailableDelegation resource.
   */
  id?: string;
  /**
   * Resource type.
   */
  type?: string;
  /**
   * The name of the service and resource.
   */
  serviceName?: string;
  /**
   * The actions permitted to the service upon delegation.
   */
  actions?: string[];
}

/**
 * An array of available service aliases.
 */
export interface AvailableServiceAliasesResult {
  /**
   * An array of available service aliases.
   */
  value?: AvailableServiceAlias[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The available service alias.
 */
export interface AvailableServiceAlias {
  /**
   * The name of the service alias.
   */
  name?: string;
  /**
   * The ID of the service alias.
   */
  id?: string;
  /**
   * The type of the resource.
   */
  type?: string;
  /**
   * The resource name of the service alias.
   */
  resourceName?: string;
}

/**
 * Properties of the AzureFirewallRCAction.
 */
export interface AzureFirewallRCAction {
  /**
   * The type of action.
   */
  type?: AzureFirewallRCActionType;
}

/**
 * Properties of an application rule.
 */
export interface AzureFirewallApplicationRule {
  /**
   * Name of the application rule.
   */
  name?: string;
  /**
   * Description of the rule.
   */
  description?: string;
  /**
   * List of source IP addresses for this rule.
   */
  sourceAddresses?: string[];
  /**
   * Array of ApplicationRuleProtocols.
   */
  protocols?: AzureFirewallApplicationRuleProtocol[];
  /**
   * List of FQDNs for this rule.
   */
  targetFqdns?: string[];
  /**
   * List of FQDN Tags for this rule.
   */
  fqdnTags?: string[];
  /**
   * List of source IpGroups for this rule.
   */
  sourceIpGroups?: string[];
}

/**
 * Properties of the application rule protocol.
 */
export interface AzureFirewallApplicationRuleProtocol {
  /**
   * Protocol type.
   */
  protocolType?: AzureFirewallApplicationRuleProtocolType;
  /**
   * Port number for the protocol, cannot be greater than 64000. This field is optional.
   */
  port?: number;
}

/**
 * AzureFirewall NAT Rule Collection Action.
 */
export interface AzureFirewallNatRCAction {
  /**
   * The type of action.
   */
  type?: AzureFirewallNatRCActionType;
}

/**
 * Properties of a NAT rule.
 */
export interface AzureFirewallNatRule {
  /**
   * Name of the NAT rule.
   */
  name?: string;
  /**
   * Description of the rule.
   */
  description?: string;
  /**
   * List of source IP addresses for this rule.
   */
  sourceAddresses?: string[];
  /**
   * List of destination IP addresses for this rule. Supports IP ranges, prefixes, and service tags.
   */
  destinationAddresses?: string[];
  /**
   * List of destination ports.
   */
  destinationPorts?: string[];
  /**
   * Array of AzureFirewallNetworkRuleProtocols applicable to this NAT rule.
   */
  protocols?: AzureFirewallNetworkRuleProtocol[];
  /**
   * The translated address for this NAT rule.
   */
  translatedAddress?: string;
  /**
   * The translated port for this NAT rule.
   */
  translatedPort?: string;
  /**
   * The translated FQDN for this NAT rule.
   */
  translatedFqdn?: string;
  /**
   * List of source IpGroups for this rule.
   */
  sourceIpGroups?: string[];
}

/**
 * Properties of the network rule.
 */
export interface AzureFirewallNetworkRule {
  /**
   * Name of the network rule.
   */
  name?: string;
  /**
   * Description of the rule.
   */
  description?: string;
  /**
   * Array of AzureFirewallNetworkRuleProtocols.
   */
  protocols?: AzureFirewallNetworkRuleProtocol[];
  /**
   * List of source IP addresses for this rule.
   */
  sourceAddresses?: string[];
  /**
   * List of destination IP addresses.
   */
  destinationAddresses?: string[];
  /**
   * List of destination ports.
   */
  destinationPorts?: string[];
  /**
   * List of destination FQDNs.
   */
  destinationFqdns?: string[];
  /**
   * List of source IpGroups for this rule.
   */
  sourceIpGroups?: string[];
  /**
   * List of destination IpGroups for this rule.
   */
  destinationIpGroups?: string[];
}

/**
 * IP addresses associated with azure firewall.
 */
export interface HubIPAddresses {
  /**
   * List of Public IP addresses associated with azure firewall.
   */
  publicIPAddresses?: AzureFirewallPublicIPAddress[];
  /**
   * Private IP Address associated with azure firewall.
   */
  privateIPAddress?: string;
}

/**
 * Public IP Address associated with azure firewall.
 */
export interface AzureFirewallPublicIPAddress {
  /**
   * Public IP Address value.
   */
  address?: string;
}

/**
 * IpGroups associated with azure firewall.
 */
export interface AzureFirewallIpGroups {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * The iteration number.
   */
  readonly changeNumber?: string;
}

/**
 * SKU of an Azure Firewall.
 */
export interface AzureFirewallSku {
  /**
   * Name of an Azure Firewall SKU.
   */
  name?: AzureFirewallSkuName;
  /**
   * Tier of an Azure Firewall.
   */
  tier?: AzureFirewallSkuTier;
}

/**
 * Response for ListAzureFirewalls API service call.
 */
export interface AzureFirewallListResult {
  /**
   * List of Azure Firewalls in a resource group.
   */
  value?: AzureFirewall[];
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for ListAzureFirewallFqdnTags API service call.
 */
export interface AzureFirewallFqdnTagListResult {
  /**
   * List of Azure Firewall FQDN Tags in a resource group.
   */
  value?: AzureFirewallFqdnTag[];
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for ListBastionHosts API service call.
 */
export interface BastionHostListResult {
  /**
   * List of Bastion Hosts in a resource group.
   */
  value?: BastionHost[];
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Post request for all the Bastion Shareable Link endpoints.
 */
export interface BastionShareableLinkListRequest {
  /**
   * List of VM references.
   */
  vms?: BastionShareableLink[];
}

/**
 * Bastion Shareable Link.
 */
export interface BastionShareableLink {
  /**
   * Reference of the virtual machine resource.
   */
  vm: Resource;
  /**
   * The unique Bastion Shareable Link to the virtual machine.
   */
  readonly bsl?: string;
  /**
   * The time when the link was created.
   */
  readonly createdAt?: string;
  /**
   * Optional field indicating the warning or error message related to the vm in case of partial failure.
   */
  readonly message?: string;
}

/**
 * Response for all the Bastion Shareable Link endpoints.
 */
export interface BastionShareableLinkListResult {
  /**
   * List of Bastion Shareable Links for the request.
   */
  value?: BastionShareableLink[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for GetActiveSessions.
 */
export interface BastionActiveSessionListResult {
  /**
   * List of active sessions on the bastion.
   */
  value?: BastionActiveSession[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The session detail for a target.
 */
export interface BastionActiveSession {
  /**
   * A unique id for the session.
   */
  readonly sessionId?: string;
  /**
   * The time when the session started.
   */
  readonly startTime?: any;
  /**
   * The subscription id for the target virtual machine.
   */
  readonly targetSubscriptionId?: string;
  /**
   * The type of the resource.
   */
  readonly resourceType?: string;
  /**
   * The host name of the target.
   */
  readonly targetHostName?: string;
  /**
   * The resource group of the target.
   */
  readonly targetResourceGroup?: string;
  /**
   * The user name who is active on this session.
   */
  readonly userName?: string;
  /**
   * The IP Address of the target.
   */
  readonly targetIpAddress?: string;
  /**
   * The protocol used to connect to the target.
   */
  readonly protocol?: BastionConnectProtocol;
  /**
   * The resource id of the target.
   */
  readonly targetResourceId?: string;
  /**
   * Duration in mins the session has been active.
   */
  readonly sessionDurationInMins?: number;
}

/**
 * List of session IDs.
 */
export interface SessionIds {
  /**
   * List of session IDs.
   */
  sessionIds?: string[];
}

/**
 * Response for DisconnectActiveSessions.
 */
export interface BastionSessionDeleteResult {
  /**
   * List of sessions with their corresponding state.
   */
  value?: BastionSessionState[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The session state detail for a target.
 */
export interface BastionSessionState {
  /**
   * A unique id for the session.
   */
  readonly sessionId?: string;
  /**
   * Used for extra information.
   */
  readonly message?: string;
  /**
   * The state of the session. Disconnected/Failed/NotFound.
   */
  readonly state?: string;
}

/**
 * Response for the CheckDnsNameAvailability API service call.
 */
export interface DnsNameAvailabilityResult {
  /**
   * Domain availability (True/False).
   */
  available?: boolean;
}

/**
 * DDoS custom policy properties.
 */
export interface ProtocolCustomSettingsFormat {
  /**
   * The protocol for which the DDoS protection policy is being customized.
   */
  protocol?: DdosCustomPolicyProtocol;
  /**
   * The customized DDoS protection trigger rate.
   */
  triggerRateOverride?: string;
  /**
   * The customized DDoS protection source rate.
   */
  sourceRateOverride?: string;
  /**
   * The customized DDoS protection trigger rate sensitivity degrees. High: Trigger rate set with most sensitivity w.r.t. normal traffic. Default: Trigger rate set with moderate sensitivity w.r.t. normal traffic. Low: Trigger rate set with less sensitivity w.r.t. normal traffic. Relaxed: Trigger rate set with least sensitivity w.r.t. normal traffic.
   */
  triggerSensitivityOverride?: DdosCustomPolicyTriggerSensitivityOverride;
}

/**
 * A DDoS protection plan in a resource group.
 */
export interface DdosProtectionPlan {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The resource GUID property of the DDoS protection plan resource. It uniquely identifies the resource, even if the user changes its name or migrate the resource across subscriptions or resource groups.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the DDoS protection plan resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The list of virtual networks associated with the DDoS protection plan resource. This list is read-only.
   */
  readonly virtualNetworks?: SubResource[];
}

/**
 * A list of DDoS protection plans.
 */
export interface DdosProtectionPlanListResult {
  /**
   * A list of DDoS protection plans.
   */
  value?: DdosProtectionPlan[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for the ListAvailableEndpointServices API service call.
 */
export interface EndpointServicesListResult {
  /**
   * List of available endpoint services in a region.
   */
  value?: EndpointServiceResult[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for ListAuthorizations API service call retrieves all authorizations that belongs to an ExpressRouteCircuit.
 */
export interface AuthorizationListResult {
  /**
   * The authorizations in an ExpressRoute Circuit.
   */
  value?: ExpressRouteCircuitAuthorization[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Specifies the peering configuration.
 */
export interface ExpressRouteCircuitPeeringConfig {
  /**
   * The reference to AdvertisedPublicPrefixes.
   */
  advertisedPublicPrefixes?: string[];
  /**
   * The communities of bgp peering. Specified for microsoft peering.
   */
  advertisedCommunities?: string[];
  /**
   * The advertised public prefix state of the Peering resource.
   */
  readonly advertisedPublicPrefixesState?: ExpressRouteCircuitPeeringAdvertisedPublicPrefixState;
  /**
   * The legacy mode of the peering.
   */
  legacyMode?: number;
  /**
   * The CustomerASN of the peering.
   */
  customerASN?: number;
  /**
   * The RoutingRegistryName of the configuration.
   */
  routingRegistryName?: string;
}

/**
 * Contains stats associated with the peering.
 */
export interface ExpressRouteCircuitStats {
  /**
   * The Primary BytesIn of the peering.
   */
  primarybytesIn?: number;
  /**
   * The primary BytesOut of the peering.
   */
  primarybytesOut?: number;
  /**
   * The secondary BytesIn of the peering.
   */
  secondarybytesIn?: number;
  /**
   * The secondary BytesOut of the peering.
   */
  secondarybytesOut?: number;
}

/**
 * Contains IPv6 peering config.
 */
export interface Ipv6ExpressRouteCircuitPeeringConfig {
  /**
   * The primary address prefix.
   */
  primaryPeerAddressPrefix?: string;
  /**
   * The secondary address prefix.
   */
  secondaryPeerAddressPrefix?: string;
  /**
   * The Microsoft peering configuration.
   */
  microsoftPeeringConfig?: ExpressRouteCircuitPeeringConfig;
  /**
   * The reference to the RouteFilter resource.
   */
  routeFilter?: SubResource;
  /**
   * The state of peering.
   */
  state?: ExpressRouteCircuitPeeringState;
}

/**
 * The ID of the ExpressRouteConnection.
 */
export interface ExpressRouteConnectionId {
  /**
   * The ID of the ExpressRouteConnection.
   */
  readonly id?: string;
}

/**
 * IPv6 Circuit Connection properties for global reach.
 */
export interface Ipv6CircuitConnectionConfig {
  /**
   * /125 IP address space to carve out customer addresses for global reach.
   */
  addressPrefix?: string;
  /**
   * Express Route Circuit connection state.
   */
  readonly circuitConnectionStatus?: CircuitConnectionStatus;
}

/**
 * Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitPeeringListResult {
  /**
   * The peerings in an express route circuit.
   */
  value?: ExpressRouteCircuitPeering[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for ListConnections API service call retrieves all global reach connections that belongs to a Private Peering for an ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitConnectionListResult {
  /**
   * The global reach connection associated with Private Peering in an ExpressRoute Circuit.
   */
  value?: ExpressRouteCircuitConnection[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for ListPeeredConnections API service call retrieves all global reach peer circuit connections that belongs to a Private Peering for an ExpressRouteCircuit.
 */
export interface PeerExpressRouteCircuitConnectionListResult {
  /**
   * The global reach peer circuit connection associated with Private Peering in an ExpressRoute Circuit.
   */
  value?: PeerExpressRouteCircuitConnection[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Contains SKU in an ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitSku {
  /**
   * The name of the SKU.
   */
  name?: string;
  /**
   * The tier of the SKU.
   */
  tier?: ExpressRouteCircuitSkuTier;
  /**
   * The family of the SKU.
   */
  family?: ExpressRouteCircuitSkuFamily;
}

/**
 * Contains ServiceProviderProperties in an ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitServiceProviderProperties {
  /**
   * The serviceProviderName.
   */
  serviceProviderName?: string;
  /**
   * The peering location.
   */
  peeringLocation?: string;
  /**
   * The BandwidthInMbps.
   */
  bandwidthInMbps?: number;
}

/**
 * Response for ListArpTable associated with the Express Route Circuits API.
 */
export interface ExpressRouteCircuitsArpTableListResult {
  /**
   * A list of the ARP tables.
   */
  value?: ExpressRouteCircuitArpTable[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The ARP table associated with the ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitArpTable {
  /**
   * Entry age in minutes.
   */
  age?: number;
  /**
   * Interface address.
   */
  interface?: string;
  /**
   * The IP address.
   */
  ipAddress?: string;
  /**
   * The MAC address.
   */
  macAddress?: string;
}

/**
 * Response for ListRoutesTable associated with the Express Route Circuits API.
 */
export interface ExpressRouteCircuitsRoutesTableListResult {
  /**
   * The list of routes table.
   */
  value?: ExpressRouteCircuitRoutesTable[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The routes table associated with the ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitRoutesTable {
  /**
   * IP address of a network entity.
   */
  network?: string;
  /**
   * NextHop address.
   */
  nextHop?: string;
  /**
   * Local preference value as set with the set local-preference route-map configuration command.
   */
  locPrf?: string;
  /**
   * Route Weight.
   */
  weight?: number;
  /**
   * Autonomous system paths to the destination network.
   */
  path?: string;
}

/**
 * Response for ListRoutesTable associated with the Express Route Circuits API.
 */
export interface ExpressRouteCircuitsRoutesTableSummaryListResult {
  /**
   * A list of the routes table.
   */
  value?: ExpressRouteCircuitRoutesTableSummary[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The routes table associated with the ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitRoutesTableSummary {
  /**
   * IP address of the neighbor.
   */
  neighbor?: string;
  /**
   * BGP version number spoken to the neighbor.
   */
  v?: number;
  /**
   * Autonomous system number.
   */
  as?: number;
  /**
   * The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.
   */
  upDown?: string;
  /**
   * Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.
   */
  statePfxRcd?: string;
}

/**
 * Response for ListExpressRouteCircuit API service call.
 */
export interface ExpressRouteCircuitListResult {
  /**
   * A list of ExpressRouteCircuits in a resource group.
   */
  value?: ExpressRouteCircuit[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for the ListExpressRouteServiceProvider API service call.
 */
export interface ExpressRouteServiceProviderListResult {
  /**
   * A list of ExpressRouteResourceProvider resources.
   */
  value?: ExpressRouteServiceProvider[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Contains bandwidths offered in ExpressRouteServiceProvider resources.
 */
export interface ExpressRouteServiceProviderBandwidthsOffered {
  /**
   * The OfferName.
   */
  offerName?: string;
  /**
   * The ValueInMbps.
   */
  valueInMbps?: number;
}

/**
 * Response for ListExpressRouteCrossConnection API service call.
 */
export interface ExpressRouteCrossConnectionListResult {
  /**
   * A list of ExpressRouteCrossConnection resources.
   */
  value?: ExpressRouteCrossConnection[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Reference to an express route circuit.
 */
export interface ExpressRouteCircuitReference {
  /**
   * Corresponding Express Route Circuit Id.
   */
  id?: string;
}

/**
 * Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCrossConnection.
 */
export interface ExpressRouteCrossConnectionPeeringList {
  /**
   * The peerings in an express route cross connection.
   */
  value?: ExpressRouteCrossConnectionPeering[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for ListRoutesTable associated with the Express Route Cross Connections.
 */
export interface ExpressRouteCrossConnectionsRoutesTableSummaryListResult {
  /**
   * A list of the routes table.
   */
  value?: ExpressRouteCrossConnectionRoutesTableSummary[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The routes table associated with the ExpressRouteCircuit.
 */
export interface ExpressRouteCrossConnectionRoutesTableSummary {
  /**
   * IP address of Neighbor router.
   */
  neighbor?: string;
  /**
   * Autonomous system number.
   */
  asn?: number;
  /**
   * The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.
   */
  upDown?: string;
  /**
   * Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.
   */
  stateOrPrefixesReceived?: string;
}

/**
 * Response for ListExpressRoutePortsLocations API service call.
 */
export interface ExpressRoutePortsLocationListResult {
  /**
   * The list of all ExpressRoutePort peering locations.
   */
  value?: ExpressRoutePortsLocation[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Real-time inventory of available ExpressRoute port bandwidths.
 */
export interface ExpressRoutePortsLocationBandwidths {
  /**
   * Bandwidth descriptive name.
   */
  readonly offerName?: string;
  /**
   * Bandwidth value in Gbps.
   */
  readonly valueInGbps?: number;
}

/**
 * ExpressRouteLink Mac Security Configuration.
 */
export interface ExpressRouteLinkMacSecConfig {
  /**
   * Keyvault Secret Identifier URL containing Mac security CKN key.
   */
  cknSecretIdentifier?: string;
  /**
   * Keyvault Secret Identifier URL containing Mac security CAK key.
   */
  cakSecretIdentifier?: string;
  /**
   * Mac security cipher.
   */
  cipher?: ExpressRouteLinkMacSecCipher;
}

/**
 * Response for ListExpressRoutePorts API service call.
 */
export interface ExpressRoutePortListResult {
  /**
   * A list of ExpressRoutePort resources.
   */
  value?: ExpressRoutePort[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for ListExpressRouteLinks API service call.
 */
export interface ExpressRouteLinkListResult {
  /**
   * The list of ExpressRouteLink sub-resources.
   */
  value?: ExpressRouteLink[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * ThreatIntel Whitelist for Firewall Policy.
 */
export interface FirewallPolicyThreatIntelWhitelist {
  /**
   * List of IP addresses for the ThreatIntel Whitelist.
   */
  ipAddresses?: string[];
  /**
   * List of FQDNs for the ThreatIntel Whitelist.
   */
  fqdns?: string[];
}

/**
 * Configuration needed to perform TLS termination & initiation.
 */
export interface FirewallPolicyTransportSecurity {
  /**
   * The CA used for intermediate CA generation.
   */
  certificateAuthority?: FirewallPolicyCertificateAuthority;
  /**
   * List of domains which are excluded from TLS termination.
   */
  excludedDomains?: string[];
  /**
   * Certificates which are to be trusted by the firewall.
   */
  trustedRootCertificates?: FirewallPolicyTrustedRootCertificate[];
}

/**
 * Trusted Root certificates properties for tls.
 */
export interface FirewallPolicyCertificateAuthority {
  /**
   * Name of the CA certificate.
   */
  name?: string;
  /**
   * Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
   */
  keyVaultSecretId?: string;
}

/**
 * Trusted Root certificates of a firewall policy.
 */
export interface FirewallPolicyTrustedRootCertificate {
  /**
   * Name of the trusted root certificate that is unique within a firewall policy.
   */
  name?: string;
  /**
   * Secret Id of (base-64 encoded unencrypted pfx) the public certificate data stored in KeyVault.
   */
  keyVaultSecretId?: string;
}

/**
 * Response for ListFirewallPolicies API service call.
 */
export interface FirewallPolicyListResult {
  /**
   * List of Firewall Policies in a resource group.
   */
  value?: FirewallPolicy[];
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Properties of the rule.
 */
export interface FirewallPolicyRule {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  ruleType: "FirewallPolicyNatRule" | "FirewallPolicyFilterRule";
  /**
   * The name of the rule.
   */
  name?: string;
  /**
   * Priority of the Firewall Policy Rule resource.
   */
  priority?: number;
}

/**
 * Response for ListFirewallPolicyRuleGroups API service call.
 */
export interface FirewallPolicyRuleGroupListResult {
  /**
   * List of FirewallPolicyRuleGroups in a FirewallPolicy.
   */
  value?: FirewallPolicyRuleGroup[];
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for the ListIpAllocations API service call.
 */
export interface IpAllocationListResult {
  /**
   * A list of IpAllocation resources.
   */
  value?: IpAllocation[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for the ListIpGroups API service call.
 */
export interface IpGroupListResult {
  /**
   * The list of IpGroups information resources.
   */
  value?: IpGroup[];
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * SKU of a load balancer.
 */
export interface LoadBalancerSku {
  /**
   * Name of a load balancer SKU.
   */
  name?: LoadBalancerSkuName;
}

/**
 * Response for ListLoadBalancers API service call.
 */
export interface LoadBalancerListResult {
  /**
   * A list of load balancers in a resource group.
   */
  value?: LoadBalancer[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for ListBackendAddressPool API service call.
 */
export interface LoadBalancerBackendAddressPoolListResult {
  /**
   * A list of backend address pools in a load balancer.
   */
  value?: BackendAddressPool[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for ListFrontendIPConfiguration API service call.
 */
export interface LoadBalancerFrontendIPConfigurationListResult {
  /**
   * A list of frontend IP configurations in a load balancer.
   */
  value?: FrontendIPConfiguration[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for ListInboundNatRule API service call.
 */
export interface InboundNatRuleListResult {
  /**
   * A list of inbound nat rules in a load balancer.
   */
  value?: InboundNatRule[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for ListLoadBalancingRule API service call.
 */
export interface LoadBalancerLoadBalancingRuleListResult {
  /**
   * A list of load balancing rules in a load balancer.
   */
  value?: LoadBalancingRule[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for ListOutboundRule API service call.
 */
export interface LoadBalancerOutboundRuleListResult {
  /**
   * A list of outbound rules in a load balancer.
   */
  value?: OutboundRule[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for the ListNetworkInterface API service call.
 */
export interface NetworkInterfaceListResult {
  /**
   * A list of network interfaces in a resource group.
   */
  value?: NetworkInterface[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for ListProbe API service call.
 */
export interface LoadBalancerProbeListResult {
  /**
   * A list of probes in a load balancer.
   */
  value?: Probe[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * SKU of nat gateway.
 */
export interface NatGatewaySku {
  /**
   * Name of Nat Gateway SKU.
   */
  name?: NatGatewaySkuName;
}

/**
 * Response for ListNatGateways API service call.
 */
export interface NatGatewayListResult {
  /**
   * A list of Nat Gateways that exists in a resource group.
   */
  value?: NatGateway[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for list effective route API service call.
 */
export interface EffectiveRouteListResult {
  /**
   * A list of effective routes.
   */
  value?: EffectiveRoute[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Effective Route.
 */
export interface EffectiveRoute {
  /**
   * The name of the user defined route. This is optional.
   */
  name?: string;
  /**
   * If true, on-premises routes are not propagated to the network interfaces in the subnet.
   */
  disableBgpRoutePropagation?: boolean;
  /**
   * Who created the route.
   */
  source?: EffectiveRouteSource;
  /**
   * The value of effective route.
   */
  state?: EffectiveRouteState;
  /**
   * The address prefixes of the effective routes in CIDR notation.
   */
  addressPrefix?: string[];
  /**
   * The IP address of the next hop of the effective route.
   */
  nextHopIpAddress?: string[];
  /**
   * The type of Azure hop the packet should be sent to.
   */
  nextHopType?: RouteNextHopType;
}

/**
 * Response for list effective network security groups API service call.
 */
export interface EffectiveNetworkSecurityGroupListResult {
  /**
   * A list of effective network security groups.
   */
  value?: EffectiveNetworkSecurityGroup[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Effective network security group.
 */
export interface EffectiveNetworkSecurityGroup {
  /**
   * The ID of network security group that is applied.
   */
  networkSecurityGroup?: SubResource;
  /**
   * Associated resources.
   */
  association?: EffectiveNetworkSecurityGroupAssociation;
  /**
   * A collection of effective security rules.
   */
  effectiveSecurityRules?: EffectiveNetworkSecurityRule[];
  /**
   * Mapping of tags to list of IP Addresses included within the tag.
   */
  tagMap?: string;
}

/**
 * The effective network security group association.
 */
export interface EffectiveNetworkSecurityGroupAssociation {
  /**
   * The ID of the subnet if assigned.
   */
  subnet?: SubResource;
  /**
   * The ID of the network interface if assigned.
   */
  networkInterface?: SubResource;
}

/**
 * Effective network security rules.
 */
export interface EffectiveNetworkSecurityRule {
  /**
   * The name of the security rule specified by the user (if created by the user).
   */
  name?: string;
  /**
   * The network protocol this rule applies to.
   */
  protocol?: EffectiveSecurityRuleProtocol;
  /**
   * The source port or range.
   */
  sourcePortRange?: string;
  /**
   * The destination port or range.
   */
  destinationPortRange?: string;
  /**
   * The source port ranges. Expected values include a single integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*).
   */
  sourcePortRanges?: string[];
  /**
   * The destination port ranges. Expected values include a single integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*).
   */
  destinationPortRanges?: string[];
  /**
   * The source address prefix.
   */
  sourceAddressPrefix?: string;
  /**
   * The destination address prefix.
   */
  destinationAddressPrefix?: string;
  /**
   * The source address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*).
   */
  sourceAddressPrefixes?: string[];
  /**
   * The destination address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*).
   */
  destinationAddressPrefixes?: string[];
  /**
   * The expanded source address prefix.
   */
  expandedSourceAddressPrefix?: string[];
  /**
   * Expanded destination address prefix.
   */
  expandedDestinationAddressPrefix?: string[];
  /**
   * Whether network traffic is allowed or denied.
   */
  access?: SecurityRuleAccess;
  /**
   * The priority of the rule.
   */
  priority?: number;
  /**
   * The direction of the rule.
   */
  direction?: SecurityRuleDirection;
}

/**
 * Response for list ip configurations API service call.
 */
export interface NetworkInterfaceIPConfigurationListResult {
  /**
   * A list of ip configurations.
   */
  value?: NetworkInterfaceIPConfiguration[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for list ip configurations API service call.
 */
export interface NetworkInterfaceLoadBalancerListResult {
  /**
   * A list of load balancers.
   */
  value?: LoadBalancer[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for list tap configurations API service call.
 */
export interface NetworkInterfaceTapConfigurationListResult {
  /**
   * A list of tap configurations.
   */
  value?: NetworkInterfaceTapConfiguration[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The ip configuration for a container network interface.
 */
export interface ContainerNetworkInterfaceIpConfiguration {
  /**
   * The name of the resource. This name can be used to access the resource.
   */
  name?: string;
  /**
   * Sub Resource type.
   */
  readonly type?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The provisioning state of the container network interface IP configuration resource.
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * Response for ListNetworkProfiles API service call.
 */
export interface NetworkProfileListResult {
  /**
   * A list of network profiles that exist in a resource group.
   */
  value?: NetworkProfile[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for ListNetworkSecurityGroups API service call.
 */
export interface NetworkSecurityGroupListResult {
  /**
   * A list of NetworkSecurityGroup resources.
   */
  value?: NetworkSecurityGroup[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for ListSecurityRule API service call. Retrieves all security rules that belongs to a network security group.
 */
export interface SecurityRuleListResult {
  /**
   * The security rules in a network security group.
   */
  value?: SecurityRule[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Network Virtual Appliance NIC properties.
 */
export interface VirtualApplianceNicProperties {
  /**
   * NIC name.
   */
  readonly name?: string;
  /**
   * Public IP address.
   */
  readonly publicIpAddress?: string;
  /**
   * Private IP address.
   */
  readonly privateIpAddress?: string;
}

/**
 * Network Virtual Appliance Sku Properties.
 */
export interface VirtualApplianceSkuProperties {
  /**
   * Virtual Appliance Vendor.
   */
  vendor?: string;
  /**
   * Virtual Appliance Scale Unit.
   */
  bundledScaleUnit?: string;
  /**
   * Virtual Appliance Version.
   */
  marketPlaceVersion?: string;
}

/**
 * Response for ListNetworkVirtualAppliances API service call.
 */
export interface NetworkVirtualApplianceListResult {
  /**
   * List of Network Virtual Appliances.
   */
  value?: NetworkVirtualAppliance[];
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The error object.
 */
export interface ErrorResponse {
  /**
   * The error details object.
   */
  error?: ErrorDetails;
}

/**
 * Response for ListNetworkWatchers API service call.
 */
export interface NetworkWatcherListResult {
  /**
   * List of network watcher resources.
   */
  value?: NetworkWatcher[];
}

/**
 * Parameters that define the representation of topology.
 */
export interface TopologyParameters {
  /**
   * The name of the target resource group to perform topology on.
   */
  targetResourceGroupName?: string;
  /**
   * The reference to the Virtual Network resource.
   */
  targetVirtualNetwork?: SubResource;
  /**
   * The reference to the Subnet resource.
   */
  targetSubnet?: SubResource;
}

/**
 * Topology of the specified resource group.
 */
export interface Topology {
  /**
   * GUID representing the operation id.
   */
  readonly id?: string;
  /**
   * The datetime when the topology was initially created for the resource group.
   */
  readonly createdDateTime?: Date;
  /**
   * The datetime when the topology was last modified.
   */
  readonly lastModified?: Date;
  /**
   * A list of topology resources.
   */
  resources?: TopologyResource[];
}

/**
 * The network resource topology information for the given resource group.
 */
export interface TopologyResource {
  /**
   * Name of the resource.
   */
  name?: string;
  /**
   * ID of the resource.
   */
  id?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * Holds the associations the resource has with other resources in the resource group.
   */
  associations?: TopologyAssociation[];
}

/**
 * Resources that have an association with the parent resource.
 */
export interface TopologyAssociation {
  /**
   * The name of the resource that is associated with the parent resource.
   */
  name?: string;
  /**
   * The ID of the resource that is associated with the parent resource.
   */
  resourceId?: string;
  /**
   * The association type of the child resource to the parent resource.
   */
  associationType?: AssociationType;
}

/**
 * Parameters that define the IP flow to be verified.
 */
export interface VerificationIPFlowParameters {
  /**
   * The ID of the target resource to perform next-hop on.
   */
  targetResourceId: string;
  /**
   * The direction of the packet represented as a 5-tuple.
   */
  direction: Direction;
  /**
   * Protocol to be verified on.
   */
  protocol: IpFlowProtocol;
  /**
   * The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
   */
  localPort: string;
  /**
   * The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
   */
  remotePort: string;
  /**
   * The local IP address. Acceptable values are valid IPv4 addresses.
   */
  localIPAddress: string;
  /**
   * The remote IP address. Acceptable values are valid IPv4 addresses.
   */
  remoteIPAddress: string;
  /**
   * The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this parameter must be specified. Otherwise optional).
   */
  targetNicResourceId?: string;
}

/**
 * Results of IP flow verification on the target resource.
 */
export interface VerificationIPFlowResult {
  /**
   * Indicates whether the traffic is allowed or denied.
   */
  access?: Access;
  /**
   * Name of the rule. If input is not matched against any security rule, it is not displayed.
   */
  ruleName?: string;
}

/**
 * Parameters that define the source and destination endpoint.
 */
export interface NextHopParameters {
  /**
   * The resource identifier of the target resource against which the action is to be performed.
   */
  targetResourceId: string;
  /**
   * The source IP address.
   */
  sourceIPAddress: string;
  /**
   * The destination IP address.
   */
  destinationIPAddress: string;
  /**
   * The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of the nics, then this parameter must be specified. Otherwise optional).
   */
  targetNicResourceId?: string;
}

/**
 * The information about next hop from the specified VM.
 */
export interface NextHopResult {
  /**
   * Next hop type.
   */
  nextHopType?: NextHopType;
  /**
   * Next hop IP Address.
   */
  nextHopIpAddress?: string;
  /**
   * The resource identifier for the route table associated with the route being returned. If the route being returned does not correspond to any user created routes then this field will be the string 'System Route'.
   */
  routeTableId?: string;
}

/**
 * Parameters that define the VM to check security groups for.
 */
export interface SecurityGroupViewParameters {
  /**
   * ID of the target VM.
   */
  targetResourceId: string;
}

/**
 * The information about security rules applied to the specified VM.
 */
export interface SecurityGroupViewResult {
  /**
   * List of network interfaces on the specified VM.
   */
  networkInterfaces?: SecurityGroupNetworkInterface[];
}

/**
 * Network interface and all its associated security rules.
 */
export interface SecurityGroupNetworkInterface {
  /**
   * ID of the network interface.
   */
  id?: string;
  /**
   * All security rules associated with the network interface.
   */
  securityRuleAssociations?: SecurityRuleAssociations;
}

/**
 * All security rules associated with the network interface.
 */
export interface SecurityRuleAssociations {
  /**
   * Network interface and it's custom security rules.
   */
  networkInterfaceAssociation?: NetworkInterfaceAssociation;
  /**
   * Subnet and it's custom security rules.
   */
  subnetAssociation?: SubnetAssociation;
  /**
   * Collection of default security rules of the network security group.
   */
  defaultSecurityRules?: SecurityRule[];
  /**
   * Collection of effective security rules.
   */
  effectiveSecurityRules?: EffectiveNetworkSecurityRule[];
}

/**
 * Network interface and its custom security rules.
 */
export interface NetworkInterfaceAssociation {
  /**
   * Network interface ID.
   */
  readonly id?: string;
  /**
   * Collection of custom security rules.
   */
  securityRules?: SecurityRule[];
}

/**
 * Subnet and it's custom security rules.
 */
export interface SubnetAssociation {
  /**
   * Subnet ID.
   */
  readonly id?: string;
  /**
   * Collection of custom security rules.
   */
  securityRules?: SecurityRule[];
}

/**
 * Parameters that define the create packet capture operation.
 */
export interface PacketCapture {
  /**
   * The ID of the targeted resource, only VM is currently supported.
   */
  target: string;
  /**
   * Number of bytes captured per packet, the remaining bytes are truncated.
   */
  bytesToCapturePerPacket?: number;
  /**
   * Maximum size of the capture output.
   */
  totalBytesPerSession?: number;
  /**
   * Maximum duration of the capture session in seconds.
   */
  timeLimitInSeconds?: number;
  /**
   * The storage location for a packet capture session.
   */
  storageLocation: PacketCaptureStorageLocation;
  /**
   * A list of packet capture filters.
   */
  filters?: PacketCaptureFilter[];
}

/**
 * Parameters that define the create packet capture operation.
 */
export interface PacketCaptureParameters {
  /**
   * The ID of the targeted resource, only VM is currently supported.
   */
  target: string;
  /**
   * Number of bytes captured per packet, the remaining bytes are truncated.
   */
  bytesToCapturePerPacket?: number;
  /**
   * Maximum size of the capture output.
   */
  totalBytesPerSession?: number;
  /**
   * Maximum duration of the capture session in seconds.
   */
  timeLimitInSeconds?: number;
  /**
   * The storage location for a packet capture session.
   */
  storageLocation: PacketCaptureStorageLocation;
  /**
   * A list of packet capture filters.
   */
  filters?: PacketCaptureFilter[];
}

/**
 * The storage location for a packet capture session.
 */
export interface PacketCaptureStorageLocation {
  /**
   * The ID of the storage account to save the packet capture session. Required if no local file path is provided.
   */
  storageId?: string;
  /**
   * The URI of the storage path to save the packet capture. Must be a well-formed URI describing the location to save the packet capture.
   */
  storagePath?: string;
  /**
   * A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with /var/captures. Required if no storage ID is provided, otherwise optional.
   */
  filePath?: string;
}

/**
 * Filter that is applied to packet capture request. Multiple filters can be applied.
 */
export interface PacketCaptureFilter {
  /**
   * Protocol to be filtered on.
   */
  protocol?: PcProtocol;
  /**
   * Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5"? for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
   */
  localIPAddress?: string;
  /**
   * Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
   */
  remoteIPAddress?: string;
  /**
   * Local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
   */
  localPort?: string;
  /**
   * Remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
   */
  remotePort?: string;
}

/**
 * Information about packet capture session.
 */
export interface PacketCaptureResult {
  /**
   * Name of the packet capture session.
   */
  readonly name?: string;
  /**
   * ID of the packet capture operation.
   */
  readonly id?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The ID of the targeted resource, only VM is currently supported.
   */
  target?: string;
  /**
   * Number of bytes captured per packet, the remaining bytes are truncated.
   */
  bytesToCapturePerPacket?: number;
  /**
   * Maximum size of the capture output.
   */
  totalBytesPerSession?: number;
  /**
   * Maximum duration of the capture session in seconds.
   */
  timeLimitInSeconds?: number;
  /**
   * The storage location for a packet capture session.
   */
  storageLocation?: PacketCaptureStorageLocation;
  /**
   * A list of packet capture filters.
   */
  filters?: PacketCaptureFilter[];
  /**
   * The provisioning state of the packet capture session.
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * Status of packet capture session.
 */
export interface PacketCaptureQueryStatusResult {
  /**
   * The name of the packet capture resource.
   */
  name?: string;
  /**
   * The ID of the packet capture resource.
   */
  id?: string;
  /**
   * The start time of the packet capture session.
   */
  captureStartTime?: Date;
  /**
   * The status of the packet capture session.
   */
  packetCaptureStatus?: PcStatus;
  /**
   * The reason the current packet capture session was stopped.
   */
  stopReason?: string;
  /**
   * List of errors of packet capture session.
   */
  packetCaptureError?: PcError[];
}

/**
 * List of packet capture sessions.
 */
export interface PacketCaptureListResult {
  /**
   * Information about packet capture sessions.
   */
  value?: PacketCaptureResult[];
}

/**
 * Parameters that define the resource to troubleshoot.
 */
export interface TroubleshootingParameters {
  /**
   * The target resource to troubleshoot.
   */
  targetResourceId: string;
  /**
   * The ID for the storage account to save the troubleshoot result.
   */
  storageId: string;
  /**
   * The path to the blob to save the troubleshoot result in.
   */
  storagePath: string;
}

/**
 * Troubleshooting information gained from specified resource.
 */
export interface TroubleshootingResult {
  /**
   * The start time of the troubleshooting.
   */
  startTime?: Date;
  /**
   * The end time of the troubleshooting.
   */
  endTime?: Date;
  /**
   * The result code of the troubleshooting.
   */
  code?: string;
  /**
   * Information from troubleshooting.
   */
  results?: TroubleshootingDetails[];
}

/**
 * Information gained from troubleshooting of specified resource.
 */
export interface TroubleshootingDetails {
  /**
   * The id of the get troubleshoot operation.
   */
  id?: string;
  /**
   * Reason type of failure.
   */
  reasonType?: string;
  /**
   * A summary of troubleshooting.
   */
  summary?: string;
  /**
   * Details on troubleshooting results.
   */
  detail?: string;
  /**
   * List of recommended actions.
   */
  recommendedActions?: TroubleshootingRecommendedActions[];
}

/**
 * Recommended actions based on discovered issues.
 */
export interface TroubleshootingRecommendedActions {
  /**
   * ID of the recommended action.
   */
  actionId?: string;
  /**
   * Description of recommended actions.
   */
  actionText?: string;
  /**
   * The uri linking to a documentation for the recommended troubleshooting actions.
   */
  actionUri?: string;
  /**
   * The information from the URI for the recommended troubleshooting actions.
   */
  actionUriText?: string;
}

/**
 * Parameters that define the resource to query the troubleshooting result.
 */
export interface QueryTroubleshootingParameters {
  /**
   * The target resource ID to query the troubleshooting result.
   */
  targetResourceId: string;
}

/**
 * Information on the configuration of flow log and traffic analytics (optional) .
 */
export interface FlowLogInformation {
  /**
   * The ID of the resource to configure for flow log and traffic analytics (optional) .
   */
  targetResourceId: string;
  /**
   * Parameters that define the configuration of traffic analytics.
   */
  flowAnalyticsConfiguration?: TrafficAnalyticsProperties;
  /**
   * ID of the storage account which is used to store the flow log.
   */
  storageId: string;
  /**
   * Flag to enable/disable flow logging.
   */
  enabled: boolean;
  /**
   * Parameters that define the retention policy for flow log.
   */
  retentionPolicy?: RetentionPolicyParameters;
  /**
   * Parameters that define the flow log format.
   */
  format?: FlowLogFormatParameters;
}

/**
 * Parameters that define a resource to query flow log and traffic analytics (optional) status.
 */
export interface FlowLogStatusParameters {
  /**
   * The target resource where getting the flow log and traffic analytics (optional) status.
   */
  targetResourceId: string;
}

/**
 * Parameters that determine how the connectivity check will be performed.
 */
export interface ConnectivityParameters {
  /**
   * The source of the connection.
   */
  source: ConnectivitySource;
  /**
   * The destination of connection.
   */
  destination: ConnectivityDestination;
  /**
   * Network protocol.
   */
  protocol?: Protocol;
  /**
   * Configuration of the protocol.
   */
  protocolConfiguration?: ProtocolConfiguration;
  /**
   * Preferred IP version of the connection.
   */
  preferredIPVersion?: IPVersion;
}

/**
 * Parameters that define the source of the connection.
 */
export interface ConnectivitySource {
  /**
   * The ID of the resource from which a connectivity check will be initiated.
   */
  resourceId: string;
  /**
   * The source port from which a connectivity check will be performed.
   */
  port?: number;
}

/**
 * Parameters that define destination of connection.
 */
export interface ConnectivityDestination {
  /**
   * The ID of the resource to which a connection attempt will be made.
   */
  resourceId?: string;
  /**
   * The IP address or URI the resource to which a connection attempt will be made.
   */
  address?: string;
  /**
   * Port on which check connectivity will be performed.
   */
  port?: number;
}

/**
 * Configuration of the protocol.
 */
export interface ProtocolConfiguration {
  /**
   * HTTP configuration of the connectivity check.
   */
  httpConfiguration?: HttpConfiguration;
}

/**
 * HTTP configuration of the connectivity check.
 */
export interface HttpConfiguration {
  /**
   * HTTP method.
   */
  method?: HttpMethod;
  /**
   * List of HTTP headers.
   */
  headers?: HttpHeader[];
  /**
   * Valid status codes.
   */
  validStatusCodes?: number[];
}

/**
 * The HTTP header.
 */
export interface HttpHeader {
  /**
   * The name in HTTP header.
   */
  name?: string;
  /**
   * The value in HTTP header.
   */
  value?: string;
}

/**
 * Information on the connectivity status.
 */
export interface ConnectivityInformation {
  /**
   * List of hops between the source and the destination.
   */
  readonly hops?: ConnectivityHop[];
  /**
   * The connection status.
   */
  readonly connectionStatus?: ConnectionStatus;
  /**
   * Average latency in milliseconds.
   */
  readonly avgLatencyInMs?: number;
  /**
   * Minimum latency in milliseconds.
   */
  readonly minLatencyInMs?: number;
  /**
   * Maximum latency in milliseconds.
   */
  readonly maxLatencyInMs?: number;
  /**
   * Total number of probes sent.
   */
  readonly probesSent?: number;
  /**
   * Number of failed probes.
   */
  readonly probesFailed?: number;
}

/**
 * Information about a hop between the source and the destination.
 */
export interface ConnectivityHop {
  /**
   * The type of the hop.
   */
  readonly type?: string;
  /**
   * The ID of the hop.
   */
  readonly id?: string;
  /**
   * The IP address of the hop.
   */
  readonly address?: string;
  /**
   * The ID of the resource corresponding to this hop.
   */
  readonly resourceId?: string;
  /**
   * List of next hop identifiers.
   */
  readonly nextHopIds?: string[];
  /**
   * List of issues.
   */
  readonly issues?: ConnectivityIssue[];
}

/**
 * Information about an issue encountered in the process of checking for connectivity.
 */
export interface ConnectivityIssue {
  /**
   * The origin of the issue.
   */
  readonly origin?: Origin;
  /**
   * The severity of the issue.
   */
  readonly severity?: Severity;
  /**
   * The type of issue.
   */
  readonly type?: IssueType;
  /**
   * Provides additional context on the issue.
   */
  readonly context?: { [propertyName: string]: string }[];
}

/**
 * Geographic and time constraints for Azure reachability report.
 */
export interface AzureReachabilityReportParameters {
  /**
   * Parameters that define a geographic location.
   */
  providerLocation: AzureReachabilityReportLocation;
  /**
   * List of Internet service providers.
   */
  providers?: string[];
  /**
   * Optional Azure regions to scope the query to.
   */
  azureLocations?: string[];
  /**
   * The start time for the Azure reachability report.
   */
  startTime: Date;
  /**
   * The end time for the Azure reachability report.
   */
  endTime: Date;
}

/**
 * Parameters that define a geographic location.
 */
export interface AzureReachabilityReportLocation {
  /**
   * The name of the country.
   */
  country: string;
  /**
   * The name of the state.
   */
  state?: string;
  /**
   * The name of the city or town.
   */
  city?: string;
}

/**
 * Azure reachability report details.
 */
export interface AzureReachabilityReport {
  /**
   * The aggregation level of Azure reachability report. Can be Country, State or City.
   */
  aggregationLevel: string;
  /**
   * Parameters that define a geographic location.
   */
  providerLocation: AzureReachabilityReportLocation;
  /**
   * List of Azure reachability report items.
   */
  reachabilityReport: AzureReachabilityReportItem[];
}

/**
 * Azure reachability report details for a given provider location.
 */
export interface AzureReachabilityReportItem {
  /**
   * The Internet service provider.
   */
  provider?: string;
  /**
   * The Azure region.
   */
  azureLocation?: string;
  /**
   * List of latency details for each of the time series.
   */
  latencies?: AzureReachabilityReportLatencyInfo[];
}

/**
 * Details on latency for a time series.
 */
export interface AzureReachabilityReportLatencyInfo {
  /**
   * The time stamp.
   */
  timeStamp?: Date;
  /**
   * The relative latency score between 1 and 100, higher values indicating a faster connection.
   */
  score?: number;
}

/**
 * Constraints that determine the list of available Internet service providers.
 */
export interface AvailableProvidersListParameters {
  /**
   * A list of Azure regions.
   */
  azureLocations?: string[];
  /**
   * The country for available providers list.
   */
  country?: string;
  /**
   * The state for available providers list.
   */
  state?: string;
  /**
   * The city or town for available providers list.
   */
  city?: string;
}

/**
 * List of available countries with details.
 */
export interface AvailableProvidersList {
  /**
   * List of available countries.
   */
  countries: AvailableProvidersListCountry[];
}

/**
 * Country details.
 */
export interface AvailableProvidersListCountry {
  /**
   * The country name.
   */
  countryName?: string;
  /**
   * A list of Internet service providers.
   */
  providers?: string[];
  /**
   * List of available states in the country.
   */
  states?: AvailableProvidersListState[];
}

/**
 * State details.
 */
export interface AvailableProvidersListState {
  /**
   * The state name.
   */
  stateName?: string;
  /**
   * A list of Internet service providers.
   */
  providers?: string[];
  /**
   * List of available cities or towns in the state.
   */
  cities?: AvailableProvidersListCity[];
}

/**
 * City or town details.
 */
export interface AvailableProvidersListCity {
  /**
   * The city or town name.
   */
  cityName?: string;
  /**
   * A list of Internet service providers.
   */
  providers?: string[];
}

/**
 * Parameters to get network configuration diagnostic.
 */
export interface NetworkConfigurationDiagnosticParameters {
  /**
   * The ID of the target resource to perform network configuration diagnostic. Valid options are VM, NetworkInterface, VMSS/NetworkInterface and Application Gateway.
   */
  targetResourceId: string;
  /**
   * Verbosity level.
   */
  verbosityLevel?: VerbosityLevel;
  /**
   * List of network configuration diagnostic profiles.
   */
  profiles: NetworkConfigurationDiagnosticProfile[];
}

/**
 * Parameters to compare with network configuration.
 */
export interface NetworkConfigurationDiagnosticProfile {
  /**
   * The direction of the traffic.
   */
  direction: Direction;
  /**
   * Protocol to be verified on. Accepted values are '*', TCP, UDP.
   */
  protocol: string;
  /**
   * Traffic source. Accepted values are '*', IP Address/CIDR, Service Tag.
   */
  source: string;
  /**
   * Traffic destination. Accepted values are: '*', IP Address/CIDR, Service Tag.
   */
  destination: string;
  /**
   * Traffic destination port. Accepted values are '*' and a single port in the range (0 - 65535).
   */
  destinationPort: string;
}

/**
 * Results of network configuration diagnostic on the target resource.
 */
export interface NetworkConfigurationDiagnosticResponse {
  /**
   * List of network configuration diagnostic results.
   */
  readonly results?: NetworkConfigurationDiagnosticResult[];
}

/**
 * Network configuration diagnostic result corresponded to provided traffic query.
 */
export interface NetworkConfigurationDiagnosticResult {
  /**
   * Network configuration diagnostic profile.
   */
  profile?: NetworkConfigurationDiagnosticProfile;
  /**
   * Network security group result.
   */
  networkSecurityGroupResult?: NetworkSecurityGroupResult;
}

/**
 * Network configuration diagnostic result corresponded provided traffic query.
 */
export interface NetworkSecurityGroupResult {
  /**
   * The network traffic is allowed or denied.
   */
  securityRuleAccessResult?: SecurityRuleAccess;
  /**
   * List of results network security groups diagnostic.
   */
  readonly evaluatedNetworkSecurityGroups?: EvaluatedNetworkSecurityGroup[];
}

/**
 * Results of network security group evaluation.
 */
export interface EvaluatedNetworkSecurityGroup {
  /**
   * Network security group ID.
   */
  networkSecurityGroupId?: string;
  /**
   * Resource ID of nic or subnet to which network security group is applied.
   */
  appliedTo?: string;
  /**
   * Matched network security rule.
   */
  matchedRule?: MatchedRule;
  /**
   * List of network security rules evaluation results.
   */
  readonly rulesEvaluationResult?: NetworkSecurityRulesEvaluationResult[];
}

/**
 * Matched rule.
 */
export interface MatchedRule {
  /**
   * Name of the matched network security rule.
   */
  ruleName?: string;
  /**
   * The network traffic is allowed or denied. Possible values are 'Allow' and 'Deny'.
   */
  action?: string;
}

/**
 * Network security rules evaluation result.
 */
export interface NetworkSecurityRulesEvaluationResult {
  /**
   * Name of the network security rule.
   */
  name?: string;
  /**
   * Value indicating whether protocol is matched.
   */
  protocolMatched?: boolean;
  /**
   * Value indicating whether source is matched.
   */
  sourceMatched?: boolean;
  /**
   * Value indicating whether source port is matched.
   */
  sourcePortMatched?: boolean;
  /**
   * Value indicating whether destination is matched.
   */
  destinationMatched?: boolean;
  /**
   * Value indicating whether destination port is matched.
   */
  destinationPortMatched?: boolean;
}

/**
 * Parameters that define the operation to create a connection monitor.
 */
export interface ConnectionMonitor {
  /**
   * Connection monitor location.
   */
  location?: string;
  /**
   * Connection monitor tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Describes the source of connection monitor.
   */
  source?: ConnectionMonitorSource;
  /**
   * Describes the destination of connection monitor.
   */
  destination?: ConnectionMonitorDestination;
  /**
   * Determines if the connection monitor will start automatically once created.
   */
  autoStart?: boolean;
  /**
   * Monitoring interval in seconds.
   */
  monitoringIntervalInSeconds?: number;
  /**
   * List of connection monitor endpoints.
   */
  endpoints?: ConnectionMonitorEndpoint[];
  /**
   * List of connection monitor test configurations.
   */
  testConfigurations?: ConnectionMonitorTestConfiguration[];
  /**
   * List of connection monitor test groups.
   */
  testGroups?: ConnectionMonitorTestGroup[];
  /**
   * List of connection monitor outputs.
   */
  outputs?: ConnectionMonitorOutput[];
  /**
   * Optional notes to be associated with the connection monitor.
   */
  notes?: string;
}

/**
 * Parameters that define the operation to create a connection monitor.
 */
export interface ConnectionMonitorParameters {
  /**
   * Describes the source of connection monitor.
   */
  source?: ConnectionMonitorSource;
  /**
   * Describes the destination of connection monitor.
   */
  destination?: ConnectionMonitorDestination;
  /**
   * Determines if the connection monitor will start automatically once created.
   */
  autoStart?: boolean;
  /**
   * Monitoring interval in seconds.
   */
  monitoringIntervalInSeconds?: number;
  /**
   * List of connection monitor endpoints.
   */
  endpoints?: ConnectionMonitorEndpoint[];
  /**
   * List of connection monitor test configurations.
   */
  testConfigurations?: ConnectionMonitorTestConfiguration[];
  /**
   * List of connection monitor test groups.
   */
  testGroups?: ConnectionMonitorTestGroup[];
  /**
   * List of connection monitor outputs.
   */
  outputs?: ConnectionMonitorOutput[];
  /**
   * Optional notes to be associated with the connection monitor.
   */
  notes?: string;
}

/**
 * Describes the source of connection monitor.
 */
export interface ConnectionMonitorSource {
  /**
   * The ID of the resource used as the source by connection monitor.
   */
  resourceId: string;
  /**
   * The source port used by connection monitor.
   */
  port?: number;
}

/**
 * Describes the destination of connection monitor.
 */
export interface ConnectionMonitorDestination {
  /**
   * The ID of the resource used as the destination by connection monitor.
   */
  resourceId?: string;
  /**
   * Address of the connection monitor destination (IP or domain name).
   */
  address?: string;
  /**
   * The destination port used by connection monitor.
   */
  port?: number;
}

/**
 * Describes the connection monitor endpoint.
 */
export interface ConnectionMonitorEndpoint {
  /**
   * The name of the connection monitor endpoint.
   */
  name: string;
  /**
   * Resource ID of the connection monitor endpoint.
   */
  resourceId?: string;
  /**
   * Address of the connection monitor endpoint (IP or domain name).
   */
  address?: string;
  /**
   * Filter for sub-items within the endpoint.
   */
  filter?: ConnectionMonitorEndpointFilter;
}

/**
 * Describes the connection monitor endpoint filter.
 */
export interface ConnectionMonitorEndpointFilter {
  /**
   * The behavior of the endpoint filter. Currently only 'Include' is supported.
   */
  type?: ConnectionMonitorEndpointFilterType;
  /**
   * List of items in the filter.
   */
  items?: ConnectionMonitorEndpointFilterItem[];
}

/**
 * Describes the connection monitor endpoint filter item.
 */
export interface ConnectionMonitorEndpointFilterItem {
  /**
   * The type of item included in the filter. Currently only 'AgentAddress' is supported.
   */
  type?: ConnectionMonitorEndpointFilterItemType;
  /**
   * The address of the filter item.
   */
  address?: string;
}

/**
 * Describes a connection monitor test configuration.
 */
export interface ConnectionMonitorTestConfiguration {
  /**
   * The name of the connection monitor test configuration.
   */
  name: string;
  /**
   * The frequency of test evaluation, in seconds.
   */
  testFrequencySec?: number;
  /**
   * The protocol to use in test evaluation.
   */
  protocol: ConnectionMonitorTestConfigurationProtocol;
  /**
   * The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.
   */
  preferredIPVersion?: PreferredIPVersion;
  /**
   * The parameters used to perform test evaluation over HTTP.
   */
  httpConfiguration?: ConnectionMonitorHttpConfiguration;
  /**
   * The parameters used to perform test evaluation over TCP.
   */
  tcpConfiguration?: ConnectionMonitorTcpConfiguration;
  /**
   * The parameters used to perform test evaluation over ICMP.
   */
  icmpConfiguration?: ConnectionMonitorIcmpConfiguration;
  /**
   * The threshold for declaring a test successful.
   */
  successThreshold?: ConnectionMonitorSuccessThreshold;
}

/**
 * Describes the HTTP configuration.
 */
export interface ConnectionMonitorHttpConfiguration {
  /**
   * The port to connect to.
   */
  port?: number;
  /**
   * The HTTP method to use.
   */
  method?: HttpConfigurationMethod;
  /**
   * The path component of the URI. For instance, "/dir1/dir2".
   */
  path?: string;
  /**
   * The HTTP headers to transmit with the request.
   */
  requestHeaders?: HttpHeader[];
  /**
   * HTTP status codes to consider successful. For instance, "2xx,301-304,418".
   */
  validStatusCodeRanges?: string[];
  /**
   * Value indicating whether HTTPS is preferred over HTTP in cases where the choice is not explicit.
   */
  preferHttps?: boolean;
}

/**
 * Describes the TCP configuration.
 */
export interface ConnectionMonitorTcpConfiguration {
  /**
   * The port to connect to.
   */
  port?: number;
  /**
   * Value indicating whether path evaluation with trace route should be disabled.
   */
  disableTraceRoute?: boolean;
}

/**
 * Describes the ICMP configuration.
 */
export interface ConnectionMonitorIcmpConfiguration {
  /**
   * Value indicating whether path evaluation with trace route should be disabled.
   */
  disableTraceRoute?: boolean;
}

/**
 * Describes the threshold for declaring a test successful.
 */
export interface ConnectionMonitorSuccessThreshold {
  /**
   * The maximum percentage of failed checks permitted for a test to evaluate as successful.
   */
  checksFailedPercent?: number;
  /**
   * The maximum round-trip time in milliseconds permitted for a test to evaluate as successful.
   */
  roundTripTimeMs?: number;
}

/**
 * Describes the connection monitor test group.
 */
export interface ConnectionMonitorTestGroup {
  /**
   * The name of the connection monitor test group.
   */
  name: string;
  /**
   * Value indicating whether test group is disabled.
   */
  disable?: boolean;
  /**
   * List of test configuration names.
   */
  testConfigurations: string[];
  /**
   * List of source endpoint names.
   */
  sources: string[];
  /**
   * List of destination endpoint names.
   */
  destinations: string[];
}

/**
 * Describes a connection monitor output destination.
 */
export interface ConnectionMonitorOutput {
  /**
   * Connection monitor output destination type. Currently, only "Workspace" is supported.
   */
  type?: OutputType;
  /**
   * Describes the settings for producing output into a log analytics workspace.
   */
  workspaceSettings?: ConnectionMonitorWorkspaceSettings;
}

/**
 * Describes the settings for producing output into a log analytics workspace.
 */
export interface ConnectionMonitorWorkspaceSettings {
  /**
   * Log analytics workspace resource ID.
   */
  workspaceResourceId?: string;
}

/**
 * Information about the connection monitor.
 */
export interface ConnectionMonitorResult {
  /**
   * Name of the connection monitor.
   */
  readonly name?: string;
  /**
   * ID of the connection monitor.
   */
  readonly id?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Connection monitor type.
   */
  readonly type?: string;
  /**
   * Connection monitor location.
   */
  location?: string;
  /**
   * Connection monitor tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Describes the source of connection monitor.
   */
  source?: ConnectionMonitorSource;
  /**
   * Describes the destination of connection monitor.
   */
  destination?: ConnectionMonitorDestination;
  /**
   * Determines if the connection monitor will start automatically once created.
   */
  autoStart?: boolean;
  /**
   * Monitoring interval in seconds.
   */
  monitoringIntervalInSeconds?: number;
  /**
   * List of connection monitor endpoints.
   */
  endpoints?: ConnectionMonitorEndpoint[];
  /**
   * List of connection monitor test configurations.
   */
  testConfigurations?: ConnectionMonitorTestConfiguration[];
  /**
   * List of connection monitor test groups.
   */
  testGroups?: ConnectionMonitorTestGroup[];
  /**
   * List of connection monitor outputs.
   */
  outputs?: ConnectionMonitorOutput[];
  /**
   * Optional notes to be associated with the connection monitor.
   */
  notes?: string;
  /**
   * The provisioning state of the connection monitor.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The date and time when the connection monitor was started.
   */
  readonly startTime?: Date;
  /**
   * The monitoring status of the connection monitor.
   */
  readonly monitoringStatus?: string;
  /**
   * Type of connection monitor.
   */
  readonly connectionMonitorType?: ConnectionMonitorType;
}

/**
 * List of connection states snapshots.
 */
export interface ConnectionMonitorQueryResult {
  /**
   * Status of connection monitor source.
   */
  sourceStatus?: ConnectionMonitorSourceStatus;
  /**
   * Information about connection states.
   */
  states?: ConnectionStateSnapshot[];
}

/**
 * Connection state snapshot.
 */
export interface ConnectionStateSnapshot {
  /**
   * The connection state.
   */
  connectionState?: ConnectionState;
  /**
   * The start time of the connection snapshot.
   */
  startTime?: Date;
  /**
   * The end time of the connection snapshot.
   */
  endTime?: Date;
  /**
   * Connectivity analysis evaluation state.
   */
  evaluationState?: EvaluationState;
  /**
   * Average latency in ms.
   */
  avgLatencyInMs?: number;
  /**
   * Minimum latency in ms.
   */
  minLatencyInMs?: number;
  /**
   * Maximum latency in ms.
   */
  maxLatencyInMs?: number;
  /**
   * The number of sent probes.
   */
  probesSent?: number;
  /**
   * The number of failed probes.
   */
  probesFailed?: number;
  /**
   * List of hops between the source and the destination.
   */
  readonly hops?: ConnectivityHop[];
}

/**
 * List of connection monitors.
 */
export interface ConnectionMonitorListResult {
  /**
   * Information about connection monitors.
   */
  value?: ConnectionMonitorResult[];
}

/**
 * List of flow logs.
 */
export interface FlowLogListResult {
  /**
   * Information about flow log resource.
   */
  value?: FlowLog[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Result of the request to list Network operations. It contains a list of operations and a URL link to get the next set of results.
 */
export interface OperationListResult {
  /**
   * List of Network operations supported by the Network resource provider.
   */
  value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * Network REST API operation definition.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}.
   */
  name?: string;
  /**
   * Display metadata associated with the operation.
   */
  display?: OperationDisplay;
  /**
   * Origin of the operation.
   */
  origin?: string;
  /**
   * Specification of the service.
   */
  serviceSpecification?: OperationPropertiesFormatServiceSpecification;
}

/**
 * Display metadata associated with the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft Network.
   */
  provider?: string;
  /**
   * Resource on which the operation is performed.
   */
  resource?: string;
  /**
   * Type of the operation: get, read, delete, etc.
   */
  operation?: string;
  /**
   * Description of the operation.
   */
  description?: string;
}

/**
 * Specification of the service.
 */
export interface OperationPropertiesFormatServiceSpecification {
  /**
   * Operation service specification.
   */
  metricSpecifications?: MetricSpecification[];
  /**
   * Operation log specification.
   */
  logSpecifications?: LogSpecification[];
}

/**
 * Description of metrics specification.
 */
export interface MetricSpecification {
  /**
   * The name of the metric.
   */
  name?: string;
  /**
   * The display name of the metric.
   */
  displayName?: string;
  /**
   * The description of the metric.
   */
  displayDescription?: string;
  /**
   * Units the metric to be displayed in.
   */
  unit?: string;
  /**
   * The aggregation type.
   */
  aggregationType?: string;
  /**
   * List of availability.
   */
  availabilities?: Availability[];
  /**
   * Whether regional MDM account enabled.
   */
  enableRegionalMdmAccount?: boolean;
  /**
   * Whether gaps would be filled with zeros.
   */
  fillGapWithZero?: boolean;
  /**
   * Pattern for the filter of the metric.
   */
  metricFilterPattern?: string;
  /**
   * List of dimensions.
   */
  dimensions?: Dimension[];
  /**
   * Whether the metric is internal.
   */
  isInternal?: boolean;
  /**
   * The source MDM account.
   */
  sourceMdmAccount?: string;
  /**
   * The source MDM namespace.
   */
  sourceMdmNamespace?: string;
  /**
   * The resource Id dimension name override.
   */
  resourceIdDimensionNameOverride?: string;
}

/**
 * Availability of the metric.
 */
export interface Availability {
  /**
   * The time grain of the availability.
   */
  timeGrain?: string;
  /**
   * The retention of the availability.
   */
  retention?: string;
  /**
   * Duration of the availability blob.
   */
  blobDuration?: string;
}

/**
 * Dimension of the metric.
 */
export interface Dimension {
  /**
   * The name of the dimension.
   */
  name?: string;
  /**
   * The display name of the dimension.
   */
  displayName?: string;
  /**
   * The internal name of the dimension.
   */
  internalName?: string;
}

/**
 * Description of logging specification.
 */
export interface LogSpecification {
  /**
   * The name of the specification.
   */
  name?: string;
  /**
   * The display name of the specification.
   */
  displayName?: string;
  /**
   * Duration of the blob.
   */
  blobDuration?: string;
}

/**
 * Response for the ListPrivateEndpoints API service call.
 */
export interface PrivateEndpointListResult {
  /**
   * A list of private endpoint resources in a resource group.
   */
  value?: PrivateEndpoint[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * An array of available PrivateEndpoint types.
 */
export interface AvailablePrivateEndpointTypesResult {
  /**
   * An array of available privateEndpoint type.
   */
  value?: AvailablePrivateEndpointType[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The information of an AvailablePrivateEndpointType.
 */
export interface AvailablePrivateEndpointType {
  /**
   * The name of the service and resource.
   */
  name?: string;
  /**
   * A unique identifier of the AvailablePrivateEndpoint Type resource.
   */
  id?: string;
  /**
   * Resource type.
   */
  type?: string;
  /**
   * The name of the service and resource.
   */
  resourceName?: string;
}

/**
 * PrivateDnsZoneConfig resource.
 */
export interface PrivateDnsZoneConfig {
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * The resource id of the private dns zone.
   */
  privateDnsZoneId?: string;
  /**
   * A collection of information regarding a recordSet, holding information to identify private resources.
   */
  readonly recordSets?: RecordSet[];
}

/**
 * A collective group of information about the record set information.
 */
export interface RecordSet {
  /**
   * Resource record type.
   */
  recordType?: string;
  /**
   * Recordset name.
   */
  recordSetName?: string;
  /**
   * Fqdn that resolves to private endpoint ip address.
   */
  fqdn?: string;
  /**
   * The provisioning state of the recordset.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Recordset time to live.
   */
  ttl?: number;
  /**
   * The private ip address of the private endpoint.
   */
  ipAddresses?: string[];
}

/**
 * Response for the ListPrivateDnsZoneGroups API service call.
 */
export interface PrivateDnsZoneGroupListResult {
  /**
   * A list of private dns zone group resources in a private endpoint.
   */
  value?: PrivateDnsZoneGroup[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The base resource set for visibility and auto-approval.
 */
export interface ResourceSet {
  /**
   * The list of subscriptions.
   */
  subscriptions?: string[];
}

/**
 * Response for the ListPrivateLinkService API service call.
 */
export interface PrivateLinkServiceListResult {
  /**
   * A list of PrivateLinkService resources in a resource group.
   */
  value?: PrivateLinkService[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for the ListPrivateEndpointConnection API service call.
 */
export interface PrivateEndpointConnectionListResult {
  /**
   * A list of PrivateEndpointConnection resources for a specific private link service.
   */
  value?: PrivateEndpointConnection[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Request body of the CheckPrivateLinkServiceVisibility API service call.
 */
export interface CheckPrivateLinkServiceVisibilityRequest {
  /**
   * The alias of the private link service.
   */
  privateLinkServiceAlias?: string;
}

/**
 * Response for the CheckPrivateLinkServiceVisibility API service call.
 */
export interface PrivateLinkServiceVisibility {
  /**
   * Private Link Service Visibility (True/False).
   */
  visible?: boolean;
}

/**
 * An array of private link service id that can be linked to a private end point with auto approved.
 */
export interface AutoApprovedPrivateLinkServicesResult {
  /**
   * An array of auto approved private link service.
   */
  value?: AutoApprovedPrivateLinkService[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The information of an AutoApprovedPrivateLinkService.
 */
export interface AutoApprovedPrivateLinkService {
  /**
   * The id of the private link service resource.
   */
  privateLinkService?: string;
}

/**
 * Response for ListPublicIpAddresses API service call.
 */
export interface PublicIPAddressListResult {
  /**
   * A list of public IP addresses that exists in a resource group.
   */
  value?: PublicIPAddress[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * SKU of a public IP prefix.
 */
export interface PublicIPPrefixSku {
  /**
   * Name of a public IP prefix SKU.
   */
  name?: PublicIPPrefixSkuName;
}

/**
 * Reference to a public IP address.
 */
export interface ReferencedPublicIpAddress {
  /**
   * The PublicIPAddress Reference.
   */
  id?: string;
}

/**
 * Response for ListPublicIpPrefixes API service call.
 */
export interface PublicIPPrefixListResult {
  /**
   * A list of public IP prefixes that exists in a resource group.
   */
  value?: PublicIPPrefix[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for the ListRouteFilters API service call.
 */
export interface RouteFilterListResult {
  /**
   * A list of route filters in a resource group.
   */
  value?: RouteFilter[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for the ListRouteFilterRules API service call.
 */
export interface RouteFilterRuleListResult {
  /**
   * A list of RouteFilterRules in a resource group.
   */
  value?: RouteFilterRule[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for the ListRouteTable API service call.
 */
export interface RouteTableListResult {
  /**
   * A list of route tables in a resource group.
   */
  value?: RouteTable[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for the ListRoute API service call.
 */
export interface RouteListResult {
  /**
   * A list of routes in a resource group.
   */
  value?: Route[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for ListSecurityPartnerProviders API service call.
 */
export interface SecurityPartnerProviderListResult {
  /**
   * List of Security Partner Providers in a resource group.
   */
  value?: SecurityPartnerProvider[];
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for the ListServiceCommunity API service call.
 */
export interface BgpServiceCommunityListResult {
  /**
   * A list of service community resources.
   */
  value?: BgpServiceCommunity[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Contains bgp community information offered in Service Community resources.
 */
export interface BGPCommunity {
  /**
   * The region which the service support. e.g. For O365, region is Global.
   */
  serviceSupportedRegion?: string;
  /**
   * The name of the bgp community. e.g. Skype.
   */
  communityName?: string;
  /**
   * The value of the bgp community. For more information: https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.
   */
  communityValue?: string;
  /**
   * The prefixes that the bgp community contains.
   */
  communityPrefixes?: string[];
  /**
   * Customer is authorized to use bgp community or not.
   */
  isAuthorizedToUse?: boolean;
  /**
   * The service group of the bgp community contains.
   */
  serviceGroup?: string;
}

/**
 * Response for ListServiceEndpointPolicies API service call.
 */
export interface ServiceEndpointPolicyListResult {
  /**
   * A list of ServiceEndpointPolicy resources.
   */
  value?: ServiceEndpointPolicy[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for ListServiceEndpointPolicyDefinition API service call. Retrieves all service endpoint policy definition that belongs to a service endpoint policy.
 */
export interface ServiceEndpointPolicyDefinitionListResult {
  /**
   * The service endpoint policy definition in a service endpoint policy.
   */
  value?: ServiceEndpointPolicyDefinition[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for the ListServiceTags API service call.
 */
export interface ServiceTagsListResult {
  /**
   * The name of the cloud.
   */
  readonly name?: string;
  /**
   * The ID of the cloud.
   */
  readonly id?: string;
  /**
   * The azure resource type.
   */
  readonly type?: string;
  /**
   * The iteration number.
   */
  readonly changeNumber?: string;
  /**
   * The name of the cloud.
   */
  readonly cloud?: string;
  /**
   * The list of service tag information resources.
   */
  readonly values?: ServiceTagInformation[];
}

/**
 * The service tag information.
 */
export interface ServiceTagInformation {
  /**
   * Properties of the service tag information.
   */
  readonly properties?: ServiceTagInformationPropertiesFormat;
  /**
   * The name of service tag.
   */
  readonly name?: string;
  /**
   * The ID of service tag.
   */
  readonly id?: string;
}

/**
 * Properties of the service tag information.
 */
export interface ServiceTagInformationPropertiesFormat {
  /**
   * The iteration number of service tag.
   */
  readonly changeNumber?: string;
  /**
   * The region of service tag.
   */
  readonly region?: string;
  /**
   * The name of system service.
   */
  readonly systemService?: string;
  /**
   * The list of IP address prefixes.
   */
  readonly addressPrefixes?: string[];
}

/**
 * The list usages operation response.
 */
export interface UsagesListResult {
  /**
   * The list network resource usages.
   */
  value?: Usage[];
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The network resource usage.
 */
export interface Usage {
  /**
   * Resource identifier.
   */
  readonly id?: string;
  /**
   * An enum describing the unit of measurement.
   */
  unit: UsageUnit;
  /**
   * The current value of the usage.
   */
  currentValue: number;
  /**
   * The limit of usage.
   */
  limit: number;
  /**
   * The name of the type of usage.
   */
  name: UsageName;
}

/**
 * The usage names.
 */
export interface UsageName {
  /**
   * A string describing the resource name.
   */
  value?: string;
  /**
   * A localized string describing the resource name.
   */
  localizedValue?: string;
}

/**
 * Response for the ListVirtualNetworks API service call.
 */
export interface VirtualNetworkListResult {
  /**
   * A list of VirtualNetwork resources in a resource group.
   */
  value?: VirtualNetwork[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Details of PrepareNetworkPolicies for Subnet.
 */
export interface PrepareNetworkPoliciesRequest {
  /**
   * The name of the service for which subnet is being prepared for.
   */
  serviceName?: string;
  /**
   * A list of NetworkIntentPolicyConfiguration.
   */
  networkIntentPolicyConfigurations?: NetworkIntentPolicyConfiguration[];
}

/**
 * Details of NetworkIntentPolicyConfiguration for PrepareNetworkPoliciesRequest.
 */
export interface NetworkIntentPolicyConfiguration {
  /**
   * The name of the Network Intent Policy for storing in target subscription.
   */
  networkIntentPolicyName?: string;
  /**
   * Source network intent policy.
   */
  sourceNetworkIntentPolicy?: NetworkIntentPolicy;
}

/**
 * Details of UnprepareNetworkPolicies for Subnet.
 */
export interface UnprepareNetworkPoliciesRequest {
  /**
   * The name of the service for which subnet is being unprepared for.
   */
  serviceName?: string;
}

/**
 * Response for ResourceNavigationLinks_List operation.
 */
export interface ResourceNavigationLinksListResult {
  /**
   * The resource navigation links in a subnet.
   */
  value?: ResourceNavigationLink[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for ServiceAssociationLinks_List operation.
 */
export interface ServiceAssociationLinksListResult {
  /**
   * The service association links in a subnet.
   */
  value?: ServiceAssociationLink[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network.
 */
export interface SubnetListResult {
  /**
   * The subnets in a virtual network.
   */
  value?: Subnet[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for ListSubnets API service call. Retrieves all subnets that belong to a virtual network.
 */
export interface VirtualNetworkPeeringListResult {
  /**
   * The peerings in a virtual network.
   */
  value?: VirtualNetworkPeering[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for CheckIPAddressAvailability API service call.
 */
export interface IPAddressAvailabilityResult {
  /**
   * Private IP address availability.
   */
  available?: boolean;
  /**
   * Contains other available private IP addresses if the asked for address is taken.
   */
  availableIPAddresses?: string[];
}

/**
 * Response for the virtual networks GetUsage API service call.
 */
export interface VirtualNetworkListUsageResult {
  /**
   * VirtualNetwork usage stats.
   */
  readonly value?: VirtualNetworkUsage[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Usage details for subnet.
 */
export interface VirtualNetworkUsage {
  /**
   * Indicates number of IPs used from the Subnet.
   */
  readonly currentValue?: number;
  /**
   * Subnet identifier.
   */
  readonly id?: string;
  /**
   * Indicates the size of the subnet.
   */
  readonly limit?: number;
  /**
   * The name containing common and localized value for usage.
   */
  readonly name?: VirtualNetworkUsageName;
  /**
   * Usage units. Returns 'Count'.
   */
  readonly unit?: string;
}

/**
 * Usage strings container.
 */
export interface VirtualNetworkUsageName {
  /**
   * Localized subnet size and usage string.
   */
  readonly localizedValue?: string;
  /**
   * Subnet size and usage string.
   */
  readonly value?: string;
}

/**
 * VirtualNetworkGatewaySku details.
 */
export interface VirtualNetworkGatewaySku {
  /**
   * Gateway SKU name.
   */
  name?: VirtualNetworkGatewaySkuName;
  /**
   * Gateway SKU tier.
   */
  tier?: VirtualNetworkGatewaySkuTier;
  /**
   * The capacity.
   */
  readonly capacity?: number;
}

/**
 * VpnClientConfiguration for P2S client.
 */
export interface VpnClientConfiguration {
  /**
   * The reference to the address space resource which represents Address space for P2S VpnClient.
   */
  vpnClientAddressPool?: AddressSpace;
  /**
   * VpnClientRootCertificate for virtual network gateway.
   */
  vpnClientRootCertificates?: VpnClientRootCertificate[];
  /**
   * VpnClientRevokedCertificate for Virtual network gateway.
   */
  vpnClientRevokedCertificates?: VpnClientRevokedCertificate[];
  /**
   * VpnClientProtocols for Virtual network gateway.
   */
  vpnClientProtocols?: VpnClientProtocol[];
  /**
   * VpnClientIpsecPolicies for virtual network gateway P2S client.
   */
  vpnClientIpsecPolicies?: IpsecPolicy[];
  /**
   * The radius server address property of the VirtualNetworkGateway resource for vpn client connection.
   */
  radiusServerAddress?: string;
  /**
   * The radius secret property of the VirtualNetworkGateway resource for vpn client connection.
   */
  radiusServerSecret?: string;
  /**
   * The radiusServers property for multiple radius server configuration.
   */
  radiusServers?: RadiusServer[];
  /**
   * The AADTenant property of the VirtualNetworkGateway resource for vpn client connection used for AAD authentication.
   */
  aadTenant?: string;
  /**
   * The AADAudience property of the VirtualNetworkGateway resource for vpn client connection used for AAD authentication.
   */
  aadAudience?: string;
  /**
   * The AADIssuer property of the VirtualNetworkGateway resource for vpn client connection used for AAD authentication.
   */
  aadIssuer?: string;
}

/**
 * An IPSec Policy configuration for a virtual network gateway connection.
 */
export interface IpsecPolicy {
  /**
   * The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
   */
  saLifeTimeSeconds: number;
  /**
   * The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
   */
  saDataSizeKilobytes: number;
  /**
   * The IPSec encryption algorithm (IKE phase 1).
   */
  ipsecEncryption: IpsecEncryption;
  /**
   * The IPSec integrity algorithm (IKE phase 1).
   */
  ipsecIntegrity: IpsecIntegrity;
  /**
   * The IKE encryption algorithm (IKE phase 2).
   */
  ikeEncryption: IkeEncryption;
  /**
   * The IKE integrity algorithm (IKE phase 2).
   */
  ikeIntegrity: IkeIntegrity;
  /**
   * The DH Group used in IKE Phase 1 for initial SA.
   */
  dhGroup: DhGroup;
  /**
   * The Pfs Group used in IKE Phase 2 for new child SA.
   */
  pfsGroup: PfsGroup;
}

/**
 * Radius Server Settings.
 */
export interface RadiusServer {
  /**
   * The address of this radius server.
   */
  radiusServerAddress: string;
  /**
   * The initial score assigned to this radius server.
   */
  radiusServerScore?: number;
  /**
   * The secret used for this radius server.
   */
  radiusServerSecret?: string;
}

/**
 * BGP settings details.
 */
export interface BgpSettings {
  /**
   * The BGP speaker's ASN.
   */
  asn?: number;
  /**
   * The BGP peering address and BGP identifier of this BGP speaker.
   */
  bgpPeeringAddress?: string;
  /**
   * The weight added to routes learned from this BGP speaker.
   */
  peerWeight?: number;
  /**
   * BGP peering address with IP configuration ID for virtual network gateway.
   */
  bgpPeeringAddresses?: IPConfigurationBgpPeeringAddress[];
}

/**
 * Properties of IPConfigurationBgpPeeringAddress.
 */
export interface IPConfigurationBgpPeeringAddress {
  /**
   * The ID of IP configuration which belongs to gateway.
   */
  ipconfigurationId?: string;
  /**
   * The list of default BGP peering addresses which belong to IP configuration.
   */
  readonly defaultBgpIpAddresses?: string[];
  /**
   * The list of custom BGP peering addresses which belong to IP configuration.
   */
  customBgpIpAddresses?: string[];
  /**
   * The list of tunnel public IP addresses which belong to IP configuration.
   */
  readonly tunnelIpAddresses?: string[];
}

/**
 * Response for the ListVirtualNetworkGateways API service call.
 */
export interface VirtualNetworkGatewayListResult {
  /**
   * A list of VirtualNetworkGateway resources that exists in a resource group.
   */
  value?: VirtualNetworkGateway[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Response for the VirtualNetworkGatewayListConnections API service call.
 */
export interface VirtualNetworkGatewayListConnectionsResult {
  /**
   * A list of VirtualNetworkGatewayConnection resources that exists in a resource group.
   */
  value?: VirtualNetworkGatewayConnectionListEntity[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * A reference to VirtualNetworkGateway or LocalNetworkGateway resource.
 */
export interface VirtualNetworkConnectionGatewayReference {
  /**
   * The ID of VirtualNetworkGateway or LocalNetworkGateway resource.
   */
  id: string;
}

/**
 * VirtualNetworkGatewayConnection properties.
 */
export interface TunnelConnectionHealth {
  /**
   * Tunnel name.
   */
  readonly tunnel?: string;
  /**
   * Virtual Network Gateway connection status.
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * The Ingress Bytes Transferred in this connection.
   */
  readonly ingressBytesTransferred?: number;
  /**
   * The Egress Bytes Transferred in this connection.
   */
  readonly egressBytesTransferred?: number;
  /**
   * The time at which connection was established in Utc format.
   */
  readonly lastConnectionEstablishedUtcTime?: string;
}

/**
 * An traffic selector policy for a virtual network gateway connection.
 */
export interface TrafficSelectorPolicy {
  /**
   * A collection of local address spaces in CIDR format.
   */
  localAddressRanges: string[];
  /**
   * A collection of remote address spaces in CIDR format.
   */
  remoteAddressRanges: string[];
}

/**
 * Vpn Client Parameters for package generation.
 */
export interface VpnClientParameters {
  /**
   * VPN client Processor Architecture.
   */
  processorArchitecture?: ProcessorArchitecture;
  /**
   * VPN client authentication method.
   */
  authenticationMethod?: AuthenticationMethod;
  /**
   * The public certificate data for the radius server authentication certificate as a Base-64 encoded string. Required only if external radius authentication has been configured with EAPTLS authentication.
   */
  radiusServerAuthCertificate?: string;
  /**
   * A list of client root certificates public certificate data encoded as Base-64 strings. Optional parameter for external radius based authentication with EAPTLS.
   */
  clientRootCertificates?: string[];
}

/**
 * Response for list BGP peer status API service call.
 */
export interface BgpPeerStatusListResult {
  /**
   * List of BGP peers.
   */
  value?: BgpPeerStatus[];
}

/**
 * BGP peer status details.
 */
export interface BgpPeerStatus {
  /**
   * The virtual network gateway's local address.
   */
  readonly localAddress?: string;
  /**
   * The remote BGP peer.
   */
  readonly neighbor?: string;
  /**
   * The autonomous system number of the remote BGP peer.
   */
  readonly asn?: number;
  /**
   * The BGP peer state.
   */
  readonly state?: BgpPeerState;
  /**
   * For how long the peering has been up.
   */
  readonly connectedDuration?: string;
  /**
   * The number of routes learned from this peer.
   */
  readonly routesReceived?: number;
  /**
   * The number of BGP messages sent.
   */
  readonly messagesSent?: number;
  /**
   * The number of BGP messages received.
   */
  readonly messagesReceived?: number;
}

/**
 * List of virtual network gateway routes.
 */
export interface GatewayRouteListResult {
  /**
   * List of gateway routes.
   */
  value?: GatewayRoute[];
}

/**
 * Gateway routing details.
 */
export interface GatewayRoute {
  /**
   * The gateway's local address.
   */
  readonly localAddress?: string;
  /**
   * The route's network prefix.
   */
  readonly network?: string;
  /**
   * The route's next hop.
   */
  readonly nextHop?: string;
  /**
   * The peer this route was learned from.
   */
  readonly sourcePeer?: string;
  /**
   * The source this route was learned from.
   */
  readonly origin?: string;
  /**
   * The route's AS path sequence.
   */
  readonly asPath?: string;
  /**
   * The route's weight.
   */
  readonly weight?: number;
}

/**
 * An IPSec parameters for a virtual network gateway P2S connection.
 */
export interface VpnClientIPsecParameters {
  /**
   * The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for P2S client.
   */
  saLifeTimeSeconds: number;
  /**
   * The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for P2S client..
   */
  saDataSizeKilobytes: number;
  /**
   * The IPSec encryption algorithm (IKE phase 1).
   */
  ipsecEncryption: IpsecEncryption;
  /**
   * The IPSec integrity algorithm (IKE phase 1).
   */
  ipsecIntegrity: IpsecIntegrity;
  /**
   * The IKE encryption algorithm (IKE phase 2).
   */
  ikeEncryption: IkeEncryption;
  /**
   * The IKE integrity algorithm (IKE phase 2).
   */
  ikeIntegrity: IkeIntegrity;
  /**
   * The DH Group used in IKE Phase 1 for initial SA.
   */
  dhGroup: DhGroup;
  /**
   * The Pfs Group used in IKE Phase 2 for new child SA.
   */
  pfsGroup: PfsGroup;
}

/**
 * Vpn device configuration script generation parameters.
 */
export interface VpnDeviceScriptParameters {
  /**
   * The vendor for the vpn device.
   */
  vendor?: string;
  /**
   * The device family for the vpn device.
   */
  deviceFamily?: string;
  /**
   * The firmware version for the vpn device.
   */
  firmwareVersion?: string;
}

/**
 * Start packet capture parameters on virtual network gateway.
 */
export interface VpnPacketCaptureStartParameters {
  /**
   * Start Packet capture parameters.
   */
  filterData?: string;
}

/**
 * Stop packet capture parameters.
 */
export interface VpnPacketCaptureStopParameters {
  /**
   * SAS url for packet capture on virtual network gateway.
   */
  sasUrl?: string;
}

/**
 * Response for the ListVirtualNetworkGatewayConnections API service call.
 */
export interface VirtualNetworkGatewayConnectionListResult {
  /**
   * A list of VirtualNetworkGatewayConnection resources that exists in a resource group.
   */
  value?: VirtualNetworkGatewayConnection[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The virtual network connection reset shared key.
 */
export interface ConnectionResetSharedKey {
  /**
   * The virtual network connection reset shared key length, should between 1 and 128.
   */
  keyLength: number;
}

/**
 * Response for ListLocalNetworkGateways API service call.
 */
export interface LocalNetworkGatewayListResult {
  /**
   * A list of local network gateways that exists in a resource group.
   */
  value?: LocalNetworkGateway[];
  /**
   * The URL to get the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * List of virtual network gateway vpn client connection health.
 */
export interface VpnClientConnectionHealthDetailListResult {
  /**
   * List of vpn client connection health.
   */
  value?: VpnClientConnectionHealthDetail[];
}

/**
 * VPN client connection health detail.
 */
export interface VpnClientConnectionHealthDetail {
  /**
   * The vpn client Id.
   */
  readonly vpnConnectionId?: string;
  /**
   * The duration time of a connected vpn client.
   */
  readonly vpnConnectionDuration?: number;
  /**
   * The start time of a connected vpn client.
   */
  readonly vpnConnectionTime?: string;
  /**
   * The public Ip of a connected vpn client.
   */
  readonly publicIpAddress?: string;
  /**
   * The assigned private Ip of a connected vpn client.
   */
  readonly privateIpAddress?: string;
  /**
   * The user name of a connected vpn client.
   */
  readonly vpnUserName?: string;
  /**
   * The max band width.
   */
  readonly maxBandwidth?: number;
  /**
   * The egress packets per second.
   */
  readonly egressPacketsTransferred?: number;
  /**
   * The egress bytes per second.
   */
  readonly egressBytesTransferred?: number;
  /**
   * The ingress packets per second.
   */
  readonly ingressPacketsTransferred?: number;
  /**
   * The ingress bytes per second.
   */
  readonly ingressBytesTransferred?: number;
  /**
   * The max packets transferred per second.
   */
  readonly maxPacketsPerSecond?: number;
}

/**
 * List of p2s vpn connections to be disconnected.
 */
export interface P2SVpnConnectionRequest {
  /**
   * List of p2s vpn connection Ids.
   */
  vpnConnectionIds?: string[];
}

/**
 * Response for ListVirtualNetworkTap API service call.
 */
export interface VirtualNetworkTapListResult {
  /**
   * A list of VirtualNetworkTaps in a resource group.
   */
  value?: VirtualNetworkTap[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for ListVirtualRouters API service call.
 */
export interface VirtualRouterListResult {
  /**
   * List of Virtual Routers.
   */
  value?: VirtualRouter[];
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Response for ListVirtualRouterPeerings API service call.
 */
export interface VirtualRouterPeeringListResult {
  /**
   * List of VirtualRouterPeerings in a VirtualRouter.
   */
  value?: VirtualRouterPeering[];
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Result of the request to list VirtualWANs. It contains a list of VirtualWANs and a URL nextLink to get the next set of results.
 */
export interface ListVirtualWANsResult {
  /**
   * List of VirtualWANs.
   */
  value?: VirtualWAN[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * List of properties of the device.
 */
export interface DeviceProperties {
  /**
   * Name of the device Vendor.
   */
  deviceVendor?: string;
  /**
   * Model of the device.
   */
  deviceModel?: string;
  /**
   * Link speed.
   */
  linkSpeedInMbps?: number;
}

/**
 * List of properties of a link provider.
 */
export interface VpnLinkProviderProperties {
  /**
   * Name of the link provider.
   */
  linkProviderName?: string;
  /**
   * Link speed.
   */
  linkSpeedInMbps?: number;
}

/**
 * BGP settings details for a link.
 */
export interface VpnLinkBgpSettings {
  /**
   * The BGP speaker's ASN.
   */
  asn?: number;
  /**
   * The BGP peering address and BGP identifier of this BGP speaker.
   */
  bgpPeeringAddress?: string;
}

/**
 * Result of the request to list VpnSites. It contains a list of VpnSites and a URL nextLink to get the next set of results.
 */
export interface ListVpnSitesResult {
  /**
   * List of VpnSites.
   */
  value?: VpnSite[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * Result of the request to list VpnSiteLinks. It contains a list of VpnSiteLinks and a URL nextLink to get the next set of results.
 */
export interface ListVpnSiteLinksResult {
  /**
   * List of VpnSitesLinks.
   */
  value?: VpnSiteLink[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * List of Vpn-Sites.
 */
export interface GetVpnSitesConfigurationRequest {
  /**
   * List of resource-ids of the vpn-sites for which config is to be downloaded.
   */
  vpnSites?: string[];
  /**
   * The sas-url to download the configurations for vpn-sites.
   */
  outputBlobSasUrl: string;
}

/**
 * Collection of SecurityProviders.
 */
export interface VirtualWanSecurityProviders {
  /**
   * List of VirtualWAN security providers.
   */
  supportedProviders?: VirtualWanSecurityProvider[];
}

/**
 * Collection of SecurityProviders.
 */
export interface VirtualWanSecurityProvider {
  /**
   * Name of the security provider.
   */
  name?: string;
  /**
   * Url of the security provider.
   */
  url?: string;
  /**
   * Name of the security provider.
   */
  readonly type?: VirtualWanSecurityProviderType;
}

/**
 * Properties of VPN client root certificate of VpnServerConfiguration.
 */
export interface VpnServerConfigVpnClientRootCertificate {
  /**
   * The certificate name.
   */
  name?: string;
  /**
   * The certificate public data.
   */
  publicCertData?: string;
}

/**
 * Properties of the revoked VPN client certificate of VpnServerConfiguration.
 */
export interface VpnServerConfigVpnClientRevokedCertificate {
  /**
   * The certificate name.
   */
  name?: string;
  /**
   * The revoked VPN client certificate thumbprint.
   */
  thumbprint?: string;
}

/**
 * Properties of Radius Server root certificate of VpnServerConfiguration.
 */
export interface VpnServerConfigRadiusServerRootCertificate {
  /**
   * The certificate name.
   */
  name?: string;
  /**
   * The certificate public data.
   */
  publicCertData?: string;
}

/**
 * Properties of the Radius client root certificate of VpnServerConfiguration.
 */
export interface VpnServerConfigRadiusClientRootCertificate {
  /**
   * The certificate name.
   */
  name?: string;
  /**
   * The Radius client root certificate thumbprint.
   */
  thumbprint?: string;
}

/**
 * AAD Vpn authentication type related parameters.
 */
export interface AadAuthenticationParameters {
  /**
   * AAD Vpn authentication parameter AAD tenant.
   */
  aadTenant?: string;
  /**
   * AAD Vpn authentication parameter AAD audience.
   */
  aadAudience?: string;
  /**
   * AAD Vpn authentication parameter AAD issuer.
   */
  aadIssuer?: string;
}

/**
 * Routing Configuration indicating the associated and propagated route tables for this connection.
 */
export interface RoutingConfiguration {
  /**
   * The resource id RouteTable associated with this RoutingConfiguration.
   */
  associatedRouteTable?: SubResource;
  /**
   * The list of RouteTables to advertise the routes to.
   */
  propagatedRouteTables?: PropagatedRouteTable;
  /**
   * List of routes that control routing from VirtualHub into a virtual network connection.
   */
  vnetRoutes?: VnetRoute;
}

/**
 * The list of RouteTables to advertise the routes to.
 */
export interface PropagatedRouteTable {
  /**
   * The list of labels.
   */
  labels?: string[];
  /**
   * The list of resource ids of all the RouteTables.
   */
  ids?: SubResource[];
}

/**
 * List of routes that control routing from VirtualHub into a virtual network connection.
 */
export interface VnetRoute {
  /**
   * List of all Static Routes.
   */
  staticRoutes?: StaticRoute[];
}

/**
 * List of all Static Routes.
 */
export interface StaticRoute {
  /**
   * The name of the StaticRoute that is unique within a VnetRoute.
   */
  name?: string;
  /**
   * List of all address prefixes.
   */
  addressPrefixes?: string[];
  /**
   * The ip address of the next hop.
   */
  nextHopIpAddress?: string;
}

/**
 * VpnClientConnectionHealth properties.
 */
export interface VpnClientConnectionHealth {
  /**
   * Total of the Ingress Bytes Transferred in this P2S Vpn connection.
   */
  readonly totalIngressBytesTransferred?: number;
  /**
   * Total of the Egress Bytes Transferred in this connection.
   */
  readonly totalEgressBytesTransferred?: number;
  /**
   * The total of p2s vpn clients connected at this time to this P2SVpnGateway.
   */
  vpnClientConnectionsCount?: number;
  /**
   * List of allocated ip addresses to the connected p2s vpn clients.
   */
  allocatedIpAddresses?: string[];
}

/**
 * Result of the request to list all VpnServerConfigurations. It contains a list of VpnServerConfigurations and a URL nextLink to get the next set of results.
 */
export interface ListVpnServerConfigurationsResult {
  /**
   * List of VpnServerConfigurations.
   */
  value?: VpnServerConfiguration[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * VirtualHub route table.
 */
export interface VirtualHubRouteTable {
  /**
   * List of all routes.
   */
  routes?: VirtualHubRoute[];
}

/**
 * VirtualHub route.
 */
export interface VirtualHubRoute {
  /**
   * List of all addressPrefixes.
   */
  addressPrefixes?: string[];
  /**
   * NextHop ip address.
   */
  nextHopIpAddress?: string;
}

/**
 * VirtualHubRouteTableV2 route.
 */
export interface VirtualHubRouteV2 {
  /**
   * The type of destinations.
   */
  destinationType?: string;
  /**
   * List of all destinations.
   */
  destinations?: string[];
  /**
   * The type of next hops.
   */
  nextHopType?: string;
  /**
   * NextHops ip address.
   */
  nextHops?: string[];
}

/**
 * Result of the request to list VirtualHubs. It contains a list of VirtualHubs and a URL nextLink to get the next set of results.
 */
export interface ListVirtualHubsResult {
  /**
   * List of VirtualHubs.
   */
  value?: VirtualHub[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * List of HubVirtualNetworkConnections and a URL nextLink to get the next set of results.
 */
export interface ListHubVirtualNetworkConnectionsResult {
  /**
   * List of HubVirtualNetworkConnections.
   */
  value?: HubVirtualNetworkConnection[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * Result of the request to list VpnGateways. It contains a list of VpnGateways and a URL nextLink to get the next set of results.
 */
export interface ListVpnGatewaysResult {
  /**
   * List of VpnGateways.
   */
  value?: VpnGateway[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next set of results.
 */
export interface ListVpnConnectionsResult {
  /**
   * List of Vpn Connections.
   */
  value?: VpnConnection[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next set of results.
 */
export interface ListVpnSiteLinkConnectionsResult {
  /**
   * List of VpnSiteLinkConnections.
   */
  value?: VpnSiteLinkConnection[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * Result of the request to list P2SVpnGateways. It contains a list of P2SVpnGateways and a URL nextLink to get the next set of results.
 */
export interface ListP2SVpnGatewaysResult {
  /**
   * List of P2SVpnGateways.
   */
  value?: P2SVpnGateway[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * Vpn Client Parameters for package generation.
 */
export interface P2SVpnProfileParameters {
  /**
   * VPN client authentication method.
   */
  authenticationMethod?: AuthenticationMethod;
}

/**
 * Vpn Profile Response for package generation.
 */
export interface VpnProfileResponse {
  /**
   * URL to the VPN profile.
   */
  profileUrl?: string;
}

/**
 * List of P2S Vpn connection health request.
 */
export interface P2SVpnConnectionHealthRequest {
  /**
   * The list of p2s vpn user names whose p2s vpn connection detailed health to retrieve for.
   */
  vpnUserNamesFilter?: string[];
  /**
   * The sas-url to download the P2S Vpn connection health detail.
   */
  outputBlobSasUrl?: string;
}

/**
 * P2S Vpn connection detailed health written to sas url.
 */
export interface P2SVpnConnectionHealth {
  /**
   * Returned sas url of the blob to which the p2s vpn connection detailed health will be written.
   */
  sasUrl?: string;
}

/**
 * VpnServerConfigurations list associated with VirtualWan Response.
 */
export interface VpnServerConfigurationsResponse {
  /**
   * List of VpnServerConfigurations associated with VirtualWan.
   */
  vpnServerConfigurationResourceIds?: string[];
}

/**
 * Virtual Wan Vpn profile parameters Vpn profile generation.
 */
export interface VirtualWanVpnProfileParameters {
  /**
   * VpnServerConfiguration partial resource uri with which VirtualWan is associated to.
   */
  vpnServerConfigurationResourceId?: string;
  /**
   * VPN client authentication method.
   */
  authenticationMethod?: AuthenticationMethod;
}

/**
 * List of VirtualHubRouteTableV2s and a URL nextLink to get the next set of results.
 */
export interface ListVirtualHubRouteTableV2SResult {
  /**
   * List of VirtualHubRouteTableV2s.
   */
  value?: VirtualHubRouteTableV2[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * List of ExpressRoute gateways.
 */
export interface ExpressRouteGatewayList {
  /**
   * List of ExpressRoute gateways.
   */
  value?: ExpressRouteGateway[];
}

/**
 * Configuration for auto scaling.
 */
export interface ExpressRouteGatewayPropertiesAutoScaleConfiguration {
  /**
   * Minimum and maximum number of scale units to deploy.
   */
  bounds?: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds;
}

/**
 * Minimum and maximum number of scale units to deploy.
 */
export interface ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds {
  /**
   * Minimum number of scale units deployed for ExpressRoute gateway.
   */
  min?: number;
  /**
   * Maximum number of scale units deployed for ExpressRoute gateway.
   */
  max?: number;
}

/**
 * ExpressRoute circuit peering identifier.
 */
export interface ExpressRouteCircuitPeeringId {
  /**
   * The ID of the ExpressRoute circuit peering.
   */
  id?: string;
}

/**
 * Virtual Hub identifier.
 */
export interface VirtualHubId {
  /**
   * The resource URI for the Virtual Hub where the ExpressRoute gateway is or will be deployed. The Virtual Hub resource and the ExpressRoute gateway resource reside in the same subscription.
   */
  id?: string;
}

/**
 * ExpressRouteConnection list.
 */
export interface ExpressRouteConnectionList {
  /**
   * The list of ExpressRoute connections.
   */
  value?: ExpressRouteConnection[];
}

/**
 * RouteTable route.
 */
export interface HubRoute {
  /**
   * The name of the Route that is unique within a RouteTable. This name can be used to access this route.
   */
  name: string;
  /**
   * The type of destinations (eg: CIDR, ResourceId, Service).
   */
  destinationType: string;
  /**
   * List of all destinations.
   */
  destinations: string[];
  /**
   * The type of next hop (eg: ResourceId).
   */
  nextHopType: string;
  /**
   * NextHop resource ID.
   */
  nextHop: string;
}

/**
 * List of RouteTables and a URL nextLink to get the next set of results.
 */
export interface ListHubRouteTablesResult {
  /**
   * List of RouteTables.
   */
  value?: HubRouteTable[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * Result of the request to list WebApplicationFirewallPolicies. It contains a list of WebApplicationFirewallPolicy objects and a URL link to get the next set of results.
 */
export interface WebApplicationFirewallPolicyListResult {
  /**
   * List of WebApplicationFirewallPolicies within a resource group.
   */
  readonly value?: WebApplicationFirewallPolicy[];
  /**
   * URL to get the next set of WebApplicationFirewallPolicy objects if there are any.
   */
  readonly nextLink?: string;
}

/**
 * Defines contents of a web application firewall global configuration.
 */
export interface PolicySettings {
  /**
   * The state of the policy.
   */
  state?: WebApplicationFirewallEnabledState;
  /**
   * The mode of the policy.
   */
  mode?: WebApplicationFirewallMode;
  /**
   * Whether to allow WAF to check request Body.
   */
  requestBodyCheck?: boolean;
  /**
   * Maximum request body size in Kb for WAF.
   */
  maxRequestBodySizeInKb?: number;
  /**
   * Maximum file upload size in Mb for WAF.
   */
  fileUploadLimitInMb?: number;
}

/**
 * Defines contents of a web application rule.
 */
export interface WebApplicationFirewallCustomRule {
  /**
   * The name of the resource that is unique within a policy. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
   */
  priority: number;
  /**
   * The rule type.
   */
  ruleType: WebApplicationFirewallRuleType;
  /**
   * List of match conditions.
   */
  matchConditions: MatchCondition[];
  /**
   * Type of Actions.
   */
  action: WebApplicationFirewallAction;
}

/**
 * Define match conditions.
 */
export interface MatchCondition {
  /**
   * List of match variables.
   */
  matchVariables: MatchVariable[];
  /**
   * The operator to be matched.
   */
  operator: WebApplicationFirewallOperator;
  /**
   * Whether this is negate condition or not.
   */
  negationConditon?: boolean;
  /**
   * Match value.
   */
  matchValues: string[];
  /**
   * List of transforms.
   */
  transforms?: WebApplicationFirewallTransform[];
}

/**
 * Define match variables.
 */
export interface MatchVariable {
  /**
   * Match Variable.
   */
  variableName: WebApplicationFirewallMatchVariable;
  /**
   * The selector of match variable.
   */
  selector?: string;
}

/**
 * Allow to exclude some variable satisfy the condition for the WAF check.
 */
export interface ManagedRulesDefinition {
  /**
   * The Exclusions that are applied on the policy.
   */
  exclusions?: OwaspCrsExclusionEntry[];
  /**
   * The managed rule sets that are associated with the policy.
   */
  managedRuleSets: ManagedRuleSet[];
}

/**
 * Allow to exclude some variable satisfy the condition for the WAF check.
 */
export interface OwaspCrsExclusionEntry {
  /**
   * The variable to be excluded.
   */
  matchVariable: OwaspCrsExclusionEntryMatchVariable;
  /**
   * When matchVariable is a collection, operate on the selector to specify which elements in the collection this exclusion applies to.
   */
  selectorMatchOperator: OwaspCrsExclusionEntrySelectorMatchOperator;
  /**
   * When matchVariable is a collection, operator used to specify which elements in the collection this exclusion applies to.
   */
  selector: string;
}

/**
 * Defines a managed rule set.
 */
export interface ManagedRuleSet {
  /**
   * Defines the rule set type to use.
   */
  ruleSetType: string;
  /**
   * Defines the version of the rule set to use.
   */
  ruleSetVersion: string;
  /**
   * Defines the rule group overrides to apply to the rule set.
   */
  ruleGroupOverrides?: ManagedRuleGroupOverride[];
}

/**
 * Defines a managed rule group override setting.
 */
export interface ManagedRuleGroupOverride {
  /**
   * The managed rule group to override.
   */
  ruleGroupName: string;
  /**
   * List of rules that will be disabled. If none specified, all rules in the group will be disabled.
   */
  rules?: ManagedRuleOverride[];
}

/**
 * Defines a managed rule group override setting.
 */
export interface ManagedRuleOverride {
  /**
   * Identifier for the managed rule.
   */
  ruleId: string;
  /**
   * The state of the managed rule. Defaults to Disabled if not specified.
   */
  state?: ManagedRuleEnabledState;
}

/**
 * Properties of the FirewallPolicyNatRuleAction.
 */
export interface FirewallPolicyNatRuleAction {
  /**
   * The type of action.
   */
  type?: FirewallPolicyNatRuleActionType;
}

/**
 * Properties of a rule.
 */
export interface FirewallPolicyRuleCondition {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  ruleConditionType:
    | "ApplicationRuleCondition"
    | "NatRuleCondition"
    | "NetworkRuleCondition";
  /**
   * Name of the rule condition.
   */
  name?: string;
  /**
   * Description of the rule condition.
   */
  description?: string;
}

/**
 * Properties of the FirewallPolicyFilterRuleAction.
 */
export interface FirewallPolicyFilterRuleAction {
  /**
   * The type of action.
   */
  type?: FirewallPolicyFilterRuleActionType;
}

/**
 * Properties of the application rule protocol.
 */
export interface FirewallPolicyRuleConditionApplicationProtocol {
  /**
   * Protocol type.
   */
  protocolType?: FirewallPolicyRuleConditionApplicationProtocolType;
  /**
   * Port number for the protocol, cannot be greater than 64000.
   */
  port?: number;
}

/**
 * The response body contains the status of the specified asynchronous operation, indicating whether it has succeeded, is in progress, or has failed. Note that this status is distinct from the HTTP status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the response body includes the HTTP status code for the successful request. If the asynchronous operation failed, the response body includes the HTTP status code for the failed request and error information regarding the failure.
 */
export interface AzureAsyncOperationResult {
  /**
   * Status of the Azure async operation.
   */
  status?: NetworkOperationStatus;
  /**
   * Details of the error occurred during specified asynchronous operation.
   */
  error?: ErrorModel;
}

/**
 * VpnSite Resource.
 */
export interface VpnSiteId {
  /**
   * The resource-uri of the vpn-site for which config is to be fetched.
   */
  readonly vpnSite?: string;
}

/**
 * IP configuration of an application gateway. Currently 1 public and 1 private IP configuration is allowed.
 */
export type ApplicationGatewayIPConfiguration = SubResource & {
  /**
   * Name of the IP configuration that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Reference to the subnet resource. A subnet from where application gateway gets its private address.
   */
  subnet?: SubResource;
  /**
   * The provisioning state of the application gateway IP configuration resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Authentication certificates of an application gateway.
 */
export type ApplicationGatewayAuthenticationCertificate = SubResource & {
  /**
   * Name of the authentication certificate that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Certificate public data.
   */
  data?: string;
  /**
   * The provisioning state of the authentication certificate resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Trusted Root certificates of an application gateway.
 */
export type ApplicationGatewayTrustedRootCertificate = SubResource & {
  /**
   * Name of the trusted root certificate that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Certificate public data.
   */
  data?: string;
  /**
   * Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
   */
  keyVaultSecretId?: string;
  /**
   * The provisioning state of the trusted root certificate resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * SSL certificates of an application gateway.
 */
export type ApplicationGatewaySslCertificate = SubResource & {
  /**
   * Name of the SSL certificate that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Base-64 encoded pfx certificate. Only applicable in PUT Request.
   */
  data?: string;
  /**
   * Password for the pfx file specified in data. Only applicable in PUT request.
   */
  password?: string;
  /**
   * Base-64 encoded Public cert data corresponding to pfx specified in data. Only applicable in GET request.
   */
  readonly publicCertData?: string;
  /**
   * Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
   */
  keyVaultSecretId?: string;
  /**
   * The provisioning state of the SSL certificate resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Frontend IP configuration of an application gateway.
 */
export type ApplicationGatewayFrontendIPConfiguration = SubResource & {
  /**
   * Name of the frontend IP configuration that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * PrivateIPAddress of the network interface IP Configuration.
   */
  privateIPAddress?: string;
  /**
   * The private IP address allocation method.
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * Reference to the subnet resource.
   */
  subnet?: SubResource;
  /**
   * Reference to the PublicIP resource.
   */
  publicIPAddress?: SubResource;
  /**
   * The provisioning state of the frontend IP configuration resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Frontend port of an application gateway.
 */
export type ApplicationGatewayFrontendPort = SubResource & {
  /**
   * Name of the frontend port that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Frontend port.
   */
  port?: number;
  /**
   * The provisioning state of the frontend port resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Probe of the application gateway.
 */
export type ApplicationGatewayProbe = SubResource & {
  /**
   * Name of the probe that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * The protocol used for the probe.
   */
  protocol?: ApplicationGatewayProtocol;
  /**
   * Host name to send the probe to.
   */
  host?: string;
  /**
   * Relative path of probe. Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>.
   */
  path?: string;
  /**
   * The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1 second to 86400 seconds.
   */
  interval?: number;
  /**
   * The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
   */
  timeout?: number;
  /**
   * The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second to 20.
   */
  unhealthyThreshold?: number;
  /**
   * Whether the host header should be picked from the backend http settings. Default value is false.
   */
  pickHostNameFromBackendHttpSettings?: boolean;
  /**
   * Minimum number of servers that are always marked healthy. Default value is 0.
   */
  minServers?: number;
  /**
   * Criterion for classifying a healthy probe response.
   */
  match?: ApplicationGatewayProbeHealthResponseMatch;
  /**
   * The provisioning state of the probe resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Custom port which will be used for probing the backend servers. The valid value ranges from 1 to 65535. In case not set, port from http settings will be used. This property is valid for Standard_v2 and WAF_v2 only.
   */
  port?: number;
};

/**
 * Tap configuration in a Network Interface.
 */
export type NetworkInterfaceTapConfiguration = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Sub Resource type.
   */
  readonly type?: string;
  /**
   * The reference to the Virtual Network Tap resource.
   */
  virtualNetworkTap?: VirtualNetworkTap;
  /**
   * The provisioning state of the network interface tap configuration resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Network security rule.
 */
export type SecurityRule = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * A description for this rule. Restricted to 140 chars.
   */
  description?: string;
  /**
   * Network protocol this rule applies to.
   */
  protocol?: SecurityRuleProtocol;
  /**
   * The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
   */
  sourcePortRange?: string;
  /**
   * The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
   */
  destinationPortRange?: string;
  /**
   * The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from.
   */
  sourceAddressPrefix?: string;
  /**
   * The CIDR or source IP ranges.
   */
  sourceAddressPrefixes?: string[];
  /**
   * The application security group specified as source.
   */
  sourceApplicationSecurityGroups?: ApplicationSecurityGroup[];
  /**
   * The destination address prefix. CIDR or destination IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.
   */
  destinationAddressPrefix?: string;
  /**
   * The destination address prefixes. CIDR or destination IP ranges.
   */
  destinationAddressPrefixes?: string[];
  /**
   * The application security group specified as destination.
   */
  destinationApplicationSecurityGroups?: ApplicationSecurityGroup[];
  /**
   * The source port ranges.
   */
  sourcePortRanges?: string[];
  /**
   * The destination port ranges.
   */
  destinationPortRanges?: string[];
  /**
   * The network traffic is allowed or denied.
   */
  access?: SecurityRuleAccess;
  /**
   * The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
   */
  priority?: number;
  /**
   * The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
   */
  direction?: SecurityRuleDirection;
  /**
   * The provisioning state of the security rule resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * PrivateLinkServiceConnection resource.
 */
export type PrivateLinkServiceConnection = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * The resource type.
   */
  readonly type?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The provisioning state of the private link service connection resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The resource id of private link service.
   */
  privateLinkServiceId?: string;
  /**
   * The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to.
   */
  groupIds?: string[];
  /**
   * A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars.
   */
  requestMessage?: string;
  /**
   * A collection of read-only information about the state of the connection to the remote resource.
   */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
};

/**
 * Route resource.
 */
export type Route = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The destination CIDR to which the route applies.
   */
  addressPrefix?: string;
  /**
   * The type of Azure hop the packet should be sent to.
   */
  nextHopType?: RouteNextHopType;
  /**
   * The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
   */
  nextHopIpAddress?: string;
  /**
   * The provisioning state of the route resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Service Endpoint policy definitions.
 */
export type ServiceEndpointPolicyDefinition = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * A description for this rule. Restricted to 140 chars.
   */
  description?: string;
  /**
   * Service endpoint name.
   */
  service?: string;
  /**
   * A list of service resources.
   */
  serviceResources?: string[];
  /**
   * The provisioning state of the service endpoint policy definition resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * IP configuration.
 */
export type IPConfiguration = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The private IP address of the IP configuration.
   */
  privateIPAddress?: string;
  /**
   * The private IP address allocation method.
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * The reference to the subnet resource.
   */
  subnet?: Subnet;
  /**
   * The reference to the public IP resource.
   */
  publicIPAddress?: PublicIPAddress;
  /**
   * The provisioning state of the IP configuration resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * IP configuration profile child resource.
 */
export type IPConfigurationProfile = SubResource & {
  /**
   * The name of the resource. This name can be used to access the resource.
   */
  name?: string;
  /**
   * Sub Resource type.
   */
  readonly type?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The reference to the subnet resource to create a container network interface ip configuration.
   */
  subnet?: Subnet;
  /**
   * The provisioning state of the IP configuration profile resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * ResourceNavigationLink resource.
 */
export type ResourceNavigationLink = SubResource & {
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
  /**
   * Resource type of the linked resource.
   */
  linkedResourceType?: string;
  /**
   * Link to the external resource.
   */
  link?: string;
  /**
   * The provisioning state of the resource navigation link resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * ServiceAssociationLink resource.
 */
export type ServiceAssociationLink = SubResource & {
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
  /**
   * Resource type of the linked resource.
   */
  linkedResourceType?: string;
  /**
   * Link to the external resource.
   */
  link?: string;
  /**
   * The provisioning state of the service association link resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * If true, the resource can be deleted.
   */
  allowDelete?: boolean;
  /**
   * A list of locations.
   */
  locations?: string[];
};

/**
 * Details the service to which the subnet is delegated.
 */
export type Delegation = SubResource & {
  /**
   * The name of the resource that is unique within a subnet. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The name of the service to whom the subnet should be delegated (e.g. Microsoft.Sql/servers).
   */
  serviceName?: string;
  /**
   * The actions permitted to the service upon delegation.
   */
  readonly actions?: string[];
  /**
   * The provisioning state of the service delegation resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Subnet in a virtual network resource.
 */
export type Subnet = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The address prefix for the subnet.
   */
  addressPrefix?: string;
  /**
   * List of address prefixes for the subnet.
   */
  addressPrefixes?: string[];
  /**
   * The reference to the NetworkSecurityGroup resource.
   */
  networkSecurityGroup?: NetworkSecurityGroup;
  /**
   * The reference to the RouteTable resource.
   */
  routeTable?: RouteTable;
  /**
   * Nat gateway associated with this subnet.
   */
  natGateway?: SubResource;
  /**
   * An array of service endpoints.
   */
  serviceEndpoints?: ServiceEndpointPropertiesFormat[];
  /**
   * An array of service endpoint policies.
   */
  serviceEndpointPolicies?: ServiceEndpointPolicy[];
  /**
   * An array of references to private endpoints.
   */
  readonly privateEndpoints?: PrivateEndpoint[];
  /**
   * An array of references to the network interface IP configurations using subnet.
   */
  readonly ipConfigurations?: IPConfiguration[];
  /**
   * Array of IP configuration profiles which reference this subnet.
   */
  readonly ipConfigurationProfiles?: IPConfigurationProfile[];
  /**
   * Array of IpAllocation which reference this subnet.
   */
  ipAllocations?: SubResource[];
  /**
   * An array of references to the external resources using subnet.
   */
  readonly resourceNavigationLinks?: ResourceNavigationLink[];
  /**
   * An array of references to services injecting into this subnet.
   */
  readonly serviceAssociationLinks?: ServiceAssociationLink[];
  /**
   * An array of references to the delegations on the subnet.
   */
  delegations?: Delegation[];
  /**
   * A read-only string identifying the intention of use for this subnet based on delegations and other user-defined properties.
   */
  readonly purpose?: string;
  /**
   * The provisioning state of the subnet resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Enable or Disable apply network policies on private end point in the subnet.
   */
  privateEndpointNetworkPolicies?: string;
  /**
   * Enable or Disable apply network policies on private link service in the subnet.
   */
  privateLinkServiceNetworkPolicies?: string;
};

/**
 * Frontend IP address of the load balancer.
 */
export type FrontendIPConfiguration = SubResource & {
  /**
   * The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * A list of availability zones denoting the IP allocated for the resource needs to come from.
   */
  zones?: string[];
  /**
   * An array of references to inbound rules that use this frontend IP.
   */
  readonly inboundNatRules?: SubResource[];
  /**
   * An array of references to inbound pools that use this frontend IP.
   */
  readonly inboundNatPools?: SubResource[];
  /**
   * An array of references to outbound rules that use this frontend IP.
   */
  readonly outboundRules?: SubResource[];
  /**
   * An array of references to load balancing rules that use this frontend IP.
   */
  readonly loadBalancingRules?: SubResource[];
  /**
   * The private IP address of the IP configuration.
   */
  privateIPAddress?: string;
  /**
   * The Private IP allocation method.
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * Whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.
   */
  privateIPAddressVersion?: IPVersion;
  /**
   * The reference to the subnet resource.
   */
  subnet?: Subnet;
  /**
   * The reference to the Public IP resource.
   */
  publicIPAddress?: PublicIPAddress;
  /**
   * The reference to the Public IP Prefix resource.
   */
  publicIPPrefix?: SubResource;
  /**
   * The provisioning state of the frontend IP configuration resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Peerings in a virtual network resource.
 */
export type VirtualNetworkPeering = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
   */
  allowVirtualNetworkAccess?: boolean;
  /**
   * Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
   */
  allowForwardedTraffic?: boolean;
  /**
   * If gateway links can be used in remote virtual networking to link to this virtual network.
   */
  allowGatewayTransit?: boolean;
  /**
   * If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
   */
  useRemoteGateways?: boolean;
  /**
   * The reference to the remote virtual network. The remote virtual network can be in the same or different region (preview). See here to register for the preview and learn more (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
   */
  remoteVirtualNetwork?: SubResource;
  /**
   * The reference to the remote virtual network address space.
   */
  remoteAddressSpace?: AddressSpace;
  /**
   * The status of the virtual network peering.
   */
  peeringState?: VirtualNetworkPeeringState;
  /**
   * The provisioning state of the virtual network peering resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Pool of backend IP addresses.
 */
export type BackendAddressPool = SubResource & {
  /**
   * The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * An array of references to IP addresses defined in network interfaces.
   */
  readonly backendIPConfigurations?: NetworkInterfaceIPConfiguration[];
  /**
   * An array of backend addresses.
   */
  loadBalancerBackendAddresses?: LoadBalancerBackendAddress[];
  /**
   * An array of references to load balancing rules that use this backend address pool.
   */
  readonly loadBalancingRules?: SubResource[];
  /**
   * A reference to an outbound rule that uses this backend address pool.
   */
  readonly outboundRule?: SubResource;
  /**
   * An array of references to outbound rules that use this backend address pool.
   */
  readonly outboundRules?: SubResource[];
  /**
   * The provisioning state of the backend address pool resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Inbound NAT rule of the load balancer.
 */
export type InboundNatRule = SubResource & {
  /**
   * The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * A reference to frontend IP addresses.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * A reference to a private IP address defined on a network interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations is forwarded to the backend IP.
   */
  readonly backendIPConfiguration?: NetworkInterfaceIPConfiguration;
  /**
   * The reference to the transport protocol used by the load balancing rule.
   */
  protocol?: TransportProtocol;
  /**
   * The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.
   */
  frontendPort?: number;
  /**
   * The port used for the internal endpoint. Acceptable values range from 1 to 65535.
   */
  backendPort?: number;
  /**
   * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
   */
  idleTimeoutInMinutes?: number;
  /**
   * Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
   */
  enableFloatingIP?: boolean;
  /**
   * Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
   */
  enableTcpReset?: boolean;
  /**
   * The provisioning state of the inbound NAT rule resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * IPConfiguration in a network interface.
 */
export type NetworkInterfaceIPConfiguration = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The reference to Virtual Network Taps.
   */
  virtualNetworkTaps?: VirtualNetworkTap[];
  /**
   * The reference to ApplicationGatewayBackendAddressPool resource.
   */
  applicationGatewayBackendAddressPools?: ApplicationGatewayBackendAddressPool[];
  /**
   * The reference to LoadBalancerBackendAddressPool resource.
   */
  loadBalancerBackendAddressPools?: BackendAddressPool[];
  /**
   * A list of references of LoadBalancerInboundNatRules.
   */
  loadBalancerInboundNatRules?: InboundNatRule[];
  /**
   * Private IP address of the IP configuration.
   */
  privateIPAddress?: string;
  /**
   * The private IP address allocation method.
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
   */
  privateIPAddressVersion?: IPVersion;
  /**
   * Subnet bound to the IP configuration.
   */
  subnet?: Subnet;
  /**
   * Whether this is a primary customer address on the network interface.
   */
  primary?: boolean;
  /**
   * Public IP address bound to the IP configuration.
   */
  publicIPAddress?: PublicIPAddress;
  /**
   * Application security groups in which the IP configuration is included.
   */
  applicationSecurityGroups?: ApplicationSecurityGroup[];
  /**
   * The provisioning state of the network interface IP configuration.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * PrivateLinkConnection properties for the network interface.
   */
  readonly privateLinkConnectionProperties?: NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties;
};

/**
 * Backend Address Pool of an application gateway.
 */
export type ApplicationGatewayBackendAddressPool = SubResource & {
  /**
   * Name of the backend address pool that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Collection of references to IPs defined in network interfaces.
   */
  readonly backendIPConfigurations?: NetworkInterfaceIPConfiguration[];
  /**
   * Backend addresses.
   */
  backendAddresses?: ApplicationGatewayBackendAddress[];
  /**
   * The provisioning state of the backend address pool resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Backend address pool settings of an application gateway.
 */
export type ApplicationGatewayBackendHttpSettings = SubResource & {
  /**
   * Name of the backend http settings that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * The destination port on the backend.
   */
  port?: number;
  /**
   * The protocol used to communicate with the backend.
   */
  protocol?: ApplicationGatewayProtocol;
  /**
   * Cookie based affinity.
   */
  cookieBasedAffinity?: ApplicationGatewayCookieBasedAffinity;
  /**
   * Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
   */
  requestTimeout?: number;
  /**
   * Probe resource of an application gateway.
   */
  probe?: SubResource;
  /**
   * Array of references to application gateway authentication certificates.
   */
  authenticationCertificates?: SubResource[];
  /**
   * Array of references to application gateway trusted root certificates.
   */
  trustedRootCertificates?: SubResource[];
  /**
   * Connection draining of the backend http settings resource.
   */
  connectionDraining?: ApplicationGatewayConnectionDraining;
  /**
   * Host header to be sent to the backend servers.
   */
  hostName?: string;
  /**
   * Whether to pick host header should be picked from the host name of the backend server. Default value is false.
   */
  pickHostNameFromBackendAddress?: boolean;
  /**
   * Cookie name to use for the affinity cookie.
   */
  affinityCookieName?: string;
  /**
   * Whether the probe is enabled. Default value is false.
   */
  probeEnabled?: boolean;
  /**
   * Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
   */
  path?: string;
  /**
   * The provisioning state of the backend HTTP settings resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Http listener of an application gateway.
 */
export type ApplicationGatewayHttpListener = SubResource & {
  /**
   * Name of the HTTP listener that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Frontend IP configuration resource of an application gateway.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * Frontend port resource of an application gateway.
   */
  frontendPort?: SubResource;
  /**
   * Protocol of the HTTP listener.
   */
  protocol?: ApplicationGatewayProtocol;
  /**
   * Host name of HTTP listener.
   */
  hostName?: string;
  /**
   * SSL certificate resource of an application gateway.
   */
  sslCertificate?: SubResource;
  /**
   * Applicable only if protocol is https. Enables SNI for multi-hosting.
   */
  requireServerNameIndication?: boolean;
  /**
   * The provisioning state of the HTTP listener resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Custom error configurations of the HTTP listener.
   */
  customErrorConfigurations?: ApplicationGatewayCustomError[];
  /**
   * Reference to the FirewallPolicy resource.
   */
  firewallPolicy?: SubResource;
  /**
   * List of Host names for HTTP Listener that allows special wildcard characters as well.
   */
  hostNames?: string[];
};

/**
 * Path rule of URL path map of an application gateway.
 */
export type ApplicationGatewayPathRule = SubResource & {
  /**
   * Name of the path rule that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Path rules of URL path map.
   */
  paths?: string[];
  /**
   * Backend address pool resource of URL path map path rule.
   */
  backendAddressPool?: SubResource;
  /**
   * Backend http settings resource of URL path map path rule.
   */
  backendHttpSettings?: SubResource;
  /**
   * Redirect configuration resource of URL path map path rule.
   */
  redirectConfiguration?: SubResource;
  /**
   * Rewrite rule set resource of URL path map path rule.
   */
  rewriteRuleSet?: SubResource;
  /**
   * The provisioning state of the path rule resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Reference to the FirewallPolicy resource.
   */
  firewallPolicy?: SubResource;
};

/**
 * UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.
 */
export type ApplicationGatewayUrlPathMap = SubResource & {
  /**
   * Name of the URL path map that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Default backend address pool resource of URL path map.
   */
  defaultBackendAddressPool?: SubResource;
  /**
   * Default backend http settings resource of URL path map.
   */
  defaultBackendHttpSettings?: SubResource;
  /**
   * Default Rewrite rule set resource of URL path map.
   */
  defaultRewriteRuleSet?: SubResource;
  /**
   * Default redirect configuration resource of URL path map.
   */
  defaultRedirectConfiguration?: SubResource;
  /**
   * Path rule of URL path map resource.
   */
  pathRules?: ApplicationGatewayPathRule[];
  /**
   * The provisioning state of the URL path map resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Request routing rule of an application gateway.
 */
export type ApplicationGatewayRequestRoutingRule = SubResource & {
  /**
   * Name of the request routing rule that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Rule type.
   */
  ruleType?: ApplicationGatewayRequestRoutingRuleType;
  /**
   * Priority of the request routing rule.
   */
  priority?: number;
  /**
   * Backend address pool resource of the application gateway.
   */
  backendAddressPool?: SubResource;
  /**
   * Backend http settings resource of the application gateway.
   */
  backendHttpSettings?: SubResource;
  /**
   * Http listener resource of the application gateway.
   */
  httpListener?: SubResource;
  /**
   * URL path map resource of the application gateway.
   */
  urlPathMap?: SubResource;
  /**
   * Rewrite Rule Set resource in Basic rule of the application gateway.
   */
  rewriteRuleSet?: SubResource;
  /**
   * Redirect configuration resource of the application gateway.
   */
  redirectConfiguration?: SubResource;
  /**
   * The provisioning state of the request routing rule resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Rewrite rule set of an application gateway.
 */
export type ApplicationGatewayRewriteRuleSet = SubResource & {
  /**
   * Name of the rewrite rule set that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Rewrite rules in the rewrite rule set.
   */
  rewriteRules?: ApplicationGatewayRewriteRule[];
  /**
   * The provisioning state of the rewrite rule set resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Redirect configuration of an application gateway.
 */
export type ApplicationGatewayRedirectConfiguration = SubResource & {
  /**
   * Name of the redirect configuration that is unique within an Application Gateway.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * HTTP redirection type.
   */
  redirectType?: ApplicationGatewayRedirectType;
  /**
   * Reference to a listener to redirect the request to.
   */
  targetListener?: SubResource;
  /**
   * Url to redirect the request to.
   */
  targetUrl?: string;
  /**
   * Include path in the redirected url.
   */
  includePath?: boolean;
  /**
   * Include query string in the redirected url.
   */
  includeQueryString?: boolean;
  /**
   * Request routing specifying redirect configuration.
   */
  requestRoutingRules?: SubResource[];
  /**
   * Url path maps specifying default redirect configuration.
   */
  urlPathMaps?: SubResource[];
  /**
   * Path rules specifying redirect configuration.
   */
  pathRules?: SubResource[];
};

/**
 * An Ssl predefined policy.
 */
export type ApplicationGatewaySslPredefinedPolicy = SubResource & {
  /**
   * Name of the Ssl predefined policy.
   */
  name?: string;
  /**
   * Ssl cipher suites to be enabled in the specified order for application gateway.
   */
  cipherSuites?: ApplicationGatewaySslCipherSuite[];
  /**
   * Minimum version of Ssl protocol to be supported on application gateway.
   */
  minProtocolVersion?: ApplicationGatewaySslProtocol;
};

/**
 * Application rule collection resource.
 */
export type AzureFirewallApplicationRuleCollection = SubResource & {
  /**
   * The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Priority of the application rule collection resource.
   */
  priority?: number;
  /**
   * The action type of a rule collection.
   */
  action?: AzureFirewallRCAction;
  /**
   * Collection of rules used by a application rule collection.
   */
  rules?: AzureFirewallApplicationRule[];
  /**
   * The provisioning state of the application rule collection resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * NAT rule collection resource.
 */
export type AzureFirewallNatRuleCollection = SubResource & {
  /**
   * The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Priority of the NAT rule collection resource.
   */
  priority?: number;
  /**
   * The action type of a NAT rule collection.
   */
  action?: AzureFirewallNatRCAction;
  /**
   * Collection of rules used by a NAT rule collection.
   */
  rules?: AzureFirewallNatRule[];
  /**
   * The provisioning state of the NAT rule collection resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Network rule collection resource.
 */
export type AzureFirewallNetworkRuleCollection = SubResource & {
  /**
   * The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Priority of the network rule collection resource.
   */
  priority?: number;
  /**
   * The action type of a rule collection.
   */
  action?: AzureFirewallRCAction;
  /**
   * Collection of rules used by a network rule collection.
   */
  rules?: AzureFirewallNetworkRule[];
  /**
   * The provisioning state of the network rule collection resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * IP configuration of an Azure Firewall.
 */
export type AzureFirewallIPConfiguration = SubResource & {
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * The Firewall Internal Load Balancer IP to be used as the next hop in User Defined Routes.
   */
  readonly privateIPAddress?: string;
  /**
   * Reference to the subnet resource. This resource must be named 'AzureFirewallSubnet' or 'AzureFirewallManagementSubnet'.
   */
  subnet?: SubResource;
  /**
   * Reference to the PublicIP resource. This field is a mandatory input if subnet is not null.
   */
  publicIPAddress?: SubResource;
  /**
   * The provisioning state of the Azure firewall IP configuration resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * IP configuration of an Bastion Host.
 */
export type BastionHostIPConfiguration = SubResource & {
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Ip configuration type.
   */
  readonly type?: string;
  /**
   * Reference of the subnet resource.
   */
  subnet?: SubResource;
  /**
   * Reference of the PublicIP resource.
   */
  publicIPAddress?: SubResource;
  /**
   * The provisioning state of the bastion host IP configuration resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Private IP allocation method.
   */
  privateIPAllocationMethod?: IPAllocationMethod;
};

/**
 * Endpoint service.
 */
export type EndpointServiceResult = SubResource & {
  /**
   * Name of the endpoint service.
   */
  readonly name?: string;
  /**
   * Type of the endpoint service.
   */
  readonly type?: string;
};

/**
 * Authorization in an ExpressRouteCircuit resource.
 */
export type ExpressRouteCircuitAuthorization = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * The authorization key.
   */
  authorizationKey?: string;
  /**
   * The authorization use status.
   */
  authorizationUseStatus?: AuthorizationUseStatus;
  /**
   * The provisioning state of the authorization resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
 */
export type ExpressRouteCircuitConnection = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Reference to Express Route Circuit Private Peering Resource of the circuit initiating connection.
   */
  expressRouteCircuitPeering?: SubResource;
  /**
   * Reference to Express Route Circuit Private Peering Resource of the peered circuit.
   */
  peerExpressRouteCircuitPeering?: SubResource;
  /**
   * /29 IP address space to carve out Customer addresses for tunnels.
   */
  addressPrefix?: string;
  /**
   * The authorization key.
   */
  authorizationKey?: string;
  /**
   * IPv6 Address PrefixProperties of the express route circuit connection.
   */
  ipv6CircuitConnectionConfig?: Ipv6CircuitConnectionConfig;
  /**
   * Express Route Circuit connection state.
   */
  readonly circuitConnectionStatus?: CircuitConnectionStatus;
  /**
   * The provisioning state of the express route circuit connection resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Peer Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
 */
export type PeerExpressRouteCircuitConnection = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Reference to Express Route Circuit Private Peering Resource of the circuit.
   */
  expressRouteCircuitPeering?: SubResource;
  /**
   * Reference to Express Route Circuit Private Peering Resource of the peered circuit.
   */
  peerExpressRouteCircuitPeering?: SubResource;
  /**
   * /29 IP address space to carve out Customer addresses for tunnels.
   */
  addressPrefix?: string;
  /**
   * Express Route Circuit connection state.
   */
  readonly circuitConnectionStatus?: CircuitConnectionStatus;
  /**
   * The name of the express route circuit connection resource.
   */
  connectionName?: string;
  /**
   * The resource guid of the authorization used for the express route circuit connection.
   */
  authResourceGuid?: string;
  /**
   * The provisioning state of the peer express route circuit connection resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Peering in an ExpressRouteCircuit resource.
 */
export type ExpressRouteCircuitPeering = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * The peering type.
   */
  peeringType?: ExpressRoutePeeringType;
  /**
   * The peering state.
   */
  state?: ExpressRoutePeeringState;
  /**
   * The Azure ASN.
   */
  azureASN?: number;
  /**
   * The peer ASN.
   */
  peerASN?: number;
  /**
   * The primary address prefix.
   */
  primaryPeerAddressPrefix?: string;
  /**
   * The secondary address prefix.
   */
  secondaryPeerAddressPrefix?: string;
  /**
   * The primary port.
   */
  primaryAzurePort?: string;
  /**
   * The secondary port.
   */
  secondaryAzurePort?: string;
  /**
   * The shared key.
   */
  sharedKey?: string;
  /**
   * The VLAN ID.
   */
  vlanId?: number;
  /**
   * The Microsoft peering configuration.
   */
  microsoftPeeringConfig?: ExpressRouteCircuitPeeringConfig;
  /**
   * The peering stats of express route circuit.
   */
  stats?: ExpressRouteCircuitStats;
  /**
   * The provisioning state of the express route circuit peering resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The GatewayManager Etag.
   */
  gatewayManagerEtag?: string;
  /**
   * Who was the last to modify the peering.
   */
  readonly lastModifiedBy?: string;
  /**
   * The reference to the RouteFilter resource.
   */
  routeFilter?: SubResource;
  /**
   * The IPv6 peering configuration.
   */
  ipv6PeeringConfig?: Ipv6ExpressRouteCircuitPeeringConfig;
  /**
   * The ExpressRoute connection.
   */
  expressRouteConnection?: ExpressRouteConnectionId;
  /**
   * The list of circuit connections associated with Azure Private Peering for this circuit.
   */
  connections?: ExpressRouteCircuitConnection[];
  /**
   * The list of peered circuit connections associated with Azure Private Peering for this circuit.
   */
  readonly peeredConnections?: PeerExpressRouteCircuitConnection[];
};

/**
 * Peering in an ExpressRoute Cross Connection resource.
 */
export type ExpressRouteCrossConnectionPeering = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The peering type.
   */
  peeringType?: ExpressRoutePeeringType;
  /**
   * The peering state.
   */
  state?: ExpressRoutePeeringState;
  /**
   * The Azure ASN.
   */
  readonly azureASN?: number;
  /**
   * The peer ASN.
   */
  peerASN?: number;
  /**
   * The primary address prefix.
   */
  primaryPeerAddressPrefix?: string;
  /**
   * The secondary address prefix.
   */
  secondaryPeerAddressPrefix?: string;
  /**
   * The primary port.
   */
  readonly primaryAzurePort?: string;
  /**
   * The secondary port.
   */
  readonly secondaryAzurePort?: string;
  /**
   * The shared key.
   */
  sharedKey?: string;
  /**
   * The VLAN ID.
   */
  vlanId?: number;
  /**
   * The Microsoft peering configuration.
   */
  microsoftPeeringConfig?: ExpressRouteCircuitPeeringConfig;
  /**
   * The provisioning state of the express route cross connection peering resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The GatewayManager Etag.
   */
  gatewayManagerEtag?: string;
  /**
   * Who was the last to modify the peering.
   */
  readonly lastModifiedBy?: string;
  /**
   * The IPv6 peering configuration.
   */
  ipv6PeeringConfig?: Ipv6ExpressRouteCircuitPeeringConfig;
};

/**
 * ExpressRouteLink child resource definition.
 */
export type ExpressRouteLink = SubResource & {
  /**
   * Name of child port resource that is unique among child port resources of the parent.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Name of Azure router associated with physical port.
   */
  readonly routerName?: string;
  /**
   * Name of Azure router interface.
   */
  readonly interfaceName?: string;
  /**
   * Mapping between physical port to patch panel port.
   */
  readonly patchPanelId?: string;
  /**
   * Mapping of physical patch panel to rack.
   */
  readonly rackId?: string;
  /**
   * Physical fiber port type.
   */
  readonly connectorType?: ExpressRouteLinkConnectorType;
  /**
   * Administrative state of the physical port.
   */
  adminState?: ExpressRouteLinkAdminState;
  /**
   * The provisioning state of the express route link resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * MacSec configuration.
   */
  macSecConfig?: ExpressRouteLinkMacSecConfig;
};

/**
 * Rule Group resource.
 */
export type FirewallPolicyRuleGroup = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Rule Group type.
   */
  readonly type?: string;
  /**
   * Priority of the Firewall Policy Rule Group resource.
   */
  priority?: number;
  /**
   * Group of Firewall Policy rules.
   */
  rules?: FirewallPolicyRuleUnion[];
  /**
   * The provisioning state of the firewall policy rule group resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * A load balancing rule for a load balancer.
 */
export type LoadBalancingRule = SubResource & {
  /**
   * The name of the resource that is unique within the set of load balancing rules used by the load balancer. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * A reference to frontend IP addresses.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs.
   */
  backendAddressPool?: SubResource;
  /**
   * The reference to the load balancer probe used by the load balancing rule.
   */
  probe?: SubResource;
  /**
   * The reference to the transport protocol used by the load balancing rule.
   */
  protocol?: TransportProtocol;
  /**
   * The load distribution policy for this rule.
   */
  loadDistribution?: LoadDistribution;
  /**
   * The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 0 and 65534. Note that value 0 enables "Any Port".
   */
  frontendPort?: number;
  /**
   * The port used for internal connections on the endpoint. Acceptable values are between 0 and 65535. Note that value 0 enables "Any Port".
   */
  backendPort?: number;
  /**
   * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
   */
  idleTimeoutInMinutes?: number;
  /**
   * Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
   */
  enableFloatingIP?: boolean;
  /**
   * Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
   */
  enableTcpReset?: boolean;
  /**
   * Configures SNAT for the VMs in the backend pool to use the publicIP address specified in the frontend of the load balancing rule.
   */
  disableOutboundSnat?: boolean;
  /**
   * The provisioning state of the load balancing rule resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * A load balancer probe.
 */
export type Probe = SubResource & {
  /**
   * The name of the resource that is unique within the set of probes used by the load balancer. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * The load balancer rules that use this probe.
   */
  readonly loadBalancingRules?: SubResource[];
  /**
   * The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
   */
  protocol?: ProbeProtocol;
  /**
   * The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
   */
  port?: number;
  /**
   * The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.
   */
  intervalInSeconds?: number;
  /**
   * The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.
   */
  numberOfProbes?: number;
  /**
   * The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
   */
  requestPath?: string;
  /**
   * The provisioning state of the probe resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Inbound NAT pool of the load balancer.
 */
export type InboundNatPool = SubResource & {
  /**
   * The name of the resource that is unique within the set of inbound NAT pools used by the load balancer. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * A reference to frontend IP addresses.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * The reference to the transport protocol used by the inbound NAT pool.
   */
  protocol?: TransportProtocol;
  /**
   * The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65534.
   */
  frontendPortRangeStart?: number;
  /**
   * The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65535.
   */
  frontendPortRangeEnd?: number;
  /**
   * The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
   */
  backendPort?: number;
  /**
   * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
   */
  idleTimeoutInMinutes?: number;
  /**
   * Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
   */
  enableFloatingIP?: boolean;
  /**
   * Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
   */
  enableTcpReset?: boolean;
  /**
   * The provisioning state of the inbound NAT pool resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Outbound rule of the load balancer.
 */
export type OutboundRule = SubResource & {
  /**
   * The name of the resource that is unique within the set of outbound rules used by the load balancer. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * The number of outbound ports to be used for NAT.
   */
  allocatedOutboundPorts?: number;
  /**
   * The Frontend IP addresses of the load balancer.
   */
  frontendIPConfigurations?: SubResource[];
  /**
   * A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs.
   */
  backendAddressPool?: SubResource;
  /**
   * The provisioning state of the outbound rule resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The protocol for the outbound rule in load balancer.
   */
  protocol?: LoadBalancerOutboundRuleProtocol;
  /**
   * Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
   */
  enableTcpReset?: boolean;
  /**
   * The timeout for the TCP idle connection.
   */
  idleTimeoutInMinutes?: number;
};

/**
 * Container network interface configuration child resource.
 */
export type ContainerNetworkInterfaceConfiguration = SubResource & {
  /**
   * The name of the resource. This name can be used to access the resource.
   */
  name?: string;
  /**
   * Sub Resource type.
   */
  readonly type?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * A list of ip configurations of the container network interface configuration.
   */
  ipConfigurations?: IPConfigurationProfile[];
  /**
   * A list of container network interfaces created from this container network interface configuration.
   */
  containerNetworkInterfaces?: SubResource[];
  /**
   * The provisioning state of the container network interface configuration resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Container network interface child resource.
 */
export type ContainerNetworkInterface = SubResource & {
  /**
   * The name of the resource. This name can be used to access the resource.
   */
  name?: string;
  /**
   * Sub Resource type.
   */
  readonly type?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Container network interface configuration from which this container network interface is created.
   */
  readonly containerNetworkInterfaceConfiguration?: ContainerNetworkInterfaceConfiguration;
  /**
   * Reference to the container to which this container network interface is attached.
   */
  container?: SubResource;
  /**
   * Reference to the ip configuration on this container nic.
   */
  readonly ipConfigurations?: ContainerNetworkInterfaceIpConfiguration[];
  /**
   * The provisioning state of the container network interface resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Private dns zone group resource.
 */
export type PrivateDnsZoneGroup = SubResource & {
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The provisioning state of the private dns zone group resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * A collection of private dns zone configurations of the private dns zone group.
   */
  privateDnsZoneConfigs?: PrivateDnsZoneConfig[];
};

/**
 * The private link service ip configuration.
 */
export type PrivateLinkServiceIpConfiguration = SubResource & {
  /**
   * The name of private link service ip configuration.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The resource type.
   */
  readonly type?: string;
  /**
   * The private IP address of the IP configuration.
   */
  privateIPAddress?: string;
  /**
   * The private IP address allocation method.
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * The reference to the subnet resource.
   */
  subnet?: Subnet;
  /**
   * Whether the ip configuration is primary or not.
   */
  primary?: boolean;
  /**
   * The provisioning state of the private link service IP configuration resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
   */
  privateIPAddressVersion?: IPVersion;
};

/**
 * PrivateEndpointConnection resource.
 */
export type PrivateEndpointConnection = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * The resource type.
   */
  readonly type?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The resource of private end point.
   */
  readonly privateEndpoint?: PrivateEndpoint;
  /**
   * A collection of information about the state of the connection between service consumer and provider.
   */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of the private endpoint connection resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The consumer link id.
   */
  readonly linkIdentifier?: string;
};

/**
 * Route Filter Rule Resource.
 */
export type RouteFilterRule = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The access type of the rule.
   */
  access?: Access;
  /**
   * The rule type of the rule.
   */
  routeFilterRuleType?: RouteFilterRuleType;
  /**
   * The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020'].
   */
  communities?: string[];
  /**
   * The provisioning state of the route filter rule resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * IP configuration for virtual network gateway.
 */
export type VirtualNetworkGatewayIPConfiguration = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The private IP address allocation method.
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * The reference to the subnet resource.
   */
  subnet?: SubResource;
  /**
   * The reference to the public IP resource.
   */
  publicIPAddress?: SubResource;
  /**
   * Private IP Address for this gateway.
   */
  readonly privateIPAddress?: string;
  /**
   * The provisioning state of the virtual network gateway IP configuration resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * VPN client root certificate of virtual network gateway.
 */
export type VpnClientRootCertificate = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The certificate public data.
   */
  publicCertData: string;
  /**
   * The provisioning state of the VPN client root certificate resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * VPN client revoked certificate of virtual network gateway.
 */
export type VpnClientRevokedCertificate = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The revoked VPN client certificate thumbprint.
   */
  thumbprint?: string;
  /**
   * The provisioning state of the VPN client revoked certificate resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Response for GetConnectionSharedKey API service call.
 */
export type ConnectionSharedKey = SubResource & {
  /**
   * The virtual network connection shared key value.
   */
  value: string;
};

/**
 * Virtual Router Peering resource.
 */
export type VirtualRouterPeering = SubResource & {
  /**
   * Name of the virtual router peering that is unique within a virtual router.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Peering type.
   */
  readonly type?: string;
  /**
   * Peer ASN.
   */
  peerAsn?: number;
  /**
   * Peer IP.
   */
  peerIp?: string;
  /**
   * The provisioning state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * VpnSiteLink Resource.
 */
export type VpnSiteLink = SubResource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
  /**
   * The link provider properties.
   */
  linkProperties?: VpnLinkProviderProperties;
  /**
   * The ip-address for the vpn-site-link.
   */
  ipAddress?: string;
  /**
   * FQDN of vpn-site-link.
   */
  fqdn?: string;
  /**
   * The set of bgp properties.
   */
  bgpProperties?: VpnLinkBgpSettings;
  /**
   * The provisioning state of the VPN site link resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * P2SConnectionConfiguration Resource.
 */
export type P2SConnectionConfiguration = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The reference to the address space resource which represents Address space for P2S VpnClient.
   */
  vpnClientAddressPool?: AddressSpace;
  /**
   * The Routing Configuration indicating the associated and propagated route tables on this connection.
   */
  routingConfiguration?: RoutingConfiguration;
  /**
   * The provisioning state of the P2SConnectionConfiguration resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * HubVirtualNetworkConnection Resource.
 */
export type HubVirtualNetworkConnection = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Reference to the remote virtual network.
   */
  remoteVirtualNetwork?: SubResource;
  /**
   * VirtualHub to RemoteVnet transit to enabled or not.
   */
  allowHubToRemoteVnetTransit?: boolean;
  /**
   * Allow RemoteVnet to use Virtual Hub's gateways.
   */
  allowRemoteVnetToUseHubVnetGateways?: boolean;
  /**
   * Enable internet security.
   */
  enableInternetSecurity?: boolean;
  /**
   * The Routing Configuration indicating the associated and propagated route tables on this connection.
   */
  routingConfiguration?: RoutingConfiguration;
  /**
   * The provisioning state of the hub virtual network connection resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * VirtualHubRouteTableV2 Resource.
 */
export type VirtualHubRouteTableV2 = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * List of all routes.
   */
  routes?: VirtualHubRouteV2[];
  /**
   * List of all connections attached to this route table v2.
   */
  attachedConnections?: string[];
  /**
   * The provisioning state of the virtual hub route table v2 resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * VpnSiteLinkConnection Resource.
 */
export type VpnSiteLinkConnection = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
  /**
   * Id of the connected vpn site link.
   */
  vpnSiteLink?: SubResource;
  /**
   * Routing weight for vpn connection.
   */
  routingWeight?: number;
  /**
   * The connection status.
   */
  readonly connectionStatus?: VpnConnectionStatus;
  /**
   * Connection protocol used for this connection.
   */
  vpnConnectionProtocolType?: VirtualNetworkGatewayConnectionProtocol;
  /**
   * Ingress bytes transferred.
   */
  readonly ingressBytesTransferred?: number;
  /**
   * Egress bytes transferred.
   */
  readonly egressBytesTransferred?: number;
  /**
   * Expected bandwidth in MBPS.
   */
  connectionBandwidth?: number;
  /**
   * SharedKey for the vpn connection.
   */
  sharedKey?: string;
  /**
   * EnableBgp flag.
   */
  enableBgp?: boolean;
  /**
   * Enable policy-based traffic selectors.
   */
  usePolicyBasedTrafficSelectors?: boolean;
  /**
   * The IPSec Policies to be considered by this connection.
   */
  ipsecPolicies?: IpsecPolicy[];
  /**
   * EnableBgp flag.
   */
  enableRateLimiting?: boolean;
  /**
   * Use local azure ip to initiate connection.
   */
  useLocalAzureIpAddress?: boolean;
  /**
   * The provisioning state of the VPN site link connection resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * VpnConnection Resource.
 */
export type VpnConnection = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Id of the connected vpn site.
   */
  remoteVpnSite?: SubResource;
  /**
   * Routing weight for vpn connection.
   */
  routingWeight?: number;
  /**
   * The dead peer detection timeout for a vpn connection in seconds.
   */
  dpdTimeoutSeconds?: number;
  /**
   * The connection status.
   */
  readonly connectionStatus?: VpnConnectionStatus;
  /**
   * Connection protocol used for this connection.
   */
  vpnConnectionProtocolType?: VirtualNetworkGatewayConnectionProtocol;
  /**
   * Ingress bytes transferred.
   */
  readonly ingressBytesTransferred?: number;
  /**
   * Egress bytes transferred.
   */
  readonly egressBytesTransferred?: number;
  /**
   * Expected bandwidth in MBPS.
   */
  connectionBandwidth?: number;
  /**
   * SharedKey for the vpn connection.
   */
  sharedKey?: string;
  /**
   * EnableBgp flag.
   */
  enableBgp?: boolean;
  /**
   * Enable policy-based traffic selectors.
   */
  usePolicyBasedTrafficSelectors?: boolean;
  /**
   * The IPSec Policies to be considered by this connection.
   */
  ipsecPolicies?: IpsecPolicy[];
  /**
   * EnableBgp flag.
   */
  enableRateLimiting?: boolean;
  /**
   * Enable internet security.
   */
  enableInternetSecurity?: boolean;
  /**
   * Use local azure ip to initiate connection.
   */
  useLocalAzureIpAddress?: boolean;
  /**
   * The provisioning state of the VPN connection resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * List of all vpn site link connections to the gateway.
   */
  vpnLinkConnections?: VpnSiteLinkConnection[];
  /**
   * The Routing Configuration indicating the associated and propagated route tables on this connection.
   */
  routingConfiguration?: RoutingConfiguration;
};

/**
 * ExpressRouteConnection resource.
 */
export type ExpressRouteConnection = SubResource & {
  /**
   * The name of the resource.
   */
  name: string;
  /**
   * The provisioning state of the express route connection resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The ExpressRoute circuit peering.
   */
  expressRouteCircuitPeering?: ExpressRouteCircuitPeeringId;
  /**
   * Authorization key to establish the connection.
   */
  authorizationKey?: string;
  /**
   * The routing weight associated to the connection.
   */
  routingWeight?: number;
  /**
   * Enable internet security.
   */
  enableInternetSecurity?: boolean;
  /**
   * The Routing Configuration indicating the associated and propagated route tables on this connection.
   */
  routingConfiguration?: RoutingConfiguration;
};

/**
 * RouteTable resource in a virtual hub.
 */
export type HubRouteTable = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
  /**
   * List of all routes.
   */
  routes?: HubRoute[];
  /**
   * List of labels associated with this route table.
   */
  labels?: string[];
  /**
   * List of all connections associated with this route table.
   */
  readonly associatedConnections?: SubResource[];
  /**
   * List of all connections that advertise to this route table.
   */
  readonly propagatingConnections?: SubResource[];
  /**
   * The provisioning state of the RouteTable resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Reference to container resource in remote resource provider.
 */
export type Container = SubResource & {};

/**
 * Route Filter Rule Resource.
 */
export type PatchRouteFilterRule = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  readonly name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The access type of the rule.
   */
  access?: Access;
  /**
   * The rule type of the rule.
   */
  routeFilterRuleType?: RouteFilterRuleType;
  /**
   * The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020'].
   */
  communities?: string[];
  /**
   * The provisioning state of the route filter rule resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Route Filter Resource.
 */
export type PatchRouteFilter = SubResource & {
  /**
   * The name of the resource that is unique within a resource group. This name can be used to access the resource.
   */
  readonly name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Collection of RouteFilterRules contained within a route filter.
   */
  rules?: RouteFilterRule[];
  /**
   * A collection of references to express route circuit peerings.
   */
  readonly peerings?: ExpressRouteCircuitPeering[];
  /**
   * A collection of references to express route circuit ipv6 peerings.
   */
  readonly ipv6Peerings?: ExpressRouteCircuitPeering[];
  /**
   * The provisioning state of the route filter resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * An application security group in a resource group.
 */
export type ApplicationSecurityGroup = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The resource GUID property of the application security group resource. It uniquely identifies a resource, even if the user changes its name or migrate the resource across subscriptions or resource groups.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the application security group resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Private endpoint resource.
 */
export type PrivateEndpoint = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The ID of the subnet from which the private IP will be allocated.
   */
  subnet?: Subnet;
  /**
   * An array of references to the network interfaces created for this private endpoint.
   */
  readonly networkInterfaces?: NetworkInterface[];
  /**
   * The provisioning state of the private endpoint resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * A grouping of information about the connection to the remote resource.
   */
  privateLinkServiceConnections?: PrivateLinkServiceConnection[];
  /**
   * A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource.
   */
  manualPrivateLinkServiceConnections?: PrivateLinkServiceConnection[];
  /**
   * An array of custom dns configurations.
   */
  customDnsConfigs?: CustomDnsConfigPropertiesFormat[];
};

/**
 * A network interface in a resource group.
 */
export type NetworkInterface = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The reference to a virtual machine.
   */
  readonly virtualMachine?: SubResource;
  /**
   * The reference to the NetworkSecurityGroup resource.
   */
  networkSecurityGroup?: NetworkSecurityGroup;
  /**
   * A reference to the private endpoint to which the network interface is linked.
   */
  readonly privateEndpoint?: PrivateEndpoint;
  /**
   * A list of IPConfigurations of the network interface.
   */
  ipConfigurations?: NetworkInterfaceIPConfiguration[];
  /**
   * A list of TapConfigurations of the network interface.
   */
  readonly tapConfigurations?: NetworkInterfaceTapConfiguration[];
  /**
   * The DNS settings in network interface.
   */
  dnsSettings?: NetworkInterfaceDnsSettings;
  /**
   * The MAC address of the network interface.
   */
  readonly macAddress?: string;
  /**
   * Whether this is a primary network interface on a virtual machine.
   */
  readonly primary?: boolean;
  /**
   * If the network interface is accelerated networking enabled.
   */
  enableAcceleratedNetworking?: boolean;
  /**
   * Indicates whether IP forwarding is enabled on this network interface.
   */
  enableIPForwarding?: boolean;
  /**
   * A list of references to linked BareMetal resources.
   */
  readonly hostedWorkloads?: string[];
  /**
   * The resource GUID property of the network interface resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the network interface resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * A flow log resource.
 */
export type FlowLog = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * ID of network security group to which flow log will be applied.
   */
  targetResourceId?: string;
  /**
   * Guid of network security group to which flow log will be applied.
   */
  readonly targetResourceGuid?: string;
  /**
   * ID of the storage account which is used to store the flow log.
   */
  storageId?: string;
  /**
   * Flag to enable/disable flow logging.
   */
  enabled?: boolean;
  /**
   * Parameters that define the retention policy for flow log.
   */
  retentionPolicy?: RetentionPolicyParameters;
  /**
   * Parameters that define the flow log format.
   */
  format?: FlowLogFormatParameters;
  /**
   * Parameters that define the configuration of traffic analytics.
   */
  flowAnalyticsConfiguration?: TrafficAnalyticsProperties;
  /**
   * The provisioning state of the flow log.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * NetworkSecurityGroup resource.
 */
export type NetworkSecurityGroup = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * A collection of security rules of the network security group.
   */
  securityRules?: SecurityRule[];
  /**
   * The default security rules of network security group.
   */
  readonly defaultSecurityRules?: SecurityRule[];
  /**
   * A collection of references to network interfaces.
   */
  readonly networkInterfaces?: NetworkInterface[];
  /**
   * A collection of references to subnets.
   */
  readonly subnets?: Subnet[];
  /**
   * A collection of references to flow log resources.
   */
  readonly flowLogs?: FlowLog[];
  /**
   * The resource GUID property of the network security group resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the network security group resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Route table resource.
 */
export type RouteTable = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Collection of routes contained within a route table.
   */
  routes?: Route[];
  /**
   * A collection of references to subnets.
   */
  readonly subnets?: Subnet[];
  /**
   * Whether to disable the routes learned by BGP on that route table. True means disable.
   */
  disableBgpRoutePropagation?: boolean;
  /**
   * The provisioning state of the route table resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Service End point policy resource.
 */
export type ServiceEndpointPolicy = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * A collection of service endpoint policy definitions of the service endpoint policy.
   */
  serviceEndpointPolicyDefinitions?: ServiceEndpointPolicyDefinition[];
  /**
   * A collection of references to subnets.
   */
  readonly subnets?: Subnet[];
  /**
   * The resource GUID property of the service endpoint policy resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the service endpoint policy resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Public IP address resource.
 */
export type PublicIPAddress = Resource & {
  /**
   * The public IP address SKU.
   */
  sku?: PublicIPAddressSku;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * A list of availability zones denoting the IP allocated for the resource needs to come from.
   */
  zones?: string[];
  /**
   * The public IP address allocation method.
   */
  publicIPAllocationMethod?: IPAllocationMethod;
  /**
   * The public IP address version.
   */
  publicIPAddressVersion?: IPVersion;
  /**
   * The IP configuration associated with the public IP address.
   */
  readonly ipConfiguration?: IPConfiguration;
  /**
   * The FQDN of the DNS record associated with the public IP address.
   */
  dnsSettings?: PublicIPAddressDnsSettings;
  /**
   * The DDoS protection custom policy associated with the public IP address.
   */
  ddosSettings?: DdosSettings;
  /**
   * The list of tags associated with the public IP address.
   */
  ipTags?: IpTag[];
  /**
   * The IP address associated with the public IP address resource.
   */
  ipAddress?: string;
  /**
   * The Public IP Prefix this Public IP Address should be allocated from.
   */
  publicIPPrefix?: SubResource;
  /**
   * The idle timeout of the public IP address.
   */
  idleTimeoutInMinutes?: number;
  /**
   * The resource GUID property of the public IP address resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the public IP address resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Virtual Network Tap resource.
 */
export type VirtualNetworkTap = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Specifies the list of resource IDs for the network interface IP configuration that needs to be tapped.
   */
  readonly networkInterfaceTapConfigurations?: NetworkInterfaceTapConfiguration[];
  /**
   * The resource GUID property of the virtual network tap resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the virtual network tap resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The reference to the private IP Address of the collector nic that will receive the tap.
   */
  destinationNetworkInterfaceIPConfiguration?: NetworkInterfaceIPConfiguration;
  /**
   * The reference to the private IP address on the internal Load Balancer that will receive the tap.
   */
  destinationLoadBalancerFrontEndIPConfiguration?: FrontendIPConfiguration;
  /**
   * The VXLAN destination port that will receive the tapped traffic.
   */
  destinationPort?: number;
};

/**
 * Virtual Network resource.
 */
export type VirtualNetwork = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The AddressSpace that contains an array of IP address ranges that can be used by subnets.
   */
  addressSpace?: AddressSpace;
  /**
   * The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
   */
  dhcpOptions?: DhcpOptions;
  /**
   * A list of subnets in a Virtual Network.
   */
  subnets?: Subnet[];
  /**
   * A list of peerings in a Virtual Network.
   */
  virtualNetworkPeerings?: VirtualNetworkPeering[];
  /**
   * The resourceGuid property of the Virtual Network resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the virtual network resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource.
   */
  enableDdosProtection?: boolean;
  /**
   * Indicates if VM protection is enabled for all the subnets in the virtual network.
   */
  enableVmProtection?: boolean;
  /**
   * The DDoS protection plan associated with the virtual network.
   */
  ddosProtectionPlan?: SubResource;
  /**
   * Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
   */
  bgpCommunities?: VirtualNetworkBgpCommunities;
  /**
   * Array of IpAllocation which reference this VNET.
   */
  ipAllocations?: SubResource[];
};

/**
 * Application gateway resource.
 */
export type ApplicationGateway = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * A list of availability zones denoting where the resource needs to come from.
   */
  zones?: string[];
  /**
   * The identity of the application gateway, if configured.
   */
  identity?: ManagedServiceIdentity;
  /**
   * SKU of the application gateway resource.
   */
  sku?: ApplicationGatewaySku;
  /**
   * SSL policy of the application gateway resource.
   */
  sslPolicy?: ApplicationGatewaySslPolicy;
  /**
   * Operational state of the application gateway resource.
   */
  readonly operationalState?: ApplicationGatewayOperationalState;
  /**
   * Subnets of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
   */
  gatewayIPConfigurations?: ApplicationGatewayIPConfiguration[];
  /**
   * Authentication certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
   */
  authenticationCertificates?: ApplicationGatewayAuthenticationCertificate[];
  /**
   * Trusted Root certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
   */
  trustedRootCertificates?: ApplicationGatewayTrustedRootCertificate[];
  /**
   * SSL certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
   */
  sslCertificates?: ApplicationGatewaySslCertificate[];
  /**
   * Frontend IP addresses of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
   */
  frontendIPConfigurations?: ApplicationGatewayFrontendIPConfiguration[];
  /**
   * Frontend ports of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
   */
  frontendPorts?: ApplicationGatewayFrontendPort[];
  /**
   * Probes of the application gateway resource.
   */
  probes?: ApplicationGatewayProbe[];
  /**
   * Backend address pool of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
   */
  backendAddressPools?: ApplicationGatewayBackendAddressPool[];
  /**
   * Backend http settings of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
   */
  backendHttpSettingsCollection?: ApplicationGatewayBackendHttpSettings[];
  /**
   * Http listeners of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
   */
  httpListeners?: ApplicationGatewayHttpListener[];
  /**
   * URL path map of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
   */
  urlPathMaps?: ApplicationGatewayUrlPathMap[];
  /**
   * Request routing rules of the application gateway resource.
   */
  requestRoutingRules?: ApplicationGatewayRequestRoutingRule[];
  /**
   * Rewrite rules for the application gateway resource.
   */
  rewriteRuleSets?: ApplicationGatewayRewriteRuleSet[];
  /**
   * Redirect configurations of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
   */
  redirectConfigurations?: ApplicationGatewayRedirectConfiguration[];
  /**
   * Web application firewall configuration.
   */
  webApplicationFirewallConfiguration?: ApplicationGatewayWebApplicationFirewallConfiguration;
  /**
   * Reference to the FirewallPolicy resource.
   */
  firewallPolicy?: SubResource;
  /**
   * Whether HTTP2 is enabled on the application gateway resource.
   */
  enableHttp2?: boolean;
  /**
   * Whether FIPS is enabled on the application gateway resource.
   */
  enableFips?: boolean;
  /**
   * Autoscale Configuration.
   */
  autoscaleConfiguration?: ApplicationGatewayAutoscaleConfiguration;
  /**
   * The resource GUID property of the application gateway resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the application gateway resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Custom error configurations of the application gateway resource.
   */
  customErrorConfigurations?: ApplicationGatewayCustomError[];
  /**
   * If true, associates a firewall policy with an application gateway regardless whether the policy differs from the WAF Config.
   */
  forceFirewallPolicyAssociation?: boolean;
};

/**
 * A web application firewall rule set.
 */
export type ApplicationGatewayFirewallRuleSet = Resource & {
  /**
   * The provisioning state of the web application firewall rule set.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The type of the web application firewall rule set.
   */
  ruleSetType?: string;
  /**
   * The version of the web application firewall rule set type.
   */
  ruleSetVersion?: string;
  /**
   * The rule groups of the web application firewall rule set.
   */
  ruleGroups?: ApplicationGatewayFirewallRuleGroup[];
};

/**
 * Response for ApplicationGatewayAvailableSslOptions API service call.
 */
export type ApplicationGatewayAvailableSslOptions = Resource & {
  /**
   * List of available Ssl predefined policy.
   */
  predefinedPolicies?: SubResource[];
  /**
   * Name of the Ssl predefined policy applied by default to application gateway.
   */
  defaultPolicy?: ApplicationGatewaySslPolicyName;
  /**
   * List of available Ssl cipher suites.
   */
  availableCipherSuites?: ApplicationGatewaySslCipherSuite[];
  /**
   * List of available Ssl protocols.
   */
  availableProtocols?: ApplicationGatewaySslProtocol[];
};

/**
 * Azure Firewall resource.
 */
export type AzureFirewall = Resource & {
  /**
   * A list of availability zones denoting where the resource needs to come from.
   */
  zones?: string[];
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Collection of application rule collections used by Azure Firewall.
   */
  applicationRuleCollections?: AzureFirewallApplicationRuleCollection[];
  /**
   * Collection of NAT rule collections used by Azure Firewall.
   */
  natRuleCollections?: AzureFirewallNatRuleCollection[];
  /**
   * Collection of network rule collections used by Azure Firewall.
   */
  networkRuleCollections?: AzureFirewallNetworkRuleCollection[];
  /**
   * IP configuration of the Azure Firewall resource.
   */
  ipConfigurations?: AzureFirewallIPConfiguration[];
  /**
   * IP configuration of the Azure Firewall used for management traffic.
   */
  managementIpConfiguration?: AzureFirewallIPConfiguration;
  /**
   * The provisioning state of the Azure firewall resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The operation mode for Threat Intelligence.
   */
  threatIntelMode?: AzureFirewallThreatIntelMode;
  /**
   * The virtualHub to which the firewall belongs.
   */
  virtualHub?: SubResource;
  /**
   * The firewallPolicy associated with this azure firewall.
   */
  firewallPolicy?: SubResource;
  /**
   * IP addresses associated with AzureFirewall.
   */
  readonly hubIpAddresses?: HubIPAddresses;
  /**
   * IpGroups associated with AzureFirewall.
   */
  readonly ipGroups?: AzureFirewallIpGroups[];
  /**
   * The Azure Firewall Resource SKU.
   */
  sku?: AzureFirewallSku;
  /**
   * The additional properties used to further config this azure firewall.
   */
  additionalProperties?: { [propertyName: string]: string };
};

/**
 * Azure Firewall FQDN Tag Resource.
 */
export type AzureFirewallFqdnTag = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The provisioning state of the Azure firewall FQDN tag resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The name of this FQDN Tag.
   */
  readonly fqdnTagName?: string;
};

/**
 * Bastion Host resource.
 */
export type BastionHost = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * IP configuration of the Bastion Host resource.
   */
  ipConfigurations?: BastionHostIPConfiguration[];
  /**
   * FQDN for the endpoint on which bastion host is accessible.
   */
  dnsName?: string;
  /**
   * The provisioning state of the bastion host resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * A DDoS custom policy in a resource group.
 */
export type DdosCustomPolicy = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The resource GUID property of the DDoS custom policy resource. It uniquely identifies the resource, even if the user changes its name or migrate the resource across subscriptions or resource groups.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the DDoS custom policy resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The list of public IPs associated with the DDoS custom policy resource. This list is read-only.
   */
  readonly publicIPAddresses?: SubResource[];
  /**
   * The protocol-specific DDoS policy customization parameters.
   */
  protocolCustomSettings?: ProtocolCustomSettingsFormat[];
};

/**
 * ExpressRouteCircuit resource.
 */
export type ExpressRouteCircuit = Resource & {
  /**
   * The SKU.
   */
  sku?: ExpressRouteCircuitSku;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Allow classic operations.
   */
  allowClassicOperations?: boolean;
  /**
   * The CircuitProvisioningState state of the resource.
   */
  circuitProvisioningState?: string;
  /**
   * The ServiceProviderProvisioningState state of the resource.
   */
  serviceProviderProvisioningState?: ServiceProviderProvisioningState;
  /**
   * The list of authorizations.
   */
  authorizations?: ExpressRouteCircuitAuthorization[];
  /**
   * The list of peerings.
   */
  peerings?: ExpressRouteCircuitPeering[];
  /**
   * The ServiceKey.
   */
  serviceKey?: string;
  /**
   * The ServiceProviderNotes.
   */
  serviceProviderNotes?: string;
  /**
   * The ServiceProviderProperties.
   */
  serviceProviderProperties?: ExpressRouteCircuitServiceProviderProperties;
  /**
   * The reference to the ExpressRoutePort resource when the circuit is provisioned on an ExpressRoutePort resource.
   */
  expressRoutePort?: SubResource;
  /**
   * The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
   */
  bandwidthInGbps?: number;
  /**
   * The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
   */
  readonly stag?: number;
  /**
   * The provisioning state of the express route circuit resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The GatewayManager Etag.
   */
  gatewayManagerEtag?: string;
  /**
   * Flag denoting global reach status.
   */
  globalReachEnabled?: boolean;
};

/**
 * A ExpressRouteResourceProvider object.
 */
export type ExpressRouteServiceProvider = Resource & {
  /**
   * A list of peering locations.
   */
  peeringLocations?: string[];
  /**
   * A list of bandwidths offered.
   */
  bandwidthsOffered?: ExpressRouteServiceProviderBandwidthsOffered[];
  /**
   * The provisioning state of the express route service provider resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * ExpressRouteCrossConnection resource.
 */
export type ExpressRouteCrossConnection = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The name of the primary port.
   */
  readonly primaryAzurePort?: string;
  /**
   * The name of the secondary port.
   */
  readonly secondaryAzurePort?: string;
  /**
   * The identifier of the circuit traffic.
   */
  readonly sTag?: number;
  /**
   * The peering location of the ExpressRoute circuit.
   */
  peeringLocation?: string;
  /**
   * The circuit bandwidth In Mbps.
   */
  bandwidthInMbps?: number;
  /**
   * The ExpressRouteCircuit.
   */
  expressRouteCircuit?: ExpressRouteCircuitReference;
  /**
   * The provisioning state of the circuit in the connectivity provider system.
   */
  serviceProviderProvisioningState?: ServiceProviderProvisioningState;
  /**
   * Additional read only notes set by the connectivity provider.
   */
  serviceProviderNotes?: string;
  /**
   * The provisioning state of the express route cross connection resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The list of peerings.
   */
  peerings?: ExpressRouteCrossConnectionPeering[];
};

/**
 * Definition of the ExpressRoutePorts peering location resource.
 */
export type ExpressRoutePortsLocation = Resource & {
  /**
   * Address of peering location.
   */
  readonly address?: string;
  /**
   * Contact details of peering locations.
   */
  readonly contact?: string;
  /**
   * The inventory of available ExpressRoutePort bandwidths.
   */
  availableBandwidths?: ExpressRoutePortsLocationBandwidths[];
  /**
   * The provisioning state of the express route port location resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * ExpressRoutePort resource definition.
 */
export type ExpressRoutePort = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The identity of ExpressRoutePort, if configured.
   */
  identity?: ManagedServiceIdentity;
  /**
   * The name of the peering location that the ExpressRoutePort is mapped to physically.
   */
  peeringLocation?: string;
  /**
   * Bandwidth of procured ports in Gbps.
   */
  bandwidthInGbps?: number;
  /**
   * Aggregate Gbps of associated circuit bandwidths.
   */
  readonly provisionedBandwidthInGbps?: number;
  /**
   * Maximum transmission unit of the physical port pair(s).
   */
  readonly mtu?: string;
  /**
   * Encapsulation method on physical ports.
   */
  encapsulation?: ExpressRoutePortsEncapsulation;
  /**
   * Ether type of the physical port.
   */
  readonly etherType?: string;
  /**
   * Date of the physical port allocation to be used in Letter of Authorization.
   */
  readonly allocationDate?: string;
  /**
   * The set of physical links of the ExpressRoutePort resource.
   */
  links?: ExpressRouteLink[];
  /**
   * Reference the ExpressRoute circuit(s) that are provisioned on this ExpressRoutePort resource.
   */
  readonly circuits?: SubResource[];
  /**
   * The provisioning state of the express route port resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The resource GUID property of the express route port resource.
   */
  readonly resourceGuid?: string;
};

/**
 * FirewallPolicy Resource.
 */
export type FirewallPolicy = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The identity of the firewall policy.
   */
  identity?: ManagedServiceIdentity;
  /**
   * List of references to FirewallPolicyRuleGroups.
   */
  readonly ruleGroups?: SubResource[];
  /**
   * The provisioning state of the firewall policy resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The parent firewall policy from which rules are inherited.
   */
  basePolicy?: SubResource;
  /**
   * List of references to Azure Firewalls that this Firewall Policy is associated with.
   */
  readonly firewalls?: SubResource[];
  /**
   * List of references to Child Firewall Policies.
   */
  readonly childPolicies?: SubResource[];
  /**
   * The operation mode for Threat Intelligence.
   */
  threatIntelMode?: AzureFirewallThreatIntelMode;
  /**
   * ThreatIntel Whitelist for Firewall Policy.
   */
  threatIntelWhitelist?: FirewallPolicyThreatIntelWhitelist;
  /**
   * The operation mode for Intrusion system.
   */
  intrusionSystemMode?: FirewallPolicyIntrusionSystemMode;
  /**
   * TLS Configuration definition.
   */
  transportSecurity?: FirewallPolicyTransportSecurity;
};

/**
 * IpAllocation resource.
 */
export type IpAllocation = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The Subnet that using the prefix of this IpAllocation resource.
   */
  readonly subnet?: SubResource;
  /**
   * The VirtualNetwork that using the prefix of this IpAllocation resource.
   */
  readonly virtualNetwork?: SubResource;
  /**
   * The type for the IpAllocation.
   */
  typePropertiesType?: IpAllocationType;
  /**
   * The address prefix for the IpAllocation.
   */
  prefix?: string;
  /**
   * The address prefix length for the IpAllocation.
   */
  prefixLength?: number;
  /**
   * The address prefix Type for the IpAllocation.
   */
  prefixType?: IPVersion;
  /**
   * The IPAM allocation ID.
   */
  ipamAllocationId?: string;
  /**
   * IpAllocation tags.
   */
  allocationTags?: { [propertyName: string]: string };
};

/**
 * The IpGroups resource information.
 */
export type IpGroup = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The provisioning state of the IpGroups resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * IpAddresses/IpAddressPrefixes in the IpGroups resource.
   */
  ipAddresses?: string[];
  /**
   * List of references to Azure resources that this IpGroups is associated with.
   */
  readonly firewalls?: SubResource[];
};

/**
 * LoadBalancer resource.
 */
export type LoadBalancer = Resource & {
  /**
   * The load balancer SKU.
   */
  sku?: LoadBalancerSku;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Object representing the frontend IPs to be used for the load balancer.
   */
  frontendIPConfigurations?: FrontendIPConfiguration[];
  /**
   * Collection of backend address pools used by a load balancer.
   */
  backendAddressPools?: BackendAddressPool[];
  /**
   * Object collection representing the load balancing rules Gets the provisioning.
   */
  loadBalancingRules?: LoadBalancingRule[];
  /**
   * Collection of probe objects used in the load balancer.
   */
  probes?: Probe[];
  /**
   * Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an Inbound NAT pool. They have to reference individual inbound NAT rules.
   */
  inboundNatRules?: InboundNatRule[];
  /**
   * Defines an external port range for inbound NAT to a single backend port on NICs associated with a load balancer. Inbound NAT rules are created automatically for each NIC associated with the Load Balancer using an external port from this range. Defining an Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound Nat rules. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an inbound NAT pool. They have to reference individual inbound NAT rules.
   */
  inboundNatPools?: InboundNatPool[];
  /**
   * The outbound rules.
   */
  outboundRules?: OutboundRule[];
  /**
   * The resource GUID property of the load balancer resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the load balancer resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Nat Gateway resource.
 */
export type NatGateway = Resource & {
  /**
   * The nat gateway SKU.
   */
  sku?: NatGatewaySku;
  /**
   * A list of availability zones denoting the zone in which Nat Gateway should be deployed.
   */
  zones?: string[];
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The idle timeout of the nat gateway.
   */
  idleTimeoutInMinutes?: number;
  /**
   * An array of public ip addresses associated with the nat gateway resource.
   */
  publicIpAddresses?: SubResource[];
  /**
   * An array of public ip prefixes associated with the nat gateway resource.
   */
  publicIpPrefixes?: SubResource[];
  /**
   * An array of references to the subnets using this nat gateway resource.
   */
  readonly subnets?: SubResource[];
  /**
   * The resource GUID property of the NAT gateway resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the NAT gateway resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Network profile resource.
 */
export type NetworkProfile = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * List of child container network interfaces.
   */
  readonly containerNetworkInterfaces?: ContainerNetworkInterface[];
  /**
   * List of chid container network interface configurations.
   */
  containerNetworkInterfaceConfigurations?: ContainerNetworkInterfaceConfiguration[];
  /**
   * The resource GUID property of the network profile resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the network profile resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * NetworkVirtualAppliance Resource.
 */
export type NetworkVirtualAppliance = Resource & {
  /**
   * The service principal that has read access to cloud-init and config blob.
   */
  identity?: ManagedServiceIdentity;
  /**
   * Network Virtual Appliance SKU.
   */
  sku?: VirtualApplianceSkuProperties;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * BootStrapConfigurationBlob storage URLs.
   */
  bootStrapConfigurationBlob?: string[];
  /**
   * The Virtual Hub where Network Virtual Appliance is being deployed.
   */
  virtualHub?: SubResource;
  /**
   * CloudInitConfigurationBlob storage URLs.
   */
  cloudInitConfigurationBlob?: string[];
  /**
   * VirtualAppliance ASN.
   */
  virtualApplianceAsn?: number;
  /**
   * List of Virtual Appliance Network Interfaces.
   */
  readonly virtualApplianceNics?: VirtualApplianceNicProperties[];
  /**
   * The provisioning state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Network watcher in a resource group.
 */
export type NetworkWatcher = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The provisioning state of the network watcher resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Private link service resource.
 */
export type PrivateLinkService = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * An array of references to the load balancer IP configurations.
   */
  loadBalancerFrontendIpConfigurations?: FrontendIPConfiguration[];
  /**
   * An array of private link service IP configurations.
   */
  ipConfigurations?: PrivateLinkServiceIpConfiguration[];
  /**
   * An array of references to the network interfaces created for this private link service.
   */
  readonly networkInterfaces?: NetworkInterface[];
  /**
   * The provisioning state of the private link service resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * An array of list about connections to the private endpoint.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /**
   * The visibility list of the private link service.
   */
  visibility?: ResourceSet;
  /**
   * The auto-approval list of the private link service.
   */
  autoApproval?: ResourceSet;
  /**
   * The list of Fqdn.
   */
  fqdns?: string[];
  /**
   * The alias of the private link service.
   */
  readonly alias?: string;
  /**
   * Whether the private link service is enabled for proxy protocol or not.
   */
  enableProxyProtocol?: boolean;
};

/**
 * Public IP prefix resource.
 */
export type PublicIPPrefix = Resource & {
  /**
   * The public IP prefix SKU.
   */
  sku?: PublicIPPrefixSku;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * A list of availability zones denoting the IP allocated for the resource needs to come from.
   */
  zones?: string[];
  /**
   * The public IP address version.
   */
  publicIPAddressVersion?: IPVersion;
  /**
   * The list of tags associated with the public IP prefix.
   */
  ipTags?: IpTag[];
  /**
   * The Length of the Public IP Prefix.
   */
  prefixLength?: number;
  /**
   * The allocated Prefix.
   */
  readonly ipPrefix?: string;
  /**
   * The list of all referenced PublicIPAddresses.
   */
  readonly publicIPAddresses?: ReferencedPublicIpAddress[];
  /**
   * The reference to load balancer frontend IP configuration associated with the public IP prefix.
   */
  readonly loadBalancerFrontendIpConfiguration?: SubResource;
  /**
   * The resource GUID property of the public IP prefix resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the public IP prefix resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Route Filter Resource.
 */
export type RouteFilter = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Collection of RouteFilterRules contained within a route filter.
   */
  rules?: RouteFilterRule[];
  /**
   * A collection of references to express route circuit peerings.
   */
  readonly peerings?: ExpressRouteCircuitPeering[];
  /**
   * A collection of references to express route circuit ipv6 peerings.
   */
  readonly ipv6Peerings?: ExpressRouteCircuitPeering[];
  /**
   * The provisioning state of the route filter resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Security Partner Provider resource.
 */
export type SecurityPartnerProvider = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The provisioning state of the Security Partner Provider resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The security provider name.
   */
  securityProviderName?: SecurityProviderName;
  /**
   * The connection status with the Security Partner Provider.
   */
  readonly connectionStatus?: SecurityPartnerProviderConnectionStatus;
  /**
   * The virtualHub to which the Security Partner Provider belongs.
   */
  virtualHub?: SubResource;
};

/**
 * Service Community Properties.
 */
export type BgpServiceCommunity = Resource & {
  /**
   * The name of the bgp community. e.g. Skype.
   */
  serviceName?: string;
  /**
   * A list of bgp communities.
   */
  bgpCommunities?: BGPCommunity[];
};

/**
 * Network Intent Policy resource.
 */
export type NetworkIntentPolicy = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
};

/**
 * A common class for general resource information.
 */
export type VirtualNetworkGateway = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * IP configurations for virtual network gateway.
   */
  ipConfigurations?: VirtualNetworkGatewayIPConfiguration[];
  /**
   * The type of this virtual network gateway.
   */
  gatewayType?: VirtualNetworkGatewayType;
  /**
   * The type of this virtual network gateway.
   */
  vpnType?: VpnType;
  /**
   * The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
   */
  vpnGatewayGeneration?: VpnGatewayGeneration;
  /**
   * Whether BGP is enabled for this virtual network gateway or not.
   */
  enableBgp?: boolean;
  /**
   * Whether private IP needs to be enabled on this gateway for connections or not.
   */
  enablePrivateIpAddress?: boolean;
  /**
   * ActiveActive flag.
   */
  active?: boolean;
  /**
   * The reference to the LocalNetworkGateway resource which represents local network site having default routes. Assign Null value in case of removing existing default site setting.
   */
  gatewayDefaultSite?: SubResource;
  /**
   * The reference to the VirtualNetworkGatewaySku resource which represents the SKU selected for Virtual network gateway.
   */
  sku?: VirtualNetworkGatewaySku;
  /**
   * The reference to the VpnClientConfiguration resource which represents the P2S VpnClient configurations.
   */
  vpnClientConfiguration?: VpnClientConfiguration;
  /**
   * Virtual network gateway's BGP speaker settings.
   */
  bgpSettings?: BgpSettings;
  /**
   * The reference to the address space resource which represents the custom routes address space specified by the customer for virtual network gateway and VpnClient.
   */
  customRoutes?: AddressSpace;
  /**
   * The resource GUID property of the virtual network gateway resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the virtual network gateway resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Whether dns forwarding is enabled or not.
   */
  enableDnsForwarding?: boolean;
  /**
   * The IP address allocated by the gateway to which dns requests can be sent.
   */
  readonly inboundDnsForwardingEndpoint?: string;
};

/**
 * A common class for general resource information.
 */
export type VirtualNetworkGatewayConnectionListEntity = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The authorizationKey.
   */
  authorizationKey?: string;
  /**
   * The reference to virtual network gateway resource.
   */
  virtualNetworkGateway1: VirtualNetworkConnectionGatewayReference;
  /**
   * The reference to virtual network gateway resource.
   */
  virtualNetworkGateway2?: VirtualNetworkConnectionGatewayReference;
  /**
   * The reference to local network gateway resource.
   */
  localNetworkGateway2?: VirtualNetworkConnectionGatewayReference;
  /**
   * Gateway connection type.
   */
  connectionType: VirtualNetworkGatewayConnectionType;
  /**
   * Connection protocol used for this connection.
   */
  connectionProtocol?: VirtualNetworkGatewayConnectionProtocol;
  /**
   * The routing weight.
   */
  routingWeight?: number;
  /**
   * The IPSec shared key.
   */
  sharedKey?: string;
  /**
   * Virtual Network Gateway connection status.
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * Collection of all tunnels' connection health status.
   */
  readonly tunnelConnectionStatus?: TunnelConnectionHealth[];
  /**
   * The egress bytes transferred in this connection.
   */
  readonly egressBytesTransferred?: number;
  /**
   * The ingress bytes transferred in this connection.
   */
  readonly ingressBytesTransferred?: number;
  /**
   * The reference to peerings resource.
   */
  peer?: SubResource;
  /**
   * EnableBgp flag.
   */
  enableBgp?: boolean;
  /**
   * Enable policy-based traffic selectors.
   */
  usePolicyBasedTrafficSelectors?: boolean;
  /**
   * The IPSec Policies to be considered by this connection.
   */
  ipsecPolicies?: IpsecPolicy[];
  /**
   * The Traffic Selector Policies to be considered by this connection.
   */
  trafficSelectorPolicies?: TrafficSelectorPolicy[];
  /**
   * The resource GUID property of the virtual network gateway connection resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the virtual network gateway connection resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Bypass ExpressRoute Gateway for data forwarding.
   */
  expressRouteGatewayBypass?: boolean;
};

/**
 * A common class for general resource information.
 */
export type LocalNetworkGateway = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Local network site address space.
   */
  localNetworkAddressSpace?: AddressSpace;
  /**
   * IP address of local network gateway.
   */
  gatewayIpAddress?: string;
  /**
   * FQDN of local network gateway.
   */
  fqdn?: string;
  /**
   * Local network gateway's BGP speaker settings.
   */
  bgpSettings?: BgpSettings;
  /**
   * The resource GUID property of the local network gateway resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the local network gateway resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * A common class for general resource information.
 */
export type VirtualNetworkGatewayConnection = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The authorizationKey.
   */
  authorizationKey?: string;
  /**
   * The reference to virtual network gateway resource.
   */
  virtualNetworkGateway1: VirtualNetworkGateway;
  /**
   * The reference to virtual network gateway resource.
   */
  virtualNetworkGateway2?: VirtualNetworkGateway;
  /**
   * The reference to local network gateway resource.
   */
  localNetworkGateway2?: LocalNetworkGateway;
  /**
   * Gateway connection type.
   */
  connectionType: VirtualNetworkGatewayConnectionType;
  /**
   * Connection protocol used for this connection.
   */
  connectionProtocol?: VirtualNetworkGatewayConnectionProtocol;
  /**
   * The routing weight.
   */
  routingWeight?: number;
  /**
   * The dead peer detection timeout of this connection in seconds.
   */
  dpdTimeoutSeconds?: number;
  /**
   * The IPSec shared key.
   */
  sharedKey?: string;
  /**
   * Virtual Network Gateway connection status.
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * Collection of all tunnels' connection health status.
   */
  readonly tunnelConnectionStatus?: TunnelConnectionHealth[];
  /**
   * The egress bytes transferred in this connection.
   */
  readonly egressBytesTransferred?: number;
  /**
   * The ingress bytes transferred in this connection.
   */
  readonly ingressBytesTransferred?: number;
  /**
   * The reference to peerings resource.
   */
  peer?: SubResource;
  /**
   * EnableBgp flag.
   */
  enableBgp?: boolean;
  /**
   * Use private local Azure IP for the connection.
   */
  useLocalAzureIpAddress?: boolean;
  /**
   * Enable policy-based traffic selectors.
   */
  usePolicyBasedTrafficSelectors?: boolean;
  /**
   * The IPSec Policies to be considered by this connection.
   */
  ipsecPolicies?: IpsecPolicy[];
  /**
   * The Traffic Selector Policies to be considered by this connection.
   */
  trafficSelectorPolicies?: TrafficSelectorPolicy[];
  /**
   * The resource GUID property of the virtual network gateway connection resource.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the virtual network gateway connection resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Bypass ExpressRoute Gateway for data forwarding.
   */
  expressRouteGatewayBypass?: boolean;
};

/**
 * VirtualRouter Resource.
 */
export type VirtualRouter = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * VirtualRouter ASN.
   */
  virtualRouterAsn?: number;
  /**
   * VirtualRouter IPs.
   */
  virtualRouterIps?: string[];
  /**
   * The Subnet on which VirtualRouter is hosted.
   */
  hostedSubnet?: SubResource;
  /**
   * The Gateway on which VirtualRouter is hosted.
   */
  hostedGateway?: SubResource;
  /**
   * List of references to VirtualRouterPeerings.
   */
  readonly peerings?: SubResource[];
  /**
   * The provisioning state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * VirtualWAN Resource.
 */
export type VirtualWAN = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Vpn encryption to be disabled or not.
   */
  disableVpnEncryption?: boolean;
  /**
   * List of VirtualHubs in the VirtualWAN.
   */
  readonly virtualHubs?: SubResource[];
  /**
   * List of VpnSites in the VirtualWAN.
   */
  readonly vpnSites?: SubResource[];
  /**
   * True if branch to branch traffic is allowed.
   */
  allowBranchToBranchTraffic?: boolean;
  /**
   * True if Vnet to Vnet traffic is allowed.
   */
  allowVnetToVnetTraffic?: boolean;
  /**
   * The office local breakout category.
   */
  readonly office365LocalBreakoutCategory?: OfficeTrafficCategory;
  /**
   * The provisioning state of the virtual WAN resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The type of the VirtualWAN.
   */
  typePropertiesType?: string;
};

/**
 * VpnSite Resource.
 */
export type VpnSite = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The VirtualWAN to which the vpnSite belongs.
   */
  virtualWan?: SubResource;
  /**
   * The device properties.
   */
  deviceProperties?: DeviceProperties;
  /**
   * The ip-address for the vpn-site.
   */
  ipAddress?: string;
  /**
   * The key for vpn-site that can be used for connections.
   */
  siteKey?: string;
  /**
   * The AddressSpace that contains an array of IP address ranges.
   */
  addressSpace?: AddressSpace;
  /**
   * The set of bgp properties.
   */
  bgpProperties?: BgpSettings;
  /**
   * The provisioning state of the VPN site resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * IsSecuritySite flag.
   */
  isSecuritySite?: boolean;
  /**
   * List of all vpn site links.
   */
  vpnSiteLinks?: VpnSiteLink[];
};

/**
 * P2SVpnGateway Resource.
 */
export type P2SVpnGateway = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The VirtualHub to which the gateway belongs.
   */
  virtualHub?: SubResource;
  /**
   * List of all p2s connection configurations of the gateway.
   */
  p2SConnectionConfigurations?: P2SConnectionConfiguration[];
  /**
   * The provisioning state of the P2S VPN gateway resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The scale unit for this p2s vpn gateway.
   */
  vpnGatewayScaleUnit?: number;
  /**
   * The VpnServerConfiguration to which the p2sVpnGateway is attached to.
   */
  vpnServerConfiguration?: SubResource;
  /**
   * All P2S VPN clients' connection health status.
   */
  readonly vpnClientConnectionHealth?: VpnClientConnectionHealth;
};

/**
 * VpnServerConfiguration Resource.
 */
export type VpnServerConfiguration = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The name of the VpnServerConfiguration that is unique within a resource group.
   */
  namePropertiesName?: string;
  /**
   * VPN protocols for the VpnServerConfiguration.
   */
  vpnProtocols?: VpnGatewayTunnelingProtocol[];
  /**
   * VPN authentication types for the VpnServerConfiguration.
   */
  vpnAuthenticationTypes?: VpnAuthenticationType[];
  /**
   * VPN client root certificate of VpnServerConfiguration.
   */
  vpnClientRootCertificates?: VpnServerConfigVpnClientRootCertificate[];
  /**
   * VPN client revoked certificate of VpnServerConfiguration.
   */
  vpnClientRevokedCertificates?: VpnServerConfigVpnClientRevokedCertificate[];
  /**
   * Radius Server root certificate of VpnServerConfiguration.
   */
  radiusServerRootCertificates?: VpnServerConfigRadiusServerRootCertificate[];
  /**
   * Radius client root certificate of VpnServerConfiguration.
   */
  radiusClientRootCertificates?: VpnServerConfigRadiusClientRootCertificate[];
  /**
   * VpnClientIpsecPolicies for VpnServerConfiguration.
   */
  vpnClientIpsecPolicies?: IpsecPolicy[];
  /**
   * The radius server address property of the VpnServerConfiguration resource for point to site client connection.
   */
  radiusServerAddress?: string;
  /**
   * The radius secret property of the VpnServerConfiguration resource for point to site client connection.
   */
  radiusServerSecret?: string;
  /**
   * Multiple Radius Server configuration for VpnServerConfiguration.
   */
  radiusServers?: RadiusServer[];
  /**
   * The set of aad vpn authentication parameters.
   */
  aadAuthenticationParameters?: AadAuthenticationParameters;
  /**
   * The provisioning state of the VpnServerConfiguration resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   */
  readonly provisioningState?: string;
  /**
   * List of references to P2SVpnGateways.
   */
  readonly p2SVpnGateways?: P2SVpnGateway[];
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etagPropertiesEtag?: string;
};

/**
 * VirtualHub Resource.
 */
export type VirtualHub = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The VirtualWAN to which the VirtualHub belongs.
   */
  virtualWan?: SubResource;
  /**
   * The VpnGateway associated with this VirtualHub.
   */
  vpnGateway?: SubResource;
  /**
   * The P2SVpnGateway associated with this VirtualHub.
   */
  p2SVpnGateway?: SubResource;
  /**
   * The expressRouteGateway associated with this VirtualHub.
   */
  expressRouteGateway?: SubResource;
  /**
   * The azureFirewall associated with this VirtualHub.
   */
  azureFirewall?: SubResource;
  /**
   * The securityPartnerProvider associated with this VirtualHub.
   */
  securityPartnerProvider?: SubResource;
  /**
   * List of all vnet connections with this VirtualHub.
   */
  virtualNetworkConnections?: HubVirtualNetworkConnection[];
  /**
   * Address-prefix for this VirtualHub.
   */
  addressPrefix?: string;
  /**
   * The routeTable associated with this virtual hub.
   */
  routeTable?: VirtualHubRouteTable;
  /**
   * The provisioning state of the virtual hub resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The Security Provider name.
   */
  securityProviderName?: string;
  /**
   * List of all virtual hub route table v2s associated with this VirtualHub.
   */
  virtualHubRouteTableV2S?: VirtualHubRouteTableV2[];
  /**
   * The sku of this VirtualHub.
   */
  sku?: string;
};

/**
 * VpnGateway Resource.
 */
export type VpnGateway = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The VirtualHub to which the gateway belongs.
   */
  virtualHub?: SubResource;
  /**
   * List of all vpn connections to the gateway.
   */
  connections?: VpnConnection[];
  /**
   * Local network gateway's BGP speaker settings.
   */
  bgpSettings?: BgpSettings;
  /**
   * The provisioning state of the VPN gateway resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The scale unit for this vpn gateway.
   */
  vpnGatewayScaleUnit?: number;
};

/**
 * ExpressRoute gateway resource.
 */
export type ExpressRouteGateway = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * Configuration for auto scaling.
   */
  autoScaleConfiguration?: ExpressRouteGatewayPropertiesAutoScaleConfiguration;
  /**
   * List of ExpressRoute connections to the ExpressRoute gateway.
   */
  readonly expressRouteConnections?: ExpressRouteConnection[];
  /**
   * The provisioning state of the express route gateway resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The Virtual Hub where the ExpressRoute gateway is or will be deployed.
   */
  virtualHub?: VirtualHubId;
};

/**
 * Defines web application firewall policy.
 */
export type WebApplicationFirewallPolicy = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The PolicySettings for policy.
   */
  policySettings?: PolicySettings;
  /**
   * The custom rules inside the policy.
   */
  customRules?: WebApplicationFirewallCustomRule[];
  /**
   * A collection of references to application gateways.
   */
  readonly applicationGateways?: ApplicationGateway[];
  /**
   * The provisioning state of the web application firewall policy resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Resource status of the policy.
   */
  readonly resourceState?: WebApplicationFirewallPolicyResourceState;
  /**
   * Describes the managedRules structure.
   */
  managedRules?: ManagedRulesDefinition;
  /**
   * A collection of references to application gateway http listeners.
   */
  readonly httpListeners?: SubResource[];
  /**
   * A collection of references to application gateway path rules.
   */
  readonly pathBasedRules?: SubResource[];
};

/**
 * Describes a Virtual Machine.
 */
export type Vm = Resource & {};

/**
 * Firewall Policy NAT Rule.
 */
export type FirewallPolicyNatRule = FirewallPolicyRule & {
  /**
   * The action type of a Nat rule.
   */
  action?: FirewallPolicyNatRuleAction;
  /**
   * The translated address for this NAT rule.
   */
  translatedAddress?: string;
  /**
   * The translated port for this NAT rule.
   */
  translatedPort?: string;
  /**
   * The match conditions for incoming traffic.
   */
  ruleCondition?: FirewallPolicyRuleConditionUnion;
};

/**
 * Firewall Policy Filter Rule.
 */
export type FirewallPolicyFilterRule = FirewallPolicyRule & {
  /**
   * The action type of a Filter rule.
   */
  action?: FirewallPolicyFilterRuleAction;
  /**
   * Collection of rule conditions used by a rule.
   */
  ruleConditions?: FirewallPolicyRuleConditionUnion[];
};

/**
 * The properties of a packet capture session.
 */
export type PacketCaptureResultProperties = PacketCaptureParameters & {
  /**
   * The provisioning state of the packet capture session.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Describes the properties of a connection monitor.
 */
export type ConnectionMonitorResultProperties = ConnectionMonitorParameters & {
  /**
   * The provisioning state of the connection monitor.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The date and time when the connection monitor was started.
   */
  readonly startTime?: Date;
  /**
   * The monitoring status of the connection monitor.
   */
  readonly monitoringStatus?: string;
  /**
   * Type of connection monitor.
   */
  readonly connectionMonitorType?: ConnectionMonitorType;
};

/**
 * The visibility list of the private link service.
 */
export type PrivateLinkServicePropertiesVisibility = ResourceSet & {};

/**
 * The auto-approval list of the private link service.
 */
export type PrivateLinkServicePropertiesAutoApproval = ResourceSet & {};

/**
 * Rule condition of type application.
 */
export type ApplicationRuleCondition = FirewallPolicyRuleCondition & {
  /**
   * List of source IP addresses for this rule.
   */
  sourceAddresses?: string[];
  /**
   * List of destination IP addresses or Service Tags.
   */
  destinationAddresses?: string[];
  /**
   * Array of Application Protocols.
   */
  protocols?: FirewallPolicyRuleConditionApplicationProtocol[];
  /**
   * List of Urls for this rule condition.
   */
  targetUrls?: string[];
  /**
   * List of FQDNs for this rule condition.
   */
  targetFqdns?: string[];
  /**
   * List of FQDN Tags for this rule condition.
   */
  fqdnTags?: string[];
  /**
   * List of source IpGroups for this rule.
   */
  sourceIpGroups?: string[];
};

/**
 * Rule condition of type nat.
 */
export type NatRuleCondition = FirewallPolicyRuleCondition & {
  /**
   * Array of FirewallPolicyRuleConditionNetworkProtocols.
   */
  ipProtocols?: FirewallPolicyRuleConditionNetworkProtocol[];
  /**
   * List of source IP addresses for this rule.
   */
  sourceAddresses?: string[];
  /**
   * List of destination IP addresses or Service Tags.
   */
  destinationAddresses?: string[];
  /**
   * List of destination ports.
   */
  destinationPorts?: string[];
  /**
   * List of source IpGroups for this rule.
   */
  sourceIpGroups?: string[];
  /**
   * Terminate TLS connections for this rule.
   */
  terminateTLS?: boolean;
};

/**
 * Rule condition of type network.
 */
export type NetworkRuleCondition = FirewallPolicyRuleCondition & {
  /**
   * Array of FirewallPolicyRuleConditionNetworkProtocols.
   */
  ipProtocols?: FirewallPolicyRuleConditionNetworkProtocol[];
  /**
   * List of source IP addresses for this rule.
   */
  sourceAddresses?: string[];
  /**
   * List of destination IP addresses or Service Tags.
   */
  destinationAddresses?: string[];
  /**
   * List of destination ports.
   */
  destinationPorts?: string[];
  /**
   * List of source IpGroups for this rule.
   */
  sourceIpGroups?: string[];
  /**
   * List of destination IpGroups for this rule.
   */
  destinationIpGroups?: string[];
};
/**
 * Defines values for ApplicationGatewaySkuName.
 */
export type ApplicationGatewaySkuName =
  | "Standard_Small"
  | "Standard_Medium"
  | "Standard_Large"
  | "WAF_Medium"
  | "WAF_Large"
  | "Standard_v2"
  | "WAF_v2";
/**
 * Defines values for ApplicationGatewayTier.
 */
export type ApplicationGatewayTier =
  | "Standard"
  | "WAF"
  | "Standard_v2"
  | "WAF_v2";
/**
 * Defines values for ApplicationGatewaySslProtocol.
 */
export type ApplicationGatewaySslProtocol = "TLSv1_0" | "TLSv1_1" | "TLSv1_2";
/**
 * Defines values for ApplicationGatewaySslPolicyType.
 */
export type ApplicationGatewaySslPolicyType = "Predefined" | "Custom";
/**
 * Defines values for ApplicationGatewaySslPolicyName.
 */
export type ApplicationGatewaySslPolicyName =
  | "AppGwSslPolicy20150501"
  | "AppGwSslPolicy20170401"
  | "AppGwSslPolicy20170401S";
/**
 * Defines values for ApplicationGatewaySslCipherSuite.
 */
export type ApplicationGatewaySslCipherSuite =
  | "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
  | "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
  | "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
  | "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
  | "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384"
  | "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"
  | "TLS_DHE_RSA_WITH_AES_256_CBC_SHA"
  | "TLS_DHE_RSA_WITH_AES_128_CBC_SHA"
  | "TLS_RSA_WITH_AES_256_GCM_SHA384"
  | "TLS_RSA_WITH_AES_128_GCM_SHA256"
  | "TLS_RSA_WITH_AES_256_CBC_SHA256"
  | "TLS_RSA_WITH_AES_128_CBC_SHA256"
  | "TLS_RSA_WITH_AES_256_CBC_SHA"
  | "TLS_RSA_WITH_AES_128_CBC_SHA"
  | "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
  | "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
  | "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"
  | "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
  | "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
  | "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"
  | "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256"
  | "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"
  | "TLS_DHE_DSS_WITH_AES_256_CBC_SHA"
  | "TLS_DHE_DSS_WITH_AES_128_CBC_SHA"
  | "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
  | "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"
  | "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
  | "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";
/**
 * Defines values for ApplicationGatewayOperationalState.
 */
export type ApplicationGatewayOperationalState =
  | "Stopped"
  | "Starting"
  | "Running"
  | "Stopping";
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState =
  | "Succeeded"
  | "Updating"
  | "Deleting"
  | "Failed";
/**
 * Defines values for IPAllocationMethod.
 */
export type IPAllocationMethod = "Static" | "Dynamic";
/**
 * Defines values for ApplicationGatewayProtocol.
 */
export type ApplicationGatewayProtocol = "Http" | "Https";
/**
 * Defines values for IPVersion.
 */
export type IPVersion = "IPv4" | "IPv6";
/**
 * Defines values for SecurityRuleProtocol.
 */
export type SecurityRuleProtocol = "Tcp" | "Udp" | "Icmp" | "Esp" | "*" | "Ah";
/**
 * Defines values for SecurityRuleAccess.
 */
export type SecurityRuleAccess = "Allow" | "Deny";
/**
 * Defines values for SecurityRuleDirection.
 */
export type SecurityRuleDirection = "Inbound" | "Outbound";
/**
 * Defines values for FlowLogFormatType.
 */
export type FlowLogFormatType = "JSON";
/**
 * Defines values for RouteNextHopType.
 */
export type RouteNextHopType =
  | "VirtualNetworkGateway"
  | "VnetLocal"
  | "Internet"
  | "VirtualAppliance"
  | "None";
/**
 * Defines values for PublicIPAddressSkuName.
 */
export type PublicIPAddressSkuName = "Basic" | "Standard";
/**
 * Defines values for DdosSettingsProtectionCoverage.
 */
export type DdosSettingsProtectionCoverage = "Basic" | "Standard";
/**
 * Defines values for VirtualNetworkPeeringState.
 */
export type VirtualNetworkPeeringState =
  | "Initiated"
  | "Connected"
  | "Disconnected";
/**
 * Defines values for TransportProtocol.
 */
export type TransportProtocol = "Udp" | "Tcp" | "All";
/**
 * Defines values for ApplicationGatewayCookieBasedAffinity.
 */
export type ApplicationGatewayCookieBasedAffinity = "Enabled" | "Disabled";
/**
 * Defines values for ApplicationGatewayCustomErrorStatusCode.
 */
export type ApplicationGatewayCustomErrorStatusCode =
  | "HttpStatus403"
  | "HttpStatus502";
/**
 * Defines values for ApplicationGatewayRequestRoutingRuleType.
 */
export type ApplicationGatewayRequestRoutingRuleType =
  | "Basic"
  | "PathBasedRouting";
/**
 * Defines values for ApplicationGatewayRedirectType.
 */
export type ApplicationGatewayRedirectType =
  | "Permanent"
  | "Found"
  | "SeeOther"
  | "Temporary";
/**
 * Defines values for ApplicationGatewayFirewallMode.
 */
export type ApplicationGatewayFirewallMode = "Detection" | "Prevention";
/**
 * Defines values for ApplicationGatewayBackendHealthServerHealth.
 */
export type ApplicationGatewayBackendHealthServerHealth =
  | "Unknown"
  | "Up"
  | "Down"
  | "Partial"
  | "Draining";
/**
 * Defines values for AzureFirewallRCActionType.
 */
export type AzureFirewallRCActionType = "Allow" | "Deny";
/**
 * Defines values for AzureFirewallApplicationRuleProtocolType.
 */
export type AzureFirewallApplicationRuleProtocolType =
  | "Http"
  | "Https"
  | "Mssql";
/**
 * Defines values for AzureFirewallNatRCActionType.
 */
export type AzureFirewallNatRCActionType = "Snat" | "Dnat";
/**
 * Defines values for AzureFirewallNetworkRuleProtocol.
 */
export type AzureFirewallNetworkRuleProtocol = "TCP" | "UDP" | "Any" | "ICMP";
/**
 * Defines values for AzureFirewallThreatIntelMode.
 */
export type AzureFirewallThreatIntelMode = "Alert" | "Deny" | "Off";
/**
 * Defines values for AzureFirewallSkuName.
 */
export type AzureFirewallSkuName = "AZFW_VNet" | "AZFW_Hub";
/**
 * Defines values for AzureFirewallSkuTier.
 */
export type AzureFirewallSkuTier = "Standard" | "Premium";
/**
 * Defines values for BastionConnectProtocol.
 */
export type BastionConnectProtocol = "SSH" | "RDP";
/**
 * Defines values for DdosCustomPolicyProtocol.
 */
export type DdosCustomPolicyProtocol = "Tcp" | "Udp" | "Syn";
/**
 * Defines values for DdosCustomPolicyTriggerSensitivityOverride.
 */
export type DdosCustomPolicyTriggerSensitivityOverride =
  | "Relaxed"
  | "Low"
  | "Default"
  | "High";
/**
 * Defines values for AuthorizationUseStatus.
 */
export type AuthorizationUseStatus = "Available" | "InUse";
/**
 * Defines values for ExpressRoutePeeringType.
 */
export type ExpressRoutePeeringType =
  | "AzurePublicPeering"
  | "AzurePrivatePeering"
  | "MicrosoftPeering";
/**
 * Defines values for ExpressRoutePeeringState.
 */
export type ExpressRoutePeeringState = "Disabled" | "Enabled";
/**
 * Defines values for ExpressRouteCircuitPeeringAdvertisedPublicPrefixState.
 */
export type ExpressRouteCircuitPeeringAdvertisedPublicPrefixState =
  | "NotConfigured"
  | "Configuring"
  | "Configured"
  | "ValidationNeeded";
/**
 * Defines values for ExpressRouteCircuitPeeringState.
 */
export type ExpressRouteCircuitPeeringState = "Disabled" | "Enabled";
/**
 * Defines values for CircuitConnectionStatus.
 */
export type CircuitConnectionStatus =
  | "Connected"
  | "Connecting"
  | "Disconnected";
/**
 * Defines values for ExpressRouteCircuitSkuTier.
 */
export type ExpressRouteCircuitSkuTier =
  | "Standard"
  | "Premium"
  | "Basic"
  | "Local";
/**
 * Defines values for ExpressRouteCircuitSkuFamily.
 */
export type ExpressRouteCircuitSkuFamily = "UnlimitedData" | "MeteredData";
/**
 * Defines values for ServiceProviderProvisioningState.
 */
export type ServiceProviderProvisioningState =
  | "NotProvisioned"
  | "Provisioning"
  | "Provisioned"
  | "Deprovisioning";
/**
 * Defines values for ExpressRoutePortsEncapsulation.
 */
export type ExpressRoutePortsEncapsulation = "Dot1Q" | "QinQ";
/**
 * Defines values for ExpressRouteLinkConnectorType.
 */
export type ExpressRouteLinkConnectorType = "LC" | "SC";
/**
 * Defines values for ExpressRouteLinkAdminState.
 */
export type ExpressRouteLinkAdminState = "Enabled" | "Disabled";
/**
 * Defines values for ExpressRouteLinkMacSecCipher.
 */
export type ExpressRouteLinkMacSecCipher = "gcm-aes-128" | "gcm-aes-256";
/**
 * Defines values for FirewallPolicyIntrusionSystemMode.
 */
export type FirewallPolicyIntrusionSystemMode = "Enabled" | "Disabled";
/**
 * Defines values for FirewallPolicyRuleType.
 */
export type FirewallPolicyRuleType =
  | "FirewallPolicyNatRule"
  | "FirewallPolicyFilterRule";
/**
 * Defines values for IpAllocationType.
 */
export type IpAllocationType = "Undefined" | "Hypernet";
/**
 * Defines values for LoadBalancerSkuName.
 */
export type LoadBalancerSkuName = "Basic" | "Standard";
/**
 * Defines values for LoadDistribution.
 */
export type LoadDistribution = "Default" | "SourceIP" | "SourceIPProtocol";
/**
 * Defines values for ProbeProtocol.
 */
export type ProbeProtocol = "Http" | "Tcp" | "Https";
/**
 * Defines values for LoadBalancerOutboundRuleProtocol.
 */
export type LoadBalancerOutboundRuleProtocol = "Tcp" | "Udp" | "All";
/**
 * Defines values for NatGatewaySkuName.
 */
export type NatGatewaySkuName = "Standard";
/**
 * Defines values for EffectiveRouteSource.
 */
export type EffectiveRouteSource =
  | "Unknown"
  | "User"
  | "VirtualNetworkGateway"
  | "Default";
/**
 * Defines values for EffectiveRouteState.
 */
export type EffectiveRouteState = "Active" | "Invalid";
/**
 * Defines values for EffectiveSecurityRuleProtocol.
 */
export type EffectiveSecurityRuleProtocol = "Tcp" | "Udp" | "All";
/**
 * Defines values for AssociationType.
 */
export type AssociationType = "Associated" | "Contains";
/**
 * Defines values for Direction.
 */
export type Direction = "Inbound" | "Outbound";
/**
 * Defines values for IpFlowProtocol.
 */
export type IpFlowProtocol = "TCP" | "UDP";
/**
 * Defines values for Access.
 */
export type Access = "Allow" | "Deny";
/**
 * Defines values for NextHopType.
 */
export type NextHopType =
  | "Internet"
  | "VirtualAppliance"
  | "VirtualNetworkGateway"
  | "VnetLocal"
  | "HyperNetGateway"
  | "None";
/**
 * Defines values for PcProtocol.
 */
export type PcProtocol = "TCP" | "UDP" | "Any";
/**
 * Defines values for PcStatus.
 */
export type PcStatus =
  | "NotStarted"
  | "Running"
  | "Stopped"
  | "Error"
  | "Unknown";
/**
 * Defines values for PcError.
 */
export type PcError =
  | "InternalError"
  | "AgentStopped"
  | "CaptureFailed"
  | "LocalFileFailed"
  | "StorageFailed";
/**
 * Defines values for Protocol.
 */
export type Protocol = "Tcp" | "Http" | "Https" | "Icmp";
/**
 * Defines values for HttpMethod.
 */
export type HttpMethod = "Get";
/**
 * Defines values for Origin.
 */
export type Origin = "Local" | "Inbound" | "Outbound";
/**
 * Defines values for Severity.
 */
export type Severity = "Error" | "Warning";
/**
 * Defines values for IssueType.
 */
export type IssueType =
  | "Unknown"
  | "AgentStopped"
  | "GuestFirewall"
  | "DnsResolution"
  | "SocketBind"
  | "NetworkSecurityRule"
  | "UserDefinedRoute"
  | "PortThrottled"
  | "Platform";
/**
 * Defines values for ConnectionStatus.
 */
export type ConnectionStatus =
  | "Unknown"
  | "Connected"
  | "Disconnected"
  | "Degraded";
/**
 * Defines values for VerbosityLevel.
 */
export type VerbosityLevel = "Normal" | "Minimum" | "Full";
/**
 * Defines values for ConnectionMonitorEndpointFilterType.
 */
export type ConnectionMonitorEndpointFilterType = "Include";
/**
 * Defines values for ConnectionMonitorEndpointFilterItemType.
 */
export type ConnectionMonitorEndpointFilterItemType = "AgentAddress";
/**
 * Defines values for ConnectionMonitorTestConfigurationProtocol.
 */
export type ConnectionMonitorTestConfigurationProtocol =
  | "Tcp"
  | "Http"
  | "Icmp";
/**
 * Defines values for PreferredIPVersion.
 */
export type PreferredIPVersion = "IPv4" | "IPv6";
/**
 * Defines values for HttpConfigurationMethod.
 */
export type HttpConfigurationMethod = "Get" | "Post";
/**
 * Defines values for OutputType.
 */
export type OutputType = "Workspace";
/**
 * Defines values for ConnectionMonitorType.
 */
export type ConnectionMonitorType = "MultiEndpoint" | "SingleSourceDestination";
/**
 * Defines values for ConnectionMonitorSourceStatus.
 */
export type ConnectionMonitorSourceStatus = "Unknown" | "Active" | "Inactive";
/**
 * Defines values for ConnectionState.
 */
export type ConnectionState = "Reachable" | "Unreachable" | "Unknown";
/**
 * Defines values for EvaluationState.
 */
export type EvaluationState = "NotStarted" | "InProgress" | "Completed";
/**
 * Defines values for PublicIPPrefixSkuName.
 */
export type PublicIPPrefixSkuName = "Standard";
/**
 * Defines values for RouteFilterRuleType.
 */
export type RouteFilterRuleType = "Community";
/**
 * Defines values for SecurityProviderName.
 */
export type SecurityProviderName = "ZScaler" | "IBoss" | "Checkpoint";
/**
 * Defines values for SecurityPartnerProviderConnectionStatus.
 */
export type SecurityPartnerProviderConnectionStatus =
  | "Unknown"
  | "PartiallyConnected"
  | "Connected"
  | "NotConnected";
/**
 * Defines values for UsageUnit.
 */
export type UsageUnit = "Count";
/**
 * Defines values for VirtualNetworkGatewayType.
 */
export type VirtualNetworkGatewayType = "Vpn" | "ExpressRoute";
/**
 * Defines values for VpnType.
 */
export type VpnType = "PolicyBased" | "RouteBased";
/**
 * Defines values for VpnGatewayGeneration.
 */
export type VpnGatewayGeneration = "None" | "Generation1" | "Generation2";
/**
 * Defines values for VirtualNetworkGatewaySkuName.
 */
export type VirtualNetworkGatewaySkuName =
  | "Basic"
  | "HighPerformance"
  | "Standard"
  | "UltraPerformance"
  | "VpnGw1"
  | "VpnGw2"
  | "VpnGw3"
  | "VpnGw4"
  | "VpnGw5"
  | "VpnGw1AZ"
  | "VpnGw2AZ"
  | "VpnGw3AZ"
  | "VpnGw4AZ"
  | "VpnGw5AZ"
  | "ErGw1AZ"
  | "ErGw2AZ"
  | "ErGw3AZ";
/**
 * Defines values for VirtualNetworkGatewaySkuTier.
 */
export type VirtualNetworkGatewaySkuTier =
  | "Basic"
  | "HighPerformance"
  | "Standard"
  | "UltraPerformance"
  | "VpnGw1"
  | "VpnGw2"
  | "VpnGw3"
  | "VpnGw4"
  | "VpnGw5"
  | "VpnGw1AZ"
  | "VpnGw2AZ"
  | "VpnGw3AZ"
  | "VpnGw4AZ"
  | "VpnGw5AZ"
  | "ErGw1AZ"
  | "ErGw2AZ"
  | "ErGw3AZ";
/**
 * Defines values for VpnClientProtocol.
 */
export type VpnClientProtocol = "IkeV2" | "SSTP" | "OpenVPN";
/**
 * Defines values for IpsecEncryption.
 */
export type IpsecEncryption =
  | "None"
  | "DES"
  | "DES3"
  | "AES128"
  | "AES192"
  | "AES256"
  | "GCMAES128"
  | "GCMAES192"
  | "GCMAES256";
/**
 * Defines values for IpsecIntegrity.
 */
export type IpsecIntegrity =
  | "MD5"
  | "SHA1"
  | "SHA256"
  | "GCMAES128"
  | "GCMAES192"
  | "GCMAES256";
/**
 * Defines values for IkeEncryption.
 */
export type IkeEncryption =
  | "DES"
  | "DES3"
  | "AES128"
  | "AES192"
  | "AES256"
  | "GCMAES256"
  | "GCMAES128";
/**
 * Defines values for IkeIntegrity.
 */
export type IkeIntegrity =
  | "MD5"
  | "SHA1"
  | "SHA256"
  | "SHA384"
  | "GCMAES256"
  | "GCMAES128";
/**
 * Defines values for DhGroup.
 */
export type DhGroup =
  | "None"
  | "DHGroup1"
  | "DHGroup2"
  | "DHGroup14"
  | "DHGroup2048"
  | "ECP256"
  | "ECP384"
  | "DHGroup24";
/**
 * Defines values for PfsGroup.
 */
export type PfsGroup =
  | "None"
  | "PFS1"
  | "PFS2"
  | "PFS2048"
  | "ECP256"
  | "ECP384"
  | "PFS24"
  | "PFS14"
  | "PFSMM";
/**
 * Defines values for VirtualNetworkGatewayConnectionType.
 */
export type VirtualNetworkGatewayConnectionType =
  | "IPsec"
  | "Vnet2Vnet"
  | "ExpressRoute"
  | "VPNClient";
/**
 * Defines values for VirtualNetworkGatewayConnectionProtocol.
 */
export type VirtualNetworkGatewayConnectionProtocol = "IKEv2" | "IKEv1";
/**
 * Defines values for VirtualNetworkGatewayConnectionStatus.
 */
export type VirtualNetworkGatewayConnectionStatus =
  | "Unknown"
  | "Connecting"
  | "Connected"
  | "NotConnected";
/**
 * Defines values for ProcessorArchitecture.
 */
export type ProcessorArchitecture = "Amd64" | "X86";
/**
 * Defines values for AuthenticationMethod.
 */
export type AuthenticationMethod = "EAPTLS" | "EAPMSCHAPv2";
/**
 * Defines values for BgpPeerState.
 */
export type BgpPeerState =
  | "Unknown"
  | "Stopped"
  | "Idle"
  | "Connecting"
  | "Connected";
/**
 * Defines values for OfficeTrafficCategory.
 */
export type OfficeTrafficCategory =
  | "Optimize"
  | "OptimizeAndAllow"
  | "All"
  | "None";
/**
 * Defines values for VirtualWanSecurityProviderType.
 */
export type VirtualWanSecurityProviderType = "External" | "Native";
/**
 * Defines values for VpnGatewayTunnelingProtocol.
 */
export type VpnGatewayTunnelingProtocol = "IkeV2" | "OpenVPN";
/**
 * Defines values for VpnAuthenticationType.
 */
export type VpnAuthenticationType = "Certificate" | "Radius" | "AAD";
/**
 * Defines values for VpnConnectionStatus.
 */
export type VpnConnectionStatus =
  | "Unknown"
  | "Connecting"
  | "Connected"
  | "NotConnected";
/**
 * Defines values for WebApplicationFirewallEnabledState.
 */
export type WebApplicationFirewallEnabledState = "Disabled" | "Enabled";
/**
 * Defines values for WebApplicationFirewallMode.
 */
export type WebApplicationFirewallMode = "Prevention" | "Detection";
/**
 * Defines values for WebApplicationFirewallRuleType.
 */
export type WebApplicationFirewallRuleType = "MatchRule" | "Invalid";
/**
 * Defines values for WebApplicationFirewallMatchVariable.
 */
export type WebApplicationFirewallMatchVariable =
  | "RemoteAddr"
  | "RequestMethod"
  | "QueryString"
  | "PostArgs"
  | "RequestUri"
  | "RequestHeaders"
  | "RequestBody"
  | "RequestCookies";
/**
 * Defines values for WebApplicationFirewallOperator.
 */
export type WebApplicationFirewallOperator =
  | "IPMatch"
  | "Equal"
  | "Contains"
  | "LessThan"
  | "GreaterThan"
  | "LessThanOrEqual"
  | "GreaterThanOrEqual"
  | "BeginsWith"
  | "EndsWith"
  | "Regex"
  | "GeoMatch";
/**
 * Defines values for WebApplicationFirewallTransform.
 */
export type WebApplicationFirewallTransform =
  | "Lowercase"
  | "Trim"
  | "UrlDecode"
  | "UrlEncode"
  | "RemoveNulls"
  | "HtmlEntityDecode";
/**
 * Defines values for WebApplicationFirewallAction.
 */
export type WebApplicationFirewallAction = "Allow" | "Block" | "Log";
/**
 * Defines values for WebApplicationFirewallPolicyResourceState.
 */
export type WebApplicationFirewallPolicyResourceState =
  | "Creating"
  | "Enabling"
  | "Enabled"
  | "Disabling"
  | "Disabled"
  | "Deleting";
/**
 * Defines values for OwaspCrsExclusionEntryMatchVariable.
 */
export type OwaspCrsExclusionEntryMatchVariable =
  | "RequestHeaderNames"
  | "RequestCookieNames"
  | "RequestArgNames";
/**
 * Defines values for OwaspCrsExclusionEntrySelectorMatchOperator.
 */
export type OwaspCrsExclusionEntrySelectorMatchOperator =
  | "Equals"
  | "Contains"
  | "StartsWith"
  | "EndsWith"
  | "EqualsAny";
/**
 * Defines values for ManagedRuleEnabledState.
 */
export type ManagedRuleEnabledState = "Disabled";
/**
 * Defines values for FirewallPolicyNatRuleActionType.
 */
export type FirewallPolicyNatRuleActionType = "DNAT";
/**
 * Defines values for FirewallPolicyRuleConditionType.
 */
export type FirewallPolicyRuleConditionType =
  | "ApplicationRuleCondition"
  | "NetworkRuleCondition"
  | "NatRuleCondition";
/**
 * Defines values for FirewallPolicyFilterRuleActionType.
 */
export type FirewallPolicyFilterRuleActionType = "Allow" | "Deny";
/**
 * Defines values for FirewallPolicyRuleConditionApplicationProtocolType.
 */
export type FirewallPolicyRuleConditionApplicationProtocolType =
  | "Http"
  | "Https";
/**
 * Defines values for FirewallPolicyRuleConditionNetworkProtocol.
 */
export type FirewallPolicyRuleConditionNetworkProtocol =
  | "TCP"
  | "UDP"
  | "Any"
  | "ICMP";
/**
 * Defines values for NetworkOperationStatus.
 */
export type NetworkOperationStatus = "InProgress" | "Succeeded" | "Failed";
/**
 * Defines values for TunnelConnectionStatus.
 */
export type TunnelConnectionStatus =
  | "Unknown"
  | "Connecting"
  | "Connected"
  | "NotConnected";
/**
 * Defines values for HubVirtualNetworkConnectionStatus.
 */
export type HubVirtualNetworkConnectionStatus =
  | "Unknown"
  | "Connecting"
  | "Connected"
  | "NotConnected";
/**
 * Defines values for ResourceIdentityType.
 */
export type ResourceIdentityType =
  | "SystemAssigned"
  | "UserAssigned"
  | "SystemAssigned, UserAssigned"
  | "None";

/**
 * Contains response data for the get operation.
 */
export type ApplicationGatewaysGetResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGateway;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApplicationGatewaysCreateOrUpdateResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGateway;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type ApplicationGatewaysUpdateTagsResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGateway;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ApplicationGatewaysListResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGatewayListResult;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type ApplicationGatewaysListAllResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGatewayListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ApplicationGatewaysBackendHealthOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands BackendAddressPool and BackendHttpSettings referenced in backend health.
   */
  expand?: string;
}

/**
 * Contains response data for the backendHealth operation.
 */
export type ApplicationGatewaysBackendHealthResponse = ApplicationGatewayBackendHealth & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGatewayBackendHealth;
  };
};

/**
 * Optional parameters.
 */
export interface ApplicationGatewaysBackendHealthOnDemandOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands BackendAddressPool and BackendHttpSettings referenced in backend health.
   */
  expand?: string;
}

/**
 * Contains response data for the backendHealthOnDemand operation.
 */
export type ApplicationGatewaysBackendHealthOnDemandResponse = ApplicationGatewayBackendHealthOnDemand & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGatewayBackendHealthOnDemand;
  };
};

/**
 * Contains response data for the listAvailableServerVariables operation.
 */
export type ApplicationGatewaysListAvailableServerVariablesResponse = {
  /**
   * The parsed response body.
   */
  body: string[];

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string[];
  };
};

/**
 * Contains response data for the listAvailableRequestHeaders operation.
 */
export type ApplicationGatewaysListAvailableRequestHeadersResponse = {
  /**
   * The parsed response body.
   */
  body: string[];

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string[];
  };
};

/**
 * Contains response data for the listAvailableResponseHeaders operation.
 */
export type ApplicationGatewaysListAvailableResponseHeadersResponse = {
  /**
   * The parsed response body.
   */
  body: string[];

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string[];
  };
};

/**
 * Contains response data for the listAvailableWafRuleSets operation.
 */
export type ApplicationGatewaysListAvailableWafRuleSetsResponse = ApplicationGatewayAvailableWafRuleSetsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGatewayAvailableWafRuleSetsResult;
  };
};

/**
 * Contains response data for the listAvailableSslOptions operation.
 */
export type ApplicationGatewaysListAvailableSslOptionsResponse = ApplicationGatewayAvailableSslOptions & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGatewayAvailableSslOptions;
  };
};

/**
 * Contains response data for the listAvailableSslPredefinedPolicies operation.
 */
export type ApplicationGatewaysListAvailableSslPredefinedPoliciesResponse = ApplicationGatewayAvailableSslPredefinedPolicies & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGatewayAvailableSslPredefinedPolicies;
  };
};

/**
 * Contains response data for the getSslPredefinedPolicy operation.
 */
export type ApplicationGatewaysGetSslPredefinedPolicyResponse = ApplicationGatewaySslPredefinedPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGatewaySslPredefinedPolicy;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ApplicationGatewaysListNextResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGatewayListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type ApplicationGatewaysListAllNextResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGatewayListResult;
  };
};

/**
 * Contains response data for the listAvailableSslPredefinedPoliciesNext operation.
 */
export type ApplicationGatewaysListAvailableSslPredefinedPoliciesNextResponse = ApplicationGatewayAvailableSslPredefinedPolicies & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationGatewayAvailableSslPredefinedPolicies;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApplicationSecurityGroupsGetResponse = ApplicationSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationSecurityGroup;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApplicationSecurityGroupsCreateOrUpdateResponse = ApplicationSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationSecurityGroup;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type ApplicationSecurityGroupsUpdateTagsResponse = ApplicationSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationSecurityGroup;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type ApplicationSecurityGroupsListAllResponse = ApplicationSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationSecurityGroupListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ApplicationSecurityGroupsListResponse = ApplicationSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationSecurityGroupListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type ApplicationSecurityGroupsListAllNextResponse = ApplicationSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationSecurityGroupListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ApplicationSecurityGroupsListNextResponse = ApplicationSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationSecurityGroupListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AvailableDelegationsListResponse = AvailableDelegationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailableDelegationsResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type AvailableDelegationsListNextResponse = AvailableDelegationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailableDelegationsResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AvailableResourceGroupDelegationsListResponse = AvailableDelegationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailableDelegationsResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type AvailableResourceGroupDelegationsListNextResponse = AvailableDelegationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailableDelegationsResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AvailableServiceAliasesListResponse = AvailableServiceAliasesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailableServiceAliasesResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type AvailableServiceAliasesListByResourceGroupResponse = AvailableServiceAliasesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailableServiceAliasesResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type AvailableServiceAliasesListNextResponse = AvailableServiceAliasesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailableServiceAliasesResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type AvailableServiceAliasesListByResourceGroupNextResponse = AvailableServiceAliasesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailableServiceAliasesResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AzureFirewallsGetResponse = AzureFirewall & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureFirewall;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AzureFirewallsCreateOrUpdateResponse = AzureFirewall & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureFirewall;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type AzureFirewallsUpdateTagsResponse = AzureFirewall & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureFirewall;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AzureFirewallsListResponse = AzureFirewallListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureFirewallListResult;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type AzureFirewallsListAllResponse = AzureFirewallListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureFirewallListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type AzureFirewallsListNextResponse = AzureFirewallListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureFirewallListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type AzureFirewallsListAllNextResponse = AzureFirewallListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureFirewallListResult;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type AzureFirewallFqdnTagsListAllResponse = AzureFirewallFqdnTagListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureFirewallFqdnTagListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type AzureFirewallFqdnTagsListAllNextResponse = AzureFirewallFqdnTagListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureFirewallFqdnTagListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BastionHostsGetResponse = BastionHost & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionHost;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type BastionHostsCreateOrUpdateResponse = BastionHost & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionHost;
  };
};

/**
 * Contains response data for the list operation.
 */
export type BastionHostsListResponse = BastionHostListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionHostListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type BastionHostsListByResourceGroupResponse = BastionHostListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionHostListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type BastionHostsListNextResponse = BastionHostListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionHostListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type BastionHostsListByResourceGroupNextResponse = BastionHostListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionHostListResult;
  };
};

/**
 * Contains response data for the putBastionShareableLink operation.
 */
export type NetworkManagementClientPutBastionShareableLinkResponse = BastionShareableLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionShareableLinkListResult;
  };
};

/**
 * Contains response data for the getBastionShareableLink operation.
 */
export type NetworkManagementClientGetBastionShareableLinkResponse = BastionShareableLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionShareableLinkListResult;
  };
};

/**
 * Contains response data for the getActiveSessions operation.
 */
export type NetworkManagementClientGetActiveSessionsResponse = BastionActiveSessionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionActiveSessionListResult;
  };
};

/**
 * Contains response data for the disconnectActiveSessions operation.
 */
export type NetworkManagementClientDisconnectActiveSessionsResponse = BastionSessionDeleteResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionSessionDeleteResult;
  };
};

/**
 * Contains response data for the checkDnsNameAvailability operation.
 */
export type NetworkManagementClientCheckDnsNameAvailabilityResponse = DnsNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DnsNameAvailabilityResult;
  };
};

/**
 * Contains response data for the supportedSecurityProviders operation.
 */
export type NetworkManagementClientSupportedSecurityProvidersResponse = VirtualWanSecurityProviders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualWanSecurityProviders;
  };
};

/**
 * Contains response data for the generatevirtualwanvpnserverconfigurationvpnprofile operation.
 */
export type NetworkManagementClientGeneratevirtualwanvpnserverconfigurationvpnprofileResponse = VpnProfileResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnProfileResponse;
  };
};

/**
 * Contains response data for the putBastionShareableLinkNext operation.
 */
export type NetworkManagementClientPutBastionShareableLinkNextResponse = BastionShareableLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionShareableLinkListResult;
  };
};

/**
 * Contains response data for the getBastionShareableLinkNext operation.
 */
export type NetworkManagementClientGetBastionShareableLinkNextResponse = BastionShareableLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionShareableLinkListResult;
  };
};

/**
 * Contains response data for the getActiveSessionsNext operation.
 */
export type NetworkManagementClientGetActiveSessionsNextResponse = BastionActiveSessionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionActiveSessionListResult;
  };
};

/**
 * Contains response data for the disconnectActiveSessionsNext operation.
 */
export type NetworkManagementClientDisconnectActiveSessionsNextResponse = BastionSessionDeleteResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BastionSessionDeleteResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DdosCustomPoliciesGetResponse = DdosCustomPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DdosCustomPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DdosCustomPoliciesCreateOrUpdateResponse = DdosCustomPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DdosCustomPolicy;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type DdosCustomPoliciesUpdateTagsResponse = DdosCustomPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DdosCustomPolicy;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DdosProtectionPlansGetResponse = DdosProtectionPlan & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DdosProtectionPlan;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DdosProtectionPlansCreateOrUpdateResponse = DdosProtectionPlan & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DdosProtectionPlan;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type DdosProtectionPlansUpdateTagsResponse = DdosProtectionPlan & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DdosProtectionPlan;
  };
};

/**
 * Contains response data for the list operation.
 */
export type DdosProtectionPlansListResponse = DdosProtectionPlanListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DdosProtectionPlanListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DdosProtectionPlansListByResourceGroupResponse = DdosProtectionPlanListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DdosProtectionPlanListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type DdosProtectionPlansListNextResponse = DdosProtectionPlanListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DdosProtectionPlanListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type DdosProtectionPlansListByResourceGroupNextResponse = DdosProtectionPlanListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DdosProtectionPlanListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AvailableEndpointServicesListResponse = EndpointServicesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EndpointServicesListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type AvailableEndpointServicesListNextResponse = EndpointServicesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EndpointServicesListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitAuthorizationsGetResponse = ExpressRouteCircuitAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitAuthorization;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitAuthorizationsCreateOrUpdateResponse = ExpressRouteCircuitAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitAuthorization;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCircuitAuthorizationsListResponse = AuthorizationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCircuitAuthorizationsListNextResponse = AuthorizationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitPeeringsGetResponse = ExpressRouteCircuitPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitPeering;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitPeeringsCreateOrUpdateResponse = ExpressRouteCircuitPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitPeering;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCircuitPeeringsListResponse = ExpressRouteCircuitPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitPeeringListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCircuitPeeringsListNextResponse = ExpressRouteCircuitPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitPeeringListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitConnectionsGetResponse = ExpressRouteCircuitConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitConnection;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitConnectionsCreateOrUpdateResponse = ExpressRouteCircuitConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitConnection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCircuitConnectionsListResponse = ExpressRouteCircuitConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitConnectionListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCircuitConnectionsListNextResponse = ExpressRouteCircuitConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitConnectionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PeerExpressRouteCircuitConnectionsGetResponse = PeerExpressRouteCircuitConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeerExpressRouteCircuitConnection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PeerExpressRouteCircuitConnectionsListResponse = PeerExpressRouteCircuitConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeerExpressRouteCircuitConnectionListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PeerExpressRouteCircuitConnectionsListNextResponse = PeerExpressRouteCircuitConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeerExpressRouteCircuitConnectionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitsGetResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuit;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitsCreateOrUpdateResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuit;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type ExpressRouteCircuitsUpdateTagsResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuit;
  };
};

/**
 * Contains response data for the listArpTable operation.
 */
export type ExpressRouteCircuitsListArpTableResponse = ExpressRouteCircuitsArpTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitsArpTableListResult;
  };
};

/**
 * Contains response data for the listRoutesTable operation.
 */
export type ExpressRouteCircuitsListRoutesTableResponse = ExpressRouteCircuitsRoutesTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitsRoutesTableListResult;
  };
};

/**
 * Contains response data for the listRoutesTableSummary operation.
 */
export type ExpressRouteCircuitsListRoutesTableSummaryResponse = ExpressRouteCircuitsRoutesTableSummaryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitsRoutesTableSummaryListResult;
  };
};

/**
 * Contains response data for the getStats operation.
 */
export type ExpressRouteCircuitsGetStatsResponse = ExpressRouteCircuitStats & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitStats;
  };
};

/**
 * Contains response data for the getPeeringStats operation.
 */
export type ExpressRouteCircuitsGetPeeringStatsResponse = ExpressRouteCircuitStats & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitStats;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCircuitsListResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitListResult;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type ExpressRouteCircuitsListAllResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCircuitsListNextResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type ExpressRouteCircuitsListAllNextResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteServiceProvidersListResponse = ExpressRouteServiceProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteServiceProviderListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteServiceProvidersListNextResponse = ExpressRouteServiceProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteServiceProviderListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCrossConnectionsListResponse = ExpressRouteCrossConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCrossConnectionListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ExpressRouteCrossConnectionsListByResourceGroupResponse = ExpressRouteCrossConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCrossConnectionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCrossConnectionsGetResponse = ExpressRouteCrossConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCrossConnection;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCrossConnectionsCreateOrUpdateResponse = ExpressRouteCrossConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCrossConnection;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type ExpressRouteCrossConnectionsUpdateTagsResponse = ExpressRouteCrossConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCrossConnection;
  };
};

/**
 * Contains response data for the listArpTable operation.
 */
export type ExpressRouteCrossConnectionsListArpTableResponse = ExpressRouteCircuitsArpTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitsArpTableListResult;
  };
};

/**
 * Contains response data for the listRoutesTableSummary operation.
 */
export type ExpressRouteCrossConnectionsListRoutesTableSummaryResponse = ExpressRouteCrossConnectionsRoutesTableSummaryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCrossConnectionsRoutesTableSummaryListResult;
  };
};

/**
 * Contains response data for the listRoutesTable operation.
 */
export type ExpressRouteCrossConnectionsListRoutesTableResponse = ExpressRouteCircuitsRoutesTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCircuitsRoutesTableListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCrossConnectionsListNextResponse = ExpressRouteCrossConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCrossConnectionListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ExpressRouteCrossConnectionsListByResourceGroupNextResponse = ExpressRouteCrossConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCrossConnectionListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCrossConnectionPeeringsListResponse = ExpressRouteCrossConnectionPeeringList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCrossConnectionPeeringList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCrossConnectionPeeringsGetResponse = ExpressRouteCrossConnectionPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCrossConnectionPeering;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCrossConnectionPeeringsCreateOrUpdateResponse = ExpressRouteCrossConnectionPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCrossConnectionPeering;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCrossConnectionPeeringsListNextResponse = ExpressRouteCrossConnectionPeeringList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteCrossConnectionPeeringList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRoutePortsLocationsListResponse = ExpressRoutePortsLocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRoutePortsLocationListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRoutePortsLocationsGetResponse = ExpressRoutePortsLocation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRoutePortsLocation;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRoutePortsLocationsListNextResponse = ExpressRoutePortsLocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRoutePortsLocationListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRoutePortsGetResponse = ExpressRoutePort & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRoutePort;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRoutePortsCreateOrUpdateResponse = ExpressRoutePort & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRoutePort;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type ExpressRoutePortsUpdateTagsResponse = ExpressRoutePort & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRoutePort;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ExpressRoutePortsListByResourceGroupResponse = ExpressRoutePortListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRoutePortListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRoutePortsListResponse = ExpressRoutePortListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRoutePortListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ExpressRoutePortsListByResourceGroupNextResponse = ExpressRoutePortListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRoutePortListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRoutePortsListNextResponse = ExpressRoutePortListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRoutePortListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteLinksGetResponse = ExpressRouteLink & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteLink;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteLinksListResponse = ExpressRouteLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteLinkListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteLinksListNextResponse = ExpressRouteLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteLinkListResult;
  };
};

/**
 * Optional parameters.
 */
export interface FirewallPoliciesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type FirewallPoliciesGetResponse = FirewallPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type FirewallPoliciesCreateOrUpdateResponse = FirewallPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallPolicy;
  };
};

/**
 * Contains response data for the list operation.
 */
export type FirewallPoliciesListResponse = FirewallPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallPolicyListResult;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type FirewallPoliciesListAllResponse = FirewallPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallPolicyListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type FirewallPoliciesListNextResponse = FirewallPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallPolicyListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type FirewallPoliciesListAllNextResponse = FirewallPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallPolicyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type FirewallPolicyRuleGroupsGetResponse = FirewallPolicyRuleGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallPolicyRuleGroup;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type FirewallPolicyRuleGroupsCreateOrUpdateResponse = FirewallPolicyRuleGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallPolicyRuleGroup;
  };
};

/**
 * Contains response data for the list operation.
 */
export type FirewallPolicyRuleGroupsListResponse = FirewallPolicyRuleGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallPolicyRuleGroupListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type FirewallPolicyRuleGroupsListNextResponse = FirewallPolicyRuleGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallPolicyRuleGroupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface IpAllocationsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type IpAllocationsGetResponse = IpAllocation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpAllocation;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IpAllocationsCreateOrUpdateResponse = IpAllocation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpAllocation;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type IpAllocationsUpdateTagsResponse = IpAllocation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpAllocation;
  };
};

/**
 * Contains response data for the list operation.
 */
export type IpAllocationsListResponse = IpAllocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpAllocationListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type IpAllocationsListByResourceGroupResponse = IpAllocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpAllocationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type IpAllocationsListNextResponse = IpAllocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpAllocationListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type IpAllocationsListByResourceGroupNextResponse = IpAllocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpAllocationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface IpGroupsGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Expands resourceIds (of Firewalls/Network Security Groups etc.) back referenced by the IpGroups resource.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type IpGroupsGetResponse = IpGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpGroup;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IpGroupsCreateOrUpdateResponse = IpGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpGroup;
  };
};

/**
 * Contains response data for the updateGroups operation.
 */
export type IpGroupsUpdateGroupsResponse = IpGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpGroup;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type IpGroupsListByResourceGroupResponse = IpGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpGroupListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type IpGroupsListResponse = IpGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpGroupListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type IpGroupsListByResourceGroupNextResponse = IpGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpGroupListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type IpGroupsListNextResponse = IpGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpGroupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LoadBalancersGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type LoadBalancersGetResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancer;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LoadBalancersCreateOrUpdateResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancer;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type LoadBalancersUpdateTagsResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancer;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type LoadBalancersListAllResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancersListResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type LoadBalancersListAllNextResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancersListNextResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerBackendAddressPoolsListResponse = LoadBalancerBackendAddressPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerBackendAddressPoolListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerBackendAddressPoolsGetResponse = BackendAddressPool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackendAddressPool;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LoadBalancerBackendAddressPoolsCreateOrUpdateResponse = BackendAddressPool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackendAddressPool;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerBackendAddressPoolsListNextResponse = LoadBalancerBackendAddressPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerBackendAddressPoolListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerFrontendIPConfigurationsListResponse = LoadBalancerFrontendIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerFrontendIPConfigurationListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerFrontendIPConfigurationsGetResponse = FrontendIPConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FrontendIPConfiguration;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerFrontendIPConfigurationsListNextResponse = LoadBalancerFrontendIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerFrontendIPConfigurationListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type InboundNatRulesListResponse = InboundNatRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InboundNatRuleListResult;
  };
};

/**
 * Optional parameters.
 */
export interface InboundNatRulesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type InboundNatRulesGetResponse = InboundNatRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InboundNatRule;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type InboundNatRulesCreateOrUpdateResponse = InboundNatRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InboundNatRule;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type InboundNatRulesListNextResponse = InboundNatRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InboundNatRuleListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerLoadBalancingRulesListResponse = LoadBalancerLoadBalancingRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerLoadBalancingRuleListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerLoadBalancingRulesGetResponse = LoadBalancingRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancingRule;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerLoadBalancingRulesListNextResponse = LoadBalancerLoadBalancingRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerLoadBalancingRuleListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerOutboundRulesListResponse = LoadBalancerOutboundRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerOutboundRuleListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerOutboundRulesGetResponse = OutboundRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OutboundRule;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerOutboundRulesListNextResponse = LoadBalancerOutboundRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerOutboundRuleListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerNetworkInterfacesListResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerNetworkInterfacesListNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerProbesListResponse = LoadBalancerProbeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerProbeListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerProbesGetResponse = Probe & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Probe;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerProbesListNextResponse = LoadBalancerProbeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerProbeListResult;
  };
};

/**
 * Optional parameters.
 */
export interface NatGatewaysGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type NatGatewaysGetResponse = NatGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NatGateway;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NatGatewaysCreateOrUpdateResponse = NatGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NatGateway;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type NatGatewaysUpdateTagsResponse = NatGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NatGateway;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type NatGatewaysListAllResponse = NatGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NatGatewayListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type NatGatewaysListResponse = NatGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NatGatewayListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NatGatewaysListAllNextResponse = NatGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NatGatewayListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type NatGatewaysListNextResponse = NatGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NatGatewayListResult;
  };
};

/**
 * Optional parameters.
 */
export interface NetworkInterfacesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type NetworkInterfacesGetResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterface;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkInterfacesCreateOrUpdateResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterface;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type NetworkInterfacesUpdateTagsResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterface;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkInterfacesListAllResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfacesListResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceListResult;
  };
};

/**
 * Contains response data for the getEffectiveRouteTable operation.
 */
export type NetworkInterfacesGetEffectiveRouteTableResponse = EffectiveRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EffectiveRouteListResult;
  };
};

/**
 * Contains response data for the listEffectiveNetworkSecurityGroups operation.
 */
export type NetworkInterfacesListEffectiveNetworkSecurityGroupsResponse = EffectiveNetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EffectiveNetworkSecurityGroupListResult;
  };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMNetworkInterfaces operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceListResult;
  };
};

/**
 * Contains response data for the listVirtualMachineScaleSetNetworkInterfaces operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceListResult;
  };
};

/**
 * Optional parameters.
 */
export interface NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the getVirtualMachineScaleSetNetworkInterface operation.
 */
export type NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterface;
  };
};

/**
 * Optional parameters.
 */
export interface NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the listVirtualMachineScaleSetIpConfigurations operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsResponse = NetworkInterfaceIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceIPConfigurationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the getVirtualMachineScaleSetIpConfiguration operation.
 */
export type NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationResponse = NetworkInterfaceIPConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceIPConfiguration;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NetworkInterfacesListAllNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfacesListNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceListResult;
  };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMNetworkInterfacesNext operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceListResult;
  };
};

/**
 * Contains response data for the listVirtualMachineScaleSetNetworkInterfacesNext operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceListResult;
  };
};

/**
 * Optional parameters.
 */
export interface NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the listVirtualMachineScaleSetIpConfigurationsNext operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsNextResponse = NetworkInterfaceIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceIPConfigurationListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfaceIPConfigurationsListResponse = NetworkInterfaceIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceIPConfigurationListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkInterfaceIPConfigurationsGetResponse = NetworkInterfaceIPConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceIPConfiguration;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfaceIPConfigurationsListNextResponse = NetworkInterfaceIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceIPConfigurationListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfaceLoadBalancersListResponse = NetworkInterfaceLoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceLoadBalancerListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfaceLoadBalancersListNextResponse = NetworkInterfaceLoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceLoadBalancerListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkInterfaceTapConfigurationsGetResponse = NetworkInterfaceTapConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceTapConfiguration;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkInterfaceTapConfigurationsCreateOrUpdateResponse = NetworkInterfaceTapConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceTapConfiguration;
  };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfaceTapConfigurationsListResponse = NetworkInterfaceTapConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceTapConfigurationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfaceTapConfigurationsListNextResponse = NetworkInterfaceTapConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkInterfaceTapConfigurationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface NetworkProfilesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type NetworkProfilesGetResponse = NetworkProfile & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkProfile;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkProfilesCreateOrUpdateResponse = NetworkProfile & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkProfile;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type NetworkProfilesUpdateTagsResponse = NetworkProfile & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkProfile;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkProfilesListAllResponse = NetworkProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkProfileListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkProfilesListResponse = NetworkProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkProfileListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NetworkProfilesListAllNextResponse = NetworkProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkProfileListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkProfilesListNextResponse = NetworkProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkProfileListResult;
  };
};

/**
 * Optional parameters.
 */
export interface NetworkSecurityGroupsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type NetworkSecurityGroupsGetResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkSecurityGroup;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkSecurityGroupsCreateOrUpdateResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkSecurityGroup;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type NetworkSecurityGroupsUpdateTagsResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkSecurityGroup;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkSecurityGroupsListAllResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkSecurityGroupListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkSecurityGroupsListResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkSecurityGroupListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NetworkSecurityGroupsListAllNextResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkSecurityGroupListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkSecurityGroupsListNextResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkSecurityGroupListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SecurityRulesGetResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityRule;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SecurityRulesCreateOrUpdateResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityRule;
  };
};

/**
 * Contains response data for the list operation.
 */
export type SecurityRulesListResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityRuleListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type SecurityRulesListNextResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityRuleListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type DefaultSecurityRulesListResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityRuleListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DefaultSecurityRulesGetResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityRule;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type DefaultSecurityRulesListNextResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityRuleListResult;
  };
};

/**
 * Optional parameters.
 */
export interface NetworkVirtualAppliancesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type NetworkVirtualAppliancesGetResponse = NetworkVirtualAppliance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkVirtualAppliance;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type NetworkVirtualAppliancesUpdateTagsResponse = NetworkVirtualAppliance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkVirtualAppliance;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkVirtualAppliancesCreateOrUpdateResponse = NetworkVirtualAppliance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkVirtualAppliance;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type NetworkVirtualAppliancesListByResourceGroupResponse = NetworkVirtualApplianceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkVirtualApplianceListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkVirtualAppliancesListResponse = NetworkVirtualApplianceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkVirtualApplianceListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type NetworkVirtualAppliancesListByResourceGroupNextResponse = NetworkVirtualApplianceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkVirtualApplianceListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkVirtualAppliancesListNextResponse = NetworkVirtualApplianceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkVirtualApplianceListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkWatchersCreateOrUpdateResponse = NetworkWatcher & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkWatcher;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkWatchersGetResponse = NetworkWatcher & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkWatcher;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type NetworkWatchersUpdateTagsResponse = NetworkWatcher & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkWatcher;
  };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkWatchersListResponse = NetworkWatcherListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkWatcherListResult;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkWatchersListAllResponse = NetworkWatcherListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkWatcherListResult;
  };
};

/**
 * Contains response data for the getTopology operation.
 */
export type NetworkWatchersGetTopologyResponse = Topology & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Topology;
  };
};

/**
 * Contains response data for the verifyIPFlow operation.
 */
export type NetworkWatchersVerifyIPFlowResponse = VerificationIPFlowResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VerificationIPFlowResult;
  };
};

/**
 * Contains response data for the getNextHop operation.
 */
export type NetworkWatchersGetNextHopResponse = NextHopResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NextHopResult;
  };
};

/**
 * Contains response data for the getVMSecurityRules operation.
 */
export type NetworkWatchersGetVMSecurityRulesResponse = SecurityGroupViewResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityGroupViewResult;
  };
};

/**
 * Contains response data for the getTroubleshooting operation.
 */
export type NetworkWatchersGetTroubleshootingResponse = TroubleshootingResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TroubleshootingResult;
  };
};

/**
 * Contains response data for the getTroubleshootingResult operation.
 */
export type NetworkWatchersGetTroubleshootingResultResponse = TroubleshootingResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TroubleshootingResult;
  };
};

/**
 * Contains response data for the setFlowLogConfiguration operation.
 */
export type NetworkWatchersSetFlowLogConfigurationResponse = FlowLogInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FlowLogInformation;
  };
};

/**
 * Contains response data for the getFlowLogStatus operation.
 */
export type NetworkWatchersGetFlowLogStatusResponse = FlowLogInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FlowLogInformation;
  };
};

/**
 * Contains response data for the checkConnectivity operation.
 */
export type NetworkWatchersCheckConnectivityResponse = ConnectivityInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectivityInformation;
  };
};

/**
 * Contains response data for the getAzureReachabilityReport operation.
 */
export type NetworkWatchersGetAzureReachabilityReportResponse = AzureReachabilityReport & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureReachabilityReport;
  };
};

/**
 * Contains response data for the listAvailableProviders operation.
 */
export type NetworkWatchersListAvailableProvidersResponse = AvailableProvidersList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailableProvidersList;
  };
};

/**
 * Contains response data for the getNetworkConfigurationDiagnostic operation.
 */
export type NetworkWatchersGetNetworkConfigurationDiagnosticResponse = NetworkConfigurationDiagnosticResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkConfigurationDiagnosticResponse;
  };
};

/**
 * Contains response data for the create operation.
 */
export type PacketCapturesCreateResponse = PacketCaptureResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PacketCaptureResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PacketCapturesGetResponse = PacketCaptureResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PacketCaptureResult;
  };
};

/**
 * Contains response data for the getStatus operation.
 */
export type PacketCapturesGetStatusResponse = PacketCaptureQueryStatusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PacketCaptureQueryStatusResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PacketCapturesListResponse = PacketCaptureListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PacketCaptureListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ConnectionMonitorsCreateOrUpdateResponse = ConnectionMonitorResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionMonitorResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ConnectionMonitorsGetResponse = ConnectionMonitorResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionMonitorResult;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type ConnectionMonitorsUpdateTagsResponse = ConnectionMonitorResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionMonitorResult;
  };
};

/**
 * Contains response data for the query operation.
 */
export type ConnectionMonitorsQueryResponse = ConnectionMonitorQueryResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionMonitorQueryResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ConnectionMonitorsListResponse = ConnectionMonitorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionMonitorListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type FlowLogsCreateOrUpdateResponse = FlowLog & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FlowLog;
  };
};

/**
 * Contains response data for the get operation.
 */
export type FlowLogsGetResponse = FlowLog & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FlowLog;
  };
};

/**
 * Contains response data for the list operation.
 */
export type FlowLogsListResponse = FlowLogListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FlowLogListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type FlowLogsListNextResponse = FlowLogListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FlowLogListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PrivateEndpointsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type PrivateEndpointsGetResponse = PrivateEndpoint & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpoint;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PrivateEndpointsCreateOrUpdateResponse = PrivateEndpoint & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpoint;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PrivateEndpointsListResponse = PrivateEndpointListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointListResult;
  };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type PrivateEndpointsListBySubscriptionResponse = PrivateEndpointListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PrivateEndpointsListNextResponse = PrivateEndpointListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointListResult;
  };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type PrivateEndpointsListBySubscriptionNextResponse = PrivateEndpointListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AvailablePrivateEndpointTypesListResponse = AvailablePrivateEndpointTypesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailablePrivateEndpointTypesResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type AvailablePrivateEndpointTypesListByResourceGroupResponse = AvailablePrivateEndpointTypesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailablePrivateEndpointTypesResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type AvailablePrivateEndpointTypesListNextResponse = AvailablePrivateEndpointTypesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailablePrivateEndpointTypesResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type AvailablePrivateEndpointTypesListByResourceGroupNextResponse = AvailablePrivateEndpointTypesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailablePrivateEndpointTypesResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PrivateDnsZoneGroupsGetResponse = PrivateDnsZoneGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateDnsZoneGroup;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PrivateDnsZoneGroupsCreateOrUpdateResponse = PrivateDnsZoneGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateDnsZoneGroup;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PrivateDnsZoneGroupsListResponse = PrivateDnsZoneGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateDnsZoneGroupListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PrivateDnsZoneGroupsListNextResponse = PrivateDnsZoneGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateDnsZoneGroupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PrivateLinkServicesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type PrivateLinkServicesGetResponse = PrivateLinkService & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkService;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PrivateLinkServicesCreateOrUpdateResponse = PrivateLinkService & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkService;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PrivateLinkServicesListResponse = PrivateLinkServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkServiceListResult;
  };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type PrivateLinkServicesListBySubscriptionResponse = PrivateLinkServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkServiceListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PrivateLinkServicesGetPrivateEndpointConnectionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the getPrivateEndpointConnection operation.
 */
export type PrivateLinkServicesGetPrivateEndpointConnectionResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnection;
  };
};

/**
 * Contains response data for the updatePrivateEndpointConnection operation.
 */
export type PrivateLinkServicesUpdatePrivateEndpointConnectionResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnection;
  };
};

/**
 * Contains response data for the listPrivateEndpointConnections operation.
 */
export type PrivateLinkServicesListPrivateEndpointConnectionsResponse = PrivateEndpointConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnectionListResult;
  };
};

/**
 * Contains response data for the checkPrivateLinkServiceVisibility operation.
 */
export type PrivateLinkServicesCheckPrivateLinkServiceVisibilityResponse = PrivateLinkServiceVisibility & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkServiceVisibility;
  };
};

/**
 * Contains response data for the checkPrivateLinkServiceVisibilityByResourceGroup operation.
 */
export type PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupResponse = PrivateLinkServiceVisibility & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkServiceVisibility;
  };
};

/**
 * Contains response data for the listAutoApprovedPrivateLinkServices operation.
 */
export type PrivateLinkServicesListAutoApprovedPrivateLinkServicesResponse = AutoApprovedPrivateLinkServicesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AutoApprovedPrivateLinkServicesResult;
  };
};

/**
 * Contains response data for the listAutoApprovedPrivateLinkServicesByResourceGroup operation.
 */
export type PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupResponse = AutoApprovedPrivateLinkServicesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AutoApprovedPrivateLinkServicesResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PrivateLinkServicesListNextResponse = PrivateLinkServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkServiceListResult;
  };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type PrivateLinkServicesListBySubscriptionNextResponse = PrivateLinkServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkServiceListResult;
  };
};

/**
 * Contains response data for the listPrivateEndpointConnectionsNext operation.
 */
export type PrivateLinkServicesListPrivateEndpointConnectionsNextResponse = PrivateEndpointConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnectionListResult;
  };
};

/**
 * Contains response data for the listAutoApprovedPrivateLinkServicesNext operation.
 */
export type PrivateLinkServicesListAutoApprovedPrivateLinkServicesNextResponse = AutoApprovedPrivateLinkServicesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AutoApprovedPrivateLinkServicesResult;
  };
};

/**
 * Contains response data for the listAutoApprovedPrivateLinkServicesByResourceGroupNext operation.
 */
export type PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupNextResponse = AutoApprovedPrivateLinkServicesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AutoApprovedPrivateLinkServicesResult;
  };
};

/**
 * Optional parameters.
 */
export interface PublicIPAddressesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type PublicIPAddressesGetResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPAddress;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PublicIPAddressesCreateOrUpdateResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPAddress;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type PublicIPAddressesUpdateTagsResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPAddress;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type PublicIPAddressesListAllResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPAddressListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PublicIPAddressesListResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPAddressListResult;
  };
};

/**
 * Contains response data for the listVirtualMachineScaleSetPublicIPAddresses operation.
 */
export type PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPAddressListResult;
  };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMPublicIPAddresses operation.
 */
export type PublicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPAddressListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the getVirtualMachineScaleSetPublicIPAddress operation.
 */
export type PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPAddress;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type PublicIPAddressesListAllNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPAddressListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PublicIPAddressesListNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPAddressListResult;
  };
};

/**
 * Contains response data for the listVirtualMachineScaleSetPublicIPAddressesNext operation.
 */
export type PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPAddressListResult;
  };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMPublicIPAddressesNext operation.
 */
export type PublicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPAddressListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PublicIPPrefixesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type PublicIPPrefixesGetResponse = PublicIPPrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPPrefix;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PublicIPPrefixesCreateOrUpdateResponse = PublicIPPrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPPrefix;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type PublicIPPrefixesUpdateTagsResponse = PublicIPPrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPPrefix;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type PublicIPPrefixesListAllResponse = PublicIPPrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPPrefixListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PublicIPPrefixesListResponse = PublicIPPrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPPrefixListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type PublicIPPrefixesListAllNextResponse = PublicIPPrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPPrefixListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PublicIPPrefixesListNextResponse = PublicIPPrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIPPrefixListResult;
  };
};

/**
 * Optional parameters.
 */
export interface RouteFiltersGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced express route bgp peering resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type RouteFiltersGetResponse = RouteFilter & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteFilter;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RouteFiltersCreateOrUpdateResponse = RouteFilter & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteFilter;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type RouteFiltersUpdateTagsResponse = RouteFilter & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteFilter;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type RouteFiltersListByResourceGroupResponse = RouteFilterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteFilterListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type RouteFiltersListResponse = RouteFilterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteFilterListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type RouteFiltersListByResourceGroupNextResponse = RouteFilterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteFilterListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type RouteFiltersListNextResponse = RouteFilterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteFilterListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type RouteFilterRulesGetResponse = RouteFilterRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteFilterRule;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RouteFilterRulesCreateOrUpdateResponse = RouteFilterRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteFilterRule;
  };
};

/**
 * Contains response data for the listByRouteFilter operation.
 */
export type RouteFilterRulesListByRouteFilterResponse = RouteFilterRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteFilterRuleListResult;
  };
};

/**
 * Contains response data for the listByRouteFilterNext operation.
 */
export type RouteFilterRulesListByRouteFilterNextResponse = RouteFilterRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteFilterRuleListResult;
  };
};

/**
 * Optional parameters.
 */
export interface RouteTablesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type RouteTablesGetResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteTable;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RouteTablesCreateOrUpdateResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteTable;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type RouteTablesUpdateTagsResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteTable;
  };
};

/**
 * Contains response data for the list operation.
 */
export type RouteTablesListResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteTableListResult;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type RouteTablesListAllResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteTableListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type RouteTablesListNextResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteTableListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type RouteTablesListAllNextResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteTableListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type RoutesGetResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Route;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RoutesCreateOrUpdateResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Route;
  };
};

/**
 * Contains response data for the list operation.
 */
export type RoutesListResponse = RouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type RoutesListNextResponse = RouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RouteListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SecurityPartnerProvidersGetResponse = SecurityPartnerProvider & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityPartnerProvider;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SecurityPartnerProvidersCreateOrUpdateResponse = SecurityPartnerProvider & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityPartnerProvider;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type SecurityPartnerProvidersUpdateTagsResponse = SecurityPartnerProvider & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityPartnerProvider;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type SecurityPartnerProvidersListByResourceGroupResponse = SecurityPartnerProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityPartnerProviderListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type SecurityPartnerProvidersListResponse = SecurityPartnerProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityPartnerProviderListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type SecurityPartnerProvidersListByResourceGroupNextResponse = SecurityPartnerProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityPartnerProviderListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type SecurityPartnerProvidersListNextResponse = SecurityPartnerProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecurityPartnerProviderListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type BgpServiceCommunitiesListResponse = BgpServiceCommunityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BgpServiceCommunityListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type BgpServiceCommunitiesListNextResponse = BgpServiceCommunityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BgpServiceCommunityListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceEndpointPoliciesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type ServiceEndpointPoliciesGetResponse = ServiceEndpointPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceEndpointPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServiceEndpointPoliciesCreateOrUpdateResponse = ServiceEndpointPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceEndpointPolicy;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type ServiceEndpointPoliciesUpdateTagsResponse = ServiceEndpointPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceEndpointPolicy;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ServiceEndpointPoliciesListResponse = ServiceEndpointPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceEndpointPolicyListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ServiceEndpointPoliciesListByResourceGroupResponse = ServiceEndpointPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceEndpointPolicyListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ServiceEndpointPoliciesListNextResponse = ServiceEndpointPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceEndpointPolicyListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ServiceEndpointPoliciesListByResourceGroupNextResponse = ServiceEndpointPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceEndpointPolicyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceEndpointPolicyDefinitionsGetResponse = ServiceEndpointPolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceEndpointPolicyDefinition;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServiceEndpointPolicyDefinitionsCreateOrUpdateResponse = ServiceEndpointPolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceEndpointPolicyDefinition;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ServiceEndpointPolicyDefinitionsListByResourceGroupResponse = ServiceEndpointPolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceEndpointPolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ServiceEndpointPolicyDefinitionsListByResourceGroupNextResponse = ServiceEndpointPolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceEndpointPolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ServiceTagsListResponse = ServiceTagsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceTagsListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type UsagesListResponse = UsagesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsagesListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type UsagesListNextResponse = UsagesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsagesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualNetworksGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworksGetResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetwork;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworksCreateOrUpdateResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetwork;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualNetworksUpdateTagsResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetwork;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type VirtualNetworksListAllResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworksListResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkListResult;
  };
};

/**
 * Contains response data for the checkIPAddressAvailability operation.
 */
export type VirtualNetworksCheckIPAddressAvailabilityResponse = IPAddressAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IPAddressAvailabilityResult;
  };
};

/**
 * Contains response data for the listUsage operation.
 */
export type VirtualNetworksListUsageResponse = VirtualNetworkListUsageResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkListUsageResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type VirtualNetworksListAllNextResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworksListNextResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkListResult;
  };
};

/**
 * Contains response data for the listUsageNext operation.
 */
export type VirtualNetworksListUsageNextResponse = VirtualNetworkListUsageResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkListUsageResult;
  };
};

/**
 * Optional parameters.
 */
export interface SubnetsGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type SubnetsGetResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Subnet;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SubnetsCreateOrUpdateResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Subnet;
  };
};

/**
 * Contains response data for the list operation.
 */
export type SubnetsListResponse = SubnetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubnetListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type SubnetsListNextResponse = SubnetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubnetListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ResourceNavigationLinksListResponse = ResourceNavigationLinksListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceNavigationLinksListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ServiceAssociationLinksListResponse = ServiceAssociationLinksListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceAssociationLinksListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkPeeringsGetResponse = VirtualNetworkPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkPeering;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkPeeringsCreateOrUpdateResponse = VirtualNetworkPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkPeering;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkPeeringsListResponse = VirtualNetworkPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkPeeringListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkPeeringsListNextResponse = VirtualNetworkPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkPeeringListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkGatewaysCreateOrUpdateResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkGateway;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkGatewaysGetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkGateway;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualNetworkGatewaysUpdateTagsResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkGateway;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkGatewaysListResponse = VirtualNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkGatewayListResult;
  };
};

/**
 * Contains response data for the listConnections operation.
 */
export type VirtualNetworkGatewaysListConnectionsResponse = VirtualNetworkGatewayListConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkGatewayListConnectionsResult;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualNetworkGatewaysResetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Virtual network gateway vip address supplied to the begin reset of the active-active feature enabled gateway.
   */
  gatewayVip?: string;
}

/**
 * Contains response data for the reset operation.
 */
export type VirtualNetworkGatewaysResetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkGateway;
  };
};

/**
 * Contains response data for the generatevpnclientpackage operation.
 */
export type VirtualNetworkGatewaysGeneratevpnclientpackageResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
  };
};

/**
 * Contains response data for the generateVpnProfile operation.
 */
export type VirtualNetworkGatewaysGenerateVpnProfileResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
  };
};

/**
 * Contains response data for the getVpnProfilePackageUrl operation.
 */
export type VirtualNetworkGatewaysGetVpnProfilePackageUrlResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The IP address of the peer to retrieve the status of.
   */
  peer?: string;
}

/**
 * Contains response data for the getBgpPeerStatus operation.
 */
export type VirtualNetworkGatewaysGetBgpPeerStatusResponse = BgpPeerStatusListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BgpPeerStatusListResult;
  };
};

/**
 * Contains response data for the supportedVpnDevices operation.
 */
export type VirtualNetworkGatewaysSupportedVpnDevicesResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
  };
};

/**
 * Contains response data for the getLearnedRoutes operation.
 */
export type VirtualNetworkGatewaysGetLearnedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GatewayRouteListResult;
  };
};

/**
 * Contains response data for the getAdvertisedRoutes operation.
 */
export type VirtualNetworkGatewaysGetAdvertisedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GatewayRouteListResult;
  };
};

/**
 * Contains response data for the setVpnclientIpsecParameters operation.
 */
export type VirtualNetworkGatewaysSetVpnclientIpsecParametersResponse = VpnClientIPsecParameters & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnClientIPsecParameters;
  };
};

/**
 * Contains response data for the getVpnclientIpsecParameters operation.
 */
export type VirtualNetworkGatewaysGetVpnclientIpsecParametersResponse = VpnClientIPsecParameters & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnClientIPsecParameters;
  };
};

/**
 * Contains response data for the vpnDeviceConfigurationScript operation.
 */
export type VirtualNetworkGatewaysVpnDeviceConfigurationScriptResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualNetworkGatewaysStartPacketCaptureOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Virtual network gateway packet capture parameters supplied to start packet capture on gateway.
   */
  parameters?: VpnPacketCaptureStartParameters;
}

/**
 * Contains response data for the startPacketCapture operation.
 */
export type VirtualNetworkGatewaysStartPacketCaptureResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
  };
};

/**
 * Contains response data for the stopPacketCapture operation.
 */
export type VirtualNetworkGatewaysStopPacketCaptureResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
  };
};

/**
 * Contains response data for the getVpnclientConnectionHealth operation.
 */
export type VirtualNetworkGatewaysGetVpnclientConnectionHealthResponse = VpnClientConnectionHealthDetailListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnClientConnectionHealthDetailListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkGatewaysListNextResponse = VirtualNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkGatewayListResult;
  };
};

/**
 * Contains response data for the listConnectionsNext operation.
 */
export type VirtualNetworkGatewaysListConnectionsNextResponse = VirtualNetworkGatewayListConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkGatewayListConnectionsResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkGatewayConnectionsCreateOrUpdateResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkGatewayConnection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkGatewayConnectionsGetResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkGatewayConnection;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualNetworkGatewayConnectionsUpdateTagsResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkGatewayConnection;
  };
};

/**
 * Contains response data for the setSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsSetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionSharedKey;
  };
};

/**
 * Contains response data for the getSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsGetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionSharedKey;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkGatewayConnectionsListResponse = VirtualNetworkGatewayConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkGatewayConnectionListResult;
  };
};

/**
 * Contains response data for the resetSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsResetSharedKeyResponse = ConnectionResetSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionResetSharedKey;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualNetworkGatewayConnectionsStartPacketCaptureOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Virtual network gateway packet capture parameters supplied to start packet capture on gateway connection.
   */
  parameters?: VpnPacketCaptureStartParameters;
}

/**
 * Contains response data for the startPacketCapture operation.
 */
export type VirtualNetworkGatewayConnectionsStartPacketCaptureResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
  };
};

/**
 * Contains response data for the stopPacketCapture operation.
 */
export type VirtualNetworkGatewayConnectionsStopPacketCaptureResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkGatewayConnectionsListNextResponse = VirtualNetworkGatewayConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkGatewayConnectionListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LocalNetworkGatewaysCreateOrUpdateResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LocalNetworkGateway;
  };
};

/**
 * Contains response data for the get operation.
 */
export type LocalNetworkGatewaysGetResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LocalNetworkGateway;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type LocalNetworkGatewaysUpdateTagsResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LocalNetworkGateway;
  };
};

/**
 * Contains response data for the list operation.
 */
export type LocalNetworkGatewaysListResponse = LocalNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LocalNetworkGatewayListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type LocalNetworkGatewaysListNextResponse = LocalNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LocalNetworkGatewayListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkTapsGetResponse = VirtualNetworkTap & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkTap;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkTapsCreateOrUpdateResponse = VirtualNetworkTap & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkTap;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualNetworkTapsUpdateTagsResponse = VirtualNetworkTap & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkTap;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type VirtualNetworkTapsListAllResponse = VirtualNetworkTapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkTapListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VirtualNetworkTapsListByResourceGroupResponse = VirtualNetworkTapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkTapListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type VirtualNetworkTapsListAllNextResponse = VirtualNetworkTapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkTapListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VirtualNetworkTapsListByResourceGroupNextResponse = VirtualNetworkTapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkTapListResult;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualRoutersGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type VirtualRoutersGetResponse = VirtualRouter & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualRouter;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualRoutersCreateOrUpdateResponse = VirtualRouter & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualRouter;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VirtualRoutersListByResourceGroupResponse = VirtualRouterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualRouterListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualRoutersListResponse = VirtualRouterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualRouterListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VirtualRoutersListByResourceGroupNextResponse = VirtualRouterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualRouterListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualRoutersListNextResponse = VirtualRouterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualRouterListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualRouterPeeringsGetResponse = VirtualRouterPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualRouterPeering;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualRouterPeeringsCreateOrUpdateResponse = VirtualRouterPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualRouterPeering;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualRouterPeeringsListResponse = VirtualRouterPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualRouterPeeringListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualRouterPeeringsListNextResponse = VirtualRouterPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualRouterPeeringListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualWansGetResponse = VirtualWAN & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualWAN;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualWansCreateOrUpdateResponse = VirtualWAN & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualWAN;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualWansUpdateTagsResponse = VirtualWAN & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualWAN;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VirtualWansListByResourceGroupResponse = ListVirtualWANsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVirtualWANsResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualWansListResponse = ListVirtualWANsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVirtualWANsResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VirtualWansListByResourceGroupNextResponse = ListVirtualWANsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVirtualWANsResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualWansListNextResponse = ListVirtualWANsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVirtualWANsResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VpnSitesGetResponse = VpnSite & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnSite;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VpnSitesCreateOrUpdateResponse = VpnSite & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnSite;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VpnSitesUpdateTagsResponse = VpnSite & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnSite;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VpnSitesListByResourceGroupResponse = ListVpnSitesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnSitesResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VpnSitesListResponse = ListVpnSitesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnSitesResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VpnSitesListByResourceGroupNextResponse = ListVpnSitesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnSitesResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VpnSitesListNextResponse = ListVpnSitesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnSitesResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VpnSiteLinksGetResponse = VpnSiteLink & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnSiteLink;
  };
};

/**
 * Contains response data for the listByVpnSite operation.
 */
export type VpnSiteLinksListByVpnSiteResponse = ListVpnSiteLinksResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnSiteLinksResult;
  };
};

/**
 * Contains response data for the listByVpnSiteNext operation.
 */
export type VpnSiteLinksListByVpnSiteNextResponse = ListVpnSiteLinksResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnSiteLinksResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VpnServerConfigurationsGetResponse = VpnServerConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnServerConfiguration;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VpnServerConfigurationsCreateOrUpdateResponse = VpnServerConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnServerConfiguration;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VpnServerConfigurationsUpdateTagsResponse = VpnServerConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnServerConfiguration;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VpnServerConfigurationsListByResourceGroupResponse = ListVpnServerConfigurationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnServerConfigurationsResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VpnServerConfigurationsListResponse = ListVpnServerConfigurationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnServerConfigurationsResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VpnServerConfigurationsListByResourceGroupNextResponse = ListVpnServerConfigurationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnServerConfigurationsResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VpnServerConfigurationsListNextResponse = ListVpnServerConfigurationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnServerConfigurationsResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualHubsGetResponse = VirtualHub & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualHub;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualHubsCreateOrUpdateResponse = VirtualHub & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualHub;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualHubsUpdateTagsResponse = VirtualHub & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualHub;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VirtualHubsListByResourceGroupResponse = ListVirtualHubsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVirtualHubsResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualHubsListResponse = ListVirtualHubsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVirtualHubsResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VirtualHubsListByResourceGroupNextResponse = ListVirtualHubsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVirtualHubsResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualHubsListNextResponse = ListVirtualHubsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVirtualHubsResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type HubVirtualNetworkConnectionsGetResponse = HubVirtualNetworkConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HubVirtualNetworkConnection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type HubVirtualNetworkConnectionsListResponse = ListHubVirtualNetworkConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListHubVirtualNetworkConnectionsResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type HubVirtualNetworkConnectionsListNextResponse = ListHubVirtualNetworkConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListHubVirtualNetworkConnectionsResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VpnGatewaysGetResponse = VpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnGateway;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VpnGatewaysCreateOrUpdateResponse = VpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnGateway;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VpnGatewaysUpdateTagsResponse = VpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnGateway;
  };
};

/**
 * Contains response data for the reset operation.
 */
export type VpnGatewaysResetResponse = VpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnGateway;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VpnGatewaysListByResourceGroupResponse = ListVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnGatewaysResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VpnGatewaysListResponse = ListVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnGatewaysResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VpnGatewaysListByResourceGroupNextResponse = ListVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnGatewaysResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VpnGatewaysListNextResponse = ListVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnGatewaysResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VpnConnectionsGetResponse = VpnConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnConnection;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VpnConnectionsCreateOrUpdateResponse = VpnConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnConnection;
  };
};

/**
 * Contains response data for the listByVpnGateway operation.
 */
export type VpnConnectionsListByVpnGatewayResponse = ListVpnConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnConnectionsResult;
  };
};

/**
 * Contains response data for the listByVpnGatewayNext operation.
 */
export type VpnConnectionsListByVpnGatewayNextResponse = ListVpnConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnConnectionsResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VpnSiteLinkConnectionsGetResponse = VpnSiteLinkConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnSiteLinkConnection;
  };
};

/**
 * Contains response data for the listByVpnConnection operation.
 */
export type VpnLinkConnectionsListByVpnConnectionResponse = ListVpnSiteLinkConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnSiteLinkConnectionsResult;
  };
};

/**
 * Contains response data for the listByVpnConnectionNext operation.
 */
export type VpnLinkConnectionsListByVpnConnectionNextResponse = ListVpnSiteLinkConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVpnSiteLinkConnectionsResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type P2SVpnGatewaysGetResponse = P2SVpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: P2SVpnGateway;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type P2SVpnGatewaysCreateOrUpdateResponse = P2SVpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: P2SVpnGateway;
  };
};

/**
 * Contains response data for the updateTags operation.
 */
export type P2SVpnGatewaysUpdateTagsResponse = P2SVpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: P2SVpnGateway;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type P2SVpnGatewaysListByResourceGroupResponse = ListP2SVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListP2SVpnGatewaysResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type P2SVpnGatewaysListResponse = ListP2SVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListP2SVpnGatewaysResult;
  };
};

/**
 * Contains response data for the generateVpnProfile operation.
 */
export type P2SVpnGatewaysGenerateVpnProfileResponse = VpnProfileResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnProfileResponse;
  };
};

/**
 * Contains response data for the getP2SVpnConnectionHealth operation.
 */
export type P2SVpnGatewaysGetP2SVpnConnectionHealthResponse = P2SVpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: P2SVpnGateway;
  };
};

/**
 * Contains response data for the getP2SVpnConnectionHealthDetailed operation.
 */
export type P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedResponse = P2SVpnConnectionHealth & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: P2SVpnConnectionHealth;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type P2SVpnGatewaysListByResourceGroupNextResponse = ListP2SVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListP2SVpnGatewaysResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type P2SVpnGatewaysListNextResponse = ListP2SVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListP2SVpnGatewaysResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VpnServerConfigurationsAssociatedWithVirtualWanListResponse = VpnServerConfigurationsResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VpnServerConfigurationsResponse;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualHubRouteTableV2SGetResponse = VirtualHubRouteTableV2 & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualHubRouteTableV2;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualHubRouteTableV2SCreateOrUpdateResponse = VirtualHubRouteTableV2 & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualHubRouteTableV2;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualHubRouteTableV2SListResponse = ListVirtualHubRouteTableV2SResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVirtualHubRouteTableV2SResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualHubRouteTableV2SListNextResponse = ListVirtualHubRouteTableV2SResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListVirtualHubRouteTableV2SResult;
  };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type ExpressRouteGatewaysListBySubscriptionResponse = ExpressRouteGatewayList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteGatewayList;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ExpressRouteGatewaysListByResourceGroupResponse = ExpressRouteGatewayList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteGatewayList;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteGatewaysCreateOrUpdateResponse = ExpressRouteGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteGateway;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteGatewaysGetResponse = ExpressRouteGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteGateway;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteConnectionsCreateOrUpdateResponse = ExpressRouteConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteConnection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteConnectionsGetResponse = ExpressRouteConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteConnection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteConnectionsListResponse = ExpressRouteConnectionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressRouteConnectionList;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type HubRouteTablesCreateOrUpdateResponse = HubRouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HubRouteTable;
  };
};

/**
 * Contains response data for the get operation.
 */
export type HubRouteTablesGetResponse = HubRouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HubRouteTable;
  };
};

/**
 * Contains response data for the list operation.
 */
export type HubRouteTablesListResponse = ListHubRouteTablesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListHubRouteTablesResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type HubRouteTablesListNextResponse = ListHubRouteTablesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListHubRouteTablesResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type WebApplicationFirewallPoliciesListResponse = WebApplicationFirewallPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebApplicationFirewallPolicyListResult;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type WebApplicationFirewallPoliciesListAllResponse = WebApplicationFirewallPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebApplicationFirewallPolicyListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WebApplicationFirewallPoliciesGetResponse = WebApplicationFirewallPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebApplicationFirewallPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type WebApplicationFirewallPoliciesCreateOrUpdateResponse = WebApplicationFirewallPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebApplicationFirewallPolicy;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type WebApplicationFirewallPoliciesListNextResponse = WebApplicationFirewallPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebApplicationFirewallPolicyListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type WebApplicationFirewallPoliciesListAllNextResponse = WebApplicationFirewallPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebApplicationFirewallPolicyListResult;
  };
};

/**
 * Optional parameters.
 */
export interface NetworkManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
