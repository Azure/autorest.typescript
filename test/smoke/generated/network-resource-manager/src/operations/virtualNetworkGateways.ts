/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  VirtualNetworkGateway,
  VirtualNetworkGatewayConnectionListEntity,
  VirtualNetworkGatewaysCreateOrUpdateResponse,
  VirtualNetworkGatewaysGetResponse,
  TagsObject,
  VirtualNetworkGatewaysUpdateTagsResponse,
  VirtualNetworkGatewaysListResponse,
  VirtualNetworkGatewaysListConnectionsResponse,
  VirtualNetworkGatewaysResetOptionalParams,
  VirtualNetworkGatewaysResetResponse,
  VpnClientParameters,
  VirtualNetworkGatewaysGeneratevpnclientpackageResponse,
  VirtualNetworkGatewaysGenerateVpnProfileResponse,
  VirtualNetworkGatewaysGetVpnProfilePackageUrlResponse,
  VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams,
  VirtualNetworkGatewaysGetBgpPeerStatusResponse,
  VirtualNetworkGatewaysSupportedVpnDevicesResponse,
  VirtualNetworkGatewaysGetLearnedRoutesResponse,
  VirtualNetworkGatewaysGetAdvertisedRoutesResponse,
  VpnClientIPsecParameters,
  VirtualNetworkGatewaysSetVpnclientIpsecParametersResponse,
  VirtualNetworkGatewaysGetVpnclientIpsecParametersResponse,
  VpnDeviceScriptParameters,
  VirtualNetworkGatewaysVpnDeviceConfigurationScriptResponse,
  VirtualNetworkGatewaysStartPacketCaptureOptionalParams,
  VirtualNetworkGatewaysStartPacketCaptureResponse,
  VpnPacketCaptureStopParameters,
  VirtualNetworkGatewaysStopPacketCaptureResponse,
  VirtualNetworkGatewaysGetVpnclientConnectionHealthResponse,
  P2SVpnConnectionRequest,
  VirtualNetworkGatewaysListNextResponse,
  VirtualNetworkGatewaysListConnectionsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a VirtualNetworkGateways. */
export class VirtualNetworkGateways {
  private readonly client: NetworkManagementClientContext;

  /**
   * Initialize a new instance of the class VirtualNetworkGateways class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets all virtual network gateways by resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<VirtualNetworkGateway> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<VirtualNetworkGateway[]> {
    let result = await this._list(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<VirtualNetworkGateway> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Gets all the connections in a virtual network gateway.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The options parameters.
   */
  public listConnections(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<VirtualNetworkGatewayConnectionListEntity> {
    const iter = this.listConnectionsPagingAll(
      resourceGroupName,
      virtualNetworkGatewayName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listConnectionsPagingPage(
          resourceGroupName,
          virtualNetworkGatewayName,
          options
        );
      }
    };
  }

  private async *listConnectionsPagingPage(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<VirtualNetworkGatewayConnectionListEntity[]> {
    let result = await this._listConnections(
      resourceGroupName,
      virtualNetworkGatewayName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listConnectionsNext(
        resourceGroupName,
        virtualNetworkGatewayName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listConnectionsPagingAll(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<VirtualNetworkGatewayConnectionListEntity> {
    for await (const page of this.listConnectionsPagingPage(
      resourceGroupName,
      virtualNetworkGatewayName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates or updates a virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Parameters supplied to create or update virtual network gateway operation.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    parameters: VirtualNetworkGateway,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<VirtualNetworkGatewaysCreateOrUpdateResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      parameters,
      options: this.getOperationOptions(options, "azure-async-operation")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysCreateOrUpdateResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      createOrUpdateOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * Gets the specified virtual network gateway by resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworkGatewaysGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<VirtualNetworkGatewaysGetResponse>;
  }

  /**
   * Deletes the specified virtual network gateway.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      deleteOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Updates a virtual network gateway tags.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Parameters supplied to update virtual network gateway tags.
   * @param options The options parameters.
   */
  async updateTags(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    parameters: TagsObject,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<VirtualNetworkGatewaysUpdateTagsResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      parameters,
      options: this.getOperationOptions(options, "azure-async-operation")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysUpdateTagsResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      updateTagsOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: updateTagsOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * Gets all virtual network gateways by resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworkGatewaysListResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOperationSpec
    ) as Promise<VirtualNetworkGatewaysListResponse>;
  }

  /**
   * Gets all the connections in a virtual network gateway.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The options parameters.
   */
  private _listConnections(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworkGatewaysListConnectionsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listConnectionsOperationSpec
    ) as Promise<VirtualNetworkGatewaysListConnectionsResponse>;
  }

  /**
   * Resets the primary of the virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The options parameters.
   */
  async reset(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: VirtualNetworkGatewaysResetOptionalParams
  ): Promise<LROPoller<VirtualNetworkGatewaysResetResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysResetResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      resetOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: resetOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Resets the VPN client shared key of the virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The options parameters.
   */
  async resetVpnClientSharedKey(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      resetVpnClientSharedKeyOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: resetVpnClientSharedKeyOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Generates VPN client package for P2S client of the virtual network gateway in the specified resource
   * group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Parameters supplied to the generate virtual network gateway VPN client package
   *                   operation.
   * @param options The options parameters.
   */
  async generatevpnclientpackage(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    parameters: VpnClientParameters,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<VirtualNetworkGatewaysGeneratevpnclientpackageResponse>
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      parameters,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysGeneratevpnclientpackageResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      generatevpnclientpackageOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: generatevpnclientpackageOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Generates VPN profile for P2S client of the virtual network gateway in the specified resource group.
   * Used for IKEV2 and radius based authentication.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Parameters supplied to the generate virtual network gateway VPN client package
   *                   operation.
   * @param options The options parameters.
   */
  async generateVpnProfile(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    parameters: VpnClientParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<VirtualNetworkGatewaysGenerateVpnProfileResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      parameters,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysGenerateVpnProfileResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      generateVpnProfileOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: generateVpnProfileOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Gets pre-generated VPN profile for P2S client of the virtual network gateway in the specified
   * resource group. The profile needs to be generated first using generateVpnProfile.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The options parameters.
   */
  async getVpnProfilePackageUrl(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<VirtualNetworkGatewaysGetVpnProfilePackageUrlResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysGetVpnProfilePackageUrlResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      getVpnProfilePackageUrlOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: getVpnProfilePackageUrlOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The options parameters.
   */
  async getBgpPeerStatus(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams
  ): Promise<LROPoller<VirtualNetworkGatewaysGetBgpPeerStatusResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysGetBgpPeerStatusResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      getBgpPeerStatusOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: getBgpPeerStatusOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Gets a xml format representation for supported vpn devices.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The options parameters.
   */
  supportedVpnDevices(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworkGatewaysSupportedVpnDevicesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      supportedVpnDevicesOperationSpec
    ) as Promise<VirtualNetworkGatewaysSupportedVpnDevicesResponse>;
  }

  /**
   * This operation retrieves a list of routes the virtual network gateway has learned, including routes
   * learned from BGP peers.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The options parameters.
   */
  async getLearnedRoutes(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<VirtualNetworkGatewaysGetLearnedRoutesResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysGetLearnedRoutesResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      getLearnedRoutesOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: getLearnedRoutesOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * This operation retrieves a list of routes the virtual network gateway is advertising to the
   * specified peer.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param peer The IP address of the peer.
   * @param options The options parameters.
   */
  async getAdvertisedRoutes(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    peer: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<VirtualNetworkGatewaysGetAdvertisedRoutesResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      peer,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysGetAdvertisedRoutesResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      getAdvertisedRoutesOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: getAdvertisedRoutesOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * The Set VpnclientIpsecParameters operation sets the vpnclient ipsec policy for P2S client of virtual
   * network gateway in the specified resource group through Network resource provider.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param vpnclientIpsecParams Parameters supplied to the Begin Set vpnclient ipsec parameters of
   *                             Virtual Network Gateway P2S client operation through Network resource provider.
   * @param options The options parameters.
   */
  async setVpnclientIpsecParameters(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    vpnclientIpsecParams: VpnClientIPsecParameters,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<VirtualNetworkGatewaysSetVpnclientIpsecParametersResponse>
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      vpnclientIpsecParams,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysSetVpnclientIpsecParametersResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      setVpnclientIpsecParametersOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: setVpnclientIpsecParametersOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * The Get VpnclientIpsecParameters operation retrieves information about the vpnclient ipsec policy
   * for P2S client of virtual network gateway in the specified resource group through Network resource
   * provider.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The virtual network gateway name.
   * @param options The options parameters.
   */
  async getVpnclientIpsecParameters(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<VirtualNetworkGatewaysGetVpnclientIpsecParametersResponse>
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysGetVpnclientIpsecParametersResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      getVpnclientIpsecParametersOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: getVpnclientIpsecParametersOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Gets a xml format representation for vpn device configuration script.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection for
   *                                            which the configuration script is generated.
   * @param parameters Parameters supplied to the generate vpn device script operation.
   * @param options The options parameters.
   */
  vpnDeviceConfigurationScript(
    resourceGroupName: string,
    virtualNetworkGatewayConnectionName: string,
    parameters: VpnDeviceScriptParameters,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworkGatewaysVpnDeviceConfigurationScriptResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayConnectionName,
      parameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      vpnDeviceConfigurationScriptOperationSpec
    ) as Promise<VirtualNetworkGatewaysVpnDeviceConfigurationScriptResponse>;
  }

  /**
   * Starts packet capture on virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The options parameters.
   */
  async startPacketCapture(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: VirtualNetworkGatewaysStartPacketCaptureOptionalParams
  ): Promise<LROPoller<VirtualNetworkGatewaysStartPacketCaptureResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysStartPacketCaptureResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      startPacketCaptureOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: startPacketCaptureOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Stops packet capture on virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Virtual network gateway packet capture parameters supplied to stop packet capture
   *                   on gateway.
   * @param options The options parameters.
   */
  async stopPacketCapture(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    parameters: VpnPacketCaptureStopParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<VirtualNetworkGatewaysStopPacketCaptureResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      parameters,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysStopPacketCaptureResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      stopPacketCaptureOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: stopPacketCaptureOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Get VPN client connection health detail per P2S client connection of the virtual network gateway in
   * the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The options parameters.
   */
  async getVpnclientConnectionHealth(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<VirtualNetworkGatewaysGetVpnclientConnectionHealthResponse>
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkGatewaysGetVpnclientConnectionHealthResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      getVpnclientConnectionHealthOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: getVpnclientConnectionHealthOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Disconnect vpn connections of virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param request The parameters are supplied to disconnect vpn connections.
   * @param options The options parameters.
   */
  async disconnectVirtualNetworkGatewayVpnConnections(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    request: P2SVpnConnectionRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      request,
      options: this.getOperationOptions(options, "location")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      disconnectVirtualNetworkGatewayVpnConnectionsOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: disconnectVirtualNetworkGatewayVpnConnectionsOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworkGatewaysListNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listNextOperationSpec
    ) as Promise<VirtualNetworkGatewaysListNextResponse>;
  }

  /**
   * ListConnectionsNext
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param nextLink The nextLink from the previous successful call to the ListConnections method.
   * @param options The options parameters.
   */
  private _listConnectionsNext(
    resourceGroupName: string,
    virtualNetworkGatewayName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworkGatewaysListConnectionsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      virtualNetworkGatewayName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listConnectionsNextOperationSpec
    ) as Promise<VirtualNetworkGatewaysListConnectionsNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    201: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    202: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    204: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters48,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateTagsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    201: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    202: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    204: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGatewayListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listConnectionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/connections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGatewayListConnectionsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const resetOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/reset",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    201: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    202: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    204: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.gatewayVip],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const resetVpnClientSharedKeyOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/resetvpnclientsharedkey",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const generatevpnclientpackageOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnclientpackage",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    201: {
      bodyMapper: { type: { name: "String" } }
    },
    202: {
      bodyMapper: { type: { name: "String" } }
    },
    204: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters49,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const generateVpnProfileOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnprofile",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    201: {
      bodyMapper: { type: { name: "String" } }
    },
    202: {
      bodyMapper: { type: { name: "String" } }
    },
    204: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters49,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getVpnProfilePackageUrlOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getvpnprofilepackageurl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    201: {
      bodyMapper: { type: { name: "String" } }
    },
    202: {
      bodyMapper: { type: { name: "String" } }
    },
    204: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getBgpPeerStatusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getBgpPeerStatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BgpPeerStatusListResult
    },
    201: {
      bodyMapper: Mappers.BgpPeerStatusListResult
    },
    202: {
      bodyMapper: Mappers.BgpPeerStatusListResult
    },
    204: {
      bodyMapper: Mappers.BgpPeerStatusListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.peer],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const supportedVpnDevicesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/supportedvpndevices",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getLearnedRoutesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getLearnedRoutes",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GatewayRouteListResult
    },
    201: {
      bodyMapper: Mappers.GatewayRouteListResult
    },
    202: {
      bodyMapper: Mappers.GatewayRouteListResult
    },
    204: {
      bodyMapper: Mappers.GatewayRouteListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAdvertisedRoutesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getAdvertisedRoutes",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GatewayRouteListResult
    },
    201: {
      bodyMapper: Mappers.GatewayRouteListResult
    },
    202: {
      bodyMapper: Mappers.GatewayRouteListResult
    },
    204: {
      bodyMapper: Mappers.GatewayRouteListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.peer1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const setVpnclientIpsecParametersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/setvpnclientipsecparameters",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VpnClientIPsecParameters
    },
    201: {
      bodyMapper: Mappers.VpnClientIPsecParameters
    },
    202: {
      bodyMapper: Mappers.VpnClientIPsecParameters
    },
    204: {
      bodyMapper: Mappers.VpnClientIPsecParameters
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.vpnclientIpsecParams,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getVpnclientIpsecParametersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getvpnclientipsecparameters",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VpnClientIPsecParameters
    },
    201: {
      bodyMapper: Mappers.VpnClientIPsecParameters
    },
    202: {
      bodyMapper: Mappers.VpnClientIPsecParameters
    },
    204: {
      bodyMapper: Mappers.VpnClientIPsecParameters
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const vpnDeviceConfigurationScriptOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/vpndeviceconfigurationscript",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters50,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayConnectionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const startPacketCaptureOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/startPacketCapture",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    201: {
      bodyMapper: { type: { name: "String" } }
    },
    202: {
      bodyMapper: { type: { name: "String" } }
    },
    204: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.parameters51,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const stopPacketCaptureOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/stopPacketCapture",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    201: {
      bodyMapper: { type: { name: "String" } }
    },
    202: {
      bodyMapper: { type: { name: "String" } }
    },
    204: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.parameters52,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getVpnclientConnectionHealthOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getVpnClientConnectionHealth",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VpnClientConnectionHealthDetailListResult
    },
    201: {
      bodyMapper: Mappers.VpnClientConnectionHealthDetailListResult
    },
    202: {
      bodyMapper: Mappers.VpnClientConnectionHealthDetailListResult
    },
    204: {
      bodyMapper: Mappers.VpnClientConnectionHealthDetailListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const disconnectVirtualNetworkGatewayVpnConnectionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/disconnectVirtualNetworkGatewayVpnConnections",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.request,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGatewayListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listConnectionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGatewayListConnectionsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.virtualNetworkGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
