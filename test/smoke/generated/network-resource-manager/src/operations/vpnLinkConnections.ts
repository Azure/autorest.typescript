/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";
import {
  VpnSiteLinkConnection,
  VpnLinkConnectionsListByVpnConnectionResponse,
  VpnLinkConnectionsListByVpnConnectionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a VpnLinkConnections. */
export class VpnLinkConnections {
  private readonly client: NetworkManagementClientContext;

  /**
   * Initialize a new instance of the class VpnLinkConnections class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves all vpn site link connections for a particular virtual wan vpn gateway vpn connection.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param connectionName The name of the vpn connection.
   * @param options The options parameters.
   */
  public listByVpnConnection(
    resourceGroupName: string,
    gatewayName: string,
    connectionName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<VpnSiteLinkConnection> {
    const iter = this.listByVpnConnectionPagingAll(
      resourceGroupName,
      gatewayName,
      connectionName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByVpnConnectionPagingPage(
          resourceGroupName,
          gatewayName,
          connectionName,
          options
        );
      }
    };
  }

  private async *listByVpnConnectionPagingPage(
    resourceGroupName: string,
    gatewayName: string,
    connectionName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<VpnSiteLinkConnection[]> {
    let result = await this._listByVpnConnection(
      resourceGroupName,
      gatewayName,
      connectionName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByVpnConnectionNext(
        resourceGroupName,
        gatewayName,
        connectionName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByVpnConnectionPagingAll(
    resourceGroupName: string,
    gatewayName: string,
    connectionName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<VpnSiteLinkConnection> {
    for await (const page of this.listByVpnConnectionPagingPage(
      resourceGroupName,
      gatewayName,
      connectionName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieves all vpn site link connections for a particular virtual wan vpn gateway vpn connection.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param connectionName The name of the vpn connection.
   * @param options The options parameters.
   */
  private _listByVpnConnection(
    resourceGroupName: string,
    gatewayName: string,
    connectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VpnLinkConnectionsListByVpnConnectionResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      gatewayName,
      connectionName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByVpnConnectionOperationSpec
    ) as Promise<VpnLinkConnectionsListByVpnConnectionResponse>;
  }

  /**
   * ListByVpnConnectionNext
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param connectionName The name of the vpn connection.
   * @param nextLink The nextLink from the previous successful call to the ListByVpnConnection method.
   * @param options The options parameters.
   */
  private _listByVpnConnectionNext(
    resourceGroupName: string,
    gatewayName: string,
    connectionName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<VpnLinkConnectionsListByVpnConnectionNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      gatewayName,
      connectionName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByVpnConnectionNextOperationSpec
    ) as Promise<VpnLinkConnectionsListByVpnConnectionNextResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByVpnConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}/vpnLinkConnections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListVpnSiteLinkConnectionsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.connectionName,
    Parameters.gatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByVpnConnectionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListVpnSiteLinkConnectionsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.connectionName,
    Parameters.gatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
