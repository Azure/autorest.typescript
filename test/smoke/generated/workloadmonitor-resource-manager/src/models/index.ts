/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Model for collection of Monitor.
 */
export interface MonitorsCollection {
  /**
   * URL for next set of results.
   */
  readonly nextLink?: string;
  /**
   * Collection of Monitor.
   */
  readonly value?: Monitor[];
}

export interface Resource {
  /**
   * Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   */
  readonly id?: string;
  /**
   * The name of the resource
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM proxy resource. It will have everything other than required location and tags
 */
export type ProxyResource = Resource & {};

/**
 * Model for Monitor
 */
export type Monitor = ProxyResource & {
  /**
   * For optimistic concurrency control.
   */
  readonly etag?: string;
  /**
   * Description of the monitor
   */
  readonly description?: string;
  /**
   * ID of the monitor
   */
  readonly monitorId?: string;
  /**
   * Name of the monitor
   */
  readonly monitorName?: string;
  /**
   * User friendly display name of the monitor
   */
  readonly monitorDisplayName?: string;
  /**
   * Name of the parent monitor
   */
  readonly parentMonitorName?: string;
  /**
   * User friendly display name of the parent monitor
   */
  readonly parentMonitorDisplayName?: string;
  /**
   * Type of the monitor
   */
  readonly monitorType?: MonitorType;
  /**
   * Category of the monitor
   */
  readonly monitorCategory?: MonitorCategory;
  /**
   * Component Type Id of monitor
   */
  readonly componentTypeId?: string;
  /**
   * Component Type Name of monitor
   */
  readonly componentTypeName?: string;
  /**
   * Component Type Display Name of the monitor
   */
  readonly componentTypeDisplayName?: string;
  /**
   * Is the monitor state enabled or disabled
   */
  readonly monitorState?: MonitorState;
  /**
   * Collection of MonitorCriteria. For PATCH calls, instead of partial list, complete list of expected criteria should be passed for proper updating.
   */
  readonly criteria?: MonitorCriteria[];
  /**
   * Generates alerts or not
   */
  readonly alertGeneration?: AlertGeneration;
  /**
   * Frequency at which monitor condition is evaluated
   */
  readonly frequency?: number;
  /**
   * The duration in minutes in the past during which the monitor is evaluated
   */
  readonly lookbackDuration?: number;
  /**
   * URL pointing to the documentation of the monitor
   */
  readonly documentationURL?: string;
  /**
   * Name of the signal on which this monitor is configured.
   */
  readonly signalName?: string;
  /**
   * Type of the signal on which this monitor is configured.
   */
  readonly signalType?: string;
};

/**
 * Criteria for monitor configuration
 */
export interface MonitorCriteria {
  /**
   * Target health state of the criteria
   */
  readonly healthState?: HealthState;
  /**
   * Threshold value for this criteria
   */
  readonly threshold?: number;
  /**
   * Comparison enum on threshold of this criteria
   */
  readonly comparisonOperator?: Operator;
}

/**
 * Error body contract.
 */
export interface ErrorResponse {
  /**
   * Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response.
   */
  code?: string;
  /**
   * Human-readable representation of the error.
   */
  message?: string;
  /**
   * The list of invalid fields send in request, in case of validation error.
   */
  details?: ErrorFieldContract[];
}

/**
 * Error field contract.
 */
export interface ErrorFieldContract {
  /**
   * Property level error code.
   */
  code?: string;
  /**
   * Human-readable representation of property-level error.
   */
  message?: string;
  /**
   * Property name.
   */
  target?: string;
}

/**
 * Model for collection of components.
 */
export interface ComponentsCollection {
  /**
   * URL to the next set of results.
   */
  readonly nextLink?: string;
  /**
   * Collection of components.
   */
  readonly value?: Component[];
}

/**
 * Model for component.
 */
export type Component = ProxyResource & {
  /**
   * For optimistic concurrency control.
   */
  readonly etag?: string;
  /**
   * ID of the workspace.
   */
  readonly workspaceId?: string;
  /**
   * ID of the OMS solution this component belong to.
   */
  readonly solutionId?: string;
  /**
   * Type of the workload.
   */
  readonly workloadType?: WorkloadType;
  /**
   * Name of the component.
   */
  readonly componentName?: string;
  /**
   * ID of the component type.
   */
  readonly componentTypeId?: string;
  /**
   * Name of the component type. Qualifies the type of component such as whether it is a SQL database, logical disk, website, etc.
   */
  readonly componentTypeName?: string;
  /**
   * Component type group category. Classification of component type groups into a logical category. e.g. Network, Disk, Memory, CPU.
   */
  readonly componentTypeGroupCategory?: string;
  /**
   * Health state of the component.
   */
  readonly healthState?: HealthState;
  /**
   * Category of component's health state.
   */
  readonly healthStateCategory?: HealthStateCategory;
  /**
   * Start time for health state changes.
   */
  readonly healthStateChangesStartTime?: Date;
  /**
   * End time for health state changes.
   */
  readonly healthStateChangesEndTime?: Date;
  /**
   * Time of last health state change.
   */
  readonly lastHealthStateChangeTime?: Date;
  /**
   * ID of the VM this component belongs to.
   */
  readonly vmId?: string;
  /**
   * Name of the VM this component belongs to.
   */
  readonly vmName?: string;
  /**
   * Tags on the VM this component belongs to.
   */
  readonly vmTags?: { [propertyName: string]: string };
  /**
   * Properties requested in aggregation queries.
   */
  readonly aggregateProperties?: { [propertyName: string]: string };
  /**
   * component children.
   */
  readonly children?: Component[];
};

/**
 * Model for collection of health instances.
 */
export interface MonitorInstancesCollection {
  /**
   * URL to the next set of results.
   */
  readonly nextLink?: string;
  /**
   * Collection of health instances.
   */
  readonly value?: MonitorInstance[];
}

/**
 * Model for monitor instance.
 */
export type MonitorInstance = ProxyResource & {
  /**
   * For optimistic concurrency control.
   */
  readonly etag?: string;
  /**
   * ID of the workspace.
   */
  readonly workspaceId?: string;
  /**
   * ID of the OMS solution this health instance belong to.
   */
  readonly solutionId?: string;
  /**
   * Type of the workload.
   */
  readonly workloadType?: WorkloadType;
  /**
   * ID of the component.
   */
  readonly componentId?: string;
  /**
   * Name of the component.
   */
  readonly componentName?: string;
  /**
   * ID of the component type.
   */
  readonly componentTypeId?: string;
  /**
   * Name of the component type. Qualifies the type of component such as whether it is a SQL database, logical disk, website, etc.
   */
  readonly componentTypeName?: string;
  /**
   * ID of the monitor instance.
   */
  readonly monitorId?: string;
  /**
   * Name of the monitor.
   */
  readonly monitorName?: string;
  /**
   * Type of the monitor. The qualifier for the health criteria depending on the functionality it performs such as Unit, Aggregate, Dependency.
   */
  readonly monitorType?: MonitorType;
  /**
   * Monitor type category. Indicates the attribute of the component that the health criteria monitors such as Performance, Availability, etc.
   */
  readonly monitorCategory?: MonitorCategory;
  /**
   * Health state of monitor instance.
   */
  readonly healthState?: HealthState;
  /**
   * Category of monitor instance's health state.
   */
  readonly healthStateCategory?: HealthStateCategory;
  /**
   * Health state changes.
   */
  readonly healthStateChanges?: HealthStateChange[];
  /**
   * Start time for health state changes.
   */
  readonly healthStateChangesStartTime?: Date;
  /**
   * End time for health state changes.
   */
  readonly healthStateChangesEndTime?: Date;
  /**
   * Time of last health state change.
   */
  readonly lastHealthStateChangeTime?: Date;
  /**
   * Generates alert or not.
   */
  readonly alertGeneration?: AlertGeneration;
  /**
   * Properties requested in aggregation queries.
   */
  readonly aggregateProperties?: { [propertyName: string]: string };
  /**
   * Health instance children.
   */
  readonly children?: MonitorInstance[];
};

/**
 * Model for health state change
 */
export interface HealthStateChange {
  /**
   * Health state of monitor instance.
   */
  readonly healthState?: HealthState;
  /**
   * Time at which this Health state was reached.
   */
  readonly healthStateChangeTime?: Date;
}

/**
 * Model for collection of notificationSettings.
 */
export interface NotificationSettingsCollection {
  value?: NotificationSetting[];
  /**
   * URL to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Model for NotificationSetting.
 */
export type NotificationSetting = ProxyResource & {
  /**
   * For optimistic concurrency control.
   */
  readonly etag?: string;
  /**
   * List of action group resource ids to be notified
   */
  readonly actionGroupResourceIds?: string[];
};

/**
 * Container for a list of operations supported by the resource provider.
 */
export interface OperationListResult {
  /**
   * URL to the next set of results.
   */
  readonly nextLink?: string;
  /**
   * List of operations.
   */
  readonly value?: Operation[];
}

/**
 * Operation supported by the resource provider.
 */
export interface Operation {
  /**
   * The properties of the resource operation.
   */
  readonly display?: OperationProperties;
  /**
   * The name of the resource operation.
   */
  readonly name?: string;
  /**
   * The origin of the operation.
   */
  readonly origin?: string;
}

/**
 * Properties of an operation supported by the resource provider.
 */
export interface OperationProperties {
  /**
   * The description of the resource provider.
   */
  readonly description?: string;
  /**
   * This operation name.
   */
  readonly operation?: string;
  /**
   * The provider name.
   */
  readonly provider?: string;
  /**
   * The resource name.
   */
  readonly resource?: string;
}

/**
 * Defines values for AlertGeneration.
 */
export type AlertGeneration = "Enabled" | "Disabled";
/**
 * Defines values for WorkloadType.
 */
export type WorkloadType = "BaseOS" | "SQL" | "IIS" | "Apache";
/**
 * Defines values for HealthStateCategory.
 */
export type HealthStateCategory = "Identity" | "CustomGroup";
/**
 * Defines values for MonitorType.
 */
export type MonitorType = "Aggregate" | "Dependency" | "Unit";
/**
 * Defines values for MonitorCategory.
 */
export type MonitorCategory =
  | "AvailabilityHealth"
  | "Configuration"
  | "EntityHealth"
  | "PerformanceHealth"
  | "Security";
/**
 * Defines values for MonitorState.
 */
export type MonitorState = "Enabled" | "Disabled";
/**
 * Defines values for HealthState.
 */
export type HealthState =
  | "Error"
  | "Warning"
  | "Success"
  | "Unknown"
  | "Uninitialized";
/**
 * Defines values for Operator.
 */
export type Operator =
  | "Equals"
  | "GreaterThan"
  | "GreaterThanOrEqual"
  | "LessThan"
  | "LessThanOrEqual"
  | "NotEquals";

/**
 * Optional parameters.
 */
export interface MonitorsListByResourceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter to be applied on the operation.
   */
  filter?: string;
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the listByResource operation.
 */
export type MonitorsListByResourceResponse = MonitorsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MonitorsCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type MonitorsGetResponse = Monitor & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Monitor;
  };
};

/**
 * Contains response data for the update operation.
 */
export type MonitorsUpdateResponse = Monitor & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Monitor;
  };
};

/**
 * Optional parameters.
 */
export interface MonitorsListByResourceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter to be applied on the operation.
   */
  filter?: string;
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the listByResourceNext operation.
 */
export type MonitorsListByResourceNextResponse = MonitorsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MonitorsCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ComponentsListByResourceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter to be applied on the operation.
   */
  filter?: string;
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
  /**
   * Properties to be returned in the response.
   */
  select?: string;
  /**
   * Apply aggregation.
   */
  apply?: string;
  /**
   * Sort the result on one or more properties.
   */
  orderby?: string;
  /**
   * Include properties inline in the response.
   */
  expand?: string;
  /**
   * Limit the result to the specified number of rows.
   */
  top?: string;
}

/**
 * Contains response data for the listByResource operation.
 */
export type ComponentsListByResourceResponse = ComponentsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ComponentsCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ComponentsGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Properties to be returned in the response.
   */
  select?: string;
  /**
   * Include properties inline in the response.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type ComponentsGetResponse = Component & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Component;
  };
};

/**
 * Optional parameters.
 */
export interface ComponentsListByResourceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter to be applied on the operation.
   */
  filter?: string;
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
  /**
   * Properties to be returned in the response.
   */
  select?: string;
  /**
   * Apply aggregation.
   */
  apply?: string;
  /**
   * Sort the result on one or more properties.
   */
  orderby?: string;
  /**
   * Include properties inline in the response.
   */
  expand?: string;
  /**
   * Limit the result to the specified number of rows.
   */
  top?: string;
}

/**
 * Contains response data for the listByResourceNext operation.
 */
export type ComponentsListByResourceNextResponse = ComponentsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ComponentsCollection;
  };
};

/**
 * Optional parameters.
 */
export interface MonitorInstancesListByResourceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter to be applied on the operation.
   */
  filter?: string;
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
  /**
   * Properties to be returned in the response.
   */
  select?: string;
  /**
   * Apply aggregation.
   */
  apply?: string;
  /**
   * Sort the result on one or more properties.
   */
  orderby?: string;
  /**
   * Include properties inline in the response.
   */
  expand?: string;
  /**
   * Limit the result to the specified number of rows.
   */
  top?: string;
}

/**
 * Contains response data for the listByResource operation.
 */
export type MonitorInstancesListByResourceResponse = MonitorInstancesCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MonitorInstancesCollection;
  };
};

/**
 * Optional parameters.
 */
export interface MonitorInstancesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Properties to be returned in the response.
   */
  select?: string;
  /**
   * Include properties inline in the response.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type MonitorInstancesGetResponse = MonitorInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MonitorInstance;
  };
};

/**
 * Optional parameters.
 */
export interface MonitorInstancesListByResourceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter to be applied on the operation.
   */
  filter?: string;
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
  /**
   * Properties to be returned in the response.
   */
  select?: string;
  /**
   * Apply aggregation.
   */
  apply?: string;
  /**
   * Sort the result on one or more properties.
   */
  orderby?: string;
  /**
   * Include properties inline in the response.
   */
  expand?: string;
  /**
   * Limit the result to the specified number of rows.
   */
  top?: string;
}

/**
 * Contains response data for the listByResourceNext operation.
 */
export type MonitorInstancesListByResourceNextResponse = MonitorInstancesCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MonitorInstancesCollection;
  };
};

/**
 * Optional parameters.
 */
export interface NotificationSettingsListByResourceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the listByResource operation.
 */
export type NotificationSettingsListByResourceResponse = NotificationSettingsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotificationSettingsCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NotificationSettingsGetResponse = NotificationSetting & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotificationSetting;
  };
};

/**
 * Contains response data for the update operation.
 */
export type NotificationSettingsUpdateResponse = NotificationSetting & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotificationSetting;
  };
};

/**
 * Optional parameters.
 */
export interface NotificationSettingsListByResourceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the listByResourceNext operation.
 */
export type NotificationSettingsListByResourceNextResponse = NotificationSettingsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotificationSettingsCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ComponentsSummaryListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter to be applied on the operation.
   */
  filter?: string;
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
  /**
   * Properties to be returned in the response.
   */
  select?: string;
  /**
   * Apply aggregation.
   */
  apply?: string;
  /**
   * Sort the result on one or more properties.
   */
  orderby?: string;
  /**
   * Include properties inline in the response.
   */
  expand?: string;
  /**
   * Limit the result to the specified number of rows.
   */
  top?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ComponentsSummaryListResponse = ComponentsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ComponentsCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ComponentsSummaryListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter to be applied on the operation.
   */
  filter?: string;
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
  /**
   * Properties to be returned in the response.
   */
  select?: string;
  /**
   * Apply aggregation.
   */
  apply?: string;
  /**
   * Sort the result on one or more properties.
   */
  orderby?: string;
  /**
   * Include properties inline in the response.
   */
  expand?: string;
  /**
   * Limit the result to the specified number of rows.
   */
  top?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ComponentsSummaryListNextResponse = ComponentsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ComponentsCollection;
  };
};

/**
 * Optional parameters.
 */
export interface MonitorInstancesSummaryListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter to be applied on the operation.
   */
  filter?: string;
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
  /**
   * Properties to be returned in the response.
   */
  select?: string;
  /**
   * Apply aggregation.
   */
  apply?: string;
  /**
   * Sort the result on one or more properties.
   */
  orderby?: string;
  /**
   * Include properties inline in the response.
   */
  expand?: string;
  /**
   * Limit the result to the specified number of rows.
   */
  top?: string;
}

/**
 * Contains response data for the list operation.
 */
export type MonitorInstancesSummaryListResponse = MonitorInstancesCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MonitorInstancesCollection;
  };
};

/**
 * Optional parameters.
 */
export interface MonitorInstancesSummaryListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter to be applied on the operation.
   */
  filter?: string;
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
  /**
   * Properties to be returned in the response.
   */
  select?: string;
  /**
   * Apply aggregation.
   */
  apply?: string;
  /**
   * Sort the result on one or more properties.
   */
  orderby?: string;
  /**
   * Include properties inline in the response.
   */
  expand?: string;
  /**
   * Limit the result to the specified number of rows.
   */
  top?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type MonitorInstancesSummaryListNextResponse = MonitorInstancesCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MonitorInstancesCollection;
  };
};

/**
 * Optional parameters.
 */
export interface OperationsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface OperationsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The page-continuation token to use with a paged version of this API.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface WorkloadMonitorApiOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
