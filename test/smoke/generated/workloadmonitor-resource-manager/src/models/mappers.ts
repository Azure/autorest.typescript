/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const MonitorsCollection: coreHttp.CompositeMapper = {
  serializedName: "MonitorsCollection",
  type: {
    name: "Composite",
    className: "MonitorsCollection",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Monitor" } }
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreHttp.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const Monitor: coreHttp.CompositeMapper = {
  serializedName: "Monitor",
  type: {
    name: "Composite",
    className: "Monitor",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      monitorId: {
        serializedName: "properties.monitorId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      monitorName: {
        serializedName: "properties.monitorName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      monitorDisplayName: {
        serializedName: "properties.monitorDisplayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parentMonitorName: {
        serializedName: "properties.parentMonitorName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parentMonitorDisplayName: {
        serializedName: "properties.parentMonitorDisplayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      monitorType: {
        serializedName: "properties.monitorType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Aggregate", "Dependency", "Unit"]
        }
      },
      monitorCategory: {
        serializedName: "properties.monitorCategory",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "AvailabilityHealth",
            "Configuration",
            "EntityHealth",
            "PerformanceHealth",
            "Security"
          ]
        }
      },
      componentTypeId: {
        serializedName: "properties.componentTypeId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      componentTypeName: {
        serializedName: "properties.componentTypeName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      componentTypeDisplayName: {
        serializedName: "properties.componentTypeDisplayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      monitorState: {
        serializedName: "properties.monitorState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      criteria: {
        serializedName: "properties.criteria",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MonitorCriteria" } }
        }
      },
      alertGeneration: {
        serializedName: "properties.alertGeneration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      frequency: {
        serializedName: "properties.frequency",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lookbackDuration: {
        serializedName: "properties.lookbackDuration",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      documentationURL: {
        serializedName: "properties.documentationURL",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      signalName: {
        serializedName: "properties.signalName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      signalType: {
        serializedName: "properties.signalType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MonitorCriteria: coreHttp.CompositeMapper = {
  serializedName: "MonitorCriteria",
  type: {
    name: "Composite",
    className: "MonitorCriteria",
    modelProperties: {
      healthState: {
        serializedName: "healthState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Error",
            "Warning",
            "Success",
            "Unknown",
            "Uninitialized"
          ]
        }
      },
      threshold: {
        serializedName: "threshold",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      comparisonOperator: {
        serializedName: "comparisonOperator",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Equals",
            "GreaterThan",
            "GreaterThanOrEqual",
            "LessThan",
            "LessThanOrEqual",
            "NotEquals"
          ]
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ErrorFieldContract" }
          }
        }
      }
    }
  }
};

export const ErrorFieldContract: coreHttp.CompositeMapper = {
  serializedName: "ErrorFieldContract",
  type: {
    name: "Composite",
    className: "ErrorFieldContract",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComponentsCollection: coreHttp.CompositeMapper = {
  serializedName: "ComponentsCollection",
  type: {
    name: "Composite",
    className: "ComponentsCollection",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Component" } }
        }
      }
    }
  }
};

export const Component: coreHttp.CompositeMapper = {
  serializedName: "Component",
  type: {
    name: "Composite",
    className: "Component",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      workspaceId: {
        serializedName: "properties.workspaceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      solutionId: {
        serializedName: "properties.solutionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      workloadType: {
        serializedName: "properties.workloadType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      componentName: {
        serializedName: "properties.componentName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      componentTypeId: {
        serializedName: "properties.componentTypeId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      componentTypeName: {
        serializedName: "properties.componentTypeName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      componentTypeGroupCategory: {
        serializedName: "properties.componentTypeGroupCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthState: {
        serializedName: "properties.healthState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Error",
            "Warning",
            "Success",
            "Unknown",
            "Uninitialized"
          ]
        }
      },
      healthStateCategory: {
        serializedName: "properties.healthStateCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthStateChangesStartTime: {
        serializedName: "properties.healthStateChangesStartTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      healthStateChangesEndTime: {
        serializedName: "properties.healthStateChangesEndTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastHealthStateChangeTime: {
        serializedName: "properties.lastHealthStateChangeTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      vmId: {
        serializedName: "properties.vmId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmName: {
        serializedName: "properties.vmName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmTags: {
        serializedName: "properties.vmTags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      aggregateProperties: {
        serializedName: "properties.aggregateProperties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      children: {
        serializedName: "properties.children",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Component" } }
        }
      }
    }
  }
};

export const MonitorInstancesCollection: coreHttp.CompositeMapper = {
  serializedName: "MonitorInstancesCollection",
  type: {
    name: "Composite",
    className: "MonitorInstancesCollection",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MonitorInstance" } }
        }
      }
    }
  }
};

export const MonitorInstance: coreHttp.CompositeMapper = {
  serializedName: "MonitorInstance",
  type: {
    name: "Composite",
    className: "MonitorInstance",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      workspaceId: {
        serializedName: "properties.workspaceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      solutionId: {
        serializedName: "properties.solutionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      workloadType: {
        serializedName: "properties.workloadType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      componentId: {
        serializedName: "properties.componentId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      componentName: {
        serializedName: "properties.componentName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      componentTypeId: {
        serializedName: "properties.componentTypeId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      componentTypeName: {
        serializedName: "properties.componentTypeName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      monitorId: {
        serializedName: "properties.monitorId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      monitorName: {
        serializedName: "properties.monitorName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      monitorType: {
        serializedName: "properties.monitorType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Aggregate", "Dependency", "Unit"]
        }
      },
      monitorCategory: {
        serializedName: "properties.monitorCategory",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "AvailabilityHealth",
            "Configuration",
            "EntityHealth",
            "PerformanceHealth",
            "Security"
          ]
        }
      },
      healthState: {
        serializedName: "properties.healthState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Error",
            "Warning",
            "Success",
            "Unknown",
            "Uninitialized"
          ]
        }
      },
      healthStateCategory: {
        serializedName: "properties.healthStateCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthStateChanges: {
        serializedName: "properties.healthStateChanges",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "HealthStateChange" }
          }
        }
      },
      healthStateChangesStartTime: {
        serializedName: "properties.healthStateChangesStartTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      healthStateChangesEndTime: {
        serializedName: "properties.healthStateChangesEndTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastHealthStateChangeTime: {
        serializedName: "properties.lastHealthStateChangeTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      alertGeneration: {
        serializedName: "properties.alertGeneration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aggregateProperties: {
        serializedName: "properties.aggregateProperties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      children: {
        serializedName: "properties.children",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MonitorInstance" } }
        }
      }
    }
  }
};

export const HealthStateChange: coreHttp.CompositeMapper = {
  serializedName: "HealthStateChange",
  type: {
    name: "Composite",
    className: "HealthStateChange",
    modelProperties: {
      healthState: {
        serializedName: "healthState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Error",
            "Warning",
            "Success",
            "Unknown",
            "Uninitialized"
          ]
        }
      },
      healthStateChangeTime: {
        serializedName: "healthStateChangeTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const NotificationSettingsCollection: coreHttp.CompositeMapper = {
  serializedName: "NotificationSettingsCollection",
  type: {
    name: "Composite",
    className: "NotificationSettingsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NotificationSetting" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotificationSetting: coreHttp.CompositeMapper = {
  serializedName: "NotificationSetting",
  type: {
    name: "Composite",
    className: "NotificationSetting",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionGroupResourceIds: {
        serializedName: "properties.actionGroupResourceIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "NotificationSettingPropertiesActionGroupResourceIdsItem"
          }
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationProperties"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationProperties: coreHttp.CompositeMapper = {
  serializedName: "OperationProperties",
  type: {
    name: "Composite",
    className: "OperationProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
