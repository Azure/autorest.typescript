/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WorkloadMonitorApi } from "../workloadMonitorApi";
import {
  MonitorsListByResourceOptionalParams,
  MonitorsListByResourceResponse,
  MonitorsGetResponse,
  Monitor,
  MonitorsUpdateResponse,
  MonitorsListByResourceNextOptionalParams,
  MonitorsListByResourceNextResponse
} from "../models";

/**
 * Class representing a Monitors.
 */
export class Monitors {
  private readonly client: WorkloadMonitorApi;

  /**
   * Initialize a new instance of the class Monitors class.
   * @param client Reference to the service client
   */
  constructor(client: WorkloadMonitorApi) {
    this.client = client;
  }

  /**
   * Get list of a monitors of a resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceNamespace The Namespace of the resource.
   * @param resourceType The type of the resource.
   * @param resourceName Name of the resource.
   * @param options The options parameters.
   */
  listByResource(
    resourceGroupName: string,
    resourceNamespace: string,
    resourceType: string,
    resourceName: string,
    options?: MonitorsListByResourceOptionalParams
  ): Promise<MonitorsListByResourceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceNamespace,
        resourceType,
        resourceName,
        options: operationOptions
      },
      listByResourceOperationSpec
    ) as Promise<MonitorsListByResourceResponse>;
  }

  /**
   * Get details of a single monitor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceNamespace The Namespace of the resource.
   * @param resourceType The type of the resource.
   * @param resourceName Name of the resource.
   * @param monitorId Monitor Id.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceNamespace: string,
    resourceType: string,
    resourceName: string,
    monitorId: string,
    options?: coreHttp.OperationOptions
  ): Promise<MonitorsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceNamespace,
        resourceType,
        resourceName,
        monitorId,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<MonitorsGetResponse>;
  }

  /**
   * Update a Monitor's configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceNamespace The Namespace of the resource.
   * @param resourceType The type of the resource.
   * @param resourceName Name of the resource.
   * @param monitorId Monitor Id.
   * @param body Body of the Monitor PATCH object.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    resourceNamespace: string,
    resourceType: string,
    resourceName: string,
    monitorId: string,
    body: Monitor,
    options?: coreHttp.OperationOptions
  ): Promise<MonitorsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceNamespace,
        resourceType,
        resourceName,
        monitorId,
        body,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<MonitorsUpdateResponse>;
  }

  /**
   * ListByResourceNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceNamespace The Namespace of the resource.
   * @param resourceType The type of the resource.
   * @param resourceName Name of the resource.
   * @param nextLink The nextLink from the previous successful call to the ListByResource method.
   * @param options The options parameters.
   */
  listByResourceNext(
    resourceGroupName: string,
    resourceNamespace: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: MonitorsListByResourceNextOptionalParams
  ): Promise<MonitorsListByResourceNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceNamespace,
        resourceType,
        resourceName,
        nextLink,
        options: operationOptions
      },
      listByResourceNextOperationSpec
    ) as Promise<MonitorsListByResourceNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByResourceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitorsCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skiptoken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceNamespace,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Monitor
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceNamespace,
    Parameters.resourceType,
    Parameters.resourceName,
    Parameters.monitorId
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Monitor
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceNamespace,
    Parameters.resourceType,
    Parameters.resourceName,
    Parameters.monitorId
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByResourceNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitorsCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skiptoken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceNamespace,
    Parameters.resourceType,
    Parameters.resourceName,
    Parameters.nextLink
  ],
  serializer
};
