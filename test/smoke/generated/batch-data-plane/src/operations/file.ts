/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BatchService } from "../batchService";
import {
  FileDeleteFromTaskOptionalParams,
  FileDeleteFromTaskResponse,
  FileGetFromTaskOptionalParams,
  FileGetFromTaskResponse,
  FileGetPropertiesFromTaskOptionalParams,
  FileGetPropertiesFromTaskResponse,
  FileDeleteFromComputeNodeOptionalParams,
  FileDeleteFromComputeNodeResponse,
  FileGetFromComputeNodeOptionalParams,
  FileGetFromComputeNodeResponse,
  FileGetPropertiesFromComputeNodeOptionalParams,
  FileGetPropertiesFromComputeNodeResponse,
  FileListFromTaskOptionalParams,
  FileListFromTaskResponse,
  FileListFromComputeNodeOptionalParams,
  FileListFromComputeNodeResponse,
  FileListFromTaskNextOptionalParams,
  FileListFromTaskNextResponse,
  FileListFromComputeNodeNextOptionalParams,
  FileListFromComputeNodeNextResponse
} from "../models";

/**
 * Class representing a File.
 */
export class File {
  private readonly client: BatchService;

  /**
   * Initialize a new instance of the class File class.
   * @param client Reference to the service client
   */
  constructor(client: BatchService) {
    this.client = client;
  }

  /**
   * Deletes the specified Task file from the Compute Node where the Task ran.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to delete.
   * @param filePath The path to the Task file or directory that you want to delete.
   * @param options The options parameters.
   */
  deleteFromTask(
    jobId: string,
    taskId: string,
    filePath: string,
    options?: FileDeleteFromTaskOptionalParams
  ): Promise<FileDeleteFromTaskResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { jobId, taskId, filePath, options: operationOptions },
      deleteFromTaskOperationSpec
    ) as Promise<FileDeleteFromTaskResponse>;
  }

  /**
   * Returns the content of the specified Task file.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to retrieve.
   * @param filePath The path to the Task file that you want to get the content of.
   * @param options The options parameters.
   */
  getFromTask(
    jobId: string,
    taskId: string,
    filePath: string,
    options?: FileGetFromTaskOptionalParams
  ): Promise<FileGetFromTaskResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { jobId, taskId, filePath, options: operationOptions },
      getFromTaskOperationSpec
    ) as Promise<FileGetFromTaskResponse>;
  }

  /**
   * Gets the properties of the specified Task file.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to get the properties of.
   * @param filePath The path to the Task file that you want to get the properties of.
   * @param options The options parameters.
   */
  getPropertiesFromTask(
    jobId: string,
    taskId: string,
    filePath: string,
    options?: FileGetPropertiesFromTaskOptionalParams
  ): Promise<FileGetPropertiesFromTaskResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { jobId, taskId, filePath, options: operationOptions },
      getPropertiesFromTaskOperationSpec
    ) as Promise<FileGetPropertiesFromTaskResponse>;
  }

  /**
   * Deletes the specified file from the Compute Node.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node from which you want to delete the file.
   * @param filePath The path to the file or directory that you want to delete.
   * @param options The options parameters.
   */
  deleteFromComputeNode(
    poolId: string,
    nodeId: string,
    filePath: string,
    options?: FileDeleteFromComputeNodeOptionalParams
  ): Promise<FileDeleteFromComputeNodeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { poolId, nodeId, filePath, options: operationOptions },
      deleteFromComputeNodeOperationSpec
    ) as Promise<FileDeleteFromComputeNodeResponse>;
  }

  /**
   * Returns the content of the specified Compute Node file.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that contains the file.
   * @param filePath The path to the Compute Node file that you want to get the content of.
   * @param options The options parameters.
   */
  getFromComputeNode(
    poolId: string,
    nodeId: string,
    filePath: string,
    options?: FileGetFromComputeNodeOptionalParams
  ): Promise<FileGetFromComputeNodeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { poolId, nodeId, filePath, options: operationOptions },
      getFromComputeNodeOperationSpec
    ) as Promise<FileGetFromComputeNodeResponse>;
  }

  /**
   * Gets the properties of the specified Compute Node file.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that contains the file.
   * @param filePath The path to the Compute Node file that you want to get the properties of.
   * @param options The options parameters.
   */
  getPropertiesFromComputeNode(
    poolId: string,
    nodeId: string,
    filePath: string,
    options?: FileGetPropertiesFromComputeNodeOptionalParams
  ): Promise<FileGetPropertiesFromComputeNodeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { poolId, nodeId, filePath, options: operationOptions },
      getPropertiesFromComputeNodeOperationSpec
    ) as Promise<FileGetPropertiesFromComputeNodeResponse>;
  }

  /**
   * Lists the files in a Task's directory on its Compute Node.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose files you want to list.
   * @param options The options parameters.
   */
  listFromTask(
    jobId: string,
    taskId: string,
    options?: FileListFromTaskOptionalParams
  ): Promise<FileListFromTaskResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { jobId, taskId, options: operationOptions },
      listFromTaskOperationSpec
    ) as Promise<FileListFromTaskResponse>;
  }

  /**
   * Lists all of the files in Task directories on the specified Compute Node.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node whose files you want to list.
   * @param options The options parameters.
   */
  listFromComputeNode(
    poolId: string,
    nodeId: string,
    options?: FileListFromComputeNodeOptionalParams
  ): Promise<FileListFromComputeNodeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { poolId, nodeId, options: operationOptions },
      listFromComputeNodeOperationSpec
    ) as Promise<FileListFromComputeNodeResponse>;
  }

  /**
   * ListFromTaskNext
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose files you want to list.
   * @param nextLink The nextLink from the previous successful call to the ListFromTask method.
   * @param options The options parameters.
   */
  listFromTaskNext(
    jobId: string,
    taskId: string,
    nextLink: string,
    options?: FileListFromTaskNextOptionalParams
  ): Promise<FileListFromTaskNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { jobId, taskId, nextLink, options: operationOptions },
      listFromTaskNextOperationSpec
    ) as Promise<FileListFromTaskNextResponse>;
  }

  /**
   * ListFromComputeNodeNext
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node whose files you want to list.
   * @param nextLink The nextLink from the previous successful call to the ListFromComputeNode method.
   * @param options The options parameters.
   */
  listFromComputeNodeNext(
    poolId: string,
    nodeId: string,
    nextLink: string,
    options?: FileListFromComputeNodeNextOptionalParams
  ): Promise<FileListFromComputeNodeNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { poolId, nodeId, nextLink, options: operationOptions },
      listFromComputeNodeNextOperationSpec
    ) as Promise<FileListFromComputeNodeNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const deleteFromTaskOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/{jobId}/tasks/{taskId}/files/{filePath}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.FileDeleteFromTaskHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.recursive,
    Parameters.timeout37
  ],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.jobId6,
    Parameters.taskId,
    Parameters.filePath
  ],
  headerParameters: [
    Parameters.clientRequestId37,
    Parameters.returnClientRequestId37,
    Parameters.ocpDate37
  ],
  serializer
};
const getFromTaskOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/{jobId}/tasks/{taskId}/files/{filePath}",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: Mappers.FileGetFromTaskHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout38],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.jobId7,
    Parameters.taskId1,
    Parameters.filePath1
  ],
  headerParameters: [
    Parameters.clientRequestId38,
    Parameters.returnClientRequestId38,
    Parameters.ocpDate38,
    Parameters.ocpRange,
    Parameters.ifModifiedSince15,
    Parameters.ifUnmodifiedSince15
  ],
  serializer
};
const getPropertiesFromTaskOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/{jobId}/tasks/{taskId}/files/{filePath}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.FileGetPropertiesFromTaskHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout39],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.jobId7,
    Parameters.taskId2,
    Parameters.filePath2
  ],
  headerParameters: [
    Parameters.clientRequestId39,
    Parameters.returnClientRequestId39,
    Parameters.ocpDate39,
    Parameters.ifModifiedSince16,
    Parameters.ifUnmodifiedSince16
  ],
  serializer
};
const deleteFromComputeNodeOperationSpec: coreHttp.OperationSpec = {
  path: "/pools/{poolId}/nodes/{nodeId}/files/{filePath}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.FileDeleteFromComputeNodeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.recursive,
    Parameters.timeout40
  ],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.poolId9,
    Parameters.nodeId,
    Parameters.filePath3
  ],
  headerParameters: [
    Parameters.clientRequestId40,
    Parameters.returnClientRequestId40,
    Parameters.ocpDate40
  ],
  serializer
};
const getFromComputeNodeOperationSpec: coreHttp.OperationSpec = {
  path: "/pools/{poolId}/nodes/{nodeId}/files/{filePath}",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: Mappers.FileGetFromComputeNodeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout41],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.poolId10,
    Parameters.nodeId1,
    Parameters.filePath4
  ],
  headerParameters: [
    Parameters.clientRequestId41,
    Parameters.returnClientRequestId41,
    Parameters.ocpDate41,
    Parameters.ocpRange1,
    Parameters.ifModifiedSince17,
    Parameters.ifUnmodifiedSince17
  ],
  serializer
};
const getPropertiesFromComputeNodeOperationSpec: coreHttp.OperationSpec = {
  path: "/pools/{poolId}/nodes/{nodeId}/files/{filePath}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.FileGetPropertiesFromComputeNodeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout42],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.poolId10,
    Parameters.nodeId1,
    Parameters.filePath5
  ],
  headerParameters: [
    Parameters.clientRequestId42,
    Parameters.returnClientRequestId42,
    Parameters.ocpDate42,
    Parameters.ifModifiedSince18,
    Parameters.ifUnmodifiedSince18
  ],
  serializer
};
const listFromTaskOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/{jobId}/tasks/{taskId}/files",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NodeFileListResult,
      headersMapper: Mappers.FileListFromTaskHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter8,
    Parameters.recursive1,
    Parameters.maxResults9,
    Parameters.timeout43
  ],
  urlParameters: [Parameters.batchUrl, Parameters.jobId7, Parameters.taskId3],
  headerParameters: [
    Parameters.clientRequestId43,
    Parameters.returnClientRequestId43,
    Parameters.ocpDate43
  ],
  serializer
};
const listFromComputeNodeOperationSpec: coreHttp.OperationSpec = {
  path: "/pools/{poolId}/nodes/{nodeId}/files",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NodeFileListResult,
      headersMapper: Mappers.FileListFromComputeNodeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter9,
    Parameters.recursive2,
    Parameters.maxResults10,
    Parameters.timeout44
  ],
  urlParameters: [Parameters.batchUrl, Parameters.poolId10, Parameters.nodeId2],
  headerParameters: [
    Parameters.clientRequestId44,
    Parameters.returnClientRequestId44,
    Parameters.ocpDate44
  ],
  serializer
};
const listFromTaskNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NodeFileListResult,
      headersMapper: Mappers.FileListFromTaskNextHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter8,
    Parameters.recursive1,
    Parameters.maxResults9,
    Parameters.timeout43
  ],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.jobId7,
    Parameters.taskId3,
    Parameters.nextLink6
  ],
  headerParameters: [
    Parameters.clientRequestId43,
    Parameters.returnClientRequestId43,
    Parameters.ocpDate43
  ],
  serializer
};
const listFromComputeNodeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NodeFileListResult,
      headersMapper: Mappers.FileListFromComputeNodeNextHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter9,
    Parameters.recursive2,
    Parameters.maxResults10,
    Parameters.timeout44
  ],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.poolId10,
    Parameters.nodeId2,
    Parameters.nextLink7
  ],
  headerParameters: [
    Parameters.clientRequestId44,
    Parameters.returnClientRequestId44,
    Parameters.ocpDate44
  ],
  serializer
};
