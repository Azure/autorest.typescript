/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BatchService } from "../batchService";
import {
  AccountListSupportedImagesOptionalParams,
  AccountListSupportedImagesResponse,
  AccountListPoolNodeCountsOptionalParams,
  AccountListPoolNodeCountsResponse,
  AccountListSupportedImagesNextOptionalParams,
  AccountListSupportedImagesNextResponse,
  AccountListPoolNodeCountsNextOptionalParams,
  AccountListPoolNodeCountsNextResponse
} from "../models";

/**
 * Class representing a Account.
 */
export class Account {
  private readonly client: BatchService;

  /**
   * Initialize a new instance of the class Account class.
   * @param client Reference to the service client
   */
  constructor(client: BatchService) {
    this.client = client;
  }

  /**
   * Lists all Virtual Machine Images supported by the Azure Batch service.
   * @param options The options parameters.
   */
  listSupportedImages(
    options?: AccountListSupportedImagesOptionalParams
  ): Promise<AccountListSupportedImagesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listSupportedImagesOperationSpec
    ) as Promise<AccountListSupportedImagesResponse>;
  }

  /**
   * Gets the number of Compute Nodes in each state, grouped by Pool.
   * @param options The options parameters.
   */
  listPoolNodeCounts(
    options?: AccountListPoolNodeCountsOptionalParams
  ): Promise<AccountListPoolNodeCountsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listPoolNodeCountsOperationSpec
    ) as Promise<AccountListPoolNodeCountsResponse>;
  }

  /**
   * ListSupportedImagesNext
   * @param nextLink The nextLink from the previous successful call to the ListSupportedImages method.
   * @param options The options parameters.
   */
  listSupportedImagesNext(
    nextLink: string,
    options?: AccountListSupportedImagesNextOptionalParams
  ): Promise<AccountListSupportedImagesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listSupportedImagesNextOperationSpec
    ) as Promise<AccountListSupportedImagesNextResponse>;
  }

  /**
   * ListPoolNodeCountsNext
   * @param nextLink The nextLink from the previous successful call to the ListPoolNodeCounts method.
   * @param options The options parameters.
   */
  listPoolNodeCountsNext(
    nextLink: string,
    options?: AccountListPoolNodeCountsNextOptionalParams
  ): Promise<AccountListPoolNodeCountsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listPoolNodeCountsNextOperationSpec
    ) as Promise<AccountListPoolNodeCountsNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listSupportedImagesOperationSpec: coreHttp.OperationSpec = {
  path: "/supportedimages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccountListSupportedImagesResult,
      headersMapper: Mappers.AccountListSupportedImagesHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter2,
    Parameters.maxResults3,
    Parameters.timeout17
  ],
  urlParameters: [Parameters.batchUrl],
  headerParameters: [
    Parameters.clientRequestId17,
    Parameters.returnClientRequestId17,
    Parameters.ocpDate17
  ],
  serializer
};
const listPoolNodeCountsOperationSpec: coreHttp.OperationSpec = {
  path: "/nodecounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PoolNodeCountsListResult,
      headersMapper: Mappers.AccountListPoolNodeCountsHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter3,
    Parameters.maxResults4,
    Parameters.timeout18
  ],
  urlParameters: [Parameters.batchUrl],
  headerParameters: [
    Parameters.clientRequestId18,
    Parameters.returnClientRequestId18,
    Parameters.ocpDate18
  ],
  serializer
};
const listSupportedImagesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccountListSupportedImagesResult,
      headersMapper: Mappers.AccountListSupportedImagesNextHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter2,
    Parameters.maxResults3,
    Parameters.timeout17
  ],
  urlParameters: [Parameters.batchUrl, Parameters.nextLink2],
  headerParameters: [
    Parameters.clientRequestId17,
    Parameters.returnClientRequestId17,
    Parameters.ocpDate17
  ],
  serializer
};
const listPoolNodeCountsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PoolNodeCountsListResult,
      headersMapper: Mappers.AccountListPoolNodeCountsNextHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter3,
    Parameters.maxResults4,
    Parameters.timeout18
  ],
  urlParameters: [Parameters.batchUrl, Parameters.nextLink3],
  headerParameters: [
    Parameters.clientRequestId18,
    Parameters.returnClientRequestId18,
    Parameters.ocpDate18
  ],
  serializer
};
