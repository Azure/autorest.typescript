/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ResourceLinks } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagementLinkClient } from "../managementLinkClient";
import {
  ResourceLink,
  ResourceLinksCreateOrUpdateResponse,
  ResourceLinksGetResponse,
  ResourceLinksListAtSubscriptionResponse,
  ResourceLinksListAtSourceScopeResponse,
  ResourceLinksListAtSubscriptionNextResponse,
  ResourceLinksListAtSourceScopeNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ResourceLinks operations. */
export class ResourceLinksImpl implements ResourceLinks {
  private readonly client: ManagementLinkClient;

  /**
   * Initialize a new instance of the class ResourceLinks class.
   * @param client Reference to the service client
   */
  constructor(client: ManagementLinkClient) {
    this.client = client;
  }

  /**
   * Gets all the linked resources for the subscription.
   *
   */
  public listAtSubscription(): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSubscriptionPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionPagingPage();
      }
    };
  }

  private async *listAtSubscriptionPagingPage(): AsyncIterableIterator<
    ResourceLink[]
  > {
    let result = await this._listAtSubscription();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionPagingAll(): AsyncIterableIterator<
    ResourceLink
  > {
    for await (const page of this.listAtSubscriptionPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets a list of resource links at and below the specified source scope.
   *
   */
  public listAtSourceScope(): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSourceScopePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSourceScopePagingPage();
      }
    };
  }

  private async *listAtSourceScopePagingPage(): AsyncIterableIterator<
    ResourceLink[]
  > {
    let result = await this._listAtSourceScope();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSourceScopeNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSourceScopePagingAll(): AsyncIterableIterator<
    ResourceLink
  > {
    for await (const page of this.listAtSourceScopePagingPage()) {
      yield* page;
    }
  }

  /**
   * Deletes a resource link with the specified ID.
   *
   */
  delete(): Promise<void> {}

  /**
   * Creates or updates a resource link between the specified resources.
   *
   */
  createOrUpdate(): Promise<ResourceLinksCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { linkId, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Gets a resource link with the specified ID.
   *
   */
  get(): Promise<ResourceLinksGetResponse> {}

  /**
   * Gets all the linked resources for the subscription.
   *
   */
  private _listAtSubscription(): Promise<
    ResourceLinksListAtSubscriptionResponse
  > {}

  /**
   * Gets a list of resource links at and below the specified source scope.
   *
   */
  private _listAtSourceScope(): Promise<
    ResourceLinksListAtSourceScopeResponse
  > {}

  /**
   * ListAtSubscriptionNext
   *
   */
  private _listAtSubscriptionNext(): Promise<
    ResourceLinksListAtSubscriptionNextResponse
  > {}

  /**
   * ListAtSourceScopeNext
   *
   */
  private _listAtSourceScopeNext(): Promise<
    ResourceLinksListAtSourceScopeNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/{linkId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLink
    },
    201: {
      bodyMapper: Mappers.ResourceLink
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.linkId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
