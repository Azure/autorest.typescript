/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagementLinkClientContext } from "../managementLinkClientContext";
import {
  ResourceLink,
  ResourceLinksListAtSubscriptionNextOptionalParams,
  ResourceLinksListAtSubscriptionOptionalParams,
  ResourceLinksCreateOrUpdateResponse,
  ResourceLinksGetResponse,
  ResourceLinksListAtSubscriptionResponse,
  ResourceLinksListAtSourceScopeResponse,
  ResourceLinksListAtSubscriptionNextResponse,
  ResourceLinksListAtSourceScopeNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a ResourceLinks. */
export class ResourceLinks {
  private readonly client: ManagementLinkClientContext;

  /**
   * Initialize a new instance of the class ResourceLinks class.
   * @param client Reference to the service client
   */
  constructor(client: ManagementLinkClientContext) {
    this.client = client;
  }

  /**
   * Gets all the linked resources for the subscription.
   * @param options The options parameters.
   */
  public listAtSubscription(
    options?: ResourceLinksListAtSubscriptionOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionPagingPage(options);
      }
    };
  }

  private async *listAtSubscriptionPagingPage(
    options?: ResourceLinksListAtSubscriptionOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionPagingAll(
    options?: ResourceLinksListAtSubscriptionOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of resource links at and below the specified source scope.
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param options The options parameters.
   */
  public listAtSourceScope(
    scope: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSourceScopePagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSourceScopePagingPage(scope, options);
      }
    };
  }

  private async *listAtSourceScopePagingPage(
    scope: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSourceScope(scope, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSourceScopeNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSourceScopePagingAll(
    scope: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSourceScopePagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * Deletes a resource link with the specified ID.
   * @param linkId The fully qualified ID of the resource link. Use the format,
   *               /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}.
   *               For example,
   *               /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
   * @param options The options parameters.
   */
  delete(
    linkId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      linkId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Creates or updates a resource link between the specified resources.
   * @param linkId The fully qualified ID of the resource link. Use the format,
   *               /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}.
   *               For example,
   *               /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
   * @param parameters Parameters for creating or updating a resource link.
   * @param options The options parameters.
   */
  createOrUpdate(
    linkId: string,
    parameters: ResourceLink,
    options?: coreHttp.OperationOptions
  ): Promise<ResourceLinksCreateOrUpdateResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      linkId,
      parameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createOrUpdateOperationSpec
    ) as Promise<ResourceLinksCreateOrUpdateResponse>;
  }

  /**
   * Gets a resource link with the specified ID.
   * @param linkId The fully qualified Id of the resource link. For example,
   *               /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
   * @param options The options parameters.
   */
  get(
    linkId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ResourceLinksGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      linkId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<ResourceLinksGetResponse>;
  }

  /**
   * Gets all the linked resources for the subscription.
   * @param options The options parameters.
   */
  private _listAtSubscription(
    options?: ResourceLinksListAtSubscriptionOptionalParams
  ): Promise<ResourceLinksListAtSubscriptionResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAtSubscriptionOperationSpec
    ) as Promise<ResourceLinksListAtSubscriptionResponse>;
  }

  /**
   * Gets a list of resource links at and below the specified source scope.
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param options The options parameters.
   */
  private _listAtSourceScope(
    scope: string,
    options?: coreHttp.OperationOptions
  ): Promise<ResourceLinksListAtSourceScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      scope,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAtSourceScopeOperationSpec
    ) as Promise<ResourceLinksListAtSourceScopeResponse>;
  }

  /**
   * ListAtSubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscription method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextOptionalParams
  ): Promise<ResourceLinksListAtSubscriptionNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAtSubscriptionNextOperationSpec
    ) as Promise<ResourceLinksListAtSubscriptionNextResponse>;
  }

  /**
   * ListAtSourceScopeNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the ListAtSourceScope method.
   * @param options The options parameters.
   */
  private _listAtSourceScopeNext(
    scope: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ResourceLinksListAtSourceScopeNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      scope,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAtSourceScopeNextOperationSpec
    ) as Promise<ResourceLinksListAtSourceScopeNextResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/{linkId}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.linkId],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path: "/{linkId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLink
    },
    201: {
      bodyMapper: Mappers.ResourceLink
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.linkId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/{linkId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLink
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.linkId],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionOperationSpec: coreHttp.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/links",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSourceScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Resources/links",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSourceScopeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
