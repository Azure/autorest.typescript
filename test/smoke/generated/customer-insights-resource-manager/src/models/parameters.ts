/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2017-04-26",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Hub
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const hubName: coreHttp.OperationURLParameter = {
  parameterPath: "hubName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9]+$"),
      MaxLength: 64,
      MinLength: 1
    },
    serializedName: "hubName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Hub
};

export const hubName1: coreHttp.OperationURLParameter = {
  parameterPath: "hubName",
  mapper: {
    serializedName: "hubName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const hubName2: coreHttp.OperationURLParameter = {
  parameterPath: "hubName",
  mapper: {
    serializedName: "hubName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ProfileResourceFormat
};

export const profileName: coreHttp.OperationURLParameter = {
  parameterPath: "profileName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
      MaxLength: 128,
      MinLength: 1
    },
    serializedName: "profileName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const profileName1: coreHttp.OperationURLParameter = {
  parameterPath: "profileName",
  mapper: {
    serializedName: "profileName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const localeCode: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "localeCode"],
  mapper: {
    defaultValue: "en-us",
    serializedName: "locale-code",
    type: {
      name: "String"
    }
  }
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters3: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.InteractionResourceFormat
};

export const interactionName: coreHttp.OperationURLParameter = {
  parameterPath: "interactionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
      MaxLength: 128,
      MinLength: 1
    },
    serializedName: "interactionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const interactionName1: coreHttp.OperationURLParameter = {
  parameterPath: "interactionName",
  mapper: {
    serializedName: "interactionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const localeCode1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "localeCode"],
  mapper: {
    defaultValue: "en-us",
    serializedName: "locale-code",
    type: {
      name: "String"
    }
  }
};

export const parameters4: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.RelationshipResourceFormat
};

export const relationshipName: coreHttp.OperationURLParameter = {
  parameterPath: "relationshipName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
      MaxLength: 512,
      MinLength: 1
    },
    serializedName: "relationshipName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const relationshipName1: coreHttp.OperationURLParameter = {
  parameterPath: "relationshipName",
  mapper: {
    serializedName: "relationshipName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters5: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.RelationshipLinkResourceFormat
};

export const relationshipLinkName: coreHttp.OperationURLParameter = {
  parameterPath: "relationshipLinkName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
      MaxLength: 512,
      MinLength: 1
    },
    serializedName: "relationshipLinkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const relationshipLinkName1: coreHttp.OperationURLParameter = {
  parameterPath: "relationshipLinkName",
  mapper: {
    serializedName: "relationshipLinkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const relationshipLinkName2: coreHttp.OperationURLParameter = {
  parameterPath: "relationshipLinkName",
  mapper: {
    serializedName: "relationshipLinkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters6: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AuthorizationPolicyResourceFormat
};

export const authorizationPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "authorizationPolicyName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]$|^[A-Za-z0-9][w-.]*[A-Za-z0-9]$"),
      MaxLength: 50,
      MinLength: 1
    },
    serializedName: "authorizationPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const authorizationPolicyName1: coreHttp.OperationURLParameter = {
  parameterPath: "authorizationPolicyName",
  mapper: {
    serializedName: "authorizationPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters7: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ConnectorResourceFormat
};

export const connectorName: coreHttp.OperationURLParameter = {
  parameterPath: "connectorName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
      MaxLength: 128,
      MinLength: 1
    },
    serializedName: "connectorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const connectorName1: coreHttp.OperationURLParameter = {
  parameterPath: "connectorName",
  mapper: {
    serializedName: "connectorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters8: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ConnectorMappingResourceFormat
};

export const mappingName: coreHttp.OperationURLParameter = {
  parameterPath: "mappingName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
      MaxLength: 128,
      MinLength: 1
    },
    serializedName: "mappingName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const mappingName1: coreHttp.OperationURLParameter = {
  parameterPath: "mappingName",
  mapper: {
    serializedName: "mappingName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters9: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.KpiResourceFormat
};

export const kpiName: coreHttp.OperationURLParameter = {
  parameterPath: "kpiName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
      MaxLength: 512,
      MinLength: 1
    },
    serializedName: "kpiName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const kpiName1: coreHttp.OperationURLParameter = {
  parameterPath: "kpiName",
  mapper: {
    serializedName: "kpiName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const widgetTypeName: coreHttp.OperationURLParameter = {
  parameterPath: "widgetTypeName",
  mapper: {
    serializedName: "widgetTypeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const userId: coreHttp.OperationQueryParameter = {
  parameterPath: "userId",
  mapper: {
    serializedName: "userId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters10: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ViewResourceFormat
};

export const viewName: coreHttp.OperationURLParameter = {
  parameterPath: "viewName",
  mapper: {
    constraints: {
      MaxLength: 512,
      MinLength: 1
    },
    serializedName: "viewName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const viewName1: coreHttp.OperationURLParameter = {
  parameterPath: "viewName",
  mapper: {
    serializedName: "viewName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const userId1: coreHttp.OperationQueryParameter = {
  parameterPath: "userId",
  mapper: {
    serializedName: "userId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters11: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.LinkResourceFormat
};

export const linkName: coreHttp.OperationURLParameter = {
  parameterPath: "linkName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
      MaxLength: 512,
      MinLength: 1
    },
    serializedName: "linkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const linkName1: coreHttp.OperationURLParameter = {
  parameterPath: "linkName",
  mapper: {
    serializedName: "linkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters12: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.RoleAssignmentResourceFormat
};

export const assignmentName: coreHttp.OperationURLParameter = {
  parameterPath: "assignmentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
      MaxLength: 128,
      MinLength: 1
    },
    serializedName: "assignmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const assignmentName1: coreHttp.OperationURLParameter = {
  parameterPath: "assignmentName",
  mapper: {
    serializedName: "assignmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters13: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.GetImageUploadUrlInput
};

export const parameters14: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.GetImageUploadUrlInput
};

export const parameters15: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PredictionResourceFormat
};

export const predictionName: coreHttp.OperationURLParameter = {
  parameterPath: "predictionName",
  mapper: {
    constraints: {
      MaxLength: 512,
      MinLength: 1
    },
    serializedName: "predictionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const predictionName1: coreHttp.OperationURLParameter = {
  parameterPath: "predictionName",
  mapper: {
    serializedName: "predictionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters16: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PredictionModelStatus
};
