/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { CustomerInsightsManagementClientContext } from "./customerInsightsManagementClientContext";

class CustomerInsightsManagementClient extends CustomerInsightsManagementClientContext {
  /**
   * Initializes a new instance of the CustomerInsightsManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
   *                       subscription. The subscription ID forms part of the URI for every service call.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    subscriptionId: string,
    options?: Models.CustomerInsightsManagementClientOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.operations = new operations.Operations(this);
    this.hubs = new operations.Hubs(this);
    this.profiles = new operations.Profiles(this);
    this.interactions = new operations.Interactions(this);
    this.relationships = new operations.Relationships(this);
    this.relationshipLinks = new operations.RelationshipLinks(this);
    this.authorizationPolicies = new operations.AuthorizationPolicies(this);
    this.connectors = new operations.Connectors(this);
    this.connectorMappings = new operations.ConnectorMappings(this);
    this.kpi = new operations.Kpi(this);
    this.widgetTypes = new operations.WidgetTypes(this);
    this.views = new operations.Views(this);
    this.links = new operations.Links(this);
    this.roles = new operations.Roles(this);
    this.roleAssignments = new operations.RoleAssignments(this);
    this.images = new operations.Images(this);
    this.predictions = new operations.Predictions(this);
  }

  operations: operations.Operations;
  hubs: operations.Hubs;
  profiles: operations.Profiles;
  interactions: operations.Interactions;
  relationships: operations.Relationships;
  relationshipLinks: operations.RelationshipLinks;
  authorizationPolicies: operations.AuthorizationPolicies;
  connectors: operations.Connectors;
  connectorMappings: operations.ConnectorMappings;
  kpi: operations.Kpi;
  widgetTypes: operations.WidgetTypes;
  views: operations.Views;
  links: operations.Links;
  roles: operations.Roles;
  roleAssignments: operations.RoleAssignments;
  images: operations.Images;
  predictions: operations.Predictions;
}

// Operation Specifications

export {
  CustomerInsightsManagementClient,
  CustomerInsightsManagementClientContext,
  Models as CustomerInsightsManagementModels,
  Mappers as CustomerInsightsManagementMappers
};
export * from "./operations";
