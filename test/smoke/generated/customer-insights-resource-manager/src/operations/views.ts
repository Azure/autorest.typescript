/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CustomerInsightsManagementClient } from "../customerInsightsManagementClient";
import {
  ViewsListByHubResponse,
  ViewResourceFormat,
  ViewsCreateOrUpdateResponse,
  ViewsGetResponse,
  ViewsListByHubNextResponse
} from "../models";

/**
 * Class representing a Views.
 */
export class Views {
  private readonly client: CustomerInsightsManagementClient;

  /**
   * Initialize a new instance of the class Views class.
   * @param client Reference to the service client
   */
  constructor(client: CustomerInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Gets all available views for given user in the specified hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param userId The user ID. Use * to retrieve hub level views.
   * @param options The options parameters.
   */
  listByHub(
    resourceGroupName: string,
    hubName: string,
    userId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ViewsListByHubResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, userId, options: operationOptions },
      listByHubOperationSpec
    ) as Promise<ViewsListByHubResponse>;
  }

  /**
   * Creates a view or updates an existing view in the hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param parameters Parameters supplied to the CreateOrUpdate View operation.
   * @param viewName The name of the view.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    hubName: string,
    parameters: ViewResourceFormat,
    viewName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ViewsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        parameters,
        viewName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<ViewsCreateOrUpdateResponse>;
  }

  /**
   * Gets a view in the hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param viewName The name of the view.
   * @param userId The user ID. Use * to retrieve hub level view.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    hubName: string,
    viewName: string,
    userId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ViewsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        viewName,
        userId,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ViewsGetResponse>;
  }

  /**
   * Deletes a view in the specified hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param viewName The name of the view.
   * @param userId The user ID. Use * to retrieve hub level view.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    hubName: string,
    viewName: string,
    userId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        viewName,
        userId,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListByHubNext
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param nextLink The nextLink from the previous successful call to the ListByHub method.
   * @param userId The user ID. Use * to retrieve hub level views.
   * @param options The options parameters.
   */
  listByHubNext(
    resourceGroupName: string,
    hubName: string,
    nextLink: string,
    userId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ViewsListByHubNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        nextLink,
        userId,
        options: operationOptions
      },
      listByHubNextOperationSpec
    ) as Promise<ViewsListByHubNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByHubOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ViewListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.userId],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views/{viewName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ViewResourceFormat
    }
  },
  requestBody: Parameters.parameters10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.viewName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views/{viewName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ViewResourceFormat
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.userId1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.viewName1
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views/{viewName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion, Parameters.userId1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.viewName1
  ],
  serializer
};
const listByHubNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ViewListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.userId],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.nextLink2
  ],
  serializer
};
