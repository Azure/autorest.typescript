/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CustomerInsightsManagementClient } from "../customerInsightsManagementClient";
import {
  ConnectorMappingResourceFormat,
  ConnectorMappingsCreateOrUpdateResponse,
  ConnectorMappingsGetResponse,
  ConnectorMappingsListByConnectorResponse,
  ConnectorMappingsListByConnectorNextResponse
} from "../models";

/**
 * Class representing a ConnectorMappings.
 */
export class ConnectorMappings {
  private readonly client: CustomerInsightsManagementClient;

  /**
   * Initialize a new instance of the class ConnectorMappings class.
   * @param client Reference to the service client
   */
  constructor(client: CustomerInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Creates a connector mapping or updates an existing connector mapping in the connector.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param connectorName The name of the connector.
   * @param parameters Parameters supplied to the CreateOrUpdate Connector Mapping operation.
   * @param mappingName The name of the connector mapping.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    hubName: string,
    connectorName: string,
    parameters: ConnectorMappingResourceFormat,
    mappingName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ConnectorMappingsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        connectorName,
        parameters,
        mappingName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<ConnectorMappingsCreateOrUpdateResponse>;
  }

  /**
   * Gets a connector mapping in the connector.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param connectorName The name of the connector.
   * @param mappingName The name of the connector mapping.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    hubName: string,
    connectorName: string,
    mappingName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ConnectorMappingsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        connectorName,
        mappingName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ConnectorMappingsGetResponse>;
  }

  /**
   * Deletes a connector mapping in the connector.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param connectorName The name of the connector.
   * @param mappingName The name of the connector mapping.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    hubName: string,
    connectorName: string,
    mappingName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        connectorName,
        mappingName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets all the connector mappings in the specified connector.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param connectorName The name of the connector.
   * @param options The options parameters.
   */
  listByConnector(
    resourceGroupName: string,
    hubName: string,
    connectorName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ConnectorMappingsListByConnectorResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, connectorName, options: operationOptions },
      listByConnectorOperationSpec
    ) as Promise<ConnectorMappingsListByConnectorResponse>;
  }

  /**
   * ListByConnectorNext
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param connectorName The name of the connector.
   * @param nextLink The nextLink from the previous successful call to the ListByConnector method.
   * @param options The options parameters.
   */
  listByConnectorNext(
    resourceGroupName: string,
    hubName: string,
    connectorName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ConnectorMappingsListByConnectorNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        connectorName,
        nextLink,
        options: operationOptions
      },
      listByConnectorNextOperationSpec
    ) as Promise<ConnectorMappingsListByConnectorNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorMappingResourceFormat
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.connectorName1,
    Parameters.mappingName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorMappingResourceFormat
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.connectorName1,
    Parameters.mappingName1
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.connectorName1,
    Parameters.mappingName1
  ],
  serializer
};
const listByConnectorOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorMappingListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.connectorName1
  ],
  serializer
};
const listByConnectorNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorMappingListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.connectorName1,
    Parameters.nextLink3
  ],
  serializer
};
