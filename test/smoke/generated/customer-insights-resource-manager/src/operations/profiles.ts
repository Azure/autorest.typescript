/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CustomerInsightsManagementClient } from "../customerInsightsManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ProfileResourceFormat,
  ProfilesCreateOrUpdateResponse,
  ProfilesGetOptionalParams,
  ProfilesGetResponse,
  ProfilesDeleteOptionalParams,
  ProfilesListByHubOptionalParams,
  ProfilesListByHubResponse,
  ProfilesGetEnrichingKpisResponse,
  ProfilesListByHubNextOptionalParams,
  ProfilesListByHubNextResponse
} from "../models";

/**
 * Class representing a Profiles.
 */
export class Profiles {
  private readonly client: CustomerInsightsManagementClient;

  /**
   * Initialize a new instance of the class Profiles class.
   * @param client Reference to the service client
   */
  constructor(client: CustomerInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Creates a profile within a Hub, or updates an existing profile.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param parameters Parameters supplied to the create/delete Profile type operation
   * @param profileName The name of the profile.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    hubName: string,
    parameters: ProfileResourceFormat,
    profileName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ProfilesCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      hubName,
      parameters,
      profileName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ProfilesCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets information about the specified profile.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param profileName The name of the profile.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    hubName: string,
    profileName: string,
    options?: ProfilesGetOptionalParams
  ): Promise<ProfilesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, profileName, options: operationOptions },
      getOperationSpec
    ) as Promise<ProfilesGetResponse>;
  }

  /**
   * Deletes a profile within a hub
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param profileName The name of the profile.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    hubName: string,
    profileName: string,
    options?: ProfilesDeleteOptionalParams
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      hubName,
      profileName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets all profile in the hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param options The options parameters.
   */
  listByHub(
    resourceGroupName: string,
    hubName: string,
    options?: ProfilesListByHubOptionalParams
  ): Promise<ProfilesListByHubResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, options: operationOptions },
      listByHubOperationSpec
    ) as Promise<ProfilesListByHubResponse>;
  }

  /**
   * Gets the KPIs that enrich the profile Type identified by the supplied name. Enrichment happens
   * through participants of the Interaction on an Interaction KPI and through Relationships for Profile
   * KPIs.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param profileName The name of the profile.
   * @param options The options parameters.
   */
  getEnrichingKpis(
    resourceGroupName: string,
    hubName: string,
    profileName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProfilesGetEnrichingKpisResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, profileName, options: operationOptions },
      getEnrichingKpisOperationSpec
    ) as Promise<ProfilesGetEnrichingKpisResponse>;
  }

  /**
   * ListByHubNext
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param nextLink The nextLink from the previous successful call to the ListByHub method.
   * @param options The options parameters.
   */
  listByHubNext(
    resourceGroupName: string,
    hubName: string,
    nextLink: string,
    options?: ProfilesListByHubNextOptionalParams
  ): Promise<ProfilesListByHubNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, nextLink, options: operationOptions },
      listByHubNextOperationSpec
    ) as Promise<ProfilesListByHubNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ProfileResourceFormat
    },
    201: {
      bodyMapper: Mappers.ProfileResourceFormat
    },
    202: {
      bodyMapper: Mappers.ProfileResourceFormat
    },
    204: {
      bodyMapper: Mappers.ProfileResourceFormat
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.profileName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProfileResourceFormat
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.localeCode],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.profileName1
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion, Parameters.localeCode],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.profileName1
  ],
  serializer
};
const listByHubOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProfileListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.localeCode],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2
  ],
  serializer
};
const getEnrichingKpisOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}/getEnrichingKpis",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "KpiDefinition" } }
        },
        serializedName: "ArrayOfKpiDefinition"
      }
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.profileName1
  ],
  serializer
};
const listByHubNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProfileListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.localeCode],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.nextLink2
  ],
  serializer
};
