/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CustomerInsightsManagementClient } from "../customerInsightsManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  InteractionResourceFormat,
  InteractionsCreateOrUpdateResponse,
  InteractionsGetOptionalParams,
  InteractionsGetResponse,
  InteractionsListByHubOptionalParams,
  InteractionsListByHubResponse,
  InteractionsSuggestRelationshipLinksResponse,
  InteractionsListByHubNextOptionalParams,
  InteractionsListByHubNextResponse
} from "../models";

/**
 * Class representing a Interactions.
 */
export class Interactions {
  private readonly client: CustomerInsightsManagementClient;

  /**
   * Initialize a new instance of the class Interactions class.
   * @param client Reference to the service client
   */
  constructor(client: CustomerInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Creates an interaction or updates an existing interaction within a hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param parameters Parameters supplied to the CreateOrUpdate Interaction operation.
   * @param interactionName The name of the interaction.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    hubName: string,
    parameters: InteractionResourceFormat,
    interactionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<InteractionsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      hubName,
      parameters,
      interactionName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        InteractionsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets information about the specified interaction.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param interactionName The name of the interaction.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    hubName: string,
    interactionName: string,
    options?: InteractionsGetOptionalParams
  ): Promise<InteractionsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        interactionName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<InteractionsGetResponse>;
  }

  /**
   * Gets all interactions in the hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param options The options parameters.
   */
  listByHub(
    resourceGroupName: string,
    hubName: string,
    options?: InteractionsListByHubOptionalParams
  ): Promise<InteractionsListByHubResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, options: operationOptions },
      listByHubOperationSpec
    ) as Promise<InteractionsListByHubResponse>;
  }

  /**
   * Suggests relationships to create relationship links.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param interactionName The name of the interaction.
   * @param options The options parameters.
   */
  suggestRelationshipLinks(
    resourceGroupName: string,
    hubName: string,
    interactionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<InteractionsSuggestRelationshipLinksResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        interactionName,
        options: operationOptions
      },
      suggestRelationshipLinksOperationSpec
    ) as Promise<InteractionsSuggestRelationshipLinksResponse>;
  }

  /**
   * ListByHubNext
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param nextLink The nextLink from the previous successful call to the ListByHub method.
   * @param options The options parameters.
   */
  listByHubNext(
    resourceGroupName: string,
    hubName: string,
    nextLink: string,
    options?: InteractionsListByHubNextOptionalParams
  ): Promise<InteractionsListByHubNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, nextLink, options: operationOptions },
      listByHubNextOperationSpec
    ) as Promise<InteractionsListByHubNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.InteractionResourceFormat
    },
    201: {
      bodyMapper: Mappers.InteractionResourceFormat
    },
    202: {
      bodyMapper: Mappers.InteractionResourceFormat
    },
    204: {
      bodyMapper: Mappers.InteractionResourceFormat
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.interactionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InteractionResourceFormat
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.localeCode1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.interactionName1
  ],
  serializer
};
const listByHubOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InteractionListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.localeCode1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2
  ],
  serializer
};
const suggestRelationshipLinksOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}/suggestRelationshipLinks",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SuggestRelationshipLinksResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.interactionName1
  ],
  serializer
};
const listByHubNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InteractionListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.localeCode1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.nextLink2
  ],
  serializer
};
