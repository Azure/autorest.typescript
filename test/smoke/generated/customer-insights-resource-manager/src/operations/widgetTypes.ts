/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CustomerInsightsManagementClient } from "../customerInsightsManagementClient";
import {
  WidgetTypesListByHubResponse,
  WidgetTypesGetResponse,
  WidgetTypesListByHubNextResponse
} from "../models";

/**
 * Class representing a WidgetTypes.
 */
export class WidgetTypes {
  private readonly client: CustomerInsightsManagementClient;

  /**
   * Initialize a new instance of the class WidgetTypes class.
   * @param client Reference to the service client
   */
  constructor(client: CustomerInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Gets all available widget types in the specified hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param options The options parameters.
   */
  listByHub(
    resourceGroupName: string,
    hubName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WidgetTypesListByHubResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, options: operationOptions },
      listByHubOperationSpec
    ) as Promise<WidgetTypesListByHubResponse>;
  }

  /**
   * Gets a widget type in the specified hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param widgetTypeName The name of the widget type.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    hubName: string,
    widgetTypeName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WidgetTypesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, widgetTypeName, options: operationOptions },
      getOperationSpec
    ) as Promise<WidgetTypesGetResponse>;
  }

  /**
   * ListByHubNext
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param nextLink The nextLink from the previous successful call to the ListByHub method.
   * @param options The options parameters.
   */
  listByHubNext(
    resourceGroupName: string,
    hubName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WidgetTypesListByHubNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, nextLink, options: operationOptions },
      listByHubNextOperationSpec
    ) as Promise<WidgetTypesListByHubNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByHubOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/widgetTypes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WidgetTypeListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/widgetTypes/{widgetTypeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WidgetTypeResourceFormat
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.widgetTypeName
  ],
  serializer
};
const listByHubNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WidgetTypeListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName2,
    Parameters.nextLink2
  ],
  serializer
};
