/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The core properties of ARM resources.
 */
export interface Resource {
  /**
   * Fully qualified resource Id for the resource.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM tracked top level resource.
 */
export type TrackedResource = Resource & {
  /**
   * The GEO location of the resource.
   */
  location?: string;
  /**
   * Tags of the service which is a list of key value pairs that describe the resource.
   */
  tags?: { [propertyName: string]: string };
};

/**
 * Service resource
 */
export type ServiceResource = TrackedResource & {
  /**
   * Properties of the Service resource
   */
  properties?: ClusterResourceProperties;
};

/**
 * Service properties payload
 */
export interface ClusterResourceProperties {
  /**
   * Provisioning state of the Service
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Config server git properties of the Service
   */
  configServerProperties?: ConfigServerProperties;
  /**
   * Trace properties of the Service
   */
  trace?: TraceProperties;
  /**
   * Version of the Service
   */
  readonly version?: number;
  /**
   * ServiceInstanceEntity GUID which uniquely identifies a created resource
   */
  readonly serviceId?: string;
}

/**
 * Config server git properties payload
 */
export interface ConfigServerProperties {
  /**
   * State of the config server.
   */
  readonly state?: ConfigServerState;
  /**
   * Error when apply config server settings.
   */
  error?: ErrorModel;
  /**
   * Settings of config server.
   */
  configServer?: ConfigServerSettings;
}

/**
 * The error code compose of code and message.
 */
export interface ErrorModel {
  /**
   * The code of error.
   */
  code?: string;
  /**
   * The message of error.
   */
  message?: string;
}

/**
 * The settings of config server.
 */
export interface ConfigServerSettings {
  /**
   * Property of git environment.
   */
  gitProperty?: ConfigServerGitProperty;
}

/**
 * Property of git.
 */
export interface ConfigServerGitProperty {
  /**
   * Repositories of git.
   */
  repositories?: GitPatternRepository[];
  /**
   * URI of the repository
   */
  uri: string;
  /**
   * Label of the repository
   */
  label?: string;
  /**
   * Searching path of the repository
   */
  searchPaths?: string[];
  /**
   * Username of git repository basic auth.
   */
  username?: string;
  /**
   * Password of git repository basic auth.
   */
  password?: string;
  /**
   * Public sshKey of git repository.
   */
  hostKey?: string;
  /**
   * SshKey algorithm of git repository.
   */
  hostKeyAlgorithm?: string;
  /**
   * Private sshKey algorithm of git repository.
   */
  privateKey?: string;
  /**
   * Strict host key checking or not.
   */
  strictHostKeyChecking?: boolean;
}

/**
 * Git repository property payload
 */
export interface GitPatternRepository {
  /**
   * Name of the repository
   */
  name: string;
  /**
   * Collection of pattern of the repository
   */
  pattern?: string[];
  /**
   * URI of the repository
   */
  uri: string;
  /**
   * Label of the repository
   */
  label?: string;
  /**
   * Searching path of the repository
   */
  searchPaths?: string[];
  /**
   * Username of git repository basic auth.
   */
  username?: string;
  /**
   * Password of git repository basic auth.
   */
  password?: string;
  /**
   * Public sshKey of git repository.
   */
  hostKey?: string;
  /**
   * SshKey algorithm of git repository.
   */
  hostKeyAlgorithm?: string;
  /**
   * Private sshKey algorithm of git repository.
   */
  privateKey?: string;
  /**
   * Strict host key checking or not.
   */
  strictHostKeyChecking?: boolean;
}

/**
 * Trace properties payload
 */
export interface TraceProperties {
  /**
   * State of the trace proxy.
   */
  readonly state?: TraceProxyState;
  /**
   * Error when apply trace proxy changes.
   */
  error?: ErrorModel;
  /**
   * Indicates whether enable the tracing functionality
   */
  enabled?: boolean;
  /**
   * Target application insight instrumentation key
   */
  appInsightInstrumentationKey?: string;
}

/**
 * An error response from the service.
 */
export interface CloudError {
  /**
   * An error response from the service.
   */
  error?: CloudErrorBody;
}

/**
 * An error response from the service.
 */
export interface CloudErrorBody {
  /**
   * An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
   */
  code?: string;
  /**
   * A message describing the error, intended to be suitable for display in a user interface.
   */
  message?: string;
  /**
   * The target of the particular error. For example, the name of the property in error.
   */
  target?: string;
  /**
   * A list of additional details about the error.
   */
  details?: CloudErrorBody[];
}

/**
 * Test keys payload
 */
export interface TestKeys {
  /**
   * Primary key
   */
  primaryKey?: string;
  /**
   * Secondary key
   */
  secondaryKey?: string;
  /**
   * Primary test endpoint
   */
  primaryTestEndpoint?: string;
  /**
   * Secondary test endpoint
   */
  secondaryTestEndpoint?: string;
  /**
   * Indicates whether the test endpoint feature enabled or not
   */
  enabled?: boolean;
}

/**
 * Regenerate test key request payload
 */
export interface RegenerateTestKeyRequestPayload {
  /**
   * Type of the test key
   */
  keyType: TestKeyType;
}

/**
 * The resource model definition for a ARM proxy resource. It will have everything other than required location and tags.
 */
export type ProxyResource = Resource & {};

/**
 * App resource payload
 */
export type AppResource = ProxyResource & {
  /**
   * Properties of the App resource
   */
  properties?: AppResourceProperties;
  /**
   * The GEO location of the application, always the same with its parent resource
   */
  location?: string;
};

/**
 * App resource properties payload
 */
export interface AppResourceProperties {
  /**
   * Indicates whether the App exposes public endpoint
   */
  public?: boolean;
  /**
   * URL of the App
   */
  readonly url?: string;
  /**
   * Provisioning state of the App
   */
  readonly provisioningState?: AppResourceProvisioningState;
  /**
   * Name of the active deployment of the App
   */
  activeDeploymentName?: string;
  /**
   * Date time when the resource is created
   */
  readonly createdTime?: Date;
  /**
   * Temporary disk settings
   */
  temporaryDisk?: TemporaryDisk;
  /**
   * Persistent disk settings
   */
  persistentDisk?: PersistentDisk;
}

/**
 * Temporary disk payload
 */
export interface TemporaryDisk {
  /**
   * Size of the temporary disk in GB
   */
  sizeInGB?: number;
  /**
   * Mount path of the temporary disk
   */
  mountPath?: string;
}

/**
 * Persistent disk payload
 */
export interface PersistentDisk {
  /**
   * Size of the persistent disk in GB
   */
  sizeInGB?: number;
  /**
   * Size of the used persistent disk in GB
   */
  readonly usedInGB?: number;
  /**
   * Mount path of the persistent disk
   */
  mountPath?: string;
}

/**
 * Object that includes an array of App resources and a possible link for next set
 */
export interface AppResourceCollection {
  /**
   * Collection of App resources
   */
  value?: AppResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * Resource upload definition payload
 */
export interface ResourceUploadDefinition {
  /**
   * Source relative path
   */
  relativePath?: string;
  /**
   * Upload URL
   */
  uploadUrl?: string;
}

/**
 * Binding resource payload
 */
export type BindingResource = ProxyResource & {
  /**
   * Properties of the Binding resource
   */
  properties?: BindingResourceProperties;
};

/**
 * Binding resource properties payload
 */
export interface BindingResourceProperties {
  /**
   * The name of the bound resource
   */
  resourceName?: string;
  /**
   * The standard Azure resource type of the bound resource
   */
  resourceType?: string;
  /**
   * The Azure resource id of the bound resource
   */
  resourceId?: string;
  /**
   * The key of the bound resource
   */
  key?: string;
  /**
   * Binding parameters of the Binding resource
   */
  bindingParameters?: { [propertyName: string]: any };
  /**
   * The generated Spring Boot property file for this binding. The secret will be deducted.
   */
  readonly generatedProperties?: string;
  /**
   * Creation time of the Binding resource
   */
  readonly createdAt?: string;
  /**
   * Update time of the Binding resource
   */
  readonly updatedAt?: string;
}

/**
 * Object that includes an array of Binding resources and a possible link for next set
 */
export interface BindingResourceCollection {
  /**
   * Collection of Binding resources
   */
  value?: BindingResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * Name availability parameters payload
 */
export interface NameAvailabilityParameters {
  /**
   * Type of the resource to check name availability
   */
  type: string;
  /**
   * Name to be checked
   */
  name: string;
}

/**
 * Name availability result payload
 */
export interface NameAvailability {
  /**
   * Indicates whether the name is available
   */
  nameAvailable?: boolean;
  /**
   * Reason why the name is not available
   */
  reason?: string;
  /**
   * Message why the name is not available
   */
  message?: string;
}

/**
 * Deployment resource payload
 */
export type DeploymentResource = ProxyResource & {
  /**
   * Properties of the Deployment resource
   */
  properties?: DeploymentResourceProperties;
};

/**
 * Deployment resource properties payload
 */
export interface DeploymentResourceProperties {
  /**
   * Uploaded source information of the deployment.
   */
  source?: UserSourceInfo;
  /**
   * App name of the deployment
   */
  readonly appName?: string;
  /**
   * Deployment settings of the Deployment
   */
  deploymentSettings?: DeploymentSettings;
  /**
   * Provisioning state of the Deployment
   */
  readonly provisioningState?: DeploymentResourceProvisioningState;
  /**
   * Status of the Deployment
   */
  readonly status?: DeploymentResourceStatus;
  /**
   * Indicates whether the Deployment is active
   */
  readonly active?: boolean;
  /**
   * Date time when the resource is created
   */
  readonly createdTime?: Date;
  /**
   * Collection of instances belong to the Deployment
   */
  readonly instances?: DeploymentInstance[];
}

/**
 * Source information for a deployment
 */
export interface UserSourceInfo {
  /**
   * Type of the source uploaded
   */
  type?: UserSourceType;
  /**
   * Relative path of the storage which stores the source
   */
  relativePath?: string;
  /**
   * Version of the source
   */
  version?: string;
  /**
   * Selector for the artifact to be used for the deployment for multi-module projects. This should be
   * the relative path to the target module/project.
   */
  artifactSelector?: string;
}

/**
 * Deployment settings payload
 */
export interface DeploymentSettings {
  /**
   * Required CPU
   */
  cpu?: number;
  /**
   * Required Memory size in GB
   */
  memoryInGB?: number;
  /**
   * JVM parameter
   */
  jvmOptions?: string;
  /**
   * Instance count
   */
  instanceCount?: number;
  /**
   * Collection of environment variables
   */
  environmentVariables?: { [propertyName: string]: string };
  /**
   * Runtime version
   */
  runtimeVersion?: RuntimeVersion;
}

/**
 * Deployment instance payload
 */
export interface DeploymentInstance {
  /**
   * Name of the deployment instance
   */
  readonly name?: string;
  /**
   * Status of the deployment instance
   */
  readonly status?: string;
  /**
   * Failed reason of the deployment instance
   */
  readonly reason?: string;
  /**
   * Discovery status of the deployment instance
   */
  readonly discoveryStatus?: string;
}

/**
 * Object that includes an array of App resources and a possible link for next set
 */
export interface DeploymentResourceCollection {
  /**
   * Collection of Deployment resources
   */
  value?: DeploymentResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * Log file URL payload
 */
export interface LogFileUrlResponse {
  /**
   * URL of the log file
   */
  url: string;
}

/**
 * Object that includes an array of Service resources and a possible link for next set
 */
export interface ServiceResourceList {
  /**
   * Collection of Service resources
   */
  value?: ServiceResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * Available operations of the service
 */
export interface AvailableOperations {
  /**
   * Collection of available operation details
   */
  value?: OperationDetail[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * Operation detail payload
 */
export interface OperationDetail {
  /**
   * Name of the operation
   */
  name?: string;
  /**
   * Indicates whether the operation is a data action
   */
  dataAction?: boolean;
  /**
   * Display of the operation
   */
  display?: OperationDisplay;
  /**
   * Origin of the operation
   */
  origin?: string;
  /**
   * Properties of the operation
   */
  properties?: OperationProperties;
}

/**
 * Operation display payload
 */
export interface OperationDisplay {
  /**
   * Resource provider of the operation
   */
  provider?: string;
  /**
   * Resource of the operation
   */
  resource?: string;
  /**
   * Localized friendly name for the operation
   */
  operation?: string;
  /**
   * Localized friendly description for the operation
   */
  description?: string;
}

/**
 * Extra Operation properties
 */
export interface OperationProperties {
  /**
   * Service specifications of the operation
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * Service specification payload
 */
export interface ServiceSpecification {
  /**
   * Specifications of the Log for Azure Monitoring
   */
  logSpecifications?: LogSpecification[];
  /**
   * Specifications of the Metrics for Azure Monitoring
   */
  metricSpecifications?: MetricSpecification[];
}

/**
 * Specifications of the Log for Azure Monitoring
 */
export interface LogSpecification {
  /**
   * Name of the log
   */
  name?: string;
  /**
   * Localized friendly display name of the log
   */
  displayName?: string;
  /**
   * Blob duration of the log
   */
  blobDuration?: string;
}

/**
 * Specifications of the Metrics for Azure Monitoring
 */
export interface MetricSpecification {
  /**
   * Name of the metric
   */
  name?: string;
  /**
   * Localized friendly display name of the metric
   */
  displayName?: string;
  /**
   * Localized friendly description of the metric
   */
  displayDescription?: string;
  /**
   * Unit that makes sense for the metric
   */
  unit?: string;
  /**
   * Name of the metric category that the metric belongs to. A metric can only belong to a single category.
   */
  category?: string;
  /**
   * Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count.
   */
  aggregationType?: string;
  /**
   * Supported aggregation types
   */
  supportedAggregationTypes?: string[];
  /**
   * Supported time grain types
   */
  supportedTimeGrainTypes?: string[];
  /**
   * Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published.
   */
  fillGapWithZero?: boolean;
  /**
   * Dimensions of the metric
   */
  dimensions?: MetricDimension[];
}

/**
 * Specifications of the Dimension of metrics
 */
export interface MetricDimension {
  /**
   * Name of the dimension
   */
  name?: string;
  /**
   * Localized friendly display name of the dimension
   */
  displayName?: string;
}

/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState =
  | "Creating"
  | "Updating"
  | "Deleting"
  | "Deleted"
  | "Succeeded"
  | "Failed"
  | "Moving"
  | "Moved"
  | "MoveFailed";
/**
 * Defines values for ConfigServerState.
 */
export type ConfigServerState =
  | "NotAvailable"
  | "Deleted"
  | "Failed"
  | "Succeeded"
  | "Updating";
/**
 * Defines values for TraceProxyState.
 */
export type TraceProxyState =
  | "NotAvailable"
  | "Failed"
  | "Succeeded"
  | "Updating";
/**
 * Defines values for TestKeyType.
 */
export type TestKeyType = "Primary" | "Secondary";
/**
 * Defines values for AppResourceProvisioningState.
 */
export type AppResourceProvisioningState =
  | "Succeeded"
  | "Failed"
  | "Creating"
  | "Updating";
/**
 * Defines values for UserSourceType.
 */
export type UserSourceType = "Jar" | "Source";
/**
 * Defines values for RuntimeVersion.
 */
export type RuntimeVersion = "Java_8" | "Java_11";
/**
 * Defines values for DeploymentResourceProvisioningState.
 */
export type DeploymentResourceProvisioningState =
  | "Creating"
  | "Updating"
  | "Succeeded"
  | "Failed";
/**
 * Defines values for DeploymentResourceStatus.
 */
export type DeploymentResourceStatus =
  | "Unknown"
  | "Stopped"
  | "Running"
  | "Failed"
  | "Allocating"
  | "Upgrading"
  | "Compiling";

/**
 * Contains response data for the get operation.
 */
export type ServicesGetResponse = ServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceResource;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServicesCreateOrUpdateResponse = ServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceResource;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ServicesUpdateResponse = ServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceResource;
  };
};

/**
 * Contains response data for the listTestKeys operation.
 */
export type ServicesListTestKeysResponse = TestKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TestKeys;
  };
};

/**
 * Contains response data for the regenerateTestKey operation.
 */
export type ServicesRegenerateTestKeyResponse = TestKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TestKeys;
  };
};

/**
 * Contains response data for the enableTestEndpoint operation.
 */
export type ServicesEnableTestEndpointResponse = TestKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TestKeys;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type ServicesCheckNameAvailabilityResponse = NameAvailability & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NameAvailability;
  };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type ServicesListBySubscriptionResponse = ServiceResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceResourceList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ServicesListResponse = ServiceResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceResourceList;
  };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type ServicesListBySubscriptionNextResponse = ServiceResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceResourceList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ServicesListNextResponse = ServiceResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceResourceList;
  };
};

/**
 * Optional parameters.
 */
export interface AppsGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Indicates whether sync status
   */
  syncStatus?: string;
}

/**
 * Contains response data for the get operation.
 */
export type AppsGetResponse = AppResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppResource;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AppsCreateOrUpdateResponse = AppResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppResource;
  };
};

/**
 * Contains response data for the update operation.
 */
export type AppsUpdateResponse = AppResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppResource;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AppsListResponse = AppResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppResourceCollection;
  };
};

/**
 * Contains response data for the getResourceUploadUrl operation.
 */
export type AppsGetResourceUploadUrlResponse = ResourceUploadDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceUploadDefinition;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type AppsListNextResponse = AppResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppResourceCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BindingsGetResponse = BindingResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BindingResource;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type BindingsCreateOrUpdateResponse = BindingResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BindingResource;
  };
};

/**
 * Contains response data for the update operation.
 */
export type BindingsUpdateResponse = BindingResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BindingResource;
  };
};

/**
 * Contains response data for the list operation.
 */
export type BindingsListResponse = BindingResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BindingResourceCollection;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type BindingsListNextResponse = BindingResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BindingResourceCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DeploymentsGetResponse = DeploymentResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeploymentResource;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DeploymentsCreateOrUpdateResponse = DeploymentResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeploymentResource;
  };
};

/**
 * Contains response data for the update operation.
 */
export type DeploymentsUpdateResponse = DeploymentResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeploymentResource;
  };
};

/**
 * Optional parameters.
 */
export interface DeploymentsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Version of the deployments to be listed
   */
  version?: string[];
}

/**
 * Contains response data for the list operation.
 */
export type DeploymentsListResponse = DeploymentResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeploymentResourceCollection;
  };
};

/**
 * Optional parameters.
 */
export interface DeploymentsListClusterAllDeploymentsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Version of the deployments to be listed
   */
  version?: string[];
}

/**
 * Contains response data for the listClusterAllDeployments operation.
 */
export type DeploymentsListClusterAllDeploymentsResponse = DeploymentResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeploymentResourceCollection;
  };
};

/**
 * Contains response data for the getLogFileUrl operation.
 */
export type DeploymentsGetLogFileUrlResponse = LogFileUrlResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LogFileUrlResponse;
  };
};

/**
 * Optional parameters.
 */
export interface DeploymentsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Version of the deployments to be listed
   */
  version?: string[];
}

/**
 * Contains response data for the listNext operation.
 */
export type DeploymentsListNextResponse = DeploymentResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeploymentResourceCollection;
  };
};

/**
 * Optional parameters.
 */
export interface DeploymentsListClusterAllDeploymentsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Version of the deployments to be listed
   */
  version?: string[];
}

/**
 * Contains response data for the listClusterAllDeploymentsNext operation.
 */
export type DeploymentsListClusterAllDeploymentsNextResponse = DeploymentResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeploymentResourceCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = AvailableOperations & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailableOperations;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = AvailableOperations & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailableOperations;
  };
};

/**
 * Optional parameters.
 */
export interface AppPlatformManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
