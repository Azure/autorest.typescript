/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreHttp.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ServiceResource: coreHttp.CompositeMapper = {
  serializedName: "ServiceResource",
  type: {
    name: "Composite",
    className: "ServiceResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterResourceProperties"
        }
      }
    }
  }
};

export const ClusterResourceProperties: coreHttp.CompositeMapper = {
  serializedName: "ClusterResourceProperties",
  type: {
    name: "Composite",
    className: "ClusterResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      configServerProperties: {
        serializedName: "configServerProperties",
        type: {
          name: "Composite",
          className: "ConfigServerProperties"
        }
      },
      trace: {
        serializedName: "trace",
        type: {
          name: "Composite",
          className: "TraceProperties"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      serviceId: {
        serializedName: "serviceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigServerProperties: coreHttp.CompositeMapper = {
  serializedName: "ConfigServerProperties",
  type: {
    name: "Composite",
    className: "ConfigServerProperties",
    modelProperties: {
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      },
      configServer: {
        serializedName: "configServer",
        type: {
          name: "Composite",
          className: "ConfigServerSettings"
        }
      }
    }
  }
};

export const ErrorModel: coreHttp.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigServerSettings: coreHttp.CompositeMapper = {
  serializedName: "ConfigServerSettings",
  type: {
    name: "Composite",
    className: "ConfigServerSettings",
    modelProperties: {
      gitProperty: {
        serializedName: "gitProperty",
        type: {
          name: "Composite",
          className: "ConfigServerGitProperty"
        }
      }
    }
  }
};

export const ConfigServerGitProperty: coreHttp.CompositeMapper = {
  serializedName: "ConfigServerGitProperty",
  type: {
    name: "Composite",
    className: "ConfigServerGitProperty",
    modelProperties: {
      repositories: {
        serializedName: "repositories",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "GitPatternRepository" }
          }
        }
      },
      uri: {
        serializedName: "uri",
        required: true,
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      searchPaths: {
        serializedName: "searchPaths",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ConfigServerGitPropertySearchPathsItem"
          }
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      hostKey: {
        serializedName: "hostKey",
        type: {
          name: "String"
        }
      },
      hostKeyAlgorithm: {
        serializedName: "hostKeyAlgorithm",
        type: {
          name: "String"
        }
      },
      privateKey: {
        serializedName: "privateKey",
        type: {
          name: "String"
        }
      },
      strictHostKeyChecking: {
        serializedName: "strictHostKeyChecking",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const GitPatternRepository: coreHttp.CompositeMapper = {
  serializedName: "GitPatternRepository",
  type: {
    name: "Composite",
    className: "GitPatternRepository",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      pattern: {
        serializedName: "pattern",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "GitPatternRepositoryPatternItem"
          }
        }
      },
      uri: {
        serializedName: "uri",
        required: true,
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      searchPaths: {
        serializedName: "searchPaths",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "GitPatternRepositorySearchPathsItem"
          }
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      hostKey: {
        serializedName: "hostKey",
        type: {
          name: "String"
        }
      },
      hostKeyAlgorithm: {
        serializedName: "hostKeyAlgorithm",
        type: {
          name: "String"
        }
      },
      privateKey: {
        serializedName: "privateKey",
        type: {
          name: "String"
        }
      },
      strictHostKeyChecking: {
        serializedName: "strictHostKeyChecking",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TraceProperties: coreHttp.CompositeMapper = {
  serializedName: "TraceProperties",
  type: {
    name: "Composite",
    className: "TraceProperties",
    modelProperties: {
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      appInsightInstrumentationKey: {
        serializedName: "appInsightInstrumentationKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreHttp.CompositeMapper = {
  serializedName: "CloudError",
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreHttp.CompositeMapper = {
  serializedName: "CloudErrorBody",
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudErrorBody" } }
        }
      }
    }
  }
};

export const TestKeys: coreHttp.CompositeMapper = {
  serializedName: "TestKeys",
  type: {
    name: "Composite",
    className: "TestKeys",
    modelProperties: {
      primaryKey: {
        serializedName: "primaryKey",
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        serializedName: "secondaryKey",
        type: {
          name: "String"
        }
      },
      primaryTestEndpoint: {
        serializedName: "primaryTestEndpoint",
        type: {
          name: "String"
        }
      },
      secondaryTestEndpoint: {
        serializedName: "secondaryTestEndpoint",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RegenerateTestKeyRequestPayload: coreHttp.CompositeMapper = {
  serializedName: "RegenerateTestKeyRequestPayload",
  type: {
    name: "Composite",
    className: "RegenerateTestKeyRequestPayload",
    modelProperties: {
      keyType: {
        serializedName: "keyType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreHttp.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const AppResource: coreHttp.CompositeMapper = {
  serializedName: "AppResource",
  type: {
    name: "Composite",
    className: "AppResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AppResourceProperties"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppResourceProperties: coreHttp.CompositeMapper = {
  serializedName: "AppResourceProperties",
  type: {
    name: "Composite",
    className: "AppResourceProperties",
    modelProperties: {
      public: {
        serializedName: "public",
        type: {
          name: "Boolean"
        }
      },
      url: {
        serializedName: "url",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      activeDeploymentName: {
        serializedName: "activeDeploymentName",
        type: {
          name: "String"
        }
      },
      createdTime: {
        serializedName: "createdTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      temporaryDisk: {
        serializedName: "temporaryDisk",
        type: {
          name: "Composite",
          className: "TemporaryDisk"
        }
      },
      persistentDisk: {
        serializedName: "persistentDisk",
        type: {
          name: "Composite",
          className: "PersistentDisk"
        }
      }
    }
  }
};

export const TemporaryDisk: coreHttp.CompositeMapper = {
  serializedName: "TemporaryDisk",
  type: {
    name: "Composite",
    className: "TemporaryDisk",
    modelProperties: {
      sizeInGB: {
        constraints: {
          InclusiveMaximum: 5
        },
        serializedName: "sizeInGB",
        type: {
          name: "Number"
        }
      },
      mountPath: {
        serializedName: "mountPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PersistentDisk: coreHttp.CompositeMapper = {
  serializedName: "PersistentDisk",
  type: {
    name: "Composite",
    className: "PersistentDisk",
    modelProperties: {
      sizeInGB: {
        constraints: {
          InclusiveMaximum: 50
        },
        serializedName: "sizeInGB",
        type: {
          name: "Number"
        }
      },
      usedInGB: {
        constraints: {
          InclusiveMaximum: 50
        },
        serializedName: "usedInGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      mountPath: {
        serializedName: "mountPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppResourceCollection: coreHttp.CompositeMapper = {
  serializedName: "AppResourceCollection",
  type: {
    name: "Composite",
    className: "AppResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "AppResource" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceUploadDefinition: coreHttp.CompositeMapper = {
  serializedName: "ResourceUploadDefinition",
  type: {
    name: "Composite",
    className: "ResourceUploadDefinition",
    modelProperties: {
      relativePath: {
        serializedName: "relativePath",
        type: {
          name: "String"
        }
      },
      uploadUrl: {
        serializedName: "uploadUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BindingResource: coreHttp.CompositeMapper = {
  serializedName: "BindingResource",
  type: {
    name: "Composite",
    className: "BindingResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BindingResourceProperties"
        }
      }
    }
  }
};

export const BindingResourceProperties: coreHttp.CompositeMapper = {
  serializedName: "BindingResourceProperties",
  type: {
    name: "Composite",
    className: "BindingResourceProperties",
    modelProperties: {
      resourceName: {
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      bindingParameters: {
        serializedName: "bindingParameters",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" }, serializedName: "any" }
        }
      },
      generatedProperties: {
        serializedName: "generatedProperties",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      updatedAt: {
        serializedName: "updatedAt",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BindingResourceCollection: coreHttp.CompositeMapper = {
  serializedName: "BindingResourceCollection",
  type: {
    name: "Composite",
    className: "BindingResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "BindingResource" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameAvailabilityParameters: coreHttp.CompositeMapper = {
  serializedName: "NameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "NameAvailabilityParameters",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameAvailability: coreHttp.CompositeMapper = {
  serializedName: "NameAvailability",
  type: {
    name: "Composite",
    className: "NameAvailability",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentResource: coreHttp.CompositeMapper = {
  serializedName: "DeploymentResource",
  type: {
    name: "Composite",
    className: "DeploymentResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DeploymentResourceProperties"
        }
      }
    }
  }
};

export const DeploymentResourceProperties: coreHttp.CompositeMapper = {
  serializedName: "DeploymentResourceProperties",
  type: {
    name: "Composite",
    className: "DeploymentResourceProperties",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "UserSourceInfo"
        }
      },
      appName: {
        serializedName: "appName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentSettings: {
        serializedName: "deploymentSettings",
        type: {
          name: "Composite",
          className: "DeploymentSettings"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      active: {
        serializedName: "active",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      createdTime: {
        serializedName: "createdTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      instances: {
        serializedName: "instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DeploymentInstance" }
          }
        }
      }
    }
  }
};

export const UserSourceInfo: coreHttp.CompositeMapper = {
  serializedName: "UserSourceInfo",
  type: {
    name: "Composite",
    className: "UserSourceInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      relativePath: {
        serializedName: "relativePath",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      artifactSelector: {
        serializedName: "artifactSelector",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentSettings: coreHttp.CompositeMapper = {
  serializedName: "DeploymentSettings",
  type: {
    name: "Composite",
    className: "DeploymentSettings",
    modelProperties: {
      cpu: {
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 4,
          InclusiveMinimum: 1
        },
        serializedName: "cpu",
        type: {
          name: "Number"
        }
      },
      memoryInGB: {
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 8,
          InclusiveMinimum: 1
        },
        serializedName: "memoryInGB",
        type: {
          name: "Number"
        }
      },
      jvmOptions: {
        serializedName: "jvmOptions",
        type: {
          name: "String"
        }
      },
      instanceCount: {
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 20,
          InclusiveMinimum: 1
        },
        serializedName: "instanceCount",
        type: {
          name: "Number"
        }
      },
      environmentVariables: {
        serializedName: "environmentVariables",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      runtimeVersion: {
        serializedName: "runtimeVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentInstance: coreHttp.CompositeMapper = {
  serializedName: "DeploymentInstance",
  type: {
    name: "Composite",
    className: "DeploymentInstance",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      discoveryStatus: {
        serializedName: "discoveryStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentResourceCollection: coreHttp.CompositeMapper = {
  serializedName: "DeploymentResourceCollection",
  type: {
    name: "Composite",
    className: "DeploymentResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DeploymentResource" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogFileUrlResponse: coreHttp.CompositeMapper = {
  serializedName: "LogFileUrlResponse",
  type: {
    name: "Composite",
    className: "LogFileUrlResponse",
    modelProperties: {
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceResourceList: coreHttp.CompositeMapper = {
  serializedName: "ServiceResourceList",
  type: {
    name: "Composite",
    className: "ServiceResourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ServiceResource" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableOperations: coreHttp.CompositeMapper = {
  serializedName: "AvailableOperations",
  type: {
    name: "Composite",
    className: "AvailableOperations",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OperationDetail" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDetail: coreHttp.CompositeMapper = {
  serializedName: "OperationDetail",
  type: {
    name: "Composite",
    className: "OperationDetail",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      dataAction: {
        serializedName: "dataAction",
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OperationProperties"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationProperties: coreHttp.CompositeMapper = {
  serializedName: "OperationProperties",
  type: {
    name: "Composite",
    className: "OperationProperties",
    modelProperties: {
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const ServiceSpecification: coreHttp.CompositeMapper = {
  serializedName: "ServiceSpecification",
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "LogSpecification" }
          }
        }
      },
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricSpecification" }
          }
        }
      }
    }
  }
};

export const LogSpecification: coreHttp.CompositeMapper = {
  serializedName: "LogSpecification",
  type: {
    name: "Composite",
    className: "LogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricSpecification: coreHttp.CompositeMapper = {
  serializedName: "MetricSpecification",
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      supportedAggregationTypes: {
        serializedName: "supportedAggregationTypes",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MetricSpecificationSupportedAggregationTypesItem"
          }
        }
      },
      supportedTimeGrainTypes: {
        serializedName: "supportedTimeGrainTypes",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MetricSpecificationSupportedTimeGrainTypesItem"
          }
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetricDimension" } }
        }
      }
    }
  }
};

export const MetricDimension: coreHttp.CompositeMapper = {
  serializedName: "MetricDimension",
  type: {
    name: "Composite",
    className: "MetricDimension",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};
