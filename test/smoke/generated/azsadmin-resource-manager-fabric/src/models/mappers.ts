/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ApplicationOperationResult: coreHttp.CompositeMapper = {
  serializedName: "ApplicationOperationResult",
  type: {
    name: "Composite",
    className: "ApplicationOperationResult",
    modelProperties: {
      ...Resource.type.modelProperties,
      instances: {
        serializedName: "properties.instances",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ApplicationOperationResultModelInstancesItem"
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationOperationResultList: coreHttp.CompositeMapper = {
  serializedName: "ApplicationOperationResultList",
  type: {
    name: "Composite",
    className: "ApplicationOperationResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ApplicationOperationResult" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeOperationResult: coreHttp.CompositeMapper = {
  serializedName: "ComputeOperationResult",
  type: {
    name: "Composite",
    className: "ComputeOperationResult",
    modelProperties: {
      ...Resource.type.modelProperties,
      instances: {
        serializedName: "properties.instances",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ComputeOperationResultModelInstancesItem"
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeOperationResultList: coreHttp.CompositeMapper = {
  serializedName: "ComputeOperationResultList",
  type: {
    name: "Composite",
    className: "ComputeOperationResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ComputeOperationResult" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationList: coreHttp.CompositeMapper = {
  serializedName: "OperationList",
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "Display"
        }
      }
    }
  }
};

export const Display: coreHttp.CompositeMapper = {
  serializedName: "Display",
  type: {
    name: "Composite",
    className: "Display",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EdgeGateway: coreHttp.CompositeMapper = {
  serializedName: "EdgeGateway",
  type: {
    name: "Composite",
    className: "EdgeGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      totalCapacity: {
        serializedName: "properties.totalCapacity",
        type: {
          name: "Number"
        }
      },
      availableCapacity: {
        serializedName: "properties.availableCapacity",
        type: {
          name: "Number"
        }
      },
      numberOfConnections: {
        serializedName: "properties.numberOfConnections",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EdgeGatewayList: coreHttp.CompositeMapper = {
  serializedName: "EdgeGatewayList",
  type: {
    name: "Composite",
    className: "EdgeGatewayList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "EdgeGateway" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EdgeGatewayPool: coreHttp.CompositeMapper = {
  serializedName: "EdgeGatewayPool",
  type: {
    name: "Composite",
    className: "EdgeGatewayPool",
    modelProperties: {
      ...Resource.type.modelProperties,
      gatewayType: {
        serializedName: "properties.gatewayType",
        type: {
          name: "String"
        }
      },
      numberOfGateways: {
        serializedName: "properties.numberOfGateways",
        type: {
          name: "Number"
        }
      },
      redundantGatewayCount: {
        serializedName: "properties.redundantGatewayCount",
        type: {
          name: "Number"
        }
      },
      gatewayCapacityKiloBitsPerSecond: {
        serializedName: "properties.gatewayCapacityKiloBitsPerSecond",
        type: {
          name: "Number"
        }
      },
      publicIpAddress: {
        serializedName: "properties.publicIpAddress",
        type: {
          name: "String"
        }
      },
      greVipSubnet: {
        serializedName: "properties.greVipSubnet",
        type: {
          name: "String"
        }
      },
      edgeGateways: {
        serializedName: "properties.edgeGateways",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "EdgeGatewayPoolModelEdgeGatewaysItem"
          }
        }
      }
    }
  }
};

export const EdgeGatewayPoolList: coreHttp.CompositeMapper = {
  serializedName: "EdgeGatewayPoolList",
  type: {
    name: "Composite",
    className: "EdgeGatewayPoolList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "EdgeGatewayPool" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FabricLocation: coreHttp.CompositeMapper = {
  serializedName: "FabricLocation",
  type: {
    name: "Composite",
    className: "FabricLocation",
    modelProperties: {
      ...Resource.type.modelProperties,
      pepIpAddresses: {
        serializedName: "properties.pepIpAddresses",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "FabricLocationModelPepIpAddressesItem"
          }
        }
      },
      timeServer: {
        serializedName: "properties.timeServer",
        type: {
          name: "String"
        }
      },
      stampInformationId: {
        serializedName: "properties.stampInformationId",
        type: {
          name: "String"
        }
      },
      externalDnsipAddress01: {
        serializedName: "properties.externalDNSIPAddress01",
        type: {
          name: "String"
        }
      },
      externalDnsipAddress02: {
        serializedName: "properties.externalDNSIPAddress02",
        type: {
          name: "String"
        }
      },
      exclusiveAdminOperationRunning: {
        serializedName: "properties.exclusiveAdminOperationRunning",
        type: {
          name: "Boolean"
        }
      },
      exclusiveAdminOperationName: {
        serializedName: "properties.exclusiveAdminOperationName",
        type: {
          name: "String"
        }
      },
      startUpActionPlanStartTime: {
        serializedName: "properties.startUpActionPlanStartTime",
        type: {
          name: "DateTime"
        }
      },
      startUpActionPlanEndTime: {
        serializedName: "properties.startUpActionPlanEndTime",
        type: {
          name: "DateTime"
        }
      },
      shutDownActionPlanStartTime: {
        serializedName: "properties.shutDownActionPlanStartTime",
        type: {
          name: "DateTime"
        }
      },
      shutDownActionPlanEndTime: {
        serializedName: "properties.shutDownActionPlanEndTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const FabricLocationList: coreHttp.CompositeMapper = {
  serializedName: "FabricLocationList",
  type: {
    name: "Composite",
    className: "FabricLocationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FabricLocation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileShare: coreHttp.CompositeMapper = {
  serializedName: "FileShare",
  type: {
    name: "Composite",
    className: "FileShare",
    modelProperties: {
      ...Resource.type.modelProperties,
      associatedVolume: {
        serializedName: "properties.associatedVolume",
        type: {
          name: "String"
        }
      },
      uncPath: {
        serializedName: "properties.uncPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileShareList: coreHttp.CompositeMapper = {
  serializedName: "FileShareList",
  type: {
    name: "Composite",
    className: "FileShareList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FileShare" } }
        }
      }
    }
  }
};

export const InfraRole: coreHttp.CompositeMapper = {
  serializedName: "InfraRole",
  type: {
    name: "Composite",
    className: "InfraRole",
    modelProperties: {
      ...Resource.type.modelProperties,
      instances: {
        serializedName: "properties.instances",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InfraRoleModelInstancesItem"
          }
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      restartable: {
        serializedName: "properties.restartable",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const InfraRoleList: coreHttp.CompositeMapper = {
  serializedName: "InfraRoleList",
  type: {
    name: "Composite",
    className: "InfraRoleList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InfraRole" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InfraRoleInstance: coreHttp.CompositeMapper = {
  serializedName: "InfraRoleInstance",
  type: {
    name: "Composite",
    className: "InfraRoleInstance",
    modelProperties: {
      ...Resource.type.modelProperties,
      scaleUnit: {
        serializedName: "properties.scaleUnit",
        type: {
          name: "String"
        }
      },
      scaleUnitNode: {
        serializedName: "properties.scaleUnitNode",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "Composite",
          className: "InfraRoleInstanceSize"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InfraRoleInstanceSize: coreHttp.CompositeMapper = {
  serializedName: "InfraRoleInstanceSize",
  type: {
    name: "Composite",
    className: "InfraRoleInstanceSize",
    modelProperties: {
      memoryGb: {
        serializedName: "memoryGb",
        type: {
          name: "Number"
        }
      },
      cores: {
        serializedName: "cores",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InfraRoleInstanceList: coreHttp.CompositeMapper = {
  serializedName: "InfraRoleInstanceList",
  type: {
    name: "Composite",
    className: "InfraRoleInstanceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "InfraRoleInstance" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPool: coreHttp.CompositeMapper = {
  serializedName: "IpPool",
  type: {
    name: "Composite",
    className: "IpPool",
    modelProperties: {
      ...Resource.type.modelProperties,
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      },
      addressPrefix: {
        serializedName: "properties.addressPrefix",
        type: {
          name: "String"
        }
      },
      numberOfIpAddresses: {
        serializedName: "properties.numberOfIpAddresses",
        type: {
          name: "Number"
        }
      },
      numberOfAllocatedIpAddresses: {
        serializedName: "properties.numberOfAllocatedIpAddresses",
        type: {
          name: "Number"
        }
      },
      numberOfIpAddressesInTransition: {
        serializedName: "properties.numberOfIpAddressesInTransition",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IpPoolList: coreHttp.CompositeMapper = {
  serializedName: "IpPoolList",
  type: {
    name: "Composite",
    className: "IpPoolList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IpPool" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogicalNetwork: coreHttp.CompositeMapper = {
  serializedName: "LogicalNetwork",
  type: {
    name: "Composite",
    className: "LogicalNetwork",
    modelProperties: {
      ...Resource.type.modelProperties,
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      networkVirtualizationEnabled: {
        serializedName: "properties.networkVirtualizationEnabled",
        type: {
          name: "Boolean"
        }
      },
      subnets: {
        serializedName: "properties.subnets",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "LogicalNetworkModelSubnetsItem"
          }
        }
      }
    }
  }
};

export const LogicalNetworkList: coreHttp.CompositeMapper = {
  serializedName: "LogicalNetworkList",
  type: {
    name: "Composite",
    className: "LogicalNetworkList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "LogicalNetwork" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogicalSubnet: coreHttp.CompositeMapper = {
  serializedName: "LogicalSubnet",
  type: {
    name: "Composite",
    className: "LogicalSubnet",
    modelProperties: {
      ...Resource.type.modelProperties,
      ipPools: {
        serializedName: "properties.ipPools",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "LogicalSubnetModelIpPoolsItem"
          }
        }
      },
      isPublic: {
        serializedName: "properties.isPublic",
        type: {
          name: "Boolean"
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const LogicalSubnetList: coreHttp.CompositeMapper = {
  serializedName: "LogicalSubnetList",
  type: {
    name: "Composite",
    className: "LogicalSubnetList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "LogicalSubnet" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MacAddressPool: coreHttp.CompositeMapper = {
  serializedName: "MacAddressPool",
  type: {
    name: "Composite",
    className: "MacAddressPool",
    modelProperties: {
      ...Resource.type.modelProperties,
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      startMacAddress: {
        serializedName: "properties.startMacAddress",
        type: {
          name: "String"
        }
      },
      endMacAddress: {
        serializedName: "properties.endMacAddress",
        type: {
          name: "String"
        }
      },
      numberOfAllocatedMacAddresses: {
        serializedName: "properties.numberOfAllocatedMacAddresses",
        type: {
          name: "Number"
        }
      },
      numberOfAvailableMacAddresses: {
        serializedName: "properties.numberOfAvailableMacAddresses",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MacAddressPoolList: coreHttp.CompositeMapper = {
  serializedName: "MacAddressPoolList",
  type: {
    name: "Composite",
    className: "MacAddressPoolList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MacAddressPool" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkOperationResult: coreHttp.CompositeMapper = {
  serializedName: "NetworkOperationResult",
  type: {
    name: "Composite",
    className: "NetworkOperationResult",
    modelProperties: {
      ...Resource.type.modelProperties,
      instances: {
        serializedName: "properties.instances",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "NetworkOperationResultModelInstancesItem"
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkOperationResultList: coreHttp.CompositeMapper = {
  serializedName: "NetworkOperationResultList",
  type: {
    name: "Composite",
    className: "NetworkOperationResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NetworkOperationResult" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScaleOutScaleUnitParametersList: coreHttp.CompositeMapper = {
  serializedName: "ScaleOutScaleUnitParametersList",
  type: {
    name: "Composite",
    className: "ScaleOutScaleUnitParametersList",
    modelProperties: {
      nodeList: {
        serializedName: "nodeList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleOutScaleUnitParameters"
            }
          }
        }
      },
      awaitStorageConvergence: {
        serializedName: "awaitStorageConvergence",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ScaleOutScaleUnitParameters: coreHttp.CompositeMapper = {
  serializedName: "ScaleOutScaleUnitParameters",
  type: {
    name: "Composite",
    className: "ScaleOutScaleUnitParameters",
    modelProperties: {
      bmciPv4Address: {
        serializedName: "bmcIpv4Address",
        type: {
          name: "String"
        }
      },
      computerName: {
        serializedName: "computerName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateFromJsonScaleUnitParametersList: coreHttp.CompositeMapper = {
  serializedName: "CreateFromJsonScaleUnitParametersList",
  type: {
    name: "Composite",
    className: "CreateFromJsonScaleUnitParametersList",
    modelProperties: {
      clusterName: {
        serializedName: "clusterName",
        type: {
          name: "String"
        }
      },
      physicalNodes: {
        serializedName: "physicalNodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeploymentJsonPhysicalNodeParameters"
            }
          }
        }
      },
      torSwitchBgpAsn: {
        serializedName: "torSwitchBgpAsn",
        type: {
          name: "String"
        }
      },
      softwareBgpAsn: {
        serializedName: "softwareBgpAsn",
        type: {
          name: "String"
        }
      },
      torSwitchBgpPeerIp: {
        serializedName: "torSwitchBgpPeerIp",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "CreateFromJsonScaleUnitParametersListTorSwitchBgpPeerIpItem"
          }
        }
      },
      infrastructureNetwork: {
        serializedName: "infrastructureNetwork",
        type: {
          name: "Composite",
          className: "NetworkDefinitionParameter"
        }
      },
      storageNetwork: {
        serializedName: "storageNetwork",
        type: {
          name: "Composite",
          className: "NetworkDefinitionParameter"
        }
      },
      netQosPriority: {
        serializedName: "netQosPriority",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DeploymentJsonPhysicalNodeParameters: coreHttp.CompositeMapper = {
  serializedName: "DeploymentJsonPhysicalNodeParameters",
  type: {
    name: "Composite",
    className: "DeploymentJsonPhysicalNodeParameters",
    modelProperties: {
      bmcipAddress: {
        serializedName: "bmcIpAddress",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDefinitionParameter: coreHttp.CompositeMapper = {
  serializedName: "NetworkDefinitionParameter",
  type: {
    name: "Composite",
    className: "NetworkDefinitionParameter",
    modelProperties: {
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "NetworkDefinitionParameterSubnetItem"
          }
        }
      },
      vlanId: {
        serializedName: "vlanId",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "NetworkDefinitionParameterVlanIdItem"
          }
        }
      }
    }
  }
};

export const ScaleUnit: coreHttp.CompositeMapper = {
  serializedName: "ScaleUnit",
  type: {
    name: "Composite",
    className: "ScaleUnit",
    modelProperties: {
      ...Resource.type.modelProperties,
      scaleUnitType: {
        serializedName: "properties.scaleUnitType",
        type: {
          name: "String"
        }
      },
      logicalFaultDomain: {
        serializedName: "properties.logicalFaultDomain",
        type: {
          name: "Number"
        }
      },
      nodes: {
        serializedName: "properties.nodes",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ScaleUnitModelNodesItem"
          }
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      model: {
        serializedName: "properties.model",
        type: {
          name: "String"
        }
      },
      totalCapacity: {
        serializedName: "totalCapacity",
        type: {
          name: "Composite",
          className: "ScaleUnitCapacity"
        }
      },
      isMultiNode: {
        serializedName: "properties.isMultiNode",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ScaleUnitCapacity: coreHttp.CompositeMapper = {
  serializedName: "ScaleUnitCapacity",
  type: {
    name: "Composite",
    className: "ScaleUnitCapacity",
    modelProperties: {
      memoryGB: {
        serializedName: "memoryGB",
        type: {
          name: "Number"
        }
      },
      cores: {
        serializedName: "cores",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ScaleUnitList: coreHttp.CompositeMapper = {
  serializedName: "ScaleUnitList",
  type: {
    name: "Composite",
    className: "ScaleUnitList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ScaleUnit" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalNodeDescription: coreHttp.CompositeMapper = {
  serializedName: "BareMetalNodeDescription",
  type: {
    name: "Composite",
    className: "BareMetalNodeDescription",
    modelProperties: {
      bmciPv4Address: {
        serializedName: "bmcIpv4Address",
        type: {
          name: "String"
        }
      },
      vendor: {
        serializedName: "vendor",
        type: {
          name: "String"
        }
      },
      model: {
        serializedName: "model",
        type: {
          name: "String"
        }
      },
      serialNumber: {
        serializedName: "serialNumber",
        type: {
          name: "String"
        }
      },
      biosVersion: {
        serializedName: "biosVersion",
        type: {
          name: "String"
        }
      },
      computerName: {
        serializedName: "computerName",
        type: {
          name: "String"
        }
      },
      clusterName: {
        serializedName: "clusterName",
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScaleUnitNode: coreHttp.CompositeMapper = {
  serializedName: "ScaleUnitNode",
  type: {
    name: "Composite",
    className: "ScaleUnitNode",
    modelProperties: {
      ...Resource.type.modelProperties,
      scaleUnitNodeStatus: {
        serializedName: "properties.scaleUnitNodeStatus",
        type: {
          name: "String"
        }
      },
      powerState: {
        serializedName: "properties.powerState",
        type: {
          name: "String"
        }
      },
      bmcAddress: {
        serializedName: "properties.bmcAddress",
        type: {
          name: "String"
        }
      },
      scaleUnitName: {
        serializedName: "properties.scaleUnitName",
        type: {
          name: "String"
        }
      },
      scaleUnitUri: {
        serializedName: "properties.scaleUnitUri",
        type: {
          name: "String"
        }
      },
      canPowerOff: {
        serializedName: "properties.canPowerOff",
        type: {
          name: "Boolean"
        }
      },
      vendor: {
        serializedName: "properties.vendor",
        type: {
          name: "String"
        }
      },
      model: {
        serializedName: "properties.model",
        type: {
          name: "String"
        }
      },
      serialNumber: {
        serializedName: "properties.serialNumber",
        type: {
          name: "String"
        }
      },
      biosVersion: {
        serializedName: "properties.biosVersion",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Composite",
          className: "ScaleUnitCapacity"
        }
      }
    }
  }
};

export const ScaleUnitNodeList: coreHttp.CompositeMapper = {
  serializedName: "ScaleUnitNodeList",
  type: {
    name: "Composite",
    className: "ScaleUnitNodeList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ScaleUnitNode" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SlbMuxInstance: coreHttp.CompositeMapper = {
  serializedName: "SlbMuxInstance",
  type: {
    name: "Composite",
    className: "SlbMuxInstance",
    modelProperties: {
      ...Resource.type.modelProperties,
      configurationState: {
        serializedName: "properties.configurationState",
        type: {
          name: "String"
        }
      },
      virtualServer: {
        serializedName: "properties.virtualServer",
        type: {
          name: "String"
        }
      },
      bgpPeers: {
        serializedName: "properties.bgpPeers",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SlbMuxInstanceModelBgpPeersItem"
          }
        }
      }
    }
  }
};

export const SlbMuxInstanceList: coreHttp.CompositeMapper = {
  serializedName: "SlbMuxInstanceList",
  type: {
    name: "Composite",
    className: "SlbMuxInstanceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SlbMuxInstance" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageOperationResult: coreHttp.CompositeMapper = {
  serializedName: "StorageOperationResult",
  type: {
    name: "Composite",
    className: "StorageOperationResult",
    modelProperties: {
      ...Resource.type.modelProperties,
      instances: {
        serializedName: "properties.instances",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "StorageOperationResultModelInstancesItem"
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageOperationResultList: coreHttp.CompositeMapper = {
  serializedName: "StorageOperationResultList",
  type: {
    name: "Composite",
    className: "StorageOperationResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "StorageOperationResult" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSubSystem: coreHttp.CompositeMapper = {
  serializedName: "StorageSubSystem",
  type: {
    name: "Composite",
    className: "StorageSubSystem",
    modelProperties: {
      ...Resource.type.modelProperties,
      totalCapacityGB: {
        serializedName: "properties.totalCapacityGB",
        type: {
          name: "Number"
        }
      },
      remainingCapacityGB: {
        serializedName: "properties.remainingCapacityGB",
        type: {
          name: "Number"
        }
      },
      healthStatus: {
        serializedName: "properties.healthStatus",
        type: {
          name: "String"
        }
      },
      operationalStatus: {
        serializedName: "properties.operationalStatus",
        type: {
          name: "String"
        }
      },
      rebalanceStatus: {
        serializedName: "properties.rebalanceStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSubSystemList: coreHttp.CompositeMapper = {
  serializedName: "StorageSubSystemList",
  type: {
    name: "Composite",
    className: "StorageSubSystemList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "StorageSubSystem" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Drive: coreHttp.CompositeMapper = {
  serializedName: "Drive",
  type: {
    name: "Composite",
    className: "Drive",
    modelProperties: {
      ...Resource.type.modelProperties,
      storageNode: {
        serializedName: "properties.storageNode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serialNumber: {
        serializedName: "properties.serialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthStatus: {
        serializedName: "properties.healthStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationalStatus: {
        serializedName: "properties.operationalStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usage: {
        serializedName: "properties.usage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      physicalLocation: {
        serializedName: "properties.physicalLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      model: {
        serializedName: "properties.model",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      firmwareVersion: {
        serializedName: "properties.firmwareVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isIndicationEnabled: {
        serializedName: "properties.isIndicationEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      manufacturer: {
        serializedName: "properties.manufacturer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storagePool: {
        serializedName: "properties.storagePool",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      mediaType: {
        serializedName: "properties.mediaType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capacityGB: {
        serializedName: "properties.capacityGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "properties.action",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DriveList: coreHttp.CompositeMapper = {
  serializedName: "DriveList",
  type: {
    name: "Composite",
    className: "DriveList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Drive" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Volume: coreHttp.CompositeMapper = {
  serializedName: "Volume",
  type: {
    name: "Composite",
    className: "Volume",
    modelProperties: {
      ...Resource.type.modelProperties,
      totalCapacityGB: {
        serializedName: "properties.totalCapacityGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      remainingCapacityGB: {
        serializedName: "properties.remainingCapacityGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      healthStatus: {
        serializedName: "properties.healthStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationalStatus: {
        serializedName: "properties.operationalStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      repairStatus: {
        serializedName: "properties.repairStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "properties.action",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      volumeLabel: {
        serializedName: "properties.volumeLabel",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumeList: coreHttp.CompositeMapper = {
  serializedName: "VolumeList",
  type: {
    name: "Composite",
    className: "VolumeList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Volume" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NasCluster: coreHttp.CompositeMapper = {
  serializedName: "NasCluster",
  type: {
    name: "Composite",
    className: "NasCluster",
    modelProperties: {
      ...Resource.type.modelProperties,
      clusterName: {
        serializedName: "properties.clusterName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      portalUri: {
        serializedName: "properties.portalUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "properties.size",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      sizeRemaining: {
        serializedName: "properties.sizeRemaining",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NasClusterList: coreHttp.CompositeMapper = {
  serializedName: "NasClusterList",
  type: {
    name: "Composite",
    className: "NasClusterList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NasCluster" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisioningState: coreHttp.CompositeMapper = {
  serializedName: "ProvisioningState",
  type: {
    name: "Composite",
    className: "ProvisioningState",
    modelProperties: {
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};
