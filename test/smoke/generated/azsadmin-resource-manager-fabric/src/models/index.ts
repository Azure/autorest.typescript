/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Base resource object.
 */
export interface Resource {
  /**
   * URI of the resource.
   */
  readonly id?: string;
  /**
   * Name of the resource.
   */
  readonly name?: string;
  /**
   * Type of resource.
   */
  readonly type?: string;
  /**
   * The region where the resource is located.
   */
  location?: string;
  /**
   * List of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Application operation result description.
 */
export type ApplicationOperationResult = Resource & {
  /**
   * List of operation result instances.
   */
  instances?: string[];
  /**
   * Success or failure of operation.
   */
  provisioningState?: string;
};

/**
 * Pageable list of application operation results.
 */
export interface ApplicationOperationResultList {
  /**
   * List of application operation results.
   */
  value?: ApplicationOperationResult[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Compute operation result description.
 */
export type ComputeOperationResult = Resource & {
  /**
   * List of operation result instances.
   */
  instances?: string[];
  /**
   * Success or failure of operation.
   */
  provisioningState?: string;
};

/**
 * Pageable list of compute operation results.
 */
export interface ComputeOperationResultList {
  /**
   * List of compute operation results.
   */
  value?: ComputeOperationResult[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * A pageable list of supported operations objects.
 */
export interface OperationList {
  /**
   * List of supported operations.
   */
  value?: Operation[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * Describes the supported REST operation.
 */
export interface Operation {
  /**
   * The name of the operation being performed on this particular object. This name should match the name that appears in RBAC or the event service.
   */
  name?: string;
  /**
   * Contains the localized display information for this particular operation or action.
   */
  display?: Display;
}

/**
 * Contains the localized display information for this particular operation / action.
 */
export interface Display {
  /**
   * The localized friendly form of the resource provider name â€“ it is expected to also include the publisher/company responsible. It should use Title Casing and begin with "Microsoft" for 1st party services. e.g. "Microsoft Monitoring Insights" or "Microsoft Compute.".
   */
  provider?: string;
  /**
   * The localized, friendly version of the resource type related to this action or operation; the resource type should match the public documentation for the resource provider.
   */
  resource?: string;
  /**
   * The localized, friendly name for the operation. Use the name as it will be displayed to the user.
   */
  operation?: string;
  /**
   * The localized, friendly description for the operation. The description will be displayed to the user. It should be thorough and concise for used in both tooltips and detailed views.
   */
  description?: string;
}

/**
 * This resource represents a gateway, which provides the configuration needed to provide gateway services to virtual networks.
 */
export type EdgeGateway = Resource & {
  /**
   * The current state of the edge gateway.
   */
  state?: string;
  /**
   * The total network capacity.
   */
  totalCapacity?: number;
  /**
   * The available network capacity.
   */
  availableCapacity?: number;
  /**
   * The current number of connections.
   */
  numberOfConnections?: number;
};

/**
 * Pageable list of edge gateways.
 */
export interface EdgeGatewayList {
  /**
   * List of edge gateways.
   */
  value?: EdgeGateway[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * This object represents an edge gateway pool, which contains a list of gateways.
 */
export type EdgeGatewayPool = Resource & {
  /**
   * The gateway type, for example, S2sIPsec, S2sGre, and so on.
   */
  gatewayType?: string;
  /**
   * The number of gateways in the pool.
   */
  numberOfGateways?: number;
  /**
   * The number of redundant gateways.
   */
  redundantGatewayCount?: number;
  /**
   * Gateway capacity in kilobits per second.
   */
  gatewayCapacityKiloBitsPerSecond?: number;
  /**
   * The public IP address.
   */
  publicIpAddress?: string;
  /**
   * The GRE VIP subnet.
   */
  greVipSubnet?: string;
  /**
   * List of the edge gateways in the pool.
   */
  edgeGateways?: string[];
};

/**
 * A pageable list of edge gateway pools objects.
 */
export interface EdgeGatewayPoolList {
  /**
   * List of edge gateway pool objects.
   */
  value?: EdgeGatewayPool[];
  /**
   * The URI to the next page.
   */
  nextLink?: string;
}

/**
 * Fabric Location resource.
 */
export type FabricLocation = Resource & {
  /**
   * The IP addresses of the privileged endpoints.
   */
  pepIpAddresses?: string[];
  /**
   * The IP address of the time server.
   */
  timeServer?: string;
  /**
   * The deployment id of the stamp.
   */
  stampInformationId?: string;
  /**
   * First external IP address of the DNS server.
   */
  externalDnsipAddress01?: string;
  /**
   * Second external IP Address of the DNS server.
   */
  externalDnsipAddress02?: string;
  /**
   * Value for whether an exclusive admin operation is running.
   */
  exclusiveAdminOperationRunning?: boolean;
  /**
   * Name of the running exclusive admin operation.
   */
  exclusiveAdminOperationName?: string;
  /**
   * Last known stamp start time for the start up action plan.
   */
  startUpActionPlanStartTime?: Date;
  /**
   * Last known stamp stop time for the start up action plan.
   */
  startUpActionPlanEndTime?: Date;
  /**
   * Last known stamp start time for the shut down action plan
   */
  shutDownActionPlanStartTime?: Date;
  /**
   * Last known stamp stop time for the shut down action plan.
   */
  shutDownActionPlanEndTime?: Date;
};

/**
 * Pageable list of fabric locations.
 */
export interface FabricLocationList {
  /**
   * List of fabric locations.
   */
  value?: FabricLocation[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Object that contains properties of the file share resource.
 */
export type FileShare = Resource & {
  /**
   * Associated volume ID.
   */
  associatedVolume?: string;
  /**
   * The UNCPath for the fileshare.
   */
  uncPath?: string;
};

/**
 * Pageable list of fabric file share locations.
 */
export interface FileShareList {
  /**
   * List of fabric file shares.
   */
  value?: FileShare[];
}

/**
 * Infrastructure role description.
 */
export type InfraRole = Resource & {
  /**
   * List of infrastructure role instances.
   */
  instances?: string[];
  /**
   * Display name for the infrastructure role.
   */
  displayName?: string;
  /**
   * Value indicating whether the infrastructure role can be restarted.
   */
  restartable?: boolean;
};

/**
 * Pageable list of infrastructure roles.
 */
export interface InfraRoleList {
  /**
   * List of infrastructure roles.
   */
  value?: InfraRole[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * The virtual machine resource is used to represent an infrastructure virtual machine in the Azure Stack environment. The fabric resource provider only surfaces infrastructure virtual machines. These machines are never created directly by the admin, but rather as a side effect of expanding admin services.
 */
export type InfraRoleInstance = Resource & {
  /**
   * The cluster that the virtual machine's host is part of.
   */
  scaleUnit?: string;
  /**
   * URI to the scale unit node.
   */
  scaleUnitNode?: string;
  /**
   * Size of the virtual machine.
   */
  size?: InfraRoleInstanceSize;
  /**
   * The current state of the virtual machine.
   */
  state?: InfraRoleInstanceState;
};

/**
 * The capacity information for a virtual machine.
 */
export interface InfraRoleInstanceSize {
  /**
   * The amount of memory, in GB, currently assigned to the virtual machine.
   */
  memoryGb?: number;
  /**
   * The number of cores assigned to the virtual machine.
   */
  cores?: number;
}

/**
 * Pageable list of infrastructure role instances.
 */
export interface InfraRoleInstanceList {
  /**
   * List of infrastructure role instances.
   */
  value?: InfraRoleInstance[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * This resource defines the range of IP addresses from which addresses are  allocated for nodes within a subnet.
 */
export type IpPool = Resource & {
  /**
   * The starting IP address.
   */
  startIpAddress?: string;
  /**
   * The ending IP address.
   */
  endIpAddress?: string;
  /**
   * The address prefix.
   */
  addressPrefix?: string;
  /**
   * The total number of IP addresses.
   */
  numberOfIpAddresses?: number;
  /**
   * The number of currently allocated IP addresses.
   */
  numberOfAllocatedIpAddresses?: number;
  /**
   * The current number of IP addresses in transition.
   */
  numberOfIpAddressesInTransition?: number;
};

/**
 * Pageable list of IP pools.
 */
export interface IpPoolList {
  /**
   * List of IP pools.
   */
  value?: IpPool[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * This resource represents a logical partition of physical network that is dedicated for a particular purpose.  A logical network comprises a collection of logical subnets.
 */
export type LogicalNetwork = Resource & {
  /**
   * Metadata related to the logical network.
   */
  metadata?: { [propertyName: string]: string };
  /**
   * Flag to indicate that the network virtualization is enabled on the logical network.
   */
  networkVirtualizationEnabled?: boolean;
  /**
   * List of subnets belonging to the logical network.
   */
  subnets?: string[];
};

/**
 * A pageable list of logical networks.
 */
export interface LogicalNetworkList {
  /**
   * List of logical networks.
   */
  value?: LogicalNetwork[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * This resource represents a logical subnet.  A logical subnet is made of a subnet-vlan pair.
 */
export type LogicalSubnet = Resource & {
  /**
   * All IP pools which belong to this subnet.
   */
  ipPools?: string[];
  /**
   * The visibility status of the IP pool.  If is true the associated pools are public IP address pools.
   */
  isPublic?: boolean;
  /**
   * Metadata related to the logical network.
   */
  metadata?: { [propertyName: string]: string };
};

/**
 * Pageable list of logical subnets.
 */
export interface LogicalSubnetList {
  /**
   * List of logical subnets.
   */
  value?: LogicalSubnet[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * This resource represents a MAC address pool.  The default MAC address pools are used if you set the MAC address type for a virtual machine to 'Static'.  If the virtual machine setting is 'Dynamic', the hypervisor assigns the MAC address.
 */
export type MacAddressPool = Resource & {
  /**
   * Metadata related to the MAC pool.
   */
  metadata?: { [propertyName: string]: string };
  /**
   * Starting MAC address.
   */
  startMacAddress?: string;
  /**
   * Ending MAC address.
   */
  endMacAddress?: string;
  /**
   * Number of MAC addresses allocated.
   */
  numberOfAllocatedMacAddresses?: number;
  /**
   * Number of MAC addresses available.
   */
  numberOfAvailableMacAddresses?: number;
};

/**
 * A pageable list of MAC address pools.
 */
export interface MacAddressPoolList {
  /**
   * List of MAC address pools.
   */
  value?: MacAddressPool[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Network operation result description.
 */
export type NetworkOperationResult = Resource & {
  /**
   * List of operation result instances.
   */
  instances?: string[];
  /**
   * Success or failure of operation.
   */
  provisioningState?: string;
};

/**
 * Pageable list of network operation results.
 */
export interface NetworkOperationResultList {
  /**
   * List of network operation results.
   */
  value?: NetworkOperationResult[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * A list of input data that allows for adding a set of scale unit nodes.
 */
export interface ScaleOutScaleUnitParametersList {
  /**
   * List of nodes in the scale unit.
   */
  nodeList?: ScaleOutScaleUnitParameters[];
  /**
   * Flag indicates if the operation should wait for storage to converge before returning.
   */
  awaitStorageConvergence?: boolean;
}

/**
 * Input data that allows for adding a scale unit node.
 */
export interface ScaleOutScaleUnitParameters {
  /**
   * BMC address of the physical machine.
   */
  bmciPv4Address?: string;
  /**
   * Computer name of the physical machine.
   */
  computerName?: string;
}

/**
 * A list of input data that allows for creating the new scale unit.
 */
export interface CreateFromJsonScaleUnitParametersList {
  /**
   * Cluster name for the new scale unit.
   */
  clusterName?: string;
  /**
   * List of nodes in the scale unit.
   */
  physicalNodes?: DeploymentJsonPhysicalNodeParameters[];
  /**
   * The ASN for the cluster's rack TOR.
   */
  torSwitchBgpAsn?: string;
  /**
   * The software ASN for the cluster's rack.
   */
  softwareBgpAsn?: string;
  /**
   * The list of IP addresses used for TOR communication.
   */
  torSwitchBgpPeerIp?: string[];
  /**
   * The information associated with the infrastructure network that will be subdivided into subnets.
   */
  infrastructureNetwork?: NetworkDefinitionParameter;
  /**
   * The information associated with the storage network that will be subdivided into subnets.
   */
  storageNetwork?: NetworkDefinitionParameter;
  /**
   * The network QOS priority setting.
   */
  netQosPriority?: number;
}

/**
 * Description of a bare metal node used for scale unit scale out operations.
 */
export interface DeploymentJsonPhysicalNodeParameters {
  /**
   * BMC address of the physical machine.
   */
  bmcipAddress?: string;
  /**
   * Computer name of the physical machine.
   */
  name?: string;
}

/**
 * A definition of the network received from a new cluster operation.
 */
export interface NetworkDefinitionParameter {
  /**
   * The subnet IP mask in the example format 10.0.0.0/25.
   */
  subnet?: string[];
  /**
   * The Vlan ID of the subnet.
   */
  vlanId?: string[];
}

/**
 * Represents a cluster. Generally, the cluster will be a collection of hosts backed by failover cluster manager.
 */
export type ScaleUnit = Resource & {
  /**
   * Type of cluster.
   */
  scaleUnitType?: ScaleUnitType;
  /**
   * Fault domain name of the cluster.
   */
  logicalFaultDomain?: number;
  /**
   * List of nodes in the server.
   */
  nodes?: string[];
  /**
   * Current state of the cluster.
   */
  state?: ScaleUnitState;
  /**
   * Model of the servers in the cluster.
   */
  model?: string;
  /**
   * Capacity information for the cluster.
   */
  totalCapacity?: ScaleUnitCapacity;
  /**
   * Denotes if more than one node in cluster.
   */
  isMultiNode?: boolean;
};

/**
 * The capacity information for a physical machine.
 */
export interface ScaleUnitCapacity {
  /**
   * The memory for the physical machine.
   */
  memoryGB?: number;
  /**
   * The number of CPU cores for the physical machine.
   */
  cores?: number;
}

/**
 * A pageable list of scale units.
 */
export interface ScaleUnitList {
  /**
   * List of scale units.
   */
  value?: ScaleUnit[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Description of a bare metal node used for ScaleOut operation on a cluster.
 */
export interface BareMetalNodeDescription {
  /**
   * BMC address of the physical machine.
   */
  bmciPv4Address?: string;
  /**
   * Vendor of the physical machine.
   */
  vendor?: string;
  /**
   * Model of the physical machine.
   */
  model?: string;
  /**
   * Serial number of the physical machine.
   */
  serialNumber?: string;
  /**
   * Bios version of the physical machine.
   */
  biosVersion?: string;
  /**
   * Name of the computer.
   */
  computerName?: string;
  /**
   * Name of the cluster.
   */
  clusterName?: string;
  /**
   * Name of the MAC address of the bare metal node.
   */
  macAddress?: string;
}

/**
 * The physical server in a cluster.
 */
export type ScaleUnitNode = Resource & {
  /**
   * Status of the physical machine.
   */
  scaleUnitNodeStatus?: ScaleUnitNodeStatus;
  /**
   * PowerState of the physical machine.
   */
  powerState?: PowerState;
  /**
   * BMC address of the physical machine.
   */
  bmcAddress?: string;
  /**
   * Cluster name of the physical machine.
   */
  scaleUnitName?: string;
  /**
   * URI of the corresponding cluster.
   */
  scaleUnitUri?: string;
  /**
   * Value indicating whether the node can be powered off.
   */
  canPowerOff?: boolean;
  /**
   * Vendor of the physical machine.
   */
  vendor?: string;
  /**
   * Model of the physical machine.
   */
  model?: string;
  /**
   * Serial number of the physical machine.
   */
  serialNumber?: string;
  /**
   * BIOS version of the physical machine.
   */
  biosVersion?: string;
  /**
   * Capacity of the physical machine.
   */
  capacity?: ScaleUnitCapacity;
};

/**
 * A pageable list of scale unit nodes.
 */
export interface ScaleUnitNodeList {
  /**
   * List of scale unit nodes.
   */
  value?: ScaleUnitNode[];
  /**
   * The URI to the next page.
   */
  nextLink?: string;
}

/**
 * This resource represents an SLB MUX (software load balancing multiplexer, which distributes the tenant and tenant customer network traffic).
 */
export type SlbMuxInstance = Resource & {
  /**
   * Configuration state.
   */
  configurationState?: string;
  /**
   * Virtual server.
   */
  virtualServer?: string;
  /**
   * List of BGP peers.
   */
  bgpPeers?: string[];
};

/**
 * A pageable list of SLB MUX instances.
 */
export interface SlbMuxInstanceList {
  /**
   * List of SLB MUX instances.
   */
  value?: SlbMuxInstance[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Storage operation result description.
 */
export type StorageOperationResult = Resource & {
  /**
   * List of operation result instances.
   */
  instances?: string[];
  /**
   * Success or failure of operation.
   */
  provisioningState?: string;
};

/**
 * Pageable list of storage operation results.
 */
export interface StorageOperationResultList {
  /**
   * List of storage operation results.
   */
  value?: StorageOperationResult[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Representation of a storage system resource.
 */
export type StorageSubSystem = Resource & {
  /**
   * Total capacity in GB of the subsystem.
   */
  totalCapacityGB?: number;
  /**
   * Remaining capacity in GB of the subsystem.
   */
  remainingCapacityGB?: number;
  /**
   * Health status of the subsystem.
   */
  healthStatus?: string;
  /**
   * Operational status of the subsystem.
   */
  operationalStatus?: string;
  /**
   * Rebalance status of the subsystem.
   */
  rebalanceStatus?: string;
};

/**
 * Pageable list of storage systems.
 */
export interface StorageSubSystemList {
  /**
   * List of storage systems.
   */
  value?: StorageSubSystem[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Representation of a drive resource.
 */
export type Drive = Resource & {
  /**
   * Node that the drive is physically connected.
   */
  readonly storageNode?: string;
  /**
   * Serial number of the drive.
   */
  readonly serialNumber?: string;
  /**
   * Health status of the drive.
   */
  readonly healthStatus?: string;
  /**
   * Operational status of the drive.
   */
  readonly operationalStatus?: string;
  /**
   * Intended usage of the drive.
   */
  readonly usage?: string;
  /**
   * Indicate where the hardware is located.
   */
  readonly physicalLocation?: string;
  /**
   * Model of the drive.
   */
  readonly model?: string;
  /**
   * The firmware version of the drive.
   */
  readonly firmwareVersion?: string;
  /**
   * Indicate whether the drive's identification LEDs are active or not.
   */
  readonly isIndicationEnabled?: boolean;
  /**
   * The name of the drive's manufacturer.
   */
  readonly manufacturer?: string;
  /**
   * The storage pool where the drive is located.
   */
  readonly storagePool?: string;
  /**
   * Media type of the drive.
   */
  readonly mediaType?: string;
  /**
   * Total capacity in GB of the drive.
   */
  readonly capacityGB?: number;
  /**
   * Detailed description for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.
   */
  readonly description?: string;
  /**
   * Detailed recommended action for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.
   */
  readonly action?: string;
};

/**
 * Pageable list of storage drives.
 */
export interface DriveList {
  /**
   * List of storage drives.
   */
  value?: Drive[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Representation of a volume resource.
 */
export type Volume = Resource & {
  /**
   * Total capacity in GB of the volume.
   */
  readonly totalCapacityGB?: number;
  /**
   * Remaining capacity in GB of the volume.
   */
  readonly remainingCapacityGB?: number;
  /**
   * Health status of the volume.
   */
  readonly healthStatus?: string;
  /**
   * Operational status of the volume.
   */
  readonly operationalStatus?: string;
  /**
   * Repair status of the volume. Empty if no repair job running, something like 'Running, 90%' when repairing.
   */
  readonly repairStatus?: string;
  /**
   * Detailed description for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.
   */
  readonly description?: string;
  /**
   * Detailed recommended action for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.
   */
  readonly action?: string;
  /**
   * Volume label.
   */
  readonly volumeLabel?: string;
};

/**
 * Pageable list of storage volumes.
 */
export interface VolumeList {
  /**
   * List of storage volumes.
   */
  value?: Volume[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Representation of a nas cluster resource.
 */
export type NasCluster = Resource & {
  /**
   * Name of nas cluster
   */
  readonly clusterName?: string;
  /**
   * The portal Uri of Nas Cluster
   */
  readonly portalUri?: string;
  /**
   * The size of Nas Cluster in bytes
   */
  readonly size?: number;
  /**
   * The remaining size of Nas Cluster in bytes
   */
  readonly sizeRemaining?: number;
};

/**
 * Pageable list of nas clusters.
 */
export interface NasClusterList {
  /**
   * List of nas clusters.
   */
  value?: NasCluster[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Provisioning status of the resource.
 */
export interface ProvisioningState {
  /**
   * Provisioning status of the resource.
   */
  provisioningState?: string;
}

/**
 * Defines values for InfraRoleInstanceState.
 */
export type InfraRoleInstanceState =
  | "Stopped"
  | "Starting"
  | "Running"
  | "Stopping";
/**
 * Defines values for ScaleUnitType.
 */
export type ScaleUnitType =
  | "Unknown"
  | "ComputeOnly"
  | "StorageOnly"
  | "HyperConverged";
/**
 * Defines values for ScaleUnitState.
 */
export type ScaleUnitState =
  | "Unknown"
  | "Creating"
  | "Running"
  | "Upgrading"
  | "Deleting";
/**
 * Defines values for ScaleUnitNodeStatus.
 */
export type ScaleUnitNodeStatus = "Running" | "Maintenance" | "Stopped";
/**
 * Defines values for PowerState.
 */
export type PowerState = "Stopped" | "Starting" | "Running" | "Stopping";

/**
 * Contains response data for the get operation.
 */
export type ApplicationOperationResultsGetResponse = ApplicationOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationOperationResult;
  };
};

/**
 * Optional parameters.
 */
export interface ApplicationOperationResultsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ApplicationOperationResultsListResponse = ApplicationOperationResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationOperationResultList;
  };
};

/**
 * Optional parameters.
 */
export interface ApplicationOperationResultsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ApplicationOperationResultsListNextResponse = ApplicationOperationResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationOperationResultList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ComputeOperationResultsGetResponse = ComputeOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ComputeOperationResult;
  };
};

/**
 * Optional parameters.
 */
export interface ComputeOperationResultsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ComputeOperationResultsListResponse = ComputeOperationResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ComputeOperationResultList;
  };
};

/**
 * Optional parameters.
 */
export interface ComputeOperationResultsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ComputeOperationResultsListNextResponse = ComputeOperationResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ComputeOperationResultList;
  };
};

/**
 * Contains response data for the listOperations operation.
 */
export type FabricListOperationsResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the listOperationsNext operation.
 */
export type FabricListOperationsNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type EdgeGatewaysGetResponse = EdgeGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EdgeGateway;
  };
};

/**
 * Optional parameters.
 */
export interface EdgeGatewaysListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type EdgeGatewaysListResponse = EdgeGatewayList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EdgeGatewayList;
  };
};

/**
 * Optional parameters.
 */
export interface EdgeGatewaysListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type EdgeGatewaysListNextResponse = EdgeGatewayList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EdgeGatewayList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type EdgeGatewayPoolsGetResponse = EdgeGatewayPool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EdgeGatewayPool;
  };
};

/**
 * Optional parameters.
 */
export interface EdgeGatewayPoolsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type EdgeGatewayPoolsListResponse = EdgeGatewayPoolList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EdgeGatewayPoolList;
  };
};

/**
 * Optional parameters.
 */
export interface EdgeGatewayPoolsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type EdgeGatewayPoolsListNextResponse = EdgeGatewayPoolList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EdgeGatewayPoolList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type FabricLocationsGetResponse = FabricLocation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FabricLocation;
  };
};

/**
 * Optional parameters.
 */
export interface FabricLocationsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type FabricLocationsListResponse = FabricLocationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FabricLocationList;
  };
};

/**
 * Optional parameters.
 */
export interface FabricLocationsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type FabricLocationsListNextResponse = FabricLocationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FabricLocationList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type FileSharesGetResponse = FileShare & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FileShare;
  };
};

/**
 * Optional parameters.
 */
export interface FileSharesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type FileSharesListResponse = FileShareList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FileShareList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type InfraRolesGetResponse = InfraRole & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InfraRole;
  };
};

/**
 * Optional parameters.
 */
export interface InfraRolesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type InfraRolesListResponse = InfraRoleList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InfraRoleList;
  };
};

/**
 * Optional parameters.
 */
export interface InfraRolesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type InfraRolesListNextResponse = InfraRoleList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InfraRoleList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type InfraRoleInstancesGetResponse = InfraRoleInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InfraRoleInstance;
  };
};

/**
 * Optional parameters.
 */
export interface InfraRoleInstancesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type InfraRoleInstancesListResponse = InfraRoleInstanceList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InfraRoleInstanceList;
  };
};

/**
 * Optional parameters.
 */
export interface InfraRoleInstancesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type InfraRoleInstancesListNextResponse = InfraRoleInstanceList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InfraRoleInstanceList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IpPoolsGetResponse = IpPool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpPool;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IpPoolsCreateOrUpdateResponse = IpPool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpPool;
  };
};

/**
 * Optional parameters.
 */
export interface IpPoolsListOptionalParams extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type IpPoolsListResponse = IpPoolList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpPoolList;
  };
};

/**
 * Optional parameters.
 */
export interface IpPoolsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type IpPoolsListNextResponse = IpPoolList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IpPoolList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type LogicalNetworksGetResponse = LogicalNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LogicalNetwork;
  };
};

/**
 * Optional parameters.
 */
export interface LogicalNetworksListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type LogicalNetworksListResponse = LogicalNetworkList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LogicalNetworkList;
  };
};

/**
 * Optional parameters.
 */
export interface LogicalNetworksListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type LogicalNetworksListNextResponse = LogicalNetworkList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LogicalNetworkList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type LogicalSubnetsGetResponse = LogicalSubnet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LogicalSubnet;
  };
};

/**
 * Optional parameters.
 */
export interface LogicalSubnetsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type LogicalSubnetsListResponse = LogicalSubnetList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LogicalSubnetList;
  };
};

/**
 * Optional parameters.
 */
export interface LogicalSubnetsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type LogicalSubnetsListNextResponse = LogicalSubnetList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LogicalSubnetList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type MacAddressPoolsGetResponse = MacAddressPool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MacAddressPool;
  };
};

/**
 * Optional parameters.
 */
export interface MacAddressPoolsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type MacAddressPoolsListResponse = MacAddressPoolList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MacAddressPoolList;
  };
};

/**
 * Optional parameters.
 */
export interface MacAddressPoolsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type MacAddressPoolsListNextResponse = MacAddressPoolList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MacAddressPoolList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkOperationResultsGetResponse = NetworkOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkOperationResult;
  };
};

/**
 * Optional parameters.
 */
export interface NetworkOperationResultsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type NetworkOperationResultsListResponse = NetworkOperationResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkOperationResultList;
  };
};

/**
 * Optional parameters.
 */
export interface NetworkOperationResultsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type NetworkOperationResultsListNextResponse = NetworkOperationResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkOperationResultList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ScaleUnitsGetResponse = ScaleUnit & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ScaleUnit;
  };
};

/**
 * Optional parameters.
 */
export interface ScaleUnitsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ScaleUnitsListResponse = ScaleUnitList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ScaleUnitList;
  };
};

/**
 * Optional parameters.
 */
export interface ScaleUnitsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ScaleUnitsListNextResponse = ScaleUnitList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ScaleUnitList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ScaleUnitNodesGetResponse = ScaleUnitNode & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ScaleUnitNode;
  };
};

/**
 * Optional parameters.
 */
export interface ScaleUnitNodesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ScaleUnitNodesListResponse = ScaleUnitNodeList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ScaleUnitNodeList;
  };
};

/**
 * Optional parameters.
 */
export interface ScaleUnitNodesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ScaleUnitNodesListNextResponse = ScaleUnitNodeList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ScaleUnitNodeList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SlbMuxInstancesGetResponse = SlbMuxInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SlbMuxInstance;
  };
};

/**
 * Optional parameters.
 */
export interface SlbMuxInstancesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type SlbMuxInstancesListResponse = SlbMuxInstanceList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SlbMuxInstanceList;
  };
};

/**
 * Optional parameters.
 */
export interface SlbMuxInstancesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type SlbMuxInstancesListNextResponse = SlbMuxInstanceList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SlbMuxInstanceList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type StorageOperationResultsGetResponse = StorageOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageOperationResult;
  };
};

/**
 * Optional parameters.
 */
export interface StorageOperationResultsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type StorageOperationResultsListResponse = StorageOperationResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageOperationResultList;
  };
};

/**
 * Optional parameters.
 */
export interface StorageOperationResultsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type StorageOperationResultsListNextResponse = StorageOperationResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageOperationResultList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type StorageSubSystemsGetResponse = StorageSubSystem & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageSubSystem;
  };
};

/**
 * Optional parameters.
 */
export interface StorageSubSystemsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type StorageSubSystemsListResponse = StorageSubSystemList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageSubSystemList;
  };
};

/**
 * Optional parameters.
 */
export interface StorageSubSystemsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type StorageSubSystemsListNextResponse = StorageSubSystemList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageSubSystemList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DrivesGetResponse = Drive & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Drive;
  };
};

/**
 * Optional parameters.
 */
export interface DrivesListOptionalParams extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type DrivesListResponse = DriveList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DriveList;
  };
};

/**
 * Optional parameters.
 */
export interface DrivesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type DrivesListNextResponse = DriveList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DriveList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VolumesGetResponse = Volume & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Volume;
  };
};

/**
 * Optional parameters.
 */
export interface VolumesListOptionalParams extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type VolumesListResponse = VolumeList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VolumeList;
  };
};

/**
 * Optional parameters.
 */
export interface VolumesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type VolumesListNextResponse = VolumeList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VolumeList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NasClustersGetResponse = NasCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NasCluster;
  };
};

/**
 * Optional parameters.
 */
export interface NasClustersListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type NasClustersListResponse = NasClusterList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NasClusterList;
  };
};

/**
 * Optional parameters.
 */
export interface NasClustersListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type NasClustersListNextResponse = NasClusterList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NasClusterList;
  };
};

/**
 * Optional parameters.
 */
export interface FabricAdminClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
