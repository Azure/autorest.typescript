/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { FabricAdminClient } from "../fabricAdminClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ScaleOutScaleUnitParametersList,
  CreateFromJsonScaleUnitParametersList,
  ScaleUnitsGetResponse,
  ScaleUnitsListOptionalParams,
  ScaleUnitsListResponse,
  ScaleUnitsListNextOptionalParams,
  ScaleUnitsListNextResponse
} from "../models";

/**
 * Class representing a ScaleUnits.
 */
export class ScaleUnits {
  private readonly client: FabricAdminClient;

  /**
   * Initialize a new instance of the class ScaleUnits class.
   * @param client Reference to the service client
   */
  constructor(client: FabricAdminClient) {
    this.client = client;
  }

  /**
   * Scales out a scale unit.
   * @param resourceGroupName Name of the resource group.
   * @param location Location of the resource.
   * @param scaleUnitNodeParameters A list of input data that allows for adding a set of scale unit
   *                                nodes.
   * @param scaleUnit Name of the scale units.
   * @param options The options parameters.
   */
  async scaleOut(
    resourceGroupName: string,
    location: string,
    scaleUnitNodeParameters: ScaleOutScaleUnitParametersList,
    scaleUnit: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      location,
      scaleUnitNodeParameters,
      scaleUnit,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      scaleOutOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: scaleOutOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Add a new scale unit.
   * @param resourceGroupName Name of the resource group.
   * @param location Location of the resource.
   * @param scaleUnit Name of the scale units.
   * @param creationData A list of input data that allows for creating the new scale unit.
   * @param options The options parameters.
   */
  async createFromJson(
    resourceGroupName: string,
    location: string,
    scaleUnit: string,
    creationData: CreateFromJsonScaleUnitParametersList,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      location,
      scaleUnit,
      creationData,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createFromJsonOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createFromJsonOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Returns the requested scale unit.
   * @param resourceGroupName Name of the resource group.
   * @param location Location of the resource.
   * @param scaleUnit Name of the scale units.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    location: string,
    scaleUnit: string,
    options?: coreHttp.OperationOptions
  ): Promise<ScaleUnitsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, location, scaleUnit, options: operationOptions },
      getOperationSpec
    ) as Promise<ScaleUnitsGetResponse>;
  }

  /**
   * Returns a list of all scale units at a location.
   * @param resourceGroupName Name of the resource group.
   * @param location Location of the resource.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    location: string,
    options?: ScaleUnitsListOptionalParams
  ): Promise<ScaleUnitsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, location, options: operationOptions },
      listOperationSpec
    ) as Promise<ScaleUnitsListResponse>;
  }

  /**
   * ListNext
   * @param resourceGroupName Name of the resource group.
   * @param location Location of the resource.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    resourceGroupName: string,
    location: string,
    nextLink: string,
    options?: ScaleUnitsListNextOptionalParams
  ): Promise<ScaleUnitsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, location, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ScaleUnitsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const scaleOutOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnits/{scaleUnit}/scaleOut",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.scaleUnitNodeParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.scaleUnit
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const createFromJsonOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnits/{scaleUnit}/createFromJson",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.creationData,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.scaleUnit
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnits/{scaleUnit}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScaleUnit
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.scaleUnit
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnits",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScaleUnitList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScaleUnitList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.nextLink
  ],
  serializer
};
