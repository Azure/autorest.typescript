/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { FabricAdminClient } from "../fabricAdminClient";
import {
  LogicalSubnetsGetResponse,
  LogicalSubnetsListOptionalParams,
  LogicalSubnetsListResponse,
  LogicalSubnetsListNextOptionalParams,
  LogicalSubnetsListNextResponse
} from "../models";

/**
 * Class representing a LogicalSubnets.
 */
export class LogicalSubnets {
  private readonly client: FabricAdminClient;

  /**
   * Initialize a new instance of the class LogicalSubnets class.
   * @param client Reference to the service client
   */
  constructor(client: FabricAdminClient) {
    this.client = client;
  }

  /**
   * Returns the requested logical subnet.
   * @param resourceGroupName Name of the resource group.
   * @param location Location of the resource.
   * @param logicalNetwork Name of the logical network.
   * @param logicalSubnet Name of the logical subnet.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    location: string,
    logicalNetwork: string,
    logicalSubnet: string,
    options?: coreHttp.OperationOptions
  ): Promise<LogicalSubnetsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        location,
        logicalNetwork,
        logicalSubnet,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<LogicalSubnetsGetResponse>;
  }

  /**
   * Returns a list of all logical subnets.
   * @param resourceGroupName Name of the resource group.
   * @param location Location of the resource.
   * @param logicalNetwork Name of the logical network.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    location: string,
    logicalNetwork: string,
    options?: LogicalSubnetsListOptionalParams
  ): Promise<LogicalSubnetsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        location,
        logicalNetwork,
        options: operationOptions
      },
      listOperationSpec
    ) as Promise<LogicalSubnetsListResponse>;
  }

  /**
   * ListNext
   * @param resourceGroupName Name of the resource group.
   * @param location Location of the resource.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param logicalNetwork Name of the logical network.
   * @param options The options parameters.
   */
  listNext(
    resourceGroupName: string,
    location: string,
    nextLink: string,
    logicalNetwork: string,
    options?: LogicalSubnetsListNextOptionalParams
  ): Promise<LogicalSubnetsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        location,
        nextLink,
        logicalNetwork,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<LogicalSubnetsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/logicalNetworks/{logicalNetwork}/logicalSubnets/{logicalSubnet}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LogicalSubnet
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.logicalNetwork,
    Parameters.logicalSubnet
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/logicalNetworks/{logicalNetwork}/logicalSubnets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LogicalSubnetList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.logicalNetwork
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LogicalSubnetList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.nextLink,
    Parameters.logicalNetwork
  ],
  serializer
};
