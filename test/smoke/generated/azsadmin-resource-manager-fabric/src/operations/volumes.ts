/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { FabricAdminClient } from "../fabricAdminClient";
import {
  VolumesGetResponse,
  VolumesListOptionalParams,
  VolumesListResponse,
  VolumesListNextOptionalParams,
  VolumesListNextResponse
} from "../models";

/**
 * Class representing a Volumes.
 */
export class Volumes {
  private readonly client: FabricAdminClient;

  /**
   * Initialize a new instance of the class Volumes class.
   * @param client Reference to the service client
   */
  constructor(client: FabricAdminClient) {
    this.client = client;
  }

  /**
   * Return the requested a storage volume.
   * @param resourceGroupName Name of the resource group.
   * @param location Location of the resource.
   * @param scaleUnit Name of the scale units.
   * @param storageSubSystem Name of the storage system.
   * @param volume Name of the storage volume.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    location: string,
    scaleUnit: string,
    storageSubSystem: string,
    volume: string,
    options?: coreHttp.OperationOptions
  ): Promise<VolumesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        location,
        scaleUnit,
        storageSubSystem,
        volume,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<VolumesGetResponse>;
  }

  /**
   * Returns a list of all storage volumes at a location.
   * @param resourceGroupName Name of the resource group.
   * @param location Location of the resource.
   * @param scaleUnit Name of the scale units.
   * @param storageSubSystem Name of the storage system.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    location: string,
    scaleUnit: string,
    storageSubSystem: string,
    options?: VolumesListOptionalParams
  ): Promise<VolumesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        location,
        scaleUnit,
        storageSubSystem,
        options: operationOptions
      },
      listOperationSpec
    ) as Promise<VolumesListResponse>;
  }

  /**
   * ListNext
   * @param resourceGroupName Name of the resource group.
   * @param location Location of the resource.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param scaleUnit Name of the scale units.
   * @param storageSubSystem Name of the storage system.
   * @param options The options parameters.
   */
  listNext(
    resourceGroupName: string,
    location: string,
    nextLink: string,
    scaleUnit: string,
    storageSubSystem: string,
    options?: VolumesListNextOptionalParams
  ): Promise<VolumesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        location,
        nextLink,
        scaleUnit,
        storageSubSystem,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<VolumesListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnits/{scaleUnit}/storageSubSystems/{storageSubSystem}/volumes/{volume}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Volume
    }
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.scaleUnit,
    Parameters.storageSubSystem,
    Parameters.volume
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnits/{scaleUnit}/storageSubSystems/{storageSubSystem}/volumes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VolumeList
    }
  },
  queryParameters: [Parameters.filter, Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.scaleUnit,
    Parameters.storageSubSystem
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VolumeList
    }
  },
  queryParameters: [Parameters.filter, Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.nextLink,
    Parameters.scaleUnit,
    Parameters.storageSubSystem
  ],
  serializer
};
