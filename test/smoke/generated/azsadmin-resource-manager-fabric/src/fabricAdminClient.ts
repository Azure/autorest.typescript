/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { FabricAdminClientContext } from "./fabricAdminClientContext";

class FabricAdminClient extends FabricAdminClientContext {
  /**
   * Initializes a new instance of the FabricAdminClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription.
   *                       The subscription ID forms part of the URI for every service call.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    subscriptionId: string,
    options?: Models.FabricAdminClientOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.applicationOperationResults = new operations.ApplicationOperationResults(
      this
    );
    this.computeOperationResults = new operations.ComputeOperationResults(this);
    this.fabric = new operations.Fabric(this);
    this.edgeGateways = new operations.EdgeGateways(this);
    this.edgeGatewayPools = new operations.EdgeGatewayPools(this);
    this.fabricLocations = new operations.FabricLocations(this);
    this.fileShares = new operations.FileShares(this);
    this.infraRoles = new operations.InfraRoles(this);
    this.infraRoleInstances = new operations.InfraRoleInstances(this);
    this.ipPools = new operations.IpPools(this);
    this.logicalNetworks = new operations.LogicalNetworks(this);
    this.logicalSubnets = new operations.LogicalSubnets(this);
    this.macAddressPools = new operations.MacAddressPools(this);
    this.networkOperationResults = new operations.NetworkOperationResults(this);
    this.scaleUnits = new operations.ScaleUnits(this);
    this.scaleUnitNodes = new operations.ScaleUnitNodes(this);
    this.slbMuxInstances = new operations.SlbMuxInstances(this);
    this.storageOperationResults = new operations.StorageOperationResults(this);
    this.storageSubSystems = new operations.StorageSubSystems(this);
    this.drives = new operations.Drives(this);
    this.volumes = new operations.Volumes(this);
    this.nasClusters = new operations.NasClusters(this);
  }

  applicationOperationResults: operations.ApplicationOperationResults;
  computeOperationResults: operations.ComputeOperationResults;
  fabric: operations.Fabric;
  edgeGateways: operations.EdgeGateways;
  edgeGatewayPools: operations.EdgeGatewayPools;
  fabricLocations: operations.FabricLocations;
  fileShares: operations.FileShares;
  infraRoles: operations.InfraRoles;
  infraRoleInstances: operations.InfraRoleInstances;
  ipPools: operations.IpPools;
  logicalNetworks: operations.LogicalNetworks;
  logicalSubnets: operations.LogicalSubnets;
  macAddressPools: operations.MacAddressPools;
  networkOperationResults: operations.NetworkOperationResults;
  scaleUnits: operations.ScaleUnits;
  scaleUnitNodes: operations.ScaleUnitNodes;
  slbMuxInstances: operations.SlbMuxInstances;
  storageOperationResults: operations.StorageOperationResults;
  storageSubSystems: operations.StorageSubSystems;
  drives: operations.Drives;
  volumes: operations.Volumes;
  nasClusters: operations.NasClusters;
}

// Operation Specifications

export {
  FabricAdminClient,
  FabricAdminClientContext,
  Models as FabricAdminModels,
  Mappers as FabricAdminMappers
};
export * from "./operations";
