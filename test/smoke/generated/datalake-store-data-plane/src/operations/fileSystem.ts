/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataLakeStoreFileSystemManagementClient } from "../dataLakeStoreFileSystemManagementClient";
import {
  ExpiryOptionType,
  FileSystemSetFileExpiryOptionalParams,
  FileSystemConcurrentAppendOptionalParams,
  FileSystemMkdirsOptionalParams,
  FileSystemMkdirsResponse,
  FileSystemMsConcatOptionalParams,
  FileSystemListFileStatusOptionalParams,
  FileSystemListFileStatusResponse,
  FileSystemGetContentSummaryResponse,
  FileSystemGetFileStatusOptionalParams,
  FileSystemGetFileStatusResponse,
  FileSystemOpenOptionalParams,
  FileSystemAppendOptionalParams,
  FileSystemCreateOptionalParams,
  FileSystemGetAclStatusOptionalParams,
  FileSystemGetAclStatusResponse,
  FileSystemDeleteOptionalParams,
  FileSystemDeleteResponse,
  FileSystemRenameResponse,
  FileSystemSetOwnerOptionalParams,
  FileSystemSetPermissionOptionalParams
} from "../models";

/**
 * Class representing a FileSystem.
 */
export class FileSystem {
  private readonly client: DataLakeStoreFileSystemManagementClient;

  /**
   * Initialize a new instance of the class FileSystem class.
   * @param client Reference to the service client
   */
  constructor(client: DataLakeStoreFileSystemManagementClient) {
    this.client = client;
  }

  /**
   * Sets or removes the expiration time on the specified file. This operation can only be executed
   * against files. Folders are not supported.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file on which to set or remove the
   *             expiration time.
   * @param expiryOption Indicates the type of expiration to use for the file: 1. NeverExpire: ExpireTime
   *                     is ignored. 2. RelativeToNow: ExpireTime is an integer in milliseconds representing the expiration
   *                     date relative to when file expiration is updated. 3. RelativeToCreationDate: ExpireTime is an
   *                     integer in milliseconds representing the expiration date relative to file creation. 4. Absolute:
   *                     ExpireTime is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.
   * @param options The options parameters.
   */
  setFileExpiry(
    accountName: string,
    path: string,
    expiryOption: ExpiryOptionType,
    options?: FileSystemSetFileExpiryOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, expiryOption, options: operationOptions },
      setFileExpiryOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Appends to the specified file, optionally first creating the file if it does not yet exist. This
   * method supports multiple concurrent appends to the file. NOTE: The target must not contain data
   * added by Create or normal (serial) Append. ConcurrentAppend and Append cannot be used
   * interchangeably; once a target file has been modified using either of these append options, the
   * other append option cannot be used on the target file. ConcurrentAppend does not guarantee order and
   * can result in duplicated data landing in the target file.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param streamContents The file contents to include when appending to the file.  The maximum content
   *                       size is 4MB.  For content larger than 4MB you must append the content in 4MB chunks.
   * @param path The Data Lake Store path (starting with '/') of the file to which to append using
   *             concurrent append.
   * @param options The options parameters.
   */
  concurrentAppend(
    accountName: string,
    streamContents: coreHttp.HttpRequestBody,
    path: string,
    options?: FileSystemConcurrentAppendOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, streamContents, path, options: operationOptions },
      concurrentAppendOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Checks if the specified access is available at the given path.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to check
   *             access.
   * @param fsaction File system operation read/write/execute in string form, matching regex pattern
   *                 '[rwx-]{3}'
   * @param options The options parameters.
   */
  checkAccess(
    accountName: string,
    path: string,
    fsaction: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, fsaction, options: operationOptions },
      checkAccessOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Creates a directory.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the directory to create.
   * @param options The options parameters.
   */
  mkdirs(
    accountName: string,
    path: string,
    options?: FileSystemMkdirsOptionalParams
  ): Promise<FileSystemMkdirsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, options: operationOptions },
      mkdirsOperationSpec
    ) as Promise<FileSystemMkdirsResponse>;
  }

  /**
   * Concatenates the list of source files into the destination file, removing all source files upon
   * success.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the destination file resulting from the
   *             concatenation.
   * @param sources A list of comma separated Data Lake Store paths (starting with '/') of the files to
   *                concatenate, in the order in which they should be concatenated.
   * @param options The options parameters.
   */
  concat(
    accountName: string,
    path: string,
    sources: string[],
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, sources, options: operationOptions },
      concatOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Concatenates the list of source files into the destination file, deleting all source files upon
   * success. This method accepts more source file paths than the Concat method. This method and the
   * parameters it accepts are subject to change for usability in an upcoming version.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the destination file resulting from the
   *             concatenation.
   * @param streamContents A list of Data Lake Store paths (starting with '/') of the source files. Must
   *                       be a comma-separated path list in the format:
   *                       sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv
   * @param options The options parameters.
   */
  msConcat(
    accountName: string,
    path: string,
    streamContents: coreHttp.HttpRequestBody,
    options?: FileSystemMsConcatOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, streamContents, options: operationOptions },
      msConcatOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get the list of file status objects specified by the file path, with optional pagination parameters
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the directory to list.
   * @param options The options parameters.
   */
  listFileStatus(
    accountName: string,
    path: string,
    options?: FileSystemListFileStatusOptionalParams
  ): Promise<FileSystemListFileStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, options: operationOptions },
      listFileStatusOperationSpec
    ) as Promise<FileSystemListFileStatusResponse>;
  }

  /**
   * Gets the file content summary object specified by the file path.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file for which to retrieve the
   *             summary.
   * @param options The options parameters.
   */
  getContentSummary(
    accountName: string,
    path: string,
    options?: coreHttp.OperationOptions
  ): Promise<FileSystemGetContentSummaryResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, options: operationOptions },
      getContentSummaryOperationSpec
    ) as Promise<FileSystemGetContentSummaryResponse>;
  }

  /**
   * Get the file status object specified by the file path.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   *             retrieve the status.
   * @param options The options parameters.
   */
  getFileStatus(
    accountName: string,
    path: string,
    options?: FileSystemGetFileStatusOptionalParams
  ): Promise<FileSystemGetFileStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, options: operationOptions },
      getFileStatusOperationSpec
    ) as Promise<FileSystemGetFileStatusResponse>;
  }

  /**
   * Opens and reads from the specified file.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file to open.
   * @param options The options parameters.
   */
  open(
    accountName: string,
    path: string,
    options?: FileSystemOpenOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, options: operationOptions },
      openOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Used for serial appends to the specified file. NOTE: The target must not contain data added by
   * ConcurrentAppend. ConcurrentAppend and Append cannot be used interchangeably; once a target file has
   * been modified using either of these append options, the other append option cannot be used on the
   * target file.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param streamContents The file contents to include when appending to the file.  The maximum content
   *                       size is 4MB.  For content larger than 4MB you must append the content in 4MB chunks.
   * @param path The Data Lake Store path (starting with '/') of the file to which to append.
   * @param options The options parameters.
   */
  append(
    accountName: string,
    streamContents: coreHttp.HttpRequestBody,
    path: string,
    options?: FileSystemAppendOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, streamContents, path, options: operationOptions },
      appendOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Creates a file with optionally specified content. NOTE: If content is provided, the resulting file
   * cannot be modified using ConcurrentAppend.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param streamContents The file contents to include when creating the file. This parameter is
   *                       optional, resulting in an empty file if not specified.  The maximum content size is 4MB.  For
   *                       content larger than 4MB you must append the content in 4MB chunks.
   * @param path The Data Lake Store path (starting with '/') of the file to create.
   * @param options The options parameters.
   */
  create(
    accountName: string,
    streamContents: coreHttp.HttpRequestBody,
    path: string,
    options?: FileSystemCreateOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, streamContents, path, options: operationOptions },
      createOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Sets the Access Control List (ACL) for a file or folder.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory on which to set
   *             the ACL.
   * @param aclspec The ACL spec included in ACL creation operations in the format
   *                '[default:]user|group|other::r|-w|-x|-'
   * @param options The options parameters.
   */
  setAcl(
    accountName: string,
    path: string,
    aclspec: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, aclspec, options: operationOptions },
      setAclOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Modifies existing Access Control List (ACL) entries on a file or folder.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory with the ACL being
   *             modified.
   * @param aclspec The ACL specification included in ACL modification operations in the format
   *                '[default:]user|group|other::r|-w|-x|-'
   * @param options The options parameters.
   */
  modifyAclEntries(
    accountName: string,
    path: string,
    aclspec: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, aclspec, options: operationOptions },
      modifyAclEntriesOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Removes existing Access Control List (ACL) entries for a file or folder.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory with the ACL being
   *             removed.
   * @param aclspec The ACL spec included in ACL removal operations in the format
   *                '[default:]user|group|other'
   * @param options The options parameters.
   */
  removeAclEntries(
    accountName: string,
    path: string,
    aclspec: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, aclspec, options: operationOptions },
      removeAclEntriesOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Removes the existing Default Access Control List (ACL) of the specified directory.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the directory with the default ACL being
   *             removed.
   * @param options The options parameters.
   */
  removeDefaultAcl(
    accountName: string,
    path: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, options: operationOptions },
      removeDefaultAclOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Removes the existing Access Control List (ACL) of the specified file or directory.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory with the ACL being
   *             removed.
   * @param options The options parameters.
   */
  removeAcl(
    accountName: string,
    path: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, options: operationOptions },
      removeAclOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets Access Control List (ACL) entries for the specified file or directory.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to get
   *             the ACL.
   * @param options The options parameters.
   */
  getAclStatus(
    accountName: string,
    path: string,
    options?: FileSystemGetAclStatusOptionalParams
  ): Promise<FileSystemGetAclStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, options: operationOptions },
      getAclStatusOperationSpec
    ) as Promise<FileSystemGetAclStatusResponse>;
  }

  /**
   * Deletes the requested file or directory, optionally recursively.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory to delete.
   * @param options The options parameters.
   */
  delete(
    accountName: string,
    path: string,
    options?: FileSystemDeleteOptionalParams
  ): Promise<FileSystemDeleteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, options: operationOptions },
      deleteOperationSpec
    ) as Promise<FileSystemDeleteResponse>;
  }

  /**
   * Rename a file or directory.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory to move/rename.
   * @param destination The path to move/rename the file or folder to
   * @param options The options parameters.
   */
  rename(
    accountName: string,
    path: string,
    destination: string,
    options?: coreHttp.OperationOptions
  ): Promise<FileSystemRenameResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, destination, options: operationOptions },
      renameOperationSpec
    ) as Promise<FileSystemRenameResponse>;
  }

  /**
   * Sets the owner of a file or directory.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to set
   *             the owner.
   * @param options The options parameters.
   */
  setOwner(
    accountName: string,
    path: string,
    options?: FileSystemSetOwnerOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, options: operationOptions },
      setOwnerOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Sets the permission of the file or folder.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to set
   *             the permission.
   * @param options The options parameters.
   */
  setPermission(
    accountName: string,
    path: string,
    options?: FileSystemSetPermissionOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { accountName, path, options: operationOptions },
      setPermissionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const setFileExpiryOperationSpec: coreHttp.OperationSpec = {
  path: "/WebHdfsExt/{path}",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [
    Parameters.expiryOption,
    Parameters.expireTime,
    Parameters.op,
    Parameters.apiVersion
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  serializer
};
const concurrentAppendOperationSpec: coreHttp.OperationSpec = {
  path: "/WebHdfsExt/{path}",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  requestBody: Parameters.streamContents,
  queryParameters: [
    Parameters.apiVersion,
    Parameters.appendMode,
    Parameters.op1,
    Parameters.syncFlag
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path1
  ],
  headerParameters: [Parameters.contentType, Parameters.transferEncoding],
  serializer
};
const checkAccessOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "GET",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.fsaction, Parameters.op2],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path2
  ],
  serializer
};
const mkdirsOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.FileOperationResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.permission,
    Parameters.op3
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path3
  ],
  serializer
};
const concatOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.sources, Parameters.op4],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path4
  ],
  serializer
};
const msConcatOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  requestBody: Parameters.streamContents1,
  queryParameters: [
    Parameters.apiVersion,
    Parameters.deleteSourceDirectory,
    Parameters.op5
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path4
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listFileStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FileStatusesResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.listSize,
    Parameters.listAfter,
    Parameters.listBefore,
    Parameters.tooId,
    Parameters.op6
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path5
  ],
  serializer
};
const getContentSummaryOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContentSummaryResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.op7],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path6
  ],
  serializer
};
const getFileStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FileStatusResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.tooId, Parameters.op8],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path7
  ],
  serializer
};
const openOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "GET",
  responses: { 200: {}, default: {} },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.length,
    Parameters.offset,
    Parameters.fileSessionId,
    Parameters.read,
    Parameters.op9
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path8
  ],
  serializer
};
const appendOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  requestBody: Parameters.streamContents,
  queryParameters: [
    Parameters.apiVersion,
    Parameters.syncFlag,
    Parameters.offset1,
    Parameters.leaseId,
    Parameters.fileSessionId1,
    Parameters.append,
    Parameters.op10
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path9
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "PUT",
  responses: {
    201: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  requestBody: Parameters.streamContents2,
  queryParameters: [
    Parameters.apiVersion,
    Parameters.leaseId,
    Parameters.overwrite,
    Parameters.syncFlag1,
    Parameters.permission1,
    Parameters.write,
    Parameters.op11
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path10
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const setAclOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.aclspec, Parameters.op12],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path11
  ],
  serializer
};
const modifyAclEntriesOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.aclspec1,
    Parameters.op13
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path12
  ],
  serializer
};
const removeAclEntriesOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.aclspec2,
    Parameters.op14
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path13
  ],
  serializer
};
const removeDefaultAclOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.op15],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path14
  ],
  serializer
};
const removeAclOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.op16],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path13
  ],
  serializer
};
const getAclStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AclStatusResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.tooId1, Parameters.op17],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path15
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.FileOperationResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.recursive,
    Parameters.op18
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path16
  ],
  serializer
};
const renameOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.FileOperationResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.destination,
    Parameters.op19
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path17
  ],
  serializer
};
const setOwnerOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.owner,
    Parameters.group,
    Parameters.op20
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path18
  ],
  serializer
};
const setPermissionOperationSpec: coreHttp.OperationSpec = {
  path: "/webhdfs/v1/{path}",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.permission2,
    Parameters.op21
  ],
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path19
  ],
  serializer
};
