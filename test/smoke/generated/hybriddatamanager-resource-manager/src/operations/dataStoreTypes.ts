/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridDataManagementClient } from "../hybridDataManagementClient";
import {
  DataStoreTypesListByDataManagerResponse,
  DataStoreTypesGetResponse,
  DataStoreTypesListByDataManagerNextResponse
} from "../models";

/**
 * Class representing a DataStoreTypes.
 */
export class DataStoreTypes {
  private readonly client: HybridDataManagementClient;

  /**
   * Initialize a new instance of the class DataStoreTypes class.
   * @param client Reference to the service client
   */
  constructor(client: HybridDataManagementClient) {
    this.client = client;
  }

  /**
   * Gets all the data store/repository types that the resource supports.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param options The options parameters.
   */
  listByDataManager(
    resourceGroupName: string,
    dataManagerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DataStoreTypesListByDataManagerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, dataManagerName, options: operationOptions },
      listByDataManagerOperationSpec
    ) as Promise<DataStoreTypesListByDataManagerResponse>;
  }

  /**
   * Gets the data store/repository type given its name.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param dataStoreTypeName The data store/repository type name for which details are needed.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    dataManagerName: string,
    dataStoreTypeName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DataStoreTypesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        dataStoreTypeName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<DataStoreTypesGetResponse>;
  }

  /**
   * ListByDataManagerNext
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param nextLink The nextLink from the previous successful call to the ListByDataManager method.
   * @param options The options parameters.
   */
  listByDataManagerNext(
    resourceGroupName: string,
    dataManagerName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DataStoreTypesListByDataManagerNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        nextLink,
        options: operationOptions
      },
      listByDataManagerNextOperationSpec
    ) as Promise<DataStoreTypesListByDataManagerNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByDataManagerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStoreTypes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataStoreTypeList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStoreTypes/{dataStoreTypeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataStoreType
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.dataStoreTypeName
  ],
  serializer
};
const listByDataManagerNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataStoreTypeList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.nextLink1
  ],
  serializer
};
