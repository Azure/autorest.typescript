/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridDataManagementClient } from "../hybridDataManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  DataStoresListByDataManagerOptionalParams,
  DataStoresListByDataManagerResponse,
  DataStoresGetResponse,
  DataStore,
  DataStoresCreateOrUpdateResponse,
  DataStoresListByDataManagerNextOptionalParams,
  DataStoresListByDataManagerNextResponse
} from "../models";

/**
 * Class representing a DataStores.
 */
export class DataStores {
  private readonly client: HybridDataManagementClient;

  /**
   * Initialize a new instance of the class DataStores class.
   * @param client Reference to the service client
   */
  constructor(client: HybridDataManagementClient) {
    this.client = client;
  }

  /**
   * Gets all the data stores/repositories in the given resource.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param options The options parameters.
   */
  listByDataManager(
    resourceGroupName: string,
    dataManagerName: string,
    options?: DataStoresListByDataManagerOptionalParams
  ): Promise<DataStoresListByDataManagerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, dataManagerName, options: operationOptions },
      listByDataManagerOperationSpec
    ) as Promise<DataStoresListByDataManagerResponse>;
  }

  /**
   * This method gets the data store/repository by name.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param dataStoreName The data store/repository name queried.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    dataManagerName: string,
    dataStoreName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DataStoresGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        dataStoreName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<DataStoresGetResponse>;
  }

  /**
   * Creates or updates the data store/repository in the data manager.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param dataStore The data store/repository object to be created or updated.
   * @param dataStoreName The data store/repository name to be created or updated.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    dataManagerName: string,
    dataStore: DataStore,
    dataStoreName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<DataStoresCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      dataManagerName,
      dataStore,
      dataStoreName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        DataStoresCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * This method deletes the given data store/repository.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param dataStoreName The data store/repository name to be deleted.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    dataManagerName: string,
    dataStoreName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      dataManagerName,
      dataStoreName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListByDataManagerNext
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param nextLink The nextLink from the previous successful call to the ListByDataManager method.
   * @param options The options parameters.
   */
  listByDataManagerNext(
    resourceGroupName: string,
    dataManagerName: string,
    nextLink: string,
    options?: DataStoresListByDataManagerNextOptionalParams
  ): Promise<DataStoresListByDataManagerNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        nextLink,
        options: operationOptions
      },
      listByDataManagerNextOperationSpec
    ) as Promise<DataStoresListByDataManagerNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByDataManagerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataStoreList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataStore
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.dataStoreName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DataStore
    },
    201: {
      bodyMapper: Mappers.DataStore
    },
    202: {
      bodyMapper: Mappers.DataStore
    },
    204: {
      bodyMapper: Mappers.DataStore
    }
  },
  requestBody: Parameters.dataStore,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.dataStoreName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.dataStoreName2
  ],
  serializer
};
const listByDataManagerNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataStoreList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.nextLink1
  ],
  serializer
};
