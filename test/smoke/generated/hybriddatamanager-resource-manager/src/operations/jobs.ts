/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridDataManagementClient } from "../hybridDataManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  JobsListByJobDefinitionOptionalParams,
  JobsListByJobDefinitionResponse,
  JobsGetOptionalParams,
  JobsGetResponse,
  JobsListByDataServiceOptionalParams,
  JobsListByDataServiceResponse,
  JobsListByDataManagerOptionalParams,
  JobsListByDataManagerResponse,
  JobsListByJobDefinitionNextOptionalParams,
  JobsListByJobDefinitionNextResponse,
  JobsListByDataServiceNextOptionalParams,
  JobsListByDataServiceNextResponse,
  JobsListByDataManagerNextOptionalParams,
  JobsListByDataManagerNextResponse
} from "../models";

/**
 * Class representing a Jobs.
 */
export class Jobs {
  private readonly client: HybridDataManagementClient;

  /**
   * Initialize a new instance of the class Jobs class.
   * @param client Reference to the service client
   */
  constructor(client: HybridDataManagementClient) {
    this.client = client;
  }

  /**
   * This method gets all the jobs of a given job definition.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition for which jobs are needed.
   * @param options The options parameters.
   */
  listByJobDefinition(
    resourceGroupName: string,
    dataManagerName: string,
    dataServiceName: string,
    jobDefinitionName: string,
    options?: JobsListByJobDefinitionOptionalParams
  ): Promise<JobsListByJobDefinitionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        dataServiceName,
        jobDefinitionName,
        options: operationOptions
      },
      listByJobDefinitionOperationSpec
    ) as Promise<JobsListByJobDefinitionResponse>;
  }

  /**
   * This method gets a data manager job given the jobId.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition of the job.
   * @param jobId The job id of the job queried.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    dataManagerName: string,
    dataServiceName: string,
    jobDefinitionName: string,
    jobId: string,
    options?: JobsGetOptionalParams
  ): Promise<JobsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        dataServiceName,
        jobDefinitionName,
        jobId,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<JobsGetResponse>;
  }

  /**
   * Cancels the given job.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition of the job.
   * @param jobId The job id of the job queried.
   * @param options The options parameters.
   */
  async cancel(
    resourceGroupName: string,
    dataManagerName: string,
    dataServiceName: string,
    jobDefinitionName: string,
    jobId: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      dataManagerName,
      dataServiceName,
      jobDefinitionName,
      jobId,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      cancelOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: cancelOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Resumes the given job.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition of the job.
   * @param jobId The job id of the job queried.
   * @param options The options parameters.
   */
  async resume(
    resourceGroupName: string,
    dataManagerName: string,
    dataServiceName: string,
    jobDefinitionName: string,
    jobId: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      dataManagerName,
      dataServiceName,
      jobDefinitionName,
      jobId,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      resumeOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: resumeOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * This method gets all the jobs of a data service type in a given resource.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param dataServiceName The name of the data service of interest.
   * @param options The options parameters.
   */
  listByDataService(
    resourceGroupName: string,
    dataManagerName: string,
    dataServiceName: string,
    options?: JobsListByDataServiceOptionalParams
  ): Promise<JobsListByDataServiceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        dataServiceName,
        options: operationOptions
      },
      listByDataServiceOperationSpec
    ) as Promise<JobsListByDataServiceResponse>;
  }

  /**
   * This method gets all the jobs at the data manager resource level.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param options The options parameters.
   */
  listByDataManager(
    resourceGroupName: string,
    dataManagerName: string,
    options?: JobsListByDataManagerOptionalParams
  ): Promise<JobsListByDataManagerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, dataManagerName, options: operationOptions },
      listByDataManagerOperationSpec
    ) as Promise<JobsListByDataManagerResponse>;
  }

  /**
   * ListByJobDefinitionNext
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition for which jobs are needed.
   * @param nextLink The nextLink from the previous successful call to the ListByJobDefinition method.
   * @param options The options parameters.
   */
  listByJobDefinitionNext(
    resourceGroupName: string,
    dataManagerName: string,
    dataServiceName: string,
    jobDefinitionName: string,
    nextLink: string,
    options?: JobsListByJobDefinitionNextOptionalParams
  ): Promise<JobsListByJobDefinitionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        dataServiceName,
        jobDefinitionName,
        nextLink,
        options: operationOptions
      },
      listByJobDefinitionNextOperationSpec
    ) as Promise<JobsListByJobDefinitionNextResponse>;
  }

  /**
   * ListByDataServiceNext
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param nextLink The nextLink from the previous successful call to the ListByDataService method.
   * @param dataServiceName The name of the data service of interest.
   * @param options The options parameters.
   */
  listByDataServiceNext(
    resourceGroupName: string,
    dataManagerName: string,
    nextLink: string,
    dataServiceName: string,
    options?: JobsListByDataServiceNextOptionalParams
  ): Promise<JobsListByDataServiceNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        nextLink,
        dataServiceName,
        options: operationOptions
      },
      listByDataServiceNextOperationSpec
    ) as Promise<JobsListByDataServiceNextResponse>;
  }

  /**
   * ListByDataManagerNext
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param nextLink The nextLink from the previous successful call to the ListByDataManager method.
   * @param options The options parameters.
   */
  listByDataManagerNext(
    resourceGroupName: string,
    dataManagerName: string,
    nextLink: string,
    options?: JobsListByDataManagerNextOptionalParams
  ): Promise<JobsListByDataManagerNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        nextLink,
        options: operationOptions
      },
      listByDataManagerNextOperationSpec
    ) as Promise<JobsListByDataManagerNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByJobDefinitionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.dataServiceName4,
    Parameters.jobDefinitionName4
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.dataServiceName4,
    Parameters.jobDefinitionName5,
    Parameters.jobId
  ],
  serializer
};
const cancelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/cancel",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.dataServiceName4,
    Parameters.jobDefinitionName5,
    Parameters.jobId
  ],
  serializer
};
const resumeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/resume",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.dataServiceName4,
    Parameters.jobDefinitionName5,
    Parameters.jobId
  ],
  serializer
};
const listByDataServiceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.dataServiceName5
  ],
  serializer
};
const listByDataManagerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  serializer
};
const listByJobDefinitionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.dataServiceName4,
    Parameters.jobDefinitionName4,
    Parameters.nextLink3
  ],
  serializer
};
const listByDataServiceNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.nextLink2,
    Parameters.dataServiceName5
  ],
  serializer
};
const listByDataManagerNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName,
    Parameters.nextLink1
  ],
  serializer
};
