/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridDataManagementClient } from "../hybridDataManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  DataManagersListResponse,
  DataManagersListByResourceGroupResponse,
  DataManagersGetResponse,
  DataManager,
  DataManagersCreateResponse,
  DataManagerUpdateParameter,
  DataManagersUpdateOptionalParams,
  DataManagersUpdateResponse
} from "../models";

/**
 * Class representing a DataManagers.
 */
export class DataManagers {
  private readonly client: HybridDataManagementClient;

  /**
   * Initialize a new instance of the class DataManagers class.
   * @param client Reference to the service client
   */
  constructor(client: HybridDataManagementClient) {
    this.client = client;
  }

  /**
   * Lists all the data manager resources available under the subscription.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<DataManagersListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<DataManagersListResponse>;
  }

  /**
   * Lists all the data manager resources available under the given resource group.
   * @param resourceGroupName The Resource Group Name
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DataManagersListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<DataManagersListByResourceGroupResponse>;
  }

  /**
   * Gets information about the specified data manager resource.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    dataManagerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DataManagersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, dataManagerName, options: operationOptions },
      getOperationSpec
    ) as Promise<DataManagersGetResponse>;
  }

  /**
   * Creates a new data manager resource with the specified parameters. Existing resources cannot be
   * updated with this API
   * and should instead be updated with the Update data manager resource API.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param dataManager Data manager resource details from request body.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    dataManagerName: string,
    dataManager: DataManager,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<DataManagersCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      dataManagerName,
      dataManager,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        DataManagersCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes a data manager resource in Microsoft Azure.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    dataManagerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      dataManagerName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Updates the properties of an existing data manager resource.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   *                        DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   *                        underscore only
   * @param dataManagerUpdateParameter Data manager resource details from request body.
   * @param options The options parameters.
   */
  async update(
    resourceGroupName: string,
    dataManagerName: string,
    dataManagerUpdateParameter: DataManagerUpdateParameter,
    options?: DataManagersUpdateOptionalParams
  ): Promise<LROPoller<DataManagersUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      dataManagerName,
      dataManagerUpdateParameter,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        DataManagersUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.HybridData/dataManagers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataManagerList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataManagerList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataManager
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DataManager
    },
    201: {
      bodyMapper: Mappers.DataManager
    },
    202: {
      bodyMapper: Mappers.DataManager
    },
    204: {
      bodyMapper: Mappers.DataManager
    }
  },
  requestBody: Parameters.dataManager,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DataManager
    },
    201: {
      bodyMapper: Mappers.DataManager
    },
    202: {
      bodyMapper: Mappers.DataManager
    },
    204: {
      bodyMapper: Mappers.DataManager
    }
  },
  requestBody: Parameters.dataManagerUpdateParameter,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  headerParameters: [Parameters.contentType, Parameters.ifMatch],
  serializer
};
