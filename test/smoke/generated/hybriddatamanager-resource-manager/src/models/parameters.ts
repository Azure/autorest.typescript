/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2016-06-01",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const dataManagerName: coreHttp.OperationURLParameter = {
  parameterPath: "dataManagerName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-w.]+$"),
      MaxLength: 24,
      MinLength: 3
    },
    serializedName: "dataManagerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const dataManager: coreHttp.OperationParameter = {
  parameterPath: "dataManager",
  mapper: Mappers.DataManager
};

export const dataManagerUpdateParameter: coreHttp.OperationParameter = {
  parameterPath: "dataManagerUpdateParameter",
  mapper: Mappers.DataManagerUpdateParameter
};

export const ifMatch: coreHttp.OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const dataServiceName: coreHttp.OperationURLParameter = {
  parameterPath: "dataServiceName",
  mapper: {
    serializedName: "dataServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const dataServiceName1: coreHttp.OperationURLParameter = {
  parameterPath: "dataServiceName",
  mapper: {
    serializedName: "dataServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const dataServiceName2: coreHttp.OperationURLParameter = {
  parameterPath: "dataServiceName",
  mapper: {
    serializedName: "dataServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobDefinitionName: coreHttp.OperationURLParameter = {
  parameterPath: "jobDefinitionName",
  mapper: {
    serializedName: "jobDefinitionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobDefinition: coreHttp.OperationParameter = {
  parameterPath: "jobDefinition",
  mapper: Mappers.JobDefinition
};

export const dataServiceName3: coreHttp.OperationURLParameter = {
  parameterPath: "dataServiceName",
  mapper: {
    serializedName: "dataServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobDefinitionName1: coreHttp.OperationURLParameter = {
  parameterPath: "jobDefinitionName",
  mapper: {
    serializedName: "jobDefinitionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobDefinitionName2: coreHttp.OperationURLParameter = {
  parameterPath: "jobDefinitionName",
  mapper: {
    serializedName: "jobDefinitionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const runParameters: coreHttp.OperationParameter = {
  parameterPath: "runParameters",
  mapper: Mappers.RunParameters
};

export const jobDefinitionName3: coreHttp.OperationURLParameter = {
  parameterPath: "jobDefinitionName",
  mapper: {
    serializedName: "jobDefinitionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const dataServiceName4: coreHttp.OperationURLParameter = {
  parameterPath: "dataServiceName",
  mapper: {
    serializedName: "dataServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobDefinitionName4: coreHttp.OperationURLParameter = {
  parameterPath: "jobDefinitionName",
  mapper: {
    serializedName: "jobDefinitionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobDefinitionName5: coreHttp.OperationURLParameter = {
  parameterPath: "jobDefinitionName",
  mapper: {
    serializedName: "jobDefinitionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobId: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const dataServiceName5: coreHttp.OperationURLParameter = {
  parameterPath: "dataServiceName",
  mapper: {
    serializedName: "dataServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const dataStoreName: coreHttp.OperationURLParameter = {
  parameterPath: "dataStoreName",
  mapper: {
    serializedName: "dataStoreName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const dataStore: coreHttp.OperationParameter = {
  parameterPath: "dataStore",
  mapper: Mappers.DataStore
};

export const dataStoreName1: coreHttp.OperationURLParameter = {
  parameterPath: "dataStoreName",
  mapper: {
    serializedName: "dataStoreName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const dataStoreName2: coreHttp.OperationURLParameter = {
  parameterPath: "dataStoreName",
  mapper: {
    serializedName: "dataStoreName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const dataStoreTypeName: coreHttp.OperationURLParameter = {
  parameterPath: "dataStoreTypeName",
  mapper: {
    serializedName: "dataStoreTypeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const publicKeyName: coreHttp.OperationURLParameter = {
  parameterPath: "publicKeyName",
  mapper: {
    serializedName: "publicKeyName",
    required: true,
    type: {
      name: "String"
    }
  }
};
