/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DevSpacesManagementClient } from "../devSpacesManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ControllersGetResponse,
  Controller,
  ControllersCreateResponse,
  ControllerUpdateParameters,
  ControllersUpdateResponse,
  ControllersListByResourceGroupResponse,
  ControllersListResponse,
  ListConnectionDetailsParameters,
  ControllersListConnectionDetailsResponse,
  ControllersListByResourceGroupNextResponse,
  ControllersListNextResponse
} from "../models";

/**
 * Class representing a Controllers.
 */
export class Controllers {
  private readonly client: DevSpacesManagementClient;

  /**
   * Initialize a new instance of the class Controllers class.
   * @param client Reference to the service client
   */
  constructor(client: DevSpacesManagementClient) {
    this.client = client;
  }

  /**
   * Gets the properties for an Azure Dev Spaces Controller.
   * @param resourceGroupName Resource group to which the resource belongs.
   * @param name Name of the resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<ControllersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getOperationSpec
    ) as Promise<ControllersGetResponse>;
  }

  /**
   * Creates an Azure Dev Spaces Controller with the specified create parameters.
   * @param resourceGroupName Resource group to which the resource belongs.
   * @param name Name of the resource.
   * @param controller Controller create parameters.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    name: string,
    controller: Controller,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ControllersCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      controller,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ControllersCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes an existing Azure Dev Spaces Controller.
   * @param resourceGroupName Resource group to which the resource belongs.
   * @param name Name of the resource.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Updates the properties of an existing Azure Dev Spaces Controller with the specified update
   * parameters.
   * @param resourceGroupName Resource group to which the resource belongs.
   * @param name Name of the resource.
   * @param controllerUpdateParameters Parameters for updating the Azure Dev Spaces Controller.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    name: string,
    controllerUpdateParameters: ControllerUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<ControllersUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        controllerUpdateParameters,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<ControllersUpdateResponse>;
  }

  /**
   * Lists all the Azure Dev Spaces Controllers with their properties in the specified resource group and
   * subscription.
   * @param resourceGroupName Resource group to which the resource belongs.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ControllersListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<ControllersListByResourceGroupResponse>;
  }

  /**
   * Lists all the Azure Dev Spaces Controllers with their properties in the subscription.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<ControllersListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<ControllersListResponse>;
  }

  /**
   * Lists connection details for the underlying container resources of an Azure Dev Spaces Controller.
   * @param resourceGroupName Resource group to which the resource belongs.
   * @param name Name of the resource.
   * @param listConnectionDetailsParameters Parameters for listing connection details of Azure Dev Spaces
   *                                        Controller.
   * @param options The options parameters.
   */
  listConnectionDetails(
    resourceGroupName: string,
    name: string,
    listConnectionDetailsParameters: ListConnectionDetailsParameters,
    options?: coreHttp.OperationOptions
  ): Promise<ControllersListConnectionDetailsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        listConnectionDetailsParameters,
        options: operationOptions
      },
      listConnectionDetailsOperationSpec
    ) as Promise<ControllersListConnectionDetailsResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Resource group to which the resource belongs.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ControllersListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<ControllersListByResourceGroupNextResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ControllersListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ControllersListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Controller
    },
    default: {
      bodyMapper: Mappers.DevSpacesErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Controller
    },
    201: {
      bodyMapper: Mappers.Controller
    },
    202: {
      bodyMapper: Mappers.Controller
    },
    204: {
      bodyMapper: Mappers.Controller
    },
    default: {
      bodyMapper: Mappers.DevSpacesErrorResponse
    }
  },
  requestBody: Parameters.controller,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DevSpacesErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Controller
    },
    default: {
      bodyMapper: Mappers.DevSpacesErrorResponse
    }
  },
  requestBody: Parameters.controllerUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ControllerList
    },
    default: {
      bodyMapper: Mappers.DevSpacesErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.DevSpaces/controllers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ControllerList
    },
    default: {
      bodyMapper: Mappers.DevSpacesErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listConnectionDetailsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}/listConnectionDetails",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ControllerConnectionDetailsList
    },
    default: {
      bodyMapper: Mappers.DevSpacesErrorResponse
    }
  },
  requestBody: Parameters.listConnectionDetailsParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ControllerList
    },
    default: {
      bodyMapper: Mappers.DevSpacesErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink1
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ControllerList
    },
    default: {
      bodyMapper: Mappers.DevSpacesErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  serializer
};
