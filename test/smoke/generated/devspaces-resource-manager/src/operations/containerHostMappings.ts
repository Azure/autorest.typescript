/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DevSpacesManagementClient } from "../devSpacesManagementClient";
import {
  ContainerHostMapping,
  ContainerHostMappingsGetContainerHostMappingResponse
} from "../models";

/**
 * Class representing a ContainerHostMappings.
 */
export class ContainerHostMappings {
  private readonly client: DevSpacesManagementClient;

  /**
   * Initialize a new instance of the class ContainerHostMappings class.
   * @param client Reference to the service client
   */
  constructor(client: DevSpacesManagementClient) {
    this.client = client;
  }

  /**
   * Returns container host mapping object for a container host resource ID if an associated controller
   * exists.
   * @param containerHostMapping Container host mapping object specifying the Container host resource ID
   *                             and its associated Controller resource.
   * @param resourceGroupName Resource group to which the resource belongs.
   * @param location Location of the container host.
   * @param options The options parameters.
   */
  getContainerHostMapping(
    containerHostMapping: ContainerHostMapping,
    resourceGroupName: string,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<ContainerHostMappingsGetContainerHostMappingResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        containerHostMapping,
        resourceGroupName,
        location,
        options: operationOptions
      },
      getContainerHostMappingOperationSpec
    ) as Promise<ContainerHostMappingsGetContainerHostMappingResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getContainerHostMappingOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/locations/{location}/checkContainerHostMapping",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerHostMapping
    },
    default: {
      bodyMapper: Mappers.DevSpacesErrorResponse
    }
  },
  requestBody: Parameters.containerHostMapping,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
