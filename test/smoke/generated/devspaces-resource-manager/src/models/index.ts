/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type OrchestratorSpecificConnectionDetailsUnion =
  | OrchestratorSpecificConnectionDetails
  | KubernetesConnectionDetails;

/**
 * Container host mapping object specifying the Container host resource ID and its associated Controller resource.
 */
export interface ContainerHostMapping {
  /**
   * ARM ID of the Container Host resource
   */
  containerHostResourceId?: string;
  /**
   * ARM ID of the mapped Controller resource
   */
  readonly mappedControllerResourceId?: string;
}

/**
 * Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.
 */
export interface DevSpacesErrorResponse {
  /**
   * The details of the error.
   */
  error?: ErrorDetails;
}

export interface ErrorDetails {
  /**
   * Status code for the error.
   */
  readonly code?: string;
  /**
   * Error message describing the error in detail.
   */
  readonly message?: string;
  /**
   * The target of the particular error.
   */
  readonly target?: string;
}

export interface ResourceProviderOperationList {
  /**
   * Resource provider operations list.
   */
  value?: ResourceProviderOperationDefinition[];
  /**
   * The URI that can be used to request the next page for list of Azure operations.
   */
  readonly nextLink?: string;
}

export interface ResourceProviderOperationDefinition {
  /**
   * Resource provider operation name.
   */
  name?: string;
  display?: ResourceProviderOperationDisplay;
}

export interface ResourceProviderOperationDisplay {
  /**
   * Name of the resource provider.
   */
  provider?: string;
  /**
   * Name of the resource type.
   */
  resource?: string;
  /**
   * Name of the resource provider operation.
   */
  operation?: string;
  /**
   * Description of the resource provider operation.
   */
  description?: string;
}

/**
 * An Azure resource.
 */
export interface Resource {
  /**
   * Fully qualified resource Id for the resource.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM tracked top level resource.
 */
export type TrackedResource = Resource & {
  /**
   * Tags for the Azure resource.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Region where the Azure resource is located.
   */
  location?: string;
};

export type Controller = TrackedResource & {
  /**
   * Model representing SKU for Azure Dev Spaces Controller.
   */
  sku: Sku;
  /**
   * Provisioning state of the Azure Dev Spaces Controller.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * DNS suffix for public endpoints running in the Azure Dev Spaces Controller.
   */
  readonly hostSuffix?: string;
  /**
   * DNS name for accessing DataPlane services
   */
  readonly dataPlaneFqdn?: string;
  /**
   * DNS of the target container host's API server
   */
  readonly targetContainerHostApiServerFqdn?: string;
  /**
   * Resource ID of the target container host
   */
  targetContainerHostResourceId: string;
  /**
   * Credentials of the target container host (base64).
   */
  targetContainerHostCredentialsBase64: string;
};

/**
 * Model representing SKU for Azure Dev Spaces Controller.
 */
export interface Sku {
  /**
   * The name of the SKU for Azure Dev Spaces Controller.
   */
  name: "S1";
  /**
   * The tier of the SKU for Azure Dev Spaces Controller.
   */
  tier?: "Standard";
}

/**
 * Parameters for updating an Azure Dev Spaces Controller.
 */
export interface ControllerUpdateParameters {
  /**
   * Tags for the Azure Dev Spaces Controller.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Credentials of the target container host (base64).
   */
  targetContainerHostCredentialsBase64?: string;
}

export interface ControllerList {
  /**
   * List of Azure Dev Spaces Controllers.
   */
  value?: Controller[];
  /**
   * The URI that can be used to request the next page for list of Azure Dev Spaces Controllers.
   */
  readonly nextLink?: string;
}

/**
 * Parameters for listing connection details of an Azure Dev Spaces Controller.
 */
export interface ListConnectionDetailsParameters {
  /**
   * Resource ID of the target container host mapped to the Azure Dev Spaces Controller.
   */
  targetContainerHostResourceId: string;
}

export interface ControllerConnectionDetailsList {
  /**
   * List of Azure Dev Spaces Controller connection details.
   */
  connectionDetailsList?: ControllerConnectionDetails[];
}

export interface ControllerConnectionDetails {
  /**
   * Base class for types that supply values used to connect to container orchestrators
   */
  orchestratorSpecificConnectionDetails?: OrchestratorSpecificConnectionDetailsUnion;
}

/**
 * Base class for types that supply values used to connect to container orchestrators
 */
export interface OrchestratorSpecificConnectionDetails {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  instanceType: "Kubernetes";
}

/**
 * Contains information used to connect to a Kubernetes cluster
 */
export type KubernetesConnectionDetails = OrchestratorSpecificConnectionDetails & {
  /**
   * Gets the kubeconfig for the cluster.
   */
  kubeConfig?: string;
};
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState =
  | "Succeeded"
  | "Failed"
  | "Canceled"
  | "Updating"
  | "Creating"
  | "Deleting"
  | "Deleted";

/**
 * Contains response data for the getContainerHostMapping operation.
 */
export type ContainerHostMappingsGetContainerHostMappingResponse = ContainerHostMapping & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContainerHostMapping;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = ResourceProviderOperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceProviderOperationList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = ResourceProviderOperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceProviderOperationList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ControllersGetResponse = Controller & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Controller;
  };
};

/**
 * Contains response data for the create operation.
 */
export type ControllersCreateResponse = Controller & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Controller;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ControllersUpdateResponse = Controller & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Controller;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ControllersListByResourceGroupResponse = ControllerList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ControllerList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ControllersListResponse = ControllerList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ControllerList;
  };
};

/**
 * Contains response data for the listConnectionDetails operation.
 */
export type ControllersListConnectionDetailsResponse = ControllerConnectionDetailsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ControllerConnectionDetailsList;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ControllersListByResourceGroupNextResponse = ControllerList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ControllerList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ControllersListNextResponse = ControllerList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ControllerList;
  };
};

/**
 * Optional parameters.
 */
export interface DevSpacesManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
