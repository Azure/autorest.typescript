/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const ContainerHostMapping: coreHttp.CompositeMapper = {
  serializedName: "ContainerHostMapping",
  type: {
    name: "Composite",
    className: "ContainerHostMapping",
    modelProperties: {
      containerHostResourceId: {
        serializedName: "containerHostResourceId",
        type: {
          name: "String"
        }
      },
      mappedControllerResourceId: {
        serializedName: "mappedControllerResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DevSpacesErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "DevSpacesErrorResponse",
  type: {
    name: "Composite",
    className: "DevSpacesErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const ErrorDetails: coreHttp.CompositeMapper = {
  serializedName: "ErrorDetails",
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperationList: coreHttp.CompositeMapper = {
  serializedName: "ResourceProviderOperationList",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceProviderOperationDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperationDefinition: coreHttp.CompositeMapper = {
  serializedName: "ResourceProviderOperationDefinition",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ResourceProviderOperationDisplay"
        }
      }
    }
  }
};

export const ResourceProviderOperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "ResourceProviderOperationDisplay",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreHttp.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Controller: coreHttp.CompositeMapper = {
  serializedName: "Controller",
  type: {
    name: "Composite",
    className: "Controller",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostSuffix: {
        serializedName: "properties.hostSuffix",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataPlaneFqdn: {
        serializedName: "properties.dataPlaneFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetContainerHostApiServerFqdn: {
        serializedName: "properties.targetContainerHostApiServerFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetContainerHostResourceId: {
        serializedName: "properties.targetContainerHostResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetContainerHostCredentialsBase64: {
        serializedName: "properties.targetContainerHostCredentialsBase64",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        defaultValue: "S1",
        serializedName: "name",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      tier: {
        defaultValue: "Standard",
        serializedName: "tier",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ControllerUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "ControllerUpdateParameters",
  type: {
    name: "Composite",
    className: "ControllerUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      targetContainerHostCredentialsBase64: {
        serializedName: "properties.targetContainerHostCredentialsBase64",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ControllerList: coreHttp.CompositeMapper = {
  serializedName: "ControllerList",
  type: {
    name: "Composite",
    className: "ControllerList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Controller" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListConnectionDetailsParameters: coreHttp.CompositeMapper = {
  serializedName: "ListConnectionDetailsParameters",
  type: {
    name: "Composite",
    className: "ListConnectionDetailsParameters",
    modelProperties: {
      targetContainerHostResourceId: {
        serializedName: "targetContainerHostResourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ControllerConnectionDetailsList: coreHttp.CompositeMapper = {
  serializedName: "ControllerConnectionDetailsList",
  type: {
    name: "Composite",
    className: "ControllerConnectionDetailsList",
    modelProperties: {
      connectionDetailsList: {
        serializedName: "connectionDetailsList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ControllerConnectionDetails"
            }
          }
        }
      }
    }
  }
};

export const ControllerConnectionDetails: coreHttp.CompositeMapper = {
  serializedName: "ControllerConnectionDetails",
  type: {
    name: "Composite",
    className: "ControllerConnectionDetails",
    modelProperties: {
      orchestratorSpecificConnectionDetails: {
        serializedName: "orchestratorSpecificConnectionDetails",
        type: {
          name: "Composite",
          className: "OrchestratorSpecificConnectionDetails"
        }
      }
    }
  }
};

export const OrchestratorSpecificConnectionDetails: coreHttp.CompositeMapper = {
  serializedName: "OrchestratorSpecificConnectionDetails",
  type: {
    name: "Composite",
    className: "OrchestratorSpecificConnectionDetails",
    uberParent: "OrchestratorSpecificConnectionDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesConnectionDetails: coreHttp.CompositeMapper = {
  serializedName: "Kubernetes",
  type: {
    name: "Composite",
    className: "KubernetesConnectionDetails",
    uberParent: "OrchestratorSpecificConnectionDetails",
    polymorphicDiscriminator:
      OrchestratorSpecificConnectionDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...OrchestratorSpecificConnectionDetails.type.modelProperties,
      kubeConfig: {
        serializedName: "kubeConfig",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  OrchestratorSpecificConnectionDetails: OrchestratorSpecificConnectionDetails,
  "OrchestratorSpecificConnectionDetails.Kubernetes": KubernetesConnectionDetails
};
