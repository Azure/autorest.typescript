/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureDataManagementClient } from "../azureDataManagementClient";
import {
  HybridDataManagersListResponse,
  HybridDataManagersListByResourceGroupResponse,
  HybridDataManagersCreateResponse,
  HybridDataManagersGetResponse,
  HybridDataManagerUpdate,
  HybridDataManagersUpdateResponse,
  HybridDataManagersListNextResponse,
  HybridDataManagersListByResourceGroupNextResponse
} from "../models";

/**
 * Class representing a HybridDataManagers.
 */
export class HybridDataManagers {
  private readonly client: AzureDataManagementClient;

  /**
   * Initialize a new instance of the class HybridDataManagers class.
   * @param client Reference to the service client
   */
  constructor(client: AzureDataManagementClient) {
    this.client = client;
  }

  /**
   * List hybridDataManager resources in the subscription
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<HybridDataManagersListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<HybridDataManagersListResponse>;
  }

  /**
   * Get a hybridDataManager list by Resource group name.
   * @param resourceGroupName The name of the Azure resource group
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridDataManagersListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<HybridDataManagersListByResourceGroupResponse>;
  }

  /**
   * Creates or replaces a hybridDataManager resource
   * @param resourceGroupName The name of the Azure resource group
   * @param hybridDataManagerName Name of HybridDataManagerName
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    hybridDataManagerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridDataManagersCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hybridDataManagerName, options: operationOptions },
      createOperationSpec
    ) as Promise<HybridDataManagersCreateResponse>;
  }

  /**
   * Deletes a hybridDataManager resource
   * @param resourceGroupName The name of the Azure resource group
   * @param hybridDataManagerName Name of HybridDataManager
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    hybridDataManagerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hybridDataManagerName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Retrieves a hybridDataManager resource
   * @param resourceGroupName The name of the Azure resource group
   * @param hybridDataManagerName Name of HybridDataManager
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    hybridDataManagerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridDataManagersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, hybridDataManagerName, options: operationOptions },
      getOperationSpec
    ) as Promise<HybridDataManagersGetResponse>;
  }

  /**
   * Updates a hybridDataManager resource
   * @param resourceGroupName The name of the Azure resource group
   * @param hybridDataManagerName Name of HybridDataManager
   * @param parameters The HybridDataManager.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    hybridDataManagerName: string,
    parameters: HybridDataManagerUpdate,
    options?: coreHttp.OperationOptions
  ): Promise<HybridDataManagersUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hybridDataManagerName,
        parameters,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<HybridDataManagersUpdateResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridDataManagersListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<HybridDataManagersListNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param resourceGroupName The name of the Azure resource group
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    nextLink: string,
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridDataManagersListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroupName, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<HybridDataManagersListByResourceGroupNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AzureData/hybridDataManagers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridDataManagerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/hybridDataManagers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridDataManagerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/hybridDataManagers/{hybridDataManagerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HybridDataManager
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.hybridDataManagerName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/hybridDataManagers/{hybridDataManagerName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.hybridDataManagerName1
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/hybridDataManagers/{hybridDataManagerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridDataManager
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.hybridDataManagerName1
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/hybridDataManagers/{hybridDataManagerName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.HybridDataManager
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.hybridDataManagerName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridDataManagerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridDataManagerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink1,
    Parameters.resourceGroupName1
  ],
  serializer
};
