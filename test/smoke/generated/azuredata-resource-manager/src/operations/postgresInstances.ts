/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureDataManagementClient } from "../azureDataManagementClient";
import {
  PostgresInstancesListResponse,
  PostgresInstancesListByResourceGroupResponse,
  PostgresInstancesGetResponse,
  PostgresInstancesCreateResponse,
  PostgresInstanceUpdate,
  PostgresInstancesUpdateResponse,
  PostgresInstancesListNextResponse,
  PostgresInstancesListByResourceGroupNextResponse
} from "../models";

/**
 * Class representing a PostgresInstances.
 */
export class PostgresInstances {
  private readonly client: AzureDataManagementClient;

  /**
   * Initialize a new instance of the class PostgresInstances class.
   * @param client Reference to the service client
   */
  constructor(client: AzureDataManagementClient) {
    this.client = client;
  }

  /**
   * List postgres Instance resources in the subscription
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<PostgresInstancesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<PostgresInstancesListResponse>;
  }

  /**
   * Get a postgres Instances list by Resource group name.
   * @param resourceGroupName The name of the Azure resource group
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PostgresInstancesListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<PostgresInstancesListByResourceGroupResponse>;
  }

  /**
   * Retrieves a postgres Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of Postgres Instance
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    postgresInstanceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PostgresInstancesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, postgresInstanceName, options: operationOptions },
      getOperationSpec
    ) as Promise<PostgresInstancesGetResponse>;
  }

  /**
   * Creates or replaces a postgres Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of PostgresInstance
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    postgresInstanceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PostgresInstancesCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, postgresInstanceName, options: operationOptions },
      createOperationSpec
    ) as Promise<PostgresInstancesCreateResponse>;
  }

  /**
   * Deletes a postgres Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of Postgres Instance
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    postgresInstanceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, postgresInstanceName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Updates a postgres Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of Postgres Instance
   * @param parameters The Postgres Instance.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    postgresInstanceName: string,
    parameters: PostgresInstanceUpdate,
    options?: coreHttp.OperationOptions
  ): Promise<PostgresInstancesUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        postgresInstanceName,
        parameters,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<PostgresInstancesUpdateResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<PostgresInstancesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<PostgresInstancesListNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param resourceGroupName The name of the Azure resource group
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    nextLink: string,
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PostgresInstancesListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroupName, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<PostgresInstancesListByResourceGroupNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AzureData/postgresInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstanceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/postgresInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstanceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/postgresInstances/{postgresInstanceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstance
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.postgresInstanceName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/postgresInstances/{postgresInstanceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstance
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.postgresInstanceName1
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/postgresInstances/{postgresInstanceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.postgresInstanceName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureData/postgresInstances/{postgresInstanceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstance
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.postgresInstanceName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstanceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstanceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink1,
    Parameters.resourceGroupName1
  ],
  serializer
};
