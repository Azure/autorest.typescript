/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" }, serializedName: "any" }
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreHttp.CompositeMapper = {
  serializedName: "CloudError",
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreHttp.CompositeMapper = {
  serializedName: "CloudErrorBody",
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudErrorBody" } }
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreHttp.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlServerRegistration: coreHttp.CompositeMapper = {
  serializedName: "SqlServerRegistration",
  type: {
    name: "Composite",
    className: "SqlServerRegistration",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      subscriptionId: {
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      propertyBag: {
        serializedName: "properties.propertyBag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlServerRegistrationUpdate: coreHttp.CompositeMapper = {
  serializedName: "SqlServerRegistrationUpdate",
  type: {
    name: "Composite",
    className: "SqlServerRegistrationUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const SqlServerRegistrationListResult: coreHttp.CompositeMapper = {
  serializedName: "SqlServerRegistrationListResult",
  type: {
    name: "Composite",
    className: "SqlServerRegistrationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SqlServerRegistration" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreHttp.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const SqlServer: coreHttp.CompositeMapper = {
  serializedName: "SqlServer",
  type: {
    name: "Composite",
    className: "SqlServer",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      cores: {
        serializedName: "properties.cores",
        type: {
          name: "Number"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      edition: {
        serializedName: "properties.edition",
        type: {
          name: "String"
        }
      },
      registrationID: {
        serializedName: "properties.registrationID",
        type: {
          name: "String"
        }
      },
      propertyBag: {
        serializedName: "properties.propertyBag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlServerListResult: coreHttp.CompositeMapper = {
  serializedName: "SqlServerListResult",
  type: {
    name: "Composite",
    className: "SqlServerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SqlServer" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlInstanceListResult: coreHttp.CompositeMapper = {
  serializedName: "SqlInstanceListResult",
  type: {
    name: "Composite",
    className: "SqlInstanceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SqlInstance" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlInstance: coreHttp.CompositeMapper = {
  serializedName: "SqlInstance",
  type: {
    name: "Composite",
    className: "SqlInstance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      hybridDataManagerId: {
        serializedName: "properties.hybridDataManagerId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlInstanceUpdate: coreHttp.CompositeMapper = {
  serializedName: "SqlInstanceUpdate",
  type: {
    name: "Composite",
    className: "SqlInstanceUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const PostgresInstanceListResult: coreHttp.CompositeMapper = {
  serializedName: "PostgresInstanceListResult",
  type: {
    name: "Composite",
    className: "PostgresInstanceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PostgresInstance" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PostgresInstance: coreHttp.CompositeMapper = {
  serializedName: "PostgresInstance",
  type: {
    name: "Composite",
    className: "PostgresInstance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      hybridDataManagerId: {
        serializedName: "properties.hybridDataManagerId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PostgresInstanceUpdate: coreHttp.CompositeMapper = {
  serializedName: "PostgresInstanceUpdate",
  type: {
    name: "Composite",
    className: "PostgresInstanceUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      hybridDataManagerId: {
        serializedName: "hybridDataManagerId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridDataManagerListResult: coreHttp.CompositeMapper = {
  serializedName: "HybridDataManagerListResult",
  type: {
    name: "Composite",
    className: "HybridDataManagerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "HybridDataManager" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridDataManager: coreHttp.CompositeMapper = {
  serializedName: "HybridDataManager",
  type: {
    name: "Composite",
    className: "HybridDataManager",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const HybridDataManagerUpdate: coreHttp.CompositeMapper = {
  serializedName: "HybridDataManagerUpdate",
  type: {
    name: "Composite",
    className: "HybridDataManagerUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ResourceModelWithAllowedPropertySet: coreHttp.CompositeMapper = {
  serializedName: "ResourceModelWithAllowedPropertySet",
  type: {
    name: "Composite",
    className: "ResourceModelWithAllowedPropertySet",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      managedBy: {
        serializedName: "managedBy",
        type: {
          name: "String"
        }
      },
      kind: {
        constraints: {
          Pattern: new RegExp("^[-w._,()]+$")
        },
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceModelWithAllowedPropertySetIdentity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ResourceModelWithAllowedPropertySetSku"
        }
      },
      plan: {
        serializedName: "plan",
        type: {
          name: "Composite",
          className: "ResourceModelWithAllowedPropertySetPlan"
        }
      }
    }
  }
};

export const Identity: coreHttp.CompositeMapper = {
  serializedName: "Identity",
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "SystemAssigned",
        serializedName: "type",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceModelWithAllowedPropertySetIdentity: coreHttp.CompositeMapper = {
  serializedName: "ResourceModelWithAllowedPropertySetIdentity",
  type: {
    name: "Composite",
    className: "ResourceModelWithAllowedPropertySetIdentity",
    modelProperties: {
      ...Identity.type.modelProperties
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "Enum",
          allowedValues: ["Free", "Basic", "Standard", "Premium"]
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ResourceModelWithAllowedPropertySetSku: coreHttp.CompositeMapper = {
  serializedName: "ResourceModelWithAllowedPropertySetSku",
  type: {
    name: "Composite",
    className: "ResourceModelWithAllowedPropertySetSku",
    modelProperties: {
      ...Sku.type.modelProperties
    }
  }
};

export const Plan: coreHttp.CompositeMapper = {
  serializedName: "Plan",
  type: {
    name: "Composite",
    className: "Plan",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        required: true,
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "product",
        required: true,
        type: {
          name: "String"
        }
      },
      promotionCode: {
        serializedName: "promotionCode",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceModelWithAllowedPropertySetPlan: coreHttp.CompositeMapper = {
  serializedName: "ResourceModelWithAllowedPropertySetPlan",
  type: {
    name: "Composite",
    className: "ResourceModelWithAllowedPropertySetPlan",
    modelProperties: {
      ...Plan.type.modelProperties
    }
  }
};

export const ODataError: coreHttp.CompositeMapper = {
  serializedName: "ODataError",
  type: {
    name: "Composite",
    className: "ODataError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ODataError" } }
        }
      }
    }
  }
};
