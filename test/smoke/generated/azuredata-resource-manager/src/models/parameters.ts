/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-07-24-preview",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const sqlServerRegistrationName: coreHttp.OperationURLParameter = {
  parameterPath: "sqlServerRegistrationName",
  mapper: {
    serializedName: "sqlServerRegistrationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SqlServerRegistration
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SqlServerRegistrationUpdate
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const sqlServerName: coreHttp.OperationURLParameter = {
  parameterPath: "sqlServerName",
  mapper: {
    serializedName: "sqlServerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SqlServer
};

export const resourceGroupName1: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const sqlInstanceName: coreHttp.OperationURLParameter = {
  parameterPath: "sqlInstanceName",
  mapper: {
    serializedName: "sqlInstanceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters3: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SqlInstance
};

export const sqlInstanceName1: coreHttp.OperationURLParameter = {
  parameterPath: "sqlInstanceName",
  mapper: {
    serializedName: "sqlInstanceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const sqlInstanceName2: coreHttp.OperationURLParameter = {
  parameterPath: "sqlInstanceName",
  mapper: {
    serializedName: "sqlInstanceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters4: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SqlInstanceUpdate
};

export const sqlInstanceName3: coreHttp.OperationURLParameter = {
  parameterPath: "sqlInstanceName",
  mapper: {
    serializedName: "sqlInstanceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const postgresInstanceName: coreHttp.OperationURLParameter = {
  parameterPath: "postgresInstanceName",
  mapper: {
    serializedName: "postgresInstanceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const postgresInstanceName1: coreHttp.OperationURLParameter = {
  parameterPath: "postgresInstanceName",
  mapper: {
    serializedName: "postgresInstanceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters5: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PostgresInstanceUpdate
};

export const hybridDataManagerName: coreHttp.OperationURLParameter = {
  parameterPath: "hybridDataManagerName",
  mapper: {
    serializedName: "hybridDataManagerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const hybridDataManagerName1: coreHttp.OperationURLParameter = {
  parameterPath: "hybridDataManagerName",
  mapper: {
    serializedName: "hybridDataManagerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters6: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.HybridDataManagerUpdate
};
