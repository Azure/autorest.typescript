/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * List of Operations
 */
export interface OperationList {
  /**
   * Array of operations
   */
  value?: Operation[];
  /**
   * URI to the next page of operations.
   */
  nextLink?: string;
}

/**
 * Describes the supported REST operation.
 */
export interface Operation {
  /**
   * The name of the operation being performed on this particular object. It should match the action name that appears in RBAC / the event service.
   */
  name?: string;
  /**
   * Contains the localized display information for this particular operation or action.
   */
  display?: Display;
}

/**
 * Contains the localized display information for this particular operation or action.
 */
export interface Display {
  /**
   * The localized, friendly version of the resource provider name. The provider name is expected to include the name of the publisher or company responsible. The provider name format should use title case and begin with Microsoft for first-party services. For example, the provider name may be Microsoft Monitoring Insights or Microsoft Compute.
   */
  provider?: string;
  /**
   * The localized, friendly version of the resource type related to this action or operation; the resource type should match the public documentation for the resource provider.
   */
  resource?: string;
  /**
   * The localized friendly name for the operation, as it should be shown to the user.
   */
  operation?: string;
  /**
   * The localized, friendly description for the operation. The description will be displayed to the user. It should be thorough and concise for used in both tooltips and detailed views.
   */
  description?: string;
}

/**
 * List of updates.
 */
export interface UpdateList {
  /**
   * List of updates.
   */
  value?: Update[];
  /**
   * URI to the next page of updates.
   */
  nextLink?: string;
}

/**
 * Base Resource Object
 */
export interface Resource {
  /**
   * URI of the resource.
   */
  readonly id?: string;
  /**
   * Name of the resource.
   */
  readonly name?: string;
  /**
   * Type of resource.
   */
  readonly type?: string;
  /**
   * Region location of resource.
   */
  location?: string;
  /**
   * List of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Information pertaining to an update.
 */
export type Update = Resource & {
  /**
   * Date update was installed.
   */
  installedDate?: Date;
  /**
   * Description of the update.
   */
  description?: string;
  /**
   * Current state of the update.
   */
  state?: UpdateState;
  /**
   * Link to the KB article about the update.
   */
  kbLink?: string;
  /**
   * The minimum version required to install.
   */
  minVersionRequired?: string;
  /**
   * The minimum OEM version required to install.
   */
  minOemVersionRequired?: string;
  /**
   * Path to the update package.
   */
  packagePath?: string;
  /**
   * Size of update package.
   */
  packageSizeInMb?: number;
  /**
   * Name of the update.
   */
  displayName?: string;
  /**
   * Version of the update.
   */
  version?: string;
  /**
   * OEM version of the update.
   */
  oemVersion?: string;
  /**
   * Publisher of the update.
   */
  publisher?: string;
};

/**
 * Representation of a update run resource.
 */
export type UpdateRun = Resource & {
  /**
   * Current progress of the update run.
   */
  progress?: Step;
  /**
   * Update start time.
   */
  timeStarted?: Date;
  /**
   * Duration of the update.
   */
  duration?: string;
  /**
   * State of the update run.
   */
  state?: UpdateRunState;
};

/**
 * Information about each step of the update process.
 */
export interface Step {
  /**
   * Name of the step.
   */
  name?: string;
  /**
   * Description of the step.
   */
  description?: string;
  /**
   * Error message, if any.
   */
  errorMessage?: string;
  /**
   * State of the step.
   */
  status?: string;
  /**
   * Time at which this step started executing
   */
  startTimeUtc?: Date;
  /**
   * Time at which this step stopped executing
   */
  endTimeUtc?: Date;
  /**
   * Inner steps
   */
  steps?: Step[];
}

/**
 * The list of update locations.
 */
export interface UpdateLocationList {
  /**
   * The link to get the next page of update locations.
   */
  nextLink?: string;
  /**
   * The list of update locations.
   */
  value?: UpdateLocation[];
}

/**
 * Information related to a location's update status.
 */
export type UpdateLocation = Resource & {
  /**
   * Current version of your AzureStack deployment.
   */
  currentVersion?: string;
  /**
   * Current OEM version of your AzureStack deployment.
   */
  currentOemVersion?: string;
  /**
   * Date of last update.
   */
  lastUpdated?: Date;
  /**
   * State with respect to the update.
   */
  state?: RegionUpdateState;
};

/**
 * Pageable list of update runs.
 */
export interface UpdateRunList {
  /**
   * List of update runs.
   */
  value?: UpdateRun[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Defines values for UpdateState.
 */
export type UpdateState =
  | "HasPrerequisite"
  | "Obsolete"
  | "Ready"
  | "NotApplicableBecauseAnotherUpdateIsInProgress"
  | "Preparing"
  | "Installing"
  | "Installed"
  | "PreparationFailed"
  | "InstallationFailed";
/**
 * Defines values for UpdateRunState.
 */
export type UpdateRunState = "Unknown" | "Succeeded" | "InProgress" | "Failed";
/**
 * Defines values for RegionUpdateState.
 */
export type RegionUpdateState =
  | "Unknown"
  | "AppliedSuccessfully"
  | "AppliedUpdateAvailableSuccessfully"
  | "UpdateInProgress"
  | "UpdateFailed";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type UpdatesListResponse = UpdateList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UpdateList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type UpdatesGetResponse = Update & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Update;
  };
};

/**
 * Contains response data for the apply operation.
 */
export type UpdatesApplyResponse = UpdateRun & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UpdateRun;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type UpdatesListNextResponse = UpdateList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UpdateList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type UpdateLocationsListResponse = UpdateLocationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UpdateLocationList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type UpdateLocationsGetResponse = UpdateLocation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UpdateLocation;
  };
};

/**
 * Contains response data for the list operation.
 */
export type UpdateRunsListResponse = UpdateRunList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UpdateRunList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type UpdateRunsGetResponse = UpdateRun & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UpdateRun;
  };
};

/**
 * Contains response data for the listTopLevel operation.
 */
export type UpdateRunsListTopLevelResponse = UpdateRunList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UpdateRunList;
  };
};

/**
 * Contains response data for the getTopLevel operation.
 */
export type UpdateRunsGetTopLevelResponse = UpdateRun & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UpdateRun;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type UpdateRunsListNextResponse = UpdateRunList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UpdateRunList;
  };
};

/**
 * Contains response data for the listTopLevelNext operation.
 */
export type UpdateRunsListTopLevelNextResponse = UpdateRunList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UpdateRunList;
  };
};

/**
 * Optional parameters.
 */
export interface UpdateAdminClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
