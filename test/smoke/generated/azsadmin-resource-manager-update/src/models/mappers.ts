/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationList: coreHttp.CompositeMapper = {
  serializedName: "OperationList",
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "Display"
        }
      }
    }
  }
};

export const Display: coreHttp.CompositeMapper = {
  serializedName: "Display",
  type: {
    name: "Composite",
    className: "Display",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateList: coreHttp.CompositeMapper = {
  serializedName: "UpdateList",
  type: {
    name: "Composite",
    className: "UpdateList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Update" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const Update: coreHttp.CompositeMapper = {
  serializedName: "Update",
  type: {
    name: "Composite",
    className: "Update",
    modelProperties: {
      ...Resource.type.modelProperties,
      installedDate: {
        serializedName: "properties.installedDate",
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      kbLink: {
        serializedName: "properties.kbLink",
        type: {
          name: "String"
        }
      },
      minVersionRequired: {
        serializedName: "properties.minVersionRequired",
        type: {
          name: "String"
        }
      },
      minOemVersionRequired: {
        serializedName: "properties.minOemVersionRequired",
        type: {
          name: "String"
        }
      },
      packagePath: {
        serializedName: "properties.packagePath",
        type: {
          name: "String"
        }
      },
      packageSizeInMb: {
        serializedName: "properties.packageSizeInMb",
        type: {
          name: "Number"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      oemVersion: {
        serializedName: "properties.oemVersion",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "properties.publisher",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateRun: coreHttp.CompositeMapper = {
  serializedName: "UpdateRun",
  type: {
    name: "Composite",
    className: "UpdateRun",
    modelProperties: {
      ...Resource.type.modelProperties,
      progress: {
        serializedName: "progress",
        type: {
          name: "Composite",
          className: "Step"
        }
      },
      timeStarted: {
        serializedName: "properties.timeStarted",
        type: {
          name: "DateTime"
        }
      },
      duration: {
        serializedName: "properties.duration",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Step: coreHttp.CompositeMapper = {
  serializedName: "Step",
  type: {
    name: "Composite",
    className: "Step",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      startTimeUtc: {
        serializedName: "startTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      endTimeUtc: {
        serializedName: "endTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      steps: {
        serializedName: "steps",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Step" } }
        }
      }
    }
  }
};

export const UpdateLocationList: coreHttp.CompositeMapper = {
  serializedName: "UpdateLocationList",
  type: {
    name: "Composite",
    className: "UpdateLocationList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UpdateLocation" } }
        }
      }
    }
  }
};

export const UpdateLocation: coreHttp.CompositeMapper = {
  serializedName: "UpdateLocation",
  type: {
    name: "Composite",
    className: "UpdateLocation",
    modelProperties: {
      ...Resource.type.modelProperties,
      currentVersion: {
        serializedName: "properties.currentVersion",
        type: {
          name: "String"
        }
      },
      currentOemVersion: {
        serializedName: "properties.currentOemVersion",
        type: {
          name: "String"
        }
      },
      lastUpdated: {
        serializedName: "properties.lastUpdated",
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateRunList: coreHttp.CompositeMapper = {
  serializedName: "UpdateRunList",
  type: {
    name: "Composite",
    className: "UpdateRunList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UpdateRun" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
