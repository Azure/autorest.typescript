/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { UpdateAdminClient } from "../updateAdminClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  UpdatesListResponse,
  UpdatesGetResponse,
  UpdatesApplyResponse,
  UpdatesListNextResponse
} from "../models";

/**
 * Class representing a Updates.
 */
export class Updates {
  private readonly client: UpdateAdminClient;

  /**
   * Initialize a new instance of the class Updates class.
   * @param client Reference to the service client
   */
  constructor(client: UpdateAdminClient) {
    this.client = client;
  }

  /**
   * Get the list of update locations
   * @param resourceGroupName Resource group name.
   * @param updateLocation The name of the update location.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    updateLocation: string,
    options?: coreHttp.OperationOptions
  ): Promise<UpdatesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, updateLocation, options: operationOptions },
      listOperationSpec
    ) as Promise<UpdatesListResponse>;
  }

  /**
   * Get a specific update at an update location.
   * @param resourceGroupName Resource group name.
   * @param updateLocation The name of the update location.
   * @param updateName Name of the update.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    updateLocation: string,
    updateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<UpdatesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        updateLocation,
        updateName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<UpdatesGetResponse>;
  }

  /**
   * Apply a specific update at an update location.
   * @param resourceGroupName Resource group name.
   * @param updateLocation The name of the update location.
   * @param updateName Name of the update.
   * @param options The options parameters.
   */
  async apply(
    resourceGroupName: string,
    updateLocation: string,
    updateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<UpdatesApplyResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      updateLocation,
      updateName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        UpdatesApplyResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      applyOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: applyOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroupName Resource group name.
   * @param updateLocation The name of the update location.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroupName: string,
    updateLocation: string,
    options?: coreHttp.OperationOptions
  ): Promise<UpdatesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        nextLink,
        resourceGroupName,
        updateLocation,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<UpdatesListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Update.Admin/updateLocations/{updateLocation}/updates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.updateLocation
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Update.Admin/updateLocations/{updateLocation}/updates/{updateName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Update
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.updateLocation,
    Parameters.updateName
  ],
  serializer
};
const applyOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Update.Admin/updateLocations/{updateLocation}/updates/{updateName}/Apply",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateRun
    },
    201: {
      bodyMapper: Mappers.UpdateRun
    },
    202: {
      bodyMapper: Mappers.UpdateRun
    },
    204: {
      bodyMapper: Mappers.UpdateRun
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.updateLocation,
    Parameters.updateName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.updateLocation
  ],
  serializer
};
