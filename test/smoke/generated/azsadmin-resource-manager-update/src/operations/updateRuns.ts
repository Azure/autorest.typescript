/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { UpdateAdminClient } from "../updateAdminClient";
import {
  UpdateRunsListResponse,
  UpdateRunsGetResponse,
  UpdateRunsListTopLevelResponse,
  UpdateRunsGetTopLevelResponse,
  UpdateRunsListNextResponse,
  UpdateRunsListTopLevelNextResponse
} from "../models";

/**
 * Class representing a UpdateRuns.
 */
export class UpdateRuns {
  private readonly client: UpdateAdminClient;

  /**
   * Initialize a new instance of the class UpdateRuns class.
   * @param client Reference to the service client
   */
  constructor(client: UpdateAdminClient) {
    this.client = client;
  }

  /**
   * Get the list of update runs.
   * @param resourceGroupName Resource group name.
   * @param updateLocation The name of the update location.
   * @param updateName Name of the update.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    updateLocation: string,
    updateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<UpdateRunsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        updateLocation,
        updateName,
        options: operationOptions
      },
      listOperationSpec
    ) as Promise<UpdateRunsListResponse>;
  }

  /**
   * Get an instance of update run using the ID.
   * @param resourceGroupName Resource group name.
   * @param updateLocation The name of the update location.
   * @param updateName Name of the update.
   * @param runName Update run identifier.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    updateLocation: string,
    updateName: string,
    runName: string,
    options?: coreHttp.OperationOptions
  ): Promise<UpdateRunsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        updateLocation,
        updateName,
        runName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<UpdateRunsGetResponse>;
  }

  /**
   * Get the list of update runs.
   * @param resourceGroupName Resource group name.
   * @param updateLocation The name of the update location.
   * @param options The options parameters.
   */
  listTopLevel(
    resourceGroupName: string,
    updateLocation: string,
    options?: coreHttp.OperationOptions
  ): Promise<UpdateRunsListTopLevelResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, updateLocation, options: operationOptions },
      listTopLevelOperationSpec
    ) as Promise<UpdateRunsListTopLevelResponse>;
  }

  /**
   * Get an instance of update run using the ID.
   * @param resourceGroupName Resource group name.
   * @param updateLocation The name of the update location.
   * @param runName Update run identifier.
   * @param options The options parameters.
   */
  getTopLevel(
    resourceGroupName: string,
    updateLocation: string,
    runName: string,
    options?: coreHttp.OperationOptions
  ): Promise<UpdateRunsGetTopLevelResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, updateLocation, runName, options: operationOptions },
      getTopLevelOperationSpec
    ) as Promise<UpdateRunsGetTopLevelResponse>;
  }

  /**
   * Resume a failed update.
   * @param resourceGroupName Resource group name.
   * @param updateLocation The name of the update location.
   * @param updateName Name of the update.
   * @param runName Update run identifier.
   * @param options The options parameters.
   */
  rerun(
    resourceGroupName: string,
    updateLocation: string,
    updateName: string,
    runName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        updateLocation,
        updateName,
        runName,
        options: operationOptions
      },
      rerunOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroupName Resource group name.
   * @param updateLocation The name of the update location.
   * @param updateName Name of the update.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroupName: string,
    updateLocation: string,
    updateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<UpdateRunsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        nextLink,
        resourceGroupName,
        updateLocation,
        updateName,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<UpdateRunsListNextResponse>;
  }

  /**
   * ListTopLevelNext
   * @param resourceGroupName Resource group name.
   * @param updateLocation The name of the update location.
   * @param nextLink The nextLink from the previous successful call to the ListTopLevel method.
   * @param options The options parameters.
   */
  listTopLevelNext(
    resourceGroupName: string,
    updateLocation: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<UpdateRunsListTopLevelNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        updateLocation,
        nextLink,
        options: operationOptions
      },
      listTopLevelNextOperationSpec
    ) as Promise<UpdateRunsListTopLevelNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Update.Admin/updateLocations/{updateLocation}/updates/{updateName}/updateRuns",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateRunList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.updateLocation,
    Parameters.updateName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Update.Admin/updateLocations/{updateLocation}/updates/{updateName}/updateRuns/{runName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateRun
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.updateLocation,
    Parameters.updateName,
    Parameters.runName
  ],
  serializer
};
const listTopLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Update.Admin/updateLocations/{updateLocation}/updateRuns",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateRunList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.updateLocation
  ],
  serializer
};
const getTopLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Update.Admin/updateLocations/{updateLocation}/updateRuns/{runName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateRun
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.updateLocation,
    Parameters.runName
  ],
  serializer
};
const rerunOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Update.Admin/updateLocations/{updateLocation}/updates/{updateName}/updateRuns/{runName}/rerun",
  httpMethod: "POST",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.updateLocation,
    Parameters.updateName,
    Parameters.runName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateRunList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.updateLocation,
    Parameters.updateName
  ],
  serializer
};
const listTopLevelNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateRunList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.updateLocation,
    Parameters.nextLink1
  ],
  serializer
};
