/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LuisRuntimeClient } from "../luisRuntimeClient";
import {
  PredictionRequest,
  PredictionGetVersionPredictionOptionalParams,
  PredictionGetVersionPredictionResponse,
  PredictionGetSlotPredictionOptionalParams,
  PredictionGetSlotPredictionResponse
} from "../models";

/**
 * Class representing a Prediction.
 */
export class Prediction {
  private readonly client: LuisRuntimeClient;

  /**
   * Initialize a new instance of the class Prediction class.
   * @param client Reference to the service client
   */
  constructor(client: LuisRuntimeClient) {
    this.client = client;
  }

  /**
   * Gets the predictions for an application version.
   * @param predictionRequest The prediction request parameters.
   * @param appId The application ID.
   * @param versionId The application version ID.
   * @param options The options parameters.
   */
  getVersionPrediction(
    predictionRequest: PredictionRequest,
    appId: string,
    versionId: string,
    options?: PredictionGetVersionPredictionOptionalParams
  ): Promise<PredictionGetVersionPredictionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { predictionRequest, appId, versionId, options: operationOptions },
      getVersionPredictionOperationSpec
    ) as Promise<PredictionGetVersionPredictionResponse>;
  }

  /**
   * Gets the predictions for an application slot.
   * @param predictionRequest The prediction request parameters.
   * @param appId The application ID.
   * @param slotName The application slot name.
   * @param options The options parameters.
   */
  getSlotPrediction(
    predictionRequest: PredictionRequest,
    appId: string,
    slotName: string,
    options?: PredictionGetSlotPredictionOptionalParams
  ): Promise<PredictionGetSlotPredictionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { predictionRequest, appId, slotName, options: operationOptions },
      getSlotPredictionOperationSpec
    ) as Promise<PredictionGetSlotPredictionResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getVersionPredictionOperationSpec: coreHttp.OperationSpec = {
  path: "/apps/{appId}/versions/{versionId}/predict",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PredictionResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.predictionRequest,
  queryParameters: [
    Parameters.verbose,
    Parameters.showAllIntents,
    Parameters.log
  ],
  urlParameters: [Parameters.endpoint, Parameters.appId, Parameters.versionId],
  headerParameters: [Parameters.contentType],
  serializer
};
const getSlotPredictionOperationSpec: coreHttp.OperationSpec = {
  path: "/apps/{appId}/slots/{slotName}/predict",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PredictionResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.predictionRequest,
  queryParameters: [
    Parameters.verbose,
    Parameters.showAllIntents,
    Parameters.log
  ],
  urlParameters: [Parameters.endpoint, Parameters.appId, Parameters.slotName],
  headerParameters: [Parameters.contentType],
  serializer
};
