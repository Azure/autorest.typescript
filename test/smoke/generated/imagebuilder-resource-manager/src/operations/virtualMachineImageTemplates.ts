/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ImageBuilderClient } from "../imageBuilderClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  VirtualMachineImageTemplatesListResponse,
  VirtualMachineImageTemplatesListByResourceGroupResponse,
  ImageTemplate,
  VirtualMachineImageTemplatesCreateOrUpdateResponse,
  ImageTemplateUpdateParameters,
  VirtualMachineImageTemplatesUpdateResponse,
  VirtualMachineImageTemplatesGetResponse,
  VirtualMachineImageTemplatesListRunOutputsResponse,
  VirtualMachineImageTemplatesGetRunOutputResponse,
  VirtualMachineImageTemplatesListNextResponse,
  VirtualMachineImageTemplatesListByResourceGroupNextResponse,
  VirtualMachineImageTemplatesListRunOutputsNextResponse
} from "../models";

/**
 * Class representing a VirtualMachineImageTemplates.
 */
export class VirtualMachineImageTemplates {
  private readonly client: ImageBuilderClient;

  /**
   * Initialize a new instance of the class VirtualMachineImageTemplates class.
   * @param client Reference to the service client
   */
  constructor(client: ImageBuilderClient) {
    this.client = client;
  }

  /**
   * Gets information about the VM image templates associated with the subscription.
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<VirtualMachineImageTemplatesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<VirtualMachineImageTemplatesListResponse>;
  }

  /**
   * Gets information about the VM image templates associated with the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualMachineImageTemplatesListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<VirtualMachineImageTemplatesListByResourceGroupResponse>;
  }

  /**
   * Create or update a virtual machine image template
   * @param resourceGroupName The name of the resource group.
   * @param parameters Parameters supplied to the CreateImageTemplate operation
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    parameters: ImageTemplate,
    imageTemplateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<VirtualMachineImageTemplatesCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      parameters,
      imageTemplateName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        VirtualMachineImageTemplatesCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * Update the tags for this Virtual Machine Image Template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param parameters Additional parameters for Image Template update.
   * @param options The options parameters.
   */
  async update(
    resourceGroupName: string,
    imageTemplateName: string,
    parameters: ImageTemplateUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<VirtualMachineImageTemplatesUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      imageTemplateName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        VirtualMachineImageTemplatesUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * Get information about a virtual machine image template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualMachineImageTemplatesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, imageTemplateName, options: operationOptions },
      getOperationSpec
    ) as Promise<VirtualMachineImageTemplatesGetResponse>;
  }

  /**
   * Delete a virtual machine image template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      imageTemplateName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * Create artifacts from a existing image template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  async run(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      imageTemplateName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(args, runOperationSpec);

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: runOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * Cancel the long running image build based on the image template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  async cancel(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      imageTemplateName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      cancelOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: cancelOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * List all run outputs for the specified Image Template resource
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  listRunOutputs(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualMachineImageTemplatesListRunOutputsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, imageTemplateName, options: operationOptions },
      listRunOutputsOperationSpec
    ) as Promise<VirtualMachineImageTemplatesListRunOutputsResponse>;
  }

  /**
   * Get the specified run output for the specified image template resource
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param runOutputName The name of the run output
   * @param options The options parameters.
   */
  getRunOutput(
    resourceGroupName: string,
    imageTemplateName: string,
    runOutputName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualMachineImageTemplatesGetRunOutputResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        imageTemplateName,
        runOutputName,
        options: operationOptions
      },
      getRunOutputOperationSpec
    ) as Promise<VirtualMachineImageTemplatesGetRunOutputResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualMachineImageTemplatesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<VirtualMachineImageTemplatesListNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualMachineImageTemplatesListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<VirtualMachineImageTemplatesListByResourceGroupNextResponse>;
  }

  /**
   * ListRunOutputsNext
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param nextLink The nextLink from the previous successful call to the ListRunOutputs method.
   * @param options The options parameters.
   */
  listRunOutputsNext(
    resourceGroupName: string,
    imageTemplateName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualMachineImageTemplatesListRunOutputsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        imageTemplateName,
        nextLink,
        options: operationOptions
      },
      listRunOutputsNextOperationSpec
    ) as Promise<VirtualMachineImageTemplatesListRunOutputsNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.VirtualMachineImages/imageTemplates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplateListResult
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplateListResult
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplate
    },
    201: {
      bodyMapper: Mappers.ImageTemplate
    },
    202: {
      bodyMapper: Mappers.ImageTemplate
    },
    204: {
      bodyMapper: Mappers.ImageTemplate
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplate
    },
    201: {
      bodyMapper: Mappers.ImageTemplate
    },
    202: {
      bodyMapper: Mappers.ImageTemplate
    },
    204: {
      bodyMapper: Mappers.ImageTemplate
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplate
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  serializer
};
const runOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/run",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  serializer
};
const cancelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  serializer
};
const listRunOutputsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/runOutputs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RunOutputCollection
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  serializer
};
const getRunOutputOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/runOutputs/{runOutputName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RunOutput
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName,
    Parameters.runOutputName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplateListResult
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplateListResult
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink1
  ],
  serializer
};
const listRunOutputsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RunOutputCollection
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName,
    Parameters.nextLink2
  ],
  serializer
};
