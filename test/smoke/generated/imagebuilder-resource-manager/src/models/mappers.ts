/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const ImageTemplateListResult: coreHttp.CompositeMapper = {
  serializedName: "ImageTemplateListResult",
  type: {
    name: "Composite",
    className: "ImageTemplateListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ImageTemplate" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ImageTemplate: coreHttp.CompositeMapper = {
  serializedName: "ImageTemplate",
  type: {
    name: "Composite",
    className: "ImageTemplate",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ImageTemplateIdentity"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "ImageTemplateSource"
        }
      },
      customize: {
        serializedName: "properties.customize",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ImageTemplateCustomizer" }
          }
        }
      },
      distribute: {
        serializedName: "properties.distribute",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ImageTemplateDistributor" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Creating",
            "Updating",
            "Succeeded",
            "Failed",
            "Deleting"
          ]
        }
      },
      provisioningError: {
        serializedName: "provisioningError",
        type: {
          name: "Composite",
          className: "ProvisioningError"
        }
      },
      lastRunStatus: {
        serializedName: "lastRunStatus",
        type: {
          name: "Composite",
          className: "ImageTemplateLastRunStatus"
        }
      },
      buildTimeoutInMinutes: {
        constraints: {
          InclusiveMaximum: 960
        },
        serializedName: "properties.buildTimeoutInMinutes",
        type: {
          name: "Number"
        }
      },
      vmProfile: {
        serializedName: "vmProfile",
        type: {
          name: "Composite",
          className: "ImageTemplateVmProfile"
        }
      }
    }
  }
};

export const ImageTemplateSource: coreHttp.CompositeMapper = {
  serializedName: "ImageTemplateSource",
  type: {
    name: "Composite",
    className: "ImageTemplateSource",
    uberParent: "ImageTemplateSource",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageTemplateCustomizer: coreHttp.CompositeMapper = {
  serializedName: "ImageTemplateCustomizer",
  type: {
    name: "Composite",
    className: "ImageTemplateCustomizer",
    uberParent: "ImageTemplateCustomizer",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageTemplateDistributor: coreHttp.CompositeMapper = {
  serializedName: "ImageTemplateDistributor",
  type: {
    name: "Composite",
    className: "ImageTemplateDistributor",
    uberParent: "ImageTemplateDistributor",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      runOutputName: {
        constraints: {
          Pattern: new RegExp("^[A-Za-z0-9-_.]{1,64}$")
        },
        serializedName: "runOutputName",
        required: true,
        type: {
          name: "String"
        }
      },
      artifactTags: {
        serializedName: "artifactTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ProvisioningError: coreHttp.CompositeMapper = {
  serializedName: "ProvisioningError",
  type: {
    name: "Composite",
    className: "ProvisioningError",
    modelProperties: {
      provisioningErrorCode: {
        serializedName: "provisioningErrorCode",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageTemplateLastRunStatus: coreHttp.CompositeMapper = {
  serializedName: "ImageTemplateLastRunStatus",
  type: {
    name: "Composite",
    className: "ImageTemplateLastRunStatus",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      runState: {
        serializedName: "runState",
        type: {
          name: "Enum",
          allowedValues: [
            "Running",
            "Canceling",
            "Succeeded",
            "PartiallySucceeded",
            "Failed",
            "Canceled"
          ]
        }
      },
      runSubState: {
        serializedName: "runSubState",
        type: {
          name: "Enum",
          allowedValues: ["Queued", "Building", "Customizing", "Distributing"]
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageTemplateVmProfile: coreHttp.CompositeMapper = {
  serializedName: "ImageTemplateVmProfile",
  type: {
    name: "Composite",
    className: "ImageTemplateVmProfile",
    modelProperties: {
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      osDiskSizeGB: {
        constraints: {},
        serializedName: "osDiskSizeGB",
        type: {
          name: "Number"
        }
      },
      vnetConfig: {
        serializedName: "vnetConfig",
        type: {
          name: "Composite",
          className: "VirtualNetworkConfig"
        }
      }
    }
  }
};

export const VirtualNetworkConfig: coreHttp.CompositeMapper = {
  serializedName: "VirtualNetworkConfig",
  type: {
    name: "Composite",
    className: "VirtualNetworkConfig",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageTemplateIdentity: coreHttp.CompositeMapper = {
  serializedName: "ImageTemplateIdentity",
  type: {
    name: "Composite",
    className: "ImageTemplateIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: ["UserAssigned", "None"]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className:
                "ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties"
            }
          }
        }
      }
    }
  }
};

export const ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties: coreHttp.CompositeMapper = {
  serializedName:
    "ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties",
  type: {
    name: "Composite",
    className:
      "ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiError: coreHttp.CompositeMapper = {
  serializedName: "ApiError",
  type: {
    name: "Composite",
    className: "ApiError",
    modelProperties: {
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ApiErrorBase" } }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiErrorBase: coreHttp.CompositeMapper = {
  serializedName: "ApiErrorBase",
  type: {
    name: "Composite",
    className: "ApiErrorBase",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InnerError: coreHttp.CompositeMapper = {
  serializedName: "InnerError",
  type: {
    name: "Composite",
    className: "InnerError",
    modelProperties: {
      exceptionType: {
        serializedName: "exceptionType",
        type: {
          name: "String"
        }
      },
      errorDetail: {
        serializedName: "errorDetail",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageTemplateUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "ImageTemplateUpdateParameters",
  type: {
    name: "Composite",
    className: "ImageTemplateUpdateParameters",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ImageTemplateIdentity"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const RunOutputCollection: coreHttp.CompositeMapper = {
  serializedName: "RunOutputCollection",
  type: {
    name: "Composite",
    className: "RunOutputCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RunOutput" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubResource: coreHttp.CompositeMapper = {
  serializedName: "SubResource",
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RunOutput: coreHttp.CompositeMapper = {
  serializedName: "RunOutput",
  type: {
    name: "Composite",
    className: "RunOutput",
    modelProperties: {
      ...SubResource.type.modelProperties,
      artifactId: {
        serializedName: "properties.artifactId",
        type: {
          name: "String"
        }
      },
      artifactUri: {
        serializedName: "properties.artifactUri",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Creating",
            "Updating",
            "Succeeded",
            "Failed",
            "Deleting"
          ]
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageTemplatePlatformImageSource: coreHttp.CompositeMapper = {
  serializedName: "PlatformImage",
  type: {
    name: "Composite",
    className: "ImageTemplatePlatformImageSource",
    uberParent: "ImageTemplateSource",
    polymorphicDiscriminator: ImageTemplateSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageTemplateSource.type.modelProperties,
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      planInfo: {
        serializedName: "planInfo",
        type: {
          name: "Composite",
          className: "PlatformImagePurchasePlan"
        }
      }
    }
  }
};

export const PlatformImagePurchasePlan: coreHttp.CompositeMapper = {
  serializedName: "PlatformImagePurchasePlan",
  type: {
    name: "Composite",
    className: "PlatformImagePurchasePlan",
    modelProperties: {
      planName: {
        serializedName: "planName",
        required: true,
        type: {
          name: "String"
        }
      },
      planProduct: {
        serializedName: "planProduct",
        required: true,
        type: {
          name: "String"
        }
      },
      planPublisher: {
        serializedName: "planPublisher",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageTemplateManagedImageSource: coreHttp.CompositeMapper = {
  serializedName: "ManagedImage",
  type: {
    name: "Composite",
    className: "ImageTemplateManagedImageSource",
    uberParent: "ImageTemplateSource",
    polymorphicDiscriminator: ImageTemplateSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageTemplateSource.type.modelProperties,
      imageId: {
        serializedName: "imageId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageTemplateSharedImageVersionSource: coreHttp.CompositeMapper = {
  serializedName: "SharedImageVersion",
  type: {
    name: "Composite",
    className: "ImageTemplateSharedImageVersionSource",
    uberParent: "ImageTemplateSource",
    polymorphicDiscriminator: ImageTemplateSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageTemplateSource.type.modelProperties,
      imageVersionId: {
        serializedName: "imageVersionId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageTemplateShellCustomizer: coreHttp.CompositeMapper = {
  serializedName: "Shell",
  type: {
    name: "Composite",
    className: "ImageTemplateShellCustomizer",
    uberParent: "ImageTemplateCustomizer",
    polymorphicDiscriminator:
      ImageTemplateCustomizer.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageTemplateCustomizer.type.modelProperties,
      scriptUri: {
        serializedName: "scriptUri",
        type: {
          name: "String"
        }
      },
      sha256Checksum: {
        serializedName: "sha256Checksum",
        type: {
          name: "String"
        }
      },
      inline: {
        serializedName: "inline",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ImageTemplateShellCustomizerInlineItem"
          }
        }
      }
    }
  }
};

export const ImageTemplateRestartCustomizer: coreHttp.CompositeMapper = {
  serializedName: "WindowsRestart",
  type: {
    name: "Composite",
    className: "ImageTemplateRestartCustomizer",
    uberParent: "ImageTemplateCustomizer",
    polymorphicDiscriminator:
      ImageTemplateCustomizer.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageTemplateCustomizer.type.modelProperties,
      restartCommand: {
        serializedName: "restartCommand",
        type: {
          name: "String"
        }
      },
      restartCheckCommand: {
        serializedName: "restartCheckCommand",
        type: {
          name: "String"
        }
      },
      restartTimeout: {
        serializedName: "restartTimeout",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageTemplateWindowsUpdateCustomizer: coreHttp.CompositeMapper = {
  serializedName: "WindowsUpdate",
  type: {
    name: "Composite",
    className: "ImageTemplateWindowsUpdateCustomizer",
    uberParent: "ImageTemplateCustomizer",
    polymorphicDiscriminator:
      ImageTemplateCustomizer.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageTemplateCustomizer.type.modelProperties,
      searchCriteria: {
        serializedName: "searchCriteria",
        type: {
          name: "String"
        }
      },
      filters: {
        serializedName: "filters",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ImageTemplateWindowsUpdateCustomizerFiltersItem"
          }
        }
      },
      updateLimit: {
        constraints: {},
        serializedName: "updateLimit",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ImageTemplatePowerShellCustomizer: coreHttp.CompositeMapper = {
  serializedName: "PowerShell",
  type: {
    name: "Composite",
    className: "ImageTemplatePowerShellCustomizer",
    uberParent: "ImageTemplateCustomizer",
    polymorphicDiscriminator:
      ImageTemplateCustomizer.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageTemplateCustomizer.type.modelProperties,
      scriptUri: {
        serializedName: "scriptUri",
        type: {
          name: "String"
        }
      },
      sha256Checksum: {
        serializedName: "sha256Checksum",
        type: {
          name: "String"
        }
      },
      inline: {
        serializedName: "inline",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ImageTemplatePowerShellCustomizerInlineItem"
          }
        }
      },
      runElevated: {
        serializedName: "runElevated",
        type: {
          name: "Boolean"
        }
      },
      validExitCodes: {
        serializedName: "validExitCodes",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Number" },
            serializedName: "ArrayItemschema"
          }
        }
      }
    }
  }
};

export const ImageTemplateFileCustomizer: coreHttp.CompositeMapper = {
  serializedName: "File",
  type: {
    name: "Composite",
    className: "ImageTemplateFileCustomizer",
    uberParent: "ImageTemplateCustomizer",
    polymorphicDiscriminator:
      ImageTemplateCustomizer.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageTemplateCustomizer.type.modelProperties,
      sourceUri: {
        serializedName: "sourceUri",
        type: {
          name: "String"
        }
      },
      sha256Checksum: {
        serializedName: "sha256Checksum",
        type: {
          name: "String"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageTemplateManagedImageDistributor: coreHttp.CompositeMapper = {
  serializedName: "ManagedImage",
  type: {
    name: "Composite",
    className: "ImageTemplateManagedImageDistributor",
    uberParent: "ImageTemplateDistributor",
    polymorphicDiscriminator:
      ImageTemplateDistributor.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageTemplateDistributor.type.modelProperties,
      imageId: {
        serializedName: "imageId",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageTemplateSharedImageDistributor: coreHttp.CompositeMapper = {
  serializedName: "SharedImage",
  type: {
    name: "Composite",
    className: "ImageTemplateSharedImageDistributor",
    uberParent: "ImageTemplateDistributor",
    polymorphicDiscriminator:
      ImageTemplateDistributor.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageTemplateDistributor.type.modelProperties,
      galleryImageId: {
        serializedName: "galleryImageId",
        required: true,
        type: {
          name: "String"
        }
      },
      replicationRegions: {
        serializedName: "replicationRegions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "ImageTemplateSharedImageDistributorReplicationRegionsItem"
          }
        }
      },
      excludeFromLatest: {
        serializedName: "excludeFromLatest",
        type: {
          name: "Boolean"
        }
      },
      storageAccountType: {
        serializedName: "storageAccountType",
        type: {
          name: "Enum",
          allowedValues: ["Standard_LRS", "Standard_ZRS"]
        }
      }
    }
  }
};

export const ImageTemplateVhdDistributor: coreHttp.CompositeMapper = {
  serializedName: "VHD",
  type: {
    name: "Composite",
    className: "ImageTemplateVhdDistributor",
    uberParent: "ImageTemplateDistributor",
    polymorphicDiscriminator:
      ImageTemplateDistributor.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageTemplateDistributor.type.modelProperties
    }
  }
};

export let discriminators = {
  ImageTemplateSource: ImageTemplateSource,
  ImageTemplateCustomizer: ImageTemplateCustomizer,
  ImageTemplateDistributor: ImageTemplateDistributor,
  "ImageTemplateSource.PlatformImage": ImageTemplatePlatformImageSource,
  "ImageTemplateSource.ManagedImage": ImageTemplateManagedImageSource,
  "ImageTemplateSource.SharedImageVersion": ImageTemplateSharedImageVersionSource,
  "ImageTemplateCustomizer.Shell": ImageTemplateShellCustomizer,
  "ImageTemplateCustomizer.WindowsRestart": ImageTemplateRestartCustomizer,
  "ImageTemplateCustomizer.WindowsUpdate": ImageTemplateWindowsUpdateCustomizer,
  "ImageTemplateCustomizer.PowerShell": ImageTemplatePowerShellCustomizer,
  "ImageTemplateCustomizer.File": ImageTemplateFileCustomizer,
  "ImageTemplateDistributor.ManagedImage": ImageTemplateManagedImageDistributor,
  "ImageTemplateDistributor.SharedImage": ImageTemplateSharedImageDistributor,
  "ImageTemplateDistributor.VHD": ImageTemplateVhdDistributor
};
