/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Features } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import { FeatureClient } from "../featureClient";
import {
  FeatureResult,
  FeaturesListAllResponse,
  FeaturesListResponse,
  FeaturesGetResponse,
  FeaturesRegisterResponse,
  FeaturesUnregisterResponse,
  FeaturesListAllNextResponse,
  FeaturesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Features operations. */
export class FeaturesImpl implements Features {
  /**
   * Initialize a new instance of the class Features class.
   * @param client Reference to the service client
   */
  constructor(client: FeatureClient) {}

  /**
   * Gets all the preview features that are available through AFEC for the subscription.
   *
   */
  public listAll(): PagedAsyncIterableIterator<FeatureResult> {
    const iter = this.listAllPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAllPagingPage();
      }
    };
  }

  private async *listAllPagingPage(): AsyncIterableIterator<FeatureResult[]> {
    let result = await this._listAll();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAllNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAllPagingAll(): AsyncIterableIterator<FeatureResult> {
    for await (const page of this.listAllPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets all the preview features in a provider namespace that are available through AFEC for the
   * subscription.
   *
   */
  public list(): PagedAsyncIterableIterator<FeatureResult> {
    const iter = this.listPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage();
      }
    };
  }

  private async *listPagingPage(): AsyncIterableIterator<FeatureResult[]> {
    let result = await this._list();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(): AsyncIterableIterator<FeatureResult> {
    for await (const page of this.listPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets all the preview features that are available through AFEC for the subscription.
   *
   */
  private _listAll(): Promise<FeaturesListAllResponse> {}

  /**
   * Gets all the preview features in a provider namespace that are available through AFEC for the
   * subscription.
   *
   */
  private _list(): Promise<FeaturesListResponse> {}

  /**
   * Gets the preview feature with the specified name.
   *
   */
  get(): Promise<FeaturesGetResponse> {}

  /**
   * Registers the preview feature for the subscription.
   *
   */
  register(): Promise<FeaturesRegisterResponse> {}

  /**
   * Unregisters the preview feature for the subscription.
   *
   */
  unregister(): Promise<FeaturesUnregisterResponse> {}

  /**
   * ListAllNext
   *
   */
  private _listAllNext(): Promise<FeaturesListAllNextResponse> {}

  /**
   * ListNext
   *
   */
  private _listNext(): Promise<FeaturesListNextResponse> {}
}
// Operation Specifications
