/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const domainName: coreHttp.OperationURLParameter = {
  parameterPath: "domainName",
  mapper: {
    serializedName: "domainName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2020-04-01-preview",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const domainInfo: coreHttp.OperationParameter = {
  parameterPath: "domainInfo",
  mapper: Mappers.Domain
};

export const domainUpdateParameters: coreHttp.OperationParameter = {
  parameterPath: "domainUpdateParameters",
  mapper: Mappers.DomainUpdateParameters
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const top: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const regenerateKeyRequest: coreHttp.OperationParameter = {
  parameterPath: "regenerateKeyRequest",
  mapper: Mappers.DomainRegenerateKeyRequest
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const domainTopicName: coreHttp.OperationURLParameter = {
  parameterPath: "domainTopicName",
  mapper: {
    serializedName: "domainTopicName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const domainTopicName1: coreHttp.OperationURLParameter = {
  parameterPath: "domainTopicName",
  mapper: {
    serializedName: "domainTopicName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const domainName1: coreHttp.OperationURLParameter = {
  parameterPath: "domainName",
  mapper: {
    serializedName: "domainName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const partnerNamespaceName: coreHttp.OperationURLParameter = {
  parameterPath: "partnerNamespaceName",
  mapper: {
    serializedName: "partnerNamespaceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const eventChannelName: coreHttp.OperationURLParameter = {
  parameterPath: "eventChannelName",
  mapper: {
    serializedName: "eventChannelName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const eventChannelInfo: coreHttp.OperationParameter = {
  parameterPath: "eventChannelInfo",
  mapper: Mappers.EventChannel
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const scope: coreHttp.OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    serializedName: "scope",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const eventSubscriptionName: coreHttp.OperationURLParameter = {
  parameterPath: "eventSubscriptionName",
  mapper: {
    serializedName: "eventSubscriptionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const eventSubscriptionInfo: coreHttp.OperationParameter = {
  parameterPath: "eventSubscriptionInfo",
  mapper: Mappers.EventSubscription
};

export const scope1: coreHttp.OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    serializedName: "scope",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const eventSubscriptionName1: coreHttp.OperationURLParameter = {
  parameterPath: "eventSubscriptionName",
  mapper: {
    serializedName: "eventSubscriptionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const eventSubscriptionUpdateParameters: coreHttp.OperationParameter = {
  parameterPath: "eventSubscriptionUpdateParameters",
  mapper: Mappers.EventSubscriptionUpdateParameters
};

export const scope2: coreHttp.OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    serializedName: "scope",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const eventSubscriptionName2: coreHttp.OperationURLParameter = {
  parameterPath: "eventSubscriptionName",
  mapper: {
    serializedName: "eventSubscriptionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const topicTypeName: coreHttp.OperationURLParameter = {
  parameterPath: "topicTypeName",
  mapper: {
    serializedName: "topicTypeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const location: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const providerNamespace: coreHttp.OperationURLParameter = {
  parameterPath: "providerNamespace",
  mapper: {
    serializedName: "providerNamespace",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceTypeName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceTypeName",
  mapper: {
    serializedName: "resourceTypeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceName",
  mapper: {
    serializedName: "resourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const domainName2: coreHttp.OperationURLParameter = {
  parameterPath: "domainName",
  mapper: {
    serializedName: "domainName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const topicName: coreHttp.OperationURLParameter = {
  parameterPath: "topicName",
  mapper: {
    serializedName: "topicName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink4: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink5: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink6: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink7: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink8: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink9: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink10: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink11: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink12: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink13: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const systemTopicName: coreHttp.OperationURLParameter = {
  parameterPath: "systemTopicName",
  mapper: {
    serializedName: "systemTopicName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const eventSubscriptionName3: coreHttp.OperationURLParameter = {
  parameterPath: "eventSubscriptionName",
  mapper: {
    serializedName: "eventSubscriptionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink14: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const partnerTopicName: coreHttp.OperationURLParameter = {
  parameterPath: "partnerTopicName",
  mapper: {
    serializedName: "partnerTopicName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const eventSubscriptionName4: coreHttp.OperationURLParameter = {
  parameterPath: "eventSubscriptionName",
  mapper: {
    serializedName: "eventSubscriptionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink15: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const partnerNamespaceInfo: coreHttp.OperationParameter = {
  parameterPath: "partnerNamespaceInfo",
  mapper: Mappers.PartnerNamespace
};

export const partnerNamespaceUpdateParameters: coreHttp.OperationParameter = {
  parameterPath: "partnerNamespaceUpdateParameters",
  mapper: Mappers.PartnerNamespaceUpdateParameters
};

export const regenerateKeyRequest1: coreHttp.OperationParameter = {
  parameterPath: "regenerateKeyRequest",
  mapper: Mappers.PartnerNamespaceRegenerateKeyRequest
};

export const partnerRegistrationName: coreHttp.OperationURLParameter = {
  parameterPath: "partnerRegistrationName",
  mapper: {
    serializedName: "partnerRegistrationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const partnerRegistrationInfo: coreHttp.OperationParameter = {
  parameterPath: "partnerRegistrationInfo",
  mapper: Mappers.PartnerRegistration
};

export const partnerRegistrationUpdateParameters: coreHttp.OperationParameter = {
  parameterPath: "partnerRegistrationUpdateParameters",
  mapper: Mappers.PartnerRegistrationUpdateParameters
};

export const partnerTopicUpdateParameters: coreHttp.OperationParameter = {
  parameterPath: "partnerTopicUpdateParameters",
  mapper: Mappers.PartnerTopicUpdateParameters
};

export const parentType: coreHttp.OperationURLParameter = {
  parameterPath: "parentType",
  mapper: {
    serializedName: "parentType",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parentName: coreHttp.OperationURLParameter = {
  parameterPath: "parentName",
  mapper: {
    serializedName: "parentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateEndpointConnectionName: coreHttp.OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateEndpointConnection: coreHttp.OperationParameter = {
  parameterPath: "privateEndpointConnection",
  mapper: Mappers.PrivateEndpointConnection
};

export const privateLinkResourceName: coreHttp.OperationURLParameter = {
  parameterPath: "privateLinkResourceName",
  mapper: {
    serializedName: "privateLinkResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const systemTopicInfo: coreHttp.OperationParameter = {
  parameterPath: "systemTopicInfo",
  mapper: Mappers.SystemTopic
};

export const systemTopicUpdateParameters: coreHttp.OperationParameter = {
  parameterPath: "systemTopicUpdateParameters",
  mapper: Mappers.SystemTopicUpdateParameters
};

export const topicName1: coreHttp.OperationURLParameter = {
  parameterPath: "topicName",
  mapper: {
    serializedName: "topicName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const topicInfo: coreHttp.OperationParameter = {
  parameterPath: "topicInfo",
  mapper: Mappers.Topic
};

export const topicUpdateParameters: coreHttp.OperationParameter = {
  parameterPath: "topicUpdateParameters",
  mapper: Mappers.TopicUpdateParameters
};

export const regenerateKeyRequest2: coreHttp.OperationParameter = {
  parameterPath: "regenerateKeyRequest",
  mapper: Mappers.TopicRegenerateKeyRequest
};

export const resourceTypeName1: coreHttp.OperationURLParameter = {
  parameterPath: "resourceTypeName",
  mapper: {
    serializedName: "resourceTypeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceName1: coreHttp.OperationURLParameter = {
  parameterPath: "resourceName",
  mapper: {
    serializedName: "resourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const scope3: coreHttp.OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    serializedName: "scope",
    required: true,
    type: {
      name: "String"
    }
  }
};
