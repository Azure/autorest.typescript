/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreHttp.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const Domain: coreHttp.CompositeMapper = {
  serializedName: "Domain",
  type: {
    name: "Composite",
    className: "Domain",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ResourceSku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityInfo"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateEndpointConnection" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "properties.endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      inputSchema: {
        serializedName: "properties.inputSchema",
        type: {
          name: "String"
        }
      },
      inputSchemaMapping: {
        serializedName: "inputSchemaMapping",
        type: {
          name: "Composite",
          className: "InputSchemaMapping"
        }
      },
      metricResourceId: {
        serializedName: "properties.metricResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      inboundIpRules: {
        serializedName: "properties.inboundIpRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InboundIpRule" } }
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreHttp.CompositeMapper = {
  serializedName: "PrivateEndpointConnection",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      groupIds: {
        serializedName: "properties.groupIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PrivateEndpointConnectionPropertiesGroupIdsItem"
          }
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "ConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreHttp.CompositeMapper = {
  serializedName: "PrivateEndpoint",
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionState: coreHttp.CompositeMapper = {
  serializedName: "ConnectionState",
  type: {
    name: "Composite",
    className: "ConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InputSchemaMapping: coreHttp.CompositeMapper = {
  serializedName: "InputSchemaMapping",
  type: {
    name: "Composite",
    className: "InputSchemaMapping",
    uberParent: "InputSchemaMapping",
    polymorphicDiscriminator: {
      serializedName: "inputSchemaMappingType",
      clientName: "inputSchemaMappingType"
    },
    modelProperties: {
      inputSchemaMappingType: {
        defaultValue: "Json",
        serializedName: "inputSchemaMappingType",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InboundIpRule: coreHttp.CompositeMapper = {
  serializedName: "InboundIpRule",
  type: {
    name: "Composite",
    className: "InboundIpRule",
    modelProperties: {
      ipMask: {
        serializedName: "ipMask",
        type: {
          name: "String"
        }
      },
      action: {
        defaultValue: "Allow",
        serializedName: "action",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSku: coreHttp.CompositeMapper = {
  serializedName: "ResourceSku",
  type: {
    name: "Composite",
    className: "ResourceSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityInfo: coreHttp.CompositeMapper = {
  serializedName: "IdentityInfo",
  type: {
    name: "Composite",
    className: "IdentityInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserIdentityProperties" }
          }
        }
      }
    }
  }
};

export const UserIdentityProperties: coreHttp.CompositeMapper = {
  serializedName: "UserIdentityProperties",
  type: {
    name: "Composite",
    className: "UserIdentityProperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "DomainUpdateParameters",
  type: {
    name: "Composite",
    className: "DomainUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityInfo"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ResourceSku"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      inboundIpRules: {
        serializedName: "properties.inboundIpRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InboundIpRule" } }
        }
      }
    }
  }
};

export const DomainsListResult: coreHttp.CompositeMapper = {
  serializedName: "DomainsListResult",
  type: {
    name: "Composite",
    className: "DomainsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Domain" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainSharedAccessKeys: coreHttp.CompositeMapper = {
  serializedName: "DomainSharedAccessKeys",
  type: {
    name: "Composite",
    className: "DomainSharedAccessKeys",
    modelProperties: {
      key1: {
        serializedName: "key1",
        type: {
          name: "String"
        }
      },
      key2: {
        serializedName: "key2",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainRegenerateKeyRequest: coreHttp.CompositeMapper = {
  serializedName: "DomainRegenerateKeyRequest",
  type: {
    name: "Composite",
    className: "DomainRegenerateKeyRequest",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainTopic: coreHttp.CompositeMapper = {
  serializedName: "DomainTopic",
  type: {
    name: "Composite",
    className: "DomainTopic",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainTopicsListResult: coreHttp.CompositeMapper = {
  serializedName: "DomainTopicsListResult",
  type: {
    name: "Composite",
    className: "DomainTopicsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DomainTopic" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventChannel: coreHttp.CompositeMapper = {
  serializedName: "EventChannel",
  type: {
    name: "Composite",
    className: "EventChannel",
    modelProperties: {
      ...Resource.type.modelProperties,
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "EventChannelSource"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "EventChannelDestination"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "EventChannelFilter"
        }
      }
    }
  }
};

export const EventChannelSource: coreHttp.CompositeMapper = {
  serializedName: "EventChannelSource",
  type: {
    name: "Composite",
    className: "EventChannelSource",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventChannelDestination: coreHttp.CompositeMapper = {
  serializedName: "EventChannelDestination",
  type: {
    name: "Composite",
    className: "EventChannelDestination",
    modelProperties: {
      azureSubscriptionId: {
        serializedName: "azureSubscriptionId",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      },
      partnerTopicName: {
        serializedName: "partnerTopicName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventChannelFilter: coreHttp.CompositeMapper = {
  serializedName: "EventChannelFilter",
  type: {
    name: "Composite",
    className: "EventChannelFilter",
    modelProperties: {
      subjectBeginsWith: {
        serializedName: "subjectBeginsWith",
        type: {
          name: "String"
        }
      },
      subjectEndsWith: {
        serializedName: "subjectEndsWith",
        type: {
          name: "String"
        }
      },
      includedEventTypes: {
        serializedName: "includedEventTypes",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "EventChannelFilterIncludedEventTypesItem"
          }
        }
      },
      isSubjectCaseSensitive: {
        serializedName: "isSubjectCaseSensitive",
        type: {
          name: "Boolean"
        }
      },
      advancedFilters: {
        serializedName: "advancedFilters",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "AdvancedFilter" } }
        }
      }
    }
  }
};

export const AdvancedFilter: coreHttp.CompositeMapper = {
  serializedName: "AdvancedFilter",
  type: {
    name: "Composite",
    className: "AdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: {
      serializedName: "operatorType",
      clientName: "operatorType"
    },
    modelProperties: {
      operatorType: {
        serializedName: "operatorType",
        required: true,
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventChannelsListResult: coreHttp.CompositeMapper = {
  serializedName: "EventChannelsListResult",
  type: {
    name: "Composite",
    className: "EventChannelsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "EventChannel" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSubscription: coreHttp.CompositeMapper = {
  serializedName: "EventSubscription",
  type: {
    name: "Composite",
    className: "EventSubscription",
    modelProperties: {
      ...Resource.type.modelProperties,
      topic: {
        serializedName: "properties.topic",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "EventSubscriptionDestination"
        }
      },
      deliveryWithResourceIdentity: {
        serializedName: "deliveryWithResourceIdentity",
        type: {
          name: "Composite",
          className: "DeliveryWithResourceIdentity"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "EventSubscriptionFilter"
        }
      },
      labels: {
        serializedName: "properties.labels",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "EventSubscriptionPropertiesLabelsItem"
          }
        }
      },
      expirationTimeUtc: {
        serializedName: "properties.expirationTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      eventDeliverySchema: {
        serializedName: "properties.eventDeliverySchema",
        type: {
          name: "String"
        }
      },
      retryPolicy: {
        serializedName: "retryPolicy",
        type: {
          name: "Composite",
          className: "RetryPolicy"
        }
      },
      deadLetterDestination: {
        serializedName: "deadLetterDestination",
        type: {
          name: "Composite",
          className: "DeadLetterDestination"
        }
      },
      deadLetterWithResourceIdentity: {
        serializedName: "deadLetterWithResourceIdentity",
        type: {
          name: "Composite",
          className: "DeadLetterWithResourceIdentity"
        }
      }
    }
  }
};

export const EventSubscriptionDestination: coreHttp.CompositeMapper = {
  serializedName: "EventSubscriptionDestination",
  type: {
    name: "Composite",
    className: "EventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator: {
      serializedName: "endpointType",
      clientName: "endpointType"
    },
    modelProperties: {
      endpointType: {
        serializedName: "endpointType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryWithResourceIdentity: coreHttp.CompositeMapper = {
  serializedName: "DeliveryWithResourceIdentity",
  type: {
    name: "Composite",
    className: "DeliveryWithResourceIdentity",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "EventSubscriptionIdentity"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "EventSubscriptionDestination"
        }
      }
    }
  }
};

export const EventSubscriptionIdentity: coreHttp.CompositeMapper = {
  serializedName: "EventSubscriptionIdentity",
  type: {
    name: "Composite",
    className: "EventSubscriptionIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSubscriptionFilter: coreHttp.CompositeMapper = {
  serializedName: "EventSubscriptionFilter",
  type: {
    name: "Composite",
    className: "EventSubscriptionFilter",
    modelProperties: {
      subjectBeginsWith: {
        serializedName: "subjectBeginsWith",
        type: {
          name: "String"
        }
      },
      subjectEndsWith: {
        serializedName: "subjectEndsWith",
        type: {
          name: "String"
        }
      },
      includedEventTypes: {
        serializedName: "includedEventTypes",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "EventSubscriptionFilterIncludedEventTypesItem"
          }
        }
      },
      isSubjectCaseSensitive: {
        serializedName: "isSubjectCaseSensitive",
        type: {
          name: "Boolean"
        }
      },
      advancedFilters: {
        serializedName: "advancedFilters",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "AdvancedFilter" } }
        }
      }
    }
  }
};

export const RetryPolicy: coreHttp.CompositeMapper = {
  serializedName: "RetryPolicy",
  type: {
    name: "Composite",
    className: "RetryPolicy",
    modelProperties: {
      maxDeliveryAttempts: {
        serializedName: "maxDeliveryAttempts",
        type: {
          name: "Number"
        }
      },
      eventTimeToLiveInMinutes: {
        serializedName: "eventTimeToLiveInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DeadLetterDestination: coreHttp.CompositeMapper = {
  serializedName: "DeadLetterDestination",
  type: {
    name: "Composite",
    className: "DeadLetterDestination",
    uberParent: "DeadLetterDestination",
    polymorphicDiscriminator: {
      serializedName: "endpointType",
      clientName: "endpointType"
    },
    modelProperties: {
      endpointType: {
        defaultValue: "StorageBlob",
        serializedName: "endpointType",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeadLetterWithResourceIdentity: coreHttp.CompositeMapper = {
  serializedName: "DeadLetterWithResourceIdentity",
  type: {
    name: "Composite",
    className: "DeadLetterWithResourceIdentity",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "EventSubscriptionIdentity"
        }
      },
      deadLetterDestination: {
        serializedName: "deadLetterDestination",
        type: {
          name: "Composite",
          className: "DeadLetterDestination"
        }
      }
    }
  }
};

export const EventSubscriptionUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "EventSubscriptionUpdateParameters",
  type: {
    name: "Composite",
    className: "EventSubscriptionUpdateParameters",
    modelProperties: {
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "EventSubscriptionDestination"
        }
      },
      deliveryWithResourceIdentity: {
        serializedName: "deliveryWithResourceIdentity",
        type: {
          name: "Composite",
          className: "DeliveryWithResourceIdentity"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "EventSubscriptionFilter"
        }
      },
      labels: {
        serializedName: "labels",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "EventSubscriptionUpdateParametersLabelsItem"
          }
        }
      },
      expirationTimeUtc: {
        serializedName: "expirationTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      eventDeliverySchema: {
        serializedName: "eventDeliverySchema",
        type: {
          name: "String"
        }
      },
      retryPolicy: {
        serializedName: "retryPolicy",
        type: {
          name: "Composite",
          className: "RetryPolicy"
        }
      },
      deadLetterDestination: {
        serializedName: "deadLetterDestination",
        type: {
          name: "Composite",
          className: "DeadLetterDestination"
        }
      },
      deadLetterWithResourceIdentity: {
        serializedName: "deadLetterWithResourceIdentity",
        type: {
          name: "Composite",
          className: "DeadLetterWithResourceIdentity"
        }
      }
    }
  }
};

export const EventSubscriptionFullUrl: coreHttp.CompositeMapper = {
  serializedName: "EventSubscriptionFullUrl",
  type: {
    name: "Composite",
    className: "EventSubscriptionFullUrl",
    modelProperties: {
      endpointUrl: {
        serializedName: "endpointUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSubscriptionsListResult: coreHttp.CompositeMapper = {
  serializedName: "EventSubscriptionsListResult",
  type: {
    name: "Composite",
    className: "EventSubscriptionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EventSubscription" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationsListResult",
  type: {
    name: "Composite",
    className: "OperationsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationInfo"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const OperationInfo: coreHttp.CompositeMapper = {
  serializedName: "OperationInfo",
  type: {
    name: "Composite",
    className: "OperationInfo",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerNamespace: coreHttp.CompositeMapper = {
  serializedName: "PartnerNamespace",
  type: {
    name: "Composite",
    className: "PartnerNamespace",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerRegistrationFullyQualifiedId: {
        serializedName: "properties.partnerRegistrationFullyQualifiedId",
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "properties.endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerNamespaceUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "PartnerNamespaceUpdateParameters",
  type: {
    name: "Composite",
    className: "PartnerNamespaceUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const PartnerNamespacesListResult: coreHttp.CompositeMapper = {
  serializedName: "PartnerNamespacesListResult",
  type: {
    name: "Composite",
    className: "PartnerNamespacesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PartnerNamespace" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerNamespaceSharedAccessKeys: coreHttp.CompositeMapper = {
  serializedName: "PartnerNamespaceSharedAccessKeys",
  type: {
    name: "Composite",
    className: "PartnerNamespaceSharedAccessKeys",
    modelProperties: {
      key1: {
        serializedName: "key1",
        type: {
          name: "String"
        }
      },
      key2: {
        serializedName: "key2",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerNamespaceRegenerateKeyRequest: coreHttp.CompositeMapper = {
  serializedName: "PartnerNamespaceRegenerateKeyRequest",
  type: {
    name: "Composite",
    className: "PartnerNamespaceRegenerateKeyRequest",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerRegistration: coreHttp.CompositeMapper = {
  serializedName: "PartnerRegistration",
  type: {
    name: "Composite",
    className: "PartnerRegistration",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerName: {
        serializedName: "properties.partnerName",
        type: {
          name: "String"
        }
      },
      partnerResourceTypeName: {
        serializedName: "properties.partnerResourceTypeName",
        type: {
          name: "String"
        }
      },
      partnerResourceTypeDisplayName: {
        serializedName: "properties.partnerResourceTypeDisplayName",
        type: {
          name: "String"
        }
      },
      partnerResourceTypeDescription: {
        serializedName: "properties.partnerResourceTypeDescription",
        type: {
          name: "String"
        }
      },
      setupUri: {
        serializedName: "properties.setupUri",
        type: {
          name: "String"
        }
      },
      logoUri: {
        serializedName: "properties.logoUri",
        type: {
          name: "String"
        }
      },
      visibilityState: {
        serializedName: "properties.visibilityState",
        type: {
          name: "String"
        }
      },
      authorizedAzureSubscriptionIds: {
        serializedName: "properties.authorizedAzureSubscriptionIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "PartnerRegistrationPropertiesAuthorizedAzureSubscriptionIdsItem"
          }
        }
      }
    }
  }
};

export const PartnerRegistrationUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "PartnerRegistrationUpdateParameters",
  type: {
    name: "Composite",
    className: "PartnerRegistrationUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      partnerTopicTypeName: {
        serializedName: "partnerTopicTypeName",
        type: {
          name: "String"
        }
      },
      partnerTopicTypeDisplayName: {
        serializedName: "partnerTopicTypeDisplayName",
        type: {
          name: "String"
        }
      },
      partnerTopicTypeDescription: {
        serializedName: "partnerTopicTypeDescription",
        type: {
          name: "String"
        }
      },
      setupUri: {
        serializedName: "setupUri",
        type: {
          name: "String"
        }
      },
      logoUri: {
        serializedName: "logoUri",
        type: {
          name: "String"
        }
      },
      authorizedAzureSubscriptionIds: {
        serializedName: "authorizedAzureSubscriptionIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "PartnerRegistrationUpdateParametersAuthorizedAzureSubscriptionIdsItem"
          }
        }
      }
    }
  }
};

export const PartnerRegistrationsListResult: coreHttp.CompositeMapper = {
  serializedName: "PartnerRegistrationsListResult",
  type: {
    name: "Composite",
    className: "PartnerRegistrationsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PartnerRegistration" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerTopic: coreHttp.CompositeMapper = {
  serializedName: "PartnerTopic",
  type: {
    name: "Composite",
    className: "PartnerTopic",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      activationState: {
        serializedName: "properties.activationState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerTopicUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "PartnerTopicUpdateParameters",
  type: {
    name: "Composite",
    className: "PartnerTopicUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const PartnerTopicsListResult: coreHttp.CompositeMapper = {
  serializedName: "PartnerTopicsListResult",
  type: {
    name: "Composite",
    className: "PartnerTopicsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PartnerTopic" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreHttp.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionListResult",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateEndpointConnection" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreHttp.CompositeMapper = {
  serializedName: "PrivateLinkResource",
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PrivateLinkResourcePropertiesRequiredMembersItem"
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PrivateLinkResourcePropertiesRequiredZoneNamesItem"
          }
        }
      }
    }
  }
};

export const PrivateLinkResourcesListResult: coreHttp.CompositeMapper = {
  serializedName: "PrivateLinkResourcesListResult",
  type: {
    name: "Composite",
    className: "PrivateLinkResourcesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateLinkResource" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemTopic: coreHttp.CompositeMapper = {
  serializedName: "SystemTopic",
  type: {
    name: "Composite",
    className: "SystemTopic",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      topicType: {
        serializedName: "properties.topicType",
        type: {
          name: "String"
        }
      },
      metricResourceId: {
        serializedName: "properties.metricResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemTopicUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "SystemTopicUpdateParameters",
  type: {
    name: "Composite",
    className: "SystemTopicUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const SystemTopicsListResult: coreHttp.CompositeMapper = {
  serializedName: "SystemTopicsListResult",
  type: {
    name: "Composite",
    className: "SystemTopicsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SystemTopic" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Topic: coreHttp.CompositeMapper = {
  serializedName: "Topic",
  type: {
    name: "Composite",
    className: "Topic",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ResourceSku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityInfo"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateEndpointConnection" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "properties.endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      inputSchema: {
        serializedName: "properties.inputSchema",
        type: {
          name: "String"
        }
      },
      inputSchemaMapping: {
        serializedName: "inputSchemaMapping",
        type: {
          name: "Composite",
          className: "InputSchemaMapping"
        }
      },
      metricResourceId: {
        serializedName: "properties.metricResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      inboundIpRules: {
        serializedName: "properties.inboundIpRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InboundIpRule" } }
        }
      }
    }
  }
};

export const TopicUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "TopicUpdateParameters",
  type: {
    name: "Composite",
    className: "TopicUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityInfo"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ResourceSku"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      inboundIpRules: {
        serializedName: "properties.inboundIpRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InboundIpRule" } }
        }
      }
    }
  }
};

export const TopicsListResult: coreHttp.CompositeMapper = {
  serializedName: "TopicsListResult",
  type: {
    name: "Composite",
    className: "TopicsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Topic" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TopicSharedAccessKeys: coreHttp.CompositeMapper = {
  serializedName: "TopicSharedAccessKeys",
  type: {
    name: "Composite",
    className: "TopicSharedAccessKeys",
    modelProperties: {
      key1: {
        serializedName: "key1",
        type: {
          name: "String"
        }
      },
      key2: {
        serializedName: "key2",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TopicRegenerateKeyRequest: coreHttp.CompositeMapper = {
  serializedName: "TopicRegenerateKeyRequest",
  type: {
    name: "Composite",
    className: "TopicRegenerateKeyRequest",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventTypesListResult: coreHttp.CompositeMapper = {
  serializedName: "EventTypesListResult",
  type: {
    name: "Composite",
    className: "EventTypesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "EventType" } }
        }
      }
    }
  }
};

export const EventType: coreHttp.CompositeMapper = {
  serializedName: "EventType",
  type: {
    name: "Composite",
    className: "EventType",
    modelProperties: {
      ...Resource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      schemaUrl: {
        serializedName: "properties.schemaUrl",
        type: {
          name: "String"
        }
      },
      isInDefaultSet: {
        serializedName: "properties.isInDefaultSet",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ExtensionTopic: coreHttp.CompositeMapper = {
  serializedName: "ExtensionTopic",
  type: {
    name: "Composite",
    className: "ExtensionTopic",
    modelProperties: {
      ...Resource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      systemTopic: {
        serializedName: "properties.systemTopic",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TopicTypesListResult: coreHttp.CompositeMapper = {
  serializedName: "TopicTypesListResult",
  type: {
    name: "Composite",
    className: "TopicTypesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TopicTypeInfo" } }
        }
      }
    }
  }
};

export const TopicTypeInfo: coreHttp.CompositeMapper = {
  serializedName: "TopicTypeInfo",
  type: {
    name: "Composite",
    className: "TopicTypeInfo",
    modelProperties: {
      ...Resource.type.modelProperties,
      provider: {
        serializedName: "properties.provider",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      resourceRegionType: {
        serializedName: "properties.resourceRegionType",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      supportedLocations: {
        serializedName: "properties.supportedLocations",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "TopicTypePropertiesSupportedLocationsItem"
          }
        }
      },
      sourceResourceFormat: {
        serializedName: "properties.sourceResourceFormat",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JsonField: coreHttp.CompositeMapper = {
  serializedName: "JsonField",
  type: {
    name: "Composite",
    className: "JsonField",
    modelProperties: {
      sourceField: {
        serializedName: "sourceField",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JsonFieldWithDefault: coreHttp.CompositeMapper = {
  serializedName: "JsonFieldWithDefault",
  type: {
    name: "Composite",
    className: "JsonFieldWithDefault",
    modelProperties: {
      sourceField: {
        serializedName: "sourceField",
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "defaultValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JsonInputSchemaMapping: coreHttp.CompositeMapper = {
  serializedName: "Json",
  type: {
    name: "Composite",
    className: "JsonInputSchemaMapping",
    uberParent: "InputSchemaMapping",
    polymorphicDiscriminator: InputSchemaMapping.type.polymorphicDiscriminator,
    modelProperties: {
      ...InputSchemaMapping.type.modelProperties,
      id: {
        serializedName: "id",
        type: {
          name: "Composite",
          className: "JsonField"
        }
      },
      topic: {
        serializedName: "topic",
        type: {
          name: "Composite",
          className: "JsonField"
        }
      },
      eventTime: {
        serializedName: "eventTime",
        type: {
          name: "Composite",
          className: "JsonField"
        }
      },
      eventType: {
        serializedName: "eventType",
        type: {
          name: "Composite",
          className: "JsonFieldWithDefault"
        }
      },
      subject: {
        serializedName: "subject",
        type: {
          name: "Composite",
          className: "JsonFieldWithDefault"
        }
      },
      dataVersion: {
        serializedName: "dataVersion",
        type: {
          name: "Composite",
          className: "JsonFieldWithDefault"
        }
      }
    }
  }
};

export const NumberInAdvancedFilter: coreHttp.CompositeMapper = {
  serializedName: "NumberIn",
  type: {
    name: "Composite",
    className: "NumberInAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Number" },
            serializedName: "ArrayItemschema"
          }
        }
      }
    }
  }
};

export const NumberNotInAdvancedFilter: coreHttp.CompositeMapper = {
  serializedName: "NumberNotIn",
  type: {
    name: "Composite",
    className: "NumberNotInAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Number" },
            serializedName: "ArrayItemschema"
          }
        }
      }
    }
  }
};

export const NumberLessThanAdvancedFilter: coreHttp.CompositeMapper = {
  serializedName: "NumberLessThan",
  type: {
    name: "Composite",
    className: "NumberLessThanAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NumberGreaterThanAdvancedFilter: coreHttp.CompositeMapper = {
  serializedName: "NumberGreaterThan",
  type: {
    name: "Composite",
    className: "NumberGreaterThanAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NumberLessThanOrEqualsAdvancedFilter: coreHttp.CompositeMapper = {
  serializedName: "NumberLessThanOrEquals",
  type: {
    name: "Composite",
    className: "NumberLessThanOrEqualsAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NumberGreaterThanOrEqualsAdvancedFilter: coreHttp.CompositeMapper = {
  serializedName: "NumberGreaterThanOrEquals",
  type: {
    name: "Composite",
    className: "NumberGreaterThanOrEqualsAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BoolEqualsAdvancedFilter: coreHttp.CompositeMapper = {
  serializedName: "BoolEquals",
  type: {
    name: "Composite",
    className: "BoolEqualsAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const StringInAdvancedFilter: coreHttp.CompositeMapper = {
  serializedName: "StringIn",
  type: {
    name: "Composite",
    className: "StringInAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "StringInAdvancedFilterValuesItem"
          }
        }
      }
    }
  }
};

export const StringNotInAdvancedFilter: coreHttp.CompositeMapper = {
  serializedName: "StringNotIn",
  type: {
    name: "Composite",
    className: "StringNotInAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "StringNotInAdvancedFilterValuesItem"
          }
        }
      }
    }
  }
};

export const StringBeginsWithAdvancedFilter: coreHttp.CompositeMapper = {
  serializedName: "StringBeginsWith",
  type: {
    name: "Composite",
    className: "StringBeginsWithAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "StringBeginsWithAdvancedFilterValuesItem"
          }
        }
      }
    }
  }
};

export const StringEndsWithAdvancedFilter: coreHttp.CompositeMapper = {
  serializedName: "StringEndsWith",
  type: {
    name: "Composite",
    className: "StringEndsWithAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "StringEndsWithAdvancedFilterValuesItem"
          }
        }
      }
    }
  }
};

export const StringContainsAdvancedFilter: coreHttp.CompositeMapper = {
  serializedName: "StringContains",
  type: {
    name: "Composite",
    className: "StringContainsAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "StringContainsAdvancedFilterValuesItem"
          }
        }
      }
    }
  }
};

export const StorageBlobDeadLetterDestination: coreHttp.CompositeMapper = {
  serializedName: "StorageBlob",
  type: {
    name: "Composite",
    className: "StorageBlobDeadLetterDestination",
    uberParent: "DeadLetterDestination",
    polymorphicDiscriminator:
      DeadLetterDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeadLetterDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      blobContainerName: {
        serializedName: "properties.blobContainerName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebHookEventSubscriptionDestination: coreHttp.CompositeMapper = {
  serializedName: "WebHook",
  type: {
    name: "Composite",
    className: "WebHookEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      endpointUrl: {
        serializedName: "properties.endpointUrl",
        type: {
          name: "String"
        }
      },
      endpointBaseUrl: {
        serializedName: "properties.endpointBaseUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxEventsPerBatch: {
        serializedName: "properties.maxEventsPerBatch",
        type: {
          name: "Number"
        }
      },
      preferredBatchSizeInKilobytes: {
        serializedName: "properties.preferredBatchSizeInKilobytes",
        type: {
          name: "Number"
        }
      },
      azureActiveDirectoryTenantId: {
        serializedName: "properties.azureActiveDirectoryTenantId",
        type: {
          name: "String"
        }
      },
      azureActiveDirectoryApplicationIdOrUri: {
        serializedName: "properties.azureActiveDirectoryApplicationIdOrUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubEventSubscriptionDestination: coreHttp.CompositeMapper = {
  serializedName: "EventHub",
  type: {
    name: "Composite",
    className: "EventHubEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageQueueEventSubscriptionDestination: coreHttp.CompositeMapper = {
  serializedName: "StorageQueue",
  type: {
    name: "Composite",
    className: "StorageQueueEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      queueName: {
        serializedName: "properties.queueName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridConnectionEventSubscriptionDestination: coreHttp.CompositeMapper = {
  serializedName: "HybridConnection",
  type: {
    name: "Composite",
    className: "HybridConnectionEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceBusQueueEventSubscriptionDestination: coreHttp.CompositeMapper = {
  serializedName: "ServiceBusQueue",
  type: {
    name: "Composite",
    className: "ServiceBusQueueEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceBusTopicEventSubscriptionDestination: coreHttp.CompositeMapper = {
  serializedName: "ServiceBusTopic",
  type: {
    name: "Composite",
    className: "ServiceBusTopicEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFunctionEventSubscriptionDestination: coreHttp.CompositeMapper = {
  serializedName: "AzureFunction",
  type: {
    name: "Composite",
    className: "AzureFunctionEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      maxEventsPerBatch: {
        serializedName: "properties.maxEventsPerBatch",
        type: {
          name: "Number"
        }
      },
      preferredBatchSizeInKilobytes: {
        serializedName: "properties.preferredBatchSizeInKilobytes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PartnerRegistrationEventTypesListResult: coreHttp.CompositeMapper = {
  serializedName: "PartnerRegistrationEventTypesListResult",
  type: {
    name: "Composite",
    className: "PartnerRegistrationEventTypesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "EventType" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerTopicTypesListResult: coreHttp.CompositeMapper = {
  serializedName: "PartnerTopicTypesListResult",
  type: {
    name: "Composite",
    className: "PartnerTopicTypesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PartnerTopicType" }
          }
        }
      }
    }
  }
};

export const PartnerTopicType: coreHttp.CompositeMapper = {
  serializedName: "PartnerTopicType",
  type: {
    name: "Composite",
    className: "PartnerTopicType",
    modelProperties: {
      ...Resource.type.modelProperties,
      partnerName: {
        serializedName: "properties.partnerName",
        type: {
          name: "String"
        }
      },
      topicTypeName: {
        serializedName: "properties.topicTypeName",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      setupUri: {
        serializedName: "properties.setupUri",
        type: {
          name: "String"
        }
      },
      authorizationState: {
        serializedName: "properties.authorizationState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  InputSchemaMapping: InputSchemaMapping,
  AdvancedFilter: AdvancedFilter,
  EventSubscriptionDestination: EventSubscriptionDestination,
  DeadLetterDestination: DeadLetterDestination,
  "InputSchemaMapping.Json": JsonInputSchemaMapping,
  "AdvancedFilter.NumberIn": NumberInAdvancedFilter,
  "AdvancedFilter.NumberNotIn": NumberNotInAdvancedFilter,
  "AdvancedFilter.NumberLessThan": NumberLessThanAdvancedFilter,
  "AdvancedFilter.NumberGreaterThan": NumberGreaterThanAdvancedFilter,
  "AdvancedFilter.NumberLessThanOrEquals": NumberLessThanOrEqualsAdvancedFilter,
  "AdvancedFilter.NumberGreaterThanOrEquals": NumberGreaterThanOrEqualsAdvancedFilter,
  "AdvancedFilter.BoolEquals": BoolEqualsAdvancedFilter,
  "AdvancedFilter.StringIn": StringInAdvancedFilter,
  "AdvancedFilter.StringNotIn": StringNotInAdvancedFilter,
  "AdvancedFilter.StringBeginsWith": StringBeginsWithAdvancedFilter,
  "AdvancedFilter.StringEndsWith": StringEndsWithAdvancedFilter,
  "AdvancedFilter.StringContains": StringContainsAdvancedFilter,
  "DeadLetterDestination.StorageBlob": StorageBlobDeadLetterDestination,
  "EventSubscriptionDestination.WebHook": WebHookEventSubscriptionDestination,
  "EventSubscriptionDestination.EventHub": EventHubEventSubscriptionDestination,
  "EventSubscriptionDestination.StorageQueue": StorageQueueEventSubscriptionDestination,
  "EventSubscriptionDestination.HybridConnection": HybridConnectionEventSubscriptionDestination,
  "EventSubscriptionDestination.ServiceBusQueue": ServiceBusQueueEventSubscriptionDestination,
  "EventSubscriptionDestination.ServiceBusTopic": ServiceBusTopicEventSubscriptionDestination,
  "EventSubscriptionDestination.AzureFunction": AzureFunctionEventSubscriptionDestination
};
