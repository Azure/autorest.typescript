/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type InputSchemaMappingUnion =
  | InputSchemaMapping
  | JsonInputSchemaMapping;
export type AdvancedFilterUnion =
  | AdvancedFilter
  | NumberInAdvancedFilter
  | NumberNotInAdvancedFilter
  | NumberLessThanAdvancedFilter
  | NumberGreaterThanAdvancedFilter
  | NumberLessThanOrEqualsAdvancedFilter
  | NumberGreaterThanOrEqualsAdvancedFilter
  | BoolEqualsAdvancedFilter
  | StringInAdvancedFilter
  | StringNotInAdvancedFilter
  | StringBeginsWithAdvancedFilter
  | StringEndsWithAdvancedFilter
  | StringContainsAdvancedFilter;
export type EventSubscriptionDestinationUnion =
  | EventSubscriptionDestination
  | WebHookEventSubscriptionDestination
  | EventHubEventSubscriptionDestination
  | StorageQueueEventSubscriptionDestination
  | HybridConnectionEventSubscriptionDestination
  | ServiceBusQueueEventSubscriptionDestination
  | ServiceBusTopicEventSubscriptionDestination
  | AzureFunctionEventSubscriptionDestination;
export type DeadLetterDestinationUnion =
  | DeadLetterDestination
  | StorageBlobDeadLetterDestination;

/**
 * Definition of a Resource
 */
export interface Resource {
  /**
   * Fully qualified identifier of the resource.
   */
  readonly id?: string;
  /**
   * Name of the resource
   */
  readonly name?: string;
  /**
   * Type of the resource
   */
  readonly type?: string;
}

/**
 * Definition of a Tracked Resource.
 */
export type TrackedResource = Resource & {
  /**
   * Location of the resource.
   */
  location: string;
  /**
   * Tags of the resource.
   */
  tags?: { [propertyName: string]: string };
};

/**
 * EventGrid Domain.
 */
export type Domain = TrackedResource & {
  /**
   * The Sku pricing tier for the domain.
   */
  sku?: ResourceSku;
  /**
   * Identity information for the resource.
   */
  identity?: IdentityInfo;
  /**
   * List of private endpoint connections.
   */
  privateEndpointConnections?: PrivateEndpointConnection[];
  /**
   * Provisioning state of the domain.
   */
  readonly provisioningState?: DomainProvisioningState;
  /**
   * Endpoint for the domain.
   */
  readonly endpoint?: string;
  /**
   * This determines the format that Event Grid should expect for incoming events published to the domain.
   */
  inputSchema?: InputSchema;
  /**
   * Information about the InputSchemaMapping which specified the info about mapping event payload.
   */
  inputSchemaMapping?: InputSchemaMappingUnion;
  /**
   * Metric resource id for the domain.
   */
  readonly metricResourceId?: string;
  /**
   * This determines if traffic is allowed over public network. By default it is enabled.
   * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules" />
   */
  publicNetworkAccess?: PublicNetworkAccess;
  /**
   * This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
   */
  inboundIpRules?: InboundIpRule[];
};

export type PrivateEndpointConnection = Resource & {
  /**
   * The Private Endpoint resource for this Connection.
   */
  privateEndpoint?: PrivateEndpoint;
  /**
   * GroupIds from the private link service resource.
   */
  groupIds?: string[];
  /**
   * Details about the state of the connection.
   */
  privateLinkServiceConnectionState?: ConnectionState;
  /**
   * Provisioning state of the Private Endpoint Connection.
   */
  provisioningState?: ResourceProvisioningState;
};

/**
 * PrivateEndpoint information.
 */
export interface PrivateEndpoint {
  /**
   * The ARM identifier for Private Endpoint.
   */
  id?: string;
}

/**
 * ConnectionState information.
 */
export interface ConnectionState {
  /**
   * Status of the connection.
   */
  status?: PersistedConnectionStatus;
  /**
   * Description of the connection state.
   */
  description?: string;
  /**
   * Actions required (if any).
   */
  actionsRequired?: string;
}

/**
 * By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.
 */
export interface InputSchemaMapping {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  inputSchemaMappingType: "Json";
}

export interface InboundIpRule {
  /**
   * IP Address in CIDR notation e.g., 10.0.0.0/8.
   */
  ipMask?: string;
  /**
   * Action to perform based on the match or no match of the IpMask.
   */
  action?: "Allow";
}

/**
 * Describes an EventGrid Resource Sku.
 */
export interface ResourceSku {
  /**
   * the Sku name of the resource.
   * the possible values: Basic; Premium
   */
  name?: Sku;
}

/**
 * The identity information for the resource.
 */
export interface IdentityInfo {
  /**
   * The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
   */
  type?: IdentityType;
  /**
   * The principal ID of resource identity.
   */
  principalId?: string;
  /**
   * The tenant ID of resource.
   */
  tenantId?: string;
  /**
   * The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   * This property is currently not used and reserved for future usage.
   */
  userAssignedIdentities?: { [propertyName: string]: UserIdentityProperties };
}

/**
 * The information about the user identity.
 */
export interface UserIdentityProperties {
  /**
   * The principal id of user assigned identity.
   */
  principalId?: string;
  /**
   * The client id of user assigned identity.
   */
  clientId?: string;
}

/**
 * Properties of the Domain update.
 */
export interface DomainUpdateParameters {
  /**
   * Tags of the domains resource.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Identity information for the resource.
   */
  identity?: IdentityInfo;
  /**
   * The Sku pricing tier for the domain.
   */
  sku?: ResourceSku;
  /**
   * This determines if traffic is allowed over public network. By default it is enabled.
   * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainUpdateParameterProperties.InboundIpRules" />
   */
  publicNetworkAccess?: PublicNetworkAccess;
  /**
   * This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
   */
  inboundIpRules?: InboundIpRule[];
}

/**
 * Result of the List Domains operation
 */
export interface DomainsListResult {
  /**
   * A collection of Domains
   */
  value?: Domain[];
  /**
   * A link for the next page of domains
   */
  nextLink?: string;
}

/**
 * Shared access keys of the Domain.
 */
export interface DomainSharedAccessKeys {
  /**
   * Shared access key1 for the domain.
   */
  key1?: string;
  /**
   * Shared access key2 for the domain.
   */
  key2?: string;
}

/**
 * Domain regenerate share access key request.
 */
export interface DomainRegenerateKeyRequest {
  /**
   * Key name to regenerate key1 or key2.
   */
  keyName: string;
}

/**
 * Domain Topic.
 */
export type DomainTopic = Resource & {
  /**
   * Provisioning state of the domain topic.
   */
  provisioningState?: DomainTopicProvisioningState;
};

/**
 * Result of the List Domain Topics operation
 */
export interface DomainTopicsListResult {
  /**
   * A collection of Domain Topics
   */
  value?: DomainTopic[];
  /**
   * A link for the next page of domain topics
   */
  nextLink?: string;
}

/**
 * Event Channel.
 */
export type EventChannel = Resource & {
  /**
   * Source of the event channel. This represents a unique resource in the partner's resource model.
   */
  source?: EventChannelSource;
  /**
   * Represents the destination of an event channel.
   */
  destination?: EventChannelDestination;
  /**
   * Provisioning state of the event channel.
   */
  readonly provisioningState?: EventChannelProvisioningState;
  /**
   * Information about the filter for the event channel.
   */
  filter?: EventChannelFilter;
};

/**
 * Properties of the source of an event channel.
 */
export interface EventChannelSource {
  /**
   * The identifier of the resource that's the source of the events.
   * This represents a unique resource in the partner's resource model.
   */
  source?: string;
}

/**
 * Properties of the destination of an event channel.
 */
export interface EventChannelDestination {
  /**
   * Azure subscription ID of the customer creating the event channel. The partner topic
   * associated with the event channel will be created under this Azure subscription.
   */
  azureSubscriptionId?: string;
  /**
   * Azure Resource Group of the customer creating the event channel. The partner topic
   * associated with the event channel will be created under this resource group.
   */
  resourceGroup?: string;
  /**
   * Name of the partner topic associated with the event channel.
   */
  partnerTopicName?: string;
}

/**
 * Filter for the Event Channel.
 */
export interface EventChannelFilter {
  /**
   * An optional string to filter events for an event channel based on a resource path prefix.
   * The format of this depends on the publisher of the events. Wildcard characters are not supported in this path.
   */
  subjectBeginsWith?: string;
  /**
   * An optional string to filter events for an event channel based on a resource path suffix.
   * Wildcard characters are not supported in this path.
   */
  subjectEndsWith?: string;
  /**
   * A list of applicable event types that need to be part of the event channel. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
   */
  includedEventTypes?: string[];
  /**
   * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
   * should be compared in a case sensitive manner.
   */
  isSubjectCaseSensitive?: boolean;
  /**
   * An array of advanced filters that are used for filtering event channels.
   */
  advancedFilters?: AdvancedFilterUnion[];
}

/**
 * This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
 */
export interface AdvancedFilter {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  operatorType:
    | "NumberIn"
    | "NumberNotIn"
    | "NumberLessThan"
    | "NumberGreaterThan"
    | "NumberLessThanOrEquals"
    | "NumberGreaterThanOrEquals"
    | "BoolEquals"
    | "StringIn"
    | "StringNotIn"
    | "StringBeginsWith"
    | "StringEndsWith"
    | "StringContains";
  /**
   * The field/property in the event based on which you want to filter.
   */
  key?: string;
}

/**
 * Result of the List Event Channels operation
 */
export interface EventChannelsListResult {
  /**
   * A collection of Event Channels
   */
  value?: EventChannel[];
  /**
   * A link for the next page of event channels
   */
  nextLink?: string;
}

/**
 * Event Subscription
 */
export type EventSubscription = Resource & {
  /**
   * Name of the topic of the event subscription.
   */
  readonly topic?: string;
  /**
   * Provisioning state of the event subscription.
   */
  readonly provisioningState?: EventSubscriptionProvisioningState;
  /**
   * Information about the destination where events have to be delivered for the event subscription.
   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  destination?: EventSubscriptionDestinationUnion;
  /**
   * Information about the destination where events have to be delivered for the event subscription.
   * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deliveryWithResourceIdentity?: DeliveryWithResourceIdentity;
  /**
   * Information about the filter for the event subscription.
   */
  filter?: EventSubscriptionFilter;
  /**
   * List of user defined labels.
   */
  labels?: string[];
  /**
   * Expiration time of the event subscription.
   */
  expirationTimeUtc?: Date;
  /**
   * The event delivery schema for the event subscription.
   */
  eventDeliverySchema?: EventDeliverySchema;
  /**
   * The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
   */
  retryPolicy?: RetryPolicy;
  /**
   * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deadLetterDestination?: DeadLetterDestinationUnion;
  /**
   * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
   * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deadLetterWithResourceIdentity?: DeadLetterWithResourceIdentity;
};

/**
 * Information about the destination for an event subscription.
 */
export interface EventSubscriptionDestination {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  endpointType:
    | "WebHook"
    | "EventHub"
    | "StorageQueue"
    | "HybridConnection"
    | "ServiceBusQueue"
    | "ServiceBusTopic"
    | "AzureFunction";
}

/**
 * Information about the delivery for an event subscription with resource identity.
 */
export interface DeliveryWithResourceIdentity {
  /**
   * The identity to use when delivering events.
   */
  identity?: EventSubscriptionIdentity;
  /**
   * Information about the destination where events have to be delivered for the event subscription.
   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  destination?: EventSubscriptionDestinationUnion;
}

/**
 * The identity information with the event subscription.
 */
export interface EventSubscriptionIdentity {
  /**
   * The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
   */
  type?: EventSubscriptionIdentityType;
  /**
   * The user identity associated with the resource.
   */
  userAssignedIdentity?: string;
}

/**
 * Filter for the Event Subscription.
 */
export interface EventSubscriptionFilter {
  /**
   * An optional string to filter events for an event subscription based on a resource path prefix.
   * The format of this depends on the publisher of the events.
   * Wildcard characters are not supported in this path.
   */
  subjectBeginsWith?: string;
  /**
   * An optional string to filter events for an event subscription based on a resource path suffix.
   * Wildcard characters are not supported in this path.
   */
  subjectEndsWith?: string;
  /**
   * A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
   */
  includedEventTypes?: string[];
  /**
   * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
   * should be compared in a case sensitive manner.
   */
  isSubjectCaseSensitive?: boolean;
  /**
   * An array of advanced filters that are used for filtering event subscriptions.
   */
  advancedFilters?: AdvancedFilterUnion[];
}

/**
 * Information about the retry policy for an event subscription.
 */
export interface RetryPolicy {
  /**
   * Maximum number of delivery retry attempts for events.
   */
  maxDeliveryAttempts?: number;
  /**
   * Time To Live (in minutes) for events.
   */
  eventTimeToLiveInMinutes?: number;
}

/**
 * Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
 */
export interface DeadLetterDestination {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  endpointType: "StorageBlob";
}

/**
 * Information about the deadletter destination with resource identity.
 */
export interface DeadLetterWithResourceIdentity {
  /**
   * The identity to use when dead-lettering events.
   */
  identity?: EventSubscriptionIdentity;
  /**
   * Information about the destination where events have to be delivered for the event subscription.
   * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deadLetterDestination?: DeadLetterDestinationUnion;
}

/**
 * Properties of the Event Subscription update.
 */
export interface EventSubscriptionUpdateParameters {
  /**
   * Information about the destination where events have to be delivered for the event subscription.
   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  destination?: EventSubscriptionDestinationUnion;
  /**
   * Information about the destination where events have to be delivered for the event subscription.
   * Uses the managed identity setup on the parent resource (topic / domain) to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deliveryWithResourceIdentity?: DeliveryWithResourceIdentity;
  /**
   * Information about the filter for the event subscription.
   */
  filter?: EventSubscriptionFilter;
  /**
   * List of user defined labels.
   */
  labels?: string[];
  /**
   * Information about the expiration time for the event subscription.
   */
  expirationTimeUtc?: Date;
  /**
   * The event delivery schema for the event subscription.
   */
  eventDeliverySchema?: EventDeliverySchema;
  /**
   * The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
   */
  retryPolicy?: RetryPolicy;
  /**
   * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deadLetterDestination?: DeadLetterDestinationUnion;
  /**
   * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
   * Uses the managed identity setup on the parent resource (topic / domain) to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deadLetterWithResourceIdentity?: DeadLetterWithResourceIdentity;
}

/**
 * Full endpoint url of an event subscription
 */
export interface EventSubscriptionFullUrl {
  /**
   * The URL that represents the endpoint of the destination of an event subscription.
   */
  endpointUrl?: string;
}

/**
 * Result of the List EventSubscriptions operation
 */
export interface EventSubscriptionsListResult {
  /**
   * A collection of EventSubscriptions
   */
  value?: EventSubscription[];
  /**
   * A link for the next page of event subscriptions
   */
  nextLink?: string;
}

/**
 * Result of the List Operations operation
 */
export interface OperationsListResult {
  /**
   * A collection of operations
   */
  value?: Operation[];
}

/**
 * Represents an operation returned by the GetOperations request
 */
export interface Operation {
  /**
   * Name of the operation
   */
  name?: string;
  /**
   * Display name of the operation
   */
  display?: OperationInfo;
  /**
   * Origin of the operation
   */
  origin?: string;
  /**
   * Properties of the operation
   */
  properties?: any;
}

/**
 * Information about an operation
 */
export interface OperationInfo {
  /**
   * Name of the provider
   */
  provider?: string;
  /**
   * Name of the resource type
   */
  resource?: string;
  /**
   * Name of the operation
   */
  operation?: string;
  /**
   * Description of the operation
   */
  description?: string;
}

/**
 * EventGrid Partner Namespace.
 */
export type PartnerNamespace = TrackedResource & {
  /**
   * Provisioning state of the partner namespace.
   */
  readonly provisioningState?: PartnerNamespaceProvisioningState;
  /**
   * The fully qualified ARM Id of the partner registration that should be associated with this partner namespace. This takes the following format:
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}.
   */
  partnerRegistrationFullyQualifiedId?: string;
  /**
   * Endpoint for the partner namespace.
   */
  readonly endpoint?: string;
};

/**
 * Properties of the PartnerNamespace update.
 */
export interface PartnerNamespaceUpdateParameters {
  /**
   * Tags of the partner namespace.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Result of the List Partner Namespaces operation
 */
export interface PartnerNamespacesListResult {
  /**
   * A collection of partner namespaces.
   */
  value?: PartnerNamespace[];
  /**
   * A link for the next page of partner namespaces.
   */
  nextLink?: string;
}

/**
 * Shared access keys of the partner namespace.
 */
export interface PartnerNamespaceSharedAccessKeys {
  /**
   * Shared access key1 for the partner namespace.
   */
  key1?: string;
  /**
   * Shared access key2 for the partner namespace.
   */
  key2?: string;
}

/**
 * PartnerNamespace regenerate shared access key request.
 */
export interface PartnerNamespaceRegenerateKeyRequest {
  /**
   * Key name to regenerate (key1 or key2).
   */
  keyName: string;
}

/**
 * Information about a partner registration.
 */
export type PartnerRegistration = TrackedResource & {
  /**
   * Provisioning state of the partner registration.
   */
  readonly provisioningState?: PartnerRegistrationProvisioningState;
  /**
   * Official name of the partner name. For example: "Contoso".
   */
  partnerName?: string;
  /**
   * Name of the partner resource type.
   */
  partnerResourceTypeName?: string;
  /**
   * Display name of the partner resource type.
   */
  partnerResourceTypeDisplayName?: string;
  /**
   * Description of the partner resource type.
   */
  partnerResourceTypeDescription?: string;
  /**
   * URI of the partner website that can be used by Azure customers to setup Event Grid
   * integration on an event source.
   */
  setupUri?: string;
  /**
   * URI of the logo.
   */
  logoUri?: string;
  /**
   * Visibility state of the partner registration.
   */
  visibilityState?: PartnerRegistrationVisibilityState;
  /**
   * List of Azure subscription Ids that are authorized to create a partner namespace
   * associated with this partner registration. This is an optional property. Creating
   * partner namespaces is always permitted under the same Azure subscription as the one used
   * for creating the partner registration.
   */
  authorizedAzureSubscriptionIds?: string[];
};

/**
 * Properties of the Partner Registration update.
 */
export interface PartnerRegistrationUpdateParameters {
  /**
   * Tags of the partner registration resource.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Name of the partner topic type.
   */
  partnerTopicTypeName?: string;
  /**
   * Display name of the partner topic type.
   */
  partnerTopicTypeDisplayName?: string;
  /**
   * Description of the partner topic type.
   */
  partnerTopicTypeDescription?: string;
  /**
   * URI of the partner website that can be used by Azure customers to setup Event Grid
   * integration on an event source.
   */
  setupUri?: string;
  /**
   * URI of the partner logo.
   */
  logoUri?: string;
  /**
   * List of IDs of Azure AD applications that are authorized to create a partner namespace
   * associated with this partner registration. This is an optional property. Creating
   * partner namespaces is always permitted under the same Azure subscription as the one used
   * for creating the partner registration.
   */
  authorizedAzureSubscriptionIds?: string[];
}

/**
 * Result of the List Partner Registrations operation.
 */
export interface PartnerRegistrationsListResult {
  /**
   * A collection of partner registrations.
   */
  value?: PartnerRegistration[];
  /**
   * A link for the next page of partner registrations.
   */
  nextLink?: string;
}

/**
 * EventGrid Partner Topic.
 */
export type PartnerTopic = TrackedResource & {
  /**
   * Source associated with this partner topic. This represents a unique partner resource.
   */
  source?: string;
  /**
   * Provisioning state of the partner topic.
   */
  readonly provisioningState?: PartnerTopicProvisioningState;
  /**
   * Activation state of the partner topic.
   */
  activationState?: PartnerTopicActivationState;
};

/**
 * Properties of the Partner Topic update.
 */
export interface PartnerTopicUpdateParameters {
  /**
   * Tags of the partner topic.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Result of the List Partner Topics operation.
 */
export interface PartnerTopicsListResult {
  /**
   * A collection of partner topics.
   */
  value?: PartnerTopic[];
  /**
   * A link for the next page of partner topics.
   */
  nextLink?: string;
}

/**
 * Result of the list of all private endpoint connections operation.
 */
export interface PrivateEndpointConnectionListResult {
  /**
   * A collection of private endpoint connection resources.
   */
  value?: PrivateEndpointConnection[];
  /**
   * A link for the next page of private endpoint connection resources.
   */
  nextLink?: string;
}

/**
 * Information of the private link resource.
 */
export interface PrivateLinkResource {
  /**
   * Fully qualified identifier of the resource.
   */
  id?: string;
  /**
   * Name of the resource
   */
  name?: string;
  /**
   * Type of the resource
   */
  type?: string;
  groupId?: string;
  displayName?: string;
  requiredMembers?: string[];
  requiredZoneNames?: string[];
}

/**
 * Result of the List private link resources operation.
 */
export interface PrivateLinkResourcesListResult {
  /**
   * A collection of private link resources
   */
  value?: PrivateLinkResource[];
  /**
   * A link for the next page of private link resources.
   */
  nextLink?: string;
}

/**
 * EventGrid System Topic.
 */
export type SystemTopic = TrackedResource & {
  /**
   * Provisioning state of the system topic.
   */
  readonly provisioningState?: ResourceProvisioningState;
  /**
   * Source for the system topic.
   */
  source?: string;
  /**
   * TopicType for the system topic.
   */
  topicType?: string;
  /**
   * Metric resource id for the system topic.
   */
  readonly metricResourceId?: string;
};

/**
 * Properties of the System Topic update.
 */
export interface SystemTopicUpdateParameters {
  /**
   * Tags of the system topic.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Result of the List System topics operation.
 */
export interface SystemTopicsListResult {
  /**
   * A collection of system Topics.
   */
  value?: SystemTopic[];
  /**
   * A link for the next page of topics.
   */
  nextLink?: string;
}

/**
 * EventGrid Topic
 */
export type Topic = TrackedResource & {
  /**
   * The Sku pricing tier for the topic.
   */
  sku?: ResourceSku;
  /**
   * Identity information for the resource.
   */
  identity?: IdentityInfo;
  privateEndpointConnections?: PrivateEndpointConnection[];
  /**
   * Provisioning state of the topic.
   */
  readonly provisioningState?: TopicProvisioningState;
  /**
   * Endpoint for the topic.
   */
  readonly endpoint?: string;
  /**
   * This determines the format that Event Grid should expect for incoming events published to the topic.
   */
  inputSchema?: InputSchema;
  /**
   * This enables publishing using custom event schemas. An InputSchemaMapping can be specified to map various properties of a source schema to various required properties of the EventGridEvent schema.
   */
  inputSchemaMapping?: InputSchemaMappingUnion;
  /**
   * Metric resource id for the topic.
   */
  readonly metricResourceId?: string;
  /**
   * This determines if traffic is allowed over public network. By default it is enabled.
   * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules" />
   */
  publicNetworkAccess?: PublicNetworkAccess;
  /**
   * This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
   */
  inboundIpRules?: InboundIpRule[];
};

/**
 * Properties of the Topic update
 */
export interface TopicUpdateParameters {
  /**
   * Tags of the resource.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Resource identity information.
   */
  identity?: IdentityInfo;
  /**
   * The Sku pricing tier for the topic.
   */
  sku?: ResourceSku;
  /**
   * This determines if traffic is allowed over public network. By default it is enabled.
   * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicUpdateParameterProperties.InboundIpRules" />
   */
  publicNetworkAccess?: PublicNetworkAccess;
  /**
   * This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
   */
  inboundIpRules?: InboundIpRule[];
}

/**
 * Result of the List Topics operation
 */
export interface TopicsListResult {
  /**
   * A collection of Topics
   */
  value?: Topic[];
  /**
   * A link for the next page of topics
   */
  nextLink?: string;
}

/**
 * Shared access keys of the Topic
 */
export interface TopicSharedAccessKeys {
  /**
   * Shared access key1 for the topic.
   */
  key1?: string;
  /**
   * Shared access key2 for the topic.
   */
  key2?: string;
}

/**
 * Topic regenerate share access key request
 */
export interface TopicRegenerateKeyRequest {
  /**
   * Key name to regenerate key1 or key2
   */
  keyName: string;
}

/**
 * Result of the List Event Types operation
 */
export interface EventTypesListResult {
  /**
   * A collection of event types
   */
  value?: EventType[];
}

/**
 * Event Type for a subject under a topic
 */
export type EventType = Resource & {
  /**
   * Display name of the event type.
   */
  displayName?: string;
  /**
   * Description of the event type.
   */
  description?: string;
  /**
   * Url of the schema for this event type.
   */
  schemaUrl?: string;
  /**
   * IsInDefaultSet flag of the event type.
   */
  isInDefaultSet?: boolean;
};

/**
 * Event grid Extension Topic. This is used for getting Event Grid related metrics for Azure resources.
 */
export type ExtensionTopic = Resource & {
  /**
   * Description of the extension topic.
   */
  description?: string;
  /**
   * System topic resource id which is mapped to the source.
   */
  systemTopic?: string;
};

/**
 * Result of the List Topic Types operation
 */
export interface TopicTypesListResult {
  /**
   * A collection of topic types
   */
  value?: TopicTypeInfo[];
}

/**
 * Properties of a topic type info.
 */
export type TopicTypeInfo = Resource & {
  /**
   * Namespace of the provider of the topic type.
   */
  provider?: string;
  /**
   * Display Name for the topic type.
   */
  displayName?: string;
  /**
   * Description of the topic type.
   */
  description?: string;
  /**
   * Region type of the resource.
   */
  resourceRegionType?: ResourceRegionType;
  /**
   * Provisioning state of the topic type
   */
  provisioningState?: TopicTypeProvisioningState;
  /**
   * List of locations supported by this topic type.
   */
  supportedLocations?: string[];
  /**
   * Source resource format.
   */
  sourceResourceFormat?: string;
};

/**
 * This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
 */
export interface JsonField {
  /**
   * Name of a field in the input event schema that's to be used as the source of a mapping.
   */
  sourceField?: string;
}

/**
 * This is used to express the source of an input schema mapping for a single target field
 * in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
 * 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
 * along with a default value to be used, and at least one of these two properties should be provided.
 */
export interface JsonFieldWithDefault {
  /**
   * Name of a field in the input event schema that's to be used as the source of a mapping.
   */
  sourceField?: string;
  /**
   * The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
   */
  defaultValue?: string;
}

/**
 * This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
 */
export type JsonInputSchemaMapping = InputSchemaMapping & {
  /**
   * The mapping information for the Id property of the Event Grid Event.
   */
  id?: JsonField;
  /**
   * The mapping information for the Topic property of the Event Grid Event.
   */
  topic?: JsonField;
  /**
   * The mapping information for the EventTime property of the Event Grid Event.
   */
  eventTime?: JsonField;
  /**
   * The mapping information for the EventType property of the Event Grid Event.
   */
  eventType?: JsonFieldWithDefault;
  /**
   * The mapping information for the Subject property of the Event Grid Event.
   */
  subject?: JsonFieldWithDefault;
  /**
   * The mapping information for the DataVersion property of the Event Grid Event.
   */
  dataVersion?: JsonFieldWithDefault;
};

/**
 * NumberIn Advanced Filter.
 */
export type NumberInAdvancedFilter = AdvancedFilter & {
  /**
   * The set of filter values.
   */
  values?: number[];
};

/**
 * NumberNotIn Advanced Filter.
 */
export type NumberNotInAdvancedFilter = AdvancedFilter & {
  /**
   * The set of filter values.
   */
  values?: number[];
};

/**
 * NumberLessThan Advanced Filter.
 */
export type NumberLessThanAdvancedFilter = AdvancedFilter & {
  /**
   * The filter value.
   */
  value?: number;
};

/**
 * NumberGreaterThan Advanced Filter.
 */
export type NumberGreaterThanAdvancedFilter = AdvancedFilter & {
  /**
   * The filter value.
   */
  value?: number;
};

/**
 * NumberLessThanOrEquals Advanced Filter.
 */
export type NumberLessThanOrEqualsAdvancedFilter = AdvancedFilter & {
  /**
   * The filter value.
   */
  value?: number;
};

/**
 * NumberGreaterThanOrEquals Advanced Filter.
 */
export type NumberGreaterThanOrEqualsAdvancedFilter = AdvancedFilter & {
  /**
   * The filter value.
   */
  value?: number;
};

/**
 * BoolEquals Advanced Filter.
 */
export type BoolEqualsAdvancedFilter = AdvancedFilter & {
  /**
   * The boolean filter value.
   */
  value?: boolean;
};

/**
 * StringIn Advanced Filter.
 */
export type StringInAdvancedFilter = AdvancedFilter & {
  /**
   * The set of filter values.
   */
  values?: string[];
};

/**
 * StringNotIn Advanced Filter.
 */
export type StringNotInAdvancedFilter = AdvancedFilter & {
  /**
   * The set of filter values.
   */
  values?: string[];
};

/**
 * StringBeginsWith Advanced Filter.
 */
export type StringBeginsWithAdvancedFilter = AdvancedFilter & {
  /**
   * The set of filter values.
   */
  values?: string[];
};

/**
 * StringEndsWith Advanced Filter.
 */
export type StringEndsWithAdvancedFilter = AdvancedFilter & {
  /**
   * The set of filter values.
   */
  values?: string[];
};

/**
 * StringContains Advanced Filter.
 */
export type StringContainsAdvancedFilter = AdvancedFilter & {
  /**
   * The set of filter values.
   */
  values?: string[];
};

/**
 * Information about the storage blob based dead letter destination.
 */
export type StorageBlobDeadLetterDestination = DeadLetterDestination & {
  /**
   * The Azure Resource ID of the storage account that is the destination of the deadletter events
   */
  resourceId?: string;
  /**
   * The name of the Storage blob container that is the destination of the deadletter events
   */
  blobContainerName?: string;
};

/**
 * Information about the webhook destination for an event subscription.
 */
export type WebHookEventSubscriptionDestination = EventSubscriptionDestination & {
  /**
   * The URL that represents the endpoint of the destination of an event subscription.
   */
  endpointUrl?: string;
  /**
   * The base URL that represents the endpoint of the destination of an event subscription.
   */
  readonly endpointBaseUrl?: string;
  /**
   * Maximum number of events per batch.
   */
  maxEventsPerBatch?: number;
  /**
   * Preferred batch size in Kilobytes.
   */
  preferredBatchSizeInKilobytes?: number;
  /**
   * The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
   */
  azureActiveDirectoryTenantId?: string;
  /**
   * The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
   */
  azureActiveDirectoryApplicationIdOrUri?: string;
};

/**
 * Information about the event hub destination for an event subscription.
 */
export type EventHubEventSubscriptionDestination = EventSubscriptionDestination & {
  /**
   * The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
   */
  resourceId?: string;
};

/**
 * Information about the storage queue destination for an event subscription.
 */
export type StorageQueueEventSubscriptionDestination = EventSubscriptionDestination & {
  /**
   * The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
   */
  resourceId?: string;
  /**
   * The name of the Storage queue under a storage account that is the destination of an event subscription.
   */
  queueName?: string;
};

/**
 * Information about the HybridConnection destination for an event subscription.
 */
export type HybridConnectionEventSubscriptionDestination = EventSubscriptionDestination & {
  /**
   * The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
   */
  resourceId?: string;
};

/**
 * Information about the service bus destination for an event subscription.
 */
export type ServiceBusQueueEventSubscriptionDestination = EventSubscriptionDestination & {
  /**
   * The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
   */
  resourceId?: string;
};

/**
 * Information about the service bus topic destination for an event subscription.
 */
export type ServiceBusTopicEventSubscriptionDestination = EventSubscriptionDestination & {
  /**
   * The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
   */
  resourceId?: string;
};

/**
 * Information about the azure function destination for an event subscription.
 */
export type AzureFunctionEventSubscriptionDestination = EventSubscriptionDestination & {
  /**
   * The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
   */
  resourceId?: string;
  /**
   * Maximum number of events per batch.
   */
  maxEventsPerBatch?: number;
  /**
   * Preferred batch size in Kilobytes.
   */
  preferredBatchSizeInKilobytes?: number;
};

/**
 * Result of the List Partner Registration Event Types operation.
 */
export interface PartnerRegistrationEventTypesListResult {
  /**
   * A collection of partner registration event types.
   */
  value?: EventType[];
  /**
   * A link for the next page of partner registration event types.
   */
  nextLink?: string;
}

/**
 * Result of the List Partner Topic Types operation.
 */
export interface PartnerTopicTypesListResult {
  /**
   * A collection of partner topic types.
   */
  value?: PartnerTopicType[];
}

/**
 * Properties of a partner topic type.
 */
export type PartnerTopicType = Resource & {
  /**
   * Official name of the partner.
   */
  partnerName?: string;
  /**
   * Name of the partner topic type. This name should be unique among all partner topic types names.
   */
  topicTypeName?: string;
  /**
   * Display Name for the partner topic type.
   */
  displayName?: string;
  /**
   * Description of the partner topic type.
   */
  description?: string;
  /**
   * URI of the partner website that can be used by Azure customers to setup Event Grid
   * integration on an event source.
   */
  setupUri?: string;
  /**
   * Status of whether the customer has authorized a partner to create partner topics
   * in the customer's subscription.
   */
  authorizationState?: PartnerTopicTypeAuthorizationState;
};
/**
 * Defines values for PersistedConnectionStatus.
 */
export type PersistedConnectionStatus =
  | "Pending"
  | "Approved"
  | "Rejected"
  | "Disconnected";
/**
 * Defines values for ResourceProvisioningState.
 */
export type ResourceProvisioningState =
  | "Creating"
  | "Updating"
  | "Deleting"
  | "Succeeded"
  | "Canceled"
  | "Failed";
/**
 * Defines values for DomainProvisioningState.
 */
export type DomainProvisioningState =
  | "Creating"
  | "Updating"
  | "Deleting"
  | "Succeeded"
  | "Canceled"
  | "Failed";
/**
 * Defines values for InputSchema.
 */
export type InputSchema =
  | "EventGridSchema"
  | "CustomEventSchema"
  | "CloudEventSchemaV1_0";
/**
 * Defines values for PublicNetworkAccess.
 */
export type PublicNetworkAccess = "Enabled" | "Disabled";
/**
 * Defines values for Sku.
 */
export type Sku = "Basic" | "Premium";
/**
 * Defines values for IdentityType.
 */
export type IdentityType =
  | "None"
  | "SystemAssigned"
  | "UserAssigned"
  | "SystemAssigned, UserAssigned";
/**
 * Defines values for DomainTopicProvisioningState.
 */
export type DomainTopicProvisioningState =
  | "Creating"
  | "Updating"
  | "Deleting"
  | "Succeeded"
  | "Canceled"
  | "Failed";
/**
 * Defines values for EventChannelProvisioningState.
 */
export type EventChannelProvisioningState =
  | "Creating"
  | "Updating"
  | "Deleting"
  | "Succeeded"
  | "Canceled"
  | "Failed";
/**
 * Defines values for AdvancedFilterOperatorType.
 */
export type AdvancedFilterOperatorType =
  | "NumberIn"
  | "NumberNotIn"
  | "NumberLessThan"
  | "NumberGreaterThan"
  | "NumberLessThanOrEquals"
  | "NumberGreaterThanOrEquals"
  | "BoolEquals"
  | "StringIn"
  | "StringNotIn"
  | "StringBeginsWith"
  | "StringEndsWith"
  | "StringContains";
/**
 * Defines values for EventSubscriptionProvisioningState.
 */
export type EventSubscriptionProvisioningState =
  | "Creating"
  | "Updating"
  | "Deleting"
  | "Succeeded"
  | "Canceled"
  | "Failed"
  | "AwaitingManualAction";
/**
 * Defines values for EndpointType.
 */
export type EndpointType =
  | "WebHook"
  | "EventHub"
  | "StorageQueue"
  | "HybridConnection"
  | "ServiceBusQueue"
  | "ServiceBusTopic"
  | "AzureFunction";
/**
 * Defines values for EventSubscriptionIdentityType.
 */
export type EventSubscriptionIdentityType = "SystemAssigned" | "UserAssigned";
/**
 * Defines values for EventDeliverySchema.
 */
export type EventDeliverySchema =
  | "EventGridSchema"
  | "CustomInputSchema"
  | "CloudEventSchemaV1_0";
/**
 * Defines values for PartnerNamespaceProvisioningState.
 */
export type PartnerNamespaceProvisioningState =
  | "Creating"
  | "Updating"
  | "Deleting"
  | "Succeeded"
  | "Canceled"
  | "Failed";
/**
 * Defines values for PartnerRegistrationProvisioningState.
 */
export type PartnerRegistrationProvisioningState =
  | "Creating"
  | "Updating"
  | "Deleting"
  | "Succeeded"
  | "Canceled"
  | "Failed";
/**
 * Defines values for PartnerRegistrationVisibilityState.
 */
export type PartnerRegistrationVisibilityState =
  | "Hidden"
  | "PublicPreview"
  | "GenerallyAvailable";
/**
 * Defines values for PartnerTopicProvisioningState.
 */
export type PartnerTopicProvisioningState =
  | "Creating"
  | "Updating"
  | "Deleting"
  | "Succeeded"
  | "Canceled"
  | "Failed";
/**
 * Defines values for PartnerTopicActivationState.
 */
export type PartnerTopicActivationState =
  | "NeverActivated"
  | "Activated"
  | "Deactivated";
/**
 * Defines values for TopicProvisioningState.
 */
export type TopicProvisioningState =
  | "Creating"
  | "Updating"
  | "Deleting"
  | "Succeeded"
  | "Canceled"
  | "Failed";
/**
 * Defines values for ResourceRegionType.
 */
export type ResourceRegionType = "RegionalResource" | "GlobalResource";
/**
 * Defines values for TopicTypeProvisioningState.
 */
export type TopicTypeProvisioningState =
  | "Creating"
  | "Updating"
  | "Deleting"
  | "Succeeded"
  | "Canceled"
  | "Failed";
/**
 * Defines values for PartnerTopicTypeAuthorizationState.
 */
export type PartnerTopicTypeAuthorizationState =
  | "NotApplicable"
  | "NotAuthorized"
  | "Authorized";

/**
 * Contains response data for the get operation.
 */
export type DomainsGetResponse = Domain & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Domain;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DomainsCreateOrUpdateResponse = Domain & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Domain;
  };
};

/**
 * Optional parameters.
 */
export interface DomainsListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type DomainsListBySubscriptionResponse = DomainsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface DomainsListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DomainsListByResourceGroupResponse = DomainsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainsListResult;
  };
};

/**
 * Contains response data for the listSharedAccessKeys operation.
 */
export type DomainsListSharedAccessKeysResponse = DomainSharedAccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainSharedAccessKeys;
  };
};

/**
 * Contains response data for the regenerateKey operation.
 */
export type DomainsRegenerateKeyResponse = DomainSharedAccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainSharedAccessKeys;
  };
};

/**
 * Optional parameters.
 */
export interface DomainsListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type DomainsListBySubscriptionNextResponse = DomainsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface DomainsListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type DomainsListByResourceGroupNextResponse = DomainsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainsListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DomainTopicsGetResponse = DomainTopic & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainTopic;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DomainTopicsCreateOrUpdateResponse = DomainTopic & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainTopic;
  };
};

/**
 * Optional parameters.
 */
export interface DomainTopicsListByDomainOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByDomain operation.
 */
export type DomainTopicsListByDomainResponse = DomainTopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainTopicsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface DomainTopicsListByDomainNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByDomainNext operation.
 */
export type DomainTopicsListByDomainNextResponse = DomainTopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainTopicsListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type EventChannelsGetResponse = EventChannel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventChannel;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type EventChannelsCreateOrUpdateResponse = EventChannel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventChannel;
  };
};

/**
 * Optional parameters.
 */
export interface EventChannelsListByPartnerNamespaceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByPartnerNamespace operation.
 */
export type EventChannelsListByPartnerNamespaceResponse = EventChannelsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventChannelsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventChannelsListByPartnerNamespaceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByPartnerNamespaceNext operation.
 */
export type EventChannelsListByPartnerNamespaceNextResponse = EventChannelsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventChannelsListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type EventSubscriptionsGetResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscription;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type EventSubscriptionsCreateOrUpdateResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscription;
  };
};

/**
 * Contains response data for the update operation.
 */
export type EventSubscriptionsUpdateResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscription;
  };
};

/**
 * Contains response data for the getFullUrl operation.
 */
export type EventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionFullUrl;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListGlobalBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listGlobalBySubscription operation.
 */
export type EventSubscriptionsListGlobalBySubscriptionResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listGlobalBySubscriptionForTopicType operation.
 */
export type EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListGlobalByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listGlobalByResourceGroup operation.
 */
export type EventSubscriptionsListGlobalByResourceGroupResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listGlobalByResourceGroupForTopicType operation.
 */
export type EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListRegionalBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listRegionalBySubscription operation.
 */
export type EventSubscriptionsListRegionalBySubscriptionResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListRegionalByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listRegionalByResourceGroup operation.
 */
export type EventSubscriptionsListRegionalByResourceGroupResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listRegionalBySubscriptionForTopicType operation.
 */
export type EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listRegionalByResourceGroupForTopicType operation.
 */
export type EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListByResourceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResource operation.
 */
export type EventSubscriptionsListByResourceResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListByDomainTopicOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByDomainTopic operation.
 */
export type EventSubscriptionsListByDomainTopicResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListGlobalBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listGlobalBySubscriptionNext operation.
 */
export type EventSubscriptionsListGlobalBySubscriptionNextResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listGlobalBySubscriptionForTopicTypeNext operation.
 */
export type EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListGlobalByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listGlobalByResourceGroupNext operation.
 */
export type EventSubscriptionsListGlobalByResourceGroupNextResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listGlobalByResourceGroupForTopicTypeNext operation.
 */
export type EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListRegionalBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listRegionalBySubscriptionNext operation.
 */
export type EventSubscriptionsListRegionalBySubscriptionNextResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListRegionalByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listRegionalByResourceGroupNext operation.
 */
export type EventSubscriptionsListRegionalByResourceGroupNextResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listRegionalBySubscriptionForTopicTypeNext operation.
 */
export type EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listRegionalByResourceGroupForTopicTypeNext operation.
 */
export type EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListByResourceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceNext operation.
 */
export type EventSubscriptionsListByResourceNextResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventSubscriptionsListByDomainTopicNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByDomainTopicNext operation.
 */
export type EventSubscriptionsListByDomainTopicNextResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SystemTopicEventSubscriptionsGetResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscription;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SystemTopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscription;
  };
};

/**
 * Contains response data for the update operation.
 */
export type SystemTopicEventSubscriptionsUpdateResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscription;
  };
};

/**
 * Contains response data for the getFullUrl operation.
 */
export type SystemTopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionFullUrl;
  };
};

/**
 * Optional parameters.
 */
export interface SystemTopicEventSubscriptionsListBySystemTopicOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySystemTopic operation.
 */
export type SystemTopicEventSubscriptionsListBySystemTopicResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface SystemTopicEventSubscriptionsListBySystemTopicNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySystemTopicNext operation.
 */
export type SystemTopicEventSubscriptionsListBySystemTopicNextResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PartnerTopicEventSubscriptionsGetResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscription;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PartnerTopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscription;
  };
};

/**
 * Contains response data for the update operation.
 */
export type PartnerTopicEventSubscriptionsUpdateResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscription;
  };
};

/**
 * Contains response data for the getFullUrl operation.
 */
export type PartnerTopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionFullUrl;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerTopicEventSubscriptionsListByPartnerTopicOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByPartnerTopic operation.
 */
export type PartnerTopicEventSubscriptionsListByPartnerTopicResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerTopicEventSubscriptionsListByPartnerTopicNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByPartnerTopicNext operation.
 */
export type PartnerTopicEventSubscriptionsListByPartnerTopicNextResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventSubscriptionsListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationsListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PartnerNamespacesGetResponse = PartnerNamespace & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerNamespace;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PartnerNamespacesCreateOrUpdateResponse = PartnerNamespace & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerNamespace;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerNamespacesListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type PartnerNamespacesListBySubscriptionResponse = PartnerNamespacesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerNamespacesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerNamespacesListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type PartnerNamespacesListByResourceGroupResponse = PartnerNamespacesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerNamespacesListResult;
  };
};

/**
 * Contains response data for the listSharedAccessKeys operation.
 */
export type PartnerNamespacesListSharedAccessKeysResponse = PartnerNamespaceSharedAccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerNamespaceSharedAccessKeys;
  };
};

/**
 * Contains response data for the regenerateKey operation.
 */
export type PartnerNamespacesRegenerateKeyResponse = PartnerNamespaceSharedAccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerNamespaceSharedAccessKeys;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerNamespacesListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type PartnerNamespacesListBySubscriptionNextResponse = PartnerNamespacesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerNamespacesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerNamespacesListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type PartnerNamespacesListByResourceGroupNextResponse = PartnerNamespacesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerNamespacesListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PartnerRegistrationsGetResponse = PartnerRegistration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerRegistration;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PartnerRegistrationsCreateOrUpdateResponse = PartnerRegistration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerRegistration;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerRegistrationsListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type PartnerRegistrationsListBySubscriptionResponse = PartnerRegistrationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerRegistrationsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerRegistrationsListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type PartnerRegistrationsListByResourceGroupResponse = PartnerRegistrationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerRegistrationsListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PartnerRegistrationsListResponse = PartnerRegistrationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerRegistrationsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerRegistrationsListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type PartnerRegistrationsListBySubscriptionNextResponse = PartnerRegistrationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerRegistrationsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerRegistrationsListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type PartnerRegistrationsListByResourceGroupNextResponse = PartnerRegistrationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerRegistrationsListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PartnerTopicsGetResponse = PartnerTopic & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerTopic;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerTopicsListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type PartnerTopicsListBySubscriptionResponse = PartnerTopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerTopicsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerTopicsListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type PartnerTopicsListByResourceGroupResponse = PartnerTopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerTopicsListResult;
  };
};

/**
 * Contains response data for the activate operation.
 */
export type PartnerTopicsActivateResponse = PartnerTopic & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerTopic;
  };
};

/**
 * Contains response data for the deactivate operation.
 */
export type PartnerTopicsDeactivateResponse = PartnerTopic & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerTopic;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerTopicsListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type PartnerTopicsListBySubscriptionNextResponse = PartnerTopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerTopicsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PartnerTopicsListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type PartnerTopicsListByResourceGroupNextResponse = PartnerTopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartnerTopicsListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnection;
  };
};

/**
 * Contains response data for the update operation.
 */
export type PrivateEndpointConnectionsUpdateResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnection;
  };
};

/**
 * Optional parameters.
 */
export interface PrivateEndpointConnectionsListByResourceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResource operation.
 */
export type PrivateEndpointConnectionsListByResourceResponse = PrivateEndpointConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnectionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PrivateEndpointConnectionsListByResourceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceNext operation.
 */
export type PrivateEndpointConnectionsListByResourceNextResponse = PrivateEndpointConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnectionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PrivateLinkResourcesGetResponse = PrivateLinkResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkResource;
  };
};

/**
 * Optional parameters.
 */
export interface PrivateLinkResourcesListByResourceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResource operation.
 */
export type PrivateLinkResourcesListByResourceResponse = PrivateLinkResourcesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkResourcesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PrivateLinkResourcesListByResourceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceNext operation.
 */
export type PrivateLinkResourcesListByResourceNextResponse = PrivateLinkResourcesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkResourcesListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SystemTopicsGetResponse = SystemTopic & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SystemTopic;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SystemTopicsCreateOrUpdateResponse = SystemTopic & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SystemTopic;
  };
};

/**
 * Contains response data for the update operation.
 */
export type SystemTopicsUpdateResponse = SystemTopic & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SystemTopic;
  };
};

/**
 * Optional parameters.
 */
export interface SystemTopicsListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type SystemTopicsListBySubscriptionResponse = SystemTopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SystemTopicsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface SystemTopicsListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type SystemTopicsListByResourceGroupResponse = SystemTopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SystemTopicsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface SystemTopicsListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type SystemTopicsListBySubscriptionNextResponse = SystemTopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SystemTopicsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface SystemTopicsListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type SystemTopicsListByResourceGroupNextResponse = SystemTopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SystemTopicsListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type TopicsGetResponse = Topic & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Topic;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TopicsCreateOrUpdateResponse = Topic & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Topic;
  };
};

/**
 * Optional parameters.
 */
export interface TopicsListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type TopicsListBySubscriptionResponse = TopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TopicsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface TopicsListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type TopicsListByResourceGroupResponse = TopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TopicsListResult;
  };
};

/**
 * Contains response data for the listSharedAccessKeys operation.
 */
export type TopicsListSharedAccessKeysResponse = TopicSharedAccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TopicSharedAccessKeys;
  };
};

/**
 * Contains response data for the regenerateKey operation.
 */
export type TopicsRegenerateKeyResponse = TopicSharedAccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TopicSharedAccessKeys;
  };
};

/**
 * Contains response data for the listEventTypes operation.
 */
export type TopicsListEventTypesResponse = EventTypesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventTypesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface TopicsListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type TopicsListBySubscriptionNextResponse = TopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TopicsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface TopicsListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
   */
  filter?: string;
  /**
   * The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type TopicsListByResourceGroupNextResponse = TopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TopicsListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ExtensionTopicsGetResponse = ExtensionTopic & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExtensionTopic;
  };
};

/**
 * Contains response data for the list operation.
 */
export type TopicTypesListResponse = TopicTypesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TopicTypesListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type TopicTypesGetResponse = TopicTypeInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TopicTypeInfo;
  };
};

/**
 * Contains response data for the listEventTypes operation.
 */
export type TopicTypesListEventTypesResponse = EventTypesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventTypesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventGridManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
