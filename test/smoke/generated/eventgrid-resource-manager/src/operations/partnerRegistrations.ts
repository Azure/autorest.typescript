/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClient } from "../eventGridManagementClient";
import {
  PartnerRegistrationsGetResponse,
  PartnerRegistration,
  PartnerRegistrationsCreateOrUpdateResponse,
  PartnerRegistrationUpdateParameters,
  PartnerRegistrationsListBySubscriptionOptionalParams,
  PartnerRegistrationsListBySubscriptionResponse,
  PartnerRegistrationsListByResourceGroupOptionalParams,
  PartnerRegistrationsListByResourceGroupResponse,
  PartnerRegistrationsListResponse,
  PartnerRegistrationsListBySubscriptionNextOptionalParams,
  PartnerRegistrationsListBySubscriptionNextResponse,
  PartnerRegistrationsListByResourceGroupNextOptionalParams,
  PartnerRegistrationsListByResourceGroupNextResponse
} from "../models";

/**
 * Class representing a PartnerRegistrations.
 */
export class PartnerRegistrations {
  private readonly client: EventGridManagementClient;

  /**
   * Initialize a new instance of the class PartnerRegistrations class.
   * @param client Reference to the service client
   */
  constructor(client: EventGridManagementClient) {
    this.client = client;
  }

  /**
   * Gets a partner registration with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    partnerRegistrationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PartnerRegistrationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerRegistrationName, options: operationOptions },
      getOperationSpec
    ) as Promise<PartnerRegistrationsGetResponse>;
  }

  /**
   * Creates a new partner registration with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param partnerRegistrationInfo PartnerRegistration information.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    partnerRegistrationName: string,
    partnerRegistrationInfo: PartnerRegistration,
    options?: coreHttp.OperationOptions
  ): Promise<PartnerRegistrationsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerRegistrationName,
        partnerRegistrationInfo,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<PartnerRegistrationsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a partner registration with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    partnerRegistrationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerRegistrationName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Updates a partner registration with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param partnerRegistrationUpdateParameters Partner registration update information.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    partnerRegistrationName: string,
    partnerRegistrationUpdateParameters: PartnerRegistrationUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerRegistrationName,
        partnerRegistrationUpdateParameters,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * List all the partner registrations under an Azure subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: PartnerRegistrationsListBySubscriptionOptionalParams
  ): Promise<PartnerRegistrationsListBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listBySubscriptionOperationSpec
    ) as Promise<PartnerRegistrationsListBySubscriptionResponse>;
  }

  /**
   * List all the partner registrations under a resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: PartnerRegistrationsListByResourceGroupOptionalParams
  ): Promise<PartnerRegistrationsListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<PartnerRegistrationsListByResourceGroupResponse>;
  }

  /**
   * List all partners registrations.
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<PartnerRegistrationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<PartnerRegistrationsListResponse>;
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  listBySubscriptionNext(
    nextLink: string,
    options?: PartnerRegistrationsListBySubscriptionNextOptionalParams
  ): Promise<PartnerRegistrationsListBySubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listBySubscriptionNextOperationSpec
    ) as Promise<PartnerRegistrationsListBySubscriptionNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PartnerRegistrationsListByResourceGroupNextOptionalParams
  ): Promise<PartnerRegistrationsListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<PartnerRegistrationsListByResourceGroupNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistration
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerRegistrationName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistration
    },
    default: {}
  },
  requestBody: Parameters.partnerRegistrationInfo,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerRegistrationName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}",
  httpMethod: "DELETE",
  responses: { 200: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerRegistrationName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}",
  httpMethod: "PATCH",
  responses: { 200: {}, default: {} },
  requestBody: Parameters.partnerRegistrationUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerRegistrationName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerRegistrations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistrationsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistrationsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.EventGrid/partnerRegistrations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistrationsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  serializer
};
const listBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistrationsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistrationsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink1
  ],
  serializer
};
