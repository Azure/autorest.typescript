/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  EventChannelsGetResponse,
  EventChannel,
  EventChannelsCreateOrUpdateResponse,
  EventChannelsListByPartnerNamespaceOptionalParams,
  EventChannelsListByPartnerNamespaceResponse,
  EventChannelsListByPartnerNamespaceNextOptionalParams,
  EventChannelsListByPartnerNamespaceNextResponse
} from "../models";

/**
 * Class representing a EventChannels.
 */
export class EventChannels {
  private readonly client: EventGridManagementClient;

  /**
   * Initialize a new instance of the class EventChannels class.
   * @param client Reference to the service client
   */
  constructor(client: EventGridManagementClient) {
    this.client = client;
  }

  /**
   * Get properties of an event channel.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param eventChannelName Name of the event channel.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    partnerNamespaceName: string,
    eventChannelName: string,
    options?: coreHttp.OperationOptions
  ): Promise<EventChannelsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerNamespaceName,
        eventChannelName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<EventChannelsGetResponse>;
  }

  /**
   * Asynchronously creates a new event channel with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param eventChannelName Name of the event channel.
   * @param eventChannelInfo EventChannel information.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    partnerNamespaceName: string,
    eventChannelName: string,
    eventChannelInfo: EventChannel,
    options?: coreHttp.OperationOptions
  ): Promise<EventChannelsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerNamespaceName,
        eventChannelName,
        eventChannelInfo,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<EventChannelsCreateOrUpdateResponse>;
  }

  /**
   * Delete existing event channel.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param eventChannelName Name of the event channel.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    partnerNamespaceName: string,
    eventChannelName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      partnerNamespaceName,
      eventChannelName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * List all the event channels in a partner namespace.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param options The options parameters.
   */
  listByPartnerNamespace(
    resourceGroupName: string,
    partnerNamespaceName: string,
    options?: EventChannelsListByPartnerNamespaceOptionalParams
  ): Promise<EventChannelsListByPartnerNamespaceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerNamespaceName, options: operationOptions },
      listByPartnerNamespaceOperationSpec
    ) as Promise<EventChannelsListByPartnerNamespaceResponse>;
  }

  /**
   * ListByPartnerNamespaceNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param nextLink The nextLink from the previous successful call to the ListByPartnerNamespace method.
   * @param options The options parameters.
   */
  listByPartnerNamespaceNext(
    resourceGroupName: string,
    partnerNamespaceName: string,
    nextLink: string,
    options?: EventChannelsListByPartnerNamespaceNextOptionalParams
  ): Promise<EventChannelsListByPartnerNamespaceNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerNamespaceName,
        nextLink,
        options: operationOptions
      },
      listByPartnerNamespaceNextOperationSpec
    ) as Promise<EventChannelsListByPartnerNamespaceNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventChannel
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName,
    Parameters.eventChannelName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.EventChannel
    },
    default: {}
  },
  requestBody: Parameters.eventChannelInfo,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName,
    Parameters.eventChannelName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName,
    Parameters.eventChannelName
  ],
  serializer
};
const listByPartnerNamespaceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventChannelsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName
  ],
  serializer
};
const listByPartnerNamespaceNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventChannelsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName,
    Parameters.nextLink3
  ],
  serializer
};
