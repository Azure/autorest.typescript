/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClient } from "../eventGridManagementClient";
import {
  TopicTypesListResponse,
  TopicTypesGetResponse,
  TopicTypesListEventTypesResponse
} from "../models";

/**
 * Class representing a TopicTypes.
 */
export class TopicTypes {
  private readonly client: EventGridManagementClient;

  /**
   * Initialize a new instance of the class TopicTypes class.
   * @param client Reference to the service client
   */
  constructor(client: EventGridManagementClient) {
    this.client = client;
  }

  /**
   * List all registered topic types.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<TopicTypesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<TopicTypesListResponse>;
  }

  /**
   * Get information about a topic type.
   * @param topicTypeName Name of the topic type.
   * @param options The options parameters.
   */
  get(
    topicTypeName: string,
    options?: coreHttp.OperationOptions
  ): Promise<TopicTypesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { topicTypeName, options: operationOptions },
      getOperationSpec
    ) as Promise<TopicTypesGetResponse>;
  }

  /**
   * List event types for a topic type.
   * @param topicTypeName Name of the topic type.
   * @param options The options parameters.
   */
  listEventTypes(
    topicTypeName: string,
    options?: coreHttp.OperationOptions
  ): Promise<TopicTypesListEventTypesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { topicTypeName, options: operationOptions },
      listEventTypesOperationSpec
    ) as Promise<TopicTypesListEventTypesResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.EventGrid/topicTypes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TopicTypesListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TopicTypeInfo
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.topicTypeName],
  serializer
};
const listEventTypesOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventTypes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventTypesListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.topicTypeName],
  serializer
};
