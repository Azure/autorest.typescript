/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  SystemTopicEventSubscriptionsGetResponse,
  EventSubscription,
  SystemTopicEventSubscriptionsCreateOrUpdateResponse,
  EventSubscriptionUpdateParameters,
  SystemTopicEventSubscriptionsUpdateResponse,
  SystemTopicEventSubscriptionsGetFullUrlResponse,
  SystemTopicEventSubscriptionsListBySystemTopicOptionalParams,
  SystemTopicEventSubscriptionsListBySystemTopicResponse,
  SystemTopicEventSubscriptionsListBySystemTopicNextOptionalParams,
  SystemTopicEventSubscriptionsListBySystemTopicNextResponse
} from "../models";

/**
 * Class representing a SystemTopicEventSubscriptions.
 */
export class SystemTopicEventSubscriptions {
  private readonly client: EventGridManagementClient;

  /**
   * Initialize a new instance of the class SystemTopicEventSubscriptions class.
   * @param client Reference to the service client
   */
  constructor(client: EventGridManagementClient) {
    this.client = client;
  }

  /**
   * Get an event subscription.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    systemTopicName: string,
    eventSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SystemTopicEventSubscriptionsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        systemTopicName,
        eventSubscriptionName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<SystemTopicEventSubscriptionsGetResponse>;
  }

  /**
   * Asynchronously creates or updates an event subscription with the specified parameters. Existing
   * event subscriptions will be updated with this API.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
   *                              information.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    eventSubscriptionInfo: EventSubscription,
    systemTopicName: string,
    eventSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<SystemTopicEventSubscriptionsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      eventSubscriptionInfo,
      systemTopicName,
      eventSubscriptionName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SystemTopicEventSubscriptionsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Delete an event subscription of a system topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    systemTopicName: string,
    eventSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      systemTopicName,
      eventSubscriptionName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Update event subscription of a system topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param eventSubscriptionUpdateParameters Updated event subscription information.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param options The options parameters.
   */
  async update(
    resourceGroupName: string,
    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,
    systemTopicName: string,
    eventSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<SystemTopicEventSubscriptionsUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      eventSubscriptionUpdateParameters,
      systemTopicName,
      eventSubscriptionName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SystemTopicEventSubscriptionsUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Get the full endpoint URL for an event subscription of a system topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param options The options parameters.
   */
  getFullUrl(
    resourceGroupName: string,
    systemTopicName: string,
    eventSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SystemTopicEventSubscriptionsGetFullUrlResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        systemTopicName,
        eventSubscriptionName,
        options: operationOptions
      },
      getFullUrlOperationSpec
    ) as Promise<SystemTopicEventSubscriptionsGetFullUrlResponse>;
  }

  /**
   * List event subscriptions that belong to a specific system topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param options The options parameters.
   */
  listBySystemTopic(
    resourceGroupName: string,
    systemTopicName: string,
    options?: SystemTopicEventSubscriptionsListBySystemTopicOptionalParams
  ): Promise<SystemTopicEventSubscriptionsListBySystemTopicResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, systemTopicName, options: operationOptions },
      listBySystemTopicOperationSpec
    ) as Promise<SystemTopicEventSubscriptionsListBySystemTopicResponse>;
  }

  /**
   * ListBySystemTopicNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param nextLink The nextLink from the previous successful call to the ListBySystemTopic method.
   * @param options The options parameters.
   */
  listBySystemTopicNext(
    resourceGroupName: string,
    systemTopicName: string,
    nextLink: string,
    options?: SystemTopicEventSubscriptionsListBySystemTopicNextOptionalParams
  ): Promise<SystemTopicEventSubscriptionsListBySystemTopicNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        systemTopicName,
        nextLink,
        options: operationOptions
      },
      listBySystemTopicNextOperationSpec
    ) as Promise<SystemTopicEventSubscriptionsListBySystemTopicNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName,
    Parameters.eventSubscriptionName3
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscription
    },
    201: {
      bodyMapper: Mappers.EventSubscription
    },
    202: {
      bodyMapper: Mappers.EventSubscription
    },
    204: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {}
  },
  requestBody: Parameters.eventSubscriptionInfo,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName,
    Parameters.eventSubscriptionName3
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName,
    Parameters.eventSubscriptionName3
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscription
    },
    201: {
      bodyMapper: Mappers.EventSubscription
    },
    202: {
      bodyMapper: Mappers.EventSubscription
    },
    204: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {}
  },
  requestBody: Parameters.eventSubscriptionUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName,
    Parameters.eventSubscriptionName3
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getFullUrlOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}/getFullUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionFullUrl
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName,
    Parameters.eventSubscriptionName3
  ],
  serializer
};
const listBySystemTopicOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName
  ],
  serializer
};
const listBySystemTopicNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName,
    Parameters.nextLink14
  ],
  serializer
};
