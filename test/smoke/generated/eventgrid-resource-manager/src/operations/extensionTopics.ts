/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { ExtensionTopicsGetResponse } from "../models";

/**
 * Class representing a ExtensionTopics.
 */
export class ExtensionTopics {
  private readonly client: EventGridManagementClient;

  /**
   * Initialize a new instance of the class ExtensionTopics class.
   * @param client Reference to the service client
   */
  constructor(client: EventGridManagementClient) {
    this.client = client;
  }

  /**
   * Get the properties of an extension topic.
   * @param scope The identifier of the resource to which extension topic is queried. The scope can be a
   *              subscription, or a resource group, or a top level resource belonging to a resource provider
   *              namespace. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for Azure resource.
   * @param options The options parameters.
   */
  get(
    scope: string,
    options?: coreHttp.OperationOptions
  ): Promise<ExtensionTopicsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, options: operationOptions },
      getOperationSpec
    ) as Promise<ExtensionTopicsGetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.EventGrid/extensionTopics/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionTopic
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope3],
  serializer
};
