/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  EventSubscriptionsGetResponse,
  EventSubscription,
  EventSubscriptionsCreateOrUpdateResponse,
  EventSubscriptionUpdateParameters,
  EventSubscriptionsUpdateResponse,
  EventSubscriptionsGetFullUrlResponse,
  EventSubscriptionsListGlobalBySubscriptionOptionalParams,
  EventSubscriptionsListGlobalBySubscriptionResponse,
  EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams,
  EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse,
  EventSubscriptionsListGlobalByResourceGroupOptionalParams,
  EventSubscriptionsListGlobalByResourceGroupResponse,
  EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams,
  EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse,
  EventSubscriptionsListRegionalBySubscriptionOptionalParams,
  EventSubscriptionsListRegionalBySubscriptionResponse,
  EventSubscriptionsListRegionalByResourceGroupOptionalParams,
  EventSubscriptionsListRegionalByResourceGroupResponse,
  EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams,
  EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse,
  EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams,
  EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse,
  EventSubscriptionsListByResourceOptionalParams,
  EventSubscriptionsListByResourceResponse,
  EventSubscriptionsListByDomainTopicOptionalParams,
  EventSubscriptionsListByDomainTopicResponse,
  EventSubscriptionsListGlobalBySubscriptionNextOptionalParams,
  EventSubscriptionsListGlobalBySubscriptionNextResponse,
  EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextOptionalParams,
  EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse,
  EventSubscriptionsListGlobalByResourceGroupNextOptionalParams,
  EventSubscriptionsListGlobalByResourceGroupNextResponse,
  EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextOptionalParams,
  EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse,
  EventSubscriptionsListRegionalBySubscriptionNextOptionalParams,
  EventSubscriptionsListRegionalBySubscriptionNextResponse,
  EventSubscriptionsListRegionalByResourceGroupNextOptionalParams,
  EventSubscriptionsListRegionalByResourceGroupNextResponse,
  EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextOptionalParams,
  EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse,
  EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextOptionalParams,
  EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse,
  EventSubscriptionsListByResourceNextOptionalParams,
  EventSubscriptionsListByResourceNextResponse,
  EventSubscriptionsListByDomainTopicNextOptionalParams,
  EventSubscriptionsListByDomainTopicNextResponse
} from "../models";

/**
 * Class representing a EventSubscriptions.
 */
export class EventSubscriptions {
  private readonly client: EventGridManagementClient;

  /**
   * Initialize a new instance of the class EventSubscriptions class.
   * @param client Reference to the service client
   */
  constructor(client: EventGridManagementClient) {
    this.client = client;
  }

  /**
   * Get properties of an event subscription.
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
   *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param options The options parameters.
   */
  get(
    scope: string,
    eventSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<EventSubscriptionsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, eventSubscriptionName, options: operationOptions },
      getOperationSpec
    ) as Promise<EventSubscriptionsGetResponse>;
  }

  /**
   * Asynchronously creates a new event subscription or updates an existing event subscription based on
   * the specified scope.
   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
   *                              information.
   * @param scope The identifier of the resource to which the event subscription needs to be created or
   *              updated. The scope can be a subscription, or a resource group, or a top level resource belonging to
   *              a resource provider namespace, or an EventGrid topic. For example, use
   *              '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription. Event subscription names must be
   *                              between 3 and 64 characters in length and should use alphanumeric letters only.
   * @param options The options parameters.
   */
  async createOrUpdate(
    eventSubscriptionInfo: EventSubscription,
    scope: string,
    eventSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<EventSubscriptionsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      eventSubscriptionInfo,
      scope,
      eventSubscriptionName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        EventSubscriptionsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Delete an existing event subscription.
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
   *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param options The options parameters.
   */
  async delete(
    scope: string,
    eventSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      scope,
      eventSubscriptionName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Asynchronously updates an existing event subscription.
   * @param eventSubscriptionUpdateParameters Updated event subscription information.
   * @param scope The scope of existing event subscription. The scope can be a subscription, or a
   *              resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   *              topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription to be updated.
   * @param options The options parameters.
   */
  async update(
    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,
    scope: string,
    eventSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<EventSubscriptionsUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      eventSubscriptionUpdateParameters,
      scope,
      eventSubscriptionName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        EventSubscriptionsUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Get the full endpoint URL for an event subscription.
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
   *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param options The options parameters.
   */
  getFullUrl(
    scope: string,
    eventSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<EventSubscriptionsGetFullUrlResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, eventSubscriptionName, options: operationOptions },
      getFullUrlOperationSpec
    ) as Promise<EventSubscriptionsGetFullUrlResponse>;
  }

  /**
   * List all aggregated global event subscriptions under a specific Azure subscription.
   * @param options The options parameters.
   */
  listGlobalBySubscription(
    options?: EventSubscriptionsListGlobalBySubscriptionOptionalParams
  ): Promise<EventSubscriptionsListGlobalBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listGlobalBySubscriptionOperationSpec
    ) as Promise<EventSubscriptionsListGlobalBySubscriptionResponse>;
  }

  /**
   * List all global event subscriptions under an Azure subscription for a topic type.
   * @param topicTypeName Name of the topic type.
   * @param options The options parameters.
   */
  listGlobalBySubscriptionForTopicType(
    topicTypeName: string,
    options?: EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams
  ): Promise<EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { topicTypeName, options: operationOptions },
      listGlobalBySubscriptionForTopicTypeOperationSpec
    ) as Promise<
      EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse
    >;
  }

  /**
   * List all global event subscriptions under a specific Azure subscription and resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  listGlobalByResourceGroup(
    resourceGroupName: string,
    options?: EventSubscriptionsListGlobalByResourceGroupOptionalParams
  ): Promise<EventSubscriptionsListGlobalByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listGlobalByResourceGroupOperationSpec
    ) as Promise<EventSubscriptionsListGlobalByResourceGroupResponse>;
  }

  /**
   * List all global event subscriptions under a resource group for a specific topic type.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicTypeName Name of the topic type.
   * @param options The options parameters.
   */
  listGlobalByResourceGroupForTopicType(
    resourceGroupName: string,
    topicTypeName: string,
    options?: EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams
  ): Promise<EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, topicTypeName, options: operationOptions },
      listGlobalByResourceGroupForTopicTypeOperationSpec
    ) as Promise<
      EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse
    >;
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription.
   * @param location Name of the location.
   * @param options The options parameters.
   */
  listRegionalBySubscription(
    location: string,
    options?: EventSubscriptionsListRegionalBySubscriptionOptionalParams
  ): Promise<EventSubscriptionsListRegionalBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, options: operationOptions },
      listRegionalBySubscriptionOperationSpec
    ) as Promise<EventSubscriptionsListRegionalBySubscriptionResponse>;
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and
   * resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param options The options parameters.
   */
  listRegionalByResourceGroup(
    resourceGroupName: string,
    location: string,
    options?: EventSubscriptionsListRegionalByResourceGroupOptionalParams
  ): Promise<EventSubscriptionsListRegionalByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, location, options: operationOptions },
      listRegionalByResourceGroupOperationSpec
    ) as Promise<EventSubscriptionsListRegionalByResourceGroupResponse>;
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and topic
   * type.
   * @param topicTypeName Name of the topic type.
   * @param location Name of the location.
   * @param options The options parameters.
   */
  listRegionalBySubscriptionForTopicType(
    topicTypeName: string,
    location: string,
    options?: EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams
  ): Promise<EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { topicTypeName, location, options: operationOptions },
      listRegionalBySubscriptionForTopicTypeOperationSpec
    ) as Promise<
      EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse
    >;
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and
   * resource group and topic type.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicTypeName Name of the topic type.
   * @param location Name of the location.
   * @param options The options parameters.
   */
  listRegionalByResourceGroupForTopicType(
    resourceGroupName: string,
    topicTypeName: string,
    location: string,
    options?: EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams
  ): Promise<
    EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, topicTypeName, location, options: operationOptions },
      listRegionalByResourceGroupForTopicTypeOperationSpec
    ) as Promise<
      EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse
    >;
  }

  /**
   * List all event subscriptions that have been created for a specific topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param providerNamespace Namespace of the provider of the topic.
   * @param resourceTypeName Name of the resource type.
   * @param resourceName Name of the resource.
   * @param options The options parameters.
   */
  listByResource(
    resourceGroupName: string,
    providerNamespace: string,
    resourceTypeName: string,
    resourceName: string,
    options?: EventSubscriptionsListByResourceOptionalParams
  ): Promise<EventSubscriptionsListByResourceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerNamespace,
        resourceTypeName,
        resourceName,
        options: operationOptions
      },
      listByResourceOperationSpec
    ) as Promise<EventSubscriptionsListByResourceResponse>;
  }

  /**
   * List all event subscriptions that have been created for a specific domain topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the top level domain.
   * @param topicName Name of the domain topic.
   * @param options The options parameters.
   */
  listByDomainTopic(
    resourceGroupName: string,
    domainName: string,
    topicName: string,
    options?: EventSubscriptionsListByDomainTopicOptionalParams
  ): Promise<EventSubscriptionsListByDomainTopicResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, domainName, topicName, options: operationOptions },
      listByDomainTopicOperationSpec
    ) as Promise<EventSubscriptionsListByDomainTopicResponse>;
  }

  /**
   * ListGlobalBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListGlobalBySubscription
   *                 method.
   * @param options The options parameters.
   */
  listGlobalBySubscriptionNext(
    nextLink: string,
    options?: EventSubscriptionsListGlobalBySubscriptionNextOptionalParams
  ): Promise<EventSubscriptionsListGlobalBySubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listGlobalBySubscriptionNextOperationSpec
    ) as Promise<EventSubscriptionsListGlobalBySubscriptionNextResponse>;
  }

  /**
   * ListGlobalBySubscriptionForTopicTypeNext
   * @param topicTypeName Name of the topic type.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListGlobalBySubscriptionForTopicType method.
   * @param options The options parameters.
   */
  listGlobalBySubscriptionForTopicTypeNext(
    topicTypeName: string,
    nextLink: string,
    options?: EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextOptionalParams
  ): Promise<
    EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { topicTypeName, nextLink, options: operationOptions },
      listGlobalBySubscriptionForTopicTypeNextOperationSpec
    ) as Promise<
      EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse
    >;
  }

  /**
   * ListGlobalByResourceGroupNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param nextLink The nextLink from the previous successful call to the ListGlobalByResourceGroup
   *                 method.
   * @param options The options parameters.
   */
  listGlobalByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: EventSubscriptionsListGlobalByResourceGroupNextOptionalParams
  ): Promise<EventSubscriptionsListGlobalByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listGlobalByResourceGroupNextOperationSpec
    ) as Promise<EventSubscriptionsListGlobalByResourceGroupNextResponse>;
  }

  /**
   * ListGlobalByResourceGroupForTopicTypeNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicTypeName Name of the topic type.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListGlobalByResourceGroupForTopicType method.
   * @param options The options parameters.
   */
  listGlobalByResourceGroupForTopicTypeNext(
    resourceGroupName: string,
    topicTypeName: string,
    nextLink: string,
    options?: EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextOptionalParams
  ): Promise<
    EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, topicTypeName, nextLink, options: operationOptions },
      listGlobalByResourceGroupForTopicTypeNextOperationSpec
    ) as Promise<
      EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse
    >;
  }

  /**
   * ListRegionalBySubscriptionNext
   * @param location Name of the location.
   * @param nextLink The nextLink from the previous successful call to the ListRegionalBySubscription
   *                 method.
   * @param options The options parameters.
   */
  listRegionalBySubscriptionNext(
    location: string,
    nextLink: string,
    options?: EventSubscriptionsListRegionalBySubscriptionNextOptionalParams
  ): Promise<EventSubscriptionsListRegionalBySubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, nextLink, options: operationOptions },
      listRegionalBySubscriptionNextOperationSpec
    ) as Promise<EventSubscriptionsListRegionalBySubscriptionNextResponse>;
  }

  /**
   * ListRegionalByResourceGroupNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param nextLink The nextLink from the previous successful call to the ListRegionalByResourceGroup
   *                 method.
   * @param options The options parameters.
   */
  listRegionalByResourceGroupNext(
    resourceGroupName: string,
    location: string,
    nextLink: string,
    options?: EventSubscriptionsListRegionalByResourceGroupNextOptionalParams
  ): Promise<EventSubscriptionsListRegionalByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, location, nextLink, options: operationOptions },
      listRegionalByResourceGroupNextOperationSpec
    ) as Promise<EventSubscriptionsListRegionalByResourceGroupNextResponse>;
  }

  /**
   * ListRegionalBySubscriptionForTopicTypeNext
   * @param topicTypeName Name of the topic type.
   * @param location Name of the location.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListRegionalBySubscriptionForTopicType method.
   * @param options The options parameters.
   */
  listRegionalBySubscriptionForTopicTypeNext(
    topicTypeName: string,
    location: string,
    nextLink: string,
    options?: EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextOptionalParams
  ): Promise<
    EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { topicTypeName, location, nextLink, options: operationOptions },
      listRegionalBySubscriptionForTopicTypeNextOperationSpec
    ) as Promise<
      EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse
    >;
  }

  /**
   * ListRegionalByResourceGroupForTopicTypeNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicTypeName Name of the topic type.
   * @param location Name of the location.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListRegionalByResourceGroupForTopicType method.
   * @param options The options parameters.
   */
  listRegionalByResourceGroupForTopicTypeNext(
    resourceGroupName: string,
    topicTypeName: string,
    location: string,
    nextLink: string,
    options?: EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextOptionalParams
  ): Promise<
    EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        topicTypeName,
        location,
        nextLink,
        options: operationOptions
      },
      listRegionalByResourceGroupForTopicTypeNextOperationSpec
    ) as Promise<
      EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse
    >;
  }

  /**
   * ListByResourceNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param providerNamespace Namespace of the provider of the topic.
   * @param resourceTypeName Name of the resource type.
   * @param resourceName Name of the resource.
   * @param nextLink The nextLink from the previous successful call to the ListByResource method.
   * @param options The options parameters.
   */
  listByResourceNext(
    resourceGroupName: string,
    providerNamespace: string,
    resourceTypeName: string,
    resourceName: string,
    nextLink: string,
    options?: EventSubscriptionsListByResourceNextOptionalParams
  ): Promise<EventSubscriptionsListByResourceNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerNamespace,
        resourceTypeName,
        resourceName,
        nextLink,
        options: operationOptions
      },
      listByResourceNextOperationSpec
    ) as Promise<EventSubscriptionsListByResourceNextResponse>;
  }

  /**
   * ListByDomainTopicNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the top level domain.
   * @param topicName Name of the domain topic.
   * @param nextLink The nextLink from the previous successful call to the ListByDomainTopic method.
   * @param options The options parameters.
   */
  listByDomainTopicNext(
    resourceGroupName: string,
    domainName: string,
    topicName: string,
    nextLink: string,
    options?: EventSubscriptionsListByDomainTopicNextOptionalParams
  ): Promise<EventSubscriptionsListByDomainTopicNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        topicName,
        nextLink,
        options: operationOptions
      },
      listByDomainTopicNextOperationSpec
    ) as Promise<EventSubscriptionsListByDomainTopicNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.eventSubscriptionName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscription
    },
    201: {
      bodyMapper: Mappers.EventSubscription
    },
    202: {
      bodyMapper: Mappers.EventSubscription
    },
    204: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {}
  },
  requestBody: Parameters.eventSubscriptionInfo,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope1,
    Parameters.eventSubscriptionName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.eventSubscriptionName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscription
    },
    201: {
      bodyMapper: Mappers.EventSubscription
    },
    202: {
      bodyMapper: Mappers.EventSubscription
    },
    204: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {}
  },
  requestBody: Parameters.eventSubscriptionUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope2,
    Parameters.eventSubscriptionName2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getFullUrlOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getFullUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionFullUrl
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.eventSubscriptionName
  ],
  serializer
};
const listGlobalBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listGlobalBySubscriptionForTopicTypeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.topicTypeName
  ],
  serializer
};
const listGlobalByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const listGlobalByResourceGroupForTopicTypeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.topicTypeName
  ],
  serializer
};
const listRegionalBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  serializer
};
const listRegionalByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  serializer
};
const listRegionalBySubscriptionForTopicTypeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.topicTypeName,
    Parameters.location
  ],
  serializer
};
const listRegionalByResourceGroupForTopicTypeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.topicTypeName,
    Parameters.location
  ],
  serializer
};
const listByResourceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerNamespace,
    Parameters.resourceTypeName,
    Parameters.resourceName
  ],
  serializer
};
const listByDomainTopicOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/providers/Microsoft.EventGrid/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainName2,
    Parameters.topicName
  ],
  serializer
};
const listGlobalBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink4
  ],
  serializer
};
const listGlobalBySubscriptionForTopicTypeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.topicTypeName,
    Parameters.nextLink5
  ],
  serializer
};
const listGlobalByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink6
  ],
  serializer
};
const listGlobalByResourceGroupForTopicTypeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.topicTypeName,
    Parameters.nextLink7
  ],
  serializer
};
const listRegionalBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.nextLink8
  ],
  serializer
};
const listRegionalByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.nextLink9
  ],
  serializer
};
const listRegionalBySubscriptionForTopicTypeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.topicTypeName,
    Parameters.location,
    Parameters.nextLink10
  ],
  serializer
};
const listRegionalByResourceGroupForTopicTypeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.topicTypeName,
    Parameters.location,
    Parameters.nextLink11
  ],
  serializer
};
const listByResourceNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerNamespace,
    Parameters.resourceTypeName,
    Parameters.resourceName,
    Parameters.nextLink12
  ],
  serializer
};
const listByDomainTopicNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainName2,
    Parameters.topicName,
    Parameters.nextLink13
  ],
  serializer
};
