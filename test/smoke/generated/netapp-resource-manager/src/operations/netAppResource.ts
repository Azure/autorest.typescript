/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetAppManagementClient } from "../netAppManagementClient";
import {
  ResourceNameAvailabilityRequest,
  NetAppResourceCheckNameAvailabilityResponse,
  NetAppResourceCheckFilePathAvailabilityResponse
} from "../models";

/**
 * Class representing a NetAppResource.
 */
export class NetAppResource {
  private readonly client: NetAppManagementClient;

  /**
   * Initialize a new instance of the class NetAppResource class.
   * @param client Reference to the service client
   */
  constructor(client: NetAppManagementClient) {
    this.client = client;
  }

  /**
   * Check if a resource name is available.
   * @param body Name availability request.
   * @param location The location
   * @param options The options parameters.
   */
  checkNameAvailability(
    body: ResourceNameAvailabilityRequest,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<NetAppResourceCheckNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { body, location, options: operationOptions },
      checkNameAvailabilityOperationSpec
    ) as Promise<NetAppResourceCheckNameAvailabilityResponse>;
  }

  /**
   * Check if a file path is available.
   * @param location The location
   * @param body File path availability request.
   * @param options The options parameters.
   */
  checkFilePathAvailability(
    location: string,
    body: ResourceNameAvailabilityRequest,
    options?: coreHttp.OperationOptions
  ): Promise<NetAppResourceCheckFilePathAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, body, options: operationOptions },
      checkFilePathAvailabilityOperationSpec
    ) as Promise<NetAppResourceCheckFilePathAvailabilityResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceNameAvailability
    },
    default: {}
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const checkFilePathAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkFilePathAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceNameAvailability
    },
    default: {}
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
