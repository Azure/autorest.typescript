/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-11-01",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const body: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: Mappers.ResourceNameAvailabilityRequest
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const location: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body1: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: Mappers.ResourceNameAvailabilityRequest
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-w._()]+$"),
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const accountName: coreHttp.OperationURLParameter = {
  parameterPath: "accountName",
  mapper: {
    serializedName: "accountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body2: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: Mappers.NetAppAccount
};

export const body3: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: Mappers.NetAppAccountPatch
};

export const poolName: coreHttp.OperationURLParameter = {
  parameterPath: "poolName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-_]{0,63}$"),
      MaxLength: 64,
      MinLength: 1
    },
    serializedName: "poolName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body4: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: Mappers.CapacityPool
};

export const body5: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: Mappers.CapacityPoolPatch
};

export const volumeName: coreHttp.OperationURLParameter = {
  parameterPath: "volumeName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-_]{0,63}$"),
      MaxLength: 64,
      MinLength: 1
    },
    serializedName: "volumeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body6: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: Mappers.Volume
};

export const body7: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: Mappers.VolumePatch
};

export const body8: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: Mappers.VolumeRevert
};

export const body9: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: Mappers.AuthorizeRequest
};

export const snapshotName: coreHttp.OperationURLParameter = {
  parameterPath: "snapshotName",
  mapper: {
    serializedName: "snapshotName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body10: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: Mappers.Snapshot
};

export const body11: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: {
    serializedName: "body",
    required: true,
    type: {
      name: "any"
    }
  }
};
