/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Result of the request to list Cloud Volume operations. It contains a list of operations and a URL link to get the next set of results.
 */
export interface OperationListResult {
  /**
   * List of Storage operations supported by the Storage resource provider.
   */
  value?: Operation[];
}

/**
 * Microsoft.NetApp REST API operation definition.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * Display metadata associated with the operation.
   */
  display?: OperationDisplay;
  /**
   * The origin of operations.
   */
  origin?: string;
  /**
   * One property of operation, include metric specifications.
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * Display metadata associated with the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft NetApp.
   */
  provider?: string;
  /**
   * Resource on which the operation is performed etc.
   */
  resource?: string;
  /**
   * Type of operation: get, read, delete, etc.
   */
  operation?: string;
  /**
   * Operation description.
   */
  description?: string;
}

/**
 * One property of operation, include metric specifications.
 */
export interface ServiceSpecification {
  /**
   * Metric specifications of operation.
   */
  metricSpecifications?: MetricSpecification[];
}

/**
 * Metric specification of operation.
 */
export interface MetricSpecification {
  /**
   * Name of metric specification.
   */
  name?: string;
  /**
   * Display name of metric specification.
   */
  displayName?: string;
  /**
   * Display description of metric specification.
   */
  displayDescription?: string;
  /**
   * Unit could be Bytes or Count.
   */
  unit?: string;
  /**
   * Dimensions of blobs, including blob type and access tier.
   */
  dimensions?: Dimension[];
  /**
   * Aggregation type could be Average.
   */
  aggregationType?: string;
  /**
   * The property to decide fill gap with zero or not.
   */
  fillGapWithZero?: boolean;
  /**
   * The category this metric specification belong to, could be Capacity.
   */
  category?: string;
  /**
   * Account Resource Id.
   */
  resourceIdDimensionNameOverride?: string;
}

/**
 * Dimension of blobs, possibly be blob type or access tier.
 */
export interface Dimension {
  /**
   * Display name of dimension.
   */
  name?: string;
  /**
   * Display name of dimension.
   */
  displayName?: string;
}

/**
 * Resource name availability request content.
 */
export interface ResourceNameAvailabilityRequest {
  /**
   * Resource name to verify.
   */
  name: string;
  /**
   * Resource type used for verification.
   */
  type: CheckNameResourceTypes;
  /**
   * Resource group name.
   */
  resourceGroup: string;
}

/**
 * Information regarding availability of a resource name.
 */
export interface ResourceNameAvailability {
  /**
   * <code>true</code> indicates name is valid and available. <code>false</code> indicates the name is invalid, unavailable, or both.
   */
  isAvailable?: boolean;
  /**
   * <code>Invalid</code> indicates the name provided does not match Azure App Service naming requirements. <code>AlreadyExists</code> indicates that the name is already in use and is therefore unavailable.
   */
  reason?: InAvailabilityReasonType;
  /**
   * If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that resource name is already in use, and direct them to select a different name.
   */
  message?: string;
}

/**
 * List of NetApp account resources
 */
export interface NetAppAccountList {
  /**
   * Multiple NetApp accounts
   */
  value?: NetAppAccount[];
}

/**
 * NetApp account resource
 */
export interface NetAppAccount {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * Azure lifecycle management
   */
  readonly provisioningState?: string;
  /**
   * Active Directories
   */
  activeDirectories?: ActiveDirectory[];
}

/**
 * Active Directory
 */
export interface ActiveDirectory {
  /**
   * Id of the Active Directory
   */
  activeDirectoryId?: string;
  /**
   * Username of Active Directory domain administrator
   */
  username?: string;
  /**
   * Plain text password of Active Directory domain administrator
   */
  password?: string;
  /**
   * Name of the Active Directory domain
   */
  domain?: string;
  /**
   * Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
   */
  dns?: string;
  /**
   * Status of the Active Directory
   */
  status?: string;
  /**
   * NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
   */
  smbServerName?: string;
  /**
   * The Organizational Unit (OU) within the Windows Active Directory
   */
  organizationalUnit?: string;
  /**
   * The Active Directory site the service will limit Domain Controller discovery to
   */
  site?: string;
}

/**
 * NetApp account patch resource
 */
export interface NetAppAccountPatch {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * Azure lifecycle management
   */
  readonly provisioningState?: string;
  /**
   * Active Directories
   */
  activeDirectories?: ActiveDirectory[];
}

/**
 * List of capacity pool resources
 */
export interface CapacityPoolList {
  /**
   * List of Capacity pools
   */
  value?: CapacityPool[];
}

/**
 * Capacity pool resource
 */
export interface CapacityPool {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * UUID v4 used to identify the Pool
   */
  readonly poolId?: string;
  /**
   * Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
   */
  size: number;
  /**
   * The service level of the file system
   */
  serviceLevel: ServiceLevel;
  /**
   * Azure lifecycle management
   */
  readonly provisioningState?: string;
}

/**
 * Capacity pool patch resource
 */
export interface CapacityPoolPatch {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
   */
  size?: number;
  /**
   * The service level of the file system
   */
  serviceLevel?: ServiceLevel;
}

/**
 * List of volume resources
 */
export interface VolumeList {
  /**
   * List of volumes
   */
  value?: Volume[];
}

/**
 * Volume resource
 */
export interface Volume {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * Unique FileSystem Identifier.
   */
  readonly fileSystemId?: string;
  /**
   * A unique file path for the volume. Used when creating mount targets
   */
  creationToken: string;
  /**
   * The service level of the file system
   */
  serviceLevel?: ServiceLevel;
  /**
   * Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
   */
  usageThreshold: number;
  /**
   * Set of export policy rules
   */
  exportPolicy?: VolumePropertiesExportPolicy;
  /**
   * Set of protocol types
   */
  protocolTypes?: string[];
  /**
   * Azure lifecycle management
   */
  readonly provisioningState?: string;
  /**
   * UUID v4 or resource identifier used to identify the Snapshot.
   */
  snapshotId?: string;
  /**
   * Unique Baremetal Tenant Identifier.
   */
  readonly baremetalTenantId?: string;
  /**
   * The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
   */
  subnetId: string;
  /**
   * List of mount targets
   */
  mountTargets?: MountTarget[];
  /**
   * What type of volume is this
   */
  volumeType?: string;
  /**
   * DataProtection type volumes include an object containing details of the replication
   */
  dataProtection?: VolumePropertiesDataProtection;
  /**
   * Restoring
   */
  isRestoring?: boolean;
}

/**
 * Set of export policy rules
 */
export interface VolumePropertiesExportPolicy {
  /**
   * Export policy rule
   */
  rules?: ExportPolicyRule[];
}

/**
 * Volume Export Policy Rule
 */
export interface ExportPolicyRule {
  /**
   * Order index
   */
  ruleIndex?: number;
  /**
   * Read only access
   */
  unixReadOnly?: boolean;
  /**
   * Read and write access
   */
  unixReadWrite?: boolean;
  /**
   * Allows CIFS protocol
   */
  cifs?: boolean;
  /**
   * Allows NFSv3 protocol
   */
  nfsv3?: boolean;
  /**
   * Allows NFSv4.1 protocol
   */
  nfsv41?: boolean;
  /**
   * Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
   */
  allowedClients?: string;
}

/**
 * Mount Target
 */
export interface MountTarget {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * UUID v4 used to identify the MountTarget
   */
  readonly mountTargetId?: string;
  /**
   * UUID v4 used to identify the MountTarget
   */
  fileSystemId: string;
  /**
   * The mount target's IPv4 address
   */
  readonly ipAddress?: string;
  /**
   * The SMB server's Fully Qualified Domain Name, FQDN
   */
  smbServerFqdn?: string;
}

/**
 * DataProtection type volumes include an object containing details of the replication
 */
export interface VolumePropertiesDataProtection {
  /**
   * Replication properties
   */
  replication?: ReplicationObject;
}

/**
 * Replication properties
 */
export interface ReplicationObject {
  /**
   * Id
   */
  replicationId?: string;
  /**
   * Indicates whether the local volume is the source or destination for the Volume Replication
   */
  endpointType?: EndpointType;
  /**
   * Schedule
   */
  replicationSchedule: ReplicationSchedule;
  /**
   * The resource ID of the remote volume.
   */
  remoteVolumeResourceId: string;
  /**
   * The remote region for the other end of the Volume Replication.
   */
  remoteVolumeRegion?: string;
}

/**
 * Volume patch resource
 */
export interface VolumePatch {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * The service level of the file system
   */
  serviceLevel?: ServiceLevel;
  /**
   * Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
   */
  usageThreshold?: number;
  /**
   * Set of export policy rules
   */
  exportPolicy?: VolumePatchPropertiesExportPolicy;
}

/**
 * Set of export policy rules
 */
export interface VolumePatchPropertiesExportPolicy {
  /**
   * Export policy rule
   */
  rules?: ExportPolicyRule[];
}

/**
 * revert a volume to the snapshot
 */
export interface VolumeRevert {
  /**
   * Resource id of the snapshot
   */
  snapshotId?: string;
}

/**
 * Replication status
 */
export interface ReplicationStatus {
  /**
   * Replication health check
   */
  healthy?: boolean;
  /**
   * Status of the mirror relationship
   */
  relationshipStatus?: RelationshipStatus;
  /**
   * The status of the replication
   */
  mirrorState?: MirrorState;
  /**
   * The progress of the replication
   */
  totalProgress?: string;
  /**
   * Displays error message if the replication is in an error state
   */
  errorMessage?: string;
}

/**
 * Authorize request
 */
export interface AuthorizeRequest {
  /**
   * Resource id of the remote volume
   */
  remoteVolumeResourceId?: string;
}

/**
 * List of Snapshots
 */
export interface SnapshotsList {
  /**
   * A list of Snapshots
   */
  value?: Snapshot[];
}

/**
 * Snapshot of a Volume
 */
export interface Snapshot {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * UUID v4 used to identify the Snapshot
   */
  readonly snapshotId?: string;
  /**
   * UUID v4 used to identify the FileSystem
   */
  fileSystemId?: string;
  /**
   * The creation date of the snapshot
   */
  readonly created?: Date;
  /**
   * Azure lifecycle management
   */
  readonly provisioningState?: string;
}

/**
 * List of Mount Targets
 */
export interface MountTargetList {
  /**
   * A list of Mount targets
   */
  value?: MountTarget[];
}

/**
 * Defines values for CheckNameResourceTypes.
 */
export type CheckNameResourceTypes =
  | "Microsoft.NetApp/netAppAccounts"
  | "Microsoft.NetApp/netAppAccounts/capacityPools"
  | "Microsoft.NetApp/netAppAccounts/capacityPools/volumes"
  | "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots";
/**
 * Defines values for InAvailabilityReasonType.
 */
export type InAvailabilityReasonType = "Invalid" | "AlreadyExists";
/**
 * Defines values for ServiceLevel.
 */
export type ServiceLevel = "Standard" | "Premium" | "Ultra";
/**
 * Defines values for EndpointType.
 */
export type EndpointType = "src" | "dst";
/**
 * Defines values for ReplicationSchedule.
 */
export type ReplicationSchedule =
  | "_10minutely"
  | "hourly"
  | "daily"
  | "weekly"
  | "monthly";
/**
 * Defines values for RelationshipStatus.
 */
export type RelationshipStatus = "Idle" | "Transferring";
/**
 * Defines values for MirrorState.
 */
export type MirrorState = "Uninitialized" | "Mirrored" | "Broken";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type NetAppResourceCheckNameAvailabilityResponse = ResourceNameAvailability & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceNameAvailability;
  };
};

/**
 * Contains response data for the checkFilePathAvailability operation.
 */
export type NetAppResourceCheckFilePathAvailabilityResponse = ResourceNameAvailability & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceNameAvailability;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AccountsListResponse = NetAppAccountList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetAppAccountList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AccountsGetResponse = NetAppAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetAppAccount;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AccountsCreateOrUpdateResponse = NetAppAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetAppAccount;
  };
};

/**
 * Contains response data for the update operation.
 */
export type AccountsUpdateResponse = NetAppAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetAppAccount;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PoolsListResponse = CapacityPoolList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CapacityPoolList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PoolsGetResponse = CapacityPool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CapacityPool;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PoolsCreateOrUpdateResponse = CapacityPool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CapacityPool;
  };
};

/**
 * Contains response data for the update operation.
 */
export type PoolsUpdateResponse = CapacityPool & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CapacityPool;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VolumesListResponse = VolumeList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VolumeList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VolumesGetResponse = Volume & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Volume;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VolumesCreateOrUpdateResponse = Volume & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Volume;
  };
};

/**
 * Contains response data for the update operation.
 */
export type VolumesUpdateResponse = Volume & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Volume;
  };
};

/**
 * Contains response data for the replicationStatus operation.
 */
export type VolumesReplicationStatusResponse = ReplicationStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReplicationStatus;
  };
};

/**
 * Contains response data for the list operation.
 */
export type SnapshotsListResponse = SnapshotsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotsList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SnapshotsGetResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Snapshot;
  };
};

/**
 * Contains response data for the create operation.
 */
export type SnapshotsCreateResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Snapshot;
  };
};

/**
 * Contains response data for the update operation.
 */
export type SnapshotsUpdateResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Snapshot;
  };
};

/**
 * Optional parameters.
 */
export interface NetAppManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
