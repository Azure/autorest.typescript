/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSpecification: coreHttp.CompositeMapper = {
  serializedName: "ServiceSpecification",
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricSpecification" }
          }
        }
      }
    }
  }
};

export const MetricSpecification: coreHttp.CompositeMapper = {
  serializedName: "MetricSpecification",
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Dimension" } }
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      resourceIdDimensionNameOverride: {
        serializedName: "resourceIdDimensionNameOverride",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Dimension: coreHttp.CompositeMapper = {
  serializedName: "Dimension",
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceNameAvailabilityRequest: coreHttp.CompositeMapper = {
  serializedName: "ResourceNameAvailabilityRequest",
  type: {
    name: "Composite",
    className: "ResourceNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceNameAvailability: coreHttp.CompositeMapper = {
  serializedName: "ResourceNameAvailability",
  type: {
    name: "Composite",
    className: "ResourceNameAvailability",
    modelProperties: {
      isAvailable: {
        serializedName: "isAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetAppAccountList: coreHttp.CompositeMapper = {
  serializedName: "NetAppAccountList",
  type: {
    name: "Composite",
    className: "NetAppAccountList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetAppAccount" } }
        }
      }
    }
  }
};

export const NetAppAccount: coreHttp.CompositeMapper = {
  serializedName: "NetAppAccount",
  type: {
    name: "Composite",
    className: "NetAppAccount",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      activeDirectories: {
        serializedName: "properties.activeDirectories",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ActiveDirectory" } }
        }
      }
    }
  }
};

export const ActiveDirectory: coreHttp.CompositeMapper = {
  serializedName: "ActiveDirectory",
  type: {
    name: "Composite",
    className: "ActiveDirectory",
    modelProperties: {
      activeDirectoryId: {
        serializedName: "activeDirectoryId",
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      domain: {
        serializedName: "domain",
        type: {
          name: "String"
        }
      },
      dns: {
        serializedName: "dns",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      smbServerName: {
        serializedName: "smbServerName",
        type: {
          name: "String"
        }
      },
      organizationalUnit: {
        serializedName: "organizationalUnit",
        type: {
          name: "String"
        }
      },
      site: {
        serializedName: "site",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetAppAccountPatch: coreHttp.CompositeMapper = {
  serializedName: "NetAppAccountPatch",
  type: {
    name: "Composite",
    className: "NetAppAccountPatch",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      activeDirectories: {
        serializedName: "properties.activeDirectories",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ActiveDirectory" } }
        }
      }
    }
  }
};

export const CapacityPoolList: coreHttp.CompositeMapper = {
  serializedName: "CapacityPoolList",
  type: {
    name: "Composite",
    className: "CapacityPoolList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CapacityPool" } }
        }
      }
    }
  }
};

export const CapacityPool: coreHttp.CompositeMapper = {
  serializedName: "CapacityPool",
  type: {
    name: "Composite",
    className: "CapacityPool",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      poolId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.poolId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      size: {
        constraints: {
          InclusiveMaximum: 549755813888000,
          InclusiveMinimum: 4398046511104
        },
        serializedName: "properties.size",
        required: true,
        type: {
          name: "Number"
        }
      },
      serviceLevel: {
        serializedName: "properties.serviceLevel",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapacityPoolPatch: coreHttp.CompositeMapper = {
  serializedName: "CapacityPoolPatch",
  type: {
    name: "Composite",
    className: "CapacityPoolPatch",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      size: {
        defaultValue: 4398046511104,
        constraints: {
          InclusiveMaximum: 549755813888000,
          InclusiveMinimum: 4398046511104
        },
        serializedName: "properties.size",
        type: {
          name: "Number"
        }
      },
      serviceLevel: {
        serializedName: "properties.serviceLevel",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumeList: coreHttp.CompositeMapper = {
  serializedName: "VolumeList",
  type: {
    name: "Composite",
    className: "VolumeList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Volume" } }
        }
      }
    }
  }
};

export const Volume: coreHttp.CompositeMapper = {
  serializedName: "Volume",
  type: {
    name: "Composite",
    className: "Volume",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      fileSystemId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.fileSystemId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationToken: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]{0,79}$"),
          MaxLength: 80,
          MinLength: 1
        },
        serializedName: "properties.creationToken",
        required: true,
        type: {
          name: "String"
        }
      },
      serviceLevel: {
        serializedName: "properties.serviceLevel",
        type: {
          name: "String"
        }
      },
      usageThreshold: {
        defaultValue: 107374182400,
        constraints: {
          InclusiveMaximum: 109951162777600,
          InclusiveMinimum: 107374182400
        },
        serializedName: "properties.usageThreshold",
        required: true,
        type: {
          name: "Number"
        }
      },
      exportPolicy: {
        serializedName: "exportPolicy",
        type: {
          name: "Composite",
          className: "VolumePropertiesExportPolicy"
        }
      },
      protocolTypes: {
        serializedName: "properties.protocolTypes",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "VolumePropertiesProtocolTypesItem"
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      snapshotId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\?([^/]*[/])*)([^/]+)$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.snapshotId",
        type: {
          name: "String"
        }
      },
      baremetalTenantId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.baremetalTenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        required: true,
        type: {
          name: "String"
        }
      },
      mountTargets: {
        serializedName: "properties.mountTargets",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MountTarget" } }
        }
      },
      volumeType: {
        serializedName: "properties.volumeType",
        type: {
          name: "String"
        }
      },
      dataProtection: {
        serializedName: "dataProtection",
        type: {
          name: "Composite",
          className: "VolumePropertiesDataProtection"
        }
      },
      isRestoring: {
        serializedName: "properties.isRestoring",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VolumePropertiesExportPolicy: coreHttp.CompositeMapper = {
  serializedName: "VolumePropertiesExportPolicy",
  type: {
    name: "Composite",
    className: "VolumePropertiesExportPolicy",
    modelProperties: {
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExportPolicyRule" }
          }
        }
      }
    }
  }
};

export const ExportPolicyRule: coreHttp.CompositeMapper = {
  serializedName: "ExportPolicyRule",
  type: {
    name: "Composite",
    className: "ExportPolicyRule",
    modelProperties: {
      ruleIndex: {
        serializedName: "ruleIndex",
        type: {
          name: "Number"
        }
      },
      unixReadOnly: {
        serializedName: "unixReadOnly",
        type: {
          name: "Boolean"
        }
      },
      unixReadWrite: {
        serializedName: "unixReadWrite",
        type: {
          name: "Boolean"
        }
      },
      cifs: {
        serializedName: "cifs",
        type: {
          name: "Boolean"
        }
      },
      nfsv3: {
        serializedName: "nfsv3",
        type: {
          name: "Boolean"
        }
      },
      nfsv41: {
        serializedName: "nfsv41",
        type: {
          name: "Boolean"
        }
      },
      allowedClients: {
        serializedName: "allowedClients",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MountTarget: coreHttp.CompositeMapper = {
  serializedName: "MountTarget",
  type: {
    name: "Composite",
    className: "MountTarget",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      mountTargetId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.mountTargetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fileSystemId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.fileSystemId",
        required: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      smbServerFqdn: {
        serializedName: "properties.smbServerFqdn",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumePropertiesDataProtection: coreHttp.CompositeMapper = {
  serializedName: "VolumePropertiesDataProtection",
  type: {
    name: "Composite",
    className: "VolumePropertiesDataProtection",
    modelProperties: {
      replication: {
        serializedName: "replication",
        type: {
          name: "Composite",
          className: "ReplicationObject"
        }
      }
    }
  }
};

export const ReplicationObject: coreHttp.CompositeMapper = {
  serializedName: "ReplicationObject",
  type: {
    name: "Composite",
    className: "ReplicationObject",
    modelProperties: {
      replicationId: {
        serializedName: "replicationId",
        type: {
          name: "String"
        }
      },
      endpointType: {
        serializedName: "endpointType",
        type: {
          name: "String"
        }
      },
      replicationSchedule: {
        serializedName: "replicationSchedule",
        required: true,
        type: {
          name: "String"
        }
      },
      remoteVolumeResourceId: {
        serializedName: "remoteVolumeResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      remoteVolumeRegion: {
        serializedName: "remoteVolumeRegion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumePatch: coreHttp.CompositeMapper = {
  serializedName: "VolumePatch",
  type: {
    name: "Composite",
    className: "VolumePatch",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      serviceLevel: {
        serializedName: "properties.serviceLevel",
        type: {
          name: "String"
        }
      },
      usageThreshold: {
        defaultValue: 107374182400,
        constraints: {
          InclusiveMaximum: 109951162777600,
          InclusiveMinimum: 107374182400
        },
        serializedName: "properties.usageThreshold",
        type: {
          name: "Number"
        }
      },
      exportPolicy: {
        serializedName: "exportPolicy",
        type: {
          name: "Composite",
          className: "VolumePatchPropertiesExportPolicy"
        }
      }
    }
  }
};

export const VolumePatchPropertiesExportPolicy: coreHttp.CompositeMapper = {
  serializedName: "VolumePatchPropertiesExportPolicy",
  type: {
    name: "Composite",
    className: "VolumePatchPropertiesExportPolicy",
    modelProperties: {
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExportPolicyRule" }
          }
        }
      }
    }
  }
};

export const VolumeRevert: coreHttp.CompositeMapper = {
  serializedName: "VolumeRevert",
  type: {
    name: "Composite",
    className: "VolumeRevert",
    modelProperties: {
      snapshotId: {
        serializedName: "snapshotId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationStatus: coreHttp.CompositeMapper = {
  serializedName: "ReplicationStatus",
  type: {
    name: "Composite",
    className: "ReplicationStatus",
    modelProperties: {
      healthy: {
        serializedName: "healthy",
        type: {
          name: "Boolean"
        }
      },
      relationshipStatus: {
        serializedName: "relationshipStatus",
        type: {
          name: "String"
        }
      },
      mirrorState: {
        serializedName: "mirrorState",
        type: {
          name: "String"
        }
      },
      totalProgress: {
        serializedName: "totalProgress",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthorizeRequest: coreHttp.CompositeMapper = {
  serializedName: "AuthorizeRequest",
  type: {
    name: "Composite",
    className: "AuthorizeRequest",
    modelProperties: {
      remoteVolumeResourceId: {
        serializedName: "remoteVolumeResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotsList: coreHttp.CompositeMapper = {
  serializedName: "SnapshotsList",
  type: {
    name: "Composite",
    className: "SnapshotsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Snapshot" } }
        }
      }
    }
  }
};

export const Snapshot: coreHttp.CompositeMapper = {
  serializedName: "Snapshot",
  type: {
    name: "Composite",
    className: "Snapshot",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      snapshotId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.snapshotId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fileSystemId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.fileSystemId",
        type: {
          name: "String"
        }
      },
      created: {
        serializedName: "properties.created",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MountTargetList: coreHttp.CompositeMapper = {
  serializedName: "MountTargetList",
  type: {
    name: "Composite",
    className: "MountTargetList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MountTarget" } }
        }
      }
    }
  }
};
