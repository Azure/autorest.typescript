/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { AzureAppConfigurationContext } from "./azureAppConfigurationContext";
import {
  AzureAppConfigurationGetKeysOptionalParams,
  AzureAppConfigurationGetKeysResponse,
  AzureAppConfigurationCheckKeysOptionalParams,
  AzureAppConfigurationCheckKeysResponse,
  AzureAppConfigurationGetKeyValuesOptionalParams,
  AzureAppConfigurationGetKeyValuesResponse,
  AzureAppConfigurationCheckKeyValuesOptionalParams,
  AzureAppConfigurationCheckKeyValuesResponse,
  AzureAppConfigurationGetKeyValueOptionalParams,
  AzureAppConfigurationGetKeyValueResponse,
  AzureAppConfigurationPutKeyValueOptionalParams,
  AzureAppConfigurationPutKeyValueResponse,
  AzureAppConfigurationDeleteKeyValueOptionalParams,
  AzureAppConfigurationDeleteKeyValueResponse,
  AzureAppConfigurationCheckKeyValueOptionalParams,
  AzureAppConfigurationCheckKeyValueResponse,
  AzureAppConfigurationGetLabelsOptionalParams,
  AzureAppConfigurationGetLabelsResponse,
  AzureAppConfigurationCheckLabelsOptionalParams,
  AzureAppConfigurationCheckLabelsResponse,
  AzureAppConfigurationPutLockOptionalParams,
  AzureAppConfigurationPutLockResponse,
  AzureAppConfigurationDeleteLockOptionalParams,
  AzureAppConfigurationDeleteLockResponse,
  AzureAppConfigurationGetRevisionsOptionalParams,
  AzureAppConfigurationGetRevisionsResponse,
  AzureAppConfigurationCheckRevisionsOptionalParams,
  AzureAppConfigurationCheckRevisionsResponse,
  AzureAppConfigurationGetKeysNextOptionalParams,
  AzureAppConfigurationGetKeysNextResponse,
  AzureAppConfigurationGetKeyValuesNextOptionalParams,
  AzureAppConfigurationGetKeyValuesNextResponse,
  AzureAppConfigurationGetLabelsNextOptionalParams,
  AzureAppConfigurationGetLabelsNextResponse,
  AzureAppConfigurationGetRevisionsNextOptionalParams,
  AzureAppConfigurationGetRevisionsNextResponse
} from "./models";

class AzureAppConfiguration extends AzureAppConfigurationContext {
  /**
   * Initializes a new instance of the AzureAppConfiguration class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param endpoint The endpoint of the App Configuration instance to send requests to.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    endpoint: string,
    options?: Models.AzureAppConfigurationOptionalParams
  ) {
    super(credentials, endpoint, options);
  }

  /**
   * Gets a list of keys.
   * @param options The options parameters.
   */
  getKeys(
    options?: AzureAppConfigurationGetKeysOptionalParams
  ): Promise<AzureAppConfigurationGetKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      getKeysOperationSpec
    ) as Promise<AzureAppConfigurationGetKeysResponse>;
  }

  /**
   * Requests the headers and status of the given resource.
   * @param options The options parameters.
   */
  checkKeys(
    options?: AzureAppConfigurationCheckKeysOptionalParams
  ): Promise<AzureAppConfigurationCheckKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      checkKeysOperationSpec
    ) as Promise<AzureAppConfigurationCheckKeysResponse>;
  }

  /**
   * Gets a list of key-values.
   * @param options The options parameters.
   */
  getKeyValues(
    options?: AzureAppConfigurationGetKeyValuesOptionalParams
  ): Promise<AzureAppConfigurationGetKeyValuesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      getKeyValuesOperationSpec
    ) as Promise<AzureAppConfigurationGetKeyValuesResponse>;
  }

  /**
   * Requests the headers and status of the given resource.
   * @param options The options parameters.
   */
  checkKeyValues(
    options?: AzureAppConfigurationCheckKeyValuesOptionalParams
  ): Promise<AzureAppConfigurationCheckKeyValuesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      checkKeyValuesOperationSpec
    ) as Promise<AzureAppConfigurationCheckKeyValuesResponse>;
  }

  /**
   * Gets a single key-value.
   * @param key The key of the key-value to retrieve.
   * @param options The options parameters.
   */
  getKeyValue(
    key: string,
    options?: AzureAppConfigurationGetKeyValueOptionalParams
  ): Promise<AzureAppConfigurationGetKeyValueResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { key, options: operationOptions },
      getKeyValueOperationSpec
    ) as Promise<AzureAppConfigurationGetKeyValueResponse>;
  }

  /**
   * Creates a key-value.
   * @param key The key of the key-value to create.
   * @param options The options parameters.
   */
  putKeyValue(
    key: string,
    options?: AzureAppConfigurationPutKeyValueOptionalParams
  ): Promise<AzureAppConfigurationPutKeyValueResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { key, options: operationOptions },
      putKeyValueOperationSpec
    ) as Promise<AzureAppConfigurationPutKeyValueResponse>;
  }

  /**
   * Deletes a key-value.
   * @param key The key of the key-value to delete.
   * @param options The options parameters.
   */
  deleteKeyValue(
    key: string,
    options?: AzureAppConfigurationDeleteKeyValueOptionalParams
  ): Promise<AzureAppConfigurationDeleteKeyValueResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { key, options: operationOptions },
      deleteKeyValueOperationSpec
    ) as Promise<AzureAppConfigurationDeleteKeyValueResponse>;
  }

  /**
   * Requests the headers and status of the given resource.
   * @param key The key of the key-value to retrieve.
   * @param options The options parameters.
   */
  checkKeyValue(
    key: string,
    options?: AzureAppConfigurationCheckKeyValueOptionalParams
  ): Promise<AzureAppConfigurationCheckKeyValueResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { key, options: operationOptions },
      checkKeyValueOperationSpec
    ) as Promise<AzureAppConfigurationCheckKeyValueResponse>;
  }

  /**
   * Gets a list of labels.
   * @param options The options parameters.
   */
  getLabels(
    options?: AzureAppConfigurationGetLabelsOptionalParams
  ): Promise<AzureAppConfigurationGetLabelsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      getLabelsOperationSpec
    ) as Promise<AzureAppConfigurationGetLabelsResponse>;
  }

  /**
   * Requests the headers and status of the given resource.
   * @param options The options parameters.
   */
  checkLabels(
    options?: AzureAppConfigurationCheckLabelsOptionalParams
  ): Promise<AzureAppConfigurationCheckLabelsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      checkLabelsOperationSpec
    ) as Promise<AzureAppConfigurationCheckLabelsResponse>;
  }

  /**
   * Locks a key-value.
   * @param key The key of the key-value to lock.
   * @param options The options parameters.
   */
  putLock(
    key: string,
    options?: AzureAppConfigurationPutLockOptionalParams
  ): Promise<AzureAppConfigurationPutLockResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { key, options: operationOptions },
      putLockOperationSpec
    ) as Promise<AzureAppConfigurationPutLockResponse>;
  }

  /**
   * Unlocks a key-value.
   * @param key The key of the key-value to unlock.
   * @param options The options parameters.
   */
  deleteLock(
    key: string,
    options?: AzureAppConfigurationDeleteLockOptionalParams
  ): Promise<AzureAppConfigurationDeleteLockResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { key, options: operationOptions },
      deleteLockOperationSpec
    ) as Promise<AzureAppConfigurationDeleteLockResponse>;
  }

  /**
   * Gets a list of key-value revisions.
   * @param options The options parameters.
   */
  getRevisions(
    options?: AzureAppConfigurationGetRevisionsOptionalParams
  ): Promise<AzureAppConfigurationGetRevisionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      getRevisionsOperationSpec
    ) as Promise<AzureAppConfigurationGetRevisionsResponse>;
  }

  /**
   * Requests the headers and status of the given resource.
   * @param options The options parameters.
   */
  checkRevisions(
    options?: AzureAppConfigurationCheckRevisionsOptionalParams
  ): Promise<AzureAppConfigurationCheckRevisionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      checkRevisionsOperationSpec
    ) as Promise<AzureAppConfigurationCheckRevisionsResponse>;
  }

  /**
   * GetKeysNext
   * @param nextLink The nextLink from the previous successful call to the GetKeys method.
   * @param options The options parameters.
   */
  getKeysNext(
    nextLink: string,
    options?: AzureAppConfigurationGetKeysNextOptionalParams
  ): Promise<AzureAppConfigurationGetKeysNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { nextLink, options: operationOptions },
      getKeysNextOperationSpec
    ) as Promise<AzureAppConfigurationGetKeysNextResponse>;
  }

  /**
   * GetKeyValuesNext
   * @param nextLink The nextLink from the previous successful call to the GetKeyValues method.
   * @param options The options parameters.
   */
  getKeyValuesNext(
    nextLink: string,
    options?: AzureAppConfigurationGetKeyValuesNextOptionalParams
  ): Promise<AzureAppConfigurationGetKeyValuesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { nextLink, options: operationOptions },
      getKeyValuesNextOperationSpec
    ) as Promise<AzureAppConfigurationGetKeyValuesNextResponse>;
  }

  /**
   * GetLabelsNext
   * @param nextLink The nextLink from the previous successful call to the GetLabels method.
   * @param options The options parameters.
   */
  getLabelsNext(
    nextLink: string,
    options?: AzureAppConfigurationGetLabelsNextOptionalParams
  ): Promise<AzureAppConfigurationGetLabelsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { nextLink, options: operationOptions },
      getLabelsNextOperationSpec
    ) as Promise<AzureAppConfigurationGetLabelsNextResponse>;
  }

  /**
   * GetRevisionsNext
   * @param nextLink The nextLink from the previous successful call to the GetRevisions method.
   * @param options The options parameters.
   */
  getRevisionsNext(
    nextLink: string,
    options?: AzureAppConfigurationGetRevisionsNextOptionalParams
  ): Promise<AzureAppConfigurationGetRevisionsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { nextLink, options: operationOptions },
      getRevisionsNextOperationSpec
    ) as Promise<AzureAppConfigurationGetRevisionsNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getKeysOperationSpec: coreHttp.OperationSpec = {
  path: "/keys",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult,
      headersMapper: Mappers.AzureAppConfigurationGetKeysHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const checkKeysOperationSpec: coreHttp.OperationSpec = {
  path: "/keys",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AzureAppConfigurationCheckKeysHeaders
    },
    default: {}
  },
  queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const getKeyValuesOperationSpec: coreHttp.OperationSpec = {
  path: "/kv",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.AzureAppConfigurationGetKeyValuesHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const checkKeyValuesOperationSpec: coreHttp.OperationSpec = {
  path: "/kv",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AzureAppConfigurationCheckKeyValuesHeaders
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select1
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const getKeyValueOperationSpec: coreHttp.OperationSpec = {
  path: "/kv/{key}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AzureAppConfigurationGetKeyValueHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.label1,
    Parameters.select2
  ],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const putKeyValueOperationSpec: coreHttp.OperationSpec = {
  path: "/kv/{key}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AzureAppConfigurationPutKeyValueHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.entity,
  queryParameters: [Parameters.apiVersion, Parameters.label2],
  urlParameters: [Parameters.endpoint, Parameters.key2],
  headerParameters: [
    Parameters.syncToken,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.contentType
  ],
  serializer
};
const deleteKeyValueOperationSpec: coreHttp.OperationSpec = {
  path: "/kv/{key}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AzureAppConfigurationDeleteKeyValueHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.label3],
  urlParameters: [Parameters.endpoint, Parameters.key3],
  headerParameters: [Parameters.syncToken, Parameters.ifMatch],
  serializer
};
const checkKeyValueOperationSpec: coreHttp.OperationSpec = {
  path: "/kv/{key}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AzureAppConfigurationCheckKeyValueHeaders
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.label1,
    Parameters.select3
  ],
  urlParameters: [Parameters.endpoint, Parameters.key1],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const getLabelsOperationSpec: coreHttp.OperationSpec = {
  path: "/labels",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LabelListResult,
      headersMapper: Mappers.AzureAppConfigurationGetLabelsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.name1,
    Parameters.select4
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const checkLabelsOperationSpec: coreHttp.OperationSpec = {
  path: "/labels",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AzureAppConfigurationCheckLabelsHeaders
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.name1,
    Parameters.select5
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const putLockOperationSpec: coreHttp.OperationSpec = {
  path: "/locks/{key}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AzureAppConfigurationPutLockHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.label4],
  urlParameters: [Parameters.endpoint, Parameters.key4],
  headerParameters: [
    Parameters.syncToken,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const deleteLockOperationSpec: coreHttp.OperationSpec = {
  path: "/locks/{key}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.AzureAppConfigurationDeleteLockHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.label5],
  urlParameters: [Parameters.endpoint, Parameters.key5],
  headerParameters: [
    Parameters.syncToken,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const getRevisionsOperationSpec: coreHttp.OperationSpec = {
  path: "/revisions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.AzureAppConfigurationGetRevisionsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select6
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const checkRevisionsOperationSpec: coreHttp.OperationSpec = {
  path: "/revisions",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.AzureAppConfigurationCheckRevisionsHeaders
    },
    default: {}
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select7
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const getKeysNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult,
      headersMapper: Mappers.AzureAppConfigurationGetKeysNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const getKeyValuesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.AzureAppConfigurationGetKeyValuesNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select
  ],
  urlParameters: [Parameters.endpoint, Parameters.nextLink1],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const getLabelsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LabelListResult,
      headersMapper: Mappers.AzureAppConfigurationGetLabelsNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.name1,
    Parameters.select4
  ],
  urlParameters: [Parameters.endpoint, Parameters.nextLink2],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};
const getRevisionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.AzureAppConfigurationGetRevisionsNextHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.after,
    Parameters.key,
    Parameters.label,
    Parameters.select6
  ],
  urlParameters: [Parameters.endpoint, Parameters.nextLink3],
  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
  serializer
};

// Operation Specifications

export {
  AzureAppConfiguration,
  AzureAppConfigurationContext,
  Models as AzureAppConfigurationModels,
  Mappers as AzureAppConfigurationMappers
};
