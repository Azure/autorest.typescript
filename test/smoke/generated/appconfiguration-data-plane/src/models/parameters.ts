/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const endpoint: coreHttp.OperationURLParameter = {
  parameterPath: "endpoint",
  mapper: {
    serializedName: "endpoint",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const name: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "name"],
  mapper: {
    serializedName: "name",
    type: {
      name: "String"
    }
  }
};

export const syncToken: coreHttp.OperationParameter = {
  parameterPath: "syncToken",
  mapper: {
    serializedName: "Sync-Token",
    type: {
      name: "String"
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "1.0",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const after: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "after"],
  mapper: {
    serializedName: "After",
    type: {
      name: "String"
    }
  }
};

export const acceptDatetime: coreHttp.OperationParameter = {
  parameterPath: ["options", "acceptDatetime"],
  mapper: {
    serializedName: "Accept-Datetime",
    type: {
      name: "String"
    }
  }
};

export const key: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "key"],
  mapper: {
    serializedName: "key",
    type: {
      name: "String"
    }
  }
};

export const label: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "label"],
  mapper: {
    serializedName: "label",
    type: {
      name: "String"
    }
  }
};

export const select: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "select"],
  mapper: {
    serializedName: "$Select",
    type: {
      name: "Sequence",
      element: { type: { name: "String" }, serializedName: "Get6ItemsItem" }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};

export const select1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "select"],
  mapper: {
    serializedName: "$Select",
    type: {
      name: "Sequence",
      element: { type: { name: "String" }, serializedName: "Head6ItemsItem" }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};

export const key1: coreHttp.OperationURLParameter = {
  parameterPath: "key",
  mapper: {
    serializedName: "key",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const label1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "label"],
  mapper: {
    serializedName: "label",
    type: {
      name: "String"
    }
  }
};

export const ifMatch: coreHttp.OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch: coreHttp.OperationParameter = {
  parameterPath: ["options", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const select2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "select"],
  mapper: {
    serializedName: "$Select",
    type: {
      name: "Sequence",
      element: { type: { name: "String" }, serializedName: "Get7ItemsItem" }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/vnd.microsoft.appconfig.kv+json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const entity: coreHttp.OperationParameter = {
  parameterPath: ["options", "entity"],
  mapper: Mappers.KeyValue
};

export const key2: coreHttp.OperationURLParameter = {
  parameterPath: "key",
  mapper: {
    serializedName: "key",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const label2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "label"],
  mapper: {
    serializedName: "label",
    type: {
      name: "String"
    }
  }
};

export const key3: coreHttp.OperationURLParameter = {
  parameterPath: "key",
  mapper: {
    serializedName: "key",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const label3: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "label"],
  mapper: {
    serializedName: "label",
    type: {
      name: "String"
    }
  }
};

export const select3: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "select"],
  mapper: {
    serializedName: "$Select",
    type: {
      name: "Sequence",
      element: { type: { name: "String" }, serializedName: "Head7ItemsItem" }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};

export const name1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "name"],
  mapper: {
    serializedName: "name",
    type: {
      name: "String"
    }
  }
};

export const select4: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "select"],
  mapper: {
    serializedName: "$Select",
    type: {
      name: "Sequence",
      element: {
        type: { name: "String" },
        serializedName: "Get5ItemsItem",
        defaultValue: "name",
        isConstant: true
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};

export const select5: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "select"],
  mapper: {
    serializedName: "$Select",
    type: {
      name: "Sequence",
      element: {
        type: { name: "String" },
        serializedName: "Head5ItemsItem",
        defaultValue: "name",
        isConstant: true
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};

export const key4: coreHttp.OperationURLParameter = {
  parameterPath: "key",
  mapper: {
    serializedName: "key",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const label4: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "label"],
  mapper: {
    serializedName: "label",
    type: {
      name: "String"
    }
  }
};

export const key5: coreHttp.OperationURLParameter = {
  parameterPath: "key",
  mapper: {
    serializedName: "key",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const label5: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "label"],
  mapper: {
    serializedName: "label",
    type: {
      name: "String"
    }
  }
};

export const select6: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "select"],
  mapper: {
    serializedName: "$Select",
    type: {
      name: "Sequence",
      element: { type: { name: "String" }, serializedName: "Enum4" }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};

export const select7: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "select"],
  mapper: {
    serializedName: "$Select",
    type: {
      name: "Sequence",
      element: { type: { name: "String" }, serializedName: "Enum5" }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
