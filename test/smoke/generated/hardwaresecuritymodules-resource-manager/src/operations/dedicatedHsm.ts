/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureDedicatedHsmResourceProvider } from "../azureDedicatedHsmResourceProvider";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  DedicatedHsm as DedicatedHsmModel,
  DedicatedHsmCreateOrUpdateResponse,
  DedicatedHsmPatchParameters,
  DedicatedHsmUpdateResponse,
  DedicatedHsmGetResponse,
  DedicatedHsmListByResourceGroupOptionalParams,
  DedicatedHsmListByResourceGroupResponse,
  DedicatedHsmListBySubscriptionOptionalParams,
  DedicatedHsmListBySubscriptionResponse,
  DedicatedHsmListByResourceGroupNextOptionalParams,
  DedicatedHsmListByResourceGroupNextResponse,
  DedicatedHsmListBySubscriptionNextOptionalParams,
  DedicatedHsmListBySubscriptionNextResponse
} from "../models";

/**
 * Class representing a DedicatedHsm.
 */
export class DedicatedHsm {
  private readonly client: AzureDedicatedHsmResourceProvider;

  /**
   * Initialize a new instance of the class DedicatedHsm class.
   * @param client Reference to the service client
   */
  constructor(client: AzureDedicatedHsmResourceProvider) {
    this.client = client;
  }

  /**
   * Create or Update a dedicated HSM in the specified subscription.
   * @param parameters Parameters to create or update the dedicated hsm
   * @param resourceGroupName The name of the Resource Group to which the resource belongs.
   * @param name Name of the dedicated Hsm
   * @param options The options parameters.
   */
  async createOrUpdate(
    parameters: DedicatedHsmModel,
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<DedicatedHsmCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      parameters,
      resourceGroupName,
      name,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        DedicatedHsmCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Update a dedicated HSM in the specified subscription.
   * @param parameters Parameters to patch the dedicated HSM
   * @param resourceGroupName The name of the Resource Group to which the server belongs.
   * @param name Name of the dedicated HSM
   * @param options The options parameters.
   */
  async update(
    parameters: DedicatedHsmPatchParameters,
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<DedicatedHsmUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      parameters,
      resourceGroupName,
      name,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        DedicatedHsmUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes the specified Azure Dedicated HSM.
   * @param resourceGroupName The name of the Resource Group to which the dedicated HSM belongs.
   * @param name The name of the dedicated HSM to delete
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets the specified Azure dedicated HSM.
   * @param resourceGroupName The name of the Resource Group to which the dedicated hsm belongs.
   * @param name The name of the dedicated HSM.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<DedicatedHsmGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getOperationSpec
    ) as Promise<DedicatedHsmGetResponse>;
  }

  /**
   * The List operation gets information about the dedicated hsms associated with the subscription and
   * within the specified resource group.
   * @param resourceGroupName The name of the Resource Group to which the dedicated HSM belongs.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: DedicatedHsmListByResourceGroupOptionalParams
  ): Promise<DedicatedHsmListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<DedicatedHsmListByResourceGroupResponse>;
  }

  /**
   * The List operation gets information about the dedicated HSMs associated with the subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: DedicatedHsmListBySubscriptionOptionalParams
  ): Promise<DedicatedHsmListBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listBySubscriptionOperationSpec
    ) as Promise<DedicatedHsmListBySubscriptionResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the Resource Group to which the dedicated HSM belongs.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DedicatedHsmListByResourceGroupNextOptionalParams
  ): Promise<DedicatedHsmListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<DedicatedHsmListByResourceGroupNextResponse>;
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  listBySubscriptionNext(
    nextLink: string,
    options?: DedicatedHsmListBySubscriptionNextOptionalParams
  ): Promise<DedicatedHsmListBySubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listBySubscriptionNextOperationSpec
    ) as Promise<DedicatedHsmListBySubscriptionNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHsm
    },
    201: {
      bodyMapper: Mappers.DedicatedHsm
    },
    202: {
      bodyMapper: Mappers.DedicatedHsm
    },
    204: {
      bodyMapper: Mappers.DedicatedHsm
    },
    default: {
      bodyMapper: Mappers.DedicatedHsmError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHsm
    },
    201: {
      bodyMapper: Mappers.DedicatedHsm
    },
    202: {
      bodyMapper: Mappers.DedicatedHsm
    },
    204: {
      bodyMapper: Mappers.DedicatedHsm
    },
    default: {
      bodyMapper: Mappers.DedicatedHsmError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.name1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DedicatedHsmError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName2,
    Parameters.name2
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHsm
    },
    default: {
      bodyMapper: Mappers.DedicatedHsmError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName3,
    Parameters.name3
  ],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHsmListResult
    },
    default: {
      bodyMapper: Mappers.DedicatedHsmError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName2
  ],
  serializer
};
const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHsmListResult
    },
    default: {
      bodyMapper: Mappers.DedicatedHsmError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHsmListResult
    },
    default: {
      bodyMapper: Mappers.DedicatedHsmError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName2,
    Parameters.nextLink
  ],
  serializer
};
const listBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHsmListResult
    },
    default: {
      bodyMapper: Mappers.DedicatedHsmError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink1
  ],
  serializer
};
