/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreHttp.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const GuestConfigurationAssignment: coreHttp.CompositeMapper = {
  serializedName: "GuestConfigurationAssignment",
  type: {
    name: "Composite",
    className: "GuestConfigurationAssignment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "GuestConfigurationAssignmentProperties"
        }
      }
    }
  }
};

export const GuestConfigurationAssignmentProperties: coreHttp.CompositeMapper = {
  serializedName: "GuestConfigurationAssignmentProperties",
  type: {
    name: "Composite",
    className: "GuestConfigurationAssignmentProperties",
    modelProperties: {
      guestConfiguration: {
        serializedName: "guestConfiguration",
        type: {
          name: "Composite",
          className: "GuestConfigurationNavigation"
        }
      },
      complianceStatus: {
        serializedName: "complianceStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastComplianceStatusChecked: {
        serializedName: "lastComplianceStatusChecked",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      latestReportId: {
        serializedName: "latestReportId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "String"
        }
      },
      assignmentHash: {
        serializedName: "assignmentHash",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GuestConfigurationNavigation: coreHttp.CompositeMapper = {
  serializedName: "GuestConfigurationNavigation",
  type: {
    name: "Composite",
    className: "GuestConfigurationNavigation",
    modelProperties: {
      kind: {
        defaultValue: "DSC",
        serializedName: "kind",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      contentUri: {
        serializedName: "contentUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      contentHash: {
        serializedName: "contentHash",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      configurationParameter: {
        serializedName: "configurationParameter",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConfigurationParameter" }
          }
        }
      },
      configurationSetting: {
        serializedName: "configurationSetting",
        type: {
          name: "Composite",
          className: "ConfigurationSetting"
        }
      }
    }
  }
};

export const ConfigurationParameter: coreHttp.CompositeMapper = {
  serializedName: "ConfigurationParameter",
  type: {
    name: "Composite",
    className: "ConfigurationParameter",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationSetting: coreHttp.CompositeMapper = {
  serializedName: "ConfigurationSetting",
  type: {
    name: "Composite",
    className: "ConfigurationSetting",
    modelProperties: {
      configurationMode: {
        serializedName: "configurationMode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowModuleOverwrite: {
        serializedName: "allowModuleOverwrite",
        type: {
          name: "String"
        }
      },
      actionAfterReboot: {
        serializedName: "actionAfterReboot",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      refreshFrequencyMins: {
        defaultValue: 30,
        serializedName: "refreshFrequencyMins",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      rebootIfNeeded: {
        defaultValue: "False",
        serializedName: "rebootIfNeeded",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      configurationModeFrequencyMins: {
        defaultValue: 15,
        serializedName: "configurationModeFrequencyMins",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GuestConfigurationAssignmentList: coreHttp.CompositeMapper = {
  serializedName: "GuestConfigurationAssignmentList",
  type: {
    name: "Composite",
    className: "GuestConfigurationAssignmentList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GuestConfigurationAssignment"
            }
          }
        }
      }
    }
  }
};

export const GuestConfigurationAssignmentReportList: coreHttp.CompositeMapper = {
  serializedName: "GuestConfigurationAssignmentReportList",
  type: {
    name: "Composite",
    className: "GuestConfigurationAssignmentReportList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GuestConfigurationAssignmentReport"
            }
          }
        }
      }
    }
  }
};

export const GuestConfigurationAssignmentReport: coreHttp.CompositeMapper = {
  serializedName: "GuestConfigurationAssignmentReport",
  type: {
    name: "Composite",
    className: "GuestConfigurationAssignmentReport",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "GuestConfigurationAssignmentReportProperties"
        }
      }
    }
  }
};

export const GuestConfigurationAssignmentReportProperties: coreHttp.CompositeMapper = {
  serializedName: "GuestConfigurationAssignmentReportProperties",
  type: {
    name: "Composite",
    className: "GuestConfigurationAssignmentReportProperties",
    modelProperties: {
      complianceStatus: {
        serializedName: "complianceStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reportId: {
        serializedName: "reportId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      assignment: {
        serializedName: "assignment",
        type: {
          name: "Composite",
          className: "AssignmentInfo"
        }
      },
      vm: {
        serializedName: "vm",
        type: {
          name: "Composite",
          className: "VMInfo"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Composite",
          className: "AssignmentReportDetails"
        }
      }
    }
  }
};

export const AssignmentInfo: coreHttp.CompositeMapper = {
  serializedName: "AssignmentInfo",
  type: {
    name: "Composite",
    className: "AssignmentInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      configuration: {
        serializedName: "configuration",
        type: {
          name: "Composite",
          className: "ConfigurationInfo"
        }
      }
    }
  }
};

export const ConfigurationInfo: coreHttp.CompositeMapper = {
  serializedName: "ConfigurationInfo",
  type: {
    name: "Composite",
    className: "ConfigurationInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMInfo: coreHttp.CompositeMapper = {
  serializedName: "VMInfo",
  type: {
    name: "Composite",
    className: "VMInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssignmentReportDetails: coreHttp.CompositeMapper = {
  serializedName: "AssignmentReportDetails",
  type: {
    name: "Composite",
    className: "AssignmentReportDetails",
    modelProperties: {
      complianceStatus: {
        serializedName: "complianceStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      jobId: {
        serializedName: "jobId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationType: {
        serializedName: "operationType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AssignmentReportResource" }
          }
        }
      }
    }
  }
};

export const AssignmentReportResource: coreHttp.CompositeMapper = {
  serializedName: "AssignmentReportResource",
  type: {
    name: "Composite",
    className: "AssignmentReportResource",
    modelProperties: {
      complianceStatus: {
        serializedName: "complianceStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reasons: {
        serializedName: "reasons",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssignmentReportResourceComplianceReason"
            }
          }
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        type: {
          name: "any"
        }
      }
    }
  }
};

export const AssignmentReportResourceComplianceReason: coreHttp.CompositeMapper = {
  serializedName: "AssignmentReportResourceComplianceReason",
  type: {
    name: "Composite",
    className: "AssignmentReportResourceComplianceReason",
    modelProperties: {
      phrase: {
        serializedName: "phrase",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationList: coreHttp.CompositeMapper = {
  serializedName: "OperationList",
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      statusCode: {
        serializedName: "properties.statusCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};
