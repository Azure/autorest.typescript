/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The core properties of ARM resources
 */
export interface Resource {
  /**
   * ARM resource id of the guest configuration assignment.
   */
  readonly id?: string;
  /**
   * Name of the guest configuration assignment.
   */
  readonly name?: string;
  /**
   * Region where the VM is located.
   */
  readonly location?: string;
  /**
   * The type of the resource.
   */
  readonly type?: string;
}

/**
 * ARM proxy resource.
 */
export type ProxyResource = Resource & {};

/**
 * Guest configuration assignment is an association between a VM and guest configuration.
 */
export type GuestConfigurationAssignment = ProxyResource & {
  /**
   * Properties of the Guest configuration assignment.
   */
  properties?: GuestConfigurationAssignmentProperties;
};

/**
 * Guest configuration assignment properties.
 */
export interface GuestConfigurationAssignmentProperties {
  /**
   * The guest configuration to assign.
   */
  guestConfiguration?: GuestConfigurationNavigation;
  /**
   * A value indicating compliance status of the virtual machine for the assigned guest configuration.
   */
  readonly complianceStatus?: ComplianceStatus;
  /**
   * Date and time when last compliance status was checked.
   */
  readonly lastComplianceStatusChecked?: Date;
  /**
   * Id of the latest report for the guest configuration assignment.
   */
  readonly latestReportId?: string;
  /**
   * The source which initiated the guest configuration assignment. Ex: Azure Policy
   */
  context?: string;
  /**
   * Combined hash of the configuration package and parameters.
   */
  readonly assignmentHash?: string;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
 */
export interface GuestConfigurationNavigation {
  /**
   * Kind of the guest configuration. For example:DSC
   */
  kind?: "DSC";
  /**
   * Name of the guest configuration.
   */
  name?: string;
  /**
   * Version of the guest configuration.
   */
  version?: string;
  /**
   * Uri of the storage where guest configuration package is uploaded.
   */
  readonly contentUri?: string;
  /**
   * Combined hash of the guest configuration package and configuration parameters.
   */
  readonly contentHash?: string;
  /**
   * The configuration parameters for the guest configuration.
   */
  configurationParameter?: ConfigurationParameter[];
  /**
   * The configuration setting for the guest configuration.
   */
  configurationSetting?: ConfigurationSetting;
}

/**
 * Represents a configuration parameter.
 */
export interface ConfigurationParameter {
  /**
   * Name of the configuration parameter.
   */
  readonly name?: string;
  /**
   * Value of the configuration parameter.
   */
  readonly value?: string;
}

/**
 * Configuration setting of LCM (Local Configuration Manager).
 */
export interface ConfigurationSetting {
  /**
   * Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
   */
  readonly configurationMode?: ConfigurationMode;
  /**
   * If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
   */
  allowModuleOverwrite?: AllowModuleOverwrite;
  /**
   * Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
   */
  readonly actionAfterReboot?: ActionAfterReboot;
  /**
   * The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
   */
  readonly refreshFrequencyMins?: number;
  /**
   * Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
   */
  readonly rebootIfNeeded?: RebootIfNeeded;
  /**
   * How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
   */
  readonly configurationModeFrequencyMins?: number;
}

/**
 * Error response of an operation failure
 */
export interface ErrorResponse {
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * The response of the list guest configuration assignment operation.
 */
export interface GuestConfigurationAssignmentList {
  /**
   * Result of the list guest configuration assignment operation.
   */
  value?: GuestConfigurationAssignment[];
}

/**
 * List of guest configuration assignment reports.
 */
export interface GuestConfigurationAssignmentReportList {
  /**
   * List of reports for the guest configuration. Report contains information such as compliance status, reason and more.
   */
  value?: GuestConfigurationAssignmentReport[];
}

/**
 * Report for the guest configuration assignment. Report contains information such as compliance status, reason, and more.
 */
export interface GuestConfigurationAssignmentReport {
  /**
   * ARM resource id of the report for the guest configuration assignment.
   */
  readonly id?: string;
  /**
   * GUID that identifies the guest configuration assignment report under a subscription, resource group.
   */
  readonly name?: string;
  /**
   * Properties of the guest configuration report.
   */
  properties?: GuestConfigurationAssignmentReportProperties;
}

/**
 * Report for the guest configuration assignment. Report contains information such as compliance status, reason, and more.
 */
export interface GuestConfigurationAssignmentReportProperties {
  /**
   * A value indicating compliance status of the virtual machine for the assigned guest configuration.
   */
  readonly complianceStatus?: ComplianceStatus;
  /**
   * GUID that identifies the guest configuration assignment report under a subscription, resource group.
   */
  readonly reportId?: string;
  /**
   * Configuration details of the guest configuration assignment.
   */
  assignment?: AssignmentInfo;
  /**
   * Information about the VM.
   */
  vm?: VMInfo;
  /**
   * Start date and time of the guest configuration assignment compliance status check.
   */
  readonly startTime?: Date;
  /**
   * End date and time of the guest configuration assignment compliance status check.
   */
  readonly endTime?: Date;
  /**
   * Details of the assignment report.
   */
  details?: AssignmentReportDetails;
}

/**
 * Information about the guest configuration assignment.
 */
export interface AssignmentInfo {
  /**
   * Name of the guest configuration assignment.
   */
  readonly name?: string;
  /**
   * Information about the configuration.
   */
  configuration?: ConfigurationInfo;
}

/**
 * Information about the configuration.
 */
export interface ConfigurationInfo {
  /**
   * Name of the configuration.
   */
  readonly name?: string;
  /**
   * Version of the configuration.
   */
  readonly version?: string;
}

/**
 * Information about the VM.
 */
export interface VMInfo {
  /**
   * Azure resource Id of the VM.
   */
  readonly id?: string;
  /**
   * UUID(Universally Unique Identifier) of the VM.
   */
  readonly uuid?: string;
}

/**
 * Details of the guest configuration assignment report.
 */
export interface AssignmentReportDetails {
  /**
   * A value indicating compliance status of the virtual machine for the assigned guest configuration.
   */
  readonly complianceStatus?: ComplianceStatus;
  /**
   * Start date and time of the guest configuration assignment compliance status check.
   */
  readonly startTime?: Date;
  /**
   * End date and time of the guest configuration assignment compliance status check.
   */
  readonly endTime?: Date;
  /**
   * GUID of the report.
   */
  readonly jobId?: string;
  /**
   * Type of report, Consistency or Initial
   */
  readonly operationType?: Type;
  /**
   * The list of resources for which guest configuration assignment compliance is checked.
   */
  resources?: AssignmentReportResource[];
}

/**
 * The guest configuration assignment resource.
 */
export interface AssignmentReportResource {
  /**
   * A value indicating compliance status of the virtual machine for the assigned guest configuration.
   */
  readonly complianceStatus?: ComplianceStatus;
  /**
   * Compliance reason and reason code for a resource.
   */
  reasons?: AssignmentReportResourceComplianceReason[];
  /**
   * Properties of a guest configuration assignment resource.
   */
  readonly properties?: any;
}

/**
 * Reason and code for the compliance of the guest configuration assignment resource.
 */
export interface AssignmentReportResourceComplianceReason {
  /**
   * Reason for the compliance of the guest configuration assignment resource.
   */
  readonly phrase?: string;
  /**
   * Code for the compliance of the guest configuration assignment resource.
   */
  readonly code?: string;
}

/**
 * The response model for the list of Automation operations
 */
export interface OperationList {
  /**
   * List of Automation operations supported by the Automation resource provider.
   */
  value?: Operation[];
}

/**
 * GuestConfiguration REST API operation
 */
export interface Operation {
  /**
   * Operation name: For ex. providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/write or read
   */
  name?: string;
  /**
   * Provider, Resource, Operation and description values.
   */
  display?: OperationDisplay;
  /**
   * Service provider: Microsoft.GuestConfiguration
   */
  statusCode?: string;
}

/**
 * Provider, Resource, Operation and description values.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.GuestConfiguration
   */
  provider?: string;
  /**
   * Resource on which the operation is performed:  For ex.
   */
  resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  operation?: string;
  /**
   * Description about operation.
   */
  description?: string;
}

/**
 * Defines values for ConfigurationMode.
 */
export type ConfigurationMode =
  | "ApplyOnly"
  | "ApplyAndMonitor"
  | "ApplyAndAutoCorrect";
/**
 * Defines values for AllowModuleOverwrite.
 */
export type AllowModuleOverwrite = "True" | "False";
/**
 * Defines values for ActionAfterReboot.
 */
export type ActionAfterReboot = "ContinueConfiguration" | "StopConfiguration";
/**
 * Defines values for RebootIfNeeded.
 */
export type RebootIfNeeded = "True" | "False";
/**
 * Defines values for ComplianceStatus.
 */
export type ComplianceStatus = "Compliant" | "NonCompliant" | "Pending";
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState = "Succeeded" | "Failed" | "Canceled" | "Created";
/**
 * Defines values for Type.
 */
export type Type = "Consistency" | "Initial";

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GuestConfigurationAssignmentsCreateOrUpdateResponse = GuestConfigurationAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GuestConfigurationAssignment;
  };
};

/**
 * Contains response data for the get operation.
 */
export type GuestConfigurationAssignmentsGetResponse = GuestConfigurationAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GuestConfigurationAssignment;
  };
};

/**
 * Contains response data for the list operation.
 */
export type GuestConfigurationAssignmentsListResponse = GuestConfigurationAssignmentList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GuestConfigurationAssignmentList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type GuestConfigurationAssignmentReportsListResponse = GuestConfigurationAssignmentReportList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GuestConfigurationAssignmentReportList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type GuestConfigurationAssignmentReportsGetResponse = GuestConfigurationAssignmentReport & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GuestConfigurationAssignmentReport;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Optional parameters.
 */
export interface GuestConfigurationClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
