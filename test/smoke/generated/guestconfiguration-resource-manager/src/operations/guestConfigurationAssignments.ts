/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GuestConfigurationClient } from "../guestConfigurationClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  GuestConfigurationAssignment,
  GuestConfigurationAssignmentsCreateOrUpdateResponse,
  GuestConfigurationAssignmentsGetResponse,
  GuestConfigurationAssignmentsListResponse
} from "../models";

/**
 * Class representing a GuestConfigurationAssignments.
 */
export class GuestConfigurationAssignments {
  private readonly client: GuestConfigurationClient;

  /**
   * Initialize a new instance of the class GuestConfigurationAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: GuestConfigurationClient) {
    this.client = client;
  }

  /**
   * Creates an association between a VM and guest configuration
   * @param parameters Parameters supplied to the create or update guest configuration assignment.
   * @param guestConfigurationAssignmentName Name of the guest configuration assignment.
   * @param resourceGroupName The resource group name.
   * @param vmName The name of the virtual machine.
   * @param options The options parameters.
   */
  async createOrUpdate(
    parameters: GuestConfigurationAssignment,
    guestConfigurationAssignmentName: string,
    resourceGroupName: string,
    vmName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<GuestConfigurationAssignmentsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      parameters,
      guestConfigurationAssignmentName,
      resourceGroupName,
      vmName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        GuestConfigurationAssignmentsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Get information about a guest configuration assignment
   * @param resourceGroupName The resource group name.
   * @param vmName The name of the virtual machine.
   * @param guestConfigurationAssignmentName The guest configuration assignment name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    vmName: string,
    guestConfigurationAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<GuestConfigurationAssignmentsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmName,
        guestConfigurationAssignmentName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<GuestConfigurationAssignmentsGetResponse>;
  }

  /**
   * Delete a guest configuration assignment
   * @param resourceGroupName The resource group name.
   * @param vmName The name of the virtual machine.
   * @param guestConfigurationAssignmentName Name of the guest configuration assignment
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    vmName: string,
    guestConfigurationAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      vmName,
      guestConfigurationAssignmentName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * List all guest configuration assignments for a virtual machine.
   * @param resourceGroupName The resource group name.
   * @param vmName The name of the virtual machine.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    vmName: string,
    options?: coreHttp.OperationOptions
  ): Promise<GuestConfigurationAssignmentsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, vmName, options: operationOptions },
      listOperationSpec
    ) as Promise<GuestConfigurationAssignmentsListResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/{guestConfigurationAssignmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GuestConfigurationAssignment
    },
    201: {
      bodyMapper: Mappers.GuestConfigurationAssignment
    },
    202: {
      bodyMapper: Mappers.GuestConfigurationAssignment
    },
    204: {
      bodyMapper: Mappers.GuestConfigurationAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.guestConfigurationAssignmentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/{guestConfigurationAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GuestConfigurationAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.guestConfigurationAssignmentName1
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/{guestConfigurationAssignmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.guestConfigurationAssignmentName2
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GuestConfigurationAssignmentList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmName
  ],
  serializer
};
