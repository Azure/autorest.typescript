/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GuestConfigurationClient } from "../guestConfigurationClient";
import {
  GuestConfigurationAssignmentReportsListResponse,
  GuestConfigurationAssignmentReportsGetResponse
} from "../models";

/**
 * Class representing a GuestConfigurationAssignmentReports.
 */
export class GuestConfigurationAssignmentReports {
  private readonly client: GuestConfigurationClient;

  /**
   * Initialize a new instance of the class GuestConfigurationAssignmentReports class.
   * @param client Reference to the service client
   */
  constructor(client: GuestConfigurationClient) {
    this.client = client;
  }

  /**
   * List all reports for the guest configuration assignment, latest report first.
   * @param resourceGroupName The resource group name.
   * @param vmName The name of the virtual machine.
   * @param guestConfigurationAssignmentName The guest configuration assignment name.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    vmName: string,
    guestConfigurationAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<GuestConfigurationAssignmentReportsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmName,
        guestConfigurationAssignmentName,
        options: operationOptions
      },
      listOperationSpec
    ) as Promise<GuestConfigurationAssignmentReportsListResponse>;
  }

  /**
   * Get a report for the guest configuration assignment, by reportId.
   * @param resourceGroupName The resource group name.
   * @param vmName The name of the virtual machine.
   * @param guestConfigurationAssignmentName The guest configuration assignment name.
   * @param reportId The GUID for the guest configuration assignment report.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    vmName: string,
    guestConfigurationAssignmentName: string,
    reportId: string,
    options?: coreHttp.OperationOptions
  ): Promise<GuestConfigurationAssignmentReportsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmName,
        guestConfigurationAssignmentName,
        reportId,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<GuestConfigurationAssignmentReportsGetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/{guestConfigurationAssignmentName}/reports",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GuestConfigurationAssignmentReportList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.guestConfigurationAssignmentName1
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/{guestConfigurationAssignmentName}/reports/{reportId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GuestConfigurationAssignmentReport
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.guestConfigurationAssignmentName1,
    Parameters.reportId
  ],
  serializer
};
