/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HDInsightJobManagementClient } from "../hDInsightJobManagementClient";
import {
  JobGetResponse,
  JobKillResponse,
  JobListResponse,
  JobListAfterJobIdOptionalParams,
  JobListAfterJobIdResponse,
  JobSubmitHiveJobResponse,
  JobSubmitMapReduceJobResponse,
  JobSubmitMapReduceStreamingJobResponse,
  JobSubmitPigJobResponse,
  JobSubmitSqoopJobResponse,
  JobGetAppStateResponse
} from "../models";

/**
 * Class representing a Job.
 */
export class Job {
  private readonly client: HDInsightJobManagementClient;

  /**
   * Initialize a new instance of the class Job class.
   * @param client Reference to the service client
   */
  constructor(client: HDInsightJobManagementClient) {
    this.client = client;
  }

  /**
   * Gets job details from the specified HDInsight cluster.
   * @param jobId The id of the job.
   * @param options The options parameters.
   */
  get(
    jobId: string,
    options?: coreHttp.OperationOptions
  ): Promise<JobGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { jobId, options: operationOptions },
      getOperationSpec
    ) as Promise<JobGetResponse>;
  }

  /**
   * Initiates cancel on given running job in the specified HDInsight.
   * @param jobId The id of the job.
   * @param options The options parameters.
   */
  kill(
    jobId: string,
    options?: coreHttp.OperationOptions
  ): Promise<JobKillResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { jobId, options: operationOptions },
      killOperationSpec
    ) as Promise<JobKillResponse>;
  }

  /**
   * Gets the list of jobs from the specified HDInsight cluster.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<JobListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<JobListResponse>;
  }

  /**
   * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
   * @param options The options parameters.
   */
  listAfterJobId(
    options?: JobListAfterJobIdOptionalParams
  ): Promise<JobListAfterJobIdResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listAfterJobIdOperationSpec
    ) as Promise<JobListAfterJobIdResponse>;
  }

  /**
   * Submits a Hive job to an HDInsight cluster.
   * @param content The content of the Hive job request.
   * @param options The options parameters.
   */
  submitHiveJob(
    content: coreHttp.HttpRequestBody,
    options?: coreHttp.OperationOptions
  ): Promise<JobSubmitHiveJobResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { content, options: operationOptions },
      submitHiveJobOperationSpec
    ) as Promise<JobSubmitHiveJobResponse>;
  }

  /**
   * Submits a MapReduce job to an HDInsight cluster.
   * @param content The content of the MapReduce job request.
   * @param options The options parameters.
   */
  submitMapReduceJob(
    content: string,
    options?: coreHttp.OperationOptions
  ): Promise<JobSubmitMapReduceJobResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { content, options: operationOptions },
      submitMapReduceJobOperationSpec
    ) as Promise<JobSubmitMapReduceJobResponse>;
  }

  /**
   * Submits a MapReduce streaming job to an HDInsight cluster.
   * @param content The content of the MapReduce job request.
   * @param options The options parameters.
   */
  submitMapReduceStreamingJob(
    content: string,
    options?: coreHttp.OperationOptions
  ): Promise<JobSubmitMapReduceStreamingJobResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { content, options: operationOptions },
      submitMapReduceStreamingJobOperationSpec
    ) as Promise<JobSubmitMapReduceStreamingJobResponse>;
  }

  /**
   * Submits a Pig job to an HDInsight cluster.
   * @param content The content of the Pig job request.
   * @param options The options parameters.
   */
  submitPigJob(
    content: string,
    options?: coreHttp.OperationOptions
  ): Promise<JobSubmitPigJobResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { content, options: operationOptions },
      submitPigJobOperationSpec
    ) as Promise<JobSubmitPigJobResponse>;
  }

  /**
   * Submits a Sqoop job to an HDInsight cluster.
   * @param content The content of the Sqoop job request.
   * @param options The options parameters.
   */
  submitSqoopJob(
    content: string,
    options?: coreHttp.OperationOptions
  ): Promise<JobSubmitSqoopJobResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { content, options: operationOptions },
      submitSqoopJobOperationSpec
    ) as Promise<JobSubmitSqoopJobResponse>;
  }

  /**
   * Gets application state from the specified HDInsight cluster.
   * @param appId The id of the job.
   * @param options The options parameters.
   */
  getAppState(
    appId: string,
    options?: coreHttp.OperationOptions
  ): Promise<JobGetAppStateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { appId, options: operationOptions },
      getAppStateOperationSpec
    ) as Promise<JobGetAppStateResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/templeton/v1/jobs/{jobId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobDetailRootJsonObject
    },
    default: {
      bodyMapper: Mappers.JobOperationsErrorResponse
    }
  },
  queryParameters: [Parameters.userName, Parameters.fields],
  urlParameters: [Parameters.clusterDnsName, Parameters.jobId],
  serializer
};
const killOperationSpec: coreHttp.OperationSpec = {
  path: "/templeton/v1/jobs/{jobId}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.JobDetailRootJsonObject
    },
    default: {
      bodyMapper: Mappers.JobOperationsErrorResponse
    }
  },
  queryParameters: [Parameters.userName],
  urlParameters: [Parameters.clusterDnsName, Parameters.jobId1],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path: "/templeton/v1/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "JobListJsonObject" }
          }
        },
        serializedName: "ArrayOfJobListJsonObject"
      }
    },
    default: {
      bodyMapper: Mappers.JobOperationsErrorResponse
    }
  },
  queryParameters: [Parameters.userName, Parameters.fields, Parameters.showall],
  urlParameters: [Parameters.clusterDnsName],
  serializer
};
const listAfterJobIdOperationSpec: coreHttp.OperationSpec = {
  path: "/templeton/v1/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "JobListJsonObject" }
          }
        },
        serializedName: "ArrayOfJobListJsonObject"
      }
    },
    default: {
      bodyMapper: Mappers.JobOperationsErrorResponse
    }
  },
  queryParameters: [
    Parameters.userName,
    Parameters.fields,
    Parameters.showall,
    Parameters.jobid,
    Parameters.numrecords
  ],
  urlParameters: [Parameters.clusterDnsName],
  serializer
};
const submitHiveJobOperationSpec: coreHttp.OperationSpec = {
  path: "/templeton/v1/hive",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.JobSubmissionJsonResponse
    },
    default: {
      bodyMapper: Mappers.JobOperationsErrorResponse
    }
  },
  requestBody: Parameters.content,
  queryParameters: [Parameters.userName],
  urlParameters: [Parameters.clusterDnsName],
  headerParameters: [Parameters.contentType],
  serializer
};
const submitMapReduceJobOperationSpec: coreHttp.OperationSpec = {
  path: "/templeton/v1/mapreduce/jar",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.JobSubmissionJsonResponse
    },
    default: {
      bodyMapper: Mappers.JobOperationsErrorResponse
    }
  },
  requestBody: Parameters.content1,
  queryParameters: [Parameters.userName],
  urlParameters: [Parameters.clusterDnsName],
  headerParameters: [Parameters.contentType1],
  serializer
};
const submitMapReduceStreamingJobOperationSpec: coreHttp.OperationSpec = {
  path: "/templeton/v1/mapreduce/streaming",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.JobSubmissionJsonResponse
    },
    default: {
      bodyMapper: Mappers.JobOperationsErrorResponse
    }
  },
  requestBody: Parameters.content1,
  queryParameters: [Parameters.userName],
  urlParameters: [Parameters.clusterDnsName],
  headerParameters: [Parameters.contentType1],
  serializer
};
const submitPigJobOperationSpec: coreHttp.OperationSpec = {
  path: "/templeton/v1/pig",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.JobSubmissionJsonResponse
    },
    default: {
      bodyMapper: Mappers.JobOperationsErrorResponse
    }
  },
  requestBody: Parameters.content2,
  queryParameters: [Parameters.userName],
  urlParameters: [Parameters.clusterDnsName],
  headerParameters: [Parameters.contentType1],
  serializer
};
const submitSqoopJobOperationSpec: coreHttp.OperationSpec = {
  path: "/templeton/v1/sqoop",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.JobSubmissionJsonResponse
    },
    default: {
      bodyMapper: Mappers.JobOperationsErrorResponse
    }
  },
  requestBody: Parameters.content3,
  queryParameters: [Parameters.userName],
  urlParameters: [Parameters.clusterDnsName],
  headerParameters: [Parameters.contentType1],
  serializer
};
const getAppStateOperationSpec: coreHttp.OperationSpec = {
  path: "/ws/v1/cluster/apps/{appId}/state",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppState
    },
    default: {
      bodyMapper: Mappers.JobOperationsErrorResponse
    }
  },
  urlParameters: [Parameters.clusterDnsName, Parameters.appId],
  serializer
};
