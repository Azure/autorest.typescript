/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The object containing the job details.
 */
export interface JobDetailRootJsonObject {
  /**
   * The callback URL, if any.
   */
  callback?: any;
  /**
   * The string representing completed status, for example 'done'.
   */
  completed?: string;
  /**
   * The job's exit value.
   */
  exitValue?: number;
  /**
   * The job ID.
   */
  id?: string;
  /**
   * The message returned.
   */
  msg?: any;
  /**
   * The parent job ID.
   */
  parentId?: string;
  /**
   * The job completion percentage, for example '75% complete'.
   */
  percentComplete?: string;
  /**
   * The object containing the job profile information.
   */
  profile?: Profile;
  /**
   * The object containing the job status information.
   */
  status?: Status;
  /**
   * The user name of the job creator.
   */
  user?: string;
  /**
   * The arguments passed in by the user.
   */
  userargs?: Userargs;
}

/**
 * The object containing the job profile information.
 */
export interface Profile {
  /**
   * The job configuration file.
   */
  jobFile?: string;
  /**
   * The full ID of the job.
   */
  jobId?: string;
  /**
   * The ID of the job.
   */
  jobID?: JobID;
  /**
   * The user-specified job name.
   */
  jobName?: string;
  /**
   * The name of the queue to which the job is submitted.
   */
  queueName?: string;
  /**
   * The link to the web-ui for details of the job.
   */
  url?: string;
  /**
   * The userid of the person who submitted the job.
   */
  user?: string;
}

/**
 * The object with the Job ID.
 */
export interface JobID {
  /**
   * The job number.
   */
  id?: number;
  /**
   * The jobTracker identifier.
   */
  jtIdentifier?: string;
}

/**
 * Gets or sets the object containing the job status information.
 */
export interface Status {
  /**
   * The progress made on the cleanup.
   */
  cleanupProgress?: number;
  /**
   * The information about any failures that have occurred.
   */
  failureInfo?: string;
  /**
   * The time at which the job completed. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.
   */
  finishTime?: number;
  /**
   * The history file of the job.
   */
  historyFile?: string;
  /**
   * The ACLs of the job.
   */
  jobACLs?: any;
  /**
   * Whether or not the job has completed.
   */
  jobComplete?: boolean;
  /**
   * The job configuration file.
   */
  jobFile?: string;
  /**
   * The full ID of the job.
   */
  jobId?: string;
  /**
   * The ID of the job.
   */
  jobID?: JobID;
  /**
   * The user-specified job name.
   */
  jobName?: string;
  /**
   * The priority of the job.
   */
  jobPriority?: string;
  /**
   * The progress made on the maps.
   */
  mapProgress?: number;
  /**
   * The amount of memory needed for the job.
   */
  neededMem?: number;
  /**
   * The number of slots reserved.
   */
  numReservedSlots?: number;
  /**
   * The number of slots used for the job.
   */
  numUsedSlots?: number;
  /**
   * The priority of the job.
   */
  priority?: string;
  /**
   * The job queue name.
   */
  queue?: string;
  /**
   * The progress made on the reduces.
   */
  reduceProgress?: number;
  /**
   * The amount of memory reserved for the job.
   */
  reservedMem?: number;
  /**
   * Whether or not the job has been retired.
   */
  retired?: boolean;
  /**
   * The current state of the job.
   */
  runState?: number;
  /**
   * The information about the scheduling of the job.
   */
  schedulingInfo?: string;
  /**
   * The progress made on the setup.
   */
  setupProgress?: number;
  /**
   * The time at which the job started. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.
   */
  startTime?: number;
  /**
   * The state of the job.
   */
  state?: string;
  /**
   * The link to the web-ui for details of the job.
   */
  trackingUrl?: string;
  /**
   * Whether job running in uber mode.
   */
  uber?: boolean;
  /**
   * The amount of memory used by the job.
   */
  usedMem?: number;
  /**
   * The userid of the person who submitted the job.
   */
  username?: string;
}

/**
 * Gets or sets the object containing the user arguments.
 */
export interface Userargs {
  /**
   * The list of args defined by the user.
   */
  readonly arg?: string[];
  /**
   * The callback URL, if any.
   */
  callback?: any;
  /**
   * The define properties defined by the user.
   */
  readonly define?: string[];
  /**
   * Whether or not the user enabled logs.
   */
  enablelog?: string;
  /**
   * The query defined by the user.
   */
  execute?: string;
  /**
   * The query file provided by the user.
   */
  file?: any;
  /**
   * The files defined by the user.
   */
  files?: any;
  /**
   * The JAR file provided by the user.
   */
  jar?: string;
  /**
   * The status directory defined by the user.
   */
  statusdir?: any;
}

/**
 * Describes the format of Error response.
 */
export interface JobOperationsErrorResponse {
  /**
   * Error message indicating why the operation failed.
   */
  error?: string;
}

/**
 * The List Job operation response.
 */
export interface JobListJsonObject {
  /**
   * The detail of the job.
   */
  detail?: JobDetailRootJsonObject;
  /**
   * The Id of the job.
   */
  id?: string;
}

/**
 * The job submission json response.
 */
export interface JobSubmissionJsonResponse {
  /**
   * The Id of the created job.
   */
  id?: string;
}

/**
 * The State of the application.
 */
export interface AppState {
  /**
   * The State of the application.
   */
  state?: ApplicationState;
}

/**
 * Defines values for ApplicationState.
 */
export type ApplicationState =
  | "NEW"
  | "NEW_SAVING"
  | "SUBMITTED"
  | "ACCEPTED"
  | "RUNNING"
  | "FINISHED"
  | "FINISHING"
  | "FAILED"
  | "KILLED";

/**
 * Contains response data for the get operation.
 */
export type JobGetResponse = JobDetailRootJsonObject & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobDetailRootJsonObject;
  };
};

/**
 * Contains response data for the kill operation.
 */
export type JobKillResponse = JobDetailRootJsonObject & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobDetailRootJsonObject;
  };
};

/**
 * Contains response data for the list operation.
 */
export type JobListResponse = JobListJsonObject[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobListJsonObject[];
  };
};

/**
 * Optional parameters.
 */
export interface JobListAfterJobIdOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * JobId from where to list jobs.
   */
  jobid?: string;
  /**
   * Number of jobs to fetch.
   */
  numrecords?: number;
}

/**
 * Contains response data for the listAfterJobId operation.
 */
export type JobListAfterJobIdResponse = JobListJsonObject[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobListJsonObject[];
  };
};

/**
 * Contains response data for the submitHiveJob operation.
 */
export type JobSubmitHiveJobResponse = JobSubmissionJsonResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobSubmissionJsonResponse;
  };
};

/**
 * Contains response data for the submitMapReduceJob operation.
 */
export type JobSubmitMapReduceJobResponse = JobSubmissionJsonResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobSubmissionJsonResponse;
  };
};

/**
 * Contains response data for the submitMapReduceStreamingJob operation.
 */
export type JobSubmitMapReduceStreamingJobResponse = JobSubmissionJsonResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobSubmissionJsonResponse;
  };
};

/**
 * Contains response data for the submitPigJob operation.
 */
export type JobSubmitPigJobResponse = JobSubmissionJsonResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobSubmissionJsonResponse;
  };
};

/**
 * Contains response data for the submitSqoopJob operation.
 */
export type JobSubmitSqoopJobResponse = JobSubmissionJsonResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobSubmissionJsonResponse;
  };
};

/**
 * Contains response data for the getAppState operation.
 */
export type JobGetAppStateResponse = AppState & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppState;
  };
};

/**
 * Optional parameters.
 */
export interface HDInsightJobManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
