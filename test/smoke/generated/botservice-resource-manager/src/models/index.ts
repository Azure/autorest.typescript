/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type ChannelUnion =
  | Channel
  | FacebookChannel
  | EmailChannel
  | MsTeamsChannel
  | SkypeChannel
  | KikChannel
  | WebChatChannel
  | DirectLineChannel
  | TelegramChannel
  | SmsChannel
  | SlackChannel;

/**
 * Azure resource
 */
export interface Resource {
  /**
   * Specifies the resource ID.
   */
  readonly id?: string;
  /**
   * Specifies the name of the resource.
   */
  readonly name?: string;
  /**
   * Specifies the location of the resource.
   */
  location?: string;
  /**
   * Specifies the type of the resource.
   */
  readonly type?: string;
  /**
   * Contains resource tags defined as key/value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the SKU of the resource.
   */
  sku?: Sku;
  /**
   * Required. Gets or sets the Kind of the resource.
   */
  kind?: Kind;
  /**
   * Entity Tag
   */
  etag?: string;
}

/**
 * The SKU of the cognitive services account.
 */
export interface Sku {
  /**
   * The sku name
   */
  name: SkuName;
  /**
   * Gets the sku tier. This is based on the SKU name.
   */
  readonly tier?: SkuTier;
}

/**
 * Bot resource definition
 */
export type Bot = Resource & {
  /**
   * The set of properties specific to bot resource
   */
  properties?: BotProperties;
};

/**
 * The parameters to provide for the Bot.
 */
export interface BotProperties {
  /**
   * The Name of the bot
   */
  displayName: string;
  /**
   * The description of the bot
   */
  description?: string;
  /**
   * The Icon Url of the bot
   */
  iconUrl?: string;
  /**
   * The bot's endpoint
   */
  endpoint: string;
  /**
   * The bot's endpoint version
   */
  readonly endpointVersion?: string;
  /**
   * Microsoft App Id for the bot
   */
  msaAppId: string;
  /**
   * Collection of channels for which the bot is configured
   */
  readonly configuredChannels?: string[];
  /**
   * Collection of channels for which the bot is enabled
   */
  readonly enabledChannels?: string[];
  /**
   * The Application Insights key
   */
  developerAppInsightKey?: string;
  /**
   * The Application Insights Api Key
   */
  developerAppInsightsApiKey?: string;
  /**
   * The Application Insights App Id
   */
  developerAppInsightsApplicationId?: string;
  /**
   * Collection of LUIS App Ids
   */
  luisAppIds?: string[];
  /**
   * The LUIS Key
   */
  luisKey?: string;
}

/**
 * Bot Service error object.
 */
export interface ErrorModel {
  /**
   * The error body.
   */
  error?: ErrorBody;
}

/**
 * Bot Service error body.
 */
export interface ErrorBody {
  /**
   * error code
   */
  code: string;
  /**
   * error message
   */
  message: string;
}

/**
 * The list of  bot service operation response.
 */
export interface BotResponseList {
  /**
   * The link used to get the next page of bot service resources.
   */
  nextLink?: string;
  /**
   * Gets the list of bot service results and their properties.
   */
  readonly value?: Bot[];
}

/**
 * Bot channel resource definition
 */
export type BotChannel = Resource & {
  /**
   * The set of properties specific to bot channel resource
   */
  properties?: ChannelUnion;
};

/**
 * Channel definition
 */
export interface Channel {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  channelName:
    | "FacebookChannel"
    | "EmailChannel"
    | "MsTeamsChannel"
    | "SkypeChannel"
    | "KikChannel"
    | "WebChatChannel"
    | "DirectLineChannel"
    | "TelegramChannel"
    | "SmsChannel"
    | "SlackChannel";
}

/**
 * The list of bot service channel operation response.
 */
export interface ChannelResponseList {
  /**
   * The link used to get the next page of bot service channel resources.
   */
  nextLink?: string;
  /**
   * Gets the list of bot service channel results and their properties.
   */
  readonly value?: BotChannel[];
}

/**
 * The request body for a request to Bot Service Management to check availability of a bot name.
 */
export interface CheckNameAvailabilityRequestBody {
  /**
   * the name of the bot for which availability needs to be checked.
   */
  name?: string;
  /**
   * the type of the bot for which availability needs to be checked
   */
  type?: string;
}

/**
 * The response body returned for a request to Bot Service Management to check availability of a bot name.
 */
export interface CheckNameAvailabilityResponseBody {
  /**
   * indicates if the bot name is valid.
   */
  valid?: boolean;
  /**
   * additional message from the bot management api showing why a bot name is not available
   */
  message?: string;
}

/**
 * The list of bot service operation response.
 */
export interface OperationEntityListResult {
  /**
   * The link used to get the next page of operations.
   */
  nextLink?: string;
  /**
   * The list of operations.
   */
  value?: OperationEntity[];
}

/**
 * The operations supported by Bot Service Management.
 */
export interface OperationEntity {
  /**
   * Operation name: {provider}/{resource}/{operation}.
   */
  name?: string;
  /**
   * The operation supported by Bot Service Management.
   */
  display?: OperationDisplayInfo;
  /**
   * The origin of the operation.
   */
  origin?: string;
  /**
   * Additional properties.
   */
  properties?: any;
}

/**
 * The operation supported by Bot Service Management.
 */
export interface OperationDisplayInfo {
  /**
   * The description of the operation.
   */
  description?: string;
  /**
   * The action that users can perform, based on their permission level.
   */
  operation?: string;
  /**
   * Service provider: Microsoft Bot Service.
   */
  provider?: string;
  /**
   * Resource on which the operation is performed.
   */
  resource?: string;
}

/**
 * The list of bot service providers response.
 */
export interface ServiceProviderResponseList {
  /**
   * The link used to get the next page of bot service providers.
   */
  nextLink?: string;
  /**
   * Gets the list of bot service providers and their properties.
   */
  readonly value?: ServiceProvider[];
}

/**
 * Service Provider Definition
 */
export interface ServiceProvider {
  /**
   * The Properties of a Service Provider Object
   */
  properties?: ServiceProviderProperties;
}

/**
 * The Object used to describe a Service Provider supported by Bot Service
 */
export interface ServiceProviderProperties {
  /**
   * Id for Service Provider
   */
  readonly id?: string;
  /**
   * Display Name of the Service Provider
   */
  readonly displayName?: string;
  /**
   * Display Name of the Service Provider
   */
  readonly serviceProviderName?: string;
  /**
   * Display Name of the Service Provider
   */
  readonly devPortalUrl?: string;
  /**
   * Display Name of the Service Provider
   */
  readonly iconUrl?: string;
  /**
   * The list of parameters for the Service Provider
   */
  parameters?: ServiceProviderParameter[];
}

/**
 * Extra Parameters specific to each Service Provider
 */
export interface ServiceProviderParameter {
  /**
   * Name of the Service Provider
   */
  readonly name?: string;
  /**
   * Type of the Service Provider
   */
  readonly type?: string;
  /**
   * Display Name of the Service Provider
   */
  readonly displayName?: string;
  /**
   * Description of the Service Provider
   */
  readonly description?: string;
  /**
   * Help Url for the  Service Provider
   */
  readonly helpUrl?: string;
  /**
   * Default Name for the Service Provider
   */
  readonly default?: string;
}

/**
 * Bot channel resource definition
 */
export type ConnectionSetting = Resource & {
  /**
   * The set of properties specific to bot channel resource
   */
  properties?: ConnectionSettingProperties;
};

/**
 * Properties for a Connection Setting Item
 */
export interface ConnectionSettingProperties {
  /**
   * Client Id associated with the Connection Setting.
   */
  clientId?: string;
  /**
   * Setting Id set by the service for the Connection Setting.
   */
  readonly settingId?: string;
  /**
   * Client Secret associated with the Connection Setting
   */
  clientSecret?: string;
  /**
   * Scopes associated with the Connection Setting
   */
  scopes?: string;
  /**
   * Service Provider Id associated with the Connection Setting
   */
  serviceProviderId?: string;
  /**
   * Service Provider Display Name associated with the Connection Setting
   */
  serviceProviderDisplayName?: string;
  /**
   * Service Provider Parameters associated with the Connection Setting
   */
  parameters?: ConnectionSettingParameter[];
}

/**
 * Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
 */
export interface ConnectionSettingParameter {
  /**
   * Key for the Connection Setting Parameter.
   */
  key?: string;
  /**
   * Value associated with the Connection Setting Parameter.
   */
  value?: string;
}

/**
 * The list of bot service connection settings response.
 */
export interface ConnectionSettingResponseList {
  /**
   * The link used to get the next page of bot service connection setting resources.
   */
  nextLink?: string;
  /**
   * Gets the list of bot service connection settings and their properties.
   */
  readonly value?: ConnectionSetting[];
}

/**
 * A request to Bot Service Management to check availability of an Enterprise Channel name.
 */
export interface EnterpriseChannelCheckNameAvailabilityRequest {
  /**
   * The name of the Enterprise Channel for which availability needs to be checked.
   */
  name?: string;
}

/**
 * A request to Bot Service Management to check availability of an Enterprise Channel name.
 */
export interface EnterpriseChannelCheckNameAvailabilityResponse {
  /**
   * Indicates if the Enterprise Channel name is valid.
   */
  valid?: boolean;
  /**
   * Additional information about why a bot name is not available.
   */
  message?: string;
}

/**
 * The list of  bot service operation response.
 */
export interface EnterpriseChannelResponseList {
  /**
   * The link used to get the next page of bot service resources.
   */
  nextLink?: string;
  /**
   * The list of Enterprise Channels and their properties.
   */
  readonly value?: EnterpriseChannel[];
}

/**
 * Enterprise Channel resource definition
 */
export type EnterpriseChannel = Resource & {
  /**
   * The set of properties specific to an Enterprise Channel resource.
   */
  properties?: EnterpriseChannelProperties;
};

/**
 * The parameters to provide for the Enterprise Channel.
 */
export interface EnterpriseChannelProperties {
  /**
   * The current state of the Enterprise Channel.
   */
  state?: EnterpriseChannelState;
  /**
   * The nodes associated with the Enterprise Channel.
   */
  nodes: EnterpriseChannelNode[];
}

/**
 * The properties specific to an Enterprise Channel Node.
 */
export interface EnterpriseChannelNode {
  /**
   * Id of Enterprise Channel Node. This is generated by the Bot Framework.
   */
  readonly id?: string;
  /**
   * The current state of the Enterprise Channel Node.
   */
  state?: EnterpriseChannelNodeState;
  /**
   * The name of the Enterprise Channel Node.
   */
  name: string;
  /**
   * The sku of the Enterprise Channel Node.
   */
  azureSku: string;
  /**
   * The location of the Enterprise Channel Node.
   */
  azureLocation: string;
}

/**
 * Facebook channel definition
 */
export type FacebookChannel = Channel & {
  /**
   * The set of properties specific to bot facebook channel
   */
  properties?: FacebookChannelProperties;
};

/**
 * The parameters to provide for the Facebook channel.
 */
export interface FacebookChannelProperties {
  /**
   * Verify token. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  readonly verifyToken?: string;
  /**
   * The list of Facebook pages
   */
  pages?: FacebookPage[];
  /**
   * Facebook application id
   */
  appId: string;
  /**
   * Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  appSecret: string;
  /**
   * Callback Url
   */
  readonly callbackUrl?: string;
  /**
   * Whether this channel is enabled for the bot
   */
  isEnabled: boolean;
}

/**
 * A Facebook page for Facebook channel registration
 */
export interface FacebookPage {
  /**
   * Page id
   */
  id: string;
  /**
   * Facebook application access token. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  accessToken: string;
}

/**
 * Email channel definition
 */
export type EmailChannel = Channel & {
  /**
   * The set of properties specific to email channel resource
   */
  properties?: EmailChannelProperties;
};

/**
 * The parameters to provide for the Email channel.
 */
export interface EmailChannelProperties {
  /**
   * The email address
   */
  emailAddress: string;
  /**
   * The password for the email address. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  password: string;
  /**
   * Whether this channel is enabled for the bot
   */
  isEnabled: boolean;
}

/**
 * Microsoft Teams channel definition
 */
export type MsTeamsChannel = Channel & {
  /**
   * The set of properties specific to Microsoft Teams channel resource
   */
  properties?: MsTeamsChannelProperties;
};

/**
 * The parameters to provide for the Microsoft Teams channel.
 */
export interface MsTeamsChannelProperties {
  /**
   * Enable calling for Microsoft Teams channel
   */
  enableCalling?: boolean;
  /**
   * Webhook for Microsoft Teams channel calls
   */
  callingWebHook?: string;
  /**
   * Whether this channel is enabled for the bot
   */
  isEnabled: boolean;
}

/**
 * Skype channel definition
 */
export type SkypeChannel = Channel & {
  /**
   * The set of properties specific to Skype channel resource
   */
  properties?: SkypeChannelProperties;
};

/**
 * The parameters to provide for the Microsoft Teams channel.
 */
export interface SkypeChannelProperties {
  /**
   * Enable messaging for Skype channel
   */
  enableMessaging?: boolean;
  /**
   * Enable media cards for Skype channel
   */
  enableMediaCards?: boolean;
  /**
   * Enable video for Skype channel
   */
  enableVideo?: boolean;
  /**
   * Enable calling for Skype channel
   */
  enableCalling?: boolean;
  /**
   * Enable screen sharing for Skype channel
   */
  enableScreenSharing?: boolean;
  /**
   * Enable groups for Skype channel
   */
  enableGroups?: boolean;
  /**
   * Group mode for Skype channel
   */
  groupsMode?: string;
  /**
   * Calling web hook for Skype channel
   */
  callingWebHook?: string;
  /**
   * Whether this channel is enabled for the bot
   */
  isEnabled: boolean;
}

/**
 * Kik channel definition
 */
export type KikChannel = Channel & {
  /**
   * The set of properties specific to Kik channel resource
   */
  properties?: KikChannelProperties;
};

/**
 * The parameters to provide for the Kik channel.
 */
export interface KikChannelProperties {
  /**
   * The Kik user name
   */
  userName: string;
  /**
   * Kik API key. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  apiKey: string;
  /**
   * Whether this channel is validated for the bot
   */
  isValidated?: boolean;
  /**
   * Whether this channel is enabled for the bot
   */
  isEnabled: boolean;
}

/**
 * Web Chat channel definition
 */
export type WebChatChannel = Channel & {
  /**
   * The set of properties specific to Web Chat channel resource
   */
  properties?: WebChatChannelProperties;
};

/**
 * The parameters to provide for the Web Chat channel.
 */
export interface WebChatChannelProperties {
  /**
   * Web chat control embed code
   */
  readonly webChatEmbedCode?: string;
  /**
   * The list of Web Chat sites
   */
  sites?: WebChatSite[];
}

/**
 * A site for the Webchat channel
 */
export interface WebChatSite {
  /**
   * Site Id
   */
  readonly siteId?: string;
  /**
   * Site name
   */
  siteName: string;
  /**
   * Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  readonly key?: string;
  /**
   * Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  readonly key2?: string;
  /**
   * Whether this site is enabled for DirectLine channel
   */
  isEnabled: boolean;
  /**
   * Whether this site is enabled for preview versions of Webchat
   */
  enablePreview: boolean;
}

/**
 * Direct Line channel definition
 */
export type DirectLineChannel = Channel & {
  /**
   * The set of properties specific to Direct Line channel resource
   */
  properties?: DirectLineChannelProperties;
};

/**
 * The parameters to provide for the Direct Line channel.
 */
export interface DirectLineChannelProperties {
  /**
   * The list of Direct Line sites
   */
  sites?: DirectLineSite[];
}

/**
 * A site for the Direct Line channel
 */
export interface DirectLineSite {
  /**
   * Site Id
   */
  readonly siteId?: string;
  /**
   * Site name
   */
  siteName: string;
  /**
   * Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  readonly key?: string;
  /**
   * Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  readonly key2?: string;
  /**
   * Whether this site is enabled for DirectLine channel.
   */
  isEnabled: boolean;
  /**
   * Whether this site is enabled for Bot Framework V1 protocol.
   */
  isV1Enabled: boolean;
  /**
   * Whether this site is enabled for Bot Framework V1 protocol.
   */
  isV3Enabled: boolean;
  /**
   * Whether this site is enabled for authentication with Bot Framework.
   */
  isSecureSiteEnabled?: boolean;
  /**
   * List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
   */
  trustedOrigins?: string[];
}

/**
 * Telegram channel definition
 */
export type TelegramChannel = Channel & {
  /**
   * The set of properties specific to Telegram channel resource
   */
  properties?: TelegramChannelProperties;
};

/**
 * The parameters to provide for the Telegram channel.
 */
export interface TelegramChannelProperties {
  /**
   * The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  accessToken: string;
  /**
   * Whether this channel is validated for the bot
   */
  isValidated?: boolean;
  /**
   * Whether this channel is enabled for the bot
   */
  isEnabled: boolean;
}

/**
 * Sms channel definition
 */
export type SmsChannel = Channel & {
  /**
   * The set of properties specific to Sms channel resource
   */
  properties?: SmsChannelProperties;
};

/**
 * The parameters to provide for the Sms channel.
 */
export interface SmsChannelProperties {
  /**
   * The Sms phone
   */
  phone: string;
  /**
   * The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  accountSID: string;
  /**
   * The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  authToken: string;
  /**
   * Whether this channel is validated for the bot
   */
  isValidated?: boolean;
  /**
   * Whether this channel is enabled for the bot
   */
  isEnabled: boolean;
}

/**
 * Slack channel definition
 */
export type SlackChannel = Channel & {
  /**
   * The set of properties specific to Slack channel resource
   */
  properties?: SlackChannelProperties;
};

/**
 * The parameters to provide for the Slack channel.
 */
export interface SlackChannelProperties {
  /**
   * The Slack client id
   */
  clientId: string;
  /**
   * The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  clientSecret: string;
  /**
   * The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
   */
  verificationToken: string;
  /**
   * The Slack landing page Url
   */
  landingPageUrl?: string;
  /**
   * The Slack redirect action
   */
  readonly redirectAction?: string;
  /**
   * The Sms auth token
   */
  readonly lastSubmissionId?: string;
  /**
   * Whether to register the settings before OAuth validation is performed. Recommended to True.
   */
  readonly registerBeforeOAuthFlow?: boolean;
  /**
   * Whether this channel is validated for the bot
   */
  readonly isValidated?: boolean;
  /**
   * Whether this channel is enabled for the bot
   */
  isEnabled: boolean;
}

/**
 * The display name of a connection Item Setting registered with the Bot
 */
export interface ConnectionItemName {
  /**
   * Connection Item name that has been added in the API
   */
  readonly name?: string;
}

/**
 * Defines values for SkuName.
 */
export type SkuName = "F0" | "S1";
/**
 * Defines values for SkuTier.
 */
export type SkuTier = "Free" | "Standard";
/**
 * Defines values for Kind.
 */
export type Kind = "sdk" | "designer" | "bot" | "function";
/**
 * Defines values for EnterpriseChannelState.
 */
export type EnterpriseChannelState =
  | "Creating"
  | "CreateFailed"
  | "Started"
  | "Starting"
  | "StartFailed"
  | "Stopped"
  | "Stopping"
  | "StopFailed"
  | "Deleting"
  | "DeleteFailed";
/**
 * Defines values for EnterpriseChannelNodeState.
 */
export type EnterpriseChannelNodeState =
  | "Creating"
  | "CreateFailed"
  | "Started"
  | "Starting"
  | "StartFailed"
  | "Stopped"
  | "Stopping"
  | "StopFailed"
  | "Deleting"
  | "DeleteFailed";
/**
 * Defines values for ChannelName.
 */
export type ChannelName =
  | "FacebookChannel"
  | "EmailChannel"
  | "KikChannel"
  | "TelegramChannel"
  | "SlackChannel"
  | "MsTeamsChannel"
  | "SkypeChannel"
  | "WebChatChannel"
  | "DirectLineChannel"
  | "SmsChannel";

/**
 * Contains response data for the create operation.
 */
export type BotsCreateResponse = Bot & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Bot;
  };
};

/**
 * Contains response data for the update operation.
 */
export type BotsUpdateResponse = Bot & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Bot;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BotsGetResponse = Bot & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Bot;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type BotsListByResourceGroupResponse = BotResponseList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BotResponseList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type BotsListResponse = BotResponseList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BotResponseList;
  };
};

/**
 * Contains response data for the getCheckNameAvailability operation.
 */
export type BotsGetCheckNameAvailabilityResponse = CheckNameAvailabilityResponseBody & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameAvailabilityResponseBody;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type BotsListByResourceGroupNextResponse = BotResponseList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BotResponseList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type BotsListNextResponse = BotResponseList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BotResponseList;
  };
};

/**
 * Contains response data for the create operation.
 */
export type ChannelsCreateResponse = BotChannel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BotChannel;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ChannelsUpdateResponse = BotChannel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BotChannel;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ChannelsGetResponse = BotChannel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BotChannel;
  };
};

/**
 * Contains response data for the listWithKeys operation.
 */
export type ChannelsListWithKeysResponse = BotChannel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BotChannel;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ChannelsListByResourceGroupResponse = ChannelResponseList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChannelResponseList;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ChannelsListByResourceGroupNextResponse = ChannelResponseList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChannelResponseList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationEntityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationEntityListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationEntityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationEntityListResult;
  };
};

/**
 * Contains response data for the listServiceProviders operation.
 */
export type BotConnectionListServiceProvidersResponse = ServiceProviderResponseList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceProviderResponseList;
  };
};

/**
 * Contains response data for the listWithSecrets operation.
 */
export type BotConnectionListWithSecretsResponse = ConnectionSetting & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionSetting;
  };
};

/**
 * Contains response data for the create operation.
 */
export type BotConnectionCreateResponse = ConnectionSetting & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionSetting;
  };
};

/**
 * Contains response data for the update operation.
 */
export type BotConnectionUpdateResponse = ConnectionSetting & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionSetting;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BotConnectionGetResponse = ConnectionSetting & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionSetting;
  };
};

/**
 * Contains response data for the listByBotService operation.
 */
export type BotConnectionListByBotServiceResponse = ConnectionSettingResponseList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionSettingResponseList;
  };
};

/**
 * Contains response data for the listByBotServiceNext operation.
 */
export type BotConnectionListByBotServiceNextResponse = ConnectionSettingResponseList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionSettingResponseList;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type EnterpriseChannelsCheckNameAvailabilityResponse = EnterpriseChannelCheckNameAvailabilityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EnterpriseChannelCheckNameAvailabilityResponse;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type EnterpriseChannelsListByResourceGroupResponse = EnterpriseChannelResponseList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EnterpriseChannelResponseList;
  };
};

/**
 * Contains response data for the create operation.
 */
export type EnterpriseChannelsCreateResponse = EnterpriseChannel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EnterpriseChannel;
  };
};

/**
 * Contains response data for the update operation.
 */
export type EnterpriseChannelsUpdateResponse = EnterpriseChannel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EnterpriseChannel;
  };
};

/**
 * Contains response data for the get operation.
 */
export type EnterpriseChannelsGetResponse = EnterpriseChannel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EnterpriseChannel;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type EnterpriseChannelsListByResourceGroupNextResponse = EnterpriseChannelResponseList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EnterpriseChannelResponseList;
  };
};

/**
 * Optional parameters.
 */
export interface AzureBotServiceOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
