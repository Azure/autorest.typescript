/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Bot: coreHttp.CompositeMapper = {
  serializedName: "Bot",
  type: {
    name: "Composite",
    className: "Bot",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BotProperties"
        }
      }
    }
  }
};

export const BotProperties: coreHttp.CompositeMapper = {
  serializedName: "BotProperties",
  type: {
    name: "Composite",
    className: "BotProperties",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      iconUrl: {
        serializedName: "iconUrl",
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        required: true,
        type: {
          name: "String"
        }
      },
      endpointVersion: {
        serializedName: "endpointVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      msaAppId: {
        serializedName: "msaAppId",
        required: true,
        type: {
          name: "String"
        }
      },
      configuredChannels: {
        serializedName: "configuredChannels",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "BotPropertiesConfiguredChannelsItem"
          }
        }
      },
      enabledChannels: {
        serializedName: "enabledChannels",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "BotPropertiesEnabledChannelsItem"
          }
        }
      },
      developerAppInsightKey: {
        serializedName: "developerAppInsightKey",
        type: {
          name: "String"
        }
      },
      developerAppInsightsApiKey: {
        serializedName: "developerAppInsightsApiKey",
        type: {
          name: "String"
        }
      },
      developerAppInsightsApplicationId: {
        serializedName: "developerAppInsightsApplicationId",
        type: {
          name: "String"
        }
      },
      luisAppIds: {
        serializedName: "luisAppIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "BotPropertiesLuisAppIdsItem"
          }
        }
      },
      luisKey: {
        serializedName: "luisKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: coreHttp.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorBody"
        }
      }
    }
  }
};

export const ErrorBody: coreHttp.CompositeMapper = {
  serializedName: "ErrorBody",
  type: {
    name: "Composite",
    className: "ErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BotResponseList: coreHttp.CompositeMapper = {
  serializedName: "BotResponseList",
  type: {
    name: "Composite",
    className: "BotResponseList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Bot" } }
        }
      }
    }
  }
};

export const BotChannel: coreHttp.CompositeMapper = {
  serializedName: "BotChannel",
  type: {
    name: "Composite",
    className: "BotChannel",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "Channel"
        }
      }
    }
  }
};

export const Channel: coreHttp.CompositeMapper = {
  serializedName: "Channel",
  type: {
    name: "Composite",
    className: "Channel",
    uberParent: "Channel",
    polymorphicDiscriminator: {
      serializedName: "channelName",
      clientName: "channelName"
    },
    modelProperties: {
      channelName: {
        serializedName: "channelName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ChannelResponseList: coreHttp.CompositeMapper = {
  serializedName: "ChannelResponseList",
  type: {
    name: "Composite",
    className: "ChannelResponseList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "BotChannel" } }
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequestBody: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityRequestBody",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequestBody",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResponseBody: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResponseBody",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponseBody",
    modelProperties: {
      valid: {
        serializedName: "valid",
        type: {
          name: "Boolean"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationEntityListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationEntityListResult",
  type: {
    name: "Composite",
    className: "OperationEntityListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OperationEntity" } }
        }
      }
    }
  }
};

export const OperationEntity: coreHttp.CompositeMapper = {
  serializedName: "OperationEntity",
  type: {
    name: "Composite",
    className: "OperationEntity",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplayInfo"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const OperationDisplayInfo: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplayInfo",
  type: {
    name: "Composite",
    className: "OperationDisplayInfo",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceProviderResponseList: coreHttp.CompositeMapper = {
  serializedName: "ServiceProviderResponseList",
  type: {
    name: "Composite",
    className: "ServiceProviderResponseList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ServiceProvider" } }
        }
      }
    }
  }
};

export const ServiceProvider: coreHttp.CompositeMapper = {
  serializedName: "ServiceProvider",
  type: {
    name: "Composite",
    className: "ServiceProvider",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ServiceProviderProperties"
        }
      }
    }
  }
};

export const ServiceProviderProperties: coreHttp.CompositeMapper = {
  serializedName: "ServiceProviderProperties",
  type: {
    name: "Composite",
    className: "ServiceProviderProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceProviderName: {
        serializedName: "serviceProviderName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      devPortalUrl: {
        serializedName: "devPortalUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      iconUrl: {
        serializedName: "iconUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServiceProviderParameter" }
          }
        }
      }
    }
  }
};

export const ServiceProviderParameter: coreHttp.CompositeMapper = {
  serializedName: "ServiceProviderParameter",
  type: {
    name: "Composite",
    className: "ServiceProviderParameter",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      helpUrl: {
        serializedName: "helpUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      default: {
        serializedName: "default",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionSetting: coreHttp.CompositeMapper = {
  serializedName: "ConnectionSetting",
  type: {
    name: "Composite",
    className: "ConnectionSetting",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ConnectionSettingProperties"
        }
      }
    }
  }
};

export const ConnectionSettingProperties: coreHttp.CompositeMapper = {
  serializedName: "ConnectionSettingProperties",
  type: {
    name: "Composite",
    className: "ConnectionSettingProperties",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      settingId: {
        serializedName: "settingId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        type: {
          name: "String"
        }
      },
      scopes: {
        serializedName: "scopes",
        type: {
          name: "String"
        }
      },
      serviceProviderId: {
        serializedName: "serviceProviderId",
        type: {
          name: "String"
        }
      },
      serviceProviderDisplayName: {
        serializedName: "serviceProviderDisplayName",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectionSettingParameter" }
          }
        }
      }
    }
  }
};

export const ConnectionSettingParameter: coreHttp.CompositeMapper = {
  serializedName: "ConnectionSettingParameter",
  type: {
    name: "Composite",
    className: "ConnectionSettingParameter",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionSettingResponseList: coreHttp.CompositeMapper = {
  serializedName: "ConnectionSettingResponseList",
  type: {
    name: "Composite",
    className: "ConnectionSettingResponseList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectionSetting" }
          }
        }
      }
    }
  }
};

export const EnterpriseChannelCheckNameAvailabilityRequest: coreHttp.CompositeMapper = {
  serializedName: "EnterpriseChannelCheckNameAvailabilityRequest",
  type: {
    name: "Composite",
    className: "EnterpriseChannelCheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnterpriseChannelCheckNameAvailabilityResponse: coreHttp.CompositeMapper = {
  serializedName: "EnterpriseChannelCheckNameAvailabilityResponse",
  type: {
    name: "Composite",
    className: "EnterpriseChannelCheckNameAvailabilityResponse",
    modelProperties: {
      valid: {
        serializedName: "valid",
        type: {
          name: "Boolean"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnterpriseChannelResponseList: coreHttp.CompositeMapper = {
  serializedName: "EnterpriseChannelResponseList",
  type: {
    name: "Composite",
    className: "EnterpriseChannelResponseList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnterpriseChannel" }
          }
        }
      }
    }
  }
};

export const EnterpriseChannel: coreHttp.CompositeMapper = {
  serializedName: "EnterpriseChannel",
  type: {
    name: "Composite",
    className: "EnterpriseChannel",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EnterpriseChannelProperties"
        }
      }
    }
  }
};

export const EnterpriseChannelProperties: coreHttp.CompositeMapper = {
  serializedName: "EnterpriseChannelProperties",
  type: {
    name: "Composite",
    className: "EnterpriseChannelProperties",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      nodes: {
        serializedName: "nodes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnterpriseChannelNode" }
          }
        }
      }
    }
  }
};

export const EnterpriseChannelNode: coreHttp.CompositeMapper = {
  serializedName: "EnterpriseChannelNode",
  type: {
    name: "Composite",
    className: "EnterpriseChannelNode",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      azureSku: {
        serializedName: "azureSku",
        required: true,
        type: {
          name: "String"
        }
      },
      azureLocation: {
        serializedName: "azureLocation",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FacebookChannel: coreHttp.CompositeMapper = {
  serializedName: "FacebookChannel",
  type: {
    name: "Composite",
    className: "FacebookChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FacebookChannelProperties"
        }
      }
    }
  }
};

export const FacebookChannelProperties: coreHttp.CompositeMapper = {
  serializedName: "FacebookChannelProperties",
  type: {
    name: "Composite",
    className: "FacebookChannelProperties",
    modelProperties: {
      verifyToken: {
        serializedName: "verifyToken",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      pages: {
        serializedName: "pages",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FacebookPage" } }
        }
      },
      appId: {
        serializedName: "appId",
        required: true,
        type: {
          name: "String"
        }
      },
      appSecret: {
        serializedName: "appSecret",
        required: true,
        type: {
          name: "String"
        }
      },
      callbackUrl: {
        serializedName: "callbackUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FacebookPage: coreHttp.CompositeMapper = {
  serializedName: "FacebookPage",
  type: {
    name: "Composite",
    className: "FacebookPage",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      accessToken: {
        serializedName: "accessToken",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EmailChannel: coreHttp.CompositeMapper = {
  serializedName: "EmailChannel",
  type: {
    name: "Composite",
    className: "EmailChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EmailChannelProperties"
        }
      }
    }
  }
};

export const EmailChannelProperties: coreHttp.CompositeMapper = {
  serializedName: "EmailChannelProperties",
  type: {
    name: "Composite",
    className: "EmailChannelProperties",
    modelProperties: {
      emailAddress: {
        serializedName: "emailAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MsTeamsChannel: coreHttp.CompositeMapper = {
  serializedName: "MsTeamsChannel",
  type: {
    name: "Composite",
    className: "MsTeamsChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MsTeamsChannelProperties"
        }
      }
    }
  }
};

export const MsTeamsChannelProperties: coreHttp.CompositeMapper = {
  serializedName: "MsTeamsChannelProperties",
  type: {
    name: "Composite",
    className: "MsTeamsChannelProperties",
    modelProperties: {
      enableCalling: {
        serializedName: "enableCalling",
        type: {
          name: "Boolean"
        }
      },
      callingWebHook: {
        serializedName: "callingWebHook",
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SkypeChannel: coreHttp.CompositeMapper = {
  serializedName: "SkypeChannel",
  type: {
    name: "Composite",
    className: "SkypeChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SkypeChannelProperties"
        }
      }
    }
  }
};

export const SkypeChannelProperties: coreHttp.CompositeMapper = {
  serializedName: "SkypeChannelProperties",
  type: {
    name: "Composite",
    className: "SkypeChannelProperties",
    modelProperties: {
      enableMessaging: {
        serializedName: "enableMessaging",
        type: {
          name: "Boolean"
        }
      },
      enableMediaCards: {
        serializedName: "enableMediaCards",
        type: {
          name: "Boolean"
        }
      },
      enableVideo: {
        serializedName: "enableVideo",
        type: {
          name: "Boolean"
        }
      },
      enableCalling: {
        serializedName: "enableCalling",
        type: {
          name: "Boolean"
        }
      },
      enableScreenSharing: {
        serializedName: "enableScreenSharing",
        type: {
          name: "Boolean"
        }
      },
      enableGroups: {
        serializedName: "enableGroups",
        type: {
          name: "Boolean"
        }
      },
      groupsMode: {
        serializedName: "groupsMode",
        type: {
          name: "String"
        }
      },
      callingWebHook: {
        serializedName: "callingWebHook",
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const KikChannel: coreHttp.CompositeMapper = {
  serializedName: "KikChannel",
  type: {
    name: "Composite",
    className: "KikChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "KikChannelProperties"
        }
      }
    }
  }
};

export const KikChannelProperties: coreHttp.CompositeMapper = {
  serializedName: "KikChannelProperties",
  type: {
    name: "Composite",
    className: "KikChannelProperties",
    modelProperties: {
      userName: {
        serializedName: "userName",
        required: true,
        type: {
          name: "String"
        }
      },
      apiKey: {
        serializedName: "apiKey",
        required: true,
        type: {
          name: "String"
        }
      },
      isValidated: {
        serializedName: "isValidated",
        type: {
          name: "Boolean"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const WebChatChannel: coreHttp.CompositeMapper = {
  serializedName: "WebChatChannel",
  type: {
    name: "Composite",
    className: "WebChatChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "WebChatChannelProperties"
        }
      }
    }
  }
};

export const WebChatChannelProperties: coreHttp.CompositeMapper = {
  serializedName: "WebChatChannelProperties",
  type: {
    name: "Composite",
    className: "WebChatChannelProperties",
    modelProperties: {
      webChatEmbedCode: {
        serializedName: "webChatEmbedCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sites: {
        serializedName: "sites",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "WebChatSite" } }
        }
      }
    }
  }
};

export const WebChatSite: coreHttp.CompositeMapper = {
  serializedName: "WebChatSite",
  type: {
    name: "Composite",
    className: "WebChatSite",
    modelProperties: {
      siteId: {
        serializedName: "siteId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      siteName: {
        serializedName: "siteName",
        required: true,
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      key2: {
        serializedName: "key2",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      enablePreview: {
        serializedName: "enablePreview",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DirectLineChannel: coreHttp.CompositeMapper = {
  serializedName: "DirectLineChannel",
  type: {
    name: "Composite",
    className: "DirectLineChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DirectLineChannelProperties"
        }
      }
    }
  }
};

export const DirectLineChannelProperties: coreHttp.CompositeMapper = {
  serializedName: "DirectLineChannelProperties",
  type: {
    name: "Composite",
    className: "DirectLineChannelProperties",
    modelProperties: {
      sites: {
        serializedName: "sites",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DirectLineSite" } }
        }
      }
    }
  }
};

export const DirectLineSite: coreHttp.CompositeMapper = {
  serializedName: "DirectLineSite",
  type: {
    name: "Composite",
    className: "DirectLineSite",
    modelProperties: {
      siteId: {
        serializedName: "siteId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      siteName: {
        serializedName: "siteName",
        required: true,
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      key2: {
        serializedName: "key2",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      isV1Enabled: {
        serializedName: "isV1Enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      isV3Enabled: {
        serializedName: "isV3Enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      isSecureSiteEnabled: {
        serializedName: "isSecureSiteEnabled",
        type: {
          name: "Boolean"
        }
      },
      trustedOrigins: {
        serializedName: "trustedOrigins",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "DirectLineSiteTrustedOriginsItem"
          }
        }
      }
    }
  }
};

export const TelegramChannel: coreHttp.CompositeMapper = {
  serializedName: "TelegramChannel",
  type: {
    name: "Composite",
    className: "TelegramChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TelegramChannelProperties"
        }
      }
    }
  }
};

export const TelegramChannelProperties: coreHttp.CompositeMapper = {
  serializedName: "TelegramChannelProperties",
  type: {
    name: "Composite",
    className: "TelegramChannelProperties",
    modelProperties: {
      accessToken: {
        serializedName: "accessToken",
        required: true,
        type: {
          name: "String"
        }
      },
      isValidated: {
        serializedName: "isValidated",
        type: {
          name: "Boolean"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SmsChannel: coreHttp.CompositeMapper = {
  serializedName: "SmsChannel",
  type: {
    name: "Composite",
    className: "SmsChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SmsChannelProperties"
        }
      }
    }
  }
};

export const SmsChannelProperties: coreHttp.CompositeMapper = {
  serializedName: "SmsChannelProperties",
  type: {
    name: "Composite",
    className: "SmsChannelProperties",
    modelProperties: {
      phone: {
        serializedName: "phone",
        required: true,
        type: {
          name: "String"
        }
      },
      accountSID: {
        serializedName: "accountSID",
        required: true,
        type: {
          name: "String"
        }
      },
      authToken: {
        serializedName: "authToken",
        required: true,
        type: {
          name: "String"
        }
      },
      isValidated: {
        serializedName: "isValidated",
        type: {
          name: "Boolean"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SlackChannel: coreHttp.CompositeMapper = {
  serializedName: "SlackChannel",
  type: {
    name: "Composite",
    className: "SlackChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SlackChannelProperties"
        }
      }
    }
  }
};

export const SlackChannelProperties: coreHttp.CompositeMapper = {
  serializedName: "SlackChannelProperties",
  type: {
    name: "Composite",
    className: "SlackChannelProperties",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        required: true,
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        required: true,
        type: {
          name: "String"
        }
      },
      verificationToken: {
        serializedName: "verificationToken",
        required: true,
        type: {
          name: "String"
        }
      },
      landingPageUrl: {
        serializedName: "landingPageUrl",
        type: {
          name: "String"
        }
      },
      redirectAction: {
        serializedName: "redirectAction",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastSubmissionId: {
        serializedName: "lastSubmissionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      registerBeforeOAuthFlow: {
        serializedName: "registerBeforeOAuthFlow",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isValidated: {
        serializedName: "isValidated",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ConnectionItemName: coreHttp.CompositeMapper = {
  serializedName: "ConnectionItemName",
  type: {
    name: "Composite",
    className: "ConnectionItemName",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  Channel: Channel,
  "Channel.FacebookChannel": FacebookChannel,
  "Channel.EmailChannel": EmailChannel,
  "Channel.MsTeamsChannel": MsTeamsChannel,
  "Channel.SkypeChannel": SkypeChannel,
  "Channel.KikChannel": KikChannel,
  "Channel.WebChatChannel": WebChatChannel,
  "Channel.DirectLineChannel": DirectLineChannel,
  "Channel.TelegramChannel": TelegramChannel,
  "Channel.SmsChannel": SmsChannel,
  "Channel.SlackChannel": SlackChannel
};
