/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagedServicesClient } from "../managedServicesClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  RegistrationAssignmentsGetOptionalParams,
  RegistrationAssignmentsGetResponse,
  RegistrationAssignment,
  RegistrationAssignmentsCreateOrUpdateResponse,
  RegistrationAssignmentsListOptionalParams,
  RegistrationAssignmentsListResponse,
  RegistrationAssignmentsListNextOptionalParams,
  RegistrationAssignmentsListNextResponse
} from "../models";

/**
 * Class representing a RegistrationAssignments.
 */
export class RegistrationAssignments {
  private readonly client: ManagedServicesClient;

  /**
   * Initialize a new instance of the class RegistrationAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: ManagedServicesClient) {
    this.client = client;
  }

  /**
   * Gets the details of specified registration assignment.
   * @param scope Scope of the resource.
   * @param registrationAssignmentId Guid of the registration assignment.
   * @param options The options parameters.
   */
  get(
    scope: string,
    registrationAssignmentId: string,
    options?: RegistrationAssignmentsGetOptionalParams
  ): Promise<RegistrationAssignmentsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, registrationAssignmentId, options: operationOptions },
      getOperationSpec
    ) as Promise<RegistrationAssignmentsGetResponse>;
  }

  /**
   * Deletes the specified registration assignment.
   * @param scope Scope of the resource.
   * @param registrationAssignmentId Guid of the registration assignment.
   * @param options The options parameters.
   */
  async delete(
    scope: string,
    registrationAssignmentId: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      scope,
      registrationAssignmentId,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Creates or updates a registration assignment.
   * @param scope Scope of the resource.
   * @param registrationAssignmentId Guid of the registration assignment.
   * @param requestBody The parameters required to create new registration assignment.
   * @param options The options parameters.
   */
  async createOrUpdate(
    scope: string,
    registrationAssignmentId: string,
    requestBody: RegistrationAssignment,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<RegistrationAssignmentsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      scope,
      registrationAssignmentId,
      requestBody,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        RegistrationAssignmentsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets a list of the registration assignments.
   * @param scope Scope of the resource.
   * @param options The options parameters.
   */
  list(
    scope: string,
    options?: RegistrationAssignmentsListOptionalParams
  ): Promise<RegistrationAssignmentsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, options: operationOptions },
      listOperationSpec
    ) as Promise<RegistrationAssignmentsListResponse>;
  }

  /**
   * ListNext
   * @param scope Scope of the resource.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    scope: string,
    nextLink: string,
    options?: RegistrationAssignmentsListNextOptionalParams
  ): Promise<RegistrationAssignmentsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<RegistrationAssignmentsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.ManagedServices/registrationAssignments/{registrationAssignmentId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expandRegistrationDefinition
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.registrationAssignmentId
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.ManagedServices/registrationAssignments/{registrationAssignmentId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.registrationAssignmentId
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.ManagedServices/registrationAssignments/{registrationAssignmentId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationAssignment
    },
    201: {
      bodyMapper: Mappers.RegistrationAssignment
    },
    202: {
      bodyMapper: Mappers.RegistrationAssignment
    },
    204: {
      bodyMapper: Mappers.RegistrationAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.requestBody1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.registrationAssignmentId
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.ManagedServices/registrationAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationAssignmentList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expandRegistrationDefinition
  ],
  urlParameters: [Parameters.$host, Parameters.scope],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationAssignmentList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expandRegistrationDefinition
  ],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.nextLink],
  serializer
};
