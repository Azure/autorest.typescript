/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Registration definition.
 */
export interface RegistrationDefinition {
  /**
   * Properties of a registration definition.
   */
  properties?: RegistrationDefinitionProperties;
  /**
   * Plan details for the managed services.
   */
  plan?: Plan;
  /**
   * Fully qualified path of the registration definition.
   */
  readonly id?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Name of the registration definition.
   */
  readonly name?: string;
}

/**
 * Properties of a registration definition.
 */
export interface RegistrationDefinitionProperties {
  /**
   * Description of the registration definition.
   */
  description?: string;
  /**
   * Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
   */
  authorizations: Authorization[];
  /**
   * Name of the registration definition.
   */
  registrationDefinitionName?: string;
  /**
   * Id of the managedBy tenant.
   */
  managedByTenantId: string;
  /**
   * Current state of the registration definition.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Name of the managedBy tenant.
   */
  readonly managedByTenantName?: string;
}

/**
 * Authorization tuple containing principal Id (of user/service principal/security group) and role definition id.
 */
export interface Authorization {
  /**
   * Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
   */
  principalId: string;
  /**
   * The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
   */
  roleDefinitionId: string;
}

/**
 * Plan details for the managed services.
 */
export interface Plan {
  /**
   * The plan name.
   */
  name: string;
  /**
   * The publisher ID.
   */
  publisher: string;
  /**
   * The product code.
   */
  product: string;
  /**
   * The plan's version.
   */
  version: string;
}

/**
 * Error response.
 */
export interface ErrorResponse {
  /**
   * Error response indicates Azure Resource Manager is not able to process the incoming request. The reason is provided in the error message.
   */
  readonly error?: ErrorResponseError;
}

/**
 * Error response indicates Azure Resource Manager is not able to process the incoming request. The reason is provided in the error message.
 */
export interface ErrorResponseError {
  /**
   * Error code.
   */
  code: string;
  /**
   * Error message indicating why the operation failed.
   */
  message: string;
}

/**
 * Registration assignment.
 */
export interface RegistrationAssignment {
  /**
   * Properties of a registration assignment.
   */
  properties?: RegistrationAssignmentProperties;
  /**
   * The fully qualified path of the registration assignment.
   */
  readonly id?: string;
  /**
   * Type of the resource.
   */
  readonly type?: string;
  /**
   * Name of the registration assignment.
   */
  readonly name?: string;
}

/**
 * Properties of a registration assignment.
 */
export interface RegistrationAssignmentProperties {
  /**
   * Fully qualified path of the registration definition.
   */
  registrationDefinitionId: string;
  /**
   * Current state of the registration assignment.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Registration definition inside registration assignment.
   */
  readonly registrationDefinition?: RegistrationAssignmentPropertiesRegistrationDefinition;
}

/**
 * Registration definition inside registration assignment.
 */
export interface RegistrationAssignmentPropertiesRegistrationDefinition {
  /**
   * Properties of registration definition inside registration assignment.
   */
  properties?: RegistrationAssignmentPropertiesRegistrationDefinitionProperties;
  /**
   * Plan details for the managed services.
   */
  plan?: Plan;
  /**
   * Fully qualified path of the registration definition.
   */
  readonly id?: string;
  /**
   * Type of the resource (Microsoft.ManagedServices/registrationDefinitions).
   */
  readonly type?: string;
  /**
   * Name of the registration definition.
   */
  readonly name?: string;
}

/**
 * Properties of registration definition inside registration assignment.
 */
export interface RegistrationAssignmentPropertiesRegistrationDefinitionProperties {
  /**
   * Description of the registration definition.
   */
  description?: string;
  /**
   * Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
   */
  authorizations?: Authorization[];
  /**
   * Name of the registration definition.
   */
  registrationDefinitionName?: string;
  /**
   * Current state of the registration definition.
   */
  provisioningState?: ProvisioningState;
  /**
   * Id of the home tenant.
   */
  manageeTenantId?: string;
  /**
   * Name of the home tenant.
   */
  manageeTenantName?: string;
  /**
   * Id of the managedBy tenant.
   */
  managedByTenantId?: string;
  /**
   * Name of the managedBy tenant.
   */
  managedByTenantName?: string;
}

/**
 * List of registration definitions.
 */
export interface RegistrationDefinitionList {
  /**
   * List of registration definitions.
   */
  readonly value?: RegistrationDefinition[];
  /**
   * Link to next page of registration definitions.
   */
  readonly nextLink?: string;
}

/**
 * List of registration assignments.
 */
export interface RegistrationAssignmentList {
  /**
   * List of registration assignments.
   */
  readonly value?: RegistrationAssignment[];
  /**
   * Link to next page of registration assignments.
   */
  readonly nextLink?: string;
}

/**
 * List of marketplace registration definitions.
 */
export interface MarketplaceRegistrationDefinitionList {
  /**
   * List of marketplace registration definitions.
   */
  readonly value?: RegistrationDefinition[];
  /**
   * Link to next page of marketplace registration definitions.
   */
  readonly nextLink?: string;
}

/**
 * List of the operations.
 */
export interface OperationList {
  /**
   * List of Microsoft.ManagedServices operations.
   */
  readonly value?: Operation[];
}

/**
 * Object that describes a single Microsoft.ManagedServices operation.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   */
  readonly display?: OperationDisplay;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.ManagedServices
   */
  provider?: string;
  /**
   * Resource on which the operation is performed: Registration definition, registration assignment etc.
   */
  resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  operation?: string;
  /**
   * Description of the operation.
   */
  description?: string;
}

/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState =
  | "NotSpecified"
  | "Accepted"
  | "Running"
  | "Ready"
  | "Creating"
  | "Created"
  | "Deleting"
  | "Deleted"
  | "Canceled"
  | "Failed"
  | "Succeeded"
  | "Updating";

/**
 * Contains response data for the get operation.
 */
export type RegistrationDefinitionsGetResponse = RegistrationDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegistrationDefinition;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RegistrationDefinitionsCreateOrUpdateResponse = RegistrationDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegistrationDefinition;
  };
};

/**
 * Contains response data for the list operation.
 */
export type RegistrationDefinitionsListResponse = RegistrationDefinitionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegistrationDefinitionList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type RegistrationDefinitionsListNextResponse = RegistrationDefinitionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegistrationDefinitionList;
  };
};

/**
 * Optional parameters.
 */
export interface RegistrationAssignmentsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Tells whether to return registration definition details also along with registration assignment details.
   */
  expandRegistrationDefinition?: boolean;
}

/**
 * Contains response data for the get operation.
 */
export type RegistrationAssignmentsGetResponse = RegistrationAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegistrationAssignment;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RegistrationAssignmentsCreateOrUpdateResponse = RegistrationAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegistrationAssignment;
  };
};

/**
 * Optional parameters.
 */
export interface RegistrationAssignmentsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Tells whether to return registration definition details also along with registration assignment details.
   */
  expandRegistrationDefinition?: boolean;
}

/**
 * Contains response data for the list operation.
 */
export type RegistrationAssignmentsListResponse = RegistrationAssignmentList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegistrationAssignmentList;
  };
};

/**
 * Optional parameters.
 */
export interface RegistrationAssignmentsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Tells whether to return registration definition details also along with registration assignment details.
   */
  expandRegistrationDefinition?: boolean;
}

/**
 * Contains response data for the listNext operation.
 */
export type RegistrationAssignmentsListNextResponse = RegistrationAssignmentList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegistrationAssignmentList;
  };
};

/**
 * Optional parameters.
 */
export interface MarketplaceRegistrationDefinitionsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter query parameter. Might be used to filter marketplace registration definition by plan identifier, publisher, version etc.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type MarketplaceRegistrationDefinitionsListResponse = MarketplaceRegistrationDefinitionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MarketplaceRegistrationDefinitionList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type MarketplaceRegistrationDefinitionsGetResponse = RegistrationDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegistrationDefinition;
  };
};

/**
 * Optional parameters.
 */
export interface MarketplaceRegistrationDefinitionsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter query parameter. Might be used to filter marketplace registration definition by plan identifier, publisher, version etc.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type MarketplaceRegistrationDefinitionsListNextResponse = MarketplaceRegistrationDefinitionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MarketplaceRegistrationDefinitionList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedServicesClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
