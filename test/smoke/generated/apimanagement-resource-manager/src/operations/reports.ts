/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClient } from "../apiManagementClient";
import {
  ReportsListByApiOptionalParams,
  ReportsListByApiResponse,
  ReportsListByUserOptionalParams,
  ReportsListByUserResponse,
  ReportsListByOperationOptionalParams,
  ReportsListByOperationResponse,
  ReportsListByProductOptionalParams,
  ReportsListByProductResponse,
  ReportsListByGeoOptionalParams,
  ReportsListByGeoResponse,
  ReportsListBySubscriptionOptionalParams,
  ReportsListBySubscriptionResponse,
  ReportsListByTimeOptionalParams,
  ReportsListByTimeResponse,
  ReportsListByRequestOptionalParams,
  ReportsListByRequestResponse,
  ReportsListByApiNextOptionalParams,
  ReportsListByApiNextResponse,
  ReportsListByUserNextOptionalParams,
  ReportsListByUserNextResponse,
  ReportsListByOperationNextOptionalParams,
  ReportsListByOperationNextResponse,
  ReportsListByProductNextOptionalParams,
  ReportsListByProductNextResponse,
  ReportsListByGeoNextOptionalParams,
  ReportsListByGeoNextResponse,
  ReportsListBySubscriptionNextOptionalParams,
  ReportsListBySubscriptionNextResponse,
  ReportsListByTimeNextOptionalParams,
  ReportsListByTimeNextResponse
} from "../models";

/**
 * Class representing a Reports.
 */
export class Reports {
  private readonly client: ApiManagementClient;

  /**
   * Initialize a new instance of the class Reports class.
   * @param client Reference to the service client
   */
  constructor(client: ApiManagementClient) {
    this.client = client;
  }

  /**
   * Lists report records by API.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param filter The filter to apply on the operation.
   * @param options The options parameters.
   */
  listByApi(
    resourceGroupName: string,
    serviceName: string,
    filter: string,
    options?: ReportsListByApiOptionalParams
  ): Promise<ReportsListByApiResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, filter, options: operationOptions },
      listByApiOperationSpec
    ) as Promise<ReportsListByApiResponse>;
  }

  /**
   * Lists report records by User.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
   *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
   *               |     | </br>| displayName | select, orderBy |     |     | </br>| userId | select, filter | eq |
   *               | </br>| apiRegion | filter | eq |     | </br>| productId | filter | eq |     | </br>|
   *               subscriptionId | filter | eq |     | </br>| apiId | filter | eq |     | </br>| operationId | filter
   *               | eq |     | </br>| callCountSuccess | select, orderBy |     |     | </br>| callCountBlocked |
   *               select, orderBy |     |     | </br>| callCountFailed | select, orderBy |     |     | </br>|
   *               callCountOther | select, orderBy |     |     | </br>| callCountTotal | select, orderBy |     |     |
   *               </br>| bandwidth | select, orderBy |     |     | </br>| cacheHitsCount | select |     |     | </br>|
   *               cacheMissCount | select |     |     | </br>| apiTimeAvg | select, orderBy |     |     | </br>|
   *               apiTimeMin | select |     |     | </br>| apiTimeMax | select |     |     | </br>| serviceTimeAvg |
   *               select |     |     | </br>| serviceTimeMin | select |     |     | </br>| serviceTimeMax | select |
   *                 |     | </br>
   * @param options The options parameters.
   */
  listByUser(
    resourceGroupName: string,
    serviceName: string,
    filter: string,
    options?: ReportsListByUserOptionalParams
  ): Promise<ReportsListByUserResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, filter, options: operationOptions },
      listByUserOperationSpec
    ) as Promise<ReportsListByUserResponse>;
  }

  /**
   * Lists report records by API Operations.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
   *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
   *               |     | </br>| displayName | select, orderBy |     |     | </br>| apiRegion | filter | eq |     |
   *               </br>| userId | filter | eq |     | </br>| productId | filter | eq |     | </br>| subscriptionId |
   *               filter | eq |     | </br>| apiId | filter | eq |     | </br>| operationId | select, filter | eq |
   *                | </br>| callCountSuccess | select, orderBy |     |     | </br>| callCountBlocked | select, orderBy
   *               |     |     | </br>| callCountFailed | select, orderBy |     |     | </br>| callCountOther | select,
   *               orderBy |     |     | </br>| callCountTotal | select, orderBy |     |     | </br>| bandwidth |
   *               select, orderBy |     |     | </br>| cacheHitsCount | select |     |     | </br>| cacheMissCount |
   *               select |     |     | </br>| apiTimeAvg | select, orderBy |     |     | </br>| apiTimeMin | select |
   *                  |     | </br>| apiTimeMax | select |     |     | </br>| serviceTimeAvg | select |     |     |
   *               </br>| serviceTimeMin | select |     |     | </br>| serviceTimeMax | select |     |     | </br>
   * @param options The options parameters.
   */
  listByOperation(
    resourceGroupName: string,
    serviceName: string,
    filter: string,
    options?: ReportsListByOperationOptionalParams
  ): Promise<ReportsListByOperationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, filter, options: operationOptions },
      listByOperationOperationSpec
    ) as Promise<ReportsListByOperationResponse>;
  }

  /**
   * Lists report records by Product.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
   *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
   *               |     | </br>| displayName | select, orderBy |     |     | </br>| apiRegion | filter | eq |     |
   *               </br>| userId | filter | eq |     | </br>| productId | select, filter | eq |     | </br>|
   *               subscriptionId | filter | eq |     | </br>| callCountSuccess | select, orderBy |     |     | </br>|
   *               callCountBlocked | select, orderBy |     |     | </br>| callCountFailed | select, orderBy |     |
   *                | </br>| callCountOther | select, orderBy |     |     | </br>| callCountTotal | select, orderBy |
   *                 |     | </br>| bandwidth | select, orderBy |     |     | </br>| cacheHitsCount | select |     |
   *                | </br>| cacheMissCount | select |     |     | </br>| apiTimeAvg | select, orderBy |     |     |
   *               </br>| apiTimeMin | select |     |     | </br>| apiTimeMax | select |     |     | </br>|
   *               serviceTimeAvg | select |     |     | </br>| serviceTimeMin | select |     |     | </br>|
   *               serviceTimeMax | select |     |     | </br>
   * @param options The options parameters.
   */
  listByProduct(
    resourceGroupName: string,
    serviceName: string,
    filter: string,
    options?: ReportsListByProductOptionalParams
  ): Promise<ReportsListByProductResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, filter, options: operationOptions },
      listByProductOperationSpec
    ) as Promise<ReportsListByProductResponse>;
  }

  /**
   * Lists report records by geography.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
   *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
   *               |     | </br>| country | select |     |     | </br>| region | select |     |     | </br>| zip |
   *               select |     |     | </br>| apiRegion | filter | eq |     | </br>| userId | filter | eq |     |
   *               </br>| productId | filter | eq |     | </br>| subscriptionId | filter | eq |     | </br>| apiId |
   *               filter | eq |     | </br>| operationId | filter | eq |     | </br>| callCountSuccess | select |
   *               |     | </br>| callCountBlocked | select |     |     | </br>| callCountFailed | select |     |     |
   *               </br>| callCountOther | select |     |     | </br>| bandwidth | select, orderBy |     |     | </br>|
   *               cacheHitsCount | select |     |     | </br>| cacheMissCount | select |     |     | </br>| apiTimeAvg
   *               | select |     |     | </br>| apiTimeMin | select |     |     | </br>| apiTimeMax | select |     |
   *                 | </br>| serviceTimeAvg | select |     |     | </br>| serviceTimeMin | select |     |     | </br>|
   *               serviceTimeMax | select |     |     | </br>
   * @param options The options parameters.
   */
  listByGeo(
    resourceGroupName: string,
    serviceName: string,
    filter: string,
    options?: ReportsListByGeoOptionalParams
  ): Promise<ReportsListByGeoResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, filter, options: operationOptions },
      listByGeoOperationSpec
    ) as Promise<ReportsListByGeoResponse>;
  }

  /**
   * Lists report records by subscription.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
   *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
   *               |     | </br>| displayName | select, orderBy |     |     | </br>| apiRegion | filter | eq |     |
   *               </br>| userId | select, filter | eq |     | </br>| productId | select, filter | eq |     | </br>|
   *               subscriptionId | select, filter | eq |     | </br>| callCountSuccess | select, orderBy |     |     |
   *               </br>| callCountBlocked | select, orderBy |     |     | </br>| callCountFailed | select, orderBy |
   *                 |     | </br>| callCountOther | select, orderBy |     |     | </br>| callCountTotal | select,
   *               orderBy |     |     | </br>| bandwidth | select, orderBy |     |     | </br>| cacheHitsCount |
   *               select |     |     | </br>| cacheMissCount | select |     |     | </br>| apiTimeAvg | select,
   *               orderBy |     |     | </br>| apiTimeMin | select |     |     | </br>| apiTimeMax | select |     |
   *                | </br>| serviceTimeAvg | select |     |     | </br>| serviceTimeMin | select |     |     | </br>|
   *               serviceTimeMax | select |     |     | </br>
   * @param options The options parameters.
   */
  listBySubscription(
    resourceGroupName: string,
    serviceName: string,
    filter: string,
    options?: ReportsListBySubscriptionOptionalParams
  ): Promise<ReportsListBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, filter, options: operationOptions },
      listBySubscriptionOperationSpec
    ) as Promise<ReportsListBySubscriptionResponse>;
  }

  /**
   * Lists report records by Time.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
   *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter, select
   *               | ge, le |     | </br>| interval | select |     |     | </br>| apiRegion | filter | eq |     |
   *               </br>| userId | filter | eq |     | </br>| productId | filter | eq |     | </br>| subscriptionId |
   *               filter | eq |     | </br>| apiId | filter | eq |     | </br>| operationId | filter | eq |     |
   *               </br>| callCountSuccess | select |     |     | </br>| callCountBlocked | select |     |     | </br>|
   *               callCountFailed | select |     |     | </br>| callCountOther | select |     |     | </br>| bandwidth
   *               | select, orderBy |     |     | </br>| cacheHitsCount | select |     |     | </br>| cacheMissCount |
   *               select |     |     | </br>| apiTimeAvg | select |     |     | </br>| apiTimeMin | select |     |
   *               | </br>| apiTimeMax | select |     |     | </br>| serviceTimeAvg | select |     |     | </br>|
   *               serviceTimeMin | select |     |     | </br>| serviceTimeMax | select |     |     | </br>
   * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The
   *                 value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can
   *                 be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours,
   *                 minutes, seconds)).
   * @param options The options parameters.
   */
  listByTime(
    resourceGroupName: string,
    serviceName: string,
    filter: string,
    interval: string,
    options?: ReportsListByTimeOptionalParams
  ): Promise<ReportsListByTimeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        filter,
        interval,
        options: operationOptions
      },
      listByTimeOperationSpec
    ) as Promise<ReportsListByTimeResponse>;
  }

  /**
   * Lists report records by Request.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
   *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
   *               |     | </br>| apiId | filter | eq |     | </br>| operationId | filter | eq |     | </br>| productId
   *               | filter | eq |     | </br>| userId | filter | eq |     | </br>| apiRegion | filter | eq |     |
   *               </br>| subscriptionId | filter | eq |     | </br>
   * @param options The options parameters.
   */
  listByRequest(
    resourceGroupName: string,
    serviceName: string,
    filter: string,
    options?: ReportsListByRequestOptionalParams
  ): Promise<ReportsListByRequestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, filter, options: operationOptions },
      listByRequestOperationSpec
    ) as Promise<ReportsListByRequestResponse>;
  }

  /**
   * ListByApiNext
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param nextLink The nextLink from the previous successful call to the ListByApi method.
   * @param filter The filter to apply on the operation.
   * @param options The options parameters.
   */
  listByApiNext(
    resourceGroupName: string,
    serviceName: string,
    nextLink: string,
    filter: string,
    options?: ReportsListByApiNextOptionalParams
  ): Promise<ReportsListByApiNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        nextLink,
        filter,
        options: operationOptions
      },
      listByApiNextOperationSpec
    ) as Promise<ReportsListByApiNextResponse>;
  }

  /**
   * ListByUserNext
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
   *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
   *               |     | </br>| displayName | select, orderBy |     |     | </br>| userId | select, filter | eq |
   *               | </br>| apiRegion | filter | eq |     | </br>| productId | filter | eq |     | </br>|
   *               subscriptionId | filter | eq |     | </br>| apiId | filter | eq |     | </br>| operationId | filter
   *               | eq |     | </br>| callCountSuccess | select, orderBy |     |     | </br>| callCountBlocked |
   *               select, orderBy |     |     | </br>| callCountFailed | select, orderBy |     |     | </br>|
   *               callCountOther | select, orderBy |     |     | </br>| callCountTotal | select, orderBy |     |     |
   *               </br>| bandwidth | select, orderBy |     |     | </br>| cacheHitsCount | select |     |     | </br>|
   *               cacheMissCount | select |     |     | </br>| apiTimeAvg | select, orderBy |     |     | </br>|
   *               apiTimeMin | select |     |     | </br>| apiTimeMax | select |     |     | </br>| serviceTimeAvg |
   *               select |     |     | </br>| serviceTimeMin | select |     |     | </br>| serviceTimeMax | select |
   *                 |     | </br>
   * @param nextLink The nextLink from the previous successful call to the ListByUser method.
   * @param options The options parameters.
   */
  listByUserNext(
    resourceGroupName: string,
    serviceName: string,
    filter: string,
    nextLink: string,
    options?: ReportsListByUserNextOptionalParams
  ): Promise<ReportsListByUserNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        filter,
        nextLink,
        options: operationOptions
      },
      listByUserNextOperationSpec
    ) as Promise<ReportsListByUserNextResponse>;
  }

  /**
   * ListByOperationNext
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param nextLink The nextLink from the previous successful call to the ListByOperation method.
   * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
   *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
   *               |     | </br>| displayName | select, orderBy |     |     | </br>| apiRegion | filter | eq |     |
   *               </br>| userId | filter | eq |     | </br>| productId | filter | eq |     | </br>| subscriptionId |
   *               filter | eq |     | </br>| apiId | filter | eq |     | </br>| operationId | select, filter | eq |
   *                | </br>| callCountSuccess | select, orderBy |     |     | </br>| callCountBlocked | select, orderBy
   *               |     |     | </br>| callCountFailed | select, orderBy |     |     | </br>| callCountOther | select,
   *               orderBy |     |     | </br>| callCountTotal | select, orderBy |     |     | </br>| bandwidth |
   *               select, orderBy |     |     | </br>| cacheHitsCount | select |     |     | </br>| cacheMissCount |
   *               select |     |     | </br>| apiTimeAvg | select, orderBy |     |     | </br>| apiTimeMin | select |
   *                  |     | </br>| apiTimeMax | select |     |     | </br>| serviceTimeAvg | select |     |     |
   *               </br>| serviceTimeMin | select |     |     | </br>| serviceTimeMax | select |     |     | </br>
   * @param options The options parameters.
   */
  listByOperationNext(
    resourceGroupName: string,
    serviceName: string,
    nextLink: string,
    filter: string,
    options?: ReportsListByOperationNextOptionalParams
  ): Promise<ReportsListByOperationNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        nextLink,
        filter,
        options: operationOptions
      },
      listByOperationNextOperationSpec
    ) as Promise<ReportsListByOperationNextResponse>;
  }

  /**
   * ListByProductNext
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param nextLink The nextLink from the previous successful call to the ListByProduct method.
   * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
   *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
   *               |     | </br>| displayName | select, orderBy |     |     | </br>| apiRegion | filter | eq |     |
   *               </br>| userId | filter | eq |     | </br>| productId | select, filter | eq |     | </br>|
   *               subscriptionId | filter | eq |     | </br>| callCountSuccess | select, orderBy |     |     | </br>|
   *               callCountBlocked | select, orderBy |     |     | </br>| callCountFailed | select, orderBy |     |
   *                | </br>| callCountOther | select, orderBy |     |     | </br>| callCountTotal | select, orderBy |
   *                 |     | </br>| bandwidth | select, orderBy |     |     | </br>| cacheHitsCount | select |     |
   *                | </br>| cacheMissCount | select |     |     | </br>| apiTimeAvg | select, orderBy |     |     |
   *               </br>| apiTimeMin | select |     |     | </br>| apiTimeMax | select |     |     | </br>|
   *               serviceTimeAvg | select |     |     | </br>| serviceTimeMin | select |     |     | </br>|
   *               serviceTimeMax | select |     |     | </br>
   * @param options The options parameters.
   */
  listByProductNext(
    resourceGroupName: string,
    serviceName: string,
    nextLink: string,
    filter: string,
    options?: ReportsListByProductNextOptionalParams
  ): Promise<ReportsListByProductNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        nextLink,
        filter,
        options: operationOptions
      },
      listByProductNextOperationSpec
    ) as Promise<ReportsListByProductNextResponse>;
  }

  /**
   * ListByGeoNext
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
   *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
   *               |     | </br>| country | select |     |     | </br>| region | select |     |     | </br>| zip |
   *               select |     |     | </br>| apiRegion | filter | eq |     | </br>| userId | filter | eq |     |
   *               </br>| productId | filter | eq |     | </br>| subscriptionId | filter | eq |     | </br>| apiId |
   *               filter | eq |     | </br>| operationId | filter | eq |     | </br>| callCountSuccess | select |
   *               |     | </br>| callCountBlocked | select |     |     | </br>| callCountFailed | select |     |     |
   *               </br>| callCountOther | select |     |     | </br>| bandwidth | select, orderBy |     |     | </br>|
   *               cacheHitsCount | select |     |     | </br>| cacheMissCount | select |     |     | </br>| apiTimeAvg
   *               | select |     |     | </br>| apiTimeMin | select |     |     | </br>| apiTimeMax | select |     |
   *                 | </br>| serviceTimeAvg | select |     |     | </br>| serviceTimeMin | select |     |     | </br>|
   *               serviceTimeMax | select |     |     | </br>
   * @param nextLink The nextLink from the previous successful call to the ListByGeo method.
   * @param options The options parameters.
   */
  listByGeoNext(
    resourceGroupName: string,
    serviceName: string,
    filter: string,
    nextLink: string,
    options?: ReportsListByGeoNextOptionalParams
  ): Promise<ReportsListByGeoNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        filter,
        nextLink,
        options: operationOptions
      },
      listByGeoNextOperationSpec
    ) as Promise<ReportsListByGeoNextResponse>;
  }

  /**
   * ListBySubscriptionNext
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
   *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter | ge, le
   *               |     | </br>| displayName | select, orderBy |     |     | </br>| apiRegion | filter | eq |     |
   *               </br>| userId | select, filter | eq |     | </br>| productId | select, filter | eq |     | </br>|
   *               subscriptionId | select, filter | eq |     | </br>| callCountSuccess | select, orderBy |     |     |
   *               </br>| callCountBlocked | select, orderBy |     |     | </br>| callCountFailed | select, orderBy |
   *                 |     | </br>| callCountOther | select, orderBy |     |     | </br>| callCountTotal | select,
   *               orderBy |     |     | </br>| bandwidth | select, orderBy |     |     | </br>| cacheHitsCount |
   *               select |     |     | </br>| cacheMissCount | select |     |     | </br>| apiTimeAvg | select,
   *               orderBy |     |     | </br>| apiTimeMin | select |     |     | </br>| apiTimeMax | select |     |
   *                | </br>| serviceTimeAvg | select |     |     | </br>| serviceTimeMin | select |     |     | </br>|
   *               serviceTimeMax | select |     |     | </br>
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  listBySubscriptionNext(
    resourceGroupName: string,
    serviceName: string,
    filter: string,
    nextLink: string,
    options?: ReportsListBySubscriptionNextOptionalParams
  ): Promise<ReportsListBySubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        filter,
        nextLink,
        options: operationOptions
      },
      listBySubscriptionNextOperationSpec
    ) as Promise<ReportsListBySubscriptionNextResponse>;
  }

  /**
   * ListByTimeNext
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions
   *                  |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter, select
   *               | ge, le |     | </br>| interval | select |     |     | </br>| apiRegion | filter | eq |     |
   *               </br>| userId | filter | eq |     | </br>| productId | filter | eq |     | </br>| subscriptionId |
   *               filter | eq |     | </br>| apiId | filter | eq |     | </br>| operationId | filter | eq |     |
   *               </br>| callCountSuccess | select |     |     | </br>| callCountBlocked | select |     |     | </br>|
   *               callCountFailed | select |     |     | </br>| callCountOther | select |     |     | </br>| bandwidth
   *               | select, orderBy |     |     | </br>| cacheHitsCount | select |     |     | </br>| cacheMissCount |
   *               select |     |     | </br>| apiTimeAvg | select |     |     | </br>| apiTimeMin | select |     |
   *               | </br>| apiTimeMax | select |     |     | </br>| serviceTimeAvg | select |     |     | </br>|
   *               serviceTimeMin | select |     |     | </br>| serviceTimeMax | select |     |     | </br>
   * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The
   *                 value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can
   *                 be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours,
   *                 minutes, seconds)).
   * @param nextLink The nextLink from the previous successful call to the ListByTime method.
   * @param options The options parameters.
   */
  listByTimeNext(
    resourceGroupName: string,
    serviceName: string,
    filter: string,
    interval: string,
    nextLink: string,
    options?: ReportsListByTimeNextOptionalParams
  ): Promise<ReportsListByTimeNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        filter,
        interval,
        nextLink,
        options: operationOptions
      },
      listByTimeNextOperationSpec
    ) as Promise<ReportsListByTimeNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByApiOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byApi",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.filter25,
    Parameters.orderby
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  serializer
};
const listByUserOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byUser",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.orderby,
    Parameters.filter26
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  serializer
};
const listByOperationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byOperation",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.orderby,
    Parameters.filter27
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  serializer
};
const listByProductOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byProduct",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.orderby,
    Parameters.filter28
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  serializer
};
const listByGeoOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byGeo",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.filter29
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  serializer
};
const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/bySubscription",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.orderby,
    Parameters.filter30
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  serializer
};
const listByTimeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byTime",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.orderby,
    Parameters.filter31,
    Parameters.interval
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  serializer
};
const listByRequestOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byRequest",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RequestReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.filter32
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  serializer
};
const listByApiNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.filter25,
    Parameters.orderby
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.nextLink2
  ],
  serializer
};
const listByUserNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.orderby,
    Parameters.filter26
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.nextLink9
  ],
  serializer
};
const listByOperationNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.orderby,
    Parameters.filter27
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.nextLink3
  ],
  serializer
};
const listByProductNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.orderby,
    Parameters.filter28
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.nextLink4
  ],
  serializer
};
const listByGeoNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.filter29
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.nextLink10
  ],
  serializer
};
const listBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.orderby,
    Parameters.filter30
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.nextLink11
  ],
  serializer
};
const listByTimeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportCollection
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.orderby,
    Parameters.filter31,
    Parameters.interval
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.nextLink12
  ],
  serializer
};
