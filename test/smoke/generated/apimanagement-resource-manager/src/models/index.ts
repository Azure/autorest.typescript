/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Paged Api list representation.
 */
export interface ApiCollection {
  /**
   * Page values.
   */
  readonly value?: ApiContract[];
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * The Resource definition.
 */
export interface Resource {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type for API Management resource.
   */
  readonly type?: string;
}

/**
 * Api details.
 */
export type ApiContract = Resource & {
  /**
   * Description of the API. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Collection of authentication settings included into this API.
   */
  authenticationSettings?: AuthenticationSettingsContract;
  /**
   * Protocols over which API is made available.
   */
  subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
  /**
   * Type of API.
   */
  apiType?: ApiType;
  /**
   * Describes the Revision of the Api. If no value is provided, default revision 1 is created
   */
  apiRevision?: string;
  /**
   * Indicates the Version identifier of the API if the API is versioned
   */
  apiVersion?: string;
  /**
   * Indicates if API revision is current api revision.
   */
  isCurrent?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   */
  readonly isOnline?: boolean;
  /**
   * Description of the Api Revision.
   */
  apiRevisionDescription?: string;
  /**
   * Description of the Api Version.
   */
  apiVersionDescription?: string;
  /**
   * A resource identifier for the related ApiVersionSet.
   */
  apiVersionSetId?: string;
  /**
   * Specifies whether an API or Product subscription is required for accessing the API.
   */
  subscriptionRequired?: boolean;
  /**
   * API identifier of the source API.
   */
  sourceApiId?: string;
  /**
   * API name. Must be 1 to 300 characters long.
   */
  displayName?: string;
  /**
   * Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long.
   */
  serviceUrl?: string;
  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
   */
  path?: string;
  /**
   * Describes on which protocols the operations in this API can be invoked.
   */
  protocols?: Protocol[];
  /**
   * Version set details
   */
  apiVersionSet?: ApiVersionSetContractDetails;
};

/**
 * API base contract details.
 */
export interface ApiEntityBaseContract {
  /**
   * Description of the API. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Collection of authentication settings included into this API.
   */
  authenticationSettings?: AuthenticationSettingsContract;
  /**
   * Protocols over which API is made available.
   */
  subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
  /**
   * Type of API.
   */
  apiType?: ApiType;
  /**
   * Describes the Revision of the Api. If no value is provided, default revision 1 is created
   */
  apiRevision?: string;
  /**
   * Indicates the Version identifier of the API if the API is versioned
   */
  apiVersion?: string;
  /**
   * Indicates if API revision is current api revision.
   */
  isCurrent?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   */
  readonly isOnline?: boolean;
  /**
   * Description of the Api Revision.
   */
  apiRevisionDescription?: string;
  /**
   * Description of the Api Version.
   */
  apiVersionDescription?: string;
  /**
   * A resource identifier for the related ApiVersionSet.
   */
  apiVersionSetId?: string;
  /**
   * Specifies whether an API or Product subscription is required for accessing the API.
   */
  subscriptionRequired?: boolean;
}

/**
 * API Authentication Settings.
 */
export interface AuthenticationSettingsContract {
  /**
   * OAuth2 Authentication settings
   */
  oAuth2?: OAuth2AuthenticationSettingsContract;
  /**
   * OpenID Connect Authentication Settings
   */
  openid?: OpenIdAuthenticationSettingsContract;
}

/**
 * API OAuth2 Authentication settings details.
 */
export interface OAuth2AuthenticationSettingsContract {
  /**
   * OAuth authorization server identifier.
   */
  authorizationServerId?: string;
  /**
   * operations scope.
   */
  scope?: string;
}

/**
 * API OAuth2 Authentication settings details.
 */
export interface OpenIdAuthenticationSettingsContract {
  /**
   * OAuth authorization server identifier.
   */
  openidProviderId?: string;
  /**
   * How to send token to the server.
   */
  bearerTokenSendingMethods?: BearerTokenSendingMethods[];
}

/**
 * Subscription key parameter names details.
 */
export interface SubscriptionKeyParameterNamesContract {
  /**
   * Subscription key header name.
   */
  header?: string;
  /**
   * Subscription key query string parameter name.
   */
  query?: string;
}

/**
 * Api Entity Properties
 */
export type ApiContractProperties = ApiEntityBaseContract & {
  /**
   * API identifier of the source API.
   */
  sourceApiId?: string;
  /**
   * API name. Must be 1 to 300 characters long.
   */
  displayName?: string;
  /**
   * Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long.
   */
  serviceUrl?: string;
  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
   */
  path: string;
  /**
   * Describes on which protocols the operations in this API can be invoked.
   */
  protocols?: Protocol[];
  /**
   * Version set details
   */
  apiVersionSet?: ApiVersionSetContractDetails;
};

/**
 * An API Version Set contains the common configuration for a set of API Versions relating
 */
export interface ApiVersionSetContractDetails {
  /**
   * Identifier for existing API Version Set. Omit this value to create a new Version Set.
   */
  id?: string;
  /**
   * The display Name of the API Version Set.
   */
  name?: string;
  /**
   * Description of API Version Set.
   */
  description?: string;
  /**
   * An value that determines where the API Version identifer will be located in a HTTP request.
   */
  versioningScheme?: ApiVersionSetContractDetailsVersioningScheme;
  /**
   * Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
   */
  versionQueryName?: string;
  /**
   * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
   */
  versionHeaderName?: string;
}

/**
 * Error Response.
 */
export interface ErrorResponse {
  /**
   * Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response.
   */
  code?: string;
  /**
   * Human-readable representation of the error.
   */
  message?: string;
  /**
   * The list of invalid fields send in request, in case of validation error.
   */
  details?: ErrorFieldContract[];
}

/**
 * Error Body contract.
 */
export interface ErrorResponseBody {
  /**
   * Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response.
   */
  code?: string;
  /**
   * Human-readable representation of the error.
   */
  message?: string;
  /**
   * The list of invalid fields send in request, in case of validation error.
   */
  details?: ErrorFieldContract[];
}

/**
 * Error Field contract.
 */
export interface ErrorFieldContract {
  /**
   * Property level error code.
   */
  code?: string;
  /**
   * Human-readable representation of property-level error.
   */
  message?: string;
  /**
   * Property name.
   */
  target?: string;
}

/**
 * API Create or Update Parameters.
 */
export interface ApiCreateOrUpdateParameter {
  /**
   * Description of the API. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Collection of authentication settings included into this API.
   */
  authenticationSettings?: AuthenticationSettingsContract;
  /**
   * Protocols over which API is made available.
   */
  subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
  /**
   * Type of API.
   */
  apiType?: ApiType;
  /**
   * Describes the Revision of the Api. If no value is provided, default revision 1 is created
   */
  apiRevision?: string;
  /**
   * Indicates the Version identifier of the API if the API is versioned
   */
  apiVersion?: string;
  /**
   * Indicates if API revision is current api revision.
   */
  isCurrent?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   */
  readonly isOnline?: boolean;
  /**
   * Description of the Api Revision.
   */
  apiRevisionDescription?: string;
  /**
   * Description of the Api Version.
   */
  apiVersionDescription?: string;
  /**
   * A resource identifier for the related ApiVersionSet.
   */
  apiVersionSetId?: string;
  /**
   * Specifies whether an API or Product subscription is required for accessing the API.
   */
  subscriptionRequired?: boolean;
  /**
   * API identifier of the source API.
   */
  sourceApiId?: string;
  /**
   * API name. Must be 1 to 300 characters long.
   */
  displayName?: string;
  /**
   * Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long.
   */
  serviceUrl?: string;
  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
   */
  path?: string;
  /**
   * Describes on which protocols the operations in this API can be invoked.
   */
  protocols?: Protocol[];
  /**
   * Version set details
   */
  apiVersionSet?: ApiVersionSetContractDetails;
  /**
   * Content value when Importing an API.
   */
  value?: string;
  /**
   * Format of the Content in which the API is getting imported.
   */
  format?: ContentFormat;
  /**
   * Criteria to limit import of WSDL to a subset of the document.
   */
  wsdlSelector?: ApiCreateOrUpdatePropertiesWsdlSelector;
  /**
   * Type of Api to create.
   *  * `http` creates a SOAP to REST API
   *  * `soap` creates a SOAP pass-through API .
   */
  soapApiType?: SoapApiType;
}

/**
 * Api Create or Update Properties.
 */
export type ApiCreateOrUpdateProperties = ApiContractProperties & {
  /**
   * Content value when Importing an API.
   */
  value?: string;
  /**
   * Format of the Content in which the API is getting imported.
   */
  format?: ContentFormat;
  /**
   * Criteria to limit import of WSDL to a subset of the document.
   */
  wsdlSelector?: ApiCreateOrUpdatePropertiesWsdlSelector;
  /**
   * Type of Api to create.
   *  * `http` creates a SOAP to REST API
   *  * `soap` creates a SOAP pass-through API .
   */
  soapApiType?: SoapApiType;
};

/**
 * Criteria to limit import of WSDL to a subset of the document.
 */
export interface ApiCreateOrUpdatePropertiesWsdlSelector {
  /**
   * Name of service to import from WSDL
   */
  wsdlServiceName?: string;
  /**
   * Name of endpoint(port) to import from WSDL
   */
  wsdlEndpointName?: string;
}

/**
 * API update contract details.
 */
export interface ApiUpdateContract {
  /**
   * Description of the API. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Collection of authentication settings included into this API.
   */
  authenticationSettings?: AuthenticationSettingsContract;
  /**
   * Protocols over which API is made available.
   */
  subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
  /**
   * Type of API.
   */
  apiType?: ApiType;
  /**
   * Describes the Revision of the Api. If no value is provided, default revision 1 is created
   */
  apiRevision?: string;
  /**
   * Indicates the Version identifier of the API if the API is versioned
   */
  apiVersion?: string;
  /**
   * Indicates if API revision is current api revision.
   */
  isCurrent?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   */
  readonly isOnline?: boolean;
  /**
   * Description of the Api Revision.
   */
  apiRevisionDescription?: string;
  /**
   * Description of the Api Version.
   */
  apiVersionDescription?: string;
  /**
   * A resource identifier for the related ApiVersionSet.
   */
  apiVersionSetId?: string;
  /**
   * Specifies whether an API or Product subscription is required for accessing the API.
   */
  subscriptionRequired?: boolean;
  /**
   * API name.
   */
  displayName?: string;
  /**
   * Absolute URL of the backend service implementing this API.
   */
  serviceUrl?: string;
  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
   */
  path?: string;
  /**
   * Describes on which protocols the operations in this API can be invoked.
   */
  protocols?: Protocol[];
}

/**
 * API update contract properties.
 */
export type ApiContractUpdateProperties = ApiEntityBaseContract & {
  /**
   * API name.
   */
  displayName?: string;
  /**
   * Absolute URL of the backend service implementing this API.
   */
  serviceUrl?: string;
  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
   */
  path?: string;
  /**
   * Describes on which protocols the operations in this API can be invoked.
   */
  protocols?: Protocol[];
};

/**
 * Paged Api Revision list representation.
 */
export interface ApiRevisionCollection {
  /**
   * Page values.
   */
  readonly value?: ApiRevisionContract[];
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Summary of revision metadata.
 */
export interface ApiRevisionContract {
  /**
   * Identifier of the API Revision.
   */
  readonly apiId?: string;
  /**
   * Revision number of API.
   */
  readonly apiRevision?: string;
  /**
   * The time the API Revision was created. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
   */
  readonly createdDateTime?: Date;
  /**
   * The time the API Revision were updated. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
   */
  readonly updatedDateTime?: Date;
  /**
   * Description of the API Revision.
   */
  readonly description?: string;
  /**
   * Gateway URL for accessing the non-current API Revision.
   */
  readonly privateUrl?: string;
  /**
   * Indicates if API revision is the current api revision.
   */
  readonly isOnline?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   */
  readonly isCurrent?: boolean;
}

/**
 * Paged ApiRelease list representation.
 */
export interface ApiReleaseCollection {
  /**
   * Page values.
   */
  readonly value?: ApiReleaseContract[];
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * ApiRelease details.
 */
export type ApiReleaseContract = Resource & {
  /**
   * Identifier of the API the release belongs to.
   */
  apiId?: string;
  /**
   * The time the API was released. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
   */
  readonly createdDateTime?: Date;
  /**
   * The time the API release was updated.
   */
  readonly updatedDateTime?: Date;
  /**
   * Release Notes
   */
  notes?: string;
};

/**
 * Paged Operation list representation.
 */
export interface OperationCollection {
  /**
   * Page values.
   */
  readonly value?: OperationContract[];
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Api Operation details.
 */
export type OperationContract = Resource & {
  /**
   * Collection of URL template parameters.
   */
  templateParameters?: ParameterContract[];
  /**
   * Description of the operation. May include HTML formatting tags.
   */
  description?: string;
  /**
   * An entity containing request details.
   */
  request?: RequestContract;
  /**
   * Array of Operation responses.
   */
  responses?: ResponseContract[];
  /**
   * Operation Policies
   */
  policies?: string;
  /**
   * Operation Name.
   */
  displayName?: string;
  /**
   * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
   */
  method?: string;
  /**
   * Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
   */
  urlTemplate?: string;
};

/**
 * Api Operation Entity Base Contract details.
 */
export interface OperationEntityBaseContract {
  /**
   * Collection of URL template parameters.
   */
  templateParameters?: ParameterContract[];
  /**
   * Description of the operation. May include HTML formatting tags.
   */
  description?: string;
  /**
   * An entity containing request details.
   */
  request?: RequestContract;
  /**
   * Array of Operation responses.
   */
  responses?: ResponseContract[];
  /**
   * Operation Policies
   */
  policies?: string;
}

/**
 * Operation parameters details.
 */
export interface ParameterContract {
  /**
   * Parameter name.
   */
  name: string;
  /**
   * Parameter description.
   */
  description?: string;
  /**
   * Parameter type.
   */
  type: string;
  /**
   * Default parameter value.
   */
  defaultValue?: string;
  /**
   * Specifies whether parameter is required or not.
   */
  required?: boolean;
  /**
   * Parameter values.
   */
  values?: string[];
}

/**
 * Operation request details.
 */
export interface RequestContract {
  /**
   * Operation request description.
   */
  description?: string;
  /**
   * Collection of operation request query parameters.
   */
  queryParameters?: ParameterContract[];
  /**
   * Collection of operation request headers.
   */
  headers?: ParameterContract[];
  /**
   * Collection of operation request representations.
   */
  representations?: RepresentationContract[];
}

/**
 * Operation request/response representation details.
 */
export interface RepresentationContract {
  /**
   * Specifies a registered or custom content type for this representation, e.g. application/xml.
   */
  contentType: string;
  /**
   * An example of the representation.
   */
  sample?: string;
  /**
   * Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
   */
  schemaId?: string;
  /**
   * Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
   */
  typeName?: string;
  /**
   * Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'..
   */
  formParameters?: ParameterContract[];
}

/**
 * Operation response details.
 */
export interface ResponseContract {
  /**
   * Operation response HTTP status code.
   */
  statusCode: number;
  /**
   * Operation response description.
   */
  description?: string;
  /**
   * Collection of operation response representations.
   */
  representations?: RepresentationContract[];
  /**
   * Collection of operation response headers.
   */
  headers?: ParameterContract[];
}

/**
 * Operation Contract Properties
 */
export type OperationContractProperties = OperationEntityBaseContract & {
  /**
   * Operation Name.
   */
  displayName: string;
  /**
   * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
   */
  method: string;
  /**
   * Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
   */
  urlTemplate: string;
};

/**
 * Api Operation Update Contract details.
 */
export interface OperationUpdateContract {
  /**
   * Collection of URL template parameters.
   */
  templateParameters?: ParameterContract[];
  /**
   * Description of the operation. May include HTML formatting tags.
   */
  description?: string;
  /**
   * An entity containing request details.
   */
  request?: RequestContract;
  /**
   * Array of Operation responses.
   */
  responses?: ResponseContract[];
  /**
   * Operation Policies
   */
  policies?: string;
  /**
   * Operation Name.
   */
  displayName?: string;
  /**
   * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
   */
  method?: string;
  /**
   * Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
   */
  urlTemplate?: string;
}

/**
 * Operation Update Contract Properties.
 */
export type OperationUpdateContractProperties = OperationEntityBaseContract & {
  /**
   * Operation Name.
   */
  displayName?: string;
  /**
   * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
   */
  method?: string;
  /**
   * Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
   */
  urlTemplate?: string;
};

/**
 * The response of the list policy operation.
 */
export interface PolicyCollection {
  /**
   * Policy Contract value.
   */
  value?: PolicyContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Policy Contract details.
 */
export type PolicyContract = Resource & {
  /**
   * Contents of the Policy as defined by the format.
   */
  value?: string;
  /**
   * Format of the policyContent.
   */
  format?: PolicyContentFormat;
};

/**
 * Paged Tag list representation.
 */
export interface TagCollection {
  /**
   * Page values.
   */
  value?: TagContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Tag Contract details.
 */
export type TagContract = Resource & {
  /**
   * Tag name.
   */
  displayName?: string;
};

/**
 * Paged Products list representation.
 */
export interface ProductCollection {
  /**
   * Page values.
   */
  value?: ProductContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Product details.
 */
export type ProductContract = Resource & {
  /**
   * Product description. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.
   */
  terms?: string;
  /**
   * Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.
   */
  subscriptionRequired?: boolean;
  /**
   * whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false.
   */
  approvalRequired?: boolean;
  /**
   * Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false.
   */
  subscriptionsLimit?: number;
  /**
   * whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
   */
  state?: ProductState;
  /**
   * Product name.
   */
  displayName?: string;
};

/**
 * Product Entity Base Parameters
 */
export interface ProductEntityBaseParameters {
  /**
   * Product description. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.
   */
  terms?: string;
  /**
   * Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.
   */
  subscriptionRequired?: boolean;
  /**
   * whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false.
   */
  approvalRequired?: boolean;
  /**
   * Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false.
   */
  subscriptionsLimit?: number;
  /**
   * whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
   */
  state?: ProductState;
}

/**
 * Product profile.
 */
export type ProductContractProperties = ProductEntityBaseParameters & {
  /**
   * Product name.
   */
  displayName: string;
};

/**
 * The response of the list schema operation.
 */
export interface SchemaCollection {
  /**
   * Api Schema Contract value.
   */
  readonly value?: SchemaContract[];
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Schema Contract details.
 */
export type SchemaContract = Resource & {
  /**
   * Must be a valid a media type used in a Content-Type header as defined in the RFC 2616. Media type of the schema document (e.g. application/json, application/xml). </br> - `Swagger` Schema use `application/vnd.ms-azure-apim.swagger.definitions+json` </br> - `WSDL` Schema use `application/vnd.ms-azure-apim.xsd+xml` </br> - `OpenApi` Schema use `application/vnd.oai.openapi.components+json` </br> - `WADL Schema` use `application/vnd.ms-azure-apim.wadl.grammars+xml`.
   */
  contentType?: string;
  /**
   * Json escaped string defining the document representing the Schema. Used for schemas other than Swagger/OpenAPI.
   */
  value?: string;
  /**
   * Types definitions. Used for Swagger/OpenAPI schemas only, null otherwise.
   */
  definitions?: any;
};

/**
 * Paged Diagnostic list representation.
 */
export interface DiagnosticCollection {
  /**
   * Page values.
   */
  value?: DiagnosticContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Diagnostic details.
 */
export type DiagnosticContract = Resource & {
  /**
   * Specifies for what type of messages sampling settings should not apply.
   */
  alwaysLog?: "allErrors";
  /**
   * Resource Id of a target logger.
   */
  loggerId?: string;
  /**
   * Sampling settings for Diagnostic.
   */
  sampling?: SamplingSettings;
  /**
   * Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
   */
  frontend?: PipelineDiagnosticSettings;
  /**
   * Diagnostic settings for incoming/outgoing HTTP messages to the Backend
   */
  backend?: PipelineDiagnosticSettings;
  /**
   * Log the ClientIP. Default is false.
   */
  logClientIp?: boolean;
  /**
   * Sets correlation protocol to use for Application Insights diagnostics.
   */
  httpCorrelationProtocol?: HttpCorrelationProtocol;
  /**
   * The verbosity level applied to traces emitted by trace policies.
   */
  verbosity?: Verbosity;
};

/**
 * Sampling settings for Diagnostic.
 */
export interface SamplingSettings {
  /**
   * Sampling type.
   */
  samplingType?: "fixed";
  /**
   * Rate of sampling for fixed-rate sampling.
   */
  percentage?: number;
}

/**
 * Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
 */
export interface PipelineDiagnosticSettings {
  /**
   * Diagnostic settings for request.
   */
  request?: HttpMessageDiagnostic;
  /**
   * Diagnostic settings for response.
   */
  response?: HttpMessageDiagnostic;
}

/**
 * Http message diagnostic settings.
 */
export interface HttpMessageDiagnostic {
  /**
   * Array of HTTP Headers to log.
   */
  headers?: string[];
  /**
   * Body logging settings.
   */
  body?: BodyDiagnosticSettings;
}

/**
 * Body logging settings.
 */
export interface BodyDiagnosticSettings {
  /**
   * Number of request body bytes to log.
   */
  bytes?: number;
}

/**
 * Paged Issue list representation.
 */
export interface IssueCollection {
  /**
   * Issue values.
   */
  readonly value?: IssueContract[];
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Issue Contract details.
 */
export type IssueContract = Resource & {
  /**
   * Date and time when the issue was created.
   */
  createdDate?: Date;
  /**
   * Status of the issue.
   */
  state?: State;
  /**
   * A resource identifier for the API the issue was created for.
   */
  apiId?: string;
  /**
   * The issue title.
   */
  title?: string;
  /**
   * Text describing the issue.
   */
  description?: string;
  /**
   * A resource identifier for the user created the issue.
   */
  userId?: string;
};

/**
 * Issue contract Base Properties.
 */
export interface IssueContractBaseProperties {
  /**
   * Date and time when the issue was created.
   */
  createdDate?: Date;
  /**
   * Status of the issue.
   */
  state?: State;
  /**
   * A resource identifier for the API the issue was created for.
   */
  apiId?: string;
}

/**
 * Issue contract Properties.
 */
export type IssueContractProperties = IssueContractBaseProperties & {
  /**
   * The issue title.
   */
  title: string;
  /**
   * Text describing the issue.
   */
  description: string;
  /**
   * A resource identifier for the user created the issue.
   */
  userId: string;
};

/**
 * Issue update Parameters.
 */
export interface IssueUpdateContract {
  /**
   * Date and time when the issue was created.
   */
  createdDate?: Date;
  /**
   * Status of the issue.
   */
  state?: State;
  /**
   * A resource identifier for the API the issue was created for.
   */
  apiId?: string;
  /**
   * The issue title.
   */
  title?: string;
  /**
   * Text describing the issue.
   */
  description?: string;
  /**
   * A resource identifier for the user created the issue.
   */
  userId?: string;
}

/**
 * Issue contract Update Properties.
 */
export type IssueUpdateContractProperties = IssueContractBaseProperties & {
  /**
   * The issue title.
   */
  title?: string;
  /**
   * Text describing the issue.
   */
  description?: string;
  /**
   * A resource identifier for the user created the issue.
   */
  userId?: string;
};

/**
 * Paged Issue Comment list representation.
 */
export interface IssueCommentCollection {
  /**
   * Issue Comment values.
   */
  readonly value?: IssueCommentContract[];
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Issue Comment Contract details.
 */
export type IssueCommentContract = Resource & {
  /**
   * Comment text.
   */
  text?: string;
  /**
   * Date and time when the comment was created.
   */
  createdDate?: Date;
  /**
   * A resource identifier for the user who left the comment.
   */
  userId?: string;
};

/**
 * Paged Issue Attachment list representation.
 */
export interface IssueAttachmentCollection {
  /**
   * Issue Attachment values.
   */
  readonly value?: IssueAttachmentContract[];
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Issue Attachment Contract details.
 */
export type IssueAttachmentContract = Resource & {
  /**
   * Filename by which the binary data will be saved.
   */
  title?: string;
  /**
   * Either 'link' if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the 'content' property.
   */
  contentFormat?: string;
  /**
   * An HTTP link or Base64-encoded binary data.
   */
  content?: string;
};

/**
 * Paged TagDescription list representation.
 */
export interface TagDescriptionCollection {
  /**
   * Page values.
   */
  value?: TagDescriptionContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Contract details.
 */
export type TagDescriptionContract = Resource & {
  /**
   * Description of the Tag.
   */
  description?: string;
  /**
   * Absolute URL of external resources describing the tag.
   */
  externalDocsUrl?: string;
  /**
   * Description of the external resources describing the tag.
   */
  externalDocsDescription?: string;
  /**
   * Identifier of the tag in the form of /tags/{tagId}
   */
  tagId?: string;
  /**
   * Tag name.
   */
  displayName?: string;
};

/**
 * Parameters supplied to the Create TagDescription operation.
 */
export interface TagDescriptionBaseProperties {
  /**
   * Description of the Tag.
   */
  description?: string;
  /**
   * Absolute URL of external resources describing the tag.
   */
  externalDocsUrl?: string;
  /**
   * Description of the external resources describing the tag.
   */
  externalDocsDescription?: string;
}

/**
 * TagDescription contract Properties.
 */
export type TagDescriptionContractProperties = TagDescriptionBaseProperties & {
  /**
   * Identifier of the tag in the form of /tags/{tagId}
   */
  tagId?: string;
  /**
   * Tag name.
   */
  displayName?: string;
};

/**
 * Parameters supplied to the Create TagDescription operation.
 */
export interface TagDescriptionCreateParameters {
  /**
   * Description of the Tag.
   */
  description?: string;
  /**
   * Absolute URL of external resources describing the tag.
   */
  externalDocsUrl?: string;
  /**
   * Description of the external resources describing the tag.
   */
  externalDocsDescription?: string;
}

/**
 * Paged Tag list representation.
 */
export interface TagResourceCollection {
  /**
   * Page values.
   */
  value?: TagResourceContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * TagResource contract properties.
 */
export interface TagResourceContract {
  /**
   * Tag associated with the resource.
   */
  tag: TagResourceContractProperties;
  /**
   * Api associated with the tag.
   */
  api?: ApiTagResourceContractProperties;
  /**
   * Operation associated with the tag.
   */
  operation?: OperationTagResourceContractProperties;
  /**
   * Product associated with the tag.
   */
  product?: ProductTagResourceContractProperties;
}

/**
 * Contract defining the Tag property in the Tag Resource Contract
 */
export interface TagResourceContractProperties {
  /**
   * Tag identifier
   */
  id?: string;
  /**
   * Tag Name
   */
  name?: string;
}

/**
 * API contract properties for the Tag Resources.
 */
export type ApiTagResourceContractProperties = ApiEntityBaseContract & {
  /**
   * API identifier in the form /apis/{apiId}.
   */
  id?: string;
  /**
   * API name.
   */
  name?: string;
  /**
   * Absolute URL of the backend service implementing this API.
   */
  serviceUrl?: string;
  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
   */
  path?: string;
  /**
   * Describes on which protocols the operations in this API can be invoked.
   */
  protocols?: Protocol[];
};

/**
 * Operation Entity contract Properties.
 */
export interface OperationTagResourceContractProperties {
  /**
   * Identifier of the operation in form /operations/{operationId}.
   */
  id?: string;
  /**
   * Operation name.
   */
  readonly name?: string;
  /**
   * Api Name.
   */
  readonly apiName?: string;
  /**
   * Api Revision.
   */
  readonly apiRevision?: string;
  /**
   * Api Version.
   */
  readonly apiVersion?: string;
  /**
   * Operation Description.
   */
  readonly description?: string;
  /**
   * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
   */
  readonly method?: string;
  /**
   * Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
   */
  readonly urlTemplate?: string;
}

/**
 * Product profile.
 */
export type ProductTagResourceContractProperties = ProductEntityBaseParameters & {
  /**
   * Identifier of the product in the form of /products/{productId}
   */
  id?: string;
  /**
   * Product name.
   */
  name: string;
};

/**
 * API Export result.
 */
export interface ApiExportResult {
  /**
   * ResourceId of the API which was exported.
   */
  id?: string;
  /**
   * Format in which the Api Details are exported to the Storage Blob with Sas Key valid for 5 minutes.
   */
  exportResultFormat?: ExportResultFormat;
  /**
   * The object defining the schema of the exported Api Detail
   */
  value?: ApiExportResultValue;
}

/**
 * The object defining the schema of the exported Api Detail
 */
export interface ApiExportResultValue {
  /**
   * Link to the Storage Blob containing the result of the export operation. The Blob Uri is only valid for 5 minutes.
   */
  link?: string;
}

/**
 * Paged Api Version Set list representation.
 */
export interface ApiVersionSetCollection {
  /**
   * Page values.
   */
  value?: ApiVersionSetContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Api Version Set Contract details.
 */
export type ApiVersionSetContract = Resource & {
  /**
   * Description of API Version Set.
   */
  description?: string;
  /**
   * Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
   */
  versionQueryName?: string;
  /**
   * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
   */
  versionHeaderName?: string;
  /**
   * Name of API Version Set
   */
  displayName?: string;
  /**
   * An value that determines where the API Version identifer will be located in a HTTP request.
   */
  versioningScheme?: VersioningScheme;
};

/**
 * Api Version set base parameters
 */
export interface ApiVersionSetEntityBase {
  /**
   * Description of API Version Set.
   */
  description?: string;
  /**
   * Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
   */
  versionQueryName?: string;
  /**
   * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
   */
  versionHeaderName?: string;
}

/**
 * Properties of an API Version Set.
 */
export type ApiVersionSetContractProperties = ApiVersionSetEntityBase & {
  /**
   * Name of API Version Set
   */
  displayName: string;
  /**
   * An value that determines where the API Version identifer will be located in a HTTP request.
   */
  versioningScheme: VersioningScheme;
};

/**
 * Parameters to update or create an Api Version Set Contract.
 */
export interface ApiVersionSetUpdateParameters {
  /**
   * Description of API Version Set.
   */
  description?: string;
  /**
   * Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
   */
  versionQueryName?: string;
  /**
   * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
   */
  versionHeaderName?: string;
  /**
   * Name of API Version Set
   */
  displayName?: string;
  /**
   * An value that determines where the API Version identifer will be located in a HTTP request.
   */
  versioningScheme?: VersioningScheme;
}

/**
 * Properties used to create or update an API Version Set.
 */
export type ApiVersionSetUpdateParametersProperties = ApiVersionSetEntityBase & {
  /**
   * Name of API Version Set
   */
  displayName?: string;
  /**
   * An value that determines where the API Version identifer will be located in a HTTP request.
   */
  versioningScheme?: VersioningScheme;
};

/**
 * Paged OAuth2 Authorization Servers list representation.
 */
export interface AuthorizationServerCollection {
  /**
   * Page values.
   */
  value?: AuthorizationServerContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * External OAuth authorization server settings.
 */
export type AuthorizationServerContract = Resource & {
  /**
   * Description of the authorization server. Can contain HTML formatting tags.
   */
  description?: string;
  /**
   * HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional.
   */
  authorizationMethods?: AuthorizationMethod[];
  /**
   * Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format.
   */
  clientAuthenticationMethod?: ClientAuthenticationMethod[];
  /**
   * Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {"name" : "name value", "value": "a value"}.
   */
  tokenBodyParameters?: TokenBodyParameterContract[];
  /**
   * OAuth token endpoint. Contains absolute URI to entity being referenced.
   */
  tokenEndpoint?: string;
  /**
   * If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security.
   */
  supportState?: boolean;
  /**
   * Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values.
   */
  defaultScope?: string;
  /**
   * Specifies the mechanism by which access token is passed to the API.
   */
  bearerTokenSendingMethods?: BearerTokenSendingMethod[];
  /**
   * Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username.
   */
  resourceOwnerUsername?: string;
  /**
   * Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password.
   */
  resourceOwnerPassword?: string;
  /**
   * User-friendly authorization server name.
   */
  displayName?: string;
  /**
   * Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.
   */
  clientRegistrationEndpoint?: string;
  /**
   * OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
   */
  authorizationEndpoint?: string;
  /**
   * Form of an authorization grant, which the client uses to request the access token.
   */
  grantTypes?: GrantType[];
  /**
   * Client or app id registered with this authorization server.
   */
  clientId?: string;
  /**
   * Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  clientSecret?: string;
};

/**
 * External OAuth authorization server Update settings contract.
 */
export interface AuthorizationServerContractBaseProperties {
  /**
   * Description of the authorization server. Can contain HTML formatting tags.
   */
  description?: string;
  /**
   * HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional.
   */
  authorizationMethods?: AuthorizationMethod[];
  /**
   * Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format.
   */
  clientAuthenticationMethod?: ClientAuthenticationMethod[];
  /**
   * Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {"name" : "name value", "value": "a value"}.
   */
  tokenBodyParameters?: TokenBodyParameterContract[];
  /**
   * OAuth token endpoint. Contains absolute URI to entity being referenced.
   */
  tokenEndpoint?: string;
  /**
   * If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security.
   */
  supportState?: boolean;
  /**
   * Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values.
   */
  defaultScope?: string;
  /**
   * Specifies the mechanism by which access token is passed to the API.
   */
  bearerTokenSendingMethods?: BearerTokenSendingMethod[];
  /**
   * Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username.
   */
  resourceOwnerUsername?: string;
  /**
   * Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password.
   */
  resourceOwnerPassword?: string;
}

/**
 * OAuth acquire token request body parameter (www-url-form-encoded).
 */
export interface TokenBodyParameterContract {
  /**
   * body parameter name.
   */
  name: string;
  /**
   * body parameter value.
   */
  value: string;
}

/**
 * External OAuth authorization server settings Properties.
 */
export type AuthorizationServerContractProperties = AuthorizationServerContractBaseProperties & {
  /**
   * User-friendly authorization server name.
   */
  displayName: string;
  /**
   * Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.
   */
  clientRegistrationEndpoint: string;
  /**
   * OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
   */
  authorizationEndpoint: string;
  /**
   * Form of an authorization grant, which the client uses to request the access token.
   */
  grantTypes: GrantType[];
  /**
   * Client or app id registered with this authorization server.
   */
  clientId: string;
  /**
   * Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  clientSecret?: string;
};

/**
 * External OAuth authorization server settings.
 */
export type AuthorizationServerUpdateContract = Resource & {
  /**
   * Description of the authorization server. Can contain HTML formatting tags.
   */
  description?: string;
  /**
   * HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional.
   */
  authorizationMethods?: AuthorizationMethod[];
  /**
   * Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format.
   */
  clientAuthenticationMethod?: ClientAuthenticationMethod[];
  /**
   * Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {"name" : "name value", "value": "a value"}.
   */
  tokenBodyParameters?: TokenBodyParameterContract[];
  /**
   * OAuth token endpoint. Contains absolute URI to entity being referenced.
   */
  tokenEndpoint?: string;
  /**
   * If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security.
   */
  supportState?: boolean;
  /**
   * Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values.
   */
  defaultScope?: string;
  /**
   * Specifies the mechanism by which access token is passed to the API.
   */
  bearerTokenSendingMethods?: BearerTokenSendingMethod[];
  /**
   * Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username.
   */
  resourceOwnerUsername?: string;
  /**
   * Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password.
   */
  resourceOwnerPassword?: string;
  /**
   * User-friendly authorization server name.
   */
  displayName?: string;
  /**
   * Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.
   */
  clientRegistrationEndpoint?: string;
  /**
   * OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
   */
  authorizationEndpoint?: string;
  /**
   * Form of an authorization grant, which the client uses to request the access token.
   */
  grantTypes?: GrantType[];
  /**
   * Client or app id registered with this authorization server.
   */
  clientId?: string;
  /**
   * Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  clientSecret?: string;
};

/**
 * External OAuth authorization server Update settings contract.
 */
export type AuthorizationServerUpdateContractProperties = AuthorizationServerContractBaseProperties & {
  /**
   * User-friendly authorization server name.
   */
  displayName?: string;
  /**
   * Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.
   */
  clientRegistrationEndpoint?: string;
  /**
   * OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
   */
  authorizationEndpoint?: string;
  /**
   * Form of an authorization grant, which the client uses to request the access token.
   */
  grantTypes?: GrantType[];
  /**
   * Client or app id registered with this authorization server.
   */
  clientId?: string;
  /**
   * Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  clientSecret?: string;
};

/**
 * Client or app secret used in IdentityProviders, Aad, OpenID or OAuth.
 */
export interface ClientSecretContract {
  /**
   * Client or app secret used in IdentityProviders, Aad, OpenID or OAuth.
   */
  clientSecret?: string;
}

/**
 * Paged Backend list representation.
 */
export interface BackendCollection {
  /**
   * Backend values.
   */
  value?: BackendContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Backend details.
 */
export type BackendContract = Resource & {
  /**
   * Backend Title.
   */
  title?: string;
  /**
   * Backend Description.
   */
  description?: string;
  /**
   * Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps.
   */
  resourceId?: string;
  /**
   * Backend Properties contract
   */
  properties?: BackendProperties;
  /**
   * Backend Credentials Contract Properties
   */
  credentials?: BackendCredentialsContract;
  /**
   * Backend Proxy Contract Properties
   */
  proxy?: BackendProxyContract;
  /**
   * Backend TLS Properties
   */
  tls?: BackendTlsProperties;
  /**
   * Runtime Url of the Backend.
   */
  url?: string;
  /**
   * Backend communication protocol.
   */
  protocol?: BackendProtocol;
};

/**
 * Backend entity base Parameter set.
 */
export interface BackendBaseParameters {
  /**
   * Backend Title.
   */
  title?: string;
  /**
   * Backend Description.
   */
  description?: string;
  /**
   * Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps.
   */
  resourceId?: string;
  /**
   * Backend Properties contract
   */
  properties?: BackendProperties;
  /**
   * Backend Credentials Contract Properties
   */
  credentials?: BackendCredentialsContract;
  /**
   * Backend Proxy Contract Properties
   */
  proxy?: BackendProxyContract;
  /**
   * Backend TLS Properties
   */
  tls?: BackendTlsProperties;
}

/**
 * Properties specific to the Backend Type.
 */
export interface BackendProperties {
  /**
   * Backend Service Fabric Cluster Properties
   */
  serviceFabricCluster?: BackendServiceFabricClusterProperties;
}

/**
 * Properties of the Service Fabric Type Backend.
 */
export interface BackendServiceFabricClusterProperties {
  /**
   * The client certificate thumbprint for the management endpoint.
   */
  clientCertificatethumbprint: string;
  /**
   * Maximum number of retries while attempting resolve the partition.
   */
  maxPartitionResolutionRetries?: number;
  /**
   * The cluster management endpoint.
   */
  managementEndpoints: string[];
  /**
   * Thumbprints of certificates cluster management service uses for tls communication
   */
  serverCertificateThumbprints?: string[];
  /**
   * Server X509 Certificate Names Collection
   */
  serverX509Names?: X509CertificateName[];
}

/**
 * Properties of server X509Names.
 */
export interface X509CertificateName {
  /**
   * Common Name of the Certificate.
   */
  name?: string;
  /**
   * Thumbprint for the Issuer of the Certificate.
   */
  issuerCertificateThumbprint?: string;
}

/**
 * Details of the Credentials used to connect to Backend.
 */
export interface BackendCredentialsContract {
  /**
   * List of Client Certificate Thumbprint.
   */
  certificate?: string[];
  /**
   * Query Parameter description.
   */
  query?: { [propertyName: string]: string[] };
  /**
   * Header Parameter description.
   */
  header?: { [propertyName: string]: string[] };
  /**
   * Authorization header authentication
   */
  authorization?: BackendAuthorizationHeaderCredentials;
}

/**
 * Authorization header information.
 */
export interface BackendAuthorizationHeaderCredentials {
  /**
   * Authentication Scheme name.
   */
  scheme: string;
  /**
   * Authentication Parameter value.
   */
  parameter: string;
}

/**
 * Details of the Backend WebProxy Server to use in the Request to Backend.
 */
export interface BackendProxyContract {
  /**
   * WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
   */
  url: string;
  /**
   * Username to connect to the WebProxy server
   */
  username?: string;
  /**
   * Password to connect to the WebProxy Server
   */
  password?: string;
}

/**
 * Properties controlling TLS Certificate Validation.
 */
export interface BackendTlsProperties {
  /**
   * Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.
   */
  validateCertificateChain?: boolean;
  /**
   * Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.
   */
  validateCertificateName?: boolean;
}

/**
 * Parameters supplied to the Create Backend operation.
 */
export type BackendContractProperties = BackendBaseParameters & {
  /**
   * Runtime Url of the Backend.
   */
  url: string;
  /**
   * Backend communication protocol.
   */
  protocol: BackendProtocol;
};

/**
 * Backend update parameters.
 */
export interface BackendUpdateParameters {
  /**
   * Backend Title.
   */
  title?: string;
  /**
   * Backend Description.
   */
  description?: string;
  /**
   * Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps.
   */
  resourceId?: string;
  /**
   * Backend Properties contract
   */
  properties?: BackendProperties;
  /**
   * Backend Credentials Contract Properties
   */
  credentials?: BackendCredentialsContract;
  /**
   * Backend Proxy Contract Properties
   */
  proxy?: BackendProxyContract;
  /**
   * Backend TLS Properties
   */
  tls?: BackendTlsProperties;
  /**
   * Runtime Url of the Backend.
   */
  url?: string;
  /**
   * Backend communication protocol.
   */
  protocol?: BackendProtocol;
}

/**
 * Parameters supplied to the Update Backend operation.
 */
export type BackendUpdateParameterProperties = BackendBaseParameters & {
  /**
   * Runtime Url of the Backend.
   */
  url?: string;
  /**
   * Backend communication protocol.
   */
  protocol?: BackendProtocol;
};

/**
 * Reconnect request parameters.
 */
export type BackendReconnectContract = Resource & {
  /**
   * Duration in ISO8601 format after which reconnect will be initiated. Minimum duration of the Reconnect is PT2M.
   */
  after?: string;
};

/**
 * Paged Caches list representation.
 */
export interface CacheCollection {
  /**
   * Page values.
   */
  value?: CacheContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Cache details.
 */
export type CacheContract = Resource & {
  /**
   * Cache description
   */
  description?: string;
  /**
   * Runtime connection string to cache
   */
  connectionString?: string;
  /**
   * Original uri of entity in external system cache points to
   */
  resourceId?: string;
};

/**
 * Cache update details.
 */
export interface CacheUpdateParameters {
  /**
   * Cache description
   */
  description?: string;
  /**
   * Runtime connection string to cache
   */
  connectionString?: string;
  /**
   * Original uri of entity in external system cache points to
   */
  resourceId?: string;
}

/**
 * Paged Certificates list representation.
 */
export interface CertificateCollection {
  /**
   * Page values.
   */
  value?: CertificateContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Certificate details.
 */
export type CertificateContract = Resource & {
  /**
   * Subject attribute of the certificate.
   */
  subject?: string;
  /**
   * Thumbprint of the certificate.
   */
  thumbprint?: string;
  /**
   * Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  expirationDate?: Date;
};

/**
 * Certificate create or update details.
 */
export interface CertificateCreateOrUpdateParameters {
  /**
   * Base 64 encoded certificate using the application/x-pkcs12 representation.
   */
  data?: string;
  /**
   * Password for the Certificate
   */
  password?: string;
}

/**
 * Result of the request to list REST API operations. It contains a list of operations and a URL nextLink to get the next set of results.
 */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider.
   */
  value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * The object that describes the operation.
   */
  display?: OperationDisplay;
  /**
   * The operation origin.
   */
  origin?: string;
  /**
   * The operation properties.
   */
  properties?: any;
}

/**
 * The object that describes the operation.
 */
export interface OperationDisplay {
  /**
   * Friendly name of the resource provider
   */
  provider?: string;
  /**
   * Operation type: read, write, delete, listKeys/action, etc.
   */
  operation?: string;
  /**
   * Resource type on which the operation is performed.
   */
  resource?: string;
  /**
   * Friendly name of the operation
   */
  description?: string;
}

/**
 * The API Management service SKUs operation response.
 */
export interface ResourceSkuResults {
  /**
   * The list of skus available for the service.
   */
  value: ResourceSkuResult[];
  /**
   * The uri to fetch the next page of API Management service Skus.
   */
  nextLink?: string;
}

/**
 * Describes an available API Management service SKU.
 */
export interface ResourceSkuResult {
  /**
   * The type of resource the SKU applies to.
   */
  readonly resourceType?: string;
  /**
   * Specifies API Management SKU.
   */
  readonly sku?: ResourceSku;
  /**
   * Specifies the number of API Management units.
   */
  readonly capacity?: ResourceSkuCapacity;
}

/**
 * Describes an available API Management SKU.
 */
export interface ResourceSku {
  /**
   * Name of the Sku.
   */
  name?: SkuType;
}

/**
 * Describes scaling information of a SKU.
 */
export interface ResourceSkuCapacity {
  /**
   * The minimum capacity.
   */
  readonly minimum?: number;
  /**
   * The maximum capacity that can be set.
   */
  readonly maximum?: number;
  /**
   * The default capacity.
   */
  readonly default?: number;
  /**
   * The scale type applicable to the sku.
   */
  readonly scaleType?: ResourceSkuCapacityScaleType;
}

/**
 * Parameters supplied to the Backup/Restore of an API Management service operation.
 */
export interface ApiManagementServiceBackupRestoreParameters {
  /**
   * Azure Cloud Storage account (used to place/retrieve the backup) name.
   */
  storageAccount: string;
  /**
   * Azure Cloud Storage account (used to place/retrieve the backup) access key.
   */
  accessKey: string;
  /**
   * Azure Cloud Storage blob container name used to place/retrieve the backup.
   */
  containerName: string;
  /**
   * The name of the backup file to create.
   */
  backupName: string;
}

/**
 * The Resource definition.
 */
export interface ApimResource {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type for API Management resource is set to Microsoft.ApiManagement.
   */
  readonly type?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A single API Management service resource in List or Get response.
 */
export type ApiManagementServiceResource = ApimResource & {
  /**
   * SKU properties of the API Management service.
   */
  sku: ApiManagementServiceSkuProperties;
  /**
   * Managed service identity of the Api Management service.
   */
  identity?: ApiManagementServiceIdentity;
  /**
   * Resource location.
   */
  location: string;
  /**
   * ETag of the resource.
   */
  readonly etag?: string;
  /**
   * Email address from which the notification will be sent.
   */
  notificationSenderEmail?: string;
  /**
   * The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
   */
  readonly provisioningState?: string;
  /**
   * The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
   */
  readonly targetProvisioningState?: string;
  /**
   * Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   */
  readonly createdAtUtc?: Date;
  /**
   * Gateway URL of the API Management service.
   */
  readonly gatewayUrl?: string;
  /**
   * Gateway URL of the API Management service in the Default Region.
   */
  readonly gatewayRegionalUrl?: string;
  /**
   * Publisher portal endpoint Url of the API Management service.
   */
  readonly portalUrl?: string;
  /**
   * Management API endpoint URL of the API Management service.
   */
  readonly managementApiUrl?: string;
  /**
   * SCM endpoint URL of the API Management service.
   */
  readonly scmUrl?: string;
  /**
   * DEveloper Portal endpoint URL of the API Management service.
   */
  readonly developerPortalUrl?: string;
  /**
   * Custom hostname configuration of the API Management service.
   */
  hostnameConfigurations?: HostnameConfiguration[];
  /**
   * Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard and Premium SKU.
   */
  readonly publicIPAddresses?: string[];
  /**
   * Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard and Premium SKU.
   */
  readonly privateIPAddresses?: string[];
  /**
   * Virtual network configuration of the API Management service.
   */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /**
   * Additional datacenter locations of the API Management service.
   */
  additionalLocations?: AdditionalLocation[];
  /**
   * Custom properties of the API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1st 2018 and `False` otherwise. Http2 setting's default value is `False`.</br></br>You can disable any of next ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example, `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for them.  Note: next ciphers can't be disabled since they are required by Azure CloudService internal components: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384
   */
  customProperties?: { [propertyName: string]: string };
  /**
   * List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10.
   */
  certificates?: CertificateConfiguration[];
  /**
   * Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway.
   */
  enableClientCertificate?: boolean;
  /**
   * Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region.
   */
  disableGateway?: boolean;
  /**
   * The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
   */
  virtualNetworkType?: VirtualNetworkType;
  /**
   * Control Plane Apis version constraint for the API Management service.
   */
  apiVersionConstraint?: ApiVersionConstraint;
  /**
   * Publisher email.
   */
  publisherEmail: string;
  /**
   * Publisher name.
   */
  publisherName: string;
};

/**
 * Base Properties of an API Management service resource description.
 */
export interface ApiManagementServiceBaseProperties {
  /**
   * Email address from which the notification will be sent.
   */
  notificationSenderEmail?: string;
  /**
   * The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
   */
  readonly provisioningState?: string;
  /**
   * The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
   */
  readonly targetProvisioningState?: string;
  /**
   * Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   */
  readonly createdAtUtc?: Date;
  /**
   * Gateway URL of the API Management service.
   */
  readonly gatewayUrl?: string;
  /**
   * Gateway URL of the API Management service in the Default Region.
   */
  readonly gatewayRegionalUrl?: string;
  /**
   * Publisher portal endpoint Url of the API Management service.
   */
  readonly portalUrl?: string;
  /**
   * Management API endpoint URL of the API Management service.
   */
  readonly managementApiUrl?: string;
  /**
   * SCM endpoint URL of the API Management service.
   */
  readonly scmUrl?: string;
  /**
   * DEveloper Portal endpoint URL of the API Management service.
   */
  readonly developerPortalUrl?: string;
  /**
   * Custom hostname configuration of the API Management service.
   */
  hostnameConfigurations?: HostnameConfiguration[];
  /**
   * Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard and Premium SKU.
   */
  readonly publicIPAddresses?: string[];
  /**
   * Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard and Premium SKU.
   */
  readonly privateIPAddresses?: string[];
  /**
   * Virtual network configuration of the API Management service.
   */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /**
   * Additional datacenter locations of the API Management service.
   */
  additionalLocations?: AdditionalLocation[];
  /**
   * Custom properties of the API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1st 2018 and `False` otherwise. Http2 setting's default value is `False`.</br></br>You can disable any of next ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example, `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for them.  Note: next ciphers can't be disabled since they are required by Azure CloudService internal components: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384
   */
  customProperties?: { [propertyName: string]: string };
  /**
   * List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10.
   */
  certificates?: CertificateConfiguration[];
  /**
   * Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway.
   */
  enableClientCertificate?: boolean;
  /**
   * Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region.
   */
  disableGateway?: boolean;
  /**
   * The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
   */
  virtualNetworkType?: VirtualNetworkType;
  /**
   * Control Plane Apis version constraint for the API Management service.
   */
  apiVersionConstraint?: ApiVersionConstraint;
}

/**
 * Custom hostname configuration.
 */
export interface HostnameConfiguration {
  /**
   * Hostname type.
   */
  type: HostnameType;
  /**
   * Hostname to configure on the Api Management service.
   */
  hostName: string;
  /**
   * Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with MSI. The secret should be of type *application/x-pkcs12*
   */
  keyVaultId?: string;
  /**
   * Base64 Encoded certificate.
   */
  encodedCertificate?: string;
  /**
   * Certificate Password.
   */
  certificatePassword?: string;
  /**
   * Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
   */
  defaultSslBinding?: boolean;
  /**
   * Specify true to always negotiate client certificate on the hostname. Default Value is false.
   */
  negotiateClientCertificate?: boolean;
  /**
   * Certificate information.
   */
  certificate?: CertificateInformation;
}

/**
 * SSL certificate information.
 */
export interface CertificateInformation {
  /**
   * Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   */
  expiry: Date;
  /**
   * Thumbprint of the certificate.
   */
  thumbprint: string;
  /**
   * Subject of the certificate.
   */
  subject: string;
}

/**
 * Configuration of a virtual network to which API Management service is deployed.
 */
export interface VirtualNetworkConfiguration {
  /**
   * The virtual network ID. This is typically a GUID. Expect a null GUID by default.
   */
  readonly vnetid?: string;
  /**
   * The name of the subnet.
   */
  readonly subnetname?: string;
  /**
   * The full resource ID of a subnet in a virtual network to deploy the API Management service in.
   */
  subnetResourceId?: string;
}

/**
 * Description of an additional API Management resource location.
 */
export interface AdditionalLocation {
  /**
   * The location name of the additional region among Azure Data center regions.
   */
  location: string;
  /**
   * SKU properties of the API Management service.
   */
  sku: ApiManagementServiceSkuProperties;
  /**
   * Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
   */
  readonly publicIPAddresses?: string[];
  /**
   * Private Static Load Balanced IP addresses of the API Management service which is deployed in an Internal Virtual Network in a particular additional location. Available only for Basic, Standard and Premium SKU.
   */
  readonly privateIPAddresses?: string[];
  /**
   * Virtual network configuration for the location.
   */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /**
   * Gateway URL of the API Management service in the Region.
   */
  readonly gatewayRegionalUrl?: string;
  /**
   * Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in this additional location.
   */
  disableGateway?: boolean;
}

/**
 * API Management service resource SKU properties.
 */
export interface ApiManagementServiceSkuProperties {
  /**
   * Name of the Sku.
   */
  name: SkuType;
  /**
   * Capacity of the SKU (number of deployed units of the SKU). For Consumption SKU capacity must be specified as 0.
   */
  capacity: number;
}

/**
 * Certificate configuration which consist of non-trusted intermediates and root certificates.
 */
export interface CertificateConfiguration {
  /**
   * Base64 Encoded certificate.
   */
  encodedCertificate?: string;
  /**
   * Certificate Password.
   */
  certificatePassword?: string;
  /**
   * The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations.
   */
  storeName: CertificateConfigurationStoreName;
  /**
   * Certificate information.
   */
  certificate?: CertificateInformation;
}

/**
 * Control Plane Apis version constraint for the API Management service.
 */
export interface ApiVersionConstraint {
  /**
   * Limit control plane API calls to API Management service with version equal to or newer than this value.
   */
  minApiVersion?: string;
}

/**
 * Properties of an API Management service resource description.
 */
export type ApiManagementServiceProperties = ApiManagementServiceBaseProperties & {
  /**
   * Publisher email.
   */
  publisherEmail: string;
  /**
   * Publisher name.
   */
  publisherName: string;
};

/**
 * Identity properties of the Api Management service resource.
 */
export interface ApiManagementServiceIdentity {
  /**
   * The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
   */
  type: ApimIdentityType;
  /**
   * The principal id of the identity.
   */
  readonly principalId?: string;
  /**
   * The client tenant id of the identity.
   */
  readonly tenantId?: string;
  /**
   * The list of user identities associated with the resource. The user identity
   * dictionary key references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
   *     providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   */
  userAssignedIdentities?: { [propertyName: string]: UserIdentityProperties };
}

export interface UserIdentityProperties {
  /**
   * The principal id of user assigned identity.
   */
  principalId?: string;
  /**
   * The client id of user assigned identity.
   */
  clientId?: string;
}

/**
 * Parameter supplied to Update Api Management Service.
 */
export type ApiManagementServiceUpdateParameters = ApimResource & {
  /**
   * SKU properties of the API Management service.
   */
  sku?: ApiManagementServiceSkuProperties;
  /**
   * Managed service identity of the Api Management service.
   */
  identity?: ApiManagementServiceIdentity;
  /**
   * ETag of the resource.
   */
  readonly etag?: string;
  /**
   * Email address from which the notification will be sent.
   */
  notificationSenderEmail?: string;
  /**
   * The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
   */
  readonly provisioningState?: string;
  /**
   * The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
   */
  readonly targetProvisioningState?: string;
  /**
   * Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   */
  readonly createdAtUtc?: Date;
  /**
   * Gateway URL of the API Management service.
   */
  readonly gatewayUrl?: string;
  /**
   * Gateway URL of the API Management service in the Default Region.
   */
  readonly gatewayRegionalUrl?: string;
  /**
   * Publisher portal endpoint Url of the API Management service.
   */
  readonly portalUrl?: string;
  /**
   * Management API endpoint URL of the API Management service.
   */
  readonly managementApiUrl?: string;
  /**
   * SCM endpoint URL of the API Management service.
   */
  readonly scmUrl?: string;
  /**
   * DEveloper Portal endpoint URL of the API Management service.
   */
  readonly developerPortalUrl?: string;
  /**
   * Custom hostname configuration of the API Management service.
   */
  hostnameConfigurations?: HostnameConfiguration[];
  /**
   * Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard and Premium SKU.
   */
  readonly publicIPAddresses?: string[];
  /**
   * Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard and Premium SKU.
   */
  readonly privateIPAddresses?: string[];
  /**
   * Virtual network configuration of the API Management service.
   */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /**
   * Additional datacenter locations of the API Management service.
   */
  additionalLocations?: AdditionalLocation[];
  /**
   * Custom properties of the API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1st 2018 and `False` otherwise. Http2 setting's default value is `False`.</br></br>You can disable any of next ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example, `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for them.  Note: next ciphers can't be disabled since they are required by Azure CloudService internal components: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384
   */
  customProperties?: { [propertyName: string]: string };
  /**
   * List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10.
   */
  certificates?: CertificateConfiguration[];
  /**
   * Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway.
   */
  enableClientCertificate?: boolean;
  /**
   * Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region.
   */
  disableGateway?: boolean;
  /**
   * The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
   */
  virtualNetworkType?: VirtualNetworkType;
  /**
   * Control Plane Apis version constraint for the API Management service.
   */
  apiVersionConstraint?: ApiVersionConstraint;
  /**
   * Publisher email.
   */
  publisherEmail?: string;
  /**
   * Publisher name.
   */
  publisherName?: string;
};

/**
 * Properties of an API Management service resource description.
 */
export type ApiManagementServiceUpdateProperties = ApiManagementServiceBaseProperties & {
  /**
   * Publisher email.
   */
  publisherEmail?: string;
  /**
   * Publisher name.
   */
  publisherName?: string;
};

/**
 * The response of the List API Management services operation.
 */
export interface ApiManagementServiceListResult {
  /**
   * Result of the List API Management services operation.
   */
  value: ApiManagementServiceResource[];
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of API Management services.
   */
  nextLink?: string;
}

/**
 * The response of the GetSsoToken operation.
 */
export interface ApiManagementServiceGetSsoTokenResult {
  /**
   * Redirect URL to the Publisher Portal containing the SSO token.
   */
  redirectUri?: string;
}

/**
 * Parameters supplied to the CheckNameAvailability operation.
 */
export interface ApiManagementServiceCheckNameAvailabilityParameters {
  /**
   * The name to check for availability.
   */
  name: string;
}

/**
 * Response of the CheckNameAvailability operation.
 */
export interface ApiManagementServiceNameAvailabilityResult {
  /**
   * True if the name is available and can be used to create a new API Management service; otherwise false.
   */
  readonly nameAvailable?: boolean;
  /**
   * If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that <resourceName> is already in use, and direct them to select a different name.
   */
  readonly message?: string;
  /**
   * Invalid indicates the name provided does not match the resource provider’s naming requirements (incorrect length, unsupported characters, etc.)  AlreadyExists indicates that the name is already in use and is therefore unavailable.
   */
  reason?: NameAvailabilityReason;
}

/**
 * Parameter supplied to the Apply Network configuration operation.
 */
export interface ApiManagementServiceApplyNetworkConfigurationParameters {
  /**
   * Location of the Api Management service to update for a multi-region service. For a service deployed in a single region, this parameter is not required.
   */
  location?: string;
}

/**
 * Paged email template list representation.
 */
export interface EmailTemplateCollection {
  /**
   * Page values.
   */
  value?: EmailTemplateContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Email Template details.
 */
export type EmailTemplateContract = Resource & {
  /**
   * Subject of the Template.
   */
  subject?: string;
  /**
   * Email Template Body. This should be a valid XDocument
   */
  body?: string;
  /**
   * Title of the Template.
   */
  title?: string;
  /**
   * Description of the Email Template.
   */
  description?: string;
  /**
   * Whether the template is the default template provided by Api Management or has been edited.
   */
  readonly isDefault?: boolean;
  /**
   * Email Template Parameter values.
   */
  parameters?: EmailTemplateParametersContractProperties[];
};

/**
 * Email Template Parameter contract.
 */
export interface EmailTemplateParametersContractProperties {
  /**
   * Template parameter name.
   */
  name?: string;
  /**
   * Template parameter title.
   */
  title?: string;
  /**
   * Template parameter description.
   */
  description?: string;
}

/**
 * Email Template update Parameters.
 */
export interface EmailTemplateUpdateParameters {
  /**
   * Subject of the Template.
   */
  subject?: string;
  /**
   * Title of the Template.
   */
  title?: string;
  /**
   * Description of the Email Template.
   */
  description?: string;
  /**
   * Email Template Body. This should be a valid XDocument
   */
  body?: string;
  /**
   * Email Template Parameter values.
   */
  parameters?: EmailTemplateParametersContractProperties[];
}

/**
 * Paged Gateway list representation.
 */
export interface GatewayCollection {
  /**
   * Page values.
   */
  readonly value?: GatewayContract[];
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Gateway details.
 */
export type GatewayContract = Resource & {
  /**
   * Gateway location.
   */
  locationData?: ResourceLocationDataContract;
  /**
   * Gateway description
   */
  description?: string;
};

/**
 * Resource location data properties.
 */
export interface ResourceLocationDataContract {
  /**
   * A canonical name for the geographic or physical location.
   */
  name: string;
  /**
   * The city or locality where the resource is located.
   */
  city?: string;
  /**
   * The district, state, or province where the resource is located.
   */
  district?: string;
  /**
   * The country or region where the resource is located.
   */
  countryOrRegion?: string;
}

/**
 * Gateway authentication keys.
 */
export interface GatewayKeysContract {
  /**
   * Primary gateway key.
   */
  primary?: string;
  /**
   * Secondary gateway key.
   */
  secondary?: string;
}

/**
 * Gateway key regeneration request contract properties.
 */
export interface GatewayKeyRegenerationRequestContract {
  /**
   * The Key being regenerated.
   */
  keyType: KeyType;
}

/**
 * Gateway token request contract properties.
 */
export interface GatewayTokenRequestContract {
  /**
   * The Key to be used to generate gateway token.
   */
  keyType: KeyType;
  /**
   * The Expiry time of the Token. Maximum token expiry time is set to 30 days. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  expiry: Date;
}

/**
 * Gateway access token.
 */
export interface GatewayTokenContract {
  /**
   * Shared Access Authentication token value for the Gateway.
   */
  value?: string;
}

/**
 * Paged Gateway hostname configuration list representation.
 */
export interface GatewayHostnameConfigurationCollection {
  /**
   * Page values.
   */
  readonly value?: GatewayHostnameConfigurationContract[];
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Gateway hostname configuration details.
 */
export type GatewayHostnameConfigurationContract = Resource & {
  /**
   * Hostname value. Supports valid domain name, partial or full wildcard
   */
  hostname?: string;
  /**
   * Identifier of Certificate entity that will be used for TLS connection establishment
   */
  certificateId?: string;
  /**
   * Determines whether gateway requests client certificate
   */
  negotiateClientCertificate?: boolean;
};

/**
 * Association entity details.
 */
export type AssociationContract = Resource & {
  /**
   * Provisioning state.
   */
  provisioningState?: "created";
};

/**
 * Paged Group list representation.
 */
export interface GroupCollection {
  /**
   * Page values.
   */
  value?: GroupContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Contract details.
 */
export type GroupContract = Resource & {
  /**
   * Group name.
   */
  displayName?: string;
  /**
   * Group description. Can contain HTML formatting tags.
   */
  description?: string;
  /**
   * true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.
   */
  readonly builtIn?: boolean;
  /**
   * Group type.
   */
  typePropertiesType?: GroupType;
  /**
   * For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null.
   */
  externalId?: string;
};

/**
 * Group contract Properties.
 */
export interface GroupContractProperties {
  /**
   * Group name.
   */
  displayName: string;
  /**
   * Group description. Can contain HTML formatting tags.
   */
  description?: string;
  /**
   * true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.
   */
  readonly builtIn?: boolean;
  /**
   * Group type.
   */
  type?: GroupType;
  /**
   * For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null.
   */
  externalId?: string;
}

/**
 * Parameters supplied to the Create Group operation.
 */
export interface GroupCreateParameters {
  /**
   * Group name.
   */
  displayName?: string;
  /**
   * Group description.
   */
  description?: string;
  /**
   * Group type.
   */
  type?: GroupType;
  /**
   * Identifier of the external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null.
   */
  externalId?: string;
}

/**
 * Parameters supplied to the Update Group operation.
 */
export interface GroupUpdateParameters {
  /**
   * Group name.
   */
  displayName?: string;
  /**
   * Group description.
   */
  description?: string;
  /**
   * Group type.
   */
  type?: GroupType;
  /**
   * Identifier of the external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null.
   */
  externalId?: string;
}

/**
 * Paged Users list representation.
 */
export interface UserCollection {
  /**
   * Page values.
   */
  value?: UserContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * User details.
 */
export type UserContract = Resource & {
  /**
   * Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
   */
  state?: UserState;
  /**
   * Optional note about a user set by the administrator.
   */
  note?: string;
  /**
   * Collection of user identities.
   */
  identities?: UserIdentityContract[];
  /**
   * First name.
   */
  firstName?: string;
  /**
   * Last name.
   */
  lastName?: string;
  /**
   * Email address.
   */
  email?: string;
  /**
   * Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  registrationDate?: Date;
  /**
   * Collection of groups user is part of.
   */
  readonly groups?: GroupContractProperties[];
};

/**
 * User Entity Base Parameters set.
 */
export interface UserEntityBaseParameters {
  /**
   * Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
   */
  state?: UserState;
  /**
   * Optional note about a user set by the administrator.
   */
  note?: string;
  /**
   * Collection of user identities.
   */
  identities?: UserIdentityContract[];
}

/**
 * User identity details.
 */
export interface UserIdentityContract {
  /**
   * Identity provider name.
   */
  provider?: string;
  /**
   * Identifier value within provider.
   */
  id?: string;
}

/**
 * User profile.
 */
export type UserContractProperties = UserEntityBaseParameters & {
  /**
   * First name.
   */
  firstName?: string;
  /**
   * Last name.
   */
  lastName?: string;
  /**
   * Email address.
   */
  email?: string;
  /**
   * Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  registrationDate?: Date;
  /**
   * Collection of groups user is part of.
   */
  readonly groups?: GroupContractProperties[];
};

/**
 * List of all the Identity Providers configured on the service instance.
 */
export interface IdentityProviderList {
  /**
   * Identity Provider configuration values.
   */
  value?: IdentityProviderContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Identity Provider details.
 */
export type IdentityProviderContract = Resource & {
  /**
   * Identity Provider Type identifier.
   */
  typePropertiesType?: IdentityProviderType;
  /**
   * The TenantId to use instead of Common when logging into Active Directory
   */
  signinTenant?: string;
  /**
   * List of Allowed Tenants when configuring Azure Active Directory login.
   */
  allowedTenants?: string[];
  /**
   * OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
   */
  authority?: string;
  /**
   * Signup Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signupPolicyName?: string;
  /**
   * Signin Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signinPolicyName?: string;
  /**
   * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
   */
  profileEditingPolicyName?: string;
  /**
   * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
   */
  passwordResetPolicyName?: string;
  /**
   * Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
   */
  clientId?: string;
  /**
   * Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  clientSecret?: string;
};

/**
 * Identity Provider Base Parameter Properties.
 */
export interface IdentityProviderBaseParameters {
  /**
   * Identity Provider Type identifier.
   */
  type?: IdentityProviderType;
  /**
   * The TenantId to use instead of Common when logging into Active Directory
   */
  signinTenant?: string;
  /**
   * List of Allowed Tenants when configuring Azure Active Directory login.
   */
  allowedTenants?: string[];
  /**
   * OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
   */
  authority?: string;
  /**
   * Signup Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signupPolicyName?: string;
  /**
   * Signin Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signinPolicyName?: string;
  /**
   * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
   */
  profileEditingPolicyName?: string;
  /**
   * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
   */
  passwordResetPolicyName?: string;
}

/**
 * The external Identity Providers like Facebook, Google, Microsoft, Twitter or Azure Active Directory which can be used to enable access to the API Management service developer portal for all users.
 */
export type IdentityProviderContractProperties = IdentityProviderBaseParameters & {
  /**
   * Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
   */
  clientId: string;
  /**
   * Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  clientSecret?: string;
};

/**
 * Identity Provider details.
 */
export type IdentityProviderCreateContract = Resource & {
  /**
   * Identity Provider Type identifier.
   */
  typePropertiesType?: IdentityProviderType;
  /**
   * The TenantId to use instead of Common when logging into Active Directory
   */
  signinTenant?: string;
  /**
   * List of Allowed Tenants when configuring Azure Active Directory login.
   */
  allowedTenants?: string[];
  /**
   * OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
   */
  authority?: string;
  /**
   * Signup Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signupPolicyName?: string;
  /**
   * Signin Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signinPolicyName?: string;
  /**
   * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
   */
  profileEditingPolicyName?: string;
  /**
   * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
   */
  passwordResetPolicyName?: string;
  /**
   * Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
   */
  clientId?: string;
  /**
   * Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  clientSecret?: string;
};

/**
 * The external Identity Providers like Facebook, Google, Microsoft, Twitter or Azure Active Directory which can be used to enable access to the API Management service developer portal for all users.
 */
export type IdentityProviderCreateContractProperties = IdentityProviderBaseParameters & {
  /**
   * Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
   */
  clientId: string;
  /**
   * Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  clientSecret: string;
};

/**
 * Parameters supplied to update Identity Provider
 */
export interface IdentityProviderUpdateParameters {
  /**
   * Identity Provider Type identifier.
   */
  type?: IdentityProviderType;
  /**
   * The TenantId to use instead of Common when logging into Active Directory
   */
  signinTenant?: string;
  /**
   * List of Allowed Tenants when configuring Azure Active Directory login.
   */
  allowedTenants?: string[];
  /**
   * OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
   */
  authority?: string;
  /**
   * Signup Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signupPolicyName?: string;
  /**
   * Signin Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signinPolicyName?: string;
  /**
   * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
   */
  profileEditingPolicyName?: string;
  /**
   * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
   */
  passwordResetPolicyName?: string;
  /**
   * Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
   */
  clientId?: string;
  /**
   * Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft.
   */
  clientSecret?: string;
}

/**
 * Parameters supplied to the Update Identity Provider operation.
 */
export type IdentityProviderUpdateProperties = IdentityProviderBaseParameters & {
  /**
   * Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
   */
  clientId?: string;
  /**
   * Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft.
   */
  clientSecret?: string;
};

/**
 * Paged Logger list representation.
 */
export interface LoggerCollection {
  /**
   * Logger values.
   */
  value?: LoggerContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Logger details.
 */
export type LoggerContract = Resource & {
  /**
   * Logger type.
   */
  loggerType?: LoggerType;
  /**
   * Logger description.
   */
  description?: string;
  /**
   * The name and SendRule connection string of the event hub for azureEventHub logger.
   * Instrumentation key for applicationInsights logger.
   */
  credentials?: { [propertyName: string]: string };
  /**
   * Whether records are buffered in the logger before publishing. Default is assumed to be true.
   */
  isBuffered?: boolean;
  /**
   * Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource).
   */
  resourceId?: string;
};

/**
 * Logger update contract.
 */
export interface LoggerUpdateContract {
  /**
   * Logger type.
   */
  loggerType?: LoggerType;
  /**
   * Logger description.
   */
  description?: string;
  /**
   * Logger credentials.
   */
  credentials?: { [propertyName: string]: string };
  /**
   * Whether records are buffered in the logger before publishing. Default is assumed to be true.
   */
  isBuffered?: boolean;
}

/**
 * Paged NamedValue list representation.
 */
export interface NamedValueCollection {
  /**
   * Page values.
   */
  value?: NamedValueContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * NamedValue details.
 */
export type NamedValueContract = Resource & {
  /**
   * Optional tags that when provided can be used to filter the NamedValue list.
   */
  tags?: string[];
  /**
   * Determines whether the value is a secret and should be encrypted or not. Default value is false.
   */
  secret?: boolean;
  /**
   * Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters.
   */
  displayName?: string;
  /**
   * Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  value?: string;
};

/**
 * NamedValue Entity Base Parameters set.
 */
export interface NamedValueEntityBaseParameters {
  /**
   * Optional tags that when provided can be used to filter the NamedValue list.
   */
  tags?: string[];
  /**
   * Determines whether the value is a secret and should be encrypted or not. Default value is false.
   */
  secret?: boolean;
}

/**
 * NamedValue Contract properties.
 */
export type NamedValueContractProperties = NamedValueEntityBaseParameters & {
  /**
   * Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters.
   */
  displayName: string;
  /**
   * Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  value?: string;
};

/**
 * NamedValue details.
 */
export type NamedValueCreateContract = Resource & {
  /**
   * Optional tags that when provided can be used to filter the NamedValue list.
   */
  tags?: string[];
  /**
   * Determines whether the value is a secret and should be encrypted or not. Default value is false.
   */
  secret?: boolean;
  /**
   * Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters.
   */
  displayName?: string;
  /**
   * Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  value?: string;
};

/**
 * NamedValue Contract properties.
 */
export type NamedValueCreateContractProperties = NamedValueEntityBaseParameters & {
  /**
   * Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters.
   */
  displayName: string;
  /**
   * Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  value: string;
};

/**
 * NamedValue update Parameters.
 */
export interface NamedValueUpdateParameters {
  /**
   * Optional tags that when provided can be used to filter the NamedValue list.
   */
  tags?: string[];
  /**
   * Determines whether the value is a secret and should be encrypted or not. Default value is false.
   */
  secret?: boolean;
  /**
   * Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters.
   */
  displayName?: string;
  /**
   * Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace.
   */
  value?: string;
}

/**
 * NamedValue Contract properties.
 */
export type NamedValueUpdateParameterProperties = NamedValueEntityBaseParameters & {
  /**
   * Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters.
   */
  displayName?: string;
  /**
   * Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace.
   */
  value?: string;
};

/**
 * Client or app secret used in IdentityProviders, Aad, OpenID or OAuth.
 */
export interface PropertyValueContract {
  /**
   * This is secret value of the NamedValue entity.
   */
  value?: string;
}

/**
 * Network Status in the Location
 */
export interface NetworkStatusContractByLocation {
  /**
   * Location of service
   */
  location?: string;
  /**
   * Network status in Location
   */
  networkStatus?: NetworkStatusContract;
}

/**
 * Network Status details.
 */
export interface NetworkStatusContract {
  /**
   * Gets the list of DNS servers IPV4 addresses.
   */
  dnsServers: string[];
  /**
   * Gets the list of Connectivity Status to the Resources on which the service depends upon.
   */
  connectivityStatus: ConnectivityStatusContract[];
}

/**
 * Details about connectivity to a resource.
 */
export interface ConnectivityStatusContract {
  /**
   * The hostname of the resource which the service depends on. This can be the database, storage or any other azure resource on which the service depends upon.
   */
  name: string;
  /**
   * Resource Connectivity Status Type identifier.
   */
  status: ConnectivityStatusType;
  /**
   * Error details of the connectivity to the resource.
   */
  error?: string;
  /**
   * The date when the resource connectivity status was last updated. This status should be updated every 15 minutes. If this status has not been updated, then it means that the service has lost network connectivity to the resource, from inside the Virtual Network.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  lastUpdated: Date;
  /**
   * The date when the resource connectivity status last Changed from success to failure or vice-versa. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  lastStatusChange: Date;
}

/**
 * Paged Notification list representation.
 */
export interface NotificationCollection {
  /**
   * Page values.
   */
  value?: NotificationContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Notification details.
 */
export type NotificationContract = Resource & {
  /**
   * Title of the Notification.
   */
  title?: string;
  /**
   * Description of the Notification.
   */
  description?: string;
  /**
   * Recipient Parameter values.
   */
  recipients?: RecipientsContractProperties;
};

/**
 * Notification Parameter contract.
 */
export interface RecipientsContractProperties {
  /**
   * List of Emails subscribed for the notification.
   */
  emails?: string[];
  /**
   * List of Users subscribed for the notification.
   */
  users?: string[];
}

/**
 * Paged Recipient User list representation.
 */
export interface RecipientUserCollection {
  /**
   * Page values.
   */
  value?: RecipientUserContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Recipient User details.
 */
export type RecipientUserContract = Resource & {
  /**
   * API Management UserId subscribed to notification.
   */
  userId?: string;
};

/**
 * Paged Recipient User list representation.
 */
export interface RecipientEmailCollection {
  /**
   * Page values.
   */
  value?: RecipientEmailContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Recipient Email details.
 */
export type RecipientEmailContract = Resource & {
  /**
   * User Email subscribed to notification.
   */
  email?: string;
};

/**
 * Paged OpenIdProviders list representation.
 */
export interface OpenIdConnectProviderCollection {
  /**
   * Page values.
   */
  value?: OpenidConnectProviderContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * OpenId Connect Provider details.
 */
export type OpenidConnectProviderContract = Resource & {
  /**
   * User-friendly OpenID Connect Provider name.
   */
  displayName?: string;
  /**
   * User-friendly description of OpenID Connect Provider.
   */
  description?: string;
  /**
   * Metadata endpoint URI.
   */
  metadataEndpoint?: string;
  /**
   * Client ID of developer console which is the client application.
   */
  clientId?: string;
  /**
   * Client Secret of developer console which is the client application.
   */
  clientSecret?: string;
};

/**
 * Parameters supplied to the Update OpenID Connect Provider operation.
 */
export interface OpenidConnectProviderUpdateContract {
  /**
   * User-friendly OpenID Connect Provider name.
   */
  displayName?: string;
  /**
   * User-friendly description of OpenID Connect Provider.
   */
  description?: string;
  /**
   * Metadata endpoint URI.
   */
  metadataEndpoint?: string;
  /**
   * Client ID of developer console which is the client application.
   */
  clientId?: string;
  /**
   * Client Secret of developer console which is the client application.
   */
  clientSecret?: string;
}

/**
 * Descriptions of APIM policies.
 */
export interface PolicyDescriptionCollection {
  /**
   * Descriptions of APIM policies.
   */
  value?: PolicyDescriptionContract[];
  /**
   * Total record count number.
   */
  count?: number;
}

/**
 * Policy description details.
 */
export type PolicyDescriptionContract = Resource & {
  /**
   * Policy description.
   */
  readonly description?: string;
  /**
   * Binary OR value of the Snippet scope.
   */
  readonly scope?: number;
};

/**
 * Sign-In settings for the Developer Portal.
 */
export type PortalSigninSettings = Resource & {
  /**
   * Redirect Anonymous users to the Sign-In page.
   */
  enabled?: boolean;
};

/**
 * Sign-Up settings for a developer portal.
 */
export type PortalSignupSettings = Resource & {
  /**
   * Allow users to sign up on a developer portal.
   */
  enabled?: boolean;
  /**
   * Terms of service contract properties.
   */
  termsOfService?: TermsOfServiceProperties;
};

/**
 * Terms of service contract properties.
 */
export interface TermsOfServiceProperties {
  /**
   * A terms of service text.
   */
  text?: string;
  /**
   * Display terms of service during a sign-up process.
   */
  enabled?: boolean;
  /**
   * Ask user for consent to the terms of service.
   */
  consentRequired?: boolean;
}

/**
 * Delegation settings for a developer portal.
 */
export type PortalDelegationSettings = Resource & {
  /**
   * A delegation Url.
   */
  url?: string;
  /**
   * A base64-encoded validation key to validate, that a request is coming from Azure API Management.
   */
  validationKey?: string;
  /**
   * Subscriptions delegation settings.
   */
  subscriptions?: SubscriptionsDelegationSettingsProperties;
  /**
   * User registration delegation settings.
   */
  userRegistration?: RegistrationDelegationSettingsProperties;
};

/**
 * Subscriptions delegation settings properties.
 */
export interface SubscriptionsDelegationSettingsProperties {
  /**
   * Enable or disable delegation for subscriptions.
   */
  enabled?: boolean;
}

/**
 * User registration delegation settings properties.
 */
export interface RegistrationDelegationSettingsProperties {
  /**
   * Enable or disable delegation for user registration.
   */
  enabled?: boolean;
}

/**
 * Client or app secret used in IdentityProviders, Aad, OpenID or OAuth.
 */
export interface PortalSettingValidationKeyContract {
  /**
   * This is secret value of the validation key in portal settings.
   */
  validationKey?: string;
}

/**
 * Product Update parameters.
 */
export interface ProductUpdateParameters {
  /**
   * Product description. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.
   */
  terms?: string;
  /**
   * Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.
   */
  subscriptionRequired?: boolean;
  /**
   * whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false.
   */
  approvalRequired?: boolean;
  /**
   * Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false.
   */
  subscriptionsLimit?: number;
  /**
   * whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
   */
  state?: ProductState;
  /**
   * Product name.
   */
  displayName?: string;
}

/**
 * Parameters supplied to the Update Product operation.
 */
export type ProductUpdateProperties = ProductEntityBaseParameters & {
  /**
   * Product name.
   */
  displayName?: string;
};

/**
 * Paged Subscriptions list representation.
 */
export interface SubscriptionCollection {
  /**
   * Page values.
   */
  value?: SubscriptionContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Subscription details.
 */
export type SubscriptionContract = Resource & {
  /**
   * The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId} where {userId} is a user identifier.
   */
  ownerId?: string;
  /**
   * Scope like /products/{productId} or /apis or /apis/{apiId}.
   */
  scope?: string;
  /**
   * The name of the subscription, or null if the subscription has no name.
   */
  displayName?: string;
  /**
   * Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
   */
  state?: SubscriptionState;
  /**
   * Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  readonly createdDate?: Date;
  /**
   * Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  startDate?: Date;
  /**
   * Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  expirationDate?: Date;
  /**
   * Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  endDate?: Date;
  /**
   * Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  notificationDate?: Date;
  /**
   * Subscription primary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  primaryKey?: string;
  /**
   * Subscription secondary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  secondaryKey?: string;
  /**
   * Optional subscription comment added by an administrator.
   */
  stateComment?: string;
  /**
   * Determines whether tracing is enabled
   */
  allowTracing?: boolean;
};

/**
 * Paged Quota Counter list representation.
 */
export interface QuotaCounterCollection {
  /**
   * Quota counter values.
   */
  value?: QuotaCounterContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Quota counter details.
 */
export interface QuotaCounterContract {
  /**
   * The Key value of the Counter. Must not be empty.
   */
  counterKey: string;
  /**
   * Identifier of the Period for which the counter was collected. Must not be empty.
   */
  periodKey: string;
  /**
   * The date of the start of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  periodStartTime: Date;
  /**
   * The date of the end of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  periodEndTime: Date;
  /**
   * Quota Value Properties
   */
  value?: QuotaCounterValueContractProperties;
}

/**
 * Quota counter value details.
 */
export interface QuotaCounterValueContractProperties {
  /**
   * Number of times Counter was called.
   */
  callsCount?: number;
  /**
   * Data Transferred in KiloBytes.
   */
  kbTransferred?: number;
}

/**
 * Lists Regions operation response details.
 */
export interface RegionListResult {
  /**
   * Lists of Regions.
   */
  value?: RegionContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Region profile.
 */
export interface RegionContract {
  /**
   * Region name.
   */
  readonly name?: string;
  /**
   * whether Region is the master region.
   */
  isMasterRegion?: boolean;
  /**
   * whether Region is deleted.
   */
  isDeleted?: boolean;
}

/**
 * Paged Report records list representation.
 */
export interface ReportCollection {
  /**
   * Page values.
   */
  value?: ReportRecordContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Report data.
 */
export interface ReportRecordContract {
  /**
   * Name depending on report endpoint specifies product, API, operation or developer name.
   */
  name?: string;
  /**
   * Start of aggregation period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  timestamp?: Date;
  /**
   * Length of aggregation period.  Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).
   */
  interval?: string;
  /**
   * Country to which this record data is related.
   */
  country?: string;
  /**
   * Country region to which this record data is related.
   */
  region?: string;
  /**
   * Zip code to which this record data is related.
   */
  zip?: string;
  /**
   * User identifier path. /users/{userId}
   */
  readonly userId?: string;
  /**
   * Product identifier path. /products/{productId}
   */
  readonly productId?: string;
  /**
   * API identifier path. /apis/{apiId}
   */
  apiId?: string;
  /**
   * Operation identifier path. /apis/{apiId}/operations/{operationId}
   */
  operationId?: string;
  /**
   * API region identifier.
   */
  apiRegion?: string;
  /**
   * Subscription identifier path. /subscriptions/{subscriptionId}
   */
  subscriptionId?: string;
  /**
   * Number of successful calls. This includes calls returning HttpStatusCode <= 301 and HttpStatusCode.NotModified and HttpStatusCode.TemporaryRedirect
   */
  callCountSuccess?: number;
  /**
   * Number of calls blocked due to invalid credentials. This includes calls returning HttpStatusCode.Unauthorized and HttpStatusCode.Forbidden and HttpStatusCode.TooManyRequests
   */
  callCountBlocked?: number;
  /**
   * Number of calls failed due to proxy or backend errors. This includes calls returning HttpStatusCode.BadRequest(400) and any Code between HttpStatusCode.InternalServerError (500) and 600
   */
  callCountFailed?: number;
  /**
   * Number of other calls.
   */
  callCountOther?: number;
  /**
   * Total number of calls.
   */
  callCountTotal?: number;
  /**
   * Bandwidth consumed.
   */
  bandwidth?: number;
  /**
   * Number of times when content was served from cache policy.
   */
  cacheHitCount?: number;
  /**
   * Number of times content was fetched from backend.
   */
  cacheMissCount?: number;
  /**
   * Average time it took to process request.
   */
  apiTimeAvg?: number;
  /**
   * Minimum time it took to process request.
   */
  apiTimeMin?: number;
  /**
   * Maximum time it took to process request.
   */
  apiTimeMax?: number;
  /**
   * Average time it took to process request on backend.
   */
  serviceTimeAvg?: number;
  /**
   * Minimum time it took to process request on backend.
   */
  serviceTimeMin?: number;
  /**
   * Maximum time it took to process request on backend.
   */
  serviceTimeMax?: number;
}

/**
 * Paged Report records list representation.
 */
export interface RequestReportCollection {
  /**
   * Page values.
   */
  value?: RequestReportRecordContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
}

/**
 * Request Report data.
 */
export interface RequestReportRecordContract {
  /**
   * API identifier path. /apis/{apiId}
   */
  apiId?: string;
  /**
   * Operation identifier path. /apis/{apiId}/operations/{operationId}
   */
  operationId?: string;
  /**
   * Product identifier path. /products/{productId}
   */
  readonly productId?: string;
  /**
   * User identifier path. /users/{userId}
   */
  readonly userId?: string;
  /**
   * The HTTP method associated with this request..
   */
  method?: string;
  /**
   * The full URL associated with this request.
   */
  url?: string;
  /**
   * The client IP address associated with this request.
   */
  ipAddress?: string;
  /**
   * The HTTP status code received by the gateway as a result of forwarding this request to the backend.
   */
  backendResponseCode?: string;
  /**
   * The HTTP status code returned by the gateway.
   */
  responseCode?: number;
  /**
   * The size of the response returned by the gateway.
   */
  responseSize?: number;
  /**
   * The date and time when this request was received by the gateway in ISO 8601 format.
   */
  timestamp?: Date;
  /**
   * Specifies if response cache was involved in generating the response. If the value is none, the cache was not used. If the value is hit, cached response was returned. If the value is miss, the cache was used but lookup resulted in a miss and request was fulfilled by the backend.
   */
  cache?: string;
  /**
   * The total time it took to process this request.
   */
  apiTime?: number;
  /**
   * he time it took to forward this request to the backend and get the response back.
   */
  serviceTime?: number;
  /**
   * Azure region where the gateway that processed this request is located.
   */
  apiRegion?: string;
  /**
   * Subscription identifier path. /subscriptions/{subscriptionId}
   */
  subscriptionId?: string;
  /**
   * Request Identifier.
   */
  requestId?: string;
  /**
   * The size of this request..
   */
  requestSize?: number;
}

/**
 * Subscription create details.
 */
export interface SubscriptionCreateParameters {
  /**
   * User (user id path) for whom subscription is being created in form /users/{userId}
   */
  ownerId?: string;
  /**
   * Scope like /products/{productId} or /apis or /apis/{apiId}.
   */
  scope?: string;
  /**
   * Subscription name.
   */
  displayName?: string;
  /**
   * Primary subscription key. If not specified during request key will be generated automatically.
   */
  primaryKey?: string;
  /**
   * Secondary subscription key. If not specified during request key will be generated automatically.
   */
  secondaryKey?: string;
  /**
   * Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
   */
  state?: SubscriptionState;
  /**
   * Determines whether tracing can be enabled
   */
  allowTracing?: boolean;
}

/**
 * Subscription update details.
 */
export interface SubscriptionUpdateParameters {
  /**
   * User identifier path: /users/{userId}
   */
  ownerId?: string;
  /**
   * Scope like /products/{productId} or /apis or /apis/{apiId}
   */
  scope?: string;
  /**
   * Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   */
  expirationDate?: Date;
  /**
   * Subscription name.
   */
  displayName?: string;
  /**
   * Primary subscription key.
   */
  primaryKey?: string;
  /**
   * Secondary subscription key.
   */
  secondaryKey?: string;
  /**
   * Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
   */
  state?: SubscriptionState;
  /**
   * Comments describing subscription state change by the administrator.
   */
  stateComment?: string;
  /**
   * Determines whether tracing can be enabled
   */
  allowTracing?: boolean;
}

/**
 * Subscription keys.
 */
export interface SubscriptionKeysContract {
  /**
   * Subscription primary key.
   */
  primaryKey?: string;
  /**
   * Subscription secondary key.
   */
  secondaryKey?: string;
}

/**
 * Parameters supplied to Create/Update Tag operations.
 */
export interface TagCreateUpdateParameters {
  /**
   * Tag name.
   */
  displayName?: string;
}

/**
 * Tenant access information contract of the API Management service.
 */
export interface AccessInformationContract {
  /**
   * Identifier.
   */
  id?: string;
  /**
   * Primary access key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  primaryKey?: string;
  /**
   * Secondary access key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
   */
  secondaryKey?: string;
  /**
   * Determines whether direct access is enabled.
   */
  enabled?: boolean;
}

/**
 * Tenant access information update parameters.
 */
export interface AccessInformationUpdateParameters {
  /**
   * Determines whether direct access is enabled.
   */
  enabled?: boolean;
}

/**
 * Deploy Tenant Configuration Contract.
 */
export interface DeployConfigurationParameters {
  /**
   * The name of the Git branch from which the configuration is to be deployed to the configuration database.
   */
  branch?: string;
  /**
   * The value enforcing deleting subscriptions to products that are deleted in this update.
   */
  force?: boolean;
}

/**
 * Operation Result.
 */
export interface OperationResultContract {
  /**
   * Operation result identifier.
   */
  id?: string;
  /**
   * Status of an async operation.
   */
  status?: AsyncOperationStatus;
  /**
   * Start time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  started?: Date;
  /**
   * Last update time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  updated?: Date;
  /**
   * Optional result info.
   */
  resultInfo?: string;
  /**
   * Error Body Contract
   */
  error?: ErrorResponseBody;
  /**
   * This property if only provided as part of the TenantConfiguration_Validate operation. It contains the log the entities which will be updated/created/deleted as part of the TenantConfiguration_Deploy operation.
   */
  readonly actionLog?: OperationResultLogItemContract[];
}

/**
 * Log of the entity being created, updated or deleted.
 */
export interface OperationResultLogItemContract {
  /**
   * The type of entity contract.
   */
  objectType?: string;
  /**
   * Action like create/update/delete.
   */
  action?: string;
  /**
   * Identifier of the entity being created/updated/deleted.
   */
  objectKey?: string;
}

/**
 * Save Tenant Configuration Contract details.
 */
export interface SaveConfigurationParameter {
  /**
   * The name of the Git branch in which to commit the current configuration snapshot.
   */
  branch?: string;
  /**
   * The value if true, the current configuration database is committed to the Git repository, even if the Git repository has newer changes that would be overwritten.
   */
  force?: boolean;
}

/**
 * Tenant Configuration Synchronization State.
 */
export interface TenantConfigurationSyncStateContract {
  /**
   * The name of Git branch.
   */
  branch?: string;
  /**
   * The latest commit Id.
   */
  commitId?: string;
  /**
   * value indicating if last sync was save (true) or deploy (false) operation.
   */
  isExport?: boolean;
  /**
   * value indicating if last synchronization was later than the configuration change.
   */
  isSynced?: boolean;
  /**
   * value indicating whether Git configuration access is enabled.
   */
  isGitEnabled?: boolean;
  /**
   * The date of the latest synchronization. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  syncDate?: Date;
  /**
   * The date of the latest configuration change. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  configurationChangeDate?: Date;
}

/**
 * User create details.
 */
export interface UserCreateParameters {
  /**
   * Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
   */
  state?: UserState;
  /**
   * Optional note about a user set by the administrator.
   */
  note?: string;
  /**
   * Collection of user identities.
   */
  identities?: UserIdentityContract[];
  /**
   * Email address. Must not be empty and must be unique within the service instance.
   */
  email?: string;
  /**
   * First name.
   */
  firstName?: string;
  /**
   * Last name.
   */
  lastName?: string;
  /**
   * User Password. If no value is provided, a default password is generated.
   */
  password?: string;
  /**
   * Determines the type of application which send the create user request. Default is old publisher portal.
   */
  appType?: "developerPortal";
  /**
   * Determines the type of confirmation e-mail that will be sent to the newly created user.
   */
  confirmation?: Confirmation;
}

/**
 * Parameters supplied to the Create User operation.
 */
export type UserCreateParameterProperties = UserEntityBaseParameters & {
  /**
   * Email address. Must not be empty and must be unique within the service instance.
   */
  email: string;
  /**
   * First name.
   */
  firstName: string;
  /**
   * Last name.
   */
  lastName: string;
  /**
   * User Password. If no value is provided, a default password is generated.
   */
  password?: string;
  /**
   * Determines the type of application which send the create user request. Default is old publisher portal.
   */
  appType?: "developerPortal";
  /**
   * Determines the type of confirmation e-mail that will be sent to the newly created user.
   */
  confirmation?: Confirmation;
};

/**
 * User update parameters.
 */
export interface UserUpdateParameters {
  /**
   * Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
   */
  state?: UserState;
  /**
   * Optional note about a user set by the administrator.
   */
  note?: string;
  /**
   * Collection of user identities.
   */
  identities?: UserIdentityContract[];
  /**
   * Email address. Must not be empty and must be unique within the service instance.
   */
  email?: string;
  /**
   * User Password.
   */
  password?: string;
  /**
   * First name.
   */
  firstName?: string;
  /**
   * Last name.
   */
  lastName?: string;
}

/**
 * Parameters supplied to the Update User operation.
 */
export type UserUpdateParametersProperties = UserEntityBaseParameters & {
  /**
   * Email address. Must not be empty and must be unique within the service instance.
   */
  email?: string;
  /**
   * User Password.
   */
  password?: string;
  /**
   * First name.
   */
  firstName?: string;
  /**
   * Last name.
   */
  lastName?: string;
};

/**
 * Generate SSO Url operations response details.
 */
export interface GenerateSsoUrlResult {
  /**
   * Redirect Url containing the SSO URL value.
   */
  value?: string;
}

/**
 * List of Users Identity list representation.
 */
export interface UserIdentityCollection {
  /**
   * User Identity values.
   */
  value?: UserIdentityContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Get User Token parameters.
 */
export interface UserTokenParameters {
  /**
   * The Key to be used to generate token for user.
   */
  keyType?: KeyType;
  /**
   * The Expiry time of the Token. Maximum token expiry time is set to 30 days. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  expiry?: Date;
}

/**
 * Get User Token response details.
 */
export interface UserTokenResult {
  /**
   * Shared Access Authorization token for the User.
   */
  value?: string;
}

/**
 * Object used to create an API Revision or Version based on an existing API Revision
 */
export interface ApiRevisionInfoContract {
  /**
   * Resource identifier of API to be used to create the revision from.
   */
  sourceApiId?: string;
  /**
   * Version identifier for the new API Version.
   */
  apiVersionName?: string;
  /**
   * Description of new API Revision.
   */
  apiRevisionDescription?: string;
  /**
   * Version set details
   */
  apiVersionSet?: ApiVersionSetContractDetails;
}

/**
 * Quota counter value details.
 */
export interface QuotaCounterValueContract {
  /**
   * Number of times Counter was called.
   */
  callsCount?: number;
  /**
   * Data Transferred in KiloBytes.
   */
  kbTransferred?: number;
}

/**
 * Defines headers for api_getEntityTag operation.
 */
export interface ApiGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for api_get operation.
 */
export interface ApiGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for api_createOrUpdate operation.
 */
export interface ApiCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiRelease_getEntityTag operation.
 */
export interface ApiReleaseGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiRelease_get operation.
 */
export interface ApiReleaseGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiRelease_createOrUpdate operation.
 */
export interface ApiReleaseCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiOperation_getEntityTag operation.
 */
export interface ApiOperationGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiOperation_get operation.
 */
export interface ApiOperationGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiOperation_createOrUpdate operation.
 */
export interface ApiOperationCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiOperationPolicy_getEntityTag operation.
 */
export interface ApiOperationPolicyGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiOperationPolicy_get operation.
 */
export interface ApiOperationPolicyGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiOperationPolicy_createOrUpdate operation.
 */
export interface ApiOperationPolicyCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for tag_getEntityStateByOperation operation.
 */
export interface TagGetEntityStateByOperationHeaders {
  eTag?: string;
}

/**
 * Defines headers for tag_getByOperation operation.
 */
export interface TagGetByOperationHeaders {
  eTag?: string;
}

/**
 * Defines headers for tag_getEntityStateByApi operation.
 */
export interface TagGetEntityStateByApiHeaders {
  eTag?: string;
}

/**
 * Defines headers for tag_getByApi operation.
 */
export interface TagGetByApiHeaders {
  eTag?: string;
}

/**
 * Defines headers for tag_assignToApi operation.
 */
export interface TagAssignToApiHeaders {
  eTag?: string;
}

/**
 * Defines headers for tag_getEntityStateByProduct operation.
 */
export interface TagGetEntityStateByProductHeaders {
  eTag?: string;
}

/**
 * Defines headers for tag_getByProduct operation.
 */
export interface TagGetByProductHeaders {
  eTag?: string;
}

/**
 * Defines headers for tag_getEntityState operation.
 */
export interface TagGetEntityStateHeaders {
  eTag?: string;
}

/**
 * Defines headers for tag_get operation.
 */
export interface TagGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for tag_createOrUpdate operation.
 */
export interface TagCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiPolicy_getEntityTag operation.
 */
export interface ApiPolicyGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiPolicy_get operation.
 */
export interface ApiPolicyGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiPolicy_createOrUpdate operation.
 */
export interface ApiPolicyCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiSchema_getEntityTag operation.
 */
export interface ApiSchemaGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiSchema_get operation.
 */
export interface ApiSchemaGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiSchema_createOrUpdate operation.
 */
export interface ApiSchemaCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiDiagnostic_getEntityTag operation.
 */
export interface ApiDiagnosticGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiDiagnostic_get operation.
 */
export interface ApiDiagnosticGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiDiagnostic_createOrUpdate operation.
 */
export interface ApiDiagnosticCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiIssue_getEntityTag operation.
 */
export interface ApiIssueGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiIssue_get operation.
 */
export interface ApiIssueGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiIssue_createOrUpdate operation.
 */
export interface ApiIssueCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiIssueComment_getEntityTag operation.
 */
export interface ApiIssueCommentGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiIssueComment_get operation.
 */
export interface ApiIssueCommentGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiIssueComment_createOrUpdate operation.
 */
export interface ApiIssueCommentCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiIssueAttachment_getEntityTag operation.
 */
export interface ApiIssueAttachmentGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiIssueAttachment_get operation.
 */
export interface ApiIssueAttachmentGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiIssueAttachment_createOrUpdate operation.
 */
export interface ApiIssueAttachmentCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiTagDescription_getEntityTag operation.
 */
export interface ApiTagDescriptionGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiTagDescription_get operation.
 */
export interface ApiTagDescriptionGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiTagDescription_createOrUpdate operation.
 */
export interface ApiTagDescriptionCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiVersionSet_getEntityTag operation.
 */
export interface ApiVersionSetGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiVersionSet_get operation.
 */
export interface ApiVersionSetGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for apiVersionSet_createOrUpdate operation.
 */
export interface ApiVersionSetCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for authorizationServer_getEntityTag operation.
 */
export interface AuthorizationServerGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for authorizationServer_get operation.
 */
export interface AuthorizationServerGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for authorizationServer_createOrUpdate operation.
 */
export interface AuthorizationServerCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for backend_getEntityTag operation.
 */
export interface BackendGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for backend_get operation.
 */
export interface BackendGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for backend_createOrUpdate operation.
 */
export interface BackendCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for cache_getEntityTag operation.
 */
export interface CacheGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for cache_get operation.
 */
export interface CacheGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for cache_createOrUpdate operation.
 */
export interface CacheCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for certificate_getEntityTag operation.
 */
export interface CertificateGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for certificate_get operation.
 */
export interface CertificateGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for certificate_createOrUpdate operation.
 */
export interface CertificateCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for diagnostic_getEntityTag operation.
 */
export interface DiagnosticGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for diagnostic_get operation.
 */
export interface DiagnosticGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for diagnostic_createOrUpdate operation.
 */
export interface DiagnosticCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for emailTemplate_getEntityTag operation.
 */
export interface EmailTemplateGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for emailTemplate_get operation.
 */
export interface EmailTemplateGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for gateway_getEntityTag operation.
 */
export interface GatewayGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for gateway_get operation.
 */
export interface GatewayGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for gateway_createOrUpdate operation.
 */
export interface GatewayCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for gateway_listKeys operation.
 */
export interface GatewayListKeysHeaders {
  eTag?: string;
}

/**
 * Defines headers for gatewayHostnameConfiguration_getEntityTag operation.
 */
export interface GatewayHostnameConfigurationGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for gatewayHostnameConfiguration_get operation.
 */
export interface GatewayHostnameConfigurationGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for gatewayHostnameConfiguration_createOrUpdate operation.
 */
export interface GatewayHostnameConfigurationCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for gatewayApi_getEntityTag operation.
 */
export interface GatewayApiGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for group_getEntityTag operation.
 */
export interface GroupGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for group_get operation.
 */
export interface GroupGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for group_createOrUpdate operation.
 */
export interface GroupCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for identityProvider_getEntityTag operation.
 */
export interface IdentityProviderGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for identityProvider_get operation.
 */
export interface IdentityProviderGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for identityProvider_createOrUpdate operation.
 */
export interface IdentityProviderCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for issue_get operation.
 */
export interface IssueGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for logger_getEntityTag operation.
 */
export interface LoggerGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for logger_get operation.
 */
export interface LoggerGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for logger_createOrUpdate operation.
 */
export interface LoggerCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for namedValue_getEntityTag operation.
 */
export interface NamedValueGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for namedValue_get operation.
 */
export interface NamedValueGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for namedValue_createOrUpdate operation.
 */
export interface NamedValueCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for namedValue_update operation.
 */
export interface NamedValueUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for openIdConnectProvider_getEntityTag operation.
 */
export interface OpenIdConnectProviderGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for openIdConnectProvider_get operation.
 */
export interface OpenIdConnectProviderGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for openIdConnectProvider_createOrUpdate operation.
 */
export interface OpenIdConnectProviderCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for policy_getEntityTag operation.
 */
export interface PolicyGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for policy_get operation.
 */
export interface PolicyGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for policy_createOrUpdate operation.
 */
export interface PolicyCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for signInSettings_getEntityTag operation.
 */
export interface SignInSettingsGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for signInSettings_get operation.
 */
export interface SignInSettingsGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for signUpSettings_getEntityTag operation.
 */
export interface SignUpSettingsGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for signUpSettings_get operation.
 */
export interface SignUpSettingsGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for delegationSettings_getEntityTag operation.
 */
export interface DelegationSettingsGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for delegationSettings_get operation.
 */
export interface DelegationSettingsGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for product_getEntityTag operation.
 */
export interface ProductGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for product_get operation.
 */
export interface ProductGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for product_createOrUpdate operation.
 */
export interface ProductCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for productPolicy_getEntityTag operation.
 */
export interface ProductPolicyGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for productPolicy_get operation.
 */
export interface ProductPolicyGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for productPolicy_createOrUpdate operation.
 */
export interface ProductPolicyCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for subscription_getEntityTag operation.
 */
export interface SubscriptionGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for subscription_get operation.
 */
export interface SubscriptionGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for subscription_createOrUpdate operation.
 */
export interface SubscriptionCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for tenantAccess_getEntityTag operation.
 */
export interface TenantAccessGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for tenantAccess_get operation.
 */
export interface TenantAccessGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for tenantAccess_listSecrets operation.
 */
export interface TenantAccessListSecretsHeaders {
  eTag?: string;
}

/**
 * Defines headers for tenantAccessGit_get operation.
 */
export interface TenantAccessGitGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for tenantAccessGit_listSecrets operation.
 */
export interface TenantAccessGitListSecretsHeaders {
  eTag?: string;
}

/**
 * Defines headers for user_getEntityTag operation.
 */
export interface UserGetEntityTagHeaders {
  eTag?: string;
}

/**
 * Defines headers for user_get operation.
 */
export interface UserGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for user_createOrUpdate operation.
 */
export interface UserCreateOrUpdateHeaders {
  eTag?: string;
}

/**
 * Defines values for BearerTokenSendingMethods.
 */
export type BearerTokenSendingMethods = "authorizationHeader" | "query";
/**
 * Defines values for ApiType.
 */
export type ApiType = "http" | "soap";
/**
 * Defines values for ApiVersionSetContractDetailsVersioningScheme.
 */
export type ApiVersionSetContractDetailsVersioningScheme =
  | "Segment"
  | "Query"
  | "Header";
/**
 * Defines values for ContentFormat.
 */
export type ContentFormat =
  | "wadl-xml"
  | "wadl-link-json"
  | "swagger-json"
  | "swagger-link-json"
  | "wsdl"
  | "wsdl-link"
  | "openapi"
  | "openapi+json"
  | "openapi-link"
  | "openapi+json-link";
/**
 * Defines values for SoapApiType.
 */
export type SoapApiType = "http" | "soap";
/**
 * Defines values for PolicyContentFormat.
 */
export type PolicyContentFormat = "xml" | "xml-link" | "rawxml" | "rawxml-link";
/**
 * Defines values for PolicyExportFormat.
 */
export type PolicyExportFormat = "xml" | "rawxml";
/**
 * Defines values for HttpCorrelationProtocol.
 */
export type HttpCorrelationProtocol = "None" | "Legacy" | "W3C";
/**
 * Defines values for Verbosity.
 */
export type Verbosity = "verbose" | "information" | "error";
/**
 * Defines values for State.
 */
export type State = "proposed" | "open" | "removed" | "resolved" | "closed";
/**
 * Defines values for ExportFormat.
 */
export type ExportFormat =
  | "swagger-link"
  | "wsdl-link"
  | "wadl-link"
  | "openapi-link"
  | "openapi+json-link";
/**
 * Defines values for ExportResultFormat.
 */
export type ExportResultFormat =
  | "swagger-link-json"
  | "wsdl-link+xml"
  | "wadl-link-json"
  | "openapi-link";
/**
 * Defines values for VersioningScheme.
 */
export type VersioningScheme = "Segment" | "Query" | "Header";
/**
 * Defines values for ClientAuthenticationMethod.
 */
export type ClientAuthenticationMethod = "Basic" | "Body";
/**
 * Defines values for BearerTokenSendingMethod.
 */
export type BearerTokenSendingMethod = "authorizationHeader" | "query";
/**
 * Defines values for GrantType.
 */
export type GrantType =
  | "authorizationCode"
  | "implicit"
  | "resourceOwnerPassword"
  | "clientCredentials";
/**
 * Defines values for BackendProtocol.
 */
export type BackendProtocol = "http" | "soap";
/**
 * Defines values for SkuType.
 */
export type SkuType =
  | "Developer"
  | "Standard"
  | "Premium"
  | "Basic"
  | "Consumption";
/**
 * Defines values for ResourceSkuCapacityScaleType.
 */
export type ResourceSkuCapacityScaleType = "automatic" | "manual" | "none";
/**
 * Defines values for HostnameType.
 */
export type HostnameType =
  | "Proxy"
  | "Portal"
  | "Management"
  | "Scm"
  | "DeveloperPortal";
/**
 * Defines values for CertificateConfigurationStoreName.
 */
export type CertificateConfigurationStoreName = "CertificateAuthority" | "Root";
/**
 * Defines values for VirtualNetworkType.
 */
export type VirtualNetworkType = "None" | "External" | "Internal";
/**
 * Defines values for ApimIdentityType.
 */
export type ApimIdentityType =
  | "SystemAssigned"
  | "UserAssigned"
  | "SystemAssigned, UserAssigned"
  | "None";
/**
 * Defines values for TemplateName.
 */
export type TemplateName =
  | "applicationApprovedNotificationMessage"
  | "accountClosedDeveloper"
  | "quotaLimitApproachingDeveloperNotificationMessage"
  | "newDeveloperNotificationMessage"
  | "emailChangeIdentityDefault"
  | "inviteUserNotificationMessage"
  | "newCommentNotificationMessage"
  | "confirmSignUpIdentityDefault"
  | "newIssueNotificationMessage"
  | "purchaseDeveloperNotificationMessage"
  | "passwordResetIdentityDefault"
  | "passwordResetByAdminNotificationMessage"
  | "rejectDeveloperNotificationMessage"
  | "requestDeveloperNotificationMessage";
/**
 * Defines values for UserState.
 */
export type UserState = "active" | "blocked" | "pending" | "deleted";
/**
 * Defines values for IdentityProviderType.
 */
export type IdentityProviderType =
  | "facebook"
  | "google"
  | "microsoft"
  | "twitter"
  | "aad"
  | "aadB2C";
/**
 * Defines values for LoggerType.
 */
export type LoggerType = "azureEventHub" | "applicationInsights";
/**
 * Defines values for ConnectivityStatusType.
 */
export type ConnectivityStatusType = "initializing" | "success" | "failure";
/**
 * Defines values for NotificationName.
 */
export type NotificationName =
  | "RequestPublisherNotificationMessage"
  | "PurchasePublisherNotificationMessage"
  | "NewApplicationNotificationMessage"
  | "BCC"
  | "NewIssuePublisherNotificationMessage"
  | "AccountClosedPublisher"
  | "QuotaLimitApproachingPublisherNotificationMessage";
/**
 * Defines values for Confirmation.
 */
export type Confirmation = "signup" | "invite";
/**
 * Defines values for Protocol.
 */
export type Protocol = "http" | "https";
/**
 * Defines values for ProductState.
 */
export type ProductState = "notPublished" | "published";
/**
 * Defines values for AuthorizationMethod.
 */
export type AuthorizationMethod =
  | "HEAD"
  | "OPTIONS"
  | "TRACE"
  | "GET"
  | "POST"
  | "PUT"
  | "PATCH"
  | "DELETE";
/**
 * Defines values for NameAvailabilityReason.
 */
export type NameAvailabilityReason = "Valid" | "Invalid" | "AlreadyExists";
/**
 * Defines values for KeyType.
 */
export type KeyType = "primary" | "secondary";
/**
 * Defines values for GroupType.
 */
export type GroupType = "custom" | "system" | "external";
/**
 * Defines values for PolicyScopeContract.
 */
export type PolicyScopeContract =
  | "Tenant"
  | "Product"
  | "Api"
  | "Operation"
  | "All";
/**
 * Defines values for SubscriptionState.
 */
export type SubscriptionState =
  | "suspended"
  | "active"
  | "expired"
  | "submitted"
  | "rejected"
  | "cancelled";
/**
 * Defines values for AsyncOperationStatus.
 */
export type AsyncOperationStatus =
  | "Started"
  | "InProgress"
  | "Succeeded"
  | "Failed";

/**
 * Optional parameters.
 */
export interface ApiListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * Include tags in the response.
   */
  tags?: string;
  /**
   * Include full ApiVersionSet resource in response
   */
  expandApiVersionSet?: boolean;
}

/**
 * Contains response data for the listByService operation.
 */
export type ApiListByServiceResponse = ApiCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ApiGetEntityTagResponse = ApiGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ApiGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiGetResponse = ApiGetHeaders &
  ApiContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApiContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiCreateOrUpdateResponse = ApiCreateOrUpdateHeaders &
  ApiContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApiContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiDeleteOptionalParams extends coreHttp.OperationOptions {
  /**
   * Delete all revisions of the Api.
   */
  deleteRevisions?: boolean;
}

/**
 * Optional parameters.
 */
export interface ApiListByTagsOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions               |
   * |-------------|------------------------|-----------------------------------|
   *
   * |name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
   * |displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
   * |apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
   * |path | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
   * |description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
   * |serviceUrl | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
   * |isCurrent | eq |    |
   *
   */
  filter?: string;
  /**
   * Include not tagged APIs.
   */
  includeNotTaggedApis?: boolean;
}

/**
 * Contains response data for the listByTags operation.
 */
export type ApiListByTagsResponse = TagResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagResourceCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * Include tags in the response.
   */
  tags?: string;
  /**
   * Include full ApiVersionSet resource in response
   */
  expandApiVersionSet?: boolean;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type ApiListByServiceNextResponse = ApiCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiListByTagsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * | Field       | Supported operators    | Supported functions               |
   * |-------------|------------------------|-----------------------------------|
   *
   * |name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
   * |displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
   * |apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
   * |path | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
   * |description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
   * |serviceUrl | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
   * |isCurrent | eq |    |
   *
   */
  filter?: string;
  /**
   * Include not tagged APIs.
   */
  includeNotTaggedApis?: boolean;
}

/**
 * Contains response data for the listByTagsNext operation.
 */
export type ApiListByTagsNextResponse = TagResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagResourceCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiRevisionListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type ApiRevisionListByServiceResponse = ApiRevisionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiRevisionCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiRevisionListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type ApiRevisionListByServiceNextResponse = ApiRevisionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiRevisionCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiReleaseListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| notes | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type ApiReleaseListByServiceResponse = ApiReleaseCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiReleaseCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ApiReleaseGetEntityTagResponse = ApiReleaseGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ApiReleaseGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiReleaseGetResponse = ApiReleaseGetHeaders &
  ApiReleaseContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApiReleaseContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiReleaseGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiReleaseCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiReleaseCreateOrUpdateResponse = ApiReleaseCreateOrUpdateHeaders &
  ApiReleaseContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApiReleaseContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiReleaseCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiReleaseListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| notes | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type ApiReleaseListByServiceNextResponse = ApiReleaseCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiReleaseCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiOperationListByApiOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * Include tags in the response.
   */
  tags?: string;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByApi operation.
 */
export type ApiOperationListByApiResponse = OperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ApiOperationGetEntityTagResponse = ApiOperationGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ApiOperationGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiOperationGetResponse = ApiOperationGetHeaders &
  OperationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiOperationGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiOperationCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiOperationCreateOrUpdateResponse = ApiOperationCreateOrUpdateHeaders &
  OperationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiOperationCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiOperationListByApiNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * Include tags in the response.
   */
  tags?: string;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByApiNext operation.
 */
export type ApiOperationListByApiNextResponse = OperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationCollection;
  };
};

/**
 * Contains response data for the listByOperation operation.
 */
export type ApiOperationPolicyListByOperationResponse = PolicyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ApiOperationPolicyGetEntityTagResponse = ApiOperationPolicyGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ApiOperationPolicyGetEntityTagHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface ApiOperationPolicyGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Policy Export Format.
   */
  format?: PolicyExportFormat;
}

/**
 * Contains response data for the get operation.
 */
export type ApiOperationPolicyGetResponse = ApiOperationPolicyGetHeaders &
  PolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiOperationPolicyGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiOperationPolicyCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiOperationPolicyCreateOrUpdateResponse = ApiOperationPolicyCreateOrUpdateHeaders &
  PolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiOperationPolicyCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TagListByOperationOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByOperation operation.
 */
export type TagListByOperationResponse = TagCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagCollection;
  };
};

/**
 * Contains response data for the getEntityStateByOperation operation.
 */
export type TagGetEntityStateByOperationResponse = TagGetEntityStateByOperationHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: TagGetEntityStateByOperationHeaders;
  };
};

/**
 * Contains response data for the getByOperation operation.
 */
export type TagGetByOperationResponse = TagGetByOperationHeaders &
  TagContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TagGetByOperationHeaders;
    };
  };

/**
 * Contains response data for the assignToOperation operation.
 */
export type TagAssignToOperationResponse = TagContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagContract;
  };
};

/**
 * Optional parameters.
 */
export interface TagListByApiOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByApi operation.
 */
export type TagListByApiResponse = TagCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagCollection;
  };
};

/**
 * Contains response data for the getEntityStateByApi operation.
 */
export type TagGetEntityStateByApiResponse = TagGetEntityStateByApiHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: TagGetEntityStateByApiHeaders;
  };
};

/**
 * Contains response data for the getByApi operation.
 */
export type TagGetByApiResponse = TagGetByApiHeaders &
  TagContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TagGetByApiHeaders;
    };
  };

/**
 * Contains response data for the assignToApi operation.
 */
export type TagAssignToApiResponse = TagAssignToApiHeaders &
  TagContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TagAssignToApiHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TagListByProductOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByProduct operation.
 */
export type TagListByProductResponse = TagCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagCollection;
  };
};

/**
 * Contains response data for the getEntityStateByProduct operation.
 */
export type TagGetEntityStateByProductResponse = TagGetEntityStateByProductHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: TagGetEntityStateByProductHeaders;
  };
};

/**
 * Contains response data for the getByProduct operation.
 */
export type TagGetByProductResponse = TagGetByProductHeaders &
  TagContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TagGetByProductHeaders;
    };
  };

/**
 * Contains response data for the assignToProduct operation.
 */
export type TagAssignToProductResponse = TagContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagContract;
  };
};

/**
 * Optional parameters.
 */
export interface TagListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
  /**
   * Scope like 'apis', 'products' or 'apis/{apiId}
   */
  scope?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type TagListByServiceResponse = TagCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagCollection;
  };
};

/**
 * Contains response data for the getEntityState operation.
 */
export type TagGetEntityStateResponse = TagGetEntityStateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: TagGetEntityStateHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type TagGetResponse = TagGetHeaders &
  TagContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TagGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TagCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TagCreateOrUpdateResponse = TagCreateOrUpdateHeaders &
  TagContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TagCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TagListByOperationNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByOperationNext operation.
 */
export type TagListByOperationNextResponse = TagCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagCollection;
  };
};

/**
 * Optional parameters.
 */
export interface TagListByApiNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByApiNext operation.
 */
export type TagListByApiNextResponse = TagCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagCollection;
  };
};

/**
 * Optional parameters.
 */
export interface TagListByProductNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByProductNext operation.
 */
export type TagListByProductNextResponse = TagCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagCollection;
  };
};

/**
 * Optional parameters.
 */
export interface TagListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
  /**
   * Scope like 'apis', 'products' or 'apis/{apiId}
   */
  scope?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type TagListByServiceNextResponse = TagCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiProductListByApisOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByApis operation.
 */
export type ApiProductListByApisResponse = ProductCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiProductListByApisNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByApisNext operation.
 */
export type ApiProductListByApisNextResponse = ProductCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductCollection;
  };
};

/**
 * Contains response data for the listByApi operation.
 */
export type ApiPolicyListByApiResponse = PolicyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ApiPolicyGetEntityTagResponse = ApiPolicyGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ApiPolicyGetEntityTagHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface ApiPolicyGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Policy Export Format.
   */
  format?: PolicyExportFormat;
}

/**
 * Contains response data for the get operation.
 */
export type ApiPolicyGetResponse = ApiPolicyGetHeaders &
  PolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiPolicyGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiPolicyCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiPolicyCreateOrUpdateResponse = ApiPolicyCreateOrUpdateHeaders &
  PolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiPolicyCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiSchemaListByApiOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| contentType | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByApi operation.
 */
export type ApiSchemaListByApiResponse = SchemaCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SchemaCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ApiSchemaGetEntityTagResponse = ApiSchemaGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ApiSchemaGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiSchemaGetResponse = ApiSchemaGetHeaders &
  SchemaContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SchemaContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiSchemaGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiSchemaCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiSchemaCreateOrUpdateResponse = ApiSchemaCreateOrUpdateHeaders &
  SchemaContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SchemaContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiSchemaCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiSchemaDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * If true removes all references to the schema before deleting it.
   */
  force?: boolean;
}

/**
 * Optional parameters.
 */
export interface ApiSchemaListByApiNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| contentType | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByApiNext operation.
 */
export type ApiSchemaListByApiNextResponse = SchemaCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SchemaCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiDiagnosticListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type ApiDiagnosticListByServiceResponse = DiagnosticCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ApiDiagnosticGetEntityTagResponse = ApiDiagnosticGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ApiDiagnosticGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiDiagnosticGetResponse = ApiDiagnosticGetHeaders &
  DiagnosticContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiagnosticContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiDiagnosticGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiDiagnosticCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiDiagnosticCreateOrUpdateResponse = ApiDiagnosticCreateOrUpdateHeaders &
  DiagnosticContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiagnosticContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiDiagnosticCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiDiagnosticListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type ApiDiagnosticListByServiceNextResponse = DiagnosticCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiIssueListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>
   */
  filter?: string;
  /**
   * Expand the comment attachments.
   */
  expandCommentsAttachments?: boolean;
}

/**
 * Contains response data for the listByService operation.
 */
export type ApiIssueListByServiceResponse = IssueCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssueCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ApiIssueGetEntityTagResponse = ApiIssueGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ApiIssueGetEntityTagHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface ApiIssueGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Expand the comment attachments.
   */
  expandCommentsAttachments?: boolean;
}

/**
 * Contains response data for the get operation.
 */
export type ApiIssueGetResponse = ApiIssueGetHeaders &
  IssueContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IssueContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiIssueGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiIssueCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiIssueCreateOrUpdateResponse = ApiIssueCreateOrUpdateHeaders &
  IssueContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IssueContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiIssueCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiIssueListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>
   */
  filter?: string;
  /**
   * Expand the comment attachments.
   */
  expandCommentsAttachments?: boolean;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type ApiIssueListByServiceNextResponse = IssueCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssueCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiIssueCommentListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type ApiIssueCommentListByServiceResponse = IssueCommentCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssueCommentCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ApiIssueCommentGetEntityTagResponse = ApiIssueCommentGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ApiIssueCommentGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiIssueCommentGetResponse = ApiIssueCommentGetHeaders &
  IssueCommentContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IssueCommentContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiIssueCommentGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiIssueCommentCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiIssueCommentCreateOrUpdateResponse = ApiIssueCommentCreateOrUpdateHeaders &
  IssueCommentContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IssueCommentContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiIssueCommentCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiIssueCommentListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type ApiIssueCommentListByServiceNextResponse = IssueCommentCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssueCommentCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiIssueAttachmentListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type ApiIssueAttachmentListByServiceResponse = IssueAttachmentCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssueAttachmentCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ApiIssueAttachmentGetEntityTagResponse = ApiIssueAttachmentGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ApiIssueAttachmentGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiIssueAttachmentGetResponse = ApiIssueAttachmentGetHeaders &
  IssueAttachmentContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IssueAttachmentContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiIssueAttachmentGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiIssueAttachmentCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiIssueAttachmentCreateOrUpdateResponse = ApiIssueAttachmentCreateOrUpdateHeaders &
  IssueAttachmentContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IssueAttachmentContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiIssueAttachmentCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiIssueAttachmentListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type ApiIssueAttachmentListByServiceNextResponse = IssueAttachmentCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssueAttachmentCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiTagDescriptionListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type ApiTagDescriptionListByServiceResponse = TagDescriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagDescriptionCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ApiTagDescriptionGetEntityTagResponse = ApiTagDescriptionGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ApiTagDescriptionGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiTagDescriptionGetResponse = ApiTagDescriptionGetHeaders &
  TagDescriptionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagDescriptionContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiTagDescriptionGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiTagDescriptionCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiTagDescriptionCreateOrUpdateResponse = ApiTagDescriptionCreateOrUpdateHeaders &
  TagDescriptionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagDescriptionContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiTagDescriptionCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiTagDescriptionListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type ApiTagDescriptionListByServiceNextResponse = TagDescriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagDescriptionCollection;
  };
};

/**
 * Optional parameters.
 */
export interface OperationListByTagsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| apiName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
  /**
   * Include not tagged Operations.
   */
  includeNotTaggedOperations?: boolean;
}

/**
 * Contains response data for the listByTags operation.
 */
export type OperationListByTagsResponse = TagResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagResourceCollection;
  };
};

/**
 * Optional parameters.
 */
export interface OperationListByTagsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| apiName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
  /**
   * Include not tagged Operations.
   */
  includeNotTaggedOperations?: boolean;
}

/**
 * Contains response data for the listByTagsNext operation.
 */
export type OperationListByTagsNextResponse = TagResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagResourceCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiExportGetResponse = ApiExportResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiExportResult;
  };
};

/**
 * Optional parameters.
 */
export interface ApiVersionSetListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type ApiVersionSetListByServiceResponse = ApiVersionSetCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiVersionSetCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ApiVersionSetGetEntityTagResponse = ApiVersionSetGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ApiVersionSetGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiVersionSetGetResponse = ApiVersionSetGetHeaders &
  ApiVersionSetContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApiVersionSetContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiVersionSetGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiVersionSetCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiVersionSetCreateOrUpdateResponse = ApiVersionSetCreateOrUpdateHeaders &
  ApiVersionSetContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApiVersionSetContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApiVersionSetCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ApiVersionSetListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type ApiVersionSetListByServiceNextResponse = ApiVersionSetCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiVersionSetCollection;
  };
};

/**
 * Optional parameters.
 */
export interface AuthorizationServerListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type AuthorizationServerListByServiceResponse = AuthorizationServerCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationServerCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type AuthorizationServerGetEntityTagResponse = AuthorizationServerGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: AuthorizationServerGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AuthorizationServerGetResponse = AuthorizationServerGetHeaders &
  AuthorizationServerContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationServerContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: AuthorizationServerGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface AuthorizationServerCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AuthorizationServerCreateOrUpdateResponse = AuthorizationServerCreateOrUpdateHeaders &
  AuthorizationServerContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationServerContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: AuthorizationServerCreateOrUpdateHeaders;
    };
  };

/**
 * Contains response data for the listSecrets operation.
 */
export type AuthorizationServerListSecretsResponse = ClientSecretContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ClientSecretContract;
  };
};

/**
 * Optional parameters.
 */
export interface AuthorizationServerListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type AuthorizationServerListByServiceNextResponse = AuthorizationServerCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationServerCollection;
  };
};

/**
 * Optional parameters.
 */
export interface BackendListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| title | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| url | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type BackendListByServiceResponse = BackendCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackendCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type BackendGetEntityTagResponse = BackendGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: BackendGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BackendGetResponse = BackendGetHeaders &
  BackendContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BackendContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BackendGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface BackendCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type BackendCreateOrUpdateResponse = BackendCreateOrUpdateHeaders &
  BackendContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BackendContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BackendCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface BackendReconnectOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Reconnect request parameters.
   */
  parameters?: BackendReconnectContract;
}

/**
 * Optional parameters.
 */
export interface BackendListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| title | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| url | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type BackendListByServiceNextResponse = BackendCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackendCollection;
  };
};

/**
 * Optional parameters.
 */
export interface CacheListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByService operation.
 */
export type CacheListByServiceResponse = CacheCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CacheCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type CacheGetEntityTagResponse = CacheGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: CacheGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type CacheGetResponse = CacheGetHeaders &
  CacheContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CacheContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CacheGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface CacheCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type CacheCreateOrUpdateResponse = CacheCreateOrUpdateHeaders &
  CacheContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CacheContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CacheCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface CacheListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type CacheListByServiceNextResponse = CacheCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CacheCollection;
  };
};

/**
 * Optional parameters.
 */
export interface CertificateListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| subject | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| thumbprint | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| expirationDate | filter | ge, le, eq, ne, gt, lt |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type CertificateListByServiceResponse = CertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type CertificateGetEntityTagResponse = CertificateGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: CertificateGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type CertificateGetResponse = CertificateGetHeaders &
  CertificateContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CertificateContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface CertificateCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type CertificateCreateOrUpdateResponse = CertificateCreateOrUpdateHeaders &
  CertificateContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CertificateContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface CertificateListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| subject | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| thumbprint | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| expirationDate | filter | ge, le, eq, ne, gt, lt |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type CertificateListByServiceNextResponse = CertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ApiManagementOperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ApiManagementOperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listAvailableServiceSkus operation.
 */
export type ApiManagementServiceSkusListAvailableServiceSkusResponse = ResourceSkuResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceSkuResults;
  };
};

/**
 * Contains response data for the listAvailableServiceSkusNext operation.
 */
export type ApiManagementServiceSkusListAvailableServiceSkusNextResponse = ResourceSkuResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceSkuResults;
  };
};

/**
 * Contains response data for the restore operation.
 */
export type ApiManagementServiceRestoreResponse = ApiManagementServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiManagementServiceResource;
  };
};

/**
 * Contains response data for the backup operation.
 */
export type ApiManagementServiceBackupResponse = ApiManagementServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiManagementServiceResource;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApiManagementServiceCreateOrUpdateResponse = ApiManagementServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiManagementServiceResource;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ApiManagementServiceUpdateResponse = ApiManagementServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiManagementServiceResource;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApiManagementServiceGetResponse = ApiManagementServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiManagementServiceResource;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ApiManagementServiceListByResourceGroupResponse = ApiManagementServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiManagementServiceListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ApiManagementServiceListResponse = ApiManagementServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiManagementServiceListResult;
  };
};

/**
 * Contains response data for the getSsoToken operation.
 */
export type ApiManagementServiceGetSsoTokenResponse = ApiManagementServiceGetSsoTokenResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiManagementServiceGetSsoTokenResult;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type ApiManagementServiceCheckNameAvailabilityResponse = ApiManagementServiceNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiManagementServiceNameAvailabilityResult;
  };
};

/**
 * Optional parameters.
 */
export interface ApiManagementServiceApplyNetworkConfigurationUpdatesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameters supplied to the Apply Network Configuration operation. If the parameters are empty, all the regions in which the Api Management service is deployed will be updated sequentially without incurring downtime in the region.
   */
  parameters?: ApiManagementServiceApplyNetworkConfigurationParameters;
}

/**
 * Contains response data for the applyNetworkConfigurationUpdates operation.
 */
export type ApiManagementServiceApplyNetworkConfigurationUpdatesResponse = ApiManagementServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiManagementServiceResource;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ApiManagementServiceListByResourceGroupNextResponse = ApiManagementServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiManagementServiceListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ApiManagementServiceListNextResponse = ApiManagementServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiManagementServiceListResult;
  };
};

/**
 * Optional parameters.
 */
export interface DiagnosticListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type DiagnosticListByServiceResponse = DiagnosticCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type DiagnosticGetEntityTagResponse = DiagnosticGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: DiagnosticGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DiagnosticGetResponse = DiagnosticGetHeaders &
  DiagnosticContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiagnosticContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DiagnosticGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface DiagnosticCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DiagnosticCreateOrUpdateResponse = DiagnosticCreateOrUpdateHeaders &
  DiagnosticContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiagnosticContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DiagnosticCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface DiagnosticListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type DiagnosticListByServiceNextResponse = DiagnosticCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticCollection;
  };
};

/**
 * Optional parameters.
 */
export interface EmailTemplateListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type EmailTemplateListByServiceResponse = EmailTemplateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EmailTemplateCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type EmailTemplateGetEntityTagResponse = EmailTemplateGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: EmailTemplateGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type EmailTemplateGetResponse = EmailTemplateGetHeaders &
  EmailTemplateContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EmailTemplateContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: EmailTemplateGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface EmailTemplateCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type EmailTemplateCreateOrUpdateResponse = EmailTemplateContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EmailTemplateContract;
  };
};

/**
 * Optional parameters.
 */
export interface EmailTemplateListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type EmailTemplateListByServiceNextResponse = EmailTemplateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EmailTemplateCollection;
  };
};

/**
 * Optional parameters.
 */
export interface GatewayListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByService operation.
 */
export type GatewayListByServiceResponse = GatewayCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GatewayCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type GatewayGetEntityTagResponse = GatewayGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: GatewayGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type GatewayGetResponse = GatewayGetHeaders &
  GatewayContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: GatewayGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface GatewayCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GatewayCreateOrUpdateResponse = GatewayCreateOrUpdateHeaders &
  GatewayContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: GatewayCreateOrUpdateHeaders;
    };
  };

/**
 * Contains response data for the listKeys operation.
 */
export type GatewayListKeysResponse = GatewayListKeysHeaders &
  GatewayKeysContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayKeysContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: GatewayListKeysHeaders;
    };
  };

/**
 * Contains response data for the generateToken operation.
 */
export type GatewayGenerateTokenResponse = GatewayTokenContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GatewayTokenContract;
  };
};

/**
 * Optional parameters.
 */
export interface GatewayListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type GatewayListByServiceNextResponse = GatewayCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GatewayCollection;
  };
};

/**
 * Optional parameters.
 */
export interface GatewayHostnameConfigurationListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByService operation.
 */
export type GatewayHostnameConfigurationListByServiceResponse = GatewayHostnameConfigurationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GatewayHostnameConfigurationCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type GatewayHostnameConfigurationGetEntityTagResponse = GatewayHostnameConfigurationGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: GatewayHostnameConfigurationGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type GatewayHostnameConfigurationGetResponse = GatewayHostnameConfigurationGetHeaders &
  GatewayHostnameConfigurationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayHostnameConfigurationContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: GatewayHostnameConfigurationGetHeaders;
    };
  };

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GatewayHostnameConfigurationCreateOrUpdateResponse = GatewayHostnameConfigurationCreateOrUpdateHeaders &
  GatewayHostnameConfigurationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayHostnameConfigurationContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: GatewayHostnameConfigurationCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface GatewayHostnameConfigurationListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type GatewayHostnameConfigurationListByServiceNextResponse = GatewayHostnameConfigurationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GatewayHostnameConfigurationCollection;
  };
};

/**
 * Optional parameters.
 */
export interface GatewayApiListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByService operation.
 */
export type GatewayApiListByServiceResponse = ApiCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type GatewayApiGetEntityTagResponse = GatewayApiGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: GatewayApiGetEntityTagHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface GatewayApiCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Association entity details.
   */
  parameters?: AssociationContract;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GatewayApiCreateOrUpdateResponse = ApiContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiContract;
  };
};

/**
 * Optional parameters.
 */
export interface GatewayApiListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type GatewayApiListByServiceNextResponse = ApiCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiCollection;
  };
};

/**
 * Optional parameters.
 */
export interface GroupListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| aadObjectId | filter | eq |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type GroupListByServiceResponse = GroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type GroupGetEntityTagResponse = GroupGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: GroupGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type GroupGetResponse = GroupGetHeaders &
  GroupContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GroupContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: GroupGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface GroupCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GroupCreateOrUpdateResponse = GroupCreateOrUpdateHeaders &
  GroupContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GroupContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: GroupCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface GroupListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| aadObjectId | filter | eq |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type GroupListByServiceNextResponse = GroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupCollection;
  };
};

/**
 * Optional parameters.
 */
export interface GroupUserListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| firstName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| lastName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| email | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| registrationDate | filter | ge, le, eq, ne, gt, lt |     | </br>| note | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type GroupUserListResponse = UserCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserCollection;
  };
};

/**
 * Contains response data for the create operation.
 */
export type GroupUserCreateResponse = UserContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserContract;
  };
};

/**
 * Optional parameters.
 */
export interface GroupUserListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| firstName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| lastName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| email | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| registrationDate | filter | ge, le, eq, ne, gt, lt |     | </br>| note | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type GroupUserListNextResponse = UserCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserCollection;
  };
};

/**
 * Contains response data for the listByService operation.
 */
export type IdentityProviderListByServiceResponse = IdentityProviderList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IdentityProviderList;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type IdentityProviderGetEntityTagResponse = IdentityProviderGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: IdentityProviderGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IdentityProviderGetResponse = IdentityProviderGetHeaders &
  IdentityProviderContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IdentityProviderContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: IdentityProviderGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface IdentityProviderCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IdentityProviderCreateOrUpdateResponse = IdentityProviderCreateOrUpdateHeaders &
  IdentityProviderContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IdentityProviderContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: IdentityProviderCreateOrUpdateHeaders;
    };
  };

/**
 * Contains response data for the listSecrets operation.
 */
export type IdentityProviderListSecretsResponse = ClientSecretContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ClientSecretContract;
  };
};

/**
 * Contains response data for the listByServiceNext operation.
 */
export type IdentityProviderListByServiceNextResponse = IdentityProviderList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IdentityProviderList;
  };
};

/**
 * Optional parameters.
 */
export interface IssueListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| apiId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| title | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| authorName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type IssueListByServiceResponse = IssueCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssueCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IssueGetResponse = IssueGetHeaders &
  IssueContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IssueContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: IssueGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface IssueListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| apiId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| title | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| authorName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type IssueListByServiceNextResponse = IssueCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssueCollection;
  };
};

/**
 * Optional parameters.
 */
export interface LoggerListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| loggerType | filter | eq |     | </br>| resourceId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type LoggerListByServiceResponse = LoggerCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoggerCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type LoggerGetEntityTagResponse = LoggerGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: LoggerGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type LoggerGetResponse = LoggerGetHeaders &
  LoggerContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoggerContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: LoggerGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface LoggerCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LoggerCreateOrUpdateResponse = LoggerCreateOrUpdateHeaders &
  LoggerContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoggerContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: LoggerCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface LoggerDeleteOptionalParams extends coreHttp.OperationOptions {
  /**
   * Force deletion even if diagnostic is attached.
   */
  force?: boolean;
}

/**
 * Optional parameters.
 */
export interface LoggerListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| loggerType | filter | eq |     | </br>| resourceId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type LoggerListByServiceNextResponse = LoggerCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoggerCollection;
  };
};

/**
 * Optional parameters.
 */
export interface NamedValueListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| tags | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith, any, all | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type NamedValueListByServiceResponse = NamedValueCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NamedValueCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type NamedValueGetEntityTagResponse = NamedValueGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: NamedValueGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NamedValueGetResponse = NamedValueGetHeaders &
  NamedValueContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NamedValueContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: NamedValueGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface NamedValueCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NamedValueCreateOrUpdateResponse = NamedValueCreateOrUpdateHeaders &
  NamedValueContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NamedValueContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: NamedValueCreateOrUpdateHeaders;
    };
  };

/**
 * Contains response data for the update operation.
 */
export type NamedValueUpdateResponse = NamedValueUpdateHeaders &
  NamedValueContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NamedValueContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: NamedValueUpdateHeaders;
    };
  };

/**
 * Contains response data for the listValue operation.
 */
export type NamedValueListValueResponse = PropertyValueContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PropertyValueContract;
  };
};

/**
 * Optional parameters.
 */
export interface NamedValueListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| tags | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith, any, all | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type NamedValueListByServiceNextResponse = NamedValueCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NamedValueCollection;
  };
};

/**
 * Contains response data for the listByService operation.
 */
export type NetworkStatusListByServiceResponse = NetworkStatusContractByLocation[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkStatusContractByLocation[];
  };
};

/**
 * Contains response data for the listByLocation operation.
 */
export type NetworkStatusListByLocationResponse = NetworkStatusContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkStatusContract;
  };
};

/**
 * Optional parameters.
 */
export interface NotificationListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByService operation.
 */
export type NotificationListByServiceResponse = NotificationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotificationCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NotificationGetResponse = NotificationContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotificationContract;
  };
};

/**
 * Optional parameters.
 */
export interface NotificationCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NotificationCreateOrUpdateResponse = NotificationContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotificationContract;
  };
};

/**
 * Optional parameters.
 */
export interface NotificationListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type NotificationListByServiceNextResponse = NotificationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotificationCollection;
  };
};

/**
 * Contains response data for the listByNotification operation.
 */
export type NotificationRecipientUserListByNotificationResponse = RecipientUserCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecipientUserCollection;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NotificationRecipientUserCreateOrUpdateResponse = RecipientUserContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecipientUserContract;
  };
};

/**
 * Contains response data for the listByNotification operation.
 */
export type NotificationRecipientEmailListByNotificationResponse = RecipientEmailCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecipientEmailCollection;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NotificationRecipientEmailCreateOrUpdateResponse = RecipientEmailContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecipientEmailContract;
  };
};

/**
 * Optional parameters.
 */
export interface OpenIdConnectProviderListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type OpenIdConnectProviderListByServiceResponse = OpenIdConnectProviderCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OpenIdConnectProviderCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type OpenIdConnectProviderGetEntityTagResponse = OpenIdConnectProviderGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: OpenIdConnectProviderGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type OpenIdConnectProviderGetResponse = OpenIdConnectProviderGetHeaders &
  OpenidConnectProviderContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OpenidConnectProviderContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: OpenIdConnectProviderGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface OpenIdConnectProviderCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type OpenIdConnectProviderCreateOrUpdateResponse = OpenIdConnectProviderCreateOrUpdateHeaders &
  OpenidConnectProviderContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OpenidConnectProviderContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: OpenIdConnectProviderCreateOrUpdateHeaders;
    };
  };

/**
 * Contains response data for the listSecrets operation.
 */
export type OpenIdConnectProviderListSecretsResponse = ClientSecretContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ClientSecretContract;
  };
};

/**
 * Optional parameters.
 */
export interface OpenIdConnectProviderListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type OpenIdConnectProviderListByServiceNextResponse = OpenIdConnectProviderCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OpenIdConnectProviderCollection;
  };
};

/**
 * Contains response data for the listByService operation.
 */
export type PolicyListByServiceResponse = PolicyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type PolicyGetEntityTagResponse = PolicyGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: PolicyGetEntityTagHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface PolicyGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Policy Export Format.
   */
  format?: PolicyExportFormat;
}

/**
 * Contains response data for the get operation.
 */
export type PolicyGetResponse = PolicyGetHeaders &
  PolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PolicyGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface PolicyCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PolicyCreateOrUpdateResponse = PolicyCreateOrUpdateHeaders &
  PolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PolicyCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface PolicyDescriptionListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Policy scope.
   */
  scope?: PolicyScopeContract;
}

/**
 * Contains response data for the listByService operation.
 */
export type PolicyDescriptionListByServiceResponse = PolicyDescriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDescriptionCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type SignInSettingsGetEntityTagResponse = SignInSettingsGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: SignInSettingsGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SignInSettingsGetResponse = SignInSettingsGetHeaders &
  PortalSigninSettings & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortalSigninSettings;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: SignInSettingsGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface SignInSettingsCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SignInSettingsCreateOrUpdateResponse = PortalSigninSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PortalSigninSettings;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type SignUpSettingsGetEntityTagResponse = SignUpSettingsGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: SignUpSettingsGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SignUpSettingsGetResponse = SignUpSettingsGetHeaders &
  PortalSignupSettings & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortalSignupSettings;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: SignUpSettingsGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface SignUpSettingsCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SignUpSettingsCreateOrUpdateResponse = PortalSignupSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PortalSignupSettings;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type DelegationSettingsGetEntityTagResponse = DelegationSettingsGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: DelegationSettingsGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DelegationSettingsGetResponse = DelegationSettingsGetHeaders &
  PortalDelegationSettings & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortalDelegationSettings;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DelegationSettingsGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface DelegationSettingsCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DelegationSettingsCreateOrUpdateResponse = PortalDelegationSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PortalDelegationSettings;
  };
};

/**
 * Contains response data for the listSecrets operation.
 */
export type DelegationSettingsListSecretsResponse = PortalSettingValidationKeyContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PortalSettingValidationKeyContract;
  };
};

/**
 * Optional parameters.
 */
export interface ProductListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| terms | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>| groups | expand |     |     | </br>
   */
  filter?: string;
  /**
   * When set to true, the response contains an array of groups that have visibility to the product. The default is false.
   */
  expandGroups?: boolean;
  /**
   * Products which are part of a specific tag.
   */
  tags?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type ProductListByServiceResponse = ProductCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ProductGetEntityTagResponse = ProductGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ProductGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ProductGetResponse = ProductGetHeaders &
  ProductContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProductContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ProductGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ProductCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProductCreateOrUpdateResponse = ProductCreateOrUpdateHeaders &
  ProductContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProductContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ProductCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ProductDeleteOptionalParams extends coreHttp.OperationOptions {
  /**
   * Delete existing subscriptions associated with the product or not.
   */
  deleteSubscriptions?: boolean;
}

/**
 * Optional parameters.
 */
export interface ProductListByTagsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| terms | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
  /**
   * Include not tagged Products.
   */
  includeNotTaggedProducts?: boolean;
}

/**
 * Contains response data for the listByTags operation.
 */
export type ProductListByTagsResponse = TagResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagResourceCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProductListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| terms | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>| groups | expand |     |     | </br>
   */
  filter?: string;
  /**
   * When set to true, the response contains an array of groups that have visibility to the product. The default is false.
   */
  expandGroups?: boolean;
  /**
   * Products which are part of a specific tag.
   */
  tags?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type ProductListByServiceNextResponse = ProductCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProductListByTagsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| terms | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
  /**
   * Include not tagged Products.
   */
  includeNotTaggedProducts?: boolean;
}

/**
 * Contains response data for the listByTagsNext operation.
 */
export type ProductListByTagsNextResponse = TagResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagResourceCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProductApiListByProductOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByProduct operation.
 */
export type ProductApiListByProductResponse = ApiCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiCollection;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProductApiCreateOrUpdateResponse = ApiContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiContract;
  };
};

/**
 * Optional parameters.
 */
export interface ProductApiListByProductNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByProductNext operation.
 */
export type ProductApiListByProductNextResponse = ApiCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProductGroupListByProductOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt |     | </br>| displayName | filter | eq, ne |     | </br>| description | filter | eq, ne |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByProduct operation.
 */
export type ProductGroupListByProductResponse = GroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupCollection;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProductGroupCreateOrUpdateResponse = GroupContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupContract;
  };
};

/**
 * Optional parameters.
 */
export interface ProductGroupListByProductNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt |     | </br>| displayName | filter | eq, ne |     | </br>| description | filter | eq, ne |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByProductNext operation.
 */
export type ProductGroupListByProductNextResponse = GroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProductSubscriptionsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>| user | expand |     |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ProductSubscriptionsListResponse = SubscriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProductSubscriptionsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>| user | expand |     |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ProductSubscriptionsListNextResponse = SubscriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionCollection;
  };
};

/**
 * Contains response data for the listByProduct operation.
 */
export type ProductPolicyListByProductResponse = PolicyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type ProductPolicyGetEntityTagResponse = ProductPolicyGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ProductPolicyGetEntityTagHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface ProductPolicyGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Policy Export Format.
   */
  format?: PolicyExportFormat;
}

/**
 * Contains response data for the get operation.
 */
export type ProductPolicyGetResponse = ProductPolicyGetHeaders &
  PolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ProductPolicyGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ProductPolicyCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProductPolicyCreateOrUpdateResponse = ProductPolicyCreateOrUpdateHeaders &
  PolicyContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ProductPolicyCreateOrUpdateHeaders;
    };
  };

/**
 * Contains response data for the listByService operation.
 */
export type QuotaByCounterKeysListByServiceResponse = QuotaCounterCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QuotaCounterCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type QuotaByPeriodKeysGetResponse = QuotaCounterContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QuotaCounterContract;
  };
};

/**
 * Contains response data for the listByService operation.
 */
export type RegionListByServiceResponse = RegionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegionListResult;
  };
};

/**
 * Contains response data for the listByServiceNext operation.
 */
export type RegionListByServiceNextResponse = RegionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByApiOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * OData order by query option.
   */
  orderby?: string;
}

/**
 * Contains response data for the listByApi operation.
 */
export type ReportsListByApiResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByUserOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * OData order by query option.
   */
  orderby?: string;
}

/**
 * Contains response data for the listByUser operation.
 */
export type ReportsListByUserResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByOperationOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * OData order by query option.
   */
  orderby?: string;
}

/**
 * Contains response data for the listByOperation operation.
 */
export type ReportsListByOperationResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByProductOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * OData order by query option.
   */
  orderby?: string;
}

/**
 * Contains response data for the listByProduct operation.
 */
export type ReportsListByProductResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByGeoOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByGeo operation.
 */
export type ReportsListByGeoResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * OData order by query option.
   */
  orderby?: string;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type ReportsListBySubscriptionResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByTimeOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * OData order by query option.
   */
  orderby?: string;
}

/**
 * Contains response data for the listByTime operation.
 */
export type ReportsListByTimeResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByRequestOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByRequest operation.
 */
export type ReportsListByRequestResponse = RequestReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RequestReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByApiNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * OData order by query option.
   */
  orderby?: string;
}

/**
 * Contains response data for the listByApiNext operation.
 */
export type ReportsListByApiNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByUserNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * OData order by query option.
   */
  orderby?: string;
}

/**
 * Contains response data for the listByUserNext operation.
 */
export type ReportsListByUserNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByOperationNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * OData order by query option.
   */
  orderby?: string;
}

/**
 * Contains response data for the listByOperationNext operation.
 */
export type ReportsListByOperationNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByProductNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * OData order by query option.
   */
  orderby?: string;
}

/**
 * Contains response data for the listByProductNext operation.
 */
export type ReportsListByProductNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByGeoNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
}

/**
 * Contains response data for the listByGeoNext operation.
 */
export type ReportsListByGeoNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * OData order by query option.
   */
  orderby?: string;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type ReportsListBySubscriptionNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ReportsListByTimeNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * OData order by query option.
   */
  orderby?: string;
}

/**
 * Contains response data for the listByTimeNext operation.
 */
export type ReportsListByTimeNextResponse = ReportCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReportCollection;
  };
};

/**
 * Optional parameters.
 */
export interface SubscriptionListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>| user | expand |     |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type SubscriptionListResponse = SubscriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type SubscriptionGetEntityTagResponse = SubscriptionGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: SubscriptionGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SubscriptionGetResponse = SubscriptionGetHeaders &
  SubscriptionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubscriptionContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: SubscriptionGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface SubscriptionCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
  /**
   * Notify change in Subscription State.
   *  - If false, do not send any email notification for change of state of subscription
   *  - If true, send email notification of change of state of subscription
   */
  notify?: boolean;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SubscriptionCreateOrUpdateResponse = SubscriptionCreateOrUpdateHeaders &
  SubscriptionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubscriptionContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: SubscriptionCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface SubscriptionUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Notify change in Subscription State.
   *  - If false, do not send any email notification for change of state of subscription
   *  - If true, send email notification of change of state of subscription
   */
  notify?: boolean;
}

/**
 * Contains response data for the listSecrets operation.
 */
export type SubscriptionListSecretsResponse = SubscriptionKeysContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionKeysContract;
  };
};

/**
 * Optional parameters.
 */
export interface SubscriptionListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>| user | expand |     |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type SubscriptionListNextResponse = SubscriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionCollection;
  };
};

/**
 * Optional parameters.
 */
export interface TagResourceListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| aid | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| apiName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| terms | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>| isCurrent | filter | eq |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByService operation.
 */
export type TagResourceListByServiceResponse = TagResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagResourceCollection;
  };
};

/**
 * Optional parameters.
 */
export interface TagResourceListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| aid | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| apiName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| terms | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>| isCurrent | filter | eq |     | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type TagResourceListByServiceNextResponse = TagResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagResourceCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type TenantAccessGetEntityTagResponse = TenantAccessGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: TenantAccessGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type TenantAccessGetResponse = TenantAccessGetHeaders &
  AccessInformationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessInformationContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TenantAccessGetHeaders;
    };
  };

/**
 * Contains response data for the listSecrets operation.
 */
export type TenantAccessListSecretsResponse = TenantAccessListSecretsHeaders &
  AccessInformationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessInformationContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TenantAccessListSecretsHeaders;
    };
  };

/**
 * Contains response data for the get operation.
 */
export type TenantAccessGitGetResponse = TenantAccessGitGetHeaders &
  AccessInformationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessInformationContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TenantAccessGitGetHeaders;
    };
  };

/**
 * Contains response data for the listSecrets operation.
 */
export type TenantAccessGitListSecretsResponse = TenantAccessGitListSecretsHeaders &
  AccessInformationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessInformationContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TenantAccessGitListSecretsHeaders;
    };
  };

/**
 * Contains response data for the deploy operation.
 */
export type TenantConfigurationDeployResponse = OperationResultContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationResultContract;
  };
};

/**
 * Contains response data for the save operation.
 */
export type TenantConfigurationSaveResponse = OperationResultContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationResultContract;
  };
};

/**
 * Contains response data for the validate operation.
 */
export type TenantConfigurationValidateResponse = OperationResultContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationResultContract;
  };
};

/**
 * Contains response data for the getSyncState operation.
 */
export type TenantConfigurationGetSyncStateResponse = TenantConfigurationSyncStateContract & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TenantConfigurationSyncStateContract;
  };
};

/**
 * Optional parameters.
 */
export interface UserListByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| firstName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| lastName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| email | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>| registrationDate | filter | ge, le, eq, ne, gt, lt |     | </br>| note | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| groups | expand |     |     | </br>
   */
  filter?: string;
  /**
   * Detailed Group in response.
   */
  expandGroups?: boolean;
}

/**
 * Contains response data for the listByService operation.
 */
export type UserListByServiceResponse = UserCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserCollection;
  };
};

/**
 * Contains response data for the getEntityTag operation.
 */
export type UserGetEntityTagResponse = UserGetEntityTagHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: UserGetEntityTagHeaders;
  };
};

/**
 * Contains response data for the get operation.
 */
export type UserGetResponse = UserGetHeaders &
  UserContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UserContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: UserGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface UserCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the Entity. Not required when creating an entity, but required when updating an entity.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type UserCreateOrUpdateResponse = UserCreateOrUpdateHeaders &
  UserContract & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UserContract;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: UserCreateOrUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface UserDeleteOptionalParams extends coreHttp.OperationOptions {
  /**
   * Whether to delete user's subscription or not.
   */
  deleteSubscriptions?: boolean;
  /**
   * Send an Account Closed Email notification to the User.
   */
  notify?: boolean;
}

/**
 * Contains response data for the generateSsoUrl operation.
 */
export type UserGenerateSsoUrlResponse = GenerateSsoUrlResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GenerateSsoUrlResult;
  };
};

/**
 * Contains response data for the getSharedAccessToken operation.
 */
export type UserGetSharedAccessTokenResponse = UserTokenResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserTokenResult;
  };
};

/**
 * Optional parameters.
 */
export interface UserListByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| firstName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| lastName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| email | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>| registrationDate | filter | ge, le, eq, ne, gt, lt |     | </br>| note | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| groups | expand |     |     | </br>
   */
  filter?: string;
  /**
   * Detailed Group in response.
   */
  expandGroups?: boolean;
}

/**
 * Contains response data for the listByServiceNext operation.
 */
export type UserListByServiceNextResponse = UserCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserCollection;
  };
};

/**
 * Optional parameters.
 */
export interface UserGroupListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type UserGroupListResponse = GroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupCollection;
  };
};

/**
 * Optional parameters.
 */
export interface UserGroupListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type UserGroupListNextResponse = GroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GroupCollection;
  };
};

/**
 * Optional parameters.
 */
export interface UserSubscriptionListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type UserSubscriptionListResponse = SubscriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionCollection;
  };
};

/**
 * Optional parameters.
 */
export interface UserSubscriptionListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Number of records to skip.
   */
  skip?: number;
  /**
   * |   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type UserSubscriptionListNextResponse = SubscriptionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type UserIdentitiesListResponse = UserIdentityCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserIdentityCollection;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type UserIdentitiesListNextResponse = UserIdentityCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserIdentityCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ApiManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
