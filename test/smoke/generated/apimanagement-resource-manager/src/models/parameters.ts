/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    xmlName: "$host",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    xmlName: "resourceGroupName",
    type: {
      name: "String"
    }
  }
};

export const serviceName: coreHttp.OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$"),
      MaxLength: 50,
      MinLength: 1
    },
    serializedName: "serviceName",
    required: true,
    xmlName: "serviceName",
    type: {
      name: "String"
    }
  }
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const top: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    constraints: {
      InclusiveMinimum: 1
    },
    serializedName: "$top",
    xmlName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const skip: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    constraints: {},
    serializedName: "$skip",
    xmlName: "$skip",
    type: {
      name: "Number"
    }
  }
};

export const tags: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "tags"],
  mapper: {
    serializedName: "tags",
    xmlName: "tags",
    type: {
      name: "String"
    }
  }
};

export const expandApiVersionSet: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expandApiVersionSet"],
  mapper: {
    serializedName: "expandApiVersionSet",
    xmlName: "expandApiVersionSet",
    type: {
      name: "Boolean"
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-12-01",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    xmlName: "subscriptionId",
    type: {
      name: "String"
    }
  }
};

export const apiId: coreHttp.OperationURLParameter = {
  parameterPath: "apiId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256,
      MinLength: 1
    },
    serializedName: "apiId",
    required: true,
    xmlName: "apiId",
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApiCreateOrUpdateParameter
};

export const ifMatch: coreHttp.OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApiUpdateContract
};

export const ifMatch1: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const deleteRevisions: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "deleteRevisions"],
  mapper: {
    serializedName: "deleteRevisions",
    xmlName: "deleteRevisions",
    type: {
      name: "Boolean"
    }
  }
};

export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const includeNotTaggedApis: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "includeNotTaggedApis"],
  mapper: {
    serializedName: "includeNotTaggedApis",
    xmlName: "includeNotTaggedApis",
    type: {
      name: "Boolean"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiId1: coreHttp.OperationURLParameter = {
  parameterPath: "apiId",
  mapper: {
    constraints: {
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "apiId",
    required: true,
    xmlName: "apiId",
    type: {
      name: "String"
    }
  }
};

export const filter2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const filter3: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const releaseId: coreHttp.OperationURLParameter = {
  parameterPath: "releaseId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "releaseId",
    required: true,
    xmlName: "releaseId",
    type: {
      name: "String"
    }
  }
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApiReleaseContract
};

export const parameters3: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApiReleaseContract
};

export const filter4: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const operationId: coreHttp.OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    constraints: {
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "operationId",
    required: true,
    xmlName: "operationId",
    type: {
      name: "String"
    }
  }
};

export const parameters4: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.OperationContract
};

export const parameters5: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.OperationUpdateContract
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const policyId: coreHttp.OperationURLParameter = {
  parameterPath: "policyId",
  mapper: {
    defaultValue: "policy",
    serializedName: "policyId",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const format: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "format"],
  mapper: {
    defaultValue: "xml",
    serializedName: "format",
    xmlName: "format",
    type: {
      name: "String"
    }
  }
};

export const parameters6: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PolicyContract
};

export const filter5: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const tagId: coreHttp.OperationURLParameter = {
  parameterPath: "tagId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "tagId",
    required: true,
    xmlName: "tagId",
    type: {
      name: "String"
    }
  }
};

export const productId: coreHttp.OperationURLParameter = {
  parameterPath: "productId",
  mapper: {
    constraints: {
      MaxLength: 256,
      MinLength: 1
    },
    serializedName: "productId",
    required: true,
    xmlName: "productId",
    type: {
      name: "String"
    }
  }
};

export const filter6: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const scope: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "scope"],
  mapper: {
    serializedName: "scope",
    xmlName: "scope",
    type: {
      name: "String"
    }
  }
};

export const parameters7: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagCreateUpdateParameters
};

export const parameters8: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagCreateUpdateParameters
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink4: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const filter7: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const nextLink5: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const filter8: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const schemaId: coreHttp.OperationURLParameter = {
  parameterPath: "schemaId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "schemaId",
    required: true,
    xmlName: "schemaId",
    type: {
      name: "String"
    }
  }
};

export const parameters9: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SchemaContract
};

export const force: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "force"],
  mapper: {
    serializedName: "force",
    xmlName: "force",
    type: {
      name: "Boolean"
    }
  }
};

export const filter9: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const diagnosticId: coreHttp.OperationURLParameter = {
  parameterPath: "diagnosticId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "diagnosticId",
    required: true,
    xmlName: "diagnosticId",
    type: {
      name: "String"
    }
  }
};

export const parameters10: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DiagnosticContract
};

export const parameters11: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DiagnosticContract
};

export const filter10: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const expandCommentsAttachments: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expandCommentsAttachments"],
  mapper: {
    serializedName: "expandCommentsAttachments",
    xmlName: "expandCommentsAttachments",
    type: {
      name: "Boolean"
    }
  }
};

export const issueId: coreHttp.OperationURLParameter = {
  parameterPath: "issueId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256,
      MinLength: 1
    },
    serializedName: "issueId",
    required: true,
    xmlName: "issueId",
    type: {
      name: "String"
    }
  }
};

export const parameters12: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.IssueContract
};

export const parameters13: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.IssueUpdateContract
};

export const filter11: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const commentId: coreHttp.OperationURLParameter = {
  parameterPath: "commentId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256,
      MinLength: 1
    },
    serializedName: "commentId",
    required: true,
    xmlName: "commentId",
    type: {
      name: "String"
    }
  }
};

export const parameters14: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.IssueCommentContract
};

export const attachmentId: coreHttp.OperationURLParameter = {
  parameterPath: "attachmentId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256,
      MinLength: 1
    },
    serializedName: "attachmentId",
    required: true,
    xmlName: "attachmentId",
    type: {
      name: "String"
    }
  }
};

export const parameters15: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.IssueAttachmentContract
};

export const tagDescriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "tagDescriptionId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "tagDescriptionId",
    required: true,
    xmlName: "tagDescriptionId",
    type: {
      name: "String"
    }
  }
};

export const parameters16: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TagDescriptionCreateParameters
};

export const filter12: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const includeNotTaggedOperations: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "includeNotTaggedOperations"],
  mapper: {
    serializedName: "includeNotTaggedOperations",
    xmlName: "includeNotTaggedOperations",
    type: {
      name: "Boolean"
    }
  }
};

export const format1: coreHttp.OperationQueryParameter = {
  parameterPath: "format",
  mapper: {
    serializedName: "format",
    required: true,
    xmlName: "format",
    type: {
      name: "String"
    }
  }
};

export const exportModel: coreHttp.OperationQueryParameter = {
  parameterPath: "exportModel",
  mapper: {
    defaultValue: "true",
    serializedName: "export",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const filter13: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const versionSetId: coreHttp.OperationURLParameter = {
  parameterPath: "versionSetId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "versionSetId",
    required: true,
    xmlName: "versionSetId",
    type: {
      name: "String"
    }
  }
};

export const parameters17: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApiVersionSetContract
};

export const parameters18: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApiVersionSetUpdateParameters
};

export const authsid: coreHttp.OperationURLParameter = {
  parameterPath: "authsid",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "authsid",
    required: true,
    xmlName: "authsid",
    type: {
      name: "String"
    }
  }
};

export const parameters19: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AuthorizationServerContract
};

export const parameters20: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AuthorizationServerUpdateContract
};

export const filter14: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const backendId: coreHttp.OperationURLParameter = {
  parameterPath: "backendId",
  mapper: {
    constraints: {
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "backendId",
    required: true,
    xmlName: "backendId",
    type: {
      name: "String"
    }
  }
};

export const parameters21: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BackendContract
};

export const parameters22: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BackendUpdateParameters
};

export const parameters23: coreHttp.OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: Mappers.BackendReconnectContract
};

export const cacheId: coreHttp.OperationURLParameter = {
  parameterPath: "cacheId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "cacheId",
    required: true,
    xmlName: "cacheId",
    type: {
      name: "String"
    }
  }
};

export const parameters24: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CacheContract
};

export const parameters25: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CacheUpdateParameters
};

export const filter15: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const certificateId: coreHttp.OperationURLParameter = {
  parameterPath: "certificateId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "certificateId",
    required: true,
    xmlName: "certificateId",
    type: {
      name: "String"
    }
  }
};

export const parameters26: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CertificateCreateOrUpdateParameters
};

export const nextLink6: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink7: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters27: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApiManagementServiceBackupRestoreParameters
};

export const parameters28: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApiManagementServiceBackupRestoreParameters
};

export const parameters29: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApiManagementServiceResource
};

export const parameters30: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApiManagementServiceUpdateParameters
};

export const parameters31: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ApiManagementServiceCheckNameAvailabilityParameters
};

export const parameters32: coreHttp.OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: Mappers.ApiManagementServiceApplyNetworkConfigurationParameters
};

export const nextLink8: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const templateName: coreHttp.OperationURLParameter = {
  parameterPath: "templateName",
  mapper: {
    serializedName: "templateName",
    required: true,
    xmlName: "templateName",
    type: {
      name: "String"
    }
  }
};

export const parameters33: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.EmailTemplateUpdateParameters
};

export const parameters34: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.EmailTemplateUpdateParameters
};

export const gatewayId: coreHttp.OperationURLParameter = {
  parameterPath: "gatewayId",
  mapper: {
    constraints: {
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "gatewayId",
    required: true,
    xmlName: "gatewayId",
    type: {
      name: "String"
    }
  }
};

export const parameters35: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.GatewayContract
};

export const parameters36: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.GatewayKeyRegenerationRequestContract
};

export const parameters37: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.GatewayTokenRequestContract
};

export const hcId: coreHttp.OperationURLParameter = {
  parameterPath: "hcId",
  mapper: {
    constraints: {
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "hcId",
    required: true,
    xmlName: "hcId",
    type: {
      name: "String"
    }
  }
};

export const parameters38: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.GatewayHostnameConfigurationContract
};

export const parameters39: coreHttp.OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: Mappers.AssociationContract
};

export const filter16: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const groupId: coreHttp.OperationURLParameter = {
  parameterPath: "groupId",
  mapper: {
    constraints: {
      MaxLength: 256,
      MinLength: 1
    },
    serializedName: "groupId",
    required: true,
    xmlName: "groupId",
    type: {
      name: "String"
    }
  }
};

export const parameters40: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.GroupCreateParameters
};

export const parameters41: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.GroupUpdateParameters
};

export const filter17: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const userId: coreHttp.OperationURLParameter = {
  parameterPath: "userId",
  mapper: {
    constraints: {
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "userId",
    required: true,
    xmlName: "userId",
    type: {
      name: "String"
    }
  }
};

export const identityProviderName: coreHttp.OperationURLParameter = {
  parameterPath: "identityProviderName",
  mapper: {
    serializedName: "identityProviderName",
    required: true,
    xmlName: "identityProviderName",
    type: {
      name: "String"
    }
  }
};

export const parameters42: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.IdentityProviderCreateContract
};

export const parameters43: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.IdentityProviderUpdateParameters
};

export const filter18: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const filter19: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const loggerId: coreHttp.OperationURLParameter = {
  parameterPath: "loggerId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256
    },
    serializedName: "loggerId",
    required: true,
    xmlName: "loggerId",
    type: {
      name: "String"
    }
  }
};

export const parameters44: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.LoggerContract
};

export const parameters45: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.LoggerUpdateContract
};

export const force1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "force"],
  mapper: {
    serializedName: "force",
    xmlName: "force",
    type: {
      name: "Boolean"
    }
  }
};

export const filter20: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const namedValueId: coreHttp.OperationURLParameter = {
  parameterPath: "namedValueId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256
    },
    serializedName: "namedValueId",
    required: true,
    xmlName: "namedValueId",
    type: {
      name: "String"
    }
  }
};

export const parameters46: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.NamedValueCreateContract
};

export const parameters47: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.NamedValueUpdateParameters
};

export const locationName: coreHttp.OperationURLParameter = {
  parameterPath: "locationName",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "locationName",
    required: true,
    xmlName: "locationName",
    type: {
      name: "String"
    }
  }
};

export const notificationName: coreHttp.OperationURLParameter = {
  parameterPath: "notificationName",
  mapper: {
    serializedName: "notificationName",
    required: true,
    xmlName: "notificationName",
    type: {
      name: "String"
    }
  }
};

export const email: coreHttp.OperationURLParameter = {
  parameterPath: "email",
  mapper: {
    serializedName: "email",
    required: true,
    xmlName: "email",
    type: {
      name: "String"
    }
  }
};

export const opid: coreHttp.OperationURLParameter = {
  parameterPath: "opid",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256
    },
    serializedName: "opid",
    required: true,
    xmlName: "opid",
    type: {
      name: "String"
    }
  }
};

export const parameters48: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.OpenidConnectProviderContract
};

export const parameters49: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.OpenidConnectProviderUpdateContract
};

export const scope1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "scope"],
  mapper: {
    serializedName: "scope",
    xmlName: "scope",
    type: {
      name: "Enum",
      allowedValues: ["Tenant", "Product", "Api", "Operation", "All"]
    }
  }
};

export const parameters50: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PortalSigninSettings
};

export const parameters51: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PortalSigninSettings
};

export const parameters52: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PortalSignupSettings
};

export const parameters53: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PortalSignupSettings
};

export const parameters54: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PortalDelegationSettings
};

export const parameters55: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PortalDelegationSettings
};

export const filter21: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const expandGroups: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expandGroups"],
  mapper: {
    serializedName: "expandGroups",
    xmlName: "expandGroups",
    type: {
      name: "Boolean"
    }
  }
};

export const tags1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "tags"],
  mapper: {
    serializedName: "tags",
    xmlName: "tags",
    type: {
      name: "String"
    }
  }
};

export const parameters56: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ProductContract
};

export const parameters57: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ProductUpdateParameters
};

export const deleteSubscriptions: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "deleteSubscriptions"],
  mapper: {
    serializedName: "deleteSubscriptions",
    xmlName: "deleteSubscriptions",
    type: {
      name: "Boolean"
    }
  }
};

export const filter22: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const includeNotTaggedProducts: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "includeNotTaggedProducts"],
  mapper: {
    serializedName: "includeNotTaggedProducts",
    xmlName: "includeNotTaggedProducts",
    type: {
      name: "Boolean"
    }
  }
};

export const filter23: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const filter24: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const quotaCounterKey: coreHttp.OperationURLParameter = {
  parameterPath: "quotaCounterKey",
  mapper: {
    serializedName: "quotaCounterKey",
    required: true,
    xmlName: "quotaCounterKey",
    type: {
      name: "String"
    }
  }
};

export const parameters58: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.QuotaCounterValueContractProperties
};

export const quotaPeriodKey: coreHttp.OperationURLParameter = {
  parameterPath: "quotaPeriodKey",
  mapper: {
    serializedName: "quotaPeriodKey",
    required: true,
    xmlName: "quotaPeriodKey",
    type: {
      name: "String"
    }
  }
};

export const parameters59: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.QuotaCounterValueContractProperties
};

export const filter25: coreHttp.OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const orderby: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "orderby"],
  mapper: {
    serializedName: "$orderby",
    xmlName: "$orderby",
    type: {
      name: "String"
    }
  }
};

export const filter26: coreHttp.OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const filter27: coreHttp.OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const filter28: coreHttp.OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const filter29: coreHttp.OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const filter30: coreHttp.OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const filter31: coreHttp.OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const interval: coreHttp.OperationQueryParameter = {
  parameterPath: "interval",
  mapper: {
    serializedName: "interval",
    required: true,
    xmlName: "interval",
    type: {
      name: "TimeSpan"
    }
  }
};

export const filter32: coreHttp.OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const nextLink9: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink10: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink11: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink12: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    xmlName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const sid: coreHttp.OperationURLParameter = {
  parameterPath: "sid",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^*#&+:<>?]+$"),
      MaxLength: 256
    },
    serializedName: "sid",
    required: true,
    xmlName: "sid",
    type: {
      name: "String"
    }
  }
};

export const parameters60: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SubscriptionCreateParameters
};

export const notify: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "notify"],
  mapper: {
    serializedName: "notify",
    xmlName: "notify",
    type: {
      name: "Boolean"
    }
  }
};

export const parameters61: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SubscriptionUpdateParameters
};

export const filter33: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const accessName: coreHttp.OperationURLParameter = {
  parameterPath: "accessName",
  mapper: {
    defaultValue: "access",
    serializedName: "accessName",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const parameters62: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AccessInformationUpdateParameters
};

export const parameters63: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DeployConfigurationParameters
};

export const configurationName: coreHttp.OperationURLParameter = {
  parameterPath: "configurationName",
  mapper: {
    defaultValue: "configuration",
    serializedName: "configurationName",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const parameters64: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SaveConfigurationParameter
};

export const parameters65: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DeployConfigurationParameters
};

export const filter34: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const expandGroups1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expandGroups"],
  mapper: {
    serializedName: "expandGroups",
    xmlName: "expandGroups",
    type: {
      name: "Boolean"
    }
  }
};

export const parameters66: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.UserCreateParameters
};

export const parameters67: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.UserUpdateParameters
};

export const deleteSubscriptions1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "deleteSubscriptions"],
  mapper: {
    serializedName: "deleteSubscriptions",
    xmlName: "deleteSubscriptions",
    type: {
      name: "Boolean"
    }
  }
};

export const notify1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "notify"],
  mapper: {
    serializedName: "notify",
    xmlName: "notify",
    type: {
      name: "Boolean"
    }
  }
};

export const parameters68: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.UserTokenParameters
};

export const filter35: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const filter36: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};
