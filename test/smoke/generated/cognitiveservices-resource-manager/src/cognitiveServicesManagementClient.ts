/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { CognitiveServicesManagementClientContext } from "./cognitiveServicesManagementClientContext";
import {
  CheckSkuAvailabilityParameter,
  CognitiveServicesManagementClientCheckSkuAvailabilityResponse,
  CheckDomainAvailabilityParameter,
  CognitiveServicesManagementClientCheckDomainAvailabilityResponse
} from "./models";

class CognitiveServicesManagementClient extends CognitiveServicesManagementClientContext {
  /**
   * Initializes a new instance of the CognitiveServicesManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Azure Subscription ID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    subscriptionId: string,
    options?: Models.CognitiveServicesManagementClientOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.accounts = new operations.Accounts(this);
    this.resourceSkus = new operations.ResourceSkus(this);
    this.operations = new operations.Operations(this);
  }

  /**
   * Check available SKUs.
   * @param parameters Check SKU Availability POST body.
   * @param location Resource location.
   * @param options The options parameters.
   */
  checkSkuAvailability(
    parameters: CheckSkuAvailabilityParameter,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<CognitiveServicesManagementClientCheckSkuAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { parameters, location, options: operationOptions },
      checkSkuAvailabilityOperationSpec
    ) as Promise<CognitiveServicesManagementClientCheckSkuAvailabilityResponse>;
  }

  /**
   * Check whether a domain is available.
   * @param parameters Check Domain Availability parameter.
   * @param options The options parameters.
   */
  checkDomainAvailability(
    parameters: CheckDomainAvailabilityParameter,
    options?: coreHttp.OperationOptions
  ): Promise<CognitiveServicesManagementClientCheckDomainAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { parameters, options: operationOptions },
      checkDomainAvailabilityOperationSpec
    ) as Promise<
      CognitiveServicesManagementClientCheckDomainAvailabilityResponse
    >;
  }

  accounts: operations.Accounts;
  resourceSkus: operations.ResourceSkus;
  operations: operations.Operations;
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const checkSkuAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/checkSkuAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckSkuAvailabilityResultList
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const checkDomainAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/checkDomainAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckDomainAvailabilityResult
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType],
  serializer
};

// Operation Specifications

export {
  CognitiveServicesManagementClient,
  CognitiveServicesManagementClientContext,
  Models as CognitiveServicesManagementModels,
  Mappers as CognitiveServicesManagementMappers
};
export * from "./operations";
