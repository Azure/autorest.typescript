/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const CognitiveServicesAccount: coreHttp.CompositeMapper = {
  serializedName: "CognitiveServicesAccount",
  type: {
    name: "Composite",
    className: "CognitiveServicesAccount",
    modelProperties: {
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CognitiveServicesAccountProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      }
    }
  }
};

export const CognitiveServicesAccountProperties: coreHttp.CompositeMapper = {
  serializedName: "CognitiveServicesAccountProperties",
  type: {
    name: "Composite",
    className: "CognitiveServicesAccountProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      internalId: {
        serializedName: "internalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customSubDomainName: {
        serializedName: "customSubDomainName",
        type: {
          name: "String"
        }
      },
      networkAcls: {
        serializedName: "networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      encryption: {
        serializedName: "encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      userOwnedStorage: {
        serializedName: "userOwnedStorage",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "UserOwnedStorage" }
          }
        }
      },
      apiProperties: {
        serializedName: "apiProperties",
        type: {
          name: "Composite",
          className: "CognitiveServicesAccountApiProperties"
        }
      }
    }
  }
};

export const NetworkRuleSet: coreHttp.CompositeMapper = {
  serializedName: "NetworkRuleSet",
  type: {
    name: "Composite",
    className: "NetworkRuleSet",
    modelProperties: {
      defaultAction: {
        serializedName: "defaultAction",
        type: {
          name: "String"
        }
      },
      ipRules: {
        serializedName: "ipRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IpRule" } }
        }
      },
      virtualNetworkRules: {
        serializedName: "virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkRule" }
          }
        }
      }
    }
  }
};

export const IpRule: coreHttp.CompositeMapper = {
  serializedName: "IpRule",
  type: {
    name: "Composite",
    className: "IpRule",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRule: coreHttp.CompositeMapper = {
  serializedName: "VirtualNetworkRule",
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      ignoreMissingVnetServiceEndpoint: {
        serializedName: "ignoreMissingVnetServiceEndpoint",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Encryption: coreHttp.CompositeMapper = {
  serializedName: "Encryption",
  type: {
    name: "Composite",
    className: "Encryption",
    modelProperties: {
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      keySource: {
        defaultValue: "Microsoft.KeyVault",
        serializedName: "keySource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreHttp.CompositeMapper = {
  serializedName: "KeyVaultProperties",
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        type: {
          name: "String"
        }
      },
      keyVersion: {
        serializedName: "keyVersion",
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserOwnedStorage: coreHttp.CompositeMapper = {
  serializedName: "UserOwnedStorage",
  type: {
    name: "Composite",
    className: "UserOwnedStorage",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CognitiveServicesAccountApiProperties: coreHttp.CompositeMapper = {
  serializedName: "CognitiveServicesAccountApiProperties",
  type: {
    name: "Composite",
    className: "CognitiveServicesAccountApiProperties",
    modelProperties: {
      qnaRuntimeEndpoint: {
        serializedName: "qnaRuntimeEndpoint",
        type: {
          name: "String"
        }
      },
      statisticsEnabled: {
        serializedName: "statisticsEnabled",
        type: {
          name: "Boolean"
        }
      },
      eventHubConnectionString: {
        constraints: {
          Pattern: new RegExp(
            "^( *)Endpoint=sb://(.*);( *)SharedAccessKeyName=(.*);( *)SharedAccessKey=(.*)$"
          ),
          MaxLength: 1000
        },
        serializedName: "eventHubConnectionString",
        type: {
          name: "String"
        }
      },
      storageAccountConnectionString: {
        constraints: {
          Pattern: new RegExp(
            "^(( *)DefaultEndpointsProtocol=(http|https)( *);( *))?AccountName=(.*)AccountKey=(.*)EndpointSuffix=(.*)$"
          ),
          MaxLength: 1000
        },
        serializedName: "storageAccountConnectionString",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Free", "Standard", "Premium"]
        }
      }
    }
  }
};

export const Identity: coreHttp.CompositeMapper = {
  serializedName: "Identity",
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: ["None", "SystemAssigned", "UserAssigned"]
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreHttp.CompositeMapper = {
  serializedName: "UserAssignedIdentity",
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: coreHttp.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorBody"
        }
      }
    }
  }
};

export const ErrorBody: coreHttp.CompositeMapper = {
  serializedName: "ErrorBody",
  type: {
    name: "Composite",
    className: "ErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CognitiveServicesAccountListResult: coreHttp.CompositeMapper = {
  serializedName: "CognitiveServicesAccountListResult",
  type: {
    name: "Composite",
    className: "CognitiveServicesAccountListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CognitiveServicesAccount" }
          }
        }
      }
    }
  }
};

export const CognitiveServicesAccountKeys: coreHttp.CompositeMapper = {
  serializedName: "CognitiveServicesAccountKeys",
  type: {
    name: "Composite",
    className: "CognitiveServicesAccountKeys",
    modelProperties: {
      key1: {
        serializedName: "key1",
        type: {
          name: "String"
        }
      },
      key2: {
        serializedName: "key2",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegenerateKeyParameters: coreHttp.CompositeMapper = {
  serializedName: "RegenerateKeyParameters",
  type: {
    name: "Composite",
    className: "RegenerateKeyParameters",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Key1", "Key2"]
        }
      }
    }
  }
};

export const ResourceSkusResult: coreHttp.CompositeMapper = {
  serializedName: "ResourceSkusResult",
  type: {
    name: "Composite",
    className: "ResourceSkusResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceSku" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSku: coreHttp.CompositeMapper = {
  serializedName: "ResourceSku",
  type: {
    name: "Composite",
    className: "ResourceSku",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ResourceSkuLocationsItem"
          }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ResourceSkuRestrictions" }
          }
        }
      }
    }
  }
};

export const ResourceSkuRestrictions: coreHttp.CompositeMapper = {
  serializedName: "ResourceSkuRestrictions",
  type: {
    name: "Composite",
    className: "ResourceSkuRestrictions",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Location", "Zone"]
        }
      },
      values: {
        serializedName: "values",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ResourceSkuRestrictionsValuesItem"
          }
        }
      },
      restrictionInfo: {
        serializedName: "restrictionInfo",
        type: {
          name: "Composite",
          className: "ResourceSkuRestrictionInfo"
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSkuRestrictionInfo: coreHttp.CompositeMapper = {
  serializedName: "ResourceSkuRestrictionInfo",
  type: {
    name: "Composite",
    className: "ResourceSkuRestrictionInfo",
    modelProperties: {
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ResourceSkuRestrictionInfoLocationsItem"
          }
        }
      },
      zones: {
        serializedName: "zones",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ResourceSkuRestrictionInfoZonesItem"
          }
        }
      }
    }
  }
};

export const CognitiveServicesAccountEnumerateSkusResult: coreHttp.CompositeMapper = {
  serializedName: "CognitiveServicesAccountEnumerateSkusResult",
  type: {
    name: "Composite",
    className: "CognitiveServicesAccountEnumerateSkusResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CognitiveServicesResourceAndSku"
            }
          }
        }
      }
    }
  }
};

export const CognitiveServicesResourceAndSku: coreHttp.CompositeMapper = {
  serializedName: "CognitiveServicesResourceAndSku",
  type: {
    name: "Composite",
    className: "CognitiveServicesResourceAndSku",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const UsagesResult: coreHttp.CompositeMapper = {
  serializedName: "UsagesResult",
  type: {
    name: "Composite",
    className: "UsagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Usage" } }
        }
      }
    }
  }
};

export const Usage: coreHttp.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      quotaPeriod: {
        serializedName: "quotaPeriod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nextResetTime: {
        serializedName: "nextResetTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricName: coreHttp.CompositeMapper = {
  serializedName: "MetricName",
  type: {
    name: "Composite",
    className: "MetricName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationEntityListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationEntityListResult",
  type: {
    name: "Composite",
    className: "OperationEntityListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OperationEntity" } }
        }
      }
    }
  }
};

export const OperationEntity: coreHttp.CompositeMapper = {
  serializedName: "OperationEntity",
  type: {
    name: "Composite",
    className: "OperationEntity",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplayInfo"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const OperationDisplayInfo: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplayInfo",
  type: {
    name: "Composite",
    className: "OperationDisplayInfo",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckSkuAvailabilityParameter: coreHttp.CompositeMapper = {
  serializedName: "CheckSkuAvailabilityParameter",
  type: {
    name: "Composite",
    className: "CheckSkuAvailabilityParameter",
    modelProperties: {
      skus: {
        serializedName: "skus",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" }, serializedName: "SkuName" }
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckSkuAvailabilityResultList: coreHttp.CompositeMapper = {
  serializedName: "CheckSkuAvailabilityResultList",
  type: {
    name: "Composite",
    className: "CheckSkuAvailabilityResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CheckSkuAvailabilityResult" }
          }
        }
      }
    }
  }
};

export const CheckSkuAvailabilityResult: coreHttp.CompositeMapper = {
  serializedName: "CheckSkuAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckSkuAvailabilityResult",
    modelProperties: {
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "skuName",
        type: {
          name: "String"
        }
      },
      skuAvailable: {
        serializedName: "skuAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckDomainAvailabilityParameter: coreHttp.CompositeMapper = {
  serializedName: "CheckDomainAvailabilityParameter",
  type: {
    name: "Composite",
    className: "CheckDomainAvailabilityParameter",
    modelProperties: {
      subdomainName: {
        serializedName: "subdomainName",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckDomainAvailabilityResult: coreHttp.CompositeMapper = {
  serializedName: "CheckDomainAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckDomainAvailabilityResult",
    modelProperties: {
      isSubdomainAvailable: {
        serializedName: "isSubdomainAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      subdomainName: {
        serializedName: "subdomainName",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};
