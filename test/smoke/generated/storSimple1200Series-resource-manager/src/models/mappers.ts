/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const ManagerList: coreHttp.CompositeMapper = {
  serializedName: "ManagerList",
  type: {
    name: "Composite",
    className: "ManagerList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Manager" } }
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const Manager: coreHttp.CompositeMapper = {
  serializedName: "Manager",
  type: {
    name: "Composite",
    className: "Manager",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      cisIntrinsicSettings: {
        serializedName: "cisIntrinsicSettings",
        type: {
          name: "Composite",
          className: "ManagerIntrinsicSettings"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ManagerSku"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagerIntrinsicSettings: coreHttp.CompositeMapper = {
  serializedName: "ManagerIntrinsicSettings",
  type: {
    name: "Composite",
    className: "ManagerIntrinsicSettings",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["GardaV1", "HelsinkiV1"]
        }
      }
    }
  }
};

export const ManagerSku: coreHttp.CompositeMapper = {
  serializedName: "ManagerSku",
  type: {
    name: "Composite",
    className: "ManagerSku",
    modelProperties: {
      name: {
        defaultValue: "Standard",
        serializedName: "name",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: coreHttp.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "Composite",
          className: "Message"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Item" } }
        }
      }
    }
  }
};

export const Message: coreHttp.CompositeMapper = {
  serializedName: "Message",
  type: {
    name: "Composite",
    className: "Message",
    modelProperties: {
      language: {
        serializedName: "language",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Item: coreHttp.CompositeMapper = {
  serializedName: "Item",
  type: {
    name: "Composite",
    className: "Item",
    modelProperties: {
      key: {
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableProviderOperations: coreHttp.CompositeMapper = {
  serializedName: "AvailableProviderOperations",
  type: {
    name: "Composite",
    className: "AvailableProviderOperations",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AvailableProviderOperation" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableProviderOperation: coreHttp.CompositeMapper = {
  serializedName: "AvailableProviderOperation",
  type: {
    name: "Composite",
    className: "AvailableProviderOperation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "AvailableProviderOperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const AvailableProviderOperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "AvailableProviderOperationDisplay",
  type: {
    name: "Composite",
    className: "AvailableProviderOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagerPatch: coreHttp.CompositeMapper = {
  serializedName: "ManagerPatch",
  type: {
    name: "Composite",
    className: "ManagerPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const AccessControlRecordList: coreHttp.CompositeMapper = {
  serializedName: "AccessControlRecordList",
  type: {
    name: "Composite",
    className: "AccessControlRecordList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AccessControlRecord" }
          }
        }
      }
    }
  }
};

export const BaseModel: coreHttp.CompositeMapper = {
  serializedName: "BaseModel",
  type: {
    name: "Composite",
    className: "BaseModel",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessControlRecord: coreHttp.CompositeMapper = {
  serializedName: "AccessControlRecord",
  type: {
    name: "Composite",
    className: "AccessControlRecord",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      initiatorName: {
        serializedName: "properties.initiatorName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertList: coreHttp.CompositeMapper = {
  serializedName: "AlertList",
  type: {
    name: "Composite",
    className: "AlertList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Alert" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Alert: coreHttp.CompositeMapper = {
  serializedName: "Alert",
  type: {
    name: "Composite",
    className: "Alert",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      title: {
        serializedName: "properties.title",
        required: true,
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Resource", "Device"]
        }
      },
      alertType: {
        serializedName: "properties.alertType",
        required: true,
        type: {
          name: "String"
        }
      },
      appearedAtTime: {
        serializedName: "properties.appearedAtTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      appearedAtSourceTime: {
        serializedName: "properties.appearedAtSourceTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      clearedAtTime: {
        serializedName: "properties.clearedAtTime",
        type: {
          name: "DateTime"
        }
      },
      clearedAtSourceTime: {
        serializedName: "properties.clearedAtSourceTime",
        type: {
          name: "DateTime"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "AlertSource"
        }
      },
      recommendation: {
        serializedName: "properties.recommendation",
        type: {
          name: "String"
        }
      },
      resolutionReason: {
        serializedName: "properties.resolutionReason",
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "properties.severity",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Informational", "Warning", "Critical"]
        }
      },
      status: {
        serializedName: "properties.status",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Active", "Cleared"]
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Composite",
          className: "AlertErrorDetails"
        }
      },
      detailedInformation: {
        serializedName: "properties.detailedInformation",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const AlertSource: coreHttp.CompositeMapper = {
  serializedName: "AlertSource",
  type: {
    name: "Composite",
    className: "AlertSource",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      },
      alertSourceType: {
        serializedName: "alertSourceType",
        type: {
          name: "Enum",
          allowedValues: ["Resource", "Device"]
        }
      }
    }
  }
};

export const AlertErrorDetails: coreHttp.CompositeMapper = {
  serializedName: "AlertErrorDetails",
  type: {
    name: "Composite",
    className: "AlertErrorDetails",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      occurences: {
        serializedName: "occurences",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupList: coreHttp.CompositeMapper = {
  serializedName: "BackupList",
  type: {
    name: "Composite",
    className: "BackupList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Backup" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Backup: coreHttp.CompositeMapper = {
  serializedName: "Backup",
  type: {
    name: "Composite",
    className: "Backup",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      targetId: {
        serializedName: "properties.targetId",
        type: {
          name: "String"
        }
      },
      targetType: {
        serializedName: "properties.targetType",
        type: {
          name: "String"
        }
      },
      sizeInBytes: {
        serializedName: "properties.sizeInBytes",
        required: true,
        type: {
          name: "Number"
        }
      },
      createdTime: {
        serializedName: "properties.createdTime",
        type: {
          name: "DateTime"
        }
      },
      expirationTime: {
        serializedName: "properties.expirationTime",
        type: {
          name: "DateTime"
        }
      },
      initiatedBy: {
        serializedName: "properties.initiatedBy",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Manual", "Scheduled"]
        }
      },
      deviceId: {
        serializedName: "properties.deviceId",
        required: true,
        type: {
          name: "String"
        }
      },
      elements: {
        serializedName: "properties.elements",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "BackupElement" } }
        }
      }
    }
  }
};

export const BackupElement: coreHttp.CompositeMapper = {
  serializedName: "BackupElement",
  type: {
    name: "Composite",
    className: "BackupElement",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      sizeInBytes: {
        serializedName: "properties.sizeInBytes",
        required: true,
        type: {
          name: "Number"
        }
      },
      endpointName: {
        serializedName: "properties.endpointName",
        required: true,
        type: {
          name: "String"
        }
      },
      dataPolicy: {
        serializedName: "properties.dataPolicy",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Invalid", "Local", "Tiered", "Cloud"]
        }
      }
    }
  }
};

export const UploadCertificateRequest: coreHttp.CompositeMapper = {
  serializedName: "UploadCertificateRequest",
  type: {
    name: "Composite",
    className: "UploadCertificateRequest",
    modelProperties: {
      contractVersion: {
        serializedName: "contractVersion",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "InvalidVersion",
            "V2011_09",
            "V2012_02",
            "V2012_05",
            "V2012_12",
            "V2013_04",
            "V2013_10",
            "V2013_11",
            "V2014_04",
            "V2014_06",
            "V2014_07",
            "V2014_09",
            "V2014_10",
            "V2014_12",
            "V2015_01",
            "V2015_02",
            "V2015_04",
            "V2015_05",
            "V2015_06",
            "V2015_07",
            "V2015_08",
            "V2015_10",
            "V2015_12",
            "V2016_01",
            "V2016_02",
            "V2016_04",
            "V2016_05",
            "V2016_07",
            "V2016_08"
          ]
        }
      },
      authType: {
        serializedName: "properties.authType",
        type: {
          name: "Enum",
          allowedValues: [
            "Invalid",
            "AccessControlService",
            "AzureActiveDirectory"
          ]
        }
      },
      certificate: {
        serializedName: "properties.certificate",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UploadCertificateResponse: coreHttp.CompositeMapper = {
  serializedName: "UploadCertificateResponse",
  type: {
    name: "Composite",
    className: "UploadCertificateResponse",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      authType: {
        serializedName: "properties.authType",
        type: {
          name: "Enum",
          allowedValues: [
            "Invalid",
            "AccessControlService",
            "AzureActiveDirectory"
          ]
        }
      },
      certificate: {
        serializedName: "properties.certificate",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "properties.resourceId",
        required: true,
        type: {
          name: "Number"
        }
      },
      aadAuthority: {
        serializedName: "properties.aadAuthority",
        required: true,
        type: {
          name: "String"
        }
      },
      aadTenantId: {
        serializedName: "properties.aadTenantId",
        required: true,
        type: {
          name: "String"
        }
      },
      servicePrincipalClientId: {
        serializedName: "properties.servicePrincipalClientId",
        required: true,
        type: {
          name: "String"
        }
      },
      servicePrincipalObjectId: {
        serializedName: "properties.servicePrincipalObjectId",
        required: true,
        type: {
          name: "String"
        }
      },
      azureManagementEndpointAudience: {
        serializedName: "properties.azureManagementEndpointAudience",
        required: true,
        type: {
          name: "String"
        }
      },
      subject: {
        serializedName: "properties.subject",
        required: true,
        type: {
          name: "String"
        }
      },
      validFrom: {
        serializedName: "properties.validFrom",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      validTo: {
        serializedName: "properties.validTo",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        required: true,
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        required: true,
        type: {
          name: "String"
        }
      },
      issuer: {
        serializedName: "properties.issuer",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClearAlertRequest: coreHttp.CompositeMapper = {
  serializedName: "ClearAlertRequest",
  type: {
    name: "Composite",
    className: "ClearAlertRequest",
    modelProperties: {
      resolutionMessage: {
        serializedName: "resolutionMessage",
        type: {
          name: "String"
        }
      },
      alerts: {
        serializedName: "alerts",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ClearAlertRequestAlertsItem"
          }
        }
      }
    }
  }
};

export const DeviceList: coreHttp.CompositeMapper = {
  serializedName: "DeviceList",
  type: {
    name: "Composite",
    className: "DeviceList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Device" } }
        }
      }
    }
  }
};

export const Device: coreHttp.CompositeMapper = {
  serializedName: "Device",
  type: {
    name: "Composite",
    className: "Device",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      activationTime: {
        serializedName: "properties.activationTime",
        type: {
          name: "DateTime"
        }
      },
      allowedDeviceOperations: {
        serializedName: "properties.allowedDeviceOperations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "None",
                "Delete",
                "DeleteWithWarning",
                "DRSource",
                "DRTarget",
                "Browsable",
                "ReadOnlyForDR",
                "Deactivate"
              ]
            },
            serializedName: "DeviceOperation"
          }
        }
      },
      culture: {
        serializedName: "properties.culture",
        type: {
          name: "String"
        }
      },
      deviceCapabilities: {
        serializedName: "properties.deviceCapabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["Invalid", "FileServer", "IscsiServer"]
            },
            serializedName: "SupportedDeviceCapabilities"
          }
        }
      },
      deviceDescription: {
        serializedName: "properties.deviceDescription",
        type: {
          name: "String"
        }
      },
      domainName: {
        serializedName: "properties.domainName",
        type: {
          name: "String"
        }
      },
      deviceSoftwareVersion: {
        serializedName: "properties.deviceSoftwareVersion",
        type: {
          name: "String"
        }
      },
      friendlySoftwareName: {
        serializedName: "properties.friendlySoftwareName",
        type: {
          name: "String"
        }
      },
      deviceConfigurationStatus: {
        serializedName: "properties.deviceConfigurationStatus",
        type: {
          name: "Enum",
          allowedValues: ["Complete", "Pending"]
        }
      },
      modelDescription: {
        serializedName: "properties.modelDescription",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Unknown",
            "Online",
            "Offline",
            "RequiresAttention",
            "MaintenanceMode",
            "Creating",
            "Provisioning",
            "Deleted",
            "ReadyToSetup",
            "Deactivated",
            "Deactivating"
          ]
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "Enum",
          allowedValues: [
            "Invalid",
            "Appliance",
            "VirtualAppliance",
            "Series9000OnPremVirtualAppliance",
            "Series9000VirtualAppliance",
            "Series9000PhysicalAppliance"
          ]
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Composite",
          className: "DeviceDetails"
        }
      }
    }
  }
};

export const DeviceDetails: coreHttp.CompositeMapper = {
  serializedName: "DeviceDetails",
  type: {
    name: "Composite",
    className: "DeviceDetails",
    modelProperties: {
      endpointCount: {
        serializedName: "endpointCount",
        type: {
          name: "Number"
        }
      },
      totalStorageInBytes: {
        serializedName: "totalStorageInBytes",
        type: {
          name: "Number"
        }
      },
      totalLocalStorageInBytes: {
        serializedName: "totalLocalStorageInBytes",
        type: {
          name: "Number"
        }
      },
      provisionedStorageInBytes: {
        serializedName: "provisionedStorageInBytes",
        type: {
          name: "Number"
        }
      },
      provisionedLocalStorageInBytes: {
        serializedName: "provisionedLocalStorageInBytes",
        type: {
          name: "Number"
        }
      },
      usingStorageInBytes: {
        serializedName: "usingStorageInBytes",
        type: {
          name: "Number"
        }
      },
      usingLocalStorageInBytes: {
        serializedName: "usingLocalStorageInBytes",
        type: {
          name: "Number"
        }
      },
      totalBackupSizeInBytes: {
        serializedName: "totalBackupSizeInBytes",
        type: {
          name: "Number"
        }
      },
      availableStorageInBytes: {
        serializedName: "availableStorageInBytes",
        type: {
          name: "Number"
        }
      },
      availableLocalStorageInBytes: {
        serializedName: "availableLocalStorageInBytes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DevicePatch: coreHttp.CompositeMapper = {
  serializedName: "DevicePatch",
  type: {
    name: "Composite",
    className: "DevicePatch",
    modelProperties: {
      deviceDescription: {
        serializedName: "deviceDescription",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertSettings: coreHttp.CompositeMapper = {
  serializedName: "AlertSettings",
  type: {
    name: "Composite",
    className: "AlertSettings",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      emailNotification: {
        serializedName: "properties.emailNotification",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      notificationToServiceOwners: {
        serializedName: "properties.notificationToServiceOwners",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      alertNotificationCulture: {
        serializedName: "properties.alertNotificationCulture",
        required: true,
        type: {
          name: "String"
        }
      },
      additionalRecipientEmailList: {
        serializedName: "properties.additionalRecipientEmailList",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "AlertSettingsPropertiesAdditionalRecipientEmailListItem"
          }
        }
      }
    }
  }
};

export const CloneRequest: coreHttp.CompositeMapper = {
  serializedName: "CloneRequest",
  type: {
    name: "Composite",
    className: "CloneRequest",
    modelProperties: {
      targetDeviceId: {
        serializedName: "properties.targetDeviceId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetAccessPointId: {
        serializedName: "properties.targetAccessPointId",
        required: true,
        type: {
          name: "String"
        }
      },
      newEndpointName: {
        serializedName: "properties.newEndpointName",
        required: true,
        type: {
          name: "String"
        }
      },
      share: {
        serializedName: "share",
        type: {
          name: "Composite",
          className: "FileShare"
        }
      },
      disk: {
        serializedName: "disk",
        type: {
          name: "Composite",
          className: "IscsiDisk"
        }
      }
    }
  }
};

export const FileShare: coreHttp.CompositeMapper = {
  serializedName: "FileShare",
  type: {
    name: "Composite",
    className: "FileShare",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      shareStatus: {
        serializedName: "properties.shareStatus",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Online", "Offline"]
        }
      },
      dataPolicy: {
        serializedName: "properties.dataPolicy",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Invalid", "Local", "Tiered", "Cloud"]
        }
      },
      adminUser: {
        serializedName: "properties.adminUser",
        required: true,
        type: {
          name: "String"
        }
      },
      provisionedCapacityInBytes: {
        serializedName: "properties.provisionedCapacityInBytes",
        required: true,
        type: {
          name: "Number"
        }
      },
      usedCapacityInBytes: {
        serializedName: "properties.usedCapacityInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      localUsedCapacityInBytes: {
        serializedName: "properties.localUsedCapacityInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      monitoringStatus: {
        serializedName: "properties.monitoringStatus",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      }
    }
  }
};

export const IscsiDisk: coreHttp.CompositeMapper = {
  serializedName: "IscsiDisk",
  type: {
    name: "Composite",
    className: "IscsiDisk",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      diskStatus: {
        serializedName: "properties.diskStatus",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Online", "Offline"]
        }
      },
      accessControlRecords: {
        serializedName: "properties.accessControlRecords",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "IscsiDiskPropertiesAccessControlRecordsItem"
          }
        }
      },
      dataPolicy: {
        serializedName: "properties.dataPolicy",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Invalid", "Local", "Tiered", "Cloud"]
        }
      },
      provisionedCapacityInBytes: {
        serializedName: "properties.provisionedCapacityInBytes",
        required: true,
        type: {
          name: "Number"
        }
      },
      usedCapacityInBytes: {
        serializedName: "properties.usedCapacityInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      localUsedCapacityInBytes: {
        serializedName: "properties.localUsedCapacityInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      monitoringStatus: {
        serializedName: "properties.monitoringStatus",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      }
    }
  }
};

export const BackupScheduleGroupList: coreHttp.CompositeMapper = {
  serializedName: "BackupScheduleGroupList",
  type: {
    name: "Composite",
    className: "BackupScheduleGroupList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "BackupScheduleGroup" }
          }
        }
      }
    }
  }
};

export const BackupScheduleGroup: coreHttp.CompositeMapper = {
  serializedName: "BackupScheduleGroup",
  type: {
    name: "Composite",
    className: "BackupScheduleGroup",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      startTime: {
        serializedName: "startTime",
        type: {
          name: "Composite",
          className: "Time"
        }
      }
    }
  }
};

export const Time: coreHttp.CompositeMapper = {
  serializedName: "Time",
  type: {
    name: "Composite",
    className: "Time",
    modelProperties: {
      hour: {
        constraints: {
          InclusiveMaximum: 23
        },
        serializedName: "hour",
        required: true,
        type: {
          name: "Number"
        }
      },
      minute: {
        constraints: {
          InclusiveMaximum: 59
        },
        serializedName: "minute",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ChapSettingsList: coreHttp.CompositeMapper = {
  serializedName: "ChapSettingsList",
  type: {
    name: "Composite",
    className: "ChapSettingsList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ChapSettings" } }
        }
      }
    }
  }
};

export const ChapSettings: coreHttp.CompositeMapper = {
  serializedName: "ChapSettings",
  type: {
    name: "Composite",
    className: "ChapSettings",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      password: {
        serializedName: "password",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      }
    }
  }
};

export const AsymmetricEncryptedSecret: coreHttp.CompositeMapper = {
  serializedName: "AsymmetricEncryptedSecret",
  type: {
    name: "Composite",
    className: "AsymmetricEncryptedSecret",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      encryptionCertificateThumbprint: {
        serializedName: "encryptionCertificateThumbprint",
        type: {
          name: "String"
        }
      },
      encryptionAlgorithm: {
        serializedName: "encryptionAlgorithm",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["None", "AES256", "RSAES_PKCS1_v_1_5"]
        }
      }
    }
  }
};

export const IscsiDiskList: coreHttp.CompositeMapper = {
  serializedName: "IscsiDiskList",
  type: {
    name: "Composite",
    className: "IscsiDiskList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IscsiDisk" } }
        }
      }
    }
  }
};

export const FailoverRequest: coreHttp.CompositeMapper = {
  serializedName: "FailoverRequest",
  type: {
    name: "Composite",
    className: "FailoverRequest",
    modelProperties: {
      accesspointIds: {
        serializedName: "accesspointIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "FailoverRequestAccesspointIdsItem"
          }
        }
      },
      targetDeviceId: {
        serializedName: "targetDeviceId",
        type: {
          name: "String"
        }
      },
      skipValidation: {
        serializedName: "skipValidation",
        type: {
          name: "Boolean"
        }
      },
      keepSourceDevice: {
        serializedName: "keepSourceDevice",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FileServerList: coreHttp.CompositeMapper = {
  serializedName: "FileServerList",
  type: {
    name: "Composite",
    className: "FileServerList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FileServer" } }
        }
      }
    }
  }
};

export const FileServer: coreHttp.CompositeMapper = {
  serializedName: "FileServer",
  type: {
    name: "Composite",
    className: "FileServer",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      domainName: {
        serializedName: "properties.domainName",
        required: true,
        type: {
          name: "String"
        }
      },
      storageDomainId: {
        serializedName: "properties.storageDomainId",
        required: true,
        type: {
          name: "String"
        }
      },
      backupScheduleGroupId: {
        serializedName: "properties.backupScheduleGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricList: coreHttp.CompositeMapper = {
  serializedName: "MetricList",
  type: {
    name: "Composite",
    className: "MetricList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Metrics" } }
        }
      }
    }
  }
};

export const Metrics: coreHttp.CompositeMapper = {
  serializedName: "Metrics",
  type: {
    name: "Composite",
    className: "Metrics",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        serializedName: "timeGrain",
        required: true,
        type: {
          name: "String"
        }
      },
      primaryAggregation: {
        serializedName: "primaryAggregation",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Average",
            "Last",
            "Maximum",
            "Minimum",
            "None",
            "Total"
          ]
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetricDimension" } }
        }
      },
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Bytes",
            "BytesPerSecond",
            "Count",
            "CountPerSecond",
            "Percent",
            "Seconds"
          ]
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetricData" } }
        }
      }
    }
  }
};

export const MetricName: coreHttp.CompositeMapper = {
  serializedName: "MetricName",
  type: {
    name: "Composite",
    className: "MetricName",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricDimension: coreHttp.CompositeMapper = {
  serializedName: "MetricDimension",
  type: {
    name: "Composite",
    className: "MetricDimension",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricData: coreHttp.CompositeMapper = {
  serializedName: "MetricData",
  type: {
    name: "Composite",
    className: "MetricData",
    modelProperties: {
      timeStamp: {
        serializedName: "timeStamp",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      sum: {
        serializedName: "sum",
        required: true,
        type: {
          name: "Number"
        }
      },
      count: {
        serializedName: "count",
        required: true,
        type: {
          name: "Number"
        }
      },
      average: {
        serializedName: "average",
        required: true,
        type: {
          name: "Number"
        }
      },
      minimum: {
        serializedName: "minimum",
        required: true,
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MetricDefinitionList: coreHttp.CompositeMapper = {
  serializedName: "MetricDefinitionList",
  type: {
    name: "Composite",
    className: "MetricDefinitionList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricDefinition" }
          }
        }
      }
    }
  }
};

export const MetricDefinition: coreHttp.CompositeMapper = {
  serializedName: "MetricDefinition",
  type: {
    name: "Composite",
    className: "MetricDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Bytes",
            "BytesPerSecond",
            "Count",
            "CountPerSecond",
            "Percent",
            "Seconds"
          ]
        }
      },
      primaryAggregationType: {
        serializedName: "primaryAggregationType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Average",
            "Last",
            "Maximum",
            "Minimum",
            "None",
            "Total"
          ]
        }
      },
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      metricAvailabilities: {
        serializedName: "metricAvailabilities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricAvailablity" }
          }
        }
      },
      dimensions: {
        serializedName: "dimensions",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetricDimension" } }
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricAvailablity: coreHttp.CompositeMapper = {
  serializedName: "MetricAvailablity",
  type: {
    name: "Composite",
    className: "MetricAvailablity",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        required: true,
        type: {
          name: "String"
        }
      },
      retention: {
        serializedName: "retention",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileShareList: coreHttp.CompositeMapper = {
  serializedName: "FileShareList",
  type: {
    name: "Composite",
    className: "FileShareList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FileShare" } }
        }
      }
    }
  }
};

export const IscsiServerList: coreHttp.CompositeMapper = {
  serializedName: "IscsiServerList",
  type: {
    name: "Composite",
    className: "IscsiServerList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IscsiServer" } }
        }
      }
    }
  }
};

export const IscsiServer: coreHttp.CompositeMapper = {
  serializedName: "IscsiServer",
  type: {
    name: "Composite",
    className: "IscsiServer",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      storageDomainId: {
        serializedName: "properties.storageDomainId",
        required: true,
        type: {
          name: "String"
        }
      },
      backupScheduleGroupId: {
        serializedName: "properties.backupScheduleGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      chapId: {
        serializedName: "properties.chapId",
        type: {
          name: "String"
        }
      },
      reverseChapId: {
        serializedName: "properties.reverseChapId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobList: coreHttp.CompositeMapper = {
  serializedName: "JobList",
  type: {
    name: "Composite",
    className: "JobList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Job" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Job: coreHttp.CompositeMapper = {
  serializedName: "Job",
  type: {
    name: "Composite",
    className: "Job",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Invalid",
            "Running",
            "Succeeded",
            "Failed",
            "Canceled",
            "Paused",
            "Scheduled"
          ]
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      percentComplete: {
        serializedName: "percentComplete",
        required: true,
        type: {
          name: "Number"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "JobErrorDetails"
        }
      },
      jobType: {
        serializedName: "properties.jobType",
        type: {
          name: "Enum",
          allowedValues: [
            "Backup",
            "Clone",
            "Failover",
            "DownloadUpdates",
            "InstallUpdates"
          ]
        }
      },
      targetId: {
        serializedName: "properties.targetId",
        type: {
          name: "String"
        }
      },
      entityId: {
        serializedName: "properties.entityId",
        type: {
          name: "String"
        }
      },
      entityType: {
        serializedName: "properties.entityType",
        type: {
          name: "String"
        }
      },
      jobStages: {
        serializedName: "properties.jobStages",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobStage" } }
        }
      },
      deviceId: {
        serializedName: "properties.deviceId",
        type: {
          name: "String"
        }
      },
      isCancellable: {
        serializedName: "properties.isCancellable",
        type: {
          name: "Boolean"
        }
      },
      stats: {
        serializedName: "stats",
        type: {
          name: "Composite",
          className: "JobStats"
        }
      },
      targetType: {
        serializedName: "properties.targetType",
        type: {
          name: "Enum",
          allowedValues: ["FileServer", "DiskServer"]
        }
      },
      sourceDeviceId: {
        serializedName: "properties.sourceDeviceId",
        type: {
          name: "String"
        }
      },
      backupPointInTime: {
        serializedName: "properties.backupPointInTime",
        type: {
          name: "DateTime"
        }
      },
      downloadProgress: {
        serializedName: "downloadProgress",
        type: {
          name: "Composite",
          className: "UpdateDownloadProgress"
        }
      },
      installProgress: {
        serializedName: "installProgress",
        type: {
          name: "Composite",
          className: "UpdateInstallProgress"
        }
      }
    }
  }
};

export const JobErrorDetails: coreHttp.CompositeMapper = {
  serializedName: "JobErrorDetails",
  type: {
    name: "Composite",
    className: "JobErrorDetails",
    modelProperties: {
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobErrorItem" } }
        }
      },
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobErrorItem: coreHttp.CompositeMapper = {
  serializedName: "JobErrorItem",
  type: {
    name: "Composite",
    className: "JobErrorItem",
    modelProperties: {
      recommendations: {
        serializedName: "recommendations",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "JobErrorItemRecommendationsItem"
          }
        }
      },
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStage: coreHttp.CompositeMapper = {
  serializedName: "JobStage",
  type: {
    name: "Composite",
    className: "JobStage",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      stageStatus: {
        serializedName: "stageStatus",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Invalid",
            "Running",
            "Succeeded",
            "Failed",
            "Canceled",
            "Paused",
            "Scheduled"
          ]
        }
      },
      detail: {
        serializedName: "detail",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStats: coreHttp.CompositeMapper = {
  serializedName: "JobStats",
  type: {
    name: "Composite",
    className: "JobStats",
    modelProperties: {
      completedWorkItemCount: {
        serializedName: "completedWorkItemCount",
        type: {
          name: "Number"
        }
      },
      totalWorkItemCount: {
        serializedName: "totalWorkItemCount",
        type: {
          name: "Number"
        }
      },
      estimatedTimeRemaining: {
        serializedName: "estimatedTimeRemaining",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateDownloadProgress: coreHttp.CompositeMapper = {
  serializedName: "UpdateDownloadProgress",
  type: {
    name: "Composite",
    className: "UpdateDownloadProgress",
    modelProperties: {
      downloadPhase: {
        serializedName: "downloadPhase",
        type: {
          name: "Enum",
          allowedValues: ["Unknown", "Initializing", "Downloading", "Verifying"]
        }
      },
      percentComplete: {
        serializedName: "percentComplete",
        type: {
          name: "Number"
        }
      },
      totalBytesToDownload: {
        serializedName: "totalBytesToDownload",
        type: {
          name: "Number"
        }
      },
      totalBytesDownloaded: {
        serializedName: "totalBytesDownloaded",
        type: {
          name: "Number"
        }
      },
      numberOfUpdatesToDownload: {
        serializedName: "numberOfUpdatesToDownload",
        type: {
          name: "Number"
        }
      },
      numberOfUpdatesDownloaded: {
        serializedName: "numberOfUpdatesDownloaded",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateInstallProgress: coreHttp.CompositeMapper = {
  serializedName: "UpdateInstallProgress",
  type: {
    name: "Composite",
    className: "UpdateInstallProgress",
    modelProperties: {
      percentComplete: {
        serializedName: "percentComplete",
        type: {
          name: "Number"
        }
      },
      numberOfUpdatesToInstall: {
        serializedName: "numberOfUpdatesToInstall",
        type: {
          name: "Number"
        }
      },
      numberOfUpdatesInstalled: {
        serializedName: "numberOfUpdatesInstalled",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NetworkSettings: coreHttp.CompositeMapper = {
  serializedName: "NetworkSettings",
  type: {
    name: "Composite",
    className: "NetworkSettings",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      primaryDnsServer: {
        serializedName: "properties.primaryDnsServer",
        required: true,
        type: {
          name: "String"
        }
      },
      secondaryDnsServer: {
        serializedName: "properties.secondaryDnsServer",
        type: {
          name: "String"
        }
      },
      nodeNetworks: {
        serializedName: "properties.nodeNetworks",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NodeNetwork" } }
        }
      }
    }
  }
};

export const NodeNetwork: coreHttp.CompositeMapper = {
  serializedName: "NodeNetwork",
  type: {
    name: "Composite",
    className: "NodeNetwork",
    modelProperties: {
      networkAdapters: {
        serializedName: "networkAdapters",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkAdapter" } }
        }
      }
    }
  }
};

export const NetworkAdapter: coreHttp.CompositeMapper = {
  serializedName: "NetworkAdapter",
  type: {
    name: "Composite",
    className: "NetworkAdapter",
    modelProperties: {
      networkAdapterName: {
        serializedName: "networkAdapterName",
        required: true,
        type: {
          name: "String"
        }
      },
      iPv4Info: {
        serializedName: "iPv4Info",
        type: {
          name: "Composite",
          className: "IPConfig"
        }
      },
      iPv6Info: {
        serializedName: "iPv6Info",
        type: {
          name: "Composite",
          className: "IPConfig"
        }
      },
      dhcpStatus: {
        serializedName: "dhcpStatus",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      linkSpeed: {
        serializedName: "linkSpeed",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IPConfig: coreHttp.CompositeMapper = {
  serializedName: "IPConfig",
  type: {
    name: "Composite",
    className: "IPConfig",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      prefixLength: {
        serializedName: "prefixLength",
        type: {
          name: "Number"
        }
      },
      gateway: {
        serializedName: "gateway",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecuritySettings: coreHttp.CompositeMapper = {
  serializedName: "SecuritySettings",
  type: {
    name: "Composite",
    className: "SecuritySettings",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      deviceAdminPassword: {
        serializedName: "deviceAdminPassword",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      }
    }
  }
};

export const SendTestAlertEmailRequest: coreHttp.CompositeMapper = {
  serializedName: "SendTestAlertEmailRequest",
  type: {
    name: "Composite",
    className: "SendTestAlertEmailRequest",
    modelProperties: {
      emailList: {
        serializedName: "emailList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SendTestAlertEmailRequestEmailListItem"
          }
        }
      }
    }
  }
};

export const TimeSettings: coreHttp.CompositeMapper = {
  serializedName: "TimeSettings",
  type: {
    name: "Composite",
    className: "TimeSettings",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      timeZone: {
        serializedName: "properties.timeZone",
        required: true,
        type: {
          name: "String"
        }
      },
      primaryTimeServer: {
        serializedName: "properties.primaryTimeServer",
        required: true,
        type: {
          name: "String"
        }
      },
      secondaryTimeServer: {
        serializedName: "properties.secondaryTimeServer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Updates: coreHttp.CompositeMapper = {
  serializedName: "Updates",
  type: {
    name: "Composite",
    className: "Updates",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      deviceVersion: {
        serializedName: "properties.deviceVersion",
        type: {
          name: "String"
        }
      },
      deviceLastScannedTime: {
        serializedName: "properties.deviceLastScannedTime",
        type: {
          name: "DateTime"
        }
      },
      regularUpdatesAvailable: {
        serializedName: "properties.regularUpdatesAvailable",
        type: {
          name: "Boolean"
        }
      },
      rebootRequiredForInstall: {
        serializedName: "properties.rebootRequiredForInstall",
        type: {
          name: "Boolean"
        }
      },
      totalItemsPendingForDownload: {
        serializedName: "properties.totalItemsPendingForDownload",
        type: {
          name: "Number"
        }
      },
      totalItemsPendingForInstall: {
        serializedName: "properties.totalItemsPendingForInstall",
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: ["Idle", "Scanning", "Downloading", "Installing"]
        }
      },
      lastCompletedScanTime: {
        serializedName: "properties.lastCompletedScanTime",
        type: {
          name: "DateTime"
        }
      },
      lastCompletedDownloadJobTime: {
        serializedName: "properties.lastCompletedDownloadJobTime",
        type: {
          name: "DateTime"
        }
      },
      lastCompletedInstallJobTime: {
        serializedName: "properties.lastCompletedInstallJobTime",
        type: {
          name: "DateTime"
        }
      },
      inProgressDownloadJobId: {
        serializedName: "properties.inProgressDownloadJobId",
        type: {
          name: "String"
        }
      },
      inProgressInstallJobId: {
        serializedName: "properties.inProgressInstallJobId",
        type: {
          name: "String"
        }
      },
      inProgressScanStartedTime: {
        serializedName: "properties.inProgressScanStartedTime",
        type: {
          name: "DateTime"
        }
      },
      inProgressDownloadJobStartedTime: {
        serializedName: "properties.inProgressDownloadJobStartedTime",
        type: {
          name: "DateTime"
        }
      },
      inProgressInstallJobStartedTime: {
        serializedName: "properties.inProgressInstallJobStartedTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EncryptionSettings: coreHttp.CompositeMapper = {
  serializedName: "EncryptionSettings",
  type: {
    name: "Composite",
    className: "EncryptionSettings",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      encryptionStatus: {
        serializedName: "properties.encryptionStatus",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      keyRolloverStatus: {
        serializedName: "properties.keyRolloverStatus",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Required", "NotRequired"]
        }
      }
    }
  }
};

export const ManagerExtendedInfo: coreHttp.CompositeMapper = {
  serializedName: "ManagerExtendedInfo",
  type: {
    name: "Composite",
    className: "ManagerExtendedInfo",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      integrityKey: {
        serializedName: "properties.integrityKey",
        required: true,
        type: {
          name: "String"
        }
      },
      encryptionKey: {
        serializedName: "properties.encryptionKey",
        type: {
          name: "String"
        }
      },
      encryptionKeyThumbprint: {
        serializedName: "properties.encryptionKeyThumbprint",
        type: {
          name: "String"
        }
      },
      portalCertificateThumbprint: {
        serializedName: "properties.portalCertificateThumbprint",
        type: {
          name: "String"
        }
      },
      algorithm: {
        serializedName: "properties.algorithm",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SymmetricEncryptedSecret: coreHttp.CompositeMapper = {
  serializedName: "SymmetricEncryptedSecret",
  type: {
    name: "Composite",
    className: "SymmetricEncryptedSecret",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      valueCertificateThumbprint: {
        serializedName: "valueCertificateThumbprint",
        type: {
          name: "String"
        }
      },
      encryptionAlgorithm: {
        serializedName: "encryptionAlgorithm",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["None", "AES256", "RSAES_PKCS1_v_1_5"]
        }
      }
    }
  }
};

export const StorageAccountCredentialList: coreHttp.CompositeMapper = {
  serializedName: "StorageAccountCredentialList",
  type: {
    name: "Composite",
    className: "StorageAccountCredentialList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "StorageAccountCredential" }
          }
        }
      }
    }
  }
};

export const StorageAccountCredential: coreHttp.CompositeMapper = {
  serializedName: "StorageAccountCredential",
  type: {
    name: "Composite",
    className: "StorageAccountCredential",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      cloudType: {
        serializedName: "properties.cloudType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Azure", "S3", "S3_RRS", "OpenStack", "HP"]
        }
      },
      endPoint: {
        serializedName: "properties.endPoint",
        required: true,
        type: {
          name: "String"
        }
      },
      login: {
        serializedName: "properties.login",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "properties.location",
        type: {
          name: "String"
        }
      },
      enableSSL: {
        serializedName: "properties.enableSSL",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      accessKey: {
        serializedName: "accessKey",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      }
    }
  }
};

export const StorageDomainList: coreHttp.CompositeMapper = {
  serializedName: "StorageDomainList",
  type: {
    name: "Composite",
    className: "StorageDomainList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "StorageDomain" } }
        }
      }
    }
  }
};

export const StorageDomain: coreHttp.CompositeMapper = {
  serializedName: "StorageDomain",
  type: {
    name: "Composite",
    className: "StorageDomain",
    modelProperties: {
      ...BaseModel.type.modelProperties,
      storageAccountCredentialIds: {
        serializedName: "properties.storageAccountCredentialIds",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "StorageDomainPropertiesStorageAccountCredentialIdsItem"
          }
        }
      },
      encryptionKey: {
        serializedName: "encryptionKey",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      },
      encryptionStatus: {
        serializedName: "properties.encryptionStatus",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      }
    }
  }
};

export const AlertFilter: coreHttp.CompositeMapper = {
  serializedName: "AlertFilter",
  type: {
    name: "Composite",
    className: "AlertFilter",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: ["Active", "Cleared"]
        }
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "Enum",
          allowedValues: ["Informational", "Warning", "Critical"]
        }
      },
      sourceType: {
        serializedName: "sourceType",
        type: {
          name: "Enum",
          allowedValues: ["Resource", "Device"]
        }
      },
      sourceName: {
        serializedName: "sourceName",
        type: {
          name: "String"
        }
      },
      appearedOnTime: {
        serializedName: "appearedOnTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const BackupFilter: coreHttp.CompositeMapper = {
  serializedName: "BackupFilter",
  type: {
    name: "Composite",
    className: "BackupFilter",
    modelProperties: {
      initiatedBy: {
        serializedName: "initiatedBy",
        type: {
          name: "Enum",
          allowedValues: ["Manual", "Scheduled"]
        }
      },
      createdTime: {
        serializedName: "createdTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const JobFilter: coreHttp.CompositeMapper = {
  serializedName: "JobFilter",
  type: {
    name: "Composite",
    className: "JobFilter",
    modelProperties: {
      jobType: {
        serializedName: "jobType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Backup",
            "Clone",
            "Failover",
            "DownloadUpdates",
            "InstallUpdates"
          ]
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Invalid",
            "Running",
            "Succeeded",
            "Failed",
            "Canceled",
            "Paused",
            "Scheduled"
          ]
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MetricFilter: coreHttp.CompositeMapper = {
  serializedName: "MetricFilter",
  type: {
    name: "Composite",
    className: "MetricFilter",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricNameFilter"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricNameFilter: coreHttp.CompositeMapper = {
  serializedName: "MetricNameFilter",
  type: {
    name: "Composite",
    className: "MetricNameFilter",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};
