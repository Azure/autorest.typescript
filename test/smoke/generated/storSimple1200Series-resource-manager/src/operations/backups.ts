/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorSimpleManagementClient } from "../storSimpleManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  BackupsListByManagerOptionalParams,
  BackupsListByManagerResponse,
  BackupsListByDeviceOptionalParams,
  BackupsListByDeviceResponse,
  CloneRequest,
  BackupsListByManagerNextOptionalParams,
  BackupsListByManagerNextResponse,
  BackupsListByDeviceNextOptionalParams,
  BackupsListByDeviceNextResponse
} from "../models";

/**
 * Class representing a Backups.
 */
export class Backups {
  private readonly client: StorSimpleManagementClient;

  /**
   * Initialize a new instance of the class Backups class.
   * @param client Reference to the service client
   */
  constructor(client: StorSimpleManagementClient) {
    this.client = client;
  }

  /**
   * Retrieves all the backups in a manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  listByManager(
    resourceGroupName: string,
    managerName: string,
    options?: BackupsListByManagerOptionalParams
  ): Promise<BackupsListByManagerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, options: operationOptions },
      listByManagerOperationSpec
    ) as Promise<BackupsListByManagerResponse>;
  }

  /**
   * Retrieves all the backups in a device. Can be used to get the backups for failover also.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param options The options parameters.
   */
  listByDevice(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: BackupsListByDeviceOptionalParams
  ): Promise<BackupsListByDeviceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, deviceName, options: operationOptions },
      listByDeviceOperationSpec
    ) as Promise<BackupsListByDeviceResponse>;
  }

  /**
   * Deletes the backup.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param backupName The backup name.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    backupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      backupName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Clones the given backup element to a new disk or share with given details.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param backupName The backup name.
   * @param cloneRequest The clone request.
   * @param elementName The backup element name.
   * @param options The options parameters.
   */
  async clone(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    backupName: string,
    cloneRequest: CloneRequest,
    elementName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      backupName,
      cloneRequest,
      elementName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      cloneOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: cloneOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListByManagerNext
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param nextLink The nextLink from the previous successful call to the ListByManager method.
   * @param options The options parameters.
   */
  listByManagerNext(
    resourceGroupName: string,
    managerName: string,
    nextLink: string,
    options?: BackupsListByManagerNextOptionalParams
  ): Promise<BackupsListByManagerNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, nextLink, options: operationOptions },
      listByManagerNextOperationSpec
    ) as Promise<BackupsListByManagerNextResponse>;
  }

  /**
   * ListByDeviceNext
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param nextLink The nextLink from the previous successful call to the ListByDevice method.
   * @param options The options parameters.
   */
  listByDeviceNext(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    nextLink: string,
    options?: BackupsListByDeviceNextOptionalParams
  ): Promise<BackupsListByDeviceNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managerName,
        deviceName,
        nextLink,
        options: operationOptions
      },
      listByDeviceNextOperationSpec
    ) as Promise<BackupsListByDeviceNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByManagerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/backups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  serializer
};
const listByDeviceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.forFailover
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups/{backupName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName,
    Parameters.backupName
  ],
  serializer
};
const cloneOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups/{backupName}/elements/{elementName}/clone",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.cloneRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName,
    Parameters.backupName,
    Parameters.elementName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByManagerNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.nextLink1
  ],
  serializer
};
const listByDeviceNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.forFailover
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName,
    Parameters.nextLink2
  ],
  serializer
};
