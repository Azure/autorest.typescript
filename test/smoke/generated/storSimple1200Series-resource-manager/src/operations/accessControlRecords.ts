/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorSimpleManagementClient } from "../storSimpleManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  AccessControlRecordsListByManagerResponse,
  AccessControlRecordsGetResponse,
  AccessControlRecord,
  AccessControlRecordsCreateOrUpdateResponse
} from "../models";

/**
 * Class representing a AccessControlRecords.
 */
export class AccessControlRecords {
  private readonly client: StorSimpleManagementClient;

  /**
   * Initialize a new instance of the class AccessControlRecords class.
   * @param client Reference to the service client
   */
  constructor(client: StorSimpleManagementClient) {
    this.client = client;
  }

  /**
   * Retrieves all the access control records in a manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  listByManager(
    resourceGroupName: string,
    managerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AccessControlRecordsListByManagerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, options: operationOptions },
      listByManagerOperationSpec
    ) as Promise<AccessControlRecordsListByManagerResponse>;
  }

  /**
   * Returns the properties of the specified access control record name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param accessControlRecordName Name of access control record to be fetched.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    managerName: string,
    accessControlRecordName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AccessControlRecordsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managerName,
        accessControlRecordName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<AccessControlRecordsGetResponse>;
  }

  /**
   * Creates or Updates an access control record.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param accessControlRecord The access control record to be added or updated.
   * @param accessControlRecordName The name of the access control record.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    managerName: string,
    accessControlRecord: AccessControlRecord,
    accessControlRecordName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<AccessControlRecordsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      accessControlRecord,
      accessControlRecordName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        AccessControlRecordsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes the access control record.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param accessControlRecordName The name of the access control record to delete.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    managerName: string,
    accessControlRecordName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      accessControlRecordName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByManagerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessControlRecordList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessControlRecord
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.accessControlRecordName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AccessControlRecord
    },
    201: {
      bodyMapper: Mappers.AccessControlRecord
    },
    202: {
      bodyMapper: Mappers.AccessControlRecord
    },
    204: {
      bodyMapper: Mappers.AccessControlRecord
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.accessControlRecord,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.accessControlRecordName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.accessControlRecordName2
  ],
  serializer
};
