/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorSimpleManagementClient } from "../storSimpleManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  DevicesListByManagerOptionalParams,
  DevicesListByManagerResponse,
  DevicesGetOptionalParams,
  DevicesGetResponse,
  DevicePatch,
  DevicesPatchResponse,
  DevicesGetAlertSettingsResponse,
  AlertSettings,
  DevicesCreateOrUpdateAlertSettingsResponse,
  FailoverRequest,
  DevicesListFailoverTargetOptionalParams,
  DevicesListFailoverTargetResponse,
  DevicesListMetricsOptionalParams,
  DevicesListMetricsResponse,
  DevicesListMetricDefinitionResponse,
  DevicesGetNetworkSettingsResponse,
  SecuritySettings,
  DevicesGetTimeSettingsResponse,
  DevicesGetUpdateSummaryResponse
} from "../models";

/**
 * Class representing a Devices.
 */
export class Devices {
  private readonly client: StorSimpleManagementClient;

  /**
   * Initialize a new instance of the class Devices class.
   * @param client Reference to the service client
   */
  constructor(client: StorSimpleManagementClient) {
    this.client = client;
  }

  /**
   * Retrieves all the devices in a manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  listByManager(
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListByManagerOptionalParams
  ): Promise<DevicesListByManagerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, options: operationOptions },
      listByManagerOperationSpec
    ) as Promise<DevicesListByManagerResponse>;
  }

  /**
   * Returns the properties of the specified device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: DevicesGetOptionalParams
  ): Promise<DevicesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, deviceName, options: operationOptions },
      getOperationSpec
    ) as Promise<DevicesGetResponse>;
  }

  /**
   * Deletes the device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Patches the device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param devicePatch Patch representation of the device.
   * @param deviceName The device Name.
   * @param options The options parameters.
   */
  async patch(
    resourceGroupName: string,
    managerName: string,
    devicePatch: DevicePatch,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<DevicesPatchResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      devicePatch,
      deviceName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        DevicesPatchResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      patchOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: patchOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Returns the alert settings of the specified device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param options The options parameters.
   */
  getAlertSettings(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetAlertSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, deviceName, options: operationOptions },
      getAlertSettingsOperationSpec
    ) as Promise<DevicesGetAlertSettingsResponse>;
  }

  /**
   * Creates or updates the alert settings
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param alertSettings The alert settings.
   * @param options The options parameters.
   */
  async createOrUpdateAlertSettings(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    alertSettings: AlertSettings,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<DevicesCreateOrUpdateAlertSettingsResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      alertSettings,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        DevicesCreateOrUpdateAlertSettingsResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateAlertSettingsOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateAlertSettingsOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deactivates the device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param options The options parameters.
   */
  async deactivate(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deactivateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deactivateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Downloads updates on the device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param options The options parameters.
   */
  async downloadUpdates(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      downloadUpdatesOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: downloadUpdatesOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Fails over the device to another device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param failoverRequest The failover request.
   * @param options The options parameters.
   */
  async failover(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    failoverRequest: FailoverRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      failoverRequest,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      failoverOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: failoverOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Retrieves all the devices which can be used as failover targets for the given device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param options The options parameters.
   */
  listFailoverTarget(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: DevicesListFailoverTargetOptionalParams
  ): Promise<DevicesListFailoverTargetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, deviceName, options: operationOptions },
      listFailoverTargetOperationSpec
    ) as Promise<DevicesListFailoverTargetResponse>;
  }

  /**
   * Installs the updates on the device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param options The options parameters.
   */
  async installUpdates(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      installUpdatesOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: installUpdatesOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Retrieves the device metrics.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The name of the appliance.
   * @param options The options parameters.
   */
  listMetrics(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: DevicesListMetricsOptionalParams
  ): Promise<DevicesListMetricsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, deviceName, options: operationOptions },
      listMetricsOperationSpec
    ) as Promise<DevicesListMetricsResponse>;
  }

  /**
   * Retrieves metric definition of all metrics aggregated at device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The name of the appliance.
   * @param options The options parameters.
   */
  listMetricDefinition(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesListMetricDefinitionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, deviceName, options: operationOptions },
      listMetricDefinitionOperationSpec
    ) as Promise<DevicesListMetricDefinitionResponse>;
  }

  /**
   * Returns the network settings of the specified device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param options The options parameters.
   */
  getNetworkSettings(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetNetworkSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, deviceName, options: operationOptions },
      getNetworkSettingsOperationSpec
    ) as Promise<DevicesGetNetworkSettingsResponse>;
  }

  /**
   * Scans for updates on the device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param options The options parameters.
   */
  async scanForUpdates(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      scanForUpdatesOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: scanForUpdatesOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Creates or updates the security settings.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param securitySettings The security settings.
   * @param options The options parameters.
   */
  async createOrUpdateSecuritySettings(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    securitySettings: SecuritySettings,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      securitySettings,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateSecuritySettingsOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateSecuritySettingsOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Returns the time settings of the specified device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param options The options parameters.
   */
  getTimeSettings(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetTimeSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, deviceName, options: operationOptions },
      getTimeSettingsOperationSpec
    ) as Promise<DevicesGetTimeSettingsResponse>;
  }

  /**
   * Returns the update summary of the specified device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name.
   * @param options The options parameters.
   */
  getUpdateSummary(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetUpdateSummaryResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, deviceName, options: operationOptions },
      getUpdateSummaryOperationSpec
    ) as Promise<DevicesGetUpdateSummaryResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByManagerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Device
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const patchOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Device
    },
    201: {
      bodyMapper: Mappers.Device
    },
    202: {
      bodyMapper: Mappers.Device
    },
    204: {
      bodyMapper: Mappers.Device
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.devicePatch,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getAlertSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertSettings
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const createOrUpdateAlertSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AlertSettings
    },
    201: {
      bodyMapper: Mappers.AlertSettings
    },
    202: {
      bodyMapper: Mappers.AlertSettings
    },
    204: {
      bodyMapper: Mappers.AlertSettings
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.alertSettings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deactivateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/deactivate",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const downloadUpdatesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/download",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const failoverOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/failover",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.failoverRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listFailoverTargetOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/failoverTargets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const installUpdatesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/install",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const listMetricsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/metrics",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName2
  ],
  serializer
};
const listMetricDefinitionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/metricsDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName2
  ],
  serializer
};
const getNetworkSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/networkSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSettings
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const scanForUpdatesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/scanForUpdates",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const createOrUpdateSecuritySettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default/update",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.securitySettings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getTimeSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/timeSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TimeSettings
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const getUpdateSummaryOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/updateSummary/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Updates
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
