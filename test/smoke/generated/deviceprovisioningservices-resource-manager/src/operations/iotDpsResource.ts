/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { IotDpsClient } from "../iotDpsClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  IotDpsResourceGetResponse,
  ProvisioningServiceDescription,
  IotDpsResourceCreateOrUpdateResponse,
  TagsResource,
  IotDpsResourceUpdateResponse,
  IotDpsResourceListBySubscriptionResponse,
  IotDpsResourceListByResourceGroupResponse,
  IotDpsResourceGetOperationResultResponse,
  IotDpsResourceListValidSkusResponse,
  OperationInputs,
  IotDpsResourceCheckProvisioningServiceNameAvailabilityResponse,
  IotDpsResourceListKeysResponse,
  IotDpsResourceListKeysForKeyNameResponse,
  IotDpsResourceListBySubscriptionNextResponse,
  IotDpsResourceListByResourceGroupNextResponse,
  IotDpsResourceListValidSkusNextResponse,
  IotDpsResourceListKeysNextResponse
} from "../models";

/**
 * Class representing a IotDpsResource.
 */
export class IotDpsResource {
  private readonly client: IotDpsClient;

  /**
   * Initialize a new instance of the class IotDpsResource class.
   * @param client Reference to the service client
   */
  constructor(client: IotDpsClient) {
    this.client = client;
  }

  /**
   * Get the metadata of the provisioning service without SAS keys.
   * @param resourceGroupName Resource group name.
   * @param provisioningServiceName Name of the provisioning service to retrieve.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    provisioningServiceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<IotDpsResourceGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, provisioningServiceName, options: operationOptions },
      getOperationSpec
    ) as Promise<IotDpsResourceGetResponse>;
  }

  /**
   * Create or update the metadata of the provisioning service. The usual pattern to modify a property is
   * to retrieve the provisioning service metadata and security metadata, and then combine them with the
   * modified values in a new body to update the provisioning service.
   * @param resourceGroupName Resource group identifier.
   * @param iotDpsDescription Description of the provisioning service to create or update.
   * @param provisioningServiceName Name of provisioning service to create or update.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    iotDpsDescription: ProvisioningServiceDescription,
    provisioningServiceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<IotDpsResourceCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      iotDpsDescription,
      provisioningServiceName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        IotDpsResourceCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Update an existing provisioning service's tags. to update other fields use the CreateOrUpdate method
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of provisioning service to create or update.
   * @param provisioningServiceTags Updated tag information to set into the provisioning service
   *                                instance.
   * @param options The options parameters.
   */
  async update(
    resourceGroupName: string,
    provisioningServiceName: string,
    provisioningServiceTags: TagsResource,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<IotDpsResourceUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      provisioningServiceName,
      provisioningServiceTags,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        IotDpsResourceUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes the Provisioning Service.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of provisioning service to delete.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    provisioningServiceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      provisioningServiceName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * List all the provisioning services for a given subscription id.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: coreHttp.OperationOptions
  ): Promise<IotDpsResourceListBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listBySubscriptionOperationSpec
    ) as Promise<IotDpsResourceListBySubscriptionResponse>;
  }

  /**
   * Get a list of all provisioning services in the given resource group.
   * @param resourceGroupName Resource group identifier.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<IotDpsResourceListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<IotDpsResourceListByResourceGroupResponse>;
  }

  /**
   * Gets the status of a long running operation, such as create, update or delete a provisioning
   * service.
   * @param resourceGroupName Resource group identifier.
   * @param operationId Operation id corresponding to long running operation. Use this to poll for the
   *                    status.
   * @param provisioningServiceName Name of provisioning service that the operation is running on.
   * @param asyncinfo Async header used to poll on the status of the operation, obtained while creating
   *                  the long running operation.
   * @param options The options parameters.
   */
  getOperationResult(
    resourceGroupName: string,
    operationId: string,
    provisioningServiceName: string,
    asyncinfo: string,
    options?: coreHttp.OperationOptions
  ): Promise<IotDpsResourceGetOperationResultResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationId,
        provisioningServiceName,
        asyncinfo,
        options: operationOptions
      },
      getOperationResultOperationSpec
    ) as Promise<IotDpsResourceGetOperationResultResponse>;
  }

  /**
   * Gets the list of valid SKUs and tiers for a provisioning service.
   * @param resourceGroupName Name of resource group.
   * @param provisioningServiceName Name of provisioning service.
   * @param options The options parameters.
   */
  listValidSkus(
    resourceGroupName: string,
    provisioningServiceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<IotDpsResourceListValidSkusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, provisioningServiceName, options: operationOptions },
      listValidSkusOperationSpec
    ) as Promise<IotDpsResourceListValidSkusResponse>;
  }

  /**
   * Check if a provisioning service name is available. This will validate if the name is syntactically
   * valid and if the name is usable
   * @param arguments Set the name parameter in the OperationInputs structure to the name of the
   *                  provisioning service to check.
   * @param options The options parameters.
   */
  checkProvisioningServiceNameAvailability(
    arguments: OperationInputs,
    options?: coreHttp.OperationOptions
  ): Promise<IotDpsResourceCheckProvisioningServiceNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { arguments, options: operationOptions },
      checkProvisioningServiceNameAvailabilityOperationSpec
    ) as Promise<
      IotDpsResourceCheckProvisioningServiceNameAvailabilityResponse
    >;
  }

  /**
   * List the primary and secondary keys for a provisioning service.
   * @param provisioningServiceName The provisioning service name to get the shared access keys for.
   * @param resourceGroupName resource group name
   * @param options The options parameters.
   */
  listKeys(
    provisioningServiceName: string,
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<IotDpsResourceListKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { provisioningServiceName, resourceGroupName, options: operationOptions },
      listKeysOperationSpec
    ) as Promise<IotDpsResourceListKeysResponse>;
  }

  /**
   * List primary and secondary keys for a specific key name
   * @param provisioningServiceName Name of the provisioning service.
   * @param keyName Logical key name to get key-values for.
   * @param resourceGroupName The name of the resource group that contains the provisioning service.
   * @param options The options parameters.
   */
  listKeysForKeyName(
    provisioningServiceName: string,
    keyName: string,
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<IotDpsResourceListKeysForKeyNameResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        provisioningServiceName,
        keyName,
        resourceGroupName,
        options: operationOptions
      },
      listKeysForKeyNameOperationSpec
    ) as Promise<IotDpsResourceListKeysForKeyNameResponse>;
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  listBySubscriptionNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<IotDpsResourceListBySubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listBySubscriptionNextOperationSpec
    ) as Promise<IotDpsResourceListBySubscriptionNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Resource group identifier.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<IotDpsResourceListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<IotDpsResourceListByResourceGroupNextResponse>;
  }

  /**
   * ListValidSkusNext
   * @param resourceGroupName Name of resource group.
   * @param provisioningServiceName Name of provisioning service.
   * @param nextLink The nextLink from the previous successful call to the ListValidSkus method.
   * @param options The options parameters.
   */
  listValidSkusNext(
    resourceGroupName: string,
    provisioningServiceName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<IotDpsResourceListValidSkusNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        provisioningServiceName,
        nextLink,
        options: operationOptions
      },
      listValidSkusNextOperationSpec
    ) as Promise<IotDpsResourceListValidSkusNextResponse>;
  }

  /**
   * ListKeysNext
   * @param provisioningServiceName The provisioning service name to get the shared access keys for.
   * @param resourceGroupName resource group name
   * @param nextLink The nextLink from the previous successful call to the ListKeys method.
   * @param options The options parameters.
   */
  listKeysNext(
    provisioningServiceName: string,
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<IotDpsResourceListKeysNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        provisioningServiceName,
        resourceGroupName,
        nextLink,
        options: operationOptions
      },
      listKeysNextOperationSpec
    ) as Promise<IotDpsResourceListKeysNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName3,
    Parameters.provisioningServiceName5
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescription
    },
    201: {
      bodyMapper: Mappers.ProvisioningServiceDescription
    },
    202: {
      bodyMapper: Mappers.ProvisioningServiceDescription
    },
    204: {
      bodyMapper: Mappers.ProvisioningServiceDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  requestBody: Parameters.iotDpsDescription,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName6
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescription
    },
    201: {
      bodyMapper: Mappers.ProvisioningServiceDescription
    },
    202: {
      bodyMapper: Mappers.ProvisioningServiceDescription
    },
    204: {
      bodyMapper: Mappers.ProvisioningServiceDescription
    }
  },
  requestBody: Parameters.provisioningServiceTags,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName6
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName7
  ],
  serializer
};
const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/provisioningServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const getOperationResultOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/operationresults/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AsyncOperationResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.asyncinfo],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationId,
    Parameters.provisioningServiceName8
  ],
  serializer
};
const listValidSkusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IotDpsSkuDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.provisioningServiceName3
  ],
  serializer
};
const checkProvisioningServiceNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkProvisioningServiceNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.NameAvailabilityInfo
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  requestBody: Parameters.arguments,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType],
  serializer
};
const listKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/listkeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessSignatureAuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.provisioningServiceName9,
    Parameters.resourceGroupName4
  ],
  serializer
};
const listKeysForKeyNameOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/keys/{keyName}/listkeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper:
        Mappers.SharedAccessSignatureAuthorizationRuleAccessRightsDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.provisioningServiceName10,
    Parameters.keyName,
    Parameters.resourceGroupName5
  ],
  serializer
};
const listBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink1
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink2
  ],
  serializer
};
const listValidSkusNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IotDpsSkuDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.provisioningServiceName3,
    Parameters.nextLink3
  ],
  serializer
};
const listKeysNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessSignatureAuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.provisioningServiceName9,
    Parameters.resourceGroupName4,
    Parameters.nextLink4
  ],
  serializer
};
