/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { IotDpsClient } from "../iotDpsClient";
import {
  DpsCertificateGetOptionalParams,
  DpsCertificateGetResponse,
  CertificateBodyDescription,
  DpsCertificateCreateOrUpdateOptionalParams,
  DpsCertificateCreateOrUpdateResponse,
  DpsCertificateDeleteOptionalParams,
  DpsCertificateListResponse,
  DpsCertificateGenerateVerificationCodeOptionalParams,
  DpsCertificateGenerateVerificationCodeResponse,
  VerificationCodeRequest,
  DpsCertificateVerifyCertificateOptionalParams,
  DpsCertificateVerifyCertificateResponse
} from "../models";

/**
 * Class representing a DpsCertificate.
 */
export class DpsCertificate {
  private readonly client: IotDpsClient;

  /**
   * Initialize a new instance of the class DpsCertificate class.
   * @param client Reference to the service client
   */
  constructor(client: IotDpsClient) {
    this.client = client;
  }

  /**
   * Get the certificate from the provisioning service.
   * @param certificateName Name of the certificate to retrieve.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of the provisioning service the certificate is associated with.
   * @param options The options parameters.
   */
  get(
    certificateName: string,
    resourceGroupName: string,
    provisioningServiceName: string,
    options?: DpsCertificateGetOptionalParams
  ): Promise<DpsCertificateGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        certificateName,
        resourceGroupName,
        provisioningServiceName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<DpsCertificateGetResponse>;
  }

  /**
   * Add new certificate or update an existing certificate.
   * @param resourceGroupName Resource group identifier.
   * @param certificateDescription The certificate body.
   * @param provisioningServiceName The name of the provisioning service.
   * @param certificateName The name of the certificate create or update.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    certificateDescription: CertificateBodyDescription,
    provisioningServiceName: string,
    certificateName: string,
    options?: DpsCertificateCreateOrUpdateOptionalParams
  ): Promise<DpsCertificateCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateDescription,
        provisioningServiceName,
        certificateName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<DpsCertificateCreateOrUpdateResponse>;
  }

  /**
   * Deletes the specified certificate associated with the Provisioning Service
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName The name of the provisioning service.
   * @param ifMatch ETag of the certificate
   * @param certificateName This is a mandatory field, and is the logical name of the certificate that
   *                        the provisioning service will access by.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    provisioningServiceName: string,
    ifMatch: string,
    certificateName: string,
    options?: DpsCertificateDeleteOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        provisioningServiceName,
        ifMatch,
        certificateName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get all the certificates tied to the provisioning service.
   * @param resourceGroupName Name of resource group.
   * @param provisioningServiceName Name of provisioning service to retrieve certificates for.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    provisioningServiceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DpsCertificateListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, provisioningServiceName, options: operationOptions },
      listOperationSpec
    ) as Promise<DpsCertificateListResponse>;
  }

  /**
   * Generate verification code for Proof of Possession.
   * @param certificateName The mandatory logical name of the certificate, that the provisioning service
   *                        uses to access.
   * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and
   *                ignored while creating a brand new certificate.
   * @param resourceGroupName name of resource group.
   * @param provisioningServiceName Name of provisioning service.
   * @param options The options parameters.
   */
  generateVerificationCode(
    certificateName: string,
    ifMatch: string,
    resourceGroupName: string,
    provisioningServiceName: string,
    options?: DpsCertificateGenerateVerificationCodeOptionalParams
  ): Promise<DpsCertificateGenerateVerificationCodeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        certificateName,
        ifMatch,
        resourceGroupName,
        provisioningServiceName,
        options: operationOptions
      },
      generateVerificationCodeOperationSpec
    ) as Promise<DpsCertificateGenerateVerificationCodeResponse>;
  }

  /**
   * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying
   * pre uploaded certificate.
   * @param certificateName The mandatory logical name of the certificate, that the provisioning service
   *                        uses to access.
   * @param request The name of the certificate
   * @param ifMatch ETag of the certificate.
   * @param resourceGroupName Resource group name.
   * @param provisioningServiceName Provisioning service name.
   * @param options The options parameters.
   */
  verifyCertificate(
    certificateName: string,
    request: VerificationCodeRequest,
    ifMatch: string,
    resourceGroupName: string,
    provisioningServiceName: string,
    options?: DpsCertificateVerifyCertificateOptionalParams
  ): Promise<DpsCertificateVerifyCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        certificateName,
        request,
        ifMatch,
        resourceGroupName,
        provisioningServiceName,
        options: operationOptions
      },
      verifyCertificateOperationSpec
    ) as Promise<DpsCertificateVerifyCertificateResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResponse
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.certificateName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName
  ],
  headerParameters: [Parameters.ifMatch],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResponse
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  requestBody: Parameters.certificateDescription,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName1,
    Parameters.certificateName1
  ],
  headerParameters: [Parameters.contentType, Parameters.ifMatch1],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.certificateName1,
    Parameters.certificateRawBytes,
    Parameters.certificateIsVerified,
    Parameters.certificatePurpose,
    Parameters.certificateCreated,
    Parameters.certificateLastUpdated,
    Parameters.certificateHasPrivateKey,
    Parameters.certificateNonce
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName1,
    Parameters.certificateName2
  ],
  headerParameters: [Parameters.ifMatch2],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.provisioningServiceName2
  ],
  serializer
};
const generateVerificationCodeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/generateVerificationCode",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VerificationCodeResponse
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.certificateNonce,
    Parameters.certificateName11,
    Parameters.certificateRawBytes1,
    Parameters.certificateIsVerified1,
    Parameters.certificatePurpose1,
    Parameters.certificateCreated1,
    Parameters.certificateLastUpdated1,
    Parameters.certificateHasPrivateKey1
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.certificateName3,
    Parameters.resourceGroupName2,
    Parameters.provisioningServiceName3
  ],
  headerParameters: [Parameters.ifMatch3],
  serializer
};
const verifyCertificateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/verify",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResponse
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  requestBody: Parameters.request,
  queryParameters: [
    Parameters.apiVersion,
    Parameters.certificateNonce,
    Parameters.certificateName11,
    Parameters.certificateRawBytes1,
    Parameters.certificateIsVerified1,
    Parameters.certificateCreated1,
    Parameters.certificateLastUpdated1,
    Parameters.certificateHasPrivateKey1,
    Parameters.certificatePurpose2
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.certificateName3,
    Parameters.resourceGroupName3,
    Parameters.provisioningServiceName4
  ],
  headerParameters: [Parameters.contentType, Parameters.ifMatch4],
  serializer
};
