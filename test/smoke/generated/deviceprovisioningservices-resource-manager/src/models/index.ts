/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Result of the request to list IoT Hub operations. It contains a list of operations and a URL link to get the next set of results.
 */
export interface OperationListResult {
  /**
   * List of IoT Hub operations supported by the Microsoft.Devices resource provider.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  readonly nextLink?: string;
}

/**
 * IoT Hub REST API operation.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{read | write | action | delete}
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft Devices.
   */
  readonly provider?: string;
  /**
   * Resource Type: ProvisioningServices.
   */
  readonly resource?: string;
  /**
   * Name of the operation.
   */
  readonly operation?: string;
}

/**
 * Error details.
 */
export interface ErrorDetails {
  /**
   * The error code.
   */
  readonly code?: string;
  /**
   * The HTTP status code.
   */
  readonly httpStatusCode?: string;
  /**
   * The error message.
   */
  readonly message?: string;
  /**
   * The error details.
   */
  readonly details?: string;
}

/**
 * The X509 Certificate.
 */
export interface CertificateResponse {
  /**
   * properties of a certificate
   */
  properties?: CertificateProperties;
  /**
   * The resource identifier.
   */
  readonly id?: string;
  /**
   * The name of the certificate.
   */
  readonly name?: string;
  /**
   * The entity tag.
   */
  readonly etag?: string;
  /**
   * The resource type.
   */
  readonly type?: string;
}

/**
 * The description of an X509 CA Certificate.
 */
export interface CertificateProperties {
  /**
   * The certificate's subject name.
   */
  readonly subject?: string;
  /**
   * The certificate's expiration date and time.
   */
  readonly expiry?: Date;
  /**
   * The certificate's thumbprint.
   */
  readonly thumbprint?: string;
  /**
   * Determines whether certificate has been verified.
   */
  readonly isVerified?: boolean;
  /**
   * The certificate's creation date and time.
   */
  readonly created?: Date;
  /**
   * The certificate's last update date and time.
   */
  readonly updated?: Date;
}

/**
 * The JSON-serialized X509 Certificate.
 */
export interface CertificateBodyDescription {
  /**
   * Base-64 representation of the X509 leaf certificate .cer file or just .pem file content.
   */
  certificate?: string;
}

/**
 * The common properties of an Azure resource.
 */
export interface Resource {
  /**
   * The resource identifier.
   */
  readonly id?: string;
  /**
   * The resource name.
   */
  readonly name?: string;
  /**
   * The resource type.
   */
  readonly type?: string;
  /**
   * The resource location.
   */
  location: string;
  /**
   * The resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The description of the provisioning service.
 */
export type ProvisioningServiceDescription = Resource & {
  /**
   * The Etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention.
   */
  etag?: string;
  /**
   * Service specific properties for a provisioning service
   */
  properties: IotDpsPropertiesDescription;
  /**
   * Sku info for a provisioning Service.
   */
  sku: IotDpsSkuInfo;
};

/**
 * the service specific properties of a provisioning service, including keys, linked iot hubs, current state, and system generated properties such as hostname and idScope
 */
export interface IotDpsPropertiesDescription {
  /**
   * Current state of the provisioning service.
   */
  state?: State;
  /**
   * The ARM provisioning state of the provisioning service.
   */
  provisioningState?: string;
  /**
   * List of IoT hubs associated with this provisioning service.
   */
  iotHubs?: IotHubDefinitionDescription[];
  /**
   * Allocation policy to be used by this provisioning service.
   */
  allocationPolicy?: AllocationPolicy;
  /**
   * Service endpoint for provisioning service.
   */
  readonly serviceOperationsHostName?: string;
  /**
   * Device endpoint for this provisioning service.
   */
  readonly deviceProvisioningHostName?: string;
  /**
   * Unique identifier of this provisioning service.
   */
  readonly idScope?: string;
  /**
   * List of authorization keys for a provisioning service.
   */
  authorizationPolicies?: SharedAccessSignatureAuthorizationRuleAccessRightsDescription[];
}

/**
 * Description of the IoT hub.
 */
export interface IotHubDefinitionDescription {
  /**
   * flag for applying allocationPolicy or not for a given iot hub.
   */
  applyAllocationPolicy?: boolean;
  /**
   * weight to apply for a given iot h.
   */
  allocationWeight?: number;
  /**
   * Host name of the IoT hub.
   */
  readonly name?: string;
  /**
   * Connection string og the IoT hub.
   */
  connectionString: string;
  /**
   * ARM region of the IoT hub.
   */
  location: string;
}

/**
 * Description of the shared access key.
 */
export interface SharedAccessSignatureAuthorizationRuleAccessRightsDescription {
  /**
   * Name of the key.
   */
  keyName: string;
  /**
   * Primary SAS key value.
   */
  primaryKey?: string;
  /**
   * Secondary SAS key value.
   */
  secondaryKey?: string;
  /**
   * Rights that this key has.
   */
  rights: AccessRightsDescription;
}

/**
 * List of possible provisioning service SKUs.
 */
export interface IotDpsSkuInfo {
  /**
   * Sku name.
   */
  name?: "S1";
  /**
   * Pricing tier name of the provisioning service.
   */
  readonly tier?: string;
  /**
   * The number of units to provision
   */
  capacity?: number;
}

/**
 * A container holding only the Tags for a resource, allowing the user to update the tags on a Provisioning Service instance.
 */
export interface TagsResource {
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The JSON-serialized array of Certificate objects.
 */
export interface CertificateListDescription {
  /**
   * The array of Certificate objects.
   */
  value?: CertificateResponse[];
}

/**
 * List of provisioning service descriptions.
 */
export interface ProvisioningServiceDescriptionListResult {
  /**
   * List of provisioning service descriptions.
   */
  value?: ProvisioningServiceDescription[];
  /**
   * the next link
   */
  readonly nextLink?: string;
}

/**
 * Result of a long running operation.
 */
export interface AsyncOperationResult {
  /**
   * current status of a long running operation.
   */
  status?: string;
  /**
   * Error message containing code, description and details
   */
  error?: ErrorMesssage;
}

/**
 * Error response containing message and code.
 */
export interface ErrorMesssage {
  /**
   * standard error code
   */
  code?: string;
  /**
   * standard error description
   */
  message?: string;
  /**
   * detailed summary of error
   */
  details?: string;
}

/**
 * List of available SKUs.
 */
export interface IotDpsSkuDefinitionListResult {
  /**
   * The list of SKUs
   */
  value?: IotDpsSkuDefinition[];
  /**
   * The next link.
   */
  readonly nextLink?: string;
}

/**
 * Available SKUs of tier and units.
 */
export interface IotDpsSkuDefinition {
  /**
   * Sku name.
   */
  name?: "S1";
}

/**
 * Description of the response of the verification code.
 */
export interface VerificationCodeResponse {
  /**
   * Name of certificate.
   */
  readonly name?: string;
  /**
   * Request etag.
   */
  readonly etag?: string;
  /**
   * The resource identifier.
   */
  readonly id?: string;
  /**
   * The resource type.
   */
  readonly type?: string;
  properties?: VerificationCodeResponseProperties;
}

export interface VerificationCodeResponseProperties {
  /**
   * Verification code.
   */
  verificationCode?: string;
  /**
   * Certificate subject.
   */
  subject?: string;
  /**
   * Code expiry.
   */
  expiry?: string;
  /**
   * Certificate thumbprint.
   */
  thumbprint?: string;
  /**
   * Indicate if the certificate is verified by owner of private key.
   */
  isVerified?: boolean;
  /**
   * Certificate created time.
   */
  created?: string;
  /**
   * Certificate updated time.
   */
  updated?: string;
}

/**
 * The JSON-serialized leaf certificate
 */
export interface VerificationCodeRequest {
  /**
   * base-64 representation of X509 certificate .cer file or just .pem file content.
   */
  certificate?: string;
}

/**
 * Input values for operation results call.
 */
export interface OperationInputs {
  /**
   * The name of the Provisioning Service to check.
   */
  name: string;
}

/**
 * Description of name availability.
 */
export interface NameAvailabilityInfo {
  /**
   * specifies if a name is available or not
   */
  nameAvailable?: boolean;
  /**
   * specifies the reason a name is unavailable
   */
  reason?: NameUnavailabilityReason;
  /**
   * message containing a detailed reason name is unavailable
   */
  message?: string;
}

/**
 * List of shared access keys.
 */
export interface SharedAccessSignatureAuthorizationRuleListResult {
  /**
   * The list of shared access policies.
   */
  value?: SharedAccessSignatureAuthorizationRuleAccessRightsDescription[];
  /**
   * The next link.
   */
  readonly nextLink?: string;
}

/**
 * Defines values for CertificatePurpose.
 */
export type CertificatePurpose =
  | "clientAuthentication"
  | "serverAuthentication";
/**
 * Defines values for State.
 */
export type State =
  | "Activating"
  | "Active"
  | "Deleting"
  | "Deleted"
  | "ActivationFailed"
  | "DeletionFailed"
  | "Transitioning"
  | "Suspending"
  | "Suspended"
  | "Resuming"
  | "FailingOver"
  | "FailoverFailed";
/**
 * Defines values for AllocationPolicy.
 */
export type AllocationPolicy = "Hashed" | "GeoLatency" | "Static";
/**
 * Defines values for AccessRightsDescription.
 */
export type AccessRightsDescription =
  | "ServiceConfig"
  | "EnrollmentRead"
  | "EnrollmentWrite"
  | "DeviceConnect"
  | "RegistrationStatusRead"
  | "RegistrationStatusWrite";
/**
 * Defines values for NameUnavailabilityReason.
 */
export type NameUnavailabilityReason = "Invalid" | "AlreadyExists";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface DpsCertificateGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the certificate.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the get operation.
 */
export type DpsCertificateGetResponse = CertificateResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateResponse;
  };
};

/**
 * Optional parameters.
 */
export interface DpsCertificateCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DpsCertificateCreateOrUpdateResponse = CertificateResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateResponse;
  };
};

/**
 * Optional parameters.
 */
export interface DpsCertificateDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * This is optional, and it is the Common Name of the certificate.
   */
  certificateName1?: string;
  /**
   * Raw data within the certificate.
   */
  certificateRawBytes?: Uint8Array;
  /**
   * Indicates if certificate has been verified by owner of the private key.
   */
  certificateIsVerified?: boolean;
  /**
   * A description that mentions the purpose of the certificate.
   */
  certificatePurpose?: CertificatePurpose;
  /**
   * Time the certificate is created.
   */
  certificateCreated?: Date;
  /**
   * Time the certificate is last updated.
   */
  certificateLastUpdated?: Date;
  /**
   * Indicates if the certificate contains a private key.
   */
  certificateHasPrivateKey?: boolean;
  /**
   * Random number generated to indicate Proof of Possession.
   */
  certificateNonce?: string;
}

/**
 * Contains response data for the list operation.
 */
export type DpsCertificateListResponse = CertificateListDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateListDescription;
  };
};

/**
 * Optional parameters.
 */
export interface DpsCertificateGenerateVerificationCodeOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Random number generated to indicate Proof of Possession.
   */
  certificateNonce?: string;
  /**
   * Common Name for the certificate.
   */
  certificateName1?: string;
  /**
   * Raw data of certificate.
   */
  certificateRawBytes?: Uint8Array;
  /**
   * Indicates if the certificate has been verified by owner of the private key.
   */
  certificateIsVerified?: boolean;
  /**
   * Description mentioning the purpose of the certificate.
   */
  certificatePurpose?: CertificatePurpose;
  /**
   * Certificate creation time.
   */
  certificateCreated?: Date;
  /**
   * Certificate last updated time.
   */
  certificateLastUpdated?: Date;
  /**
   * Indicates if the certificate contains private key.
   */
  certificateHasPrivateKey?: boolean;
}

/**
 * Contains response data for the generateVerificationCode operation.
 */
export type DpsCertificateGenerateVerificationCodeResponse = VerificationCodeResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VerificationCodeResponse;
  };
};

/**
 * Optional parameters.
 */
export interface DpsCertificateVerifyCertificateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Random number generated to indicate Proof of Possession.
   */
  certificateNonce?: string;
  /**
   * Common Name for the certificate.
   */
  certificateName1?: string;
  /**
   * Raw data of certificate.
   */
  certificateRawBytes?: Uint8Array;
  /**
   * Indicates if the certificate has been verified by owner of the private key.
   */
  certificateIsVerified?: boolean;
  /**
   * Certificate creation time.
   */
  certificateCreated?: Date;
  /**
   * Certificate last updated time.
   */
  certificateLastUpdated?: Date;
  /**
   * Indicates if the certificate contains private key.
   */
  certificateHasPrivateKey?: boolean;
  /**
   * Describe the purpose of the certificate.
   */
  certificatePurpose?: CertificatePurpose;
}

/**
 * Contains response data for the verifyCertificate operation.
 */
export type DpsCertificateVerifyCertificateResponse = CertificateResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateResponse;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IotDpsResourceGetResponse = ProvisioningServiceDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProvisioningServiceDescription;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IotDpsResourceCreateOrUpdateResponse = ProvisioningServiceDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProvisioningServiceDescription;
  };
};

/**
 * Contains response data for the update operation.
 */
export type IotDpsResourceUpdateResponse = ProvisioningServiceDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProvisioningServiceDescription;
  };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type IotDpsResourceListBySubscriptionResponse = ProvisioningServiceDescriptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProvisioningServiceDescriptionListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type IotDpsResourceListByResourceGroupResponse = ProvisioningServiceDescriptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProvisioningServiceDescriptionListResult;
  };
};

/**
 * Contains response data for the getOperationResult operation.
 */
export type IotDpsResourceGetOperationResultResponse = AsyncOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AsyncOperationResult;
  };
};

/**
 * Contains response data for the listValidSkus operation.
 */
export type IotDpsResourceListValidSkusResponse = IotDpsSkuDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IotDpsSkuDefinitionListResult;
  };
};

/**
 * Contains response data for the checkProvisioningServiceNameAvailability operation.
 */
export type IotDpsResourceCheckProvisioningServiceNameAvailabilityResponse = NameAvailabilityInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NameAvailabilityInfo;
  };
};

/**
 * Contains response data for the listKeys operation.
 */
export type IotDpsResourceListKeysResponse = SharedAccessSignatureAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedAccessSignatureAuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the listKeysForKeyName operation.
 */
export type IotDpsResourceListKeysForKeyNameResponse = SharedAccessSignatureAuthorizationRuleAccessRightsDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedAccessSignatureAuthorizationRuleAccessRightsDescription;
  };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type IotDpsResourceListBySubscriptionNextResponse = ProvisioningServiceDescriptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProvisioningServiceDescriptionListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type IotDpsResourceListByResourceGroupNextResponse = ProvisioningServiceDescriptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProvisioningServiceDescriptionListResult;
  };
};

/**
 * Contains response data for the listValidSkusNext operation.
 */
export type IotDpsResourceListValidSkusNextResponse = IotDpsSkuDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IotDpsSkuDefinitionListResult;
  };
};

/**
 * Contains response data for the listKeysNext operation.
 */
export type IotDpsResourceListKeysNextResponse = SharedAccessSignatureAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedAccessSignatureAuthorizationRuleListResult;
  };
};

/**
 * Optional parameters.
 */
export interface IotDpsClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
