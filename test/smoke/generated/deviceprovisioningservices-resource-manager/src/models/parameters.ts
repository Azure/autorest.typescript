/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2018-01-22",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const certificateName: coreHttp.OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificateName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const provisioningServiceName: coreHttp.OperationURLParameter = {
  parameterPath: "provisioningServiceName",
  mapper: {
    serializedName: "provisioningServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const ifMatch: coreHttp.OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const certificateDescription: coreHttp.OperationParameter = {
  parameterPath: "certificateDescription",
  mapper: Mappers.CertificateBodyDescription
};

export const provisioningServiceName1: coreHttp.OperationURLParameter = {
  parameterPath: "provisioningServiceName",
  mapper: {
    serializedName: "provisioningServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificateName1: coreHttp.OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    constraints: {
      MaxLength: 256
    },
    serializedName: "certificateName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const ifMatch1: coreHttp.OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifMatch2: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificateName2: coreHttp.OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificateName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificateName1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificateName1"],
  mapper: {
    serializedName: "certificate.name",
    type: {
      name: "String"
    }
  }
};

export const certificateRawBytes: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificateRawBytes"],
  mapper: {
    serializedName: "certificate.rawBytes",
    type: {
      name: "ByteArray"
    }
  }
};

export const certificateIsVerified: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificateIsVerified"],
  mapper: {
    serializedName: "certificate.isVerified",
    type: {
      name: "Boolean"
    }
  }
};

export const certificatePurpose: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificatePurpose"],
  mapper: {
    serializedName: "certificate.purpose",
    type: {
      name: "String"
    }
  }
};

export const certificateCreated: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificateCreated"],
  mapper: {
    serializedName: "certificate.created",
    type: {
      name: "DateTime"
    }
  }
};

export const certificateLastUpdated: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificateLastUpdated"],
  mapper: {
    serializedName: "certificate.lastUpdated",
    type: {
      name: "DateTime"
    }
  }
};

export const certificateHasPrivateKey: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificateHasPrivateKey"],
  mapper: {
    serializedName: "certificate.hasPrivateKey",
    type: {
      name: "Boolean"
    }
  }
};

export const certificateNonce: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificateNonce"],
  mapper: {
    serializedName: "certificate.nonce",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName1: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const provisioningServiceName2: coreHttp.OperationURLParameter = {
  parameterPath: "provisioningServiceName",
  mapper: {
    serializedName: "provisioningServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificateName3: coreHttp.OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificateName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const ifMatch3: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName2: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const provisioningServiceName3: coreHttp.OperationURLParameter = {
  parameterPath: "provisioningServiceName",
  mapper: {
    serializedName: "provisioningServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificateName11: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificateName1"],
  mapper: {
    serializedName: "certificate.name",
    type: {
      name: "String"
    }
  }
};

export const certificateRawBytes1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificateRawBytes"],
  mapper: {
    serializedName: "certificate.rawBytes",
    type: {
      name: "ByteArray"
    }
  }
};

export const certificateIsVerified1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificateIsVerified"],
  mapper: {
    serializedName: "certificate.isVerified",
    type: {
      name: "Boolean"
    }
  }
};

export const certificatePurpose1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificatePurpose"],
  mapper: {
    serializedName: "certificate.purpose",
    type: {
      name: "String"
    }
  }
};

export const certificateCreated1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificateCreated"],
  mapper: {
    serializedName: "certificate.created",
    type: {
      name: "DateTime"
    }
  }
};

export const certificateLastUpdated1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificateLastUpdated"],
  mapper: {
    serializedName: "certificate.lastUpdated",
    type: {
      name: "DateTime"
    }
  }
};

export const certificateHasPrivateKey1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificateHasPrivateKey"],
  mapper: {
    serializedName: "certificate.hasPrivateKey",
    type: {
      name: "Boolean"
    }
  }
};

export const request: coreHttp.OperationParameter = {
  parameterPath: "request",
  mapper: Mappers.VerificationCodeRequest
};

export const ifMatch4: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName3: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const provisioningServiceName4: coreHttp.OperationURLParameter = {
  parameterPath: "provisioningServiceName",
  mapper: {
    serializedName: "provisioningServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificatePurpose2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "certificatePurpose"],
  mapper: {
    serializedName: "certificate.purpose",
    type: {
      name: "String"
    }
  }
};

export const provisioningServiceName5: coreHttp.OperationURLParameter = {
  parameterPath: "provisioningServiceName",
  mapper: {
    serializedName: "provisioningServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const iotDpsDescription: coreHttp.OperationParameter = {
  parameterPath: "iotDpsDescription",
  mapper: Mappers.ProvisioningServiceDescription
};

export const provisioningServiceName6: coreHttp.OperationURLParameter = {
  parameterPath: "provisioningServiceName",
  mapper: {
    serializedName: "provisioningServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const provisioningServiceTags: coreHttp.OperationParameter = {
  parameterPath: "provisioningServiceTags",
  mapper: Mappers.TagsResource
};

export const provisioningServiceName7: coreHttp.OperationURLParameter = {
  parameterPath: "provisioningServiceName",
  mapper: {
    serializedName: "provisioningServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const operationId: coreHttp.OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const provisioningServiceName8: coreHttp.OperationURLParameter = {
  parameterPath: "provisioningServiceName",
  mapper: {
    serializedName: "provisioningServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const asyncinfo: coreHttp.OperationQueryParameter = {
  parameterPath: "asyncinfo",
  mapper: {
    defaultValue: "true",
    serializedName: "asyncinfo",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const arguments: coreHttp.OperationParameter = {
  parameterPath: "arguments",
  mapper: Mappers.OperationInputs
};

export const provisioningServiceName9: coreHttp.OperationURLParameter = {
  parameterPath: "provisioningServiceName",
  mapper: {
    serializedName: "provisioningServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName4: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const provisioningServiceName10: coreHttp.OperationURLParameter = {
  parameterPath: "provisioningServiceName",
  mapper: {
    serializedName: "provisioningServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const keyName: coreHttp.OperationURLParameter = {
  parameterPath: "keyName",
  mapper: {
    serializedName: "keyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName5: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink4: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
