/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const QueryRequest: coreHttp.CompositeMapper = {
  serializedName: "QueryRequest",
  type: {
    name: "Composite",
    className: "QueryRequest",
    modelProperties: {
      subscriptions: {
        serializedName: "subscriptions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "QueryRequestSubscriptionsItem"
          }
        }
      },
      query: {
        serializedName: "query",
        required: true,
        type: {
          name: "String"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "QueryRequestOptions"
        }
      },
      facets: {
        serializedName: "facets",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FacetRequest" } }
        }
      }
    }
  }
};

export const QueryRequestOptions: coreHttp.CompositeMapper = {
  serializedName: "QueryRequestOptions",
  type: {
    name: "Composite",
    className: "QueryRequestOptions",
    modelProperties: {
      skipToken: {
        serializedName: "$skipToken",
        type: {
          name: "String"
        }
      },
      top: {
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
          name: "Number"
        }
      },
      skip: {
        constraints: {},
        serializedName: "$skip",
        type: {
          name: "Number"
        }
      },
      resultFormat: {
        serializedName: "resultFormat",
        type: {
          name: "Enum",
          allowedValues: ["table", "objectArray"]
        }
      }
    }
  }
};

export const FacetRequest: coreHttp.CompositeMapper = {
  serializedName: "FacetRequest",
  type: {
    name: "Composite",
    className: "FacetRequest",
    modelProperties: {
      expression: {
        serializedName: "expression",
        required: true,
        type: {
          name: "String"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "FacetRequestOptions"
        }
      }
    }
  }
};

export const FacetRequestOptions: coreHttp.CompositeMapper = {
  serializedName: "FacetRequestOptions",
  type: {
    name: "Composite",
    className: "FacetRequestOptions",
    modelProperties: {
      sortBy: {
        serializedName: "sortBy",
        type: {
          name: "String"
        }
      },
      sortOrder: {
        defaultValue: "desc",
        serializedName: "sortOrder",
        type: {
          name: "Enum",
          allowedValues: ["asc", "desc"]
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "String"
        }
      },
      top: {
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const QueryResponse: coreHttp.CompositeMapper = {
  serializedName: "QueryResponse",
  type: {
    name: "Composite",
    className: "QueryResponse",
    modelProperties: {
      totalRecords: {
        serializedName: "totalRecords",
        required: true,
        type: {
          name: "Number"
        }
      },
      count: {
        serializedName: "count",
        required: true,
        type: {
          name: "Number"
        }
      },
      resultTruncated: {
        serializedName: "resultTruncated",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["true", "false"]
        }
      },
      skipToken: {
        serializedName: "$skipToken",
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "any"
        }
      },
      facets: {
        serializedName: "facets",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Facet" } }
        }
      }
    }
  }
};

export const Facet: coreHttp.CompositeMapper = {
  serializedName: "Facet",
  type: {
    name: "Composite",
    className: "Facet",
    uberParent: "Facet",
    polymorphicDiscriminator: {
      serializedName: "resultType",
      clientName: "resultType"
    },
    modelProperties: {
      expression: {
        serializedName: "expression",
        required: true,
        type: {
          name: "String"
        }
      },
      resultType: {
        serializedName: "resultType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const ErrorModel: coreHttp.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ErrorDetails" } }
        }
      }
    }
  }
};

export const ErrorDetails: coreHttp.CompositeMapper = {
  serializedName: "ErrorDetails",
  type: {
    name: "Composite",
    className: "ErrorDetails",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Table: coreHttp.CompositeMapper = {
  serializedName: "Table",
  type: {
    name: "Composite",
    className: "Table",
    modelProperties: {
      columns: {
        serializedName: "columns",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Column" } }
        }
      },
      rows: {
        serializedName: "rows",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: { type: { name: "any" }, serializedName: "any" }
            },
            serializedName: "Row"
          }
        }
      }
    }
  }
};

export const Column: coreHttp.CompositeMapper = {
  serializedName: "Column",
  type: {
    name: "Composite",
    className: "Column",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["string", "integer", "number", "boolean", "object"]
        }
      }
    }
  }
};

export const FacetResult: coreHttp.CompositeMapper = {
  serializedName: "FacetResult",
  type: {
    name: "Composite",
    className: "FacetResult",
    uberParent: "Facet",
    polymorphicDiscriminator: Facet.type.polymorphicDiscriminator,
    modelProperties: {
      ...Facet.type.modelProperties,
      totalRecords: {
        serializedName: "totalRecords",
        required: true,
        type: {
          name: "Number"
        }
      },
      count: {
        serializedName: "count",
        required: true,
        type: {
          name: "Number"
        }
      },
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "any"
        }
      }
    }
  }
};

export const FacetError: coreHttp.CompositeMapper = {
  serializedName: "FacetError",
  type: {
    name: "Composite",
    className: "FacetError",
    uberParent: "Facet",
    polymorphicDiscriminator: Facet.type.polymorphicDiscriminator,
    modelProperties: {
      ...Facet.type.modelProperties,
      errors: {
        serializedName: "errors",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ErrorDetails" } }
        }
      }
    }
  }
};

export let discriminators = {
  Facet: Facet,
  "Facet.FacetResult": FacetResult,
  "Facet.FacetError": FacetError
};
