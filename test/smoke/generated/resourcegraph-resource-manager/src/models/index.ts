/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type FacetUnion = Facet | FacetResult | FacetError;

/**
 * Describes a query to be executed.
 */
export interface QueryRequest {
  /**
   * Azure subscriptions against which to execute the query.
   */
  subscriptions: string[];
  /**
   * The resources query.
   */
  query: string;
  /**
   * The query evaluation options
   */
  options?: QueryRequestOptions;
  /**
   * An array of facet requests to be computed against the query result.
   */
  facets?: FacetRequest[];
}

/**
 * The options for query evaluation
 */
export interface QueryRequestOptions {
  /**
   * Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.
   */
  skipToken?: string;
  /**
   * The maximum number of rows that the query should return. Overrides the page size when ```$skipToken``` property is present.
   */
  top?: number;
  /**
   * The number of rows to skip from the beginning of the results. Overrides the next page offset when ```$skipToken``` property is present.
   */
  skip?: number;
  /**
   * Defines in which format query result returned.
   */
  resultFormat?: ResultFormat;
}

/**
 * A request to compute additional statistics (facets) over the query results.
 */
export interface FacetRequest {
  /**
   * The column or list of columns to summarize by
   */
  expression: string;
  /**
   * The options for facet evaluation
   */
  options?: FacetRequestOptions;
}

/**
 * The options for facet evaluation
 */
export interface FacetRequestOptions {
  /**
   * The column name or query expression to sort on. Defaults to count if not present.
   */
  sortBy?: string;
  /**
   * The sorting order by the selected column (count by default).
   */
  sortOrder?: FacetSortOrder;
  /**
   * Specifies the filter condition for the 'where' clause which will be run on main query's result, just before the actual faceting.
   */
  filter?: string;
  /**
   * The maximum number of facet rows that should be returned.
   */
  top?: number;
}

/**
 * Query result.
 */
export interface QueryResponse {
  /**
   * Number of total records matching the query.
   */
  totalRecords: number;
  /**
   * Number of records returned in the current response. In the case of paging, this is the number of records in the current page.
   */
  count: number;
  /**
   * Indicates whether the query results are truncated.
   */
  resultTruncated: ResultTruncated;
  /**
   * When present, the value can be passed to a subsequent query call (together with the same query and subscriptions used in the current request) to retrieve the next page of data.
   */
  skipToken?: string;
  /**
   * Query output in tabular format.
   */
  data: any;
  /**
   * Query facets.
   */
  facets?: FacetUnion[];
}

/**
 * A facet containing additional statistics on the response of a query. Can be either FacetResult or FacetError.
 */
export interface Facet {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  resultType: "FacetResult" | "FacetError";
  /**
   * Facet expression, same as in the corresponding facet request.
   */
  expression: string;
}

/**
 * An error response from the API.
 */
export interface ErrorResponse {
  /**
   * Error information.
   */
  error: ErrorModel;
}

/**
 * Error details.
 */
export interface ErrorModel {
  /**
   * Error code identifying the specific error.
   */
  code: string;
  /**
   * A human readable error message.
   */
  message: string;
  /**
   * Error details
   */
  details?: ErrorDetails[];
}

/**
 * Error details.
 */
export interface ErrorDetails {
  /**
   * Describes unknown properties. The value of an unknown property can be of "any" type.
   */
  [property: string]: any;
  /**
   * Error code identifying the specific error.
   */
  code: string;
  /**
   * A human readable error message.
   */
  message: string;
}

/**
 * Result of the request to list Resource Graph operations. It contains a list of operations and a URL link to get the next set of results.
 */
export interface OperationListResult {
  /**
   * List of Resource Graph operations supported by the Resource Graph resource provider.
   */
  value?: Operation[];
}

/**
 * Resource Graph REST API operation definition.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * Display metadata associated with the operation.
   */
  display?: OperationDisplay;
  /**
   * The origin of operations.
   */
  origin?: string;
}

/**
 * Display metadata associated with the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft Resource Graph.
   */
  provider?: string;
  /**
   * Resource on which the operation is performed etc.
   */
  resource?: string;
  /**
   * Type of operation: get, read, delete, etc.
   */
  operation?: string;
  /**
   * Description for the operation.
   */
  description?: string;
}

/**
 * Query output in tabular format.
 */
export interface Table {
  /**
   * Query result column descriptors.
   */
  columns: Column[];
  /**
   * Query result rows.
   */
  rows: any[][];
}

/**
 * Query result column descriptor.
 */
export interface Column {
  /**
   * Column name.
   */
  name: string;
  /**
   * Column data type.
   */
  type: ColumnDataType;
}

/**
 * Successfully executed facet containing additional statistics on the response of a query.
 */
export type FacetResult = Facet & {
  /**
   * Number of total records in the facet results.
   */
  totalRecords: number;
  /**
   * Number of records returned in the facet response.
   */
  count: number;
  /**
   * A table containing the desired facets. Only present if the facet is valid.
   */
  data: any;
};

/**
 * A facet whose execution resulted in an error.
 */
export type FacetError = Facet & {
  /**
   * An array containing detected facet errors with details.
   */
  errors: ErrorDetails[];
};
/**
 * Defines values for ResultFormat.
 */
export type ResultFormat = "table" | "objectArray";
/**
 * Defines values for FacetSortOrder.
 */
export type FacetSortOrder = "asc" | "desc";
/**
 * Defines values for ResultTruncated.
 */
export type ResultTruncated = "true" | "false";
/**
 * Defines values for ColumnDataType.
 */
export type ColumnDataType =
  | "string"
  | "integer"
  | "number"
  | "boolean"
  | "object";

/**
 * Contains response data for the resources operation.
 */
export type ResourceGraphClientResourcesResponse = QueryResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QueryResponse;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ResourceGraphClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
