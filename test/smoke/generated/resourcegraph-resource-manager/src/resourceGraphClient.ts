/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { ResourceGraphClientContext } from "./resourceGraphClientContext";
import { QueryRequest, ResourceGraphClientResourcesResponse } from "./models";

class ResourceGraphClient extends ResourceGraphClientContext {
  /**
   * Initializes a new instance of the ResourceGraphClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    options?: Models.ResourceGraphClientOptionalParams
  ) {
    super(credentials, options);
    this.operations = new operations.Operations(this);
  }

  /**
   * Queries the resources managed by Azure Resource Manager for all subscriptions specified in the
   * request.
   * @param query Request specifying query and its options.
   * @param options The options parameters.
   */
  resources(
    query: QueryRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ResourceGraphClientResourcesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { query, options: operationOptions },
      resourcesOperationSpec
    ) as Promise<ResourceGraphClientResourcesResponse>;
  }

  operations: operations.Operations;
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const resourcesOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ResourceGraph/resources",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.QueryResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.query,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};

// Operation Specifications

export {
  ResourceGraphClient,
  ResourceGraphClientContext,
  Models as ResourceGraphModels,
  Mappers as ResourceGraphMappers
};
export * from "./operations";
