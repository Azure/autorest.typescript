/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2018-10-15",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const environmentOperationsPayload: coreHttp.OperationParameter = {
  parameterPath: "environmentOperationsPayload",
  mapper: Mappers.EnvironmentOperationsPayload
};

export const userName: coreHttp.OperationURLParameter = {
  parameterPath: "userName",
  mapper: {
    serializedName: "userName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const operationBatchStatusPayload: coreHttp.OperationParameter = {
  parameterPath: "operationBatchStatusPayload",
  mapper: Mappers.OperationBatchStatusPayload
};

export const operationStatusPayload: coreHttp.OperationParameter = {
  parameterPath: "operationStatusPayload",
  mapper: Mappers.OperationStatusPayload
};

export const personalPreferencesOperationsPayload: coreHttp.OperationParameter = {
  parameterPath: "personalPreferencesOperationsPayload",
  mapper: Mappers.PersonalPreferencesOperationsPayload
};

export const listEnvironmentsPayload: coreHttp.OperationParameter = {
  parameterPath: "listEnvironmentsPayload",
  mapper: Mappers.ListEnvironmentsPayload
};

export const registerPayload: coreHttp.OperationParameter = {
  parameterPath: "registerPayload",
  mapper: Mappers.RegisterPayload
};

export const resetPasswordPayload: coreHttp.OperationParameter = {
  parameterPath: "resetPasswordPayload",
  mapper: Mappers.ResetPasswordPayload
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const top: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const orderby: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "orderby"],
  mapper: {
    serializedName: "$orderby",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const labAccountName: coreHttp.OperationURLParameter = {
  parameterPath: "labAccountName",
  mapper: {
    serializedName: "labAccountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const labAccount: coreHttp.OperationParameter = {
  parameterPath: "labAccount",
  mapper: Mappers.LabAccount
};

export const labAccount1: coreHttp.OperationParameter = {
  parameterPath: "labAccount",
  mapper: Mappers.LabAccountFragment
};

export const createLabProperties: coreHttp.OperationParameter = {
  parameterPath: "createLabProperties",
  mapper: Mappers.CreateLabProperties
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const locationName: coreHttp.OperationURLParameter = {
  parameterPath: "locationName",
  mapper: {
    serializedName: "locationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const operationName: coreHttp.OperationURLParameter = {
  parameterPath: "operationName",
  mapper: {
    serializedName: "operationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const galleryImageName: coreHttp.OperationURLParameter = {
  parameterPath: "galleryImageName",
  mapper: {
    serializedName: "galleryImageName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const galleryImage: coreHttp.OperationParameter = {
  parameterPath: "galleryImage",
  mapper: Mappers.GalleryImage
};

export const galleryImage1: coreHttp.OperationParameter = {
  parameterPath: "galleryImage",
  mapper: Mappers.GalleryImageFragment
};

export const expand3: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const labName: coreHttp.OperationURLParameter = {
  parameterPath: "labName",
  mapper: {
    serializedName: "labName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const lab: coreHttp.OperationParameter = {
  parameterPath: "lab",
  mapper: Mappers.Lab
};

export const lab1: coreHttp.OperationParameter = {
  parameterPath: "lab",
  mapper: Mappers.LabFragment
};

export const addUsersPayload: coreHttp.OperationParameter = {
  parameterPath: "addUsersPayload",
  mapper: Mappers.AddUsersPayload
};

export const expand4: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const environmentSettingName: coreHttp.OperationURLParameter = {
  parameterPath: "environmentSettingName",
  mapper: {
    serializedName: "environmentSettingName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const environmentSetting: coreHttp.OperationParameter = {
  parameterPath: "environmentSetting",
  mapper: Mappers.EnvironmentSetting
};

export const environmentSetting1: coreHttp.OperationParameter = {
  parameterPath: "environmentSetting",
  mapper: Mappers.EnvironmentSettingFragment
};

export const publishPayload: coreHttp.OperationParameter = {
  parameterPath: "publishPayload",
  mapper: Mappers.PublishPayload
};

export const expand5: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const environmentName: coreHttp.OperationURLParameter = {
  parameterPath: "environmentName",
  mapper: {
    serializedName: "environmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const environment: coreHttp.OperationParameter = {
  parameterPath: "environment",
  mapper: Mappers.Environment
};

export const environment1: coreHttp.OperationParameter = {
  parameterPath: "environment",
  mapper: Mappers.EnvironmentFragment
};

export const expand6: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const user: coreHttp.OperationParameter = {
  parameterPath: "user",
  mapper: Mappers.User
};

export const user1: coreHttp.OperationParameter = {
  parameterPath: "user",
  mapper: Mappers.UserFragment
};
