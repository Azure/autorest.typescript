/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Result of the request to list REST API operations
 */
export interface ProviderOperationResult {
  /**
   * List of operations supported by the resource provider.
   */
  value?: OperationMetadata[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  readonly nextLink?: string;
}

/**
 * The REST API operation supported by ManagedLab ResourceProvider.
 */
export interface OperationMetadata {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * The object that describes the operations
   */
  display?: OperationMetadataDisplay;
}

/**
 * The object that describes the operations
 */
export interface OperationMetadataDisplay {
  /**
   * Friendly name of the resource provider
   */
  provider?: string;
  /**
   * Resource type on which the operation is performed.
   */
  resource?: string;
  /**
   * Operation type: read, write, delete, listKeys/action, etc.
   */
  operation?: string;
  /**
   * Friendly name of the operation
   */
  description?: string;
}

/**
 * Represents payload for any Environment operations like get, start, stop, connect
 */
export interface EnvironmentOperationsPayload {
  /**
   * The resourceId of the environment
   */
  environmentId: string;
}

/**
 * Represents the environments details
 */
export interface GetEnvironmentResponse {
  /**
   * Details of the environment
   */
  readonly environment?: EnvironmentDetails;
}

/**
 * This represents the details about a User's environment and its state.
 */
export interface EnvironmentDetails {
  /**
   * Name of the Environment
   */
  readonly name?: string;
  /**
   * Description of the Environment
   */
  readonly description?: string;
  /**
   * Resource Id of the environment
   */
  readonly id?: string;
  /**
   * The provisioning state of the environment. This also includes LabIsFull and NotYetProvisioned status.
   */
  readonly provisioningState?: string;
  /**
   * Details of backing DTL virtual machine with compute and network details.
   */
  readonly virtualMachineDetails?: VirtualMachineDetails;
  /**
   * The details of the latest operation. ex: status, error
   */
  readonly latestOperationResult?: LatestOperationResult;
  /**
   * Publishing state of the environment setting Possible values are Creating, Created, Failed
   */
  readonly environmentState?: string;
  /**
   * How long the environment has been used by a lab user
   */
  readonly totalUsage?: string;
  /**
   * When the password was last reset on the environment.
   */
  readonly passwordLastReset?: Date;
}

/**
 * Details of the backing virtual machine.
 */
export interface VirtualMachineDetails {
  /**
   * Provisioning state of the Dtl VM
   */
  readonly provisioningState?: string;
  /**
   * Connection information for Windows
   */
  readonly rdpAuthority?: string;
  /**
   * Connection information for Linux
   */
  readonly sshAuthority?: string;
  /**
   * PrivateIp address of the compute VM
   */
  readonly privateIpAddress?: string;
  /**
   * Compute VM login user name
   */
  readonly userName?: string;
  /**
   * Last known compute power state captured in DTL
   */
  readonly lastKnownPowerState?: string;
}

/**
 * Details of the status of an operation.
 */
export interface LatestOperationResult {
  /**
   * The current status of the operation.
   */
  readonly status?: string;
  /**
   * Error code on failure.
   */
  readonly errorCode?: string;
  /**
   * The error message.
   */
  readonly errorMessage?: string;
  /**
   * Request URI of the operation.
   */
  readonly requestUri?: string;
  /**
   * The HttpMethod - PUT/POST/DELETE for the operation.
   */
  readonly httpMethod?: string;
  /**
   * The URL to use to check long-running operation status
   */
  readonly operationUrl?: string;
}

/**
 * Error from a REST request.
 */
export interface CloudError {
  /**
   * Body of an error from a REST request.
   */
  error?: CloudErrorBody;
}

/**
 * Body of an error from a REST request.
 */
export interface CloudErrorBody {
  code?: string;
  message?: string;
  target?: string;
  /**
   * Inner errors.
   */
  details?: CloudErrorBody[];
}

/**
 * Payload to get the status of an operation
 */
export interface OperationBatchStatusPayload {
  /**
   * The operation url of long running operation
   */
  urls: string[];
}

/**
 * Status Details of the long running operation for an environment
 */
export interface OperationBatchStatusResponse {
  /**
   * Gets a collection of items that contain the operation url and status.
   */
  readonly items?: OperationBatchStatusResponseItem[];
}

/**
 * Represents the status of an operation that used the batch API.
 */
export interface OperationBatchStatusResponseItem {
  /**
   * status of the long running operation for an environment
   */
  readonly operationUrl?: string;
  /**
   * status of the long running operation for an environment
   */
  readonly status?: string;
}

/**
 * Payload to get the status of an operation
 */
export interface OperationStatusPayload {
  /**
   * The operation url of long running operation
   */
  operationUrl: string;
}

/**
 * Status Details of the long running operation for an environment
 */
export interface OperationStatusResponse {
  /**
   * status of the long running operation for an environment
   */
  readonly status?: string;
}

/**
 * Represents payload for any Environment operations like get, start, stop, connect
 */
export interface PersonalPreferencesOperationsPayload {
  /**
   * Resource Id of the lab account
   */
  labAccountResourceId?: string;
  /**
   * Enum indicating if user is adding or removing a favorite lab
   */
  addRemove?: AddRemove;
  /**
   * Resource Id of the lab to add/remove from the favorites list
   */
  labResourceId?: string;
}

/**
 * Represents the PersonalPreferences for the user
 */
export interface GetPersonalPreferencesResponse {
  /**
   * Id to be used by the cache orchestrator
   */
  id?: string;
  /**
   * Array of favorite lab resource ids
   */
  favoriteLabResourceIds?: string[];
}

/**
 * Represents the payload to list environments owned by a user
 */
export interface ListEnvironmentsPayload {
  /**
   * The resource Id of the lab
   */
  labId?: string;
}

/**
 * Represents the list of environments owned by a user
 */
export interface ListEnvironmentsResponse {
  /**
   * List of all the environments
   */
  environments?: EnvironmentDetails[];
}

/**
 * Lists the labs owned by a user
 */
export interface ListLabsResponse {
  /**
   * List of all the labs
   */
  labs?: LabDetails[];
}

/**
 * This represents the details about a lab that the User is in, and its state.
 */
export interface LabDetails {
  /**
   * Name of the lab
   */
  name?: string;
  /**
   * The provisioning state of the lab.
   */
  provisioningState?: string;
  /**
   * The Id of the lab.
   */
  id?: string;
  /**
   * The maximum duration a user can use a VM in this lab.
   */
  readonly usageQuota?: string;
}

/**
 * Represents payload for Register action.
 */
export interface RegisterPayload {
  /**
   * The registration code of the lab.
   */
  registrationCode?: string;
}

/**
 * Represents the payload for resetting passwords.
 */
export interface ResetPasswordPayload {
  /**
   * The resourceId of the environment
   */
  environmentId: string;
  /**
   * The username for which the password will be reset.
   */
  username?: string;
  /**
   * The password to assign to the user specified in
   */
  password?: string;
}

/**
 * The response of a list operation.
 */
export interface ResponseWithContinuationLabAccount {
  /**
   * Results of the list operation.
   */
  value?: LabAccount[];
  /**
   * Link for next set of results.
   */
  nextLink?: string;
}

/**
 * An Azure resource.
 */
export interface Resource {
  /**
   * The identifier of the resource.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   */
  readonly type?: string;
  /**
   * The location of the resource.
   */
  location?: string;
  /**
   * The tags of the resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Represents a lab account.
 */
export type LabAccount = Resource & {
  /**
   * Represents the size configuration under the lab account
   */
  readonly sizeConfiguration?: SizeConfigurationProperties;
  /**
   * Represents if region selection is enabled
   */
  enabledRegionSelection?: boolean;
  /**
   * The provisioning status of the resource.
   */
  provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   */
  uniqueIdentifier?: string;
  /**
   * The details of the latest operation. ex: status, error
   */
  readonly latestOperationResult?: LatestOperationResult;
};

/**
 * Represents the size configuration under the lab account
 */
export interface SizeConfigurationProperties {
  /**
   * Represents a list of size categories supported by this Lab Account (Small, Medium, Large)
   */
  environmentSizes?: EnvironmentSize[];
}

/**
 * Represents a size category supported by this Lab Account (small, medium or large)
 */
export interface EnvironmentSize {
  /**
   * The size category
   */
  name?: ManagedLabVmSize;
  /**
   * Represents a set of compute sizes that can serve this given size type
   */
  vmSizes?: SizeInfo[];
  /**
   * The pay-as-you-go dollar price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost. This is the maximum price of all prices within this tier.
   */
  readonly maxPrice?: number;
  /**
   * The number of cores a VM of this size has. This is the minimum number of cores within this tier.
   */
  readonly minNumberOfCores?: number;
  /**
   * The amount of memory available (in GB). This is the minimum amount of memory within this tier.
   */
  readonly minMemory?: number;
}

/**
 * Contains detailed information about a size
 */
export interface SizeInfo {
  /**
   * Represents the actual compute size, e.g. Standard_A2_v2.
   */
  computeSize?: string;
  /**
   * The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.
   */
  price?: number;
  /**
   * The number of cores a VM of this size has.
   */
  numberOfCores?: number;
  /**
   * The amount of memory available (in GB).
   */
  memory?: number;
}

/**
 * An Operation Result
 */
export interface OperationResult {
  /**
   * The operation status.
   */
  status?: string;
  /**
   * Error details for the operation in case of a failure.
   */
  error?: OperationError;
}

/**
 * Error details for the operation in case of a failure.
 */
export interface OperationError {
  /**
   * The error code of the operation error.
   */
  code?: string;
  /**
   * The error message of the operation error.
   */
  message?: string;
}

/**
 * Represents a lab account.
 */
export type LabAccountFragment = Resource & {
  /**
   * Represents if region selection is enabled
   */
  enabledRegionSelection?: boolean;
  /**
   * The provisioning status of the resource.
   */
  provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   */
  uniqueIdentifier?: string;
};

/**
 * Properties for creating a managed lab and a default environment setting
 */
export interface CreateLabProperties {
  /**
   * Settings related to creating an environment setting
   */
  environmentSettingCreationParameters?: EnvironmentSettingCreationParameters;
  /**
   * Settings related to creating a lab
   */
  labCreationParameters: LabCreationParameters;
  /**
   * The name of the resource
   */
  name: string;
  /**
   * The location of the resource
   */
  location?: string;
  /**
   * The tags of the resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Settings related to creating an environment setting
 */
export interface EnvironmentSettingCreationParameters {
  /**
   * The resource specific settings
   */
  resourceSettingCreationParameters: ResourceSettingCreationParameters;
}

/**
 * Represents resource specific settings
 */
export interface ResourceSettingCreationParameters {
  /**
   * The location where the virtual machine will live
   */
  location?: string;
  /**
   * The name of the resource setting
   */
  name?: string;
  /**
   * The resource id of the gallery image used for creating the virtual machine
   */
  galleryImageResourceId: string;
  /**
   * The size of the virtual machine
   */
  size?: ManagedLabVmSize;
  /**
   * Creation parameters for Reference Vm
   */
  referenceVmCreationParameters: ReferenceVmCreationParameters;
}

/**
 * Creation parameters for Reference Vm
 */
export interface ReferenceVmCreationParameters {
  /**
   * The username of the virtual machine
   */
  userName: string;
  /**
   * The password of the virtual machine.
   */
  password: string;
}

/**
 * Settings related to creating a lab
 */
export interface LabCreationParameters {
  /**
   * Maximum number of users allowed in the lab.
   */
  maxUsersInLab?: number;
}

/**
 * The response of a list operation.
 */
export interface ResponseWithContinuationGalleryImage {
  /**
   * Results of the list operation.
   */
  value?: GalleryImage[];
  /**
   * Link for next set of results.
   */
  nextLink?: string;
}

/**
 * Represents an image from the Azure Marketplace
 */
export type GalleryImage = Resource & {
  /**
   * The author of the gallery image.
   */
  readonly author?: string;
  /**
   * The creation date of the gallery image.
   */
  readonly createdDate?: Date;
  /**
   * The description of the gallery image.
   */
  readonly description?: string;
  /**
   * The image reference of the gallery image.
   */
  readonly imageReference?: GalleryImageReference;
  /**
   * The icon of the gallery image.
   */
  readonly icon?: string;
  /**
   * Indicates whether this gallery image is enabled.
   */
  isEnabled?: boolean;
  /**
   * Indicates whether this gallery has been overridden for this lab account
   */
  isOverride?: boolean;
  /**
   * The third party plan that applies to this image
   */
  readonly planId?: string;
  /**
   * Indicates if the plan has been authorized for programmatic deployment.
   */
  isPlanAuthorized?: boolean;
  /**
   * The provisioning status of the resource.
   */
  provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   */
  uniqueIdentifier?: string;
  /**
   * The details of the latest operation. ex: status, error
   */
  readonly latestOperationResult?: LatestOperationResult;
};

/**
 * The reference information for an Azure Marketplace image.
 */
export interface GalleryImageReference {
  /**
   * The offer of the gallery image.
   */
  offer?: string;
  /**
   * The publisher of the gallery image.
   */
  publisher?: string;
  /**
   * The SKU of the gallery image.
   */
  sku?: string;
  /**
   * The OS type of the gallery image.
   */
  osType?: string;
  /**
   * The version of the gallery image.
   */
  version?: string;
}

/**
 * Represents an image from the Azure Marketplace
 */
export type GalleryImageFragment = Resource & {
  /**
   * Indicates whether this gallery image is enabled.
   */
  isEnabled?: boolean;
  /**
   * Indicates whether this gallery has been overridden for this lab account
   */
  isOverride?: boolean;
  /**
   * Indicates if the plan has been authorized for programmatic deployment.
   */
  isPlanAuthorized?: boolean;
  /**
   * The provisioning status of the resource.
   */
  provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   */
  uniqueIdentifier?: string;
};

/**
 * The response model from the GetRegionalAvailability action
 */
export interface GetRegionalAvailabilityResponse {
  /**
   * Availability information for different size categories per region
   */
  regionalAvailability?: RegionalAvailability[];
}

/**
 * The availability information of sizes across regions
 */
export interface RegionalAvailability {
  /**
   * Corresponding region
   */
  region?: string;
  /**
   * List of all the size information for the region
   */
  sizeAvailabilities?: SizeAvailability[];
}

/**
 * Represents the size information
 */
export interface SizeAvailability {
  /**
   * The category of the size (Basic, Standard, Performance).
   */
  sizeCategory?: ManagedLabVmSize;
  /**
   * Whether or not this size category is available
   */
  isAvailable?: boolean;
}

/**
 * The response of a list operation.
 */
export interface ResponseWithContinuationLab {
  /**
   * Results of the list operation.
   */
  value?: Lab[];
  /**
   * Link for next set of results.
   */
  nextLink?: string;
}

/**
 * Represents a lab.
 */
export type Lab = Resource & {
  /**
   * Maximum number of users allowed in the lab.
   */
  maxUsersInLab?: number;
  /**
   * Maximum value MaxUsersInLab can be set to, as specified by the service
   */
  readonly userQuota?: number;
  /**
   * Invitation code that users can use to join a lab.
   */
  readonly invitationCode?: string;
  /**
   * Object id of the user that created the lab.
   */
  readonly createdByObjectId?: string;
  /**
   * Maximum duration a user can use an environment for in the lab.
   */
  usageQuota?: string;
  /**
   * Lab user access mode (open to all vs. restricted to those listed on the lab).
   */
  userAccessMode?: LabUserAccessMode;
  /**
   * Lab creator name
   */
  readonly createdByUserPrincipalName?: string;
  /**
   * Creation date for the lab
   */
  readonly createdDate?: Date;
  /**
   * The provisioning status of the resource.
   */
  provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   */
  uniqueIdentifier?: string;
  /**
   * The details of the latest operation. ex: status, error
   */
  readonly latestOperationResult?: LatestOperationResult;
};

/**
 * Represents a lab.
 */
export type LabFragment = Resource & {
  /**
   * Maximum number of users allowed in the lab.
   */
  maxUsersInLab?: number;
  /**
   * Maximum duration a user can use an environment for in the lab.
   */
  usageQuota?: string;
  /**
   * Lab user access mode (open to all vs. restricted to those listed on the lab).
   */
  userAccessMode?: LabUserAccessMode;
  /**
   * The provisioning status of the resource.
   */
  provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   */
  uniqueIdentifier?: string;
};

/**
 * Payload for Add Users operation on a Lab.
 */
export interface AddUsersPayload {
  /**
   * List of user emails addresses to add to the lab.
   */
  emailAddresses: string[];
}

/**
 * The response of a list operation.
 */
export interface ResponseWithContinuationEnvironmentSetting {
  /**
   * Results of the list operation.
   */
  value?: EnvironmentSetting[];
  /**
   * Link for next set of results.
   */
  nextLink?: string;
}

/**
 * Represents settings of an environment, from which environment instances would be created
 */
export type EnvironmentSetting = Resource & {
  /**
   * Describes the readiness of this environment setting
   */
  readonly publishingState?: PublishingState;
  /**
   * Describes the user's progress in configuring their environment setting
   */
  configurationState?: ConfigurationState;
  /**
   * Describes the environment and its resource settings
   */
  description?: string;
  /**
   * Brief title describing the environment and its resource settings
   */
  title?: string;
  /**
   * The resource specific settings
   */
  resourceSettings?: ResourceSettings;
  /**
   * Time when the template VM was last changed.
   */
  readonly lastChanged?: Date;
  /**
   * Time when the template VM was last sent for publishing.
   */
  readonly lastPublished?: Date;
  /**
   * The provisioning status of the resource.
   */
  provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   */
  uniqueIdentifier?: string;
  /**
   * The details of the latest operation. ex: status, error
   */
  readonly latestOperationResult?: LatestOperationResult;
};

/**
 * Represents resource specific settings
 */
export interface ResourceSettings {
  /**
   * The unique id of the resource setting
   */
  readonly id?: string;
  /**
   * The resource id of the gallery image used for creating the virtual machine
   */
  galleryImageResourceId?: string;
  /**
   * The name of the image used to created the environment setting
   */
  readonly imageName?: string;
  /**
   * The size of the virtual machine
   */
  size?: ManagedLabVmSize;
  /**
   * The translated compute cores of the virtual machine
   */
  readonly cores?: number;
  /**
   * Details specific to Reference Vm
   */
  referenceVm: ReferenceVm;
}

/**
 * Details of a Reference Vm
 */
export interface ReferenceVm {
  /**
   * The username of the virtual machine
   */
  userName: string;
  /**
   * The password of the virtual machine. This will be set to null in GET resource API
   */
  password?: string;
  /**
   * The state details for the reference virtual machine.
   */
  readonly vmStateDetails?: VmStateDetails;
  /**
   * VM resource Id for the environment
   */
  readonly vmResourceId?: string;
}

/**
 * Details about the state of the reference virtual machine.
 */
export interface VmStateDetails {
  /**
   * The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
   */
  readonly rdpAuthority?: string;
  /**
   * The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
   */
  readonly sshAuthority?: string;
  /**
   * The power state of the reference virtual machine.
   */
  readonly powerState?: string;
  /**
   * Last known compute power state captured in DTL
   */
  readonly lastKnownPowerState?: string;
}

/**
 * Represents settings of an environment, from which environment instances would be created
 */
export type EnvironmentSettingFragment = Resource & {
  /**
   * Describes the user's progress in configuring their environment setting
   */
  configurationState?: ConfigurationState;
  /**
   * Describes the environment and its resource settings
   */
  description?: string;
  /**
   * Brief title describing the environment and its resource settings
   */
  title?: string;
  /**
   * The resource specific settings
   */
  resourceSettings?: ResourceSettingsFragment;
  /**
   * The provisioning status of the resource.
   */
  provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   */
  uniqueIdentifier?: string;
};

/**
 * Represents resource specific settings
 */
export interface ResourceSettingsFragment {
  /**
   * The resource id of the gallery image used for creating the virtual machine
   */
  galleryImageResourceId?: string;
  /**
   * The size of the virtual machine
   */
  size?: ManagedLabVmSize;
  /**
   * Details specific to Reference Vm
   */
  referenceVm?: ReferenceVmFragment;
}

/**
 * Details of a Reference Vm
 */
export interface ReferenceVmFragment {
  /**
   * The username of the virtual machine
   */
  userName?: string;
  /**
   * The password of the virtual machine. This will be set to null in GET resource API
   */
  password?: string;
}

/**
 * The response of a list operation.
 */
export interface ResponseWithContinuationEnvironment {
  /**
   * Results of the list operation.
   */
  value?: Environment[];
  /**
   * Link for next set of results.
   */
  nextLink?: string;
}

/**
 * Represents an environment instance
 */
export type Environment = Resource & {
  /**
   * The set of a VM and the setting id it was created for
   */
  resourceSets?: ResourceSet;
  /**
   * The AAD object Id of the user who has claimed the environment
   */
  readonly claimedByUserObjectId?: string;
  /**
   * The user principal Id of the user who has claimed the environment
   */
  readonly claimedByUserPrincipalId?: string;
  /**
   * The name or email address of the user who has claimed the environment
   */
  readonly claimedByUserName?: string;
  /**
   * Is the environment claimed or not
   */
  readonly isClaimed?: boolean;
  /**
   * Last known power state of the environment
   */
  readonly lastKnownPowerState?: string;
  /**
   * Network details of the environment
   */
  readonly networkInterface?: NetworkInterface;
  /**
   * How long the environment has been used by a lab user
   */
  readonly totalUsage?: string;
  /**
   * When the password was last reset on the environment.
   */
  readonly passwordLastReset?: Date;
  /**
   * The provisioning status of the resource.
   */
  provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   */
  uniqueIdentifier?: string;
  /**
   * The details of the latest operation. ex: status, error
   */
  readonly latestOperationResult?: LatestOperationResult;
};

/**
 * Represents a VM and the setting Id it was created for.
 */
export interface ResourceSet {
  /**
   * VM resource Id for the environment
   */
  vmResourceId?: string;
  /**
   * resourceSettingId for the environment
   */
  resourceSettingId?: string;
}

/**
 * Network details of the environment
 */
export interface NetworkInterface {
  /**
   * PrivateIp address of the Compute VM
   */
  readonly privateIpAddress?: string;
  /**
   * Connection information for Linux
   */
  readonly sshAuthority?: string;
  /**
   * Connection information for Windows
   */
  readonly rdpAuthority?: string;
  /**
   * Username of the VM
   */
  readonly username?: string;
}

/**
 * Represents an environment instance
 */
export type EnvironmentFragment = Resource & {
  /**
   * The set of a VM and the setting id it was created for
   */
  resourceSets?: ResourceSetFragment;
  /**
   * The provisioning status of the resource.
   */
  provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   */
  uniqueIdentifier?: string;
};

/**
 * Represents a VM and the setting Id it was created for.
 */
export interface ResourceSetFragment {
  /**
   * VM resource Id for the environment
   */
  vmResourceId?: string;
  /**
   * resourceSettingId for the environment
   */
  resourceSettingId?: string;
}

/**
 * Payload for Publish operation on EnvironmentSetting.
 */
export interface PublishPayload {
  /**
   * Whether to use existing VM custom image when publishing.
   */
  useExistingImage?: boolean;
}

/**
 * The response of a list operation.
 */
export interface ResponseWithContinuationUser {
  /**
   * Results of the list operation.
   */
  value?: User[];
  /**
   * Link for next set of results.
   */
  nextLink?: string;
}

/**
 * The User registered to a lab
 */
export type User = Resource & {
  /**
   * The user email address, as it was specified during registration.
   */
  readonly email?: string;
  /**
   * The user family name, as it was specified during registration.
   */
  readonly familyName?: string;
  /**
   * The user given name, as it was specified during registration.
   */
  readonly givenName?: string;
  /**
   * The user tenant ID, as it was specified during registration.
   */
  readonly tenantId?: string;
  /**
   * How long the user has used his VMs in this lab
   */
  readonly totalUsage?: string;
  /**
   * The provisioning status of the resource.
   */
  provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   */
  uniqueIdentifier?: string;
  /**
   * The details of the latest operation. ex: status, error
   */
  readonly latestOperationResult?: LatestOperationResult;
};

/**
 * The User registered to a lab
 */
export type UserFragment = Resource & {
  /**
   * The provisioning status of the resource.
   */
  provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   */
  uniqueIdentifier?: string;
};

/**
 * Represents a size category supported by this Lab Account (small, medium or large)
 */
export interface EnvironmentSizeFragment {
  /**
   * The size category
   */
  name?: ManagedLabVmSize;
  /**
   * Represents a set of compute sizes that can serve this given size type
   */
  vmSizes?: SizeInfoFragment[];
}

/**
 * Contains detailed information about a size
 */
export interface SizeInfoFragment {
  /**
   * Represents the actual compute size, e.g. Standard_A2_v2.
   */
  computeSize?: string;
  /**
   * The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.
   */
  price?: number;
  /**
   * The number of cores a VM of this size has.
   */
  numberOfCores?: number;
  /**
   * The amount of memory available (in GB).
   */
  memory?: number;
}

/**
 * The reference information for an Azure Marketplace image.
 */
export interface GalleryImageReferenceFragment {
  /**
   * The offer of the gallery image.
   */
  offer?: string;
  /**
   * The publisher of the gallery image.
   */
  publisher?: string;
  /**
   * The SKU of the gallery image.
   */
  sku?: string;
  /**
   * The OS type of the gallery image.
   */
  osType?: string;
  /**
   * The version of the gallery image.
   */
  version?: string;
}

/**
 * Represents the size configuration under the lab account
 */
export interface SizeConfigurationPropertiesFragment {
  /**
   * Represents a list of size categories supported by this Lab Account (Small, Medium, Large)
   */
  environmentSizes?: EnvironmentSizeFragment[];
}

/**
 * Defines values for AddRemove.
 */
export type AddRemove = "Add" | "Remove";
/**
 * Defines values for ManagedLabVmSize.
 */
export type ManagedLabVmSize = "Basic" | "Standard" | "Performance";
/**
 * Defines values for LabUserAccessMode.
 */
export type LabUserAccessMode = "Restricted" | "Open";
/**
 * Defines values for PublishingState.
 */
export type PublishingState =
  | "Draft"
  | "Publishing"
  | "Published"
  | "PublishFailed"
  | "Scaling";
/**
 * Defines values for ConfigurationState.
 */
export type ConfigurationState = "NotApplicable" | "Completed";

/**
 * Contains response data for the list operation.
 */
export type ProviderOperationsListResponse = ProviderOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProviderOperationResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ProviderOperationsListNextResponse = ProviderOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProviderOperationResult;
  };
};

/**
 * Optional parameters.
 */
export interface GlobalUsersGetEnvironmentOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify the $expand query. Example: 'properties($expand=environment)'
   */
  expand?: string;
}

/**
 * Contains response data for the getEnvironment operation.
 */
export type GlobalUsersGetEnvironmentResponse = GetEnvironmentResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GetEnvironmentResponse;
  };
};

/**
 * Contains response data for the getOperationBatchStatus operation.
 */
export type GlobalUsersGetOperationBatchStatusResponse = OperationBatchStatusResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationBatchStatusResponse;
  };
};

/**
 * Contains response data for the getOperationStatus operation.
 */
export type GlobalUsersGetOperationStatusResponse = OperationStatusResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationStatusResponse;
  };
};

/**
 * Contains response data for the getPersonalPreferences operation.
 */
export type GlobalUsersGetPersonalPreferencesResponse = GetPersonalPreferencesResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GetPersonalPreferencesResponse;
  };
};

/**
 * Contains response data for the listEnvironments operation.
 */
export type GlobalUsersListEnvironmentsResponse = ListEnvironmentsResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListEnvironmentsResponse;
  };
};

/**
 * Contains response data for the listLabs operation.
 */
export type GlobalUsersListLabsResponse = ListLabsResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListLabsResponse;
  };
};

/**
 * Optional parameters.
 */
export interface LabAccountsListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
   */
  expand?: string;
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type LabAccountsListBySubscriptionResponse = ResponseWithContinuationLabAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationLabAccount;
  };
};

/**
 * Optional parameters.
 */
export interface LabAccountsListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
   */
  expand?: string;
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type LabAccountsListByResourceGroupResponse = ResponseWithContinuationLabAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationLabAccount;
  };
};

/**
 * Optional parameters.
 */
export interface LabAccountsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type LabAccountsGetResponse = LabAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LabAccount;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LabAccountsCreateOrUpdateResponse = LabAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LabAccount;
  };
};

/**
 * Contains response data for the update operation.
 */
export type LabAccountsUpdateResponse = LabAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LabAccount;
  };
};

/**
 * Contains response data for the getRegionalAvailability operation.
 */
export type LabAccountsGetRegionalAvailabilityResponse = GetRegionalAvailabilityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GetRegionalAvailabilityResponse;
  };
};

/**
 * Optional parameters.
 */
export interface LabAccountsListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
   */
  expand?: string;
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type LabAccountsListBySubscriptionNextResponse = ResponseWithContinuationLabAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationLabAccount;
  };
};

/**
 * Optional parameters.
 */
export interface LabAccountsListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
   */
  expand?: string;
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type LabAccountsListByResourceGroupNextResponse = ResponseWithContinuationLabAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationLabAccount;
  };
};

/**
 * Contains response data for the get operation.
 */
export type OperationsGetResponse = OperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationResult;
  };
};

/**
 * Optional parameters.
 */
export interface GalleryImagesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
  /**
   * Specify the $expand query. Example: 'properties($select=author)'
   */
  expand?: string;
}

/**
 * Contains response data for the list operation.
 */
export type GalleryImagesListResponse = ResponseWithContinuationGalleryImage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationGalleryImage;
  };
};

/**
 * Optional parameters.
 */
export interface GalleryImagesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify the $expand query. Example: 'properties($select=author)'
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type GalleryImagesGetResponse = GalleryImage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryImage;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GalleryImagesCreateOrUpdateResponse = GalleryImage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryImage;
  };
};

/**
 * Contains response data for the update operation.
 */
export type GalleryImagesUpdateResponse = GalleryImage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryImage;
  };
};

/**
 * Optional parameters.
 */
export interface GalleryImagesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
  /**
   * Specify the $expand query. Example: 'properties($select=author)'
   */
  expand?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type GalleryImagesListNextResponse = ResponseWithContinuationGalleryImage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationGalleryImage;
  };
};

/**
 * Optional parameters.
 */
export interface LabsListOptionalParams extends coreHttp.OperationOptions {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
  /**
   * Specify the $expand query. Example: 'properties($select=maxUsersInLab)'
   */
  expand?: string;
}

/**
 * Contains response data for the list operation.
 */
export type LabsListResponse = ResponseWithContinuationLab & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationLab;
  };
};

/**
 * Optional parameters.
 */
export interface LabsGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Specify the $expand query. Example: 'properties($select=maxUsersInLab)'
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type LabsGetResponse = Lab & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Lab;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LabsCreateOrUpdateResponse = Lab & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Lab;
  };
};

/**
 * Contains response data for the update operation.
 */
export type LabsUpdateResponse = Lab & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Lab;
  };
};

/**
 * Optional parameters.
 */
export interface LabsListNextOptionalParams extends coreHttp.OperationOptions {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
  /**
   * Specify the $expand query. Example: 'properties($select=maxUsersInLab)'
   */
  expand?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type LabsListNextResponse = ResponseWithContinuationLab & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationLab;
  };
};

/**
 * Optional parameters.
 */
export interface EnvironmentSettingsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
  /**
   * Specify the $expand query. Example: 'properties($select=publishingState)'
   */
  expand?: string;
}

/**
 * Contains response data for the list operation.
 */
export type EnvironmentSettingsListResponse = ResponseWithContinuationEnvironmentSetting & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationEnvironmentSetting;
  };
};

/**
 * Optional parameters.
 */
export interface EnvironmentSettingsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify the $expand query. Example: 'properties($select=publishingState)'
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type EnvironmentSettingsGetResponse = EnvironmentSetting & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EnvironmentSetting;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type EnvironmentSettingsCreateOrUpdateResponse = EnvironmentSetting & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EnvironmentSetting;
  };
};

/**
 * Contains response data for the update operation.
 */
export type EnvironmentSettingsUpdateResponse = EnvironmentSetting & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EnvironmentSetting;
  };
};

/**
 * Optional parameters.
 */
export interface EnvironmentSettingsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
  /**
   * Specify the $expand query. Example: 'properties($select=publishingState)'
   */
  expand?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type EnvironmentSettingsListNextResponse = ResponseWithContinuationEnvironmentSetting & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationEnvironmentSetting;
  };
};

/**
 * Optional parameters.
 */
export interface EnvironmentsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
  /**
   * Specify the $expand query. Example: 'properties($expand=networkInterface)'
   */
  expand?: string;
}

/**
 * Contains response data for the list operation.
 */
export type EnvironmentsListResponse = ResponseWithContinuationEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationEnvironment;
  };
};

/**
 * Optional parameters.
 */
export interface EnvironmentsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify the $expand query. Example: 'properties($expand=networkInterface)'
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type EnvironmentsGetResponse = Environment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Environment;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type EnvironmentsCreateOrUpdateResponse = Environment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Environment;
  };
};

/**
 * Contains response data for the update operation.
 */
export type EnvironmentsUpdateResponse = Environment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Environment;
  };
};

/**
 * Optional parameters.
 */
export interface EnvironmentsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
  /**
   * Specify the $expand query. Example: 'properties($expand=networkInterface)'
   */
  expand?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type EnvironmentsListNextResponse = ResponseWithContinuationEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationEnvironment;
  };
};

/**
 * Optional parameters.
 */
export interface UsersListOptionalParams extends coreHttp.OperationOptions {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
  /**
   * Specify the $expand query. Example: 'properties($select=email)'
   */
  expand?: string;
}

/**
 * Contains response data for the list operation.
 */
export type UsersListResponse = ResponseWithContinuationUser & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationUser;
  };
};

/**
 * Optional parameters.
 */
export interface UsersGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Specify the $expand query. Example: 'properties($select=email)'
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type UsersGetResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: User;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type UsersCreateOrUpdateResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: User;
  };
};

/**
 * Contains response data for the update operation.
 */
export type UsersUpdateResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: User;
  };
};

/**
 * Optional parameters.
 */
export interface UsersListNextOptionalParams extends coreHttp.OperationOptions {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The maximum number of resources to return from the operation.
   */
  top?: number;
  /**
   * The ordering expression for the results, using OData notation.
   */
  orderby?: string;
  /**
   * Specify the $expand query. Example: 'properties($select=email)'
   */
  expand?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type UsersListNextResponse = ResponseWithContinuationUser & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResponseWithContinuationUser;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedLabsClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
