/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const ProviderOperationResult: coreHttp.CompositeMapper = {
  serializedName: "ProviderOperationResult",
  type: {
    name: "Composite",
    className: "ProviderOperationResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "OperationMetadata" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetadata: coreHttp.CompositeMapper = {
  serializedName: "OperationMetadata",
  type: {
    name: "Composite",
    className: "OperationMetadata",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationMetadataDisplay"
        }
      }
    }
  }
};

export const OperationMetadataDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationMetadataDisplay",
  type: {
    name: "Composite",
    className: "OperationMetadataDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentOperationsPayload: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentOperationsPayload",
  type: {
    name: "Composite",
    className: "EnvironmentOperationsPayload",
    modelProperties: {
      environmentId: {
        serializedName: "environmentId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetEnvironmentResponse: coreHttp.CompositeMapper = {
  serializedName: "GetEnvironmentResponse",
  type: {
    name: "Composite",
    className: "GetEnvironmentResponse",
    modelProperties: {
      environment: {
        serializedName: "environment",
        type: {
          name: "Composite",
          className: "EnvironmentDetails"
        }
      }
    }
  }
};

export const EnvironmentDetails: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentDetails",
  type: {
    name: "Composite",
    className: "EnvironmentDetails",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualMachineDetails: {
        serializedName: "virtualMachineDetails",
        type: {
          name: "Composite",
          className: "VirtualMachineDetails"
        }
      },
      latestOperationResult: {
        serializedName: "latestOperationResult",
        type: {
          name: "Composite",
          className: "LatestOperationResult"
        }
      },
      environmentState: {
        serializedName: "environmentState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalUsage: {
        serializedName: "totalUsage",
        readOnly: true,
        type: {
          name: "TimeSpan"
        }
      },
      passwordLastReset: {
        serializedName: "passwordLastReset",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const VirtualMachineDetails: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachineDetails",
  type: {
    name: "Composite",
    className: "VirtualMachineDetails",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rdpAuthority: {
        serializedName: "rdpAuthority",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sshAuthority: {
        serializedName: "sshAuthority",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIpAddress: {
        serializedName: "privateIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "userName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastKnownPowerState: {
        serializedName: "lastKnownPowerState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LatestOperationResult: coreHttp.CompositeMapper = {
  serializedName: "LatestOperationResult",
  type: {
    name: "Composite",
    className: "LatestOperationResult",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requestUri: {
        serializedName: "requestUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      httpMethod: {
        serializedName: "httpMethod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationUrl: {
        serializedName: "operationUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreHttp.CompositeMapper = {
  serializedName: "CloudError",
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreHttp.CompositeMapper = {
  serializedName: "CloudErrorBody",
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudErrorBody" } }
        }
      }
    }
  }
};

export const OperationBatchStatusPayload: coreHttp.CompositeMapper = {
  serializedName: "OperationBatchStatusPayload",
  type: {
    name: "Composite",
    className: "OperationBatchStatusPayload",
    modelProperties: {
      urls: {
        serializedName: "urls",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "OperationBatchStatusPayloadUrlsItem"
          }
        }
      }
    }
  }
};

export const OperationBatchStatusResponse: coreHttp.CompositeMapper = {
  serializedName: "OperationBatchStatusResponse",
  type: {
    name: "Composite",
    className: "OperationBatchStatusResponse",
    modelProperties: {
      items: {
        serializedName: "items",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationBatchStatusResponseItem"
            }
          }
        }
      }
    }
  }
};

export const OperationBatchStatusResponseItem: coreHttp.CompositeMapper = {
  serializedName: "OperationBatchStatusResponseItem",
  type: {
    name: "Composite",
    className: "OperationBatchStatusResponseItem",
    modelProperties: {
      operationUrl: {
        serializedName: "operationUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatusPayload: coreHttp.CompositeMapper = {
  serializedName: "OperationStatusPayload",
  type: {
    name: "Composite",
    className: "OperationStatusPayload",
    modelProperties: {
      operationUrl: {
        serializedName: "operationUrl",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatusResponse: coreHttp.CompositeMapper = {
  serializedName: "OperationStatusResponse",
  type: {
    name: "Composite",
    className: "OperationStatusResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PersonalPreferencesOperationsPayload: coreHttp.CompositeMapper = {
  serializedName: "PersonalPreferencesOperationsPayload",
  type: {
    name: "Composite",
    className: "PersonalPreferencesOperationsPayload",
    modelProperties: {
      labAccountResourceId: {
        serializedName: "labAccountResourceId",
        type: {
          name: "String"
        }
      },
      addRemove: {
        serializedName: "addRemove",
        type: {
          name: "String"
        }
      },
      labResourceId: {
        serializedName: "labResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetPersonalPreferencesResponse: coreHttp.CompositeMapper = {
  serializedName: "GetPersonalPreferencesResponse",
  type: {
    name: "Composite",
    className: "GetPersonalPreferencesResponse",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      favoriteLabResourceIds: {
        serializedName: "favoriteLabResourceIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "GetPersonalPreferencesResponseFavoriteLabResourceIdsItem"
          }
        }
      }
    }
  }
};

export const ListEnvironmentsPayload: coreHttp.CompositeMapper = {
  serializedName: "ListEnvironmentsPayload",
  type: {
    name: "Composite",
    className: "ListEnvironmentsPayload",
    modelProperties: {
      labId: {
        serializedName: "labId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListEnvironmentsResponse: coreHttp.CompositeMapper = {
  serializedName: "ListEnvironmentsResponse",
  type: {
    name: "Composite",
    className: "ListEnvironmentsResponse",
    modelProperties: {
      environments: {
        serializedName: "environments",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentDetails" }
          }
        }
      }
    }
  }
};

export const ListLabsResponse: coreHttp.CompositeMapper = {
  serializedName: "ListLabsResponse",
  type: {
    name: "Composite",
    className: "ListLabsResponse",
    modelProperties: {
      labs: {
        serializedName: "labs",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "LabDetails" } }
        }
      }
    }
  }
};

export const LabDetails: coreHttp.CompositeMapper = {
  serializedName: "LabDetails",
  type: {
    name: "Composite",
    className: "LabDetails",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      usageQuota: {
        serializedName: "usageQuota",
        readOnly: true,
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const RegisterPayload: coreHttp.CompositeMapper = {
  serializedName: "RegisterPayload",
  type: {
    name: "Composite",
    className: "RegisterPayload",
    modelProperties: {
      registrationCode: {
        serializedName: "registrationCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResetPasswordPayload: coreHttp.CompositeMapper = {
  serializedName: "ResetPasswordPayload",
  type: {
    name: "Composite",
    className: "ResetPasswordPayload",
    modelProperties: {
      environmentId: {
        serializedName: "environmentId",
        required: true,
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResponseWithContinuationLabAccount: coreHttp.CompositeMapper = {
  serializedName: "ResponseWithContinuationLabAccount",
  type: {
    name: "Composite",
    className: "ResponseWithContinuationLabAccount",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "LabAccount" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const LabAccount: coreHttp.CompositeMapper = {
  serializedName: "LabAccount",
  type: {
    name: "Composite",
    className: "LabAccount",
    modelProperties: {
      ...Resource.type.modelProperties,
      sizeConfiguration: {
        serializedName: "sizeConfiguration",
        type: {
          name: "Composite",
          className: "SizeConfigurationProperties"
        }
      },
      enabledRegionSelection: {
        serializedName: "properties.enabledRegionSelection",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        type: {
          name: "String"
        }
      },
      latestOperationResult: {
        serializedName: "latestOperationResult",
        type: {
          name: "Composite",
          className: "LatestOperationResult"
        }
      }
    }
  }
};

export const SizeConfigurationProperties: coreHttp.CompositeMapper = {
  serializedName: "SizeConfigurationProperties",
  type: {
    name: "Composite",
    className: "SizeConfigurationProperties",
    modelProperties: {
      environmentSizes: {
        serializedName: "environmentSizes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "EnvironmentSize" } }
        }
      }
    }
  }
};

export const EnvironmentSize: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentSize",
  type: {
    name: "Composite",
    className: "EnvironmentSize",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      vmSizes: {
        serializedName: "vmSizes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SizeInfo" } }
        }
      },
      maxPrice: {
        serializedName: "maxPrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minNumberOfCores: {
        serializedName: "minNumberOfCores",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minMemory: {
        serializedName: "minMemory",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SizeInfo: coreHttp.CompositeMapper = {
  serializedName: "SizeInfo",
  type: {
    name: "Composite",
    className: "SizeInfo",
    modelProperties: {
      computeSize: {
        serializedName: "computeSize",
        type: {
          name: "String"
        }
      },
      price: {
        serializedName: "price",
        type: {
          name: "Number"
        }
      },
      numberOfCores: {
        serializedName: "numberOfCores",
        type: {
          name: "Number"
        }
      },
      memory: {
        serializedName: "memory",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OperationResult: coreHttp.CompositeMapper = {
  serializedName: "OperationResult",
  type: {
    name: "Composite",
    className: "OperationResult",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "OperationError"
        }
      }
    }
  }
};

export const OperationError: coreHttp.CompositeMapper = {
  serializedName: "OperationError",
  type: {
    name: "Composite",
    className: "OperationError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LabAccountFragment: coreHttp.CompositeMapper = {
  serializedName: "LabAccountFragment",
  type: {
    name: "Composite",
    className: "LabAccountFragment",
    modelProperties: {
      ...Resource.type.modelProperties,
      enabledRegionSelection: {
        serializedName: "properties.enabledRegionSelection",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateLabProperties: coreHttp.CompositeMapper = {
  serializedName: "CreateLabProperties",
  type: {
    name: "Composite",
    className: "CreateLabProperties",
    modelProperties: {
      environmentSettingCreationParameters: {
        serializedName: "environmentSettingCreationParameters",
        type: {
          name: "Composite",
          className: "EnvironmentSettingCreationParameters"
        }
      },
      labCreationParameters: {
        serializedName: "labCreationParameters",
        type: {
          name: "Composite",
          className: "LabCreationParameters"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const EnvironmentSettingCreationParameters: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentSettingCreationParameters",
  type: {
    name: "Composite",
    className: "EnvironmentSettingCreationParameters",
    modelProperties: {
      resourceSettingCreationParameters: {
        serializedName: "resourceSettingCreationParameters",
        type: {
          name: "Composite",
          className: "ResourceSettingCreationParameters"
        }
      }
    }
  }
};

export const ResourceSettingCreationParameters: coreHttp.CompositeMapper = {
  serializedName: "ResourceSettingCreationParameters",
  type: {
    name: "Composite",
    className: "ResourceSettingCreationParameters",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      galleryImageResourceId: {
        serializedName: "galleryImageResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      referenceVmCreationParameters: {
        serializedName: "referenceVmCreationParameters",
        type: {
          name: "Composite",
          className: "ReferenceVmCreationParameters"
        }
      }
    }
  }
};

export const ReferenceVmCreationParameters: coreHttp.CompositeMapper = {
  serializedName: "ReferenceVmCreationParameters",
  type: {
    name: "Composite",
    className: "ReferenceVmCreationParameters",
    modelProperties: {
      userName: {
        serializedName: "userName",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LabCreationParameters: coreHttp.CompositeMapper = {
  serializedName: "LabCreationParameters",
  type: {
    name: "Composite",
    className: "LabCreationParameters",
    modelProperties: {
      maxUsersInLab: {
        serializedName: "maxUsersInLab",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ResponseWithContinuationGalleryImage: coreHttp.CompositeMapper = {
  serializedName: "ResponseWithContinuationGalleryImage",
  type: {
    name: "Composite",
    className: "ResponseWithContinuationGalleryImage",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "GalleryImage" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GalleryImage: coreHttp.CompositeMapper = {
  serializedName: "GalleryImage",
  type: {
    name: "Composite",
    className: "GalleryImage",
    modelProperties: {
      ...Resource.type.modelProperties,
      author: {
        serializedName: "properties.author",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      imageReference: {
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "GalleryImageReference"
        }
      },
      icon: {
        serializedName: "properties.icon",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "properties.isEnabled",
        type: {
          name: "Boolean"
        }
      },
      isOverride: {
        serializedName: "properties.isOverride",
        type: {
          name: "Boolean"
        }
      },
      planId: {
        serializedName: "properties.planId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isPlanAuthorized: {
        serializedName: "properties.isPlanAuthorized",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        type: {
          name: "String"
        }
      },
      latestOperationResult: {
        serializedName: "latestOperationResult",
        type: {
          name: "Composite",
          className: "LatestOperationResult"
        }
      }
    }
  }
};

export const GalleryImageReference: coreHttp.CompositeMapper = {
  serializedName: "GalleryImageReference",
  type: {
    name: "Composite",
    className: "GalleryImageReference",
    modelProperties: {
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GalleryImageFragment: coreHttp.CompositeMapper = {
  serializedName: "GalleryImageFragment",
  type: {
    name: "Composite",
    className: "GalleryImageFragment",
    modelProperties: {
      ...Resource.type.modelProperties,
      isEnabled: {
        serializedName: "properties.isEnabled",
        type: {
          name: "Boolean"
        }
      },
      isOverride: {
        serializedName: "properties.isOverride",
        type: {
          name: "Boolean"
        }
      },
      isPlanAuthorized: {
        serializedName: "properties.isPlanAuthorized",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetRegionalAvailabilityResponse: coreHttp.CompositeMapper = {
  serializedName: "GetRegionalAvailabilityResponse",
  type: {
    name: "Composite",
    className: "GetRegionalAvailabilityResponse",
    modelProperties: {
      regionalAvailability: {
        serializedName: "regionalAvailability",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RegionalAvailability" }
          }
        }
      }
    }
  }
};

export const RegionalAvailability: coreHttp.CompositeMapper = {
  serializedName: "RegionalAvailability",
  type: {
    name: "Composite",
    className: "RegionalAvailability",
    modelProperties: {
      region: {
        serializedName: "region",
        type: {
          name: "String"
        }
      },
      sizeAvailabilities: {
        serializedName: "sizeAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SizeAvailability" }
          }
        }
      }
    }
  }
};

export const SizeAvailability: coreHttp.CompositeMapper = {
  serializedName: "SizeAvailability",
  type: {
    name: "Composite",
    className: "SizeAvailability",
    modelProperties: {
      sizeCategory: {
        serializedName: "sizeCategory",
        type: {
          name: "String"
        }
      },
      isAvailable: {
        serializedName: "isAvailable",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ResponseWithContinuationLab: coreHttp.CompositeMapper = {
  serializedName: "ResponseWithContinuationLab",
  type: {
    name: "Composite",
    className: "ResponseWithContinuationLab",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Lab" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Lab: coreHttp.CompositeMapper = {
  serializedName: "Lab",
  type: {
    name: "Composite",
    className: "Lab",
    modelProperties: {
      ...Resource.type.modelProperties,
      maxUsersInLab: {
        serializedName: "properties.maxUsersInLab",
        type: {
          name: "Number"
        }
      },
      userQuota: {
        serializedName: "properties.userQuota",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      invitationCode: {
        serializedName: "properties.invitationCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdByObjectId: {
        serializedName: "properties.createdByObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageQuota: {
        serializedName: "properties.usageQuota",
        type: {
          name: "TimeSpan"
        }
      },
      userAccessMode: {
        serializedName: "properties.userAccessMode",
        type: {
          name: "String"
        }
      },
      createdByUserPrincipalName: {
        serializedName: "properties.createdByUserPrincipalName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        type: {
          name: "String"
        }
      },
      latestOperationResult: {
        serializedName: "latestOperationResult",
        type: {
          name: "Composite",
          className: "LatestOperationResult"
        }
      }
    }
  }
};

export const LabFragment: coreHttp.CompositeMapper = {
  serializedName: "LabFragment",
  type: {
    name: "Composite",
    className: "LabFragment",
    modelProperties: {
      ...Resource.type.modelProperties,
      maxUsersInLab: {
        serializedName: "properties.maxUsersInLab",
        type: {
          name: "Number"
        }
      },
      usageQuota: {
        serializedName: "properties.usageQuota",
        type: {
          name: "TimeSpan"
        }
      },
      userAccessMode: {
        serializedName: "properties.userAccessMode",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddUsersPayload: coreHttp.CompositeMapper = {
  serializedName: "AddUsersPayload",
  type: {
    name: "Composite",
    className: "AddUsersPayload",
    modelProperties: {
      emailAddresses: {
        serializedName: "emailAddresses",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AddUsersPayloadEmailAddressesItem"
          }
        }
      }
    }
  }
};

export const ResponseWithContinuationEnvironmentSetting: coreHttp.CompositeMapper = {
  serializedName: "ResponseWithContinuationEnvironmentSetting",
  type: {
    name: "Composite",
    className: "ResponseWithContinuationEnvironmentSetting",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentSetting" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentSetting: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentSetting",
  type: {
    name: "Composite",
    className: "EnvironmentSetting",
    modelProperties: {
      ...Resource.type.modelProperties,
      publishingState: {
        serializedName: "properties.publishingState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "properties.title",
        type: {
          name: "String"
        }
      },
      resourceSettings: {
        serializedName: "resourceSettings",
        type: {
          name: "Composite",
          className: "ResourceSettings"
        }
      },
      lastChanged: {
        serializedName: "properties.lastChanged",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastPublished: {
        serializedName: "properties.lastPublished",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        type: {
          name: "String"
        }
      },
      latestOperationResult: {
        serializedName: "latestOperationResult",
        type: {
          name: "Composite",
          className: "LatestOperationResult"
        }
      }
    }
  }
};

export const ResourceSettings: coreHttp.CompositeMapper = {
  serializedName: "ResourceSettings",
  type: {
    name: "Composite",
    className: "ResourceSettings",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      galleryImageResourceId: {
        serializedName: "galleryImageResourceId",
        type: {
          name: "String"
        }
      },
      imageName: {
        serializedName: "imageName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      cores: {
        serializedName: "cores",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      referenceVm: {
        serializedName: "referenceVm",
        type: {
          name: "Composite",
          className: "ReferenceVm"
        }
      }
    }
  }
};

export const ReferenceVm: coreHttp.CompositeMapper = {
  serializedName: "ReferenceVm",
  type: {
    name: "Composite",
    className: "ReferenceVm",
    modelProperties: {
      userName: {
        serializedName: "userName",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      vmStateDetails: {
        serializedName: "vmStateDetails",
        type: {
          name: "Composite",
          className: "VmStateDetails"
        }
      },
      vmResourceId: {
        serializedName: "vmResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmStateDetails: coreHttp.CompositeMapper = {
  serializedName: "VmStateDetails",
  type: {
    name: "Composite",
    className: "VmStateDetails",
    modelProperties: {
      rdpAuthority: {
        serializedName: "rdpAuthority",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sshAuthority: {
        serializedName: "sshAuthority",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      powerState: {
        serializedName: "powerState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastKnownPowerState: {
        serializedName: "lastKnownPowerState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentSettingFragment: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentSettingFragment",
  type: {
    name: "Composite",
    className: "EnvironmentSettingFragment",
    modelProperties: {
      ...Resource.type.modelProperties,
      configurationState: {
        serializedName: "properties.configurationState",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "properties.title",
        type: {
          name: "String"
        }
      },
      resourceSettings: {
        serializedName: "resourceSettings",
        type: {
          name: "Composite",
          className: "ResourceSettingsFragment"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSettingsFragment: coreHttp.CompositeMapper = {
  serializedName: "ResourceSettingsFragment",
  type: {
    name: "Composite",
    className: "ResourceSettingsFragment",
    modelProperties: {
      galleryImageResourceId: {
        serializedName: "galleryImageResourceId",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      referenceVm: {
        serializedName: "referenceVm",
        type: {
          name: "Composite",
          className: "ReferenceVmFragment"
        }
      }
    }
  }
};

export const ReferenceVmFragment: coreHttp.CompositeMapper = {
  serializedName: "ReferenceVmFragment",
  type: {
    name: "Composite",
    className: "ReferenceVmFragment",
    modelProperties: {
      userName: {
        serializedName: "userName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResponseWithContinuationEnvironment: coreHttp.CompositeMapper = {
  serializedName: "ResponseWithContinuationEnvironment",
  type: {
    name: "Composite",
    className: "ResponseWithContinuationEnvironment",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Environment" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Environment: coreHttp.CompositeMapper = {
  serializedName: "Environment",
  type: {
    name: "Composite",
    className: "Environment",
    modelProperties: {
      ...Resource.type.modelProperties,
      resourceSets: {
        serializedName: "resourceSets",
        type: {
          name: "Composite",
          className: "ResourceSet"
        }
      },
      claimedByUserObjectId: {
        serializedName: "properties.claimedByUserObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      claimedByUserPrincipalId: {
        serializedName: "properties.claimedByUserPrincipalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      claimedByUserName: {
        serializedName: "properties.claimedByUserName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isClaimed: {
        serializedName: "properties.isClaimed",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      lastKnownPowerState: {
        serializedName: "properties.lastKnownPowerState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkInterface: {
        serializedName: "networkInterface",
        type: {
          name: "Composite",
          className: "NetworkInterface"
        }
      },
      totalUsage: {
        serializedName: "properties.totalUsage",
        readOnly: true,
        type: {
          name: "TimeSpan"
        }
      },
      passwordLastReset: {
        serializedName: "properties.passwordLastReset",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        type: {
          name: "String"
        }
      },
      latestOperationResult: {
        serializedName: "latestOperationResult",
        type: {
          name: "Composite",
          className: "LatestOperationResult"
        }
      }
    }
  }
};

export const ResourceSet: coreHttp.CompositeMapper = {
  serializedName: "ResourceSet",
  type: {
    name: "Composite",
    className: "ResourceSet",
    modelProperties: {
      vmResourceId: {
        serializedName: "vmResourceId",
        type: {
          name: "String"
        }
      },
      resourceSettingId: {
        serializedName: "resourceSettingId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterface: coreHttp.CompositeMapper = {
  serializedName: "NetworkInterface",
  type: {
    name: "Composite",
    className: "NetworkInterface",
    modelProperties: {
      privateIpAddress: {
        serializedName: "privateIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sshAuthority: {
        serializedName: "sshAuthority",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rdpAuthority: {
        serializedName: "rdpAuthority",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentFragment: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentFragment",
  type: {
    name: "Composite",
    className: "EnvironmentFragment",
    modelProperties: {
      ...Resource.type.modelProperties,
      resourceSets: {
        serializedName: "resourceSets",
        type: {
          name: "Composite",
          className: "ResourceSetFragment"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSetFragment: coreHttp.CompositeMapper = {
  serializedName: "ResourceSetFragment",
  type: {
    name: "Composite",
    className: "ResourceSetFragment",
    modelProperties: {
      vmResourceId: {
        serializedName: "vmResourceId",
        type: {
          name: "String"
        }
      },
      resourceSettingId: {
        serializedName: "resourceSettingId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublishPayload: coreHttp.CompositeMapper = {
  serializedName: "PublishPayload",
  type: {
    name: "Composite",
    className: "PublishPayload",
    modelProperties: {
      useExistingImage: {
        serializedName: "useExistingImage",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ResponseWithContinuationUser: coreHttp.CompositeMapper = {
  serializedName: "ResponseWithContinuationUser",
  type: {
    name: "Composite",
    className: "ResponseWithContinuationUser",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "User" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const User: coreHttp.CompositeMapper = {
  serializedName: "User",
  type: {
    name: "Composite",
    className: "User",
    modelProperties: {
      ...Resource.type.modelProperties,
      email: {
        serializedName: "properties.email",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      familyName: {
        serializedName: "properties.familyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      givenName: {
        serializedName: "properties.givenName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalUsage: {
        serializedName: "properties.totalUsage",
        readOnly: true,
        type: {
          name: "TimeSpan"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        type: {
          name: "String"
        }
      },
      latestOperationResult: {
        serializedName: "latestOperationResult",
        type: {
          name: "Composite",
          className: "LatestOperationResult"
        }
      }
    }
  }
};

export const UserFragment: coreHttp.CompositeMapper = {
  serializedName: "UserFragment",
  type: {
    name: "Composite",
    className: "UserFragment",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentSizeFragment: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentSizeFragment",
  type: {
    name: "Composite",
    className: "EnvironmentSizeFragment",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      vmSizes: {
        serializedName: "vmSizes",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SizeInfoFragment" }
          }
        }
      }
    }
  }
};

export const SizeInfoFragment: coreHttp.CompositeMapper = {
  serializedName: "SizeInfoFragment",
  type: {
    name: "Composite",
    className: "SizeInfoFragment",
    modelProperties: {
      computeSize: {
        serializedName: "computeSize",
        type: {
          name: "String"
        }
      },
      price: {
        serializedName: "price",
        type: {
          name: "Number"
        }
      },
      numberOfCores: {
        serializedName: "numberOfCores",
        type: {
          name: "Number"
        }
      },
      memory: {
        serializedName: "memory",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GalleryImageReferenceFragment: coreHttp.CompositeMapper = {
  serializedName: "GalleryImageReferenceFragment",
  type: {
    name: "Composite",
    className: "GalleryImageReferenceFragment",
    modelProperties: {
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SizeConfigurationPropertiesFragment: coreHttp.CompositeMapper = {
  serializedName: "SizeConfigurationPropertiesFragment",
  type: {
    name: "Composite",
    className: "SizeConfigurationPropertiesFragment",
    modelProperties: {
      environmentSizes: {
        serializedName: "environmentSizes",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentSizeFragment" }
          }
        }
      }
    }
  }
};
