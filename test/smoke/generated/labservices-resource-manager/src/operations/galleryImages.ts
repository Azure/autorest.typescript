/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagedLabsClient } from "../managedLabsClient";
import {
  GalleryImagesListOptionalParams,
  GalleryImagesListResponse,
  GalleryImagesGetOptionalParams,
  GalleryImagesGetResponse,
  GalleryImage,
  GalleryImagesCreateOrUpdateResponse,
  GalleryImageFragment,
  GalleryImagesUpdateResponse,
  GalleryImagesListNextOptionalParams,
  GalleryImagesListNextResponse
} from "../models";

/**
 * Class representing a GalleryImages.
 */
export class GalleryImages {
  private readonly client: ManagedLabsClient;

  /**
   * Initialize a new instance of the class GalleryImages class.
   * @param client Reference to the service client
   */
  constructor(client: ManagedLabsClient) {
    this.client = client;
  }

  /**
   * List gallery images in a given lab account.
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    labAccountName: string,
    options?: GalleryImagesListOptionalParams
  ): Promise<GalleryImagesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, labAccountName, options: operationOptions },
      listOperationSpec
    ) as Promise<GalleryImagesListResponse>;
  }

  /**
   * Get gallery image
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param galleryImageName The name of the gallery Image.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    labAccountName: string,
    galleryImageName: string,
    options?: GalleryImagesGetOptionalParams
  ): Promise<GalleryImagesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labAccountName,
        galleryImageName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<GalleryImagesGetResponse>;
  }

  /**
   * Create or replace an existing Gallery Image.
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param galleryImageName The name of the gallery Image.
   * @param galleryImage Represents an image from the Azure Marketplace
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    labAccountName: string,
    galleryImageName: string,
    galleryImage: GalleryImage,
    options?: coreHttp.OperationOptions
  ): Promise<GalleryImagesCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labAccountName,
        galleryImageName,
        galleryImage,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<GalleryImagesCreateOrUpdateResponse>;
  }

  /**
   * Delete gallery image.
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param galleryImageName The name of the gallery Image.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    labAccountName: string,
    galleryImageName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labAccountName,
        galleryImageName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Modify properties of gallery images.
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param galleryImageName The name of the gallery Image.
   * @param galleryImage Represents an image from the Azure Marketplace
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    labAccountName: string,
    galleryImageName: string,
    galleryImage: GalleryImageFragment,
    options?: coreHttp.OperationOptions
  ): Promise<GalleryImagesUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labAccountName,
        galleryImageName,
        galleryImage,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<GalleryImagesUpdateResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroupName: string,
    labAccountName: string,
    options?: GalleryImagesListNextOptionalParams
  ): Promise<GalleryImagesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        nextLink,
        resourceGroupName,
        labAccountName,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<GalleryImagesListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/galleryimages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResponseWithContinuationGalleryImage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.expand2
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/galleryimages/{galleryImageName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GalleryImage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.galleryImageName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/galleryimages/{galleryImageName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GalleryImage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.galleryImage,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.galleryImageName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/galleryimages/{galleryImageName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.galleryImageName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/galleryimages/{galleryImageName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.GalleryImage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.galleryImage1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.galleryImageName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResponseWithContinuationGalleryImage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.expand2
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName
  ],
  serializer
};
