/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagedLabsClient } from "../managedLabsClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  EnvironmentOperationsPayload,
  GlobalUsersGetEnvironmentOptionalParams,
  GlobalUsersGetEnvironmentResponse,
  OperationBatchStatusPayload,
  GlobalUsersGetOperationBatchStatusResponse,
  OperationStatusPayload,
  GlobalUsersGetOperationStatusResponse,
  PersonalPreferencesOperationsPayload,
  GlobalUsersGetPersonalPreferencesResponse,
  ListEnvironmentsPayload,
  GlobalUsersListEnvironmentsResponse,
  GlobalUsersListLabsResponse,
  RegisterPayload,
  ResetPasswordPayload
} from "../models";

/**
 * Class representing a GlobalUsers.
 */
export class GlobalUsers {
  private readonly client: ManagedLabsClient;

  /**
   * Initialize a new instance of the class GlobalUsers class.
   * @param client Reference to the service client
   */
  constructor(client: ManagedLabsClient) {
    this.client = client;
  }

  /**
   * Gets the virtual machine details
   * @param environmentOperationsPayload Represents payload for any Environment operations like get,
   *                                     start, stop, connect
   * @param userName The name of the user.
   * @param options The options parameters.
   */
  getEnvironment(
    environmentOperationsPayload: EnvironmentOperationsPayload,
    userName: string,
    options?: GlobalUsersGetEnvironmentOptionalParams
  ): Promise<GlobalUsersGetEnvironmentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { environmentOperationsPayload, userName, options: operationOptions },
      getEnvironmentOperationSpec
    ) as Promise<GlobalUsersGetEnvironmentResponse>;
  }

  /**
   * Get batch operation status
   * @param userName The name of the user.
   * @param operationBatchStatusPayload Payload to get the status of an operation
   * @param options The options parameters.
   */
  getOperationBatchStatus(
    userName: string,
    operationBatchStatusPayload: OperationBatchStatusPayload,
    options?: coreHttp.OperationOptions
  ): Promise<GlobalUsersGetOperationBatchStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { userName, operationBatchStatusPayload, options: operationOptions },
      getOperationBatchStatusOperationSpec
    ) as Promise<GlobalUsersGetOperationBatchStatusResponse>;
  }

  /**
   * Gets the status of long running operation
   * @param userName The name of the user.
   * @param operationStatusPayload Payload to get the status of an operation
   * @param options The options parameters.
   */
  getOperationStatus(
    userName: string,
    operationStatusPayload: OperationStatusPayload,
    options?: coreHttp.OperationOptions
  ): Promise<GlobalUsersGetOperationStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { userName, operationStatusPayload, options: operationOptions },
      getOperationStatusOperationSpec
    ) as Promise<GlobalUsersGetOperationStatusResponse>;
  }

  /**
   * Get personal preferences for a user
   * @param userName The name of the user.
   * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like
   *                                             get, start, stop, connect
   * @param options The options parameters.
   */
  getPersonalPreferences(
    userName: string,
    personalPreferencesOperationsPayload: PersonalPreferencesOperationsPayload,
    options?: coreHttp.OperationOptions
  ): Promise<GlobalUsersGetPersonalPreferencesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        userName,
        personalPreferencesOperationsPayload,
        options: operationOptions
      },
      getPersonalPreferencesOperationSpec
    ) as Promise<GlobalUsersGetPersonalPreferencesResponse>;
  }

  /**
   * List Environments for the user
   * @param userName The name of the user.
   * @param listEnvironmentsPayload Represents the payload to list environments owned by a user
   * @param options The options parameters.
   */
  listEnvironments(
    userName: string,
    listEnvironmentsPayload: ListEnvironmentsPayload,
    options?: coreHttp.OperationOptions
  ): Promise<GlobalUsersListEnvironmentsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { userName, listEnvironmentsPayload, options: operationOptions },
      listEnvironmentsOperationSpec
    ) as Promise<GlobalUsersListEnvironmentsResponse>;
  }

  /**
   * List labs for the user.
   * @param userName The name of the user.
   * @param options The options parameters.
   */
  listLabs(
    userName: string,
    options?: coreHttp.OperationOptions
  ): Promise<GlobalUsersListLabsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { userName, options: operationOptions },
      listLabsOperationSpec
    ) as Promise<GlobalUsersListLabsResponse>;
  }

  /**
   * Register a user to a managed lab
   * @param userName The name of the user.
   * @param registerPayload Represents payload for Register action.
   * @param options The options parameters.
   */
  register(
    userName: string,
    registerPayload: RegisterPayload,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { userName, registerPayload, options: operationOptions },
      registerOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Resets the user password on an environment This operation can take a while to complete
   * @param userName The name of the user.
   * @param resetPasswordPayload Represents the payload for resetting passwords.
   * @param options The options parameters.
   */
  async resetPassword(
    userName: string,
    resetPasswordPayload: ResetPasswordPayload,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      userName,
      resetPasswordPayload,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      resetPasswordOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: resetPasswordOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Starts an environment by starting all resources inside the environment. This operation can take a
   * while to complete
   * @param environmentOperationsPayload Represents payload for any Environment operations like get,
   *                                     start, stop, connect
   * @param userName The name of the user.
   * @param options The options parameters.
   */
  async startEnvironment(
    environmentOperationsPayload: EnvironmentOperationsPayload,
    userName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      environmentOperationsPayload,
      userName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      startEnvironmentOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: startEnvironmentOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Stops an environment by stopping all resources inside the environment This operation can take a
   * while to complete
   * @param environmentOperationsPayload Represents payload for any Environment operations like get,
   *                                     start, stop, connect
   * @param userName The name of the user.
   * @param options The options parameters.
   */
  async stopEnvironment(
    environmentOperationsPayload: EnvironmentOperationsPayload,
    userName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      environmentOperationsPayload,
      userName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      stopEnvironmentOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: stopEnvironmentOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getEnvironmentOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.LabServices/users/{userName}/getEnvironment",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GetEnvironmentResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.environmentOperationsPayload,
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [Parameters.$host, Parameters.userName],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationBatchStatusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.LabServices/users/{userName}/getOperationBatchStatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationBatchStatusResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.operationBatchStatusPayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.userName],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.LabServices/users/{userName}/getOperationStatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.operationStatusPayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.userName],
  headerParameters: [Parameters.contentType],
  serializer
};
const getPersonalPreferencesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.LabServices/users/{userName}/getPersonalPreferences",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GetPersonalPreferencesResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.personalPreferencesOperationsPayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.userName],
  headerParameters: [Parameters.contentType],
  serializer
};
const listEnvironmentsOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.LabServices/users/{userName}/listEnvironments",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ListEnvironmentsResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.listEnvironmentsPayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.userName],
  headerParameters: [Parameters.contentType],
  serializer
};
const listLabsOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.LabServices/users/{userName}/listLabs",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ListLabsResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.userName],
  serializer
};
const registerOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.LabServices/users/{userName}/register",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.registerPayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.userName],
  headerParameters: [Parameters.contentType],
  serializer
};
const resetPasswordOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.LabServices/users/{userName}/resetPassword",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.resetPasswordPayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.userName],
  headerParameters: [Parameters.contentType],
  serializer
};
const startEnvironmentOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.LabServices/users/{userName}/startEnvironment",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.environmentOperationsPayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.userName],
  headerParameters: [Parameters.contentType],
  serializer
};
const stopEnvironmentOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.LabServices/users/{userName}/stopEnvironment",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.environmentOperationsPayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.userName],
  headerParameters: [Parameters.contentType],
  serializer
};
