/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { VirtualMachineScaleSetVMs } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  VirtualMachineScaleSetVM,
  VirtualMachineScaleSetVMsUpdateResponse,
  VirtualMachineScaleSetVMsGetResponse,
  VirtualMachineScaleSetVMsGetInstanceViewResponse,
  VirtualMachineScaleSetVMsListResponse,
  VirtualMachineScaleSetVMsRetrieveBootDiagnosticsDataResponse,
  VirtualMachineScaleSetVMsRunCommandApplicationJsonOptionalParams,
  VirtualMachineScaleSetVMsRunCommandTextJsonOptionalParams,
  VirtualMachineScaleSetVMsRunCommandResponse,
  VirtualMachineScaleSetVMsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing VirtualMachineScaleSetVMs operations. */
export class VirtualMachineScaleSetVMsImpl
  implements VirtualMachineScaleSetVMs {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class VirtualMachineScaleSetVMs class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of all virtual machines in a VM scale sets.
   *
   */
  public list(): PagedAsyncIterableIterator<VirtualMachineScaleSetVM> {
    const iter = this.listPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage();
      }
    };
  }

  private async *listPagingPage(): AsyncIterableIterator<
    VirtualMachineScaleSetVM[]
  > {
    let result = await this._list();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(): AsyncIterableIterator<
    VirtualMachineScaleSetVM
  > {
    for await (const page of this.listPagingPage()) {
      yield* page;
    }
  }

  /**
   * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
   *
   */
  async beginReimage(): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, vmScaleSetName, instanceId, options },
      reimageOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
   *
   */
  async beginReimageAndWait(): Promise<void> {
    const poller = await this.beginReimage();
    return poller.pollUntilDone();
  }

  /**
   * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This
   * operation is only supported for managed disks.
   *
   */
  async beginReimageAll(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This
   * operation is only supported for managed disks.
   *
   */
  async beginReimageAllAndWait(): Promise<void> {
    const poller = await this.beginReimageAll();
    return poller.pollUntilDone();
  }

  /**
   * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and
   * releases the compute resources it uses. You are not billed for the compute resources of this virtual
   * machine once it is deallocated.
   *
   */
  async beginDeallocate(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and
   * releases the compute resources it uses. You are not billed for the compute resources of this virtual
   * machine once it is deallocated.
   *
   */
  async beginDeallocateAndWait(): Promise<void> {
    const poller = await this.beginDeallocate();
    return poller.pollUntilDone();
  }

  /**
   * Updates a virtual machine of a VM scale set.
   *
   */
  async beginUpdate(): Promise<
    PollerLike<
      PollOperationState<VirtualMachineScaleSetVMsUpdateResponse>,
      VirtualMachineScaleSetVMsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<VirtualMachineScaleSetVMsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, vmScaleSetName, instanceId, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates a virtual machine of a VM scale set.
   *
   */
  async beginUpdateAndWait(): Promise<VirtualMachineScaleSetVMsUpdateResponse> {
    const poller = await this.beginUpdate();
    return poller.pollUntilDone();
  }

  /**
   * Deletes a virtual machine from a VM scale set.
   *
   */
  async beginDelete(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Deletes a virtual machine from a VM scale set.
   *
   */
  async beginDeleteAndWait(): Promise<void> {
    const poller = await this.beginDelete();
    return poller.pollUntilDone();
  }

  /**
   * Gets a virtual machine from a VM scale set.
   *
   */
  get(): Promise<VirtualMachineScaleSetVMsGetResponse> {}

  /**
   * Gets the status of a virtual machine from a VM scale set.
   *
   */
  getInstanceView(): Promise<
    VirtualMachineScaleSetVMsGetInstanceViewResponse
  > {}

  /**
   * Gets a list of all virtual machines in a VM scale sets.
   *
   */
  private _list(): Promise<VirtualMachineScaleSetVMsListResponse> {}

  /**
   * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you
   * are getting charged for the resources. Instead, use deallocate to release resources and avoid
   * charges.
   *
   */
  async beginPowerOff(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you
   * are getting charged for the resources. Instead, use deallocate to release resources and avoid
   * charges.
   *
   */
  async beginPowerOffAndWait(): Promise<void> {
    const poller = await this.beginPowerOff();
    return poller.pollUntilDone();
  }

  /**
   * Restarts a virtual machine in a VM scale set.
   *
   */
  async beginRestart(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Restarts a virtual machine in a VM scale set.
   *
   */
  async beginRestartAndWait(): Promise<void> {
    const poller = await this.beginRestart();
    return poller.pollUntilDone();
  }

  /**
   * Starts a virtual machine in a VM scale set.
   *
   */
  async beginStart(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Starts a virtual machine in a VM scale set.
   *
   */
  async beginStartAndWait(): Promise<void> {
    const poller = await this.beginStart();
    return poller.pollUntilDone();
  }

  /**
   * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers
   * it back on.
   *
   */
  async beginRedeploy(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers
   * it back on.
   *
   */
  async beginRedeployAndWait(): Promise<void> {
    const poller = await this.beginRedeploy();
    return poller.pollUntilDone();
  }

  /**
   * The operation to retrieve SAS URIs of boot diagnostic logs for a virtual machine in a VM scale set.
   *
   */
  retrieveBootDiagnosticsData(): Promise<
    VirtualMachineScaleSetVMsRetrieveBootDiagnosticsDataResponse
  > {}

  /**
   * Performs maintenance on a virtual machine in a VM scale set.
   *
   */
  async beginPerformMaintenance(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * Performs maintenance on a virtual machine in a VM scale set.
   *
   */
  async beginPerformMaintenanceAndWait(): Promise<void> {
    const poller = await this.beginPerformMaintenance();
    return poller.pollUntilDone();
  }

  /**
   * The operation to simulate the eviction of spot virtual machine in a VM scale set.
   *
   */
  simulateEviction(): Promise<void> {}

  /**
   * Run command on a virtual machine in a VM scale set.
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param options The options parameters.
   */
  beginRunCommand(
    resourceGroupName: string,
    vmScaleSetName: string,
    instanceId: string,
    options?: VirtualMachineScaleSetVMsRunCommandApplicationJsonOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<VirtualMachineScaleSetVMsRunCommandResponse>,
      VirtualMachineScaleSetVMsRunCommandResponse
    >
  >;
  /**
   * Run command on a virtual machine in a VM scale set.
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param options The options parameters.
   */
  beginRunCommand(
    resourceGroupName: string,
    vmScaleSetName: string,
    instanceId: string,
    options?: VirtualMachineScaleSetVMsRunCommandTextJsonOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<VirtualMachineScaleSetVMsRunCommandResponse>,
      VirtualMachineScaleSetVMsRunCommandResponse
    >
  >;
  /**
   * Run command on a virtual machine in a VM scale set.
   *
   */
  async beginRunCommand(): Promise<
    PollerLike<
      PollOperationState<VirtualMachineScaleSetVMsRunCommandResponse>,
      VirtualMachineScaleSetVMsRunCommandResponse
    >
  > {}

  /**
   * Run command on a virtual machine in a VM scale set.
   *
   */
  async beginRunCommandAndWait(): Promise<
    VirtualMachineScaleSetVMsRunCommandResponse
  > {
    if (args[-1] === "application/json") {
      const poller = await this.beginRunCommand(...args);
      return poller.pollUntilDone();
    } else if (args[-1] === "application/json") {
      const poller = await this.beginRunCommand(...args);
      return poller.pollUntilDone();
    }
    throw new Error("Impossible case");
  }

  /**
   * ListNext
   *
   */
  private _listNext(): Promise<VirtualMachineScaleSetVMsListNextResponse> {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const reimageOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/reimage",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.vmScaleSetVMReimageInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.vmScaleSetName,
    Parameters.instanceId
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineScaleSetVM
    },
    201: {
      bodyMapper: Mappers.VirtualMachineScaleSetVM
    },
    202: {
      bodyMapper: Mappers.VirtualMachineScaleSetVM
    },
    204: {
      bodyMapper: Mappers.VirtualMachineScaleSetVM
    }
  },
  requestBody: Parameters.parameters28,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.vmScaleSetName,
    Parameters.instanceId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const runCommand$jsonOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/runCommand",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RunCommandResult
    },
    201: {
      bodyMapper: Mappers.RunCommandResult
    },
    202: {
      bodyMapper: Mappers.RunCommandResult
    },
    204: {
      bodyMapper: Mappers.RunCommandResult
    }
  },
  requestBody: Parameters.parameters14,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.vmScaleSetName,
    Parameters.instanceId
  ],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "json",
  serializer
};
