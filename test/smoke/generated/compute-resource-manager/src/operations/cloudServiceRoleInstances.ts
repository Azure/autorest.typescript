/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { CloudServiceRoleInstances } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import { ComputeManagementClient } from "../computeManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  RoleInstance,
  CloudServiceRoleInstancesGetResponse,
  CloudServiceRoleInstancesGetInstanceViewResponse,
  CloudServiceRoleInstancesListResponse,
  CloudServiceRoleInstancesGetRemoteDesktopFileResponse,
  CloudServiceRoleInstancesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CloudServiceRoleInstances operations. */
export class CloudServiceRoleInstancesImpl
  implements CloudServiceRoleInstances {
  /**
   * Initialize a new instance of the class CloudServiceRoleInstances class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {}

  /**
   * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get
   * the next page of role instances. Do this till nextLink is null to fetch all the role instances.
   *
   */
  public list(): PagedAsyncIterableIterator<RoleInstance> {
    const iter = this.listPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage();
      }
    };
  }

  private async *listPagingPage(): AsyncIterableIterator<RoleInstance[]> {
    let result = await this._list();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(): AsyncIterableIterator<RoleInstance> {
    for await (const page of this.listPagingPage()) {
      yield* page;
    }
  }

  /**
   * Deletes a role instance from a cloud service.
   *
   */
  async beginDelete(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Deletes a role instance from a cloud service.
   *
   */
  async beginDeleteAndWait(): Promise<void> {
    const poller = await this.beginDelete();
    return poller.pollUntilDone();
  }

  /**
   * Gets a role instance from a cloud service.
   *
   */
  get(): Promise<CloudServiceRoleInstancesGetResponse> {}

  /**
   * Retrieves information about the run-time state of a role instance in a cloud service.
   *
   */
  getInstanceView(): Promise<
    CloudServiceRoleInstancesGetInstanceViewResponse
  > {}

  /**
   * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get
   * the next page of role instances. Do this till nextLink is null to fetch all the role instances.
   *
   */
  private _list(): Promise<CloudServiceRoleInstancesListResponse> {}

  /**
   * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud
   * service.
   *
   */
  async beginRestart(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud
   * service.
   *
   */
  async beginRestartAndWait(): Promise<void> {
    const poller = await this.beginRestart();
    return poller.pollUntilDone();
  }

  /**
   * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web
   * roles or worker roles.
   *
   */
  async beginReimage(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web
   * roles or worker roles.
   *
   */
  async beginReimageAndWait(): Promise<void> {
    const poller = await this.beginReimage();
    return poller.pollUntilDone();
  }

  /**
   * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web
   * roles or worker roles and initializes the storage resources that are used by them. If you do not
   * want to initialize storage resources, you can use Reimage Role Instance.
   *
   */
  async beginRebuild(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web
   * roles or worker roles and initializes the storage resources that are used by them. If you do not
   * want to initialize storage resources, you can use Reimage Role Instance.
   *
   */
  async beginRebuildAndWait(): Promise<void> {
    const poller = await this.beginRebuild();
    return poller.pollUntilDone();
  }

  /**
   * Gets a remote desktop file for a role instance in a cloud service.
   *
   */
  getRemoteDesktopFile(): Promise<
    CloudServiceRoleInstancesGetRemoteDesktopFileResponse
  > {}

  /**
   * ListNext
   *
   */
  private _listNext(): Promise<CloudServiceRoleInstancesListNextResponse> {}
}
// Operation Specifications
