/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DiskRestorePointOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  DiskRestorePoint,
  DiskRestorePointGetResponse,
  DiskRestorePointListByRestorePointResponse,
  DiskRestorePointGrantAccessResponse,
  DiskRestorePointListByRestorePointNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DiskRestorePointOperations operations. */
export class DiskRestorePointOperationsImpl
  implements DiskRestorePointOperations {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class DiskRestorePointOperations class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * Lists diskRestorePoints under a vmRestorePoint.
   *
   */
  public listByRestorePoint(): PagedAsyncIterableIterator<DiskRestorePoint> {
    const iter = this.listByRestorePointPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByRestorePointPagingPage();
      }
    };
  }

  private async *listByRestorePointPagingPage(): AsyncIterableIterator<
    DiskRestorePoint[]
  > {
    let result = await this._listByRestorePoint();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByRestorePointNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByRestorePointPagingAll(): AsyncIterableIterator<
    DiskRestorePoint
  > {
    for await (const page of this.listByRestorePointPagingPage()) {
      yield* page;
    }
  }

  /**
   * Get disk restorePoint resource
   *
   */
  get(): Promise<DiskRestorePointGetResponse> {}

  /**
   * Lists diskRestorePoints under a vmRestorePoint.
   *
   */
  private _listByRestorePoint(): Promise<
    DiskRestorePointListByRestorePointResponse
  > {}

  /**
   * Grants access to a diskRestorePoint.
   *
   */
  async beginGrantAccess(): Promise<
    PollerLike<
      PollOperationState<DiskRestorePointGrantAccessResponse>,
      DiskRestorePointGrantAccessResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DiskRestorePointGrantAccessResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        restorePointCollectionName,
        vmRestorePointName,
        diskRestorePointName,
        options
      },
      grantAccessOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Grants access to a diskRestorePoint.
   *
   */
  async beginGrantAccessAndWait(): Promise<
    DiskRestorePointGrantAccessResponse
  > {
    const poller = await this.beginGrantAccess();
    return poller.pollUntilDone();
  }

  /**
   * Revokes access to a diskRestorePoint.
   *
   */
  async beginRevokeAccess(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * Revokes access to a diskRestorePoint.
   *
   */
  async beginRevokeAccessAndWait(): Promise<void> {
    const poller = await this.beginRevokeAccess();
    return poller.pollUntilDone();
  }

  /**
   * ListByRestorePointNext
   *
   */
  private _listByRestorePointNext(): Promise<
    DiskRestorePointListByRestorePointNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const grantAccessOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{vmRestorePointName}/diskRestorePoints/{diskRestorePointName}/beginGetAccess",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessUri
    },
    201: {
      bodyMapper: Mappers.AccessUri
    },
    202: {
      bodyMapper: Mappers.AccessUri
    },
    204: {
      bodyMapper: Mappers.AccessUri
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.grantAccessData,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.restorePointCollectionName,
    Parameters.vmRestorePointName,
    Parameters.diskRestorePointName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
