/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { RestorePointCollections } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  RestorePointCollection,
  RestorePointCollectionsCreateOrUpdateResponse,
  RestorePointCollectionsUpdateResponse,
  RestorePointCollectionsGetResponse,
  RestorePointCollectionsListResponse,
  RestorePointCollectionsListAllResponse,
  RestorePointCollectionsListNextResponse,
  RestorePointCollectionsListAllNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing RestorePointCollections operations. */
export class RestorePointCollectionsImpl implements RestorePointCollections {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class RestorePointCollections class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * Gets the list of restore point collections in a resource group.
   *
   */
  public list(): PagedAsyncIterableIterator<RestorePointCollection> {
    const iter = this.listPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage();
      }
    };
  }

  private async *listPagingPage(): AsyncIterableIterator<
    RestorePointCollection[]
  > {
    let result = await this._list();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(): AsyncIterableIterator<
    RestorePointCollection
  > {
    for await (const page of this.listPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets the list of restore point collections in the subscription. Use nextLink property in the
   * response to get the next page of restore point collections. Do this till nextLink is not null to
   * fetch all the restore point collections.
   *
   */
  public listAll(): PagedAsyncIterableIterator<RestorePointCollection> {
    const iter = this.listAllPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAllPagingPage();
      }
    };
  }

  private async *listAllPagingPage(): AsyncIterableIterator<
    RestorePointCollection[]
  > {
    let result = await this._listAll();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAllNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAllPagingAll(): AsyncIterableIterator<
    RestorePointCollection
  > {
    for await (const page of this.listAllPagingPage()) {
      yield* page;
    }
  }

  /**
   * The operation to create or update the restore point collection. Please refer to
   * https://aka.ms/RestorePoints for more details. When updating a restore point collection, only tags
   * may be modified.
   *
   */
  createOrUpdate(): Promise<RestorePointCollectionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, restorePointCollectionName, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * The operation to update the restore point collection.
   *
   */
  update(): Promise<RestorePointCollectionsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, restorePointCollectionName, options },
      updateOperationSpec
    );
  }

  /**
   * The operation to delete the restore point collection. This operation will also delete all the
   * contained restore points.
   *
   */
  async beginDelete(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * The operation to delete the restore point collection. This operation will also delete all the
   * contained restore points.
   *
   */
  async beginDeleteAndWait(): Promise<void> {
    const poller = await this.beginDelete();
    return poller.pollUntilDone();
  }

  /**
   * The operation to get the restore point collection.
   *
   */
  get(): Promise<RestorePointCollectionsGetResponse> {}

  /**
   * Gets the list of restore point collections in a resource group.
   *
   */
  private _list(): Promise<RestorePointCollectionsListResponse> {}

  /**
   * Gets the list of restore point collections in the subscription. Use nextLink property in the
   * response to get the next page of restore point collections. Do this till nextLink is not null to
   * fetch all the restore point collections.
   *
   */
  private _listAll(): Promise<RestorePointCollectionsListAllResponse> {}

  /**
   * ListNext
   *
   */
  private _listNext(): Promise<RestorePointCollectionsListNextResponse> {}

  /**
   * ListAllNext
   *
   */
  private _listAllNext(): Promise<RestorePointCollectionsListAllNextResponse> {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RestorePointCollection
    },
    201: {
      bodyMapper: Mappers.RestorePointCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters21,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.restorePointCollectionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RestorePointCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters22,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.restorePointCollectionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
