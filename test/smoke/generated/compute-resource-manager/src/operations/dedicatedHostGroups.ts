/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DedicatedHostGroups } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import {
  DedicatedHostGroup,
  DedicatedHostGroupsCreateOrUpdateResponse,
  DedicatedHostGroupsUpdateResponse,
  DedicatedHostGroupsGetResponse,
  DedicatedHostGroupsListByResourceGroupResponse,
  DedicatedHostGroupsListBySubscriptionResponse,
  DedicatedHostGroupsListByResourceGroupNextResponse,
  DedicatedHostGroupsListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DedicatedHostGroups operations. */
export class DedicatedHostGroupsImpl implements DedicatedHostGroups {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class DedicatedHostGroups class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * Lists all of the dedicated host groups in the specified resource group. Use the nextLink property in
   * the response to get the next page of dedicated host groups.
   *
   */
  public listByResourceGroup(): PagedAsyncIterableIterator<DedicatedHostGroup> {
    const iter = this.listByResourceGroupPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage();
      }
    };
  }

  private async *listByResourceGroupPagingPage(): AsyncIterableIterator<
    DedicatedHostGroup[]
  > {
    let result = await this._listByResourceGroup();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(): AsyncIterableIterator<
    DedicatedHostGroup
  > {
    for await (const page of this.listByResourceGroupPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists all of the dedicated host groups in the subscription. Use the nextLink property in the
   * response to get the next page of dedicated host groups.
   *
   */
  public listBySubscription(): PagedAsyncIterableIterator<DedicatedHostGroup> {
    const iter = this.listBySubscriptionPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage();
      }
    };
  }

  private async *listBySubscriptionPagingPage(): AsyncIterableIterator<
    DedicatedHostGroup[]
  > {
    let result = await this._listBySubscription();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(): AsyncIterableIterator<
    DedicatedHostGroup
  > {
    for await (const page of this.listBySubscriptionPagingPage()) {
      yield* page;
    }
  }

  /**
   * Create or update a dedicated host group. For details of Dedicated Host and Dedicated Host Groups
   * please see [Dedicated Host Documentation] (https://go.microsoft.com/fwlink/?linkid=2082596)
   *
   */
  createOrUpdate(): Promise<DedicatedHostGroupsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, hostGroupName, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Update an dedicated host group.
   *
   */
  update(): Promise<DedicatedHostGroupsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, hostGroupName, options },
      updateOperationSpec
    );
  }

  /**
   * Delete a dedicated host group.
   *
   */
  delete(): Promise<void> {}

  /**
   * Retrieves information about a dedicated host group.
   *
   */
  get(): Promise<DedicatedHostGroupsGetResponse> {}

  /**
   * Lists all of the dedicated host groups in the specified resource group. Use the nextLink property in
   * the response to get the next page of dedicated host groups.
   *
   */
  private _listByResourceGroup(): Promise<
    DedicatedHostGroupsListByResourceGroupResponse
  > {}

  /**
   * Lists all of the dedicated host groups in the subscription. Use the nextLink property in the
   * response to get the next page of dedicated host groups.
   *
   */
  private _listBySubscription(): Promise<
    DedicatedHostGroupsListBySubscriptionResponse
  > {}

  /**
   * ListByResourceGroupNext
   *
   */
  private _listByResourceGroupNext(): Promise<
    DedicatedHostGroupsListByResourceGroupNextResponse
  > {}

  /**
   * ListBySubscriptionNext
   *
   */
  private _listBySubscriptionNext(): Promise<
    DedicatedHostGroupsListBySubscriptionNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHostGroup
    },
    201: {
      bodyMapper: Mappers.DedicatedHostGroup
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hostGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHostGroup
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hostGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
