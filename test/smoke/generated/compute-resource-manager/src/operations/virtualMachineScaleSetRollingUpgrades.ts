/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { VirtualMachineScaleSetRollingUpgrades } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import { ComputeManagementClient } from "../computeManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { VirtualMachineScaleSetRollingUpgradesGetLatestResponse } from "../models";

/** Class containing VirtualMachineScaleSetRollingUpgrades operations. */
export class VirtualMachineScaleSetRollingUpgradesImpl
  implements VirtualMachineScaleSetRollingUpgrades {
  /**
   * Initialize a new instance of the class VirtualMachineScaleSetRollingUpgrades class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {}

  /**
   * Cancels the current virtual machine scale set rolling upgrade.
   *
   */
  async beginCancel(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Cancels the current virtual machine scale set rolling upgrade.
   *
   */
  async beginCancelAndWait(): Promise<void> {
    const poller = await this.beginCancel();
    return poller.pollUntilDone();
  }

  /**
   * Starts a rolling upgrade to move all virtual machine scale set instances to the latest available
   * Platform Image OS version. Instances which are already running the latest available OS version are
   * not affected.
   *
   */
  async beginStartOSUpgrade(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * Starts a rolling upgrade to move all virtual machine scale set instances to the latest available
   * Platform Image OS version. Instances which are already running the latest available OS version are
   * not affected.
   *
   */
  async beginStartOSUpgradeAndWait(): Promise<void> {
    const poller = await this.beginStartOSUpgrade();
    return poller.pollUntilDone();
  }

  /**
   * Starts a rolling upgrade to move all extensions for all virtual machine scale set instances to the
   * latest available extension version. Instances which are already running the latest extension
   * versions are not affected.
   *
   */
  async beginStartExtensionUpgrade(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * Starts a rolling upgrade to move all extensions for all virtual machine scale set instances to the
   * latest available extension version. Instances which are already running the latest extension
   * versions are not affected.
   *
   */
  async beginStartExtensionUpgradeAndWait(): Promise<void> {
    const poller = await this.beginStartExtensionUpgrade();
    return poller.pollUntilDone();
  }

  /**
   * Gets the status of the latest virtual machine scale set rolling upgrade.
   *
   */
  getLatest(): Promise<
    VirtualMachineScaleSetRollingUpgradesGetLatestResponse
  > {}
}
// Operation Specifications
