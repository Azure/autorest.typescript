/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { VirtualMachines } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  VirtualMachine,
  VirtualMachineSize,
  VirtualMachinesListByLocationResponse,
  VirtualMachinesCaptureResponse,
  VirtualMachinesCreateOrUpdateResponse,
  VirtualMachinesUpdateResponse,
  VirtualMachinesGetResponse,
  VirtualMachinesInstanceViewResponse,
  VirtualMachinesListResponse,
  VirtualMachinesListAllResponse,
  VirtualMachinesListAvailableSizesResponse,
  VirtualMachinesRetrieveBootDiagnosticsDataResponse,
  VirtualMachinesAssessPatchesResponse,
  VirtualMachinesInstallPatchesResponse,
  VirtualMachinesRunCommandApplicationJsonOptionalParams,
  VirtualMachinesRunCommandTextJsonOptionalParams,
  VirtualMachinesRunCommandResponse,
  VirtualMachinesListByLocationNextResponse,
  VirtualMachinesListNextResponse,
  VirtualMachinesListAllNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing VirtualMachines operations. */
export class VirtualMachinesImpl implements VirtualMachines {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class VirtualMachines class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * Gets all the virtual machines under the specified subscription for the specified location.
   *
   */
  public listByLocation(): PagedAsyncIterableIterator<VirtualMachine> {
    const iter = this.listByLocationPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByLocationPagingPage();
      }
    };
  }

  private async *listByLocationPagingPage(): AsyncIterableIterator<
    VirtualMachine[]
  > {
    let result = await this._listByLocation();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByLocationNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByLocationPagingAll(): AsyncIterableIterator<
    VirtualMachine
  > {
    for await (const page of this.listByLocationPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists all of the virtual machines in the specified resource group. Use the nextLink property in the
   * response to get the next page of virtual machines.
   *
   */
  public list(): PagedAsyncIterableIterator<VirtualMachine> {
    const iter = this.listPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage();
      }
    };
  }

  private async *listPagingPage(): AsyncIterableIterator<VirtualMachine[]> {
    let result = await this._list();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(): AsyncIterableIterator<VirtualMachine> {
    for await (const page of this.listPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists all of the virtual machines in the specified subscription. Use the nextLink property in the
   * response to get the next page of virtual machines.
   *
   */
  public listAll(): PagedAsyncIterableIterator<VirtualMachine> {
    const iter = this.listAllPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAllPagingPage();
      }
    };
  }

  private async *listAllPagingPage(): AsyncIterableIterator<VirtualMachine[]> {
    let result = await this._listAll();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAllNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAllPagingAll(): AsyncIterableIterator<VirtualMachine> {
    for await (const page of this.listAllPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists all available virtual machine sizes to which the specified virtual machine can be resized.
   *
   */
  public listAvailableSizes(): PagedAsyncIterableIterator<VirtualMachineSize> {
    const iter = this.listAvailableSizesPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAvailableSizesPagingPage();
      }
    };
  }

  private async *listAvailableSizesPagingPage(): AsyncIterableIterator<
    VirtualMachineSize[]
  > {
    let result = await this._listAvailableSizes();
    yield result.value || [];
  }

  private async *listAvailableSizesPagingAll(): AsyncIterableIterator<
    VirtualMachineSize
  > {
    for await (const page of this.listAvailableSizesPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets all the virtual machines under the specified subscription for the specified location.
   *
   */
  private _listByLocation(): Promise<VirtualMachinesListByLocationResponse> {}

  /**
   * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used to
   * create similar VMs.
   *
   */
  async beginCapture(): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesCaptureResponse>,
      VirtualMachinesCaptureResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<VirtualMachinesCaptureResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, vmName, options },
      captureOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used to
   * create similar VMs.
   *
   */
  async beginCaptureAndWait(): Promise<VirtualMachinesCaptureResponse> {
    const poller = await this.beginCapture();
    return poller.pollUntilDone();
  }

  /**
   * The operation to create or update a virtual machine. Please note some properties can be set only
   * during virtual machine creation.
   *
   */
  async beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesCreateOrUpdateResponse>,
      VirtualMachinesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<VirtualMachinesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, vmName, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to create or update a virtual machine. Please note some properties can be set only
   * during virtual machine creation.
   *
   */
  async beginCreateOrUpdateAndWait(): Promise<
    VirtualMachinesCreateOrUpdateResponse
  > {
    const poller = await this.beginCreateOrUpdate();
    return poller.pollUntilDone();
  }

  /**
   * The operation to update a virtual machine.
   *
   */
  async beginUpdate(): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesUpdateResponse>,
      VirtualMachinesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<VirtualMachinesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, vmName, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to update a virtual machine.
   *
   */
  async beginUpdateAndWait(): Promise<VirtualMachinesUpdateResponse> {
    const poller = await this.beginUpdate();
    return poller.pollUntilDone();
  }

  /**
   * The operation to delete a virtual machine.
   *
   */
  async beginDelete(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * The operation to delete a virtual machine.
   *
   */
  async beginDeleteAndWait(): Promise<void> {
    const poller = await this.beginDelete();
    return poller.pollUntilDone();
  }

  /**
   * Retrieves information about the model view or the instance view of a virtual machine.
   *
   */
  get(): Promise<VirtualMachinesGetResponse> {}

  /**
   * Retrieves information about the run-time state of a virtual machine.
   *
   */
  instanceView(): Promise<VirtualMachinesInstanceViewResponse> {}

  /**
   * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
   * stop-deallocated before invoking this operation.
   *
   */
  async beginConvertToManagedDisks(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
   * stop-deallocated before invoking this operation.
   *
   */
  async beginConvertToManagedDisksAndWait(): Promise<void> {
    const poller = await this.beginConvertToManagedDisks();
    return poller.pollUntilDone();
  }

  /**
   * Shuts down the virtual machine and releases the compute resources. You are not billed for the
   * compute resources that this virtual machine uses.
   *
   */
  async beginDeallocate(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * Shuts down the virtual machine and releases the compute resources. You are not billed for the
   * compute resources that this virtual machine uses.
   *
   */
  async beginDeallocateAndWait(): Promise<void> {
    const poller = await this.beginDeallocate();
    return poller.pollUntilDone();
  }

  /**
   * Sets the OS state of the virtual machine to generalized. It is recommended to sysprep the virtual
   * machine before performing this operation. <br>For Windows, please refer to [Create a managed image
   * of a generalized VM in
   * Azure](https://docs.microsoft.com/azure/virtual-machines/windows/capture-image-resource).<br>For
   * Linux, please refer to [How to create an image of a virtual machine or
   * VHD](https://docs.microsoft.com/azure/virtual-machines/linux/capture-image).
   *
   */
  generalize(): Promise<void> {}

  /**
   * Lists all of the virtual machines in the specified resource group. Use the nextLink property in the
   * response to get the next page of virtual machines.
   *
   */
  private _list(): Promise<VirtualMachinesListResponse> {}

  /**
   * Lists all of the virtual machines in the specified subscription. Use the nextLink property in the
   * response to get the next page of virtual machines.
   *
   */
  private _listAll(): Promise<VirtualMachinesListAllResponse> {}

  /**
   * Lists all available virtual machine sizes to which the specified virtual machine can be resized.
   *
   */
  private _listAvailableSizes(): Promise<
    VirtualMachinesListAvailableSizesResponse
  > {}

  /**
   * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with the
   * same provisioned resources. You are still charged for this virtual machine.
   *
   */
  async beginPowerOff(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with the
   * same provisioned resources. You are still charged for this virtual machine.
   *
   */
  async beginPowerOffAndWait(): Promise<void> {
    const poller = await this.beginPowerOff();
    return poller.pollUntilDone();
  }

  /**
   * The operation to reapply a virtual machine's state.
   *
   */
  async beginReapply(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * The operation to reapply a virtual machine's state.
   *
   */
  async beginReapplyAndWait(): Promise<void> {
    const poller = await this.beginReapply();
    return poller.pollUntilDone();
  }

  /**
   * The operation to restart a virtual machine.
   *
   */
  async beginRestart(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * The operation to restart a virtual machine.
   *
   */
  async beginRestartAndWait(): Promise<void> {
    const poller = await this.beginRestart();
    return poller.pollUntilDone();
  }

  /**
   * The operation to start a virtual machine.
   *
   */
  async beginStart(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * The operation to start a virtual machine.
   *
   */
  async beginStartAndWait(): Promise<void> {
    const poller = await this.beginStart();
    return poller.pollUntilDone();
  }

  /**
   * Shuts down the virtual machine, moves it to a new node, and powers it back on.
   *
   */
  async beginRedeploy(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Shuts down the virtual machine, moves it to a new node, and powers it back on.
   *
   */
  async beginRedeployAndWait(): Promise<void> {
    const poller = await this.beginRedeploy();
    return poller.pollUntilDone();
  }

  /**
   * Reimages the virtual machine which has an ephemeral OS disk back to its initial state.
   *
   */
  async beginReimage(): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, vmName, options },
      reimageOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Reimages the virtual machine which has an ephemeral OS disk back to its initial state.
   *
   */
  async beginReimageAndWait(): Promise<void> {
    const poller = await this.beginReimage();
    return poller.pollUntilDone();
  }

  /**
   * The operation to retrieve SAS URIs for a virtual machine's boot diagnostic logs.
   *
   */
  retrieveBootDiagnosticsData(): Promise<
    VirtualMachinesRetrieveBootDiagnosticsDataResponse
  > {}

  /**
   * The operation to perform maintenance on a virtual machine.
   *
   */
  async beginPerformMaintenance(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * The operation to perform maintenance on a virtual machine.
   *
   */
  async beginPerformMaintenanceAndWait(): Promise<void> {
    const poller = await this.beginPerformMaintenance();
    return poller.pollUntilDone();
  }

  /**
   * The operation to simulate the eviction of spot virtual machine.
   *
   */
  simulateEviction(): Promise<void> {}

  /**
   * Assess patches on the VM.
   *
   */
  async beginAssessPatches(): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesAssessPatchesResponse>,
      VirtualMachinesAssessPatchesResponse
    >
  > {}

  /**
   * Assess patches on the VM.
   *
   */
  async beginAssessPatchesAndWait(): Promise<
    VirtualMachinesAssessPatchesResponse
  > {
    const poller = await this.beginAssessPatches();
    return poller.pollUntilDone();
  }

  /**
   * Installs patches on the VM.
   *
   */
  async beginInstallPatches(): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesInstallPatchesResponse>,
      VirtualMachinesInstallPatchesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<VirtualMachinesInstallPatchesResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, vmName, options },
      installPatchesOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Installs patches on the VM.
   *
   */
  async beginInstallPatchesAndWait(): Promise<
    VirtualMachinesInstallPatchesResponse
  > {
    const poller = await this.beginInstallPatches();
    return poller.pollUntilDone();
  }

  /**
   * Run command on the VM.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param options The options parameters.
   */
  beginRunCommand(
    resourceGroupName: string,
    vmName: string,
    options?: VirtualMachinesRunCommandApplicationJsonOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesRunCommandResponse>,
      VirtualMachinesRunCommandResponse
    >
  >;
  /**
   * Run command on the VM.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param options The options parameters.
   */
  beginRunCommand(
    resourceGroupName: string,
    vmName: string,
    options?: VirtualMachinesRunCommandTextJsonOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesRunCommandResponse>,
      VirtualMachinesRunCommandResponse
    >
  >;
  /**
   * Run command on the VM.
   *
   */
  async beginRunCommand(): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesRunCommandResponse>,
      VirtualMachinesRunCommandResponse
    >
  > {}

  /**
   * Run command on the VM.
   *
   */
  async beginRunCommandAndWait(): Promise<VirtualMachinesRunCommandResponse> {
    if (args[-1] === "application/json") {
      const poller = await this.beginRunCommand(...args);
      return poller.pollUntilDone();
    } else if (args[-1] === "application/json") {
      const poller = await this.beginRunCommand(...args);
      return poller.pollUntilDone();
    }
    throw new Error("Impossible case");
  }

  /**
   * ListByLocationNext
   *
   */
  private _listByLocationNext(): Promise<
    VirtualMachinesListByLocationNextResponse
  > {}

  /**
   * ListNext
   *
   */
  private _listNext(): Promise<VirtualMachinesListNextResponse> {}

  /**
   * ListAllNext
   *
   */
  private _listAllNext(): Promise<VirtualMachinesListAllNextResponse> {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const captureOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/capture",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineCaptureResult
    },
    201: {
      bodyMapper: Mappers.VirtualMachineCaptureResult
    },
    202: {
      bodyMapper: Mappers.VirtualMachineCaptureResult
    },
    204: {
      bodyMapper: Mappers.VirtualMachineCaptureResult
    }
  },
  requestBody: Parameters.parameters10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.vmName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachine
    },
    201: {
      bodyMapper: Mappers.VirtualMachine
    },
    202: {
      bodyMapper: Mappers.VirtualMachine
    },
    204: {
      bodyMapper: Mappers.VirtualMachine
    }
  },
  requestBody: Parameters.parameters11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.vmName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachine
    },
    201: {
      bodyMapper: Mappers.VirtualMachine
    },
    202: {
      bodyMapper: Mappers.VirtualMachine
    },
    204: {
      bodyMapper: Mappers.VirtualMachine
    }
  },
  requestBody: Parameters.parameters12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.vmName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const reimageOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/reimage",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.parameters13,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.vmName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const installPatchesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/installPatches",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineInstallPatchesResult
    },
    201: {
      bodyMapper: Mappers.VirtualMachineInstallPatchesResult
    },
    202: {
      bodyMapper: Mappers.VirtualMachineInstallPatchesResult
    },
    204: {
      bodyMapper: Mappers.VirtualMachineInstallPatchesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.installPatchesInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.vmName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const runCommand$jsonOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommand",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RunCommandResult
    },
    201: {
      bodyMapper: Mappers.RunCommandResult
    },
    202: {
      bodyMapper: Mappers.RunCommandResult
    },
    204: {
      bodyMapper: Mappers.RunCommandResult
    }
  },
  requestBody: Parameters.parameters14,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.vmName
  ],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "json",
  serializer
};
