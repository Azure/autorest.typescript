/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SshPublicKeys } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import {
  SshPublicKeyResource,
  SshPublicKeysListBySubscriptionResponse,
  SshPublicKeysListByResourceGroupResponse,
  SshPublicKeysCreateResponse,
  SshPublicKeysUpdateResponse,
  SshPublicKeysGetResponse,
  SshPublicKeysGenerateKeyPairResponse,
  SshPublicKeysListBySubscriptionNextResponse,
  SshPublicKeysListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SshPublicKeys operations. */
export class SshPublicKeysImpl implements SshPublicKeys {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class SshPublicKeys class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * Lists all of the SSH public keys in the subscription. Use the nextLink property in the response to
   * get the next page of SSH public keys.
   *
   */
  public listBySubscription(): PagedAsyncIterableIterator<
    SshPublicKeyResource
  > {
    const iter = this.listBySubscriptionPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage();
      }
    };
  }

  private async *listBySubscriptionPagingPage(): AsyncIterableIterator<
    SshPublicKeyResource[]
  > {
    let result = await this._listBySubscription();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(): AsyncIterableIterator<
    SshPublicKeyResource
  > {
    for await (const page of this.listBySubscriptionPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists all of the SSH public keys in the specified resource group. Use the nextLink property in the
   * response to get the next page of SSH public keys.
   *
   */
  public listByResourceGroup(): PagedAsyncIterableIterator<
    SshPublicKeyResource
  > {
    const iter = this.listByResourceGroupPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage();
      }
    };
  }

  private async *listByResourceGroupPagingPage(): AsyncIterableIterator<
    SshPublicKeyResource[]
  > {
    let result = await this._listByResourceGroup();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(): AsyncIterableIterator<
    SshPublicKeyResource
  > {
    for await (const page of this.listByResourceGroupPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists all of the SSH public keys in the subscription. Use the nextLink property in the response to
   * get the next page of SSH public keys.
   *
   */
  private _listBySubscription(): Promise<
    SshPublicKeysListBySubscriptionResponse
  > {}

  /**
   * Lists all of the SSH public keys in the specified resource group. Use the nextLink property in the
   * response to get the next page of SSH public keys.
   *
   */
  private _listByResourceGroup(): Promise<
    SshPublicKeysListByResourceGroupResponse
  > {}

  /**
   * Creates a new SSH public key resource.
   *
   */
  create(): Promise<SshPublicKeysCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sshPublicKeyName, options },
      createOperationSpec
    );
  }

  /**
   * Updates a new SSH public key resource.
   *
   */
  update(): Promise<SshPublicKeysUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sshPublicKeyName, options },
      updateOperationSpec
    );
  }

  /**
   * Delete an SSH public key.
   *
   */
  delete(): Promise<void> {}

  /**
   * Retrieves information about an SSH public key.
   *
   */
  get(): Promise<SshPublicKeysGetResponse> {}

  /**
   * Generates and returns a public/private key pair and populates the SSH public key resource with the
   * public key. The length of the key will be 3072 bits. This operation can only be performed once per
   * SSH public key resource.
   *
   */
  generateKeyPair(): Promise<SshPublicKeysGenerateKeyPairResponse> {}

  /**
   * ListBySubscriptionNext
   *
   */
  private _listBySubscriptionNext(): Promise<
    SshPublicKeysListBySubscriptionNextResponse
  > {}

  /**
   * ListByResourceGroupNext
   *
   */
  private _listByResourceGroupNext(): Promise<
    SshPublicKeysListByResourceGroupNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{sshPublicKeyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SshPublicKeyResource
    },
    201: {
      bodyMapper: Mappers.SshPublicKeyResource
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.sshPublicKeyName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{sshPublicKeyName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SshPublicKeyResource
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.sshPublicKeyName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
