/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { AvailabilitySets } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import {
  AvailabilitySet,
  VirtualMachineSize,
  AvailabilitySetsCreateOrUpdateResponse,
  AvailabilitySetsUpdateResponse,
  AvailabilitySetsGetResponse,
  AvailabilitySetsListBySubscriptionResponse,
  AvailabilitySetsListResponse,
  AvailabilitySetsListAvailableSizesResponse,
  AvailabilitySetsListBySubscriptionNextResponse,
  AvailabilitySetsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AvailabilitySets operations. */
export class AvailabilitySetsImpl implements AvailabilitySets {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class AvailabilitySets class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * Lists all availability sets in a subscription.
   *
   */
  public listBySubscription(): PagedAsyncIterableIterator<AvailabilitySet> {
    const iter = this.listBySubscriptionPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage();
      }
    };
  }

  private async *listBySubscriptionPagingPage(): AsyncIterableIterator<
    AvailabilitySet[]
  > {
    let result = await this._listBySubscription();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(): AsyncIterableIterator<
    AvailabilitySet
  > {
    for await (const page of this.listBySubscriptionPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists all availability sets in a resource group.
   *
   */
  public list(): PagedAsyncIterableIterator<AvailabilitySet> {
    const iter = this.listPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage();
      }
    };
  }

  private async *listPagingPage(): AsyncIterableIterator<AvailabilitySet[]> {
    let result = await this._list();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(): AsyncIterableIterator<AvailabilitySet> {
    for await (const page of this.listPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists all available virtual machine sizes that can be used to create a new virtual machine in an
   * existing availability set.
   *
   */
  public listAvailableSizes(): PagedAsyncIterableIterator<VirtualMachineSize> {
    const iter = this.listAvailableSizesPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAvailableSizesPagingPage();
      }
    };
  }

  private async *listAvailableSizesPagingPage(): AsyncIterableIterator<
    VirtualMachineSize[]
  > {
    let result = await this._listAvailableSizes();
    yield result.value || [];
  }

  private async *listAvailableSizesPagingAll(): AsyncIterableIterator<
    VirtualMachineSize
  > {
    for await (const page of this.listAvailableSizesPagingPage()) {
      yield* page;
    }
  }

  /**
   * Create or update an availability set.
   *
   */
  createOrUpdate(): Promise<AvailabilitySetsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, availabilitySetName, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Update an availability set.
   *
   */
  update(): Promise<AvailabilitySetsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, availabilitySetName, options },
      updateOperationSpec
    );
  }

  /**
   * Delete an availability set.
   *
   */
  delete(): Promise<void> {}

  /**
   * Retrieves information about an availability set.
   *
   */
  get(): Promise<AvailabilitySetsGetResponse> {}

  /**
   * Lists all availability sets in a subscription.
   *
   */
  private _listBySubscription(): Promise<
    AvailabilitySetsListBySubscriptionResponse
  > {}

  /**
   * Lists all availability sets in a resource group.
   *
   */
  private _list(): Promise<AvailabilitySetsListResponse> {}

  /**
   * Lists all available virtual machine sizes that can be used to create a new virtual machine in an
   * existing availability set.
   *
   */
  private _listAvailableSizes(): Promise<
    AvailabilitySetsListAvailableSizesResponse
  > {}

  /**
   * ListBySubscriptionNext
   *
   */
  private _listBySubscriptionNext(): Promise<
    AvailabilitySetsListBySubscriptionNextResponse
  > {}

  /**
   * ListNext
   *
   */
  private _listNext(): Promise<AvailabilitySetsListNextResponse> {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AvailabilitySet
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.availabilitySetName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AvailabilitySet
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.availabilitySetName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
