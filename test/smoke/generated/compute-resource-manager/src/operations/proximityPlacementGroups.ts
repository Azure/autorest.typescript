/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ProximityPlacementGroups } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import {
  ProximityPlacementGroup,
  ProximityPlacementGroupsCreateOrUpdateResponse,
  ProximityPlacementGroupsUpdateResponse,
  ProximityPlacementGroupsGetResponse,
  ProximityPlacementGroupsListBySubscriptionResponse,
  ProximityPlacementGroupsListByResourceGroupResponse,
  ProximityPlacementGroupsListBySubscriptionNextResponse,
  ProximityPlacementGroupsListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ProximityPlacementGroups operations. */
export class ProximityPlacementGroupsImpl implements ProximityPlacementGroups {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class ProximityPlacementGroups class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * Lists all proximity placement groups in a subscription.
   *
   */
  public listBySubscription(): PagedAsyncIterableIterator<
    ProximityPlacementGroup
  > {
    const iter = this.listBySubscriptionPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage();
      }
    };
  }

  private async *listBySubscriptionPagingPage(): AsyncIterableIterator<
    ProximityPlacementGroup[]
  > {
    let result = await this._listBySubscription();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(): AsyncIterableIterator<
    ProximityPlacementGroup
  > {
    for await (const page of this.listBySubscriptionPagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists all proximity placement groups in a resource group.
   *
   */
  public listByResourceGroup(): PagedAsyncIterableIterator<
    ProximityPlacementGroup
  > {
    const iter = this.listByResourceGroupPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage();
      }
    };
  }

  private async *listByResourceGroupPagingPage(): AsyncIterableIterator<
    ProximityPlacementGroup[]
  > {
    let result = await this._listByResourceGroup();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(): AsyncIterableIterator<
    ProximityPlacementGroup
  > {
    for await (const page of this.listByResourceGroupPagingPage()) {
      yield* page;
    }
  }

  /**
   * Create or update a proximity placement group.
   *
   */
  createOrUpdate(): Promise<ProximityPlacementGroupsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, proximityPlacementGroupName, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Update a proximity placement group.
   *
   */
  update(): Promise<ProximityPlacementGroupsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, proximityPlacementGroupName, options },
      updateOperationSpec
    );
  }

  /**
   * Delete a proximity placement group.
   *
   */
  delete(): Promise<void> {}

  /**
   * Retrieves information about a proximity placement group .
   *
   */
  get(): Promise<ProximityPlacementGroupsGetResponse> {}

  /**
   * Lists all proximity placement groups in a subscription.
   *
   */
  private _listBySubscription(): Promise<
    ProximityPlacementGroupsListBySubscriptionResponse
  > {}

  /**
   * Lists all proximity placement groups in a resource group.
   *
   */
  private _listByResourceGroup(): Promise<
    ProximityPlacementGroupsListByResourceGroupResponse
  > {}

  /**
   * ListBySubscriptionNext
   *
   */
  private _listBySubscriptionNext(): Promise<
    ProximityPlacementGroupsListBySubscriptionNextResponse
  > {}

  /**
   * ListByResourceGroupNext
   *
   */
  private _listByResourceGroupNext(): Promise<
    ProximityPlacementGroupsListByResourceGroupNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ProximityPlacementGroup
    },
    201: {
      bodyMapper: Mappers.ProximityPlacementGroup
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.proximityPlacementGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ProximityPlacementGroup
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.proximityPlacementGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
