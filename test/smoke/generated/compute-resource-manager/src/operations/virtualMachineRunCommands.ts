/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { VirtualMachineRunCommands } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  RunCommandDocumentBase,
  VirtualMachineRunCommand,
  VirtualMachineRunCommandsListResponse,
  VirtualMachineRunCommandsGetResponse,
  VirtualMachineRunCommandsCreateOrUpdateApplicationJsonOptionalParams,
  VirtualMachineRunCommandsCreateOrUpdateTextJsonOptionalParams,
  VirtualMachineRunCommandsCreateOrUpdateResponse,
  VirtualMachineRunCommandsUpdateApplicationJsonOptionalParams,
  VirtualMachineRunCommandsUpdateTextJsonOptionalParams,
  VirtualMachineRunCommandsUpdateResponse,
  VirtualMachineRunCommandsGetByVirtualMachineResponse,
  VirtualMachineRunCommandsListByVirtualMachineResponse,
  VirtualMachineRunCommandsListNextResponse,
  VirtualMachineRunCommandsListByVirtualMachineNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing VirtualMachineRunCommands operations. */
export class VirtualMachineRunCommandsImpl
  implements VirtualMachineRunCommands {
  /**
   * Initialize a new instance of the class VirtualMachineRunCommands class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {}

  /**
   * Lists all available run commands for a subscription in a location.
   *
   */
  public list(): PagedAsyncIterableIterator<RunCommandDocumentBase> {
    const iter = this.listPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage();
      }
    };
  }

  private async *listPagingPage(): AsyncIterableIterator<
    RunCommandDocumentBase[]
  > {
    let result = await this._list();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(): AsyncIterableIterator<
    RunCommandDocumentBase
  > {
    for await (const page of this.listPagingPage()) {
      yield* page;
    }
  }

  /**
   * The operation to get all run commands of a Virtual Machine.
   *
   */
  public listByVirtualMachine(): PagedAsyncIterableIterator<
    VirtualMachineRunCommand
  > {
    const iter = this.listByVirtualMachinePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByVirtualMachinePagingPage();
      }
    };
  }

  private async *listByVirtualMachinePagingPage(): AsyncIterableIterator<
    VirtualMachineRunCommand[]
  > {
    let result = await this._listByVirtualMachine();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByVirtualMachineNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByVirtualMachinePagingAll(): AsyncIterableIterator<
    VirtualMachineRunCommand
  > {
    for await (const page of this.listByVirtualMachinePagingPage()) {
      yield* page;
    }
  }

  /**
   * Lists all available run commands for a subscription in a location.
   *
   */
  private _list(): Promise<VirtualMachineRunCommandsListResponse> {}

  /**
   * Gets specific run command for a subscription in a location.
   *
   */
  get(): Promise<VirtualMachineRunCommandsGetResponse> {}

  /**
   * The operation to create or update the run command.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine where the run command should be created or updated.
   * @param runCommandName The name of the virtual machine run command.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    vmName: string,
    runCommandName: string,
    options?: VirtualMachineRunCommandsCreateOrUpdateApplicationJsonOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<VirtualMachineRunCommandsCreateOrUpdateResponse>,
      VirtualMachineRunCommandsCreateOrUpdateResponse
    >
  >;
  /**
   * The operation to create or update the run command.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine where the run command should be created or updated.
   * @param runCommandName The name of the virtual machine run command.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    vmName: string,
    runCommandName: string,
    options?: VirtualMachineRunCommandsCreateOrUpdateTextJsonOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<VirtualMachineRunCommandsCreateOrUpdateResponse>,
      VirtualMachineRunCommandsCreateOrUpdateResponse
    >
  >;
  /**
   * The operation to create or update the run command.
   *
   */
  async beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<VirtualMachineRunCommandsCreateOrUpdateResponse>,
      VirtualMachineRunCommandsCreateOrUpdateResponse
    >
  > {}

  /**
   * The operation to create or update the run command.
   *
   */
  async beginCreateOrUpdateAndWait(): Promise<
    VirtualMachineRunCommandsCreateOrUpdateResponse
  > {
    if (args[-1] === "application/json") {
      const poller = await this.beginCreateOrUpdate(...args);
      return poller.pollUntilDone();
    } else if (args[-1] === "application/json") {
      const poller = await this.beginCreateOrUpdate(...args);
      return poller.pollUntilDone();
    }
    throw new Error("Impossible case");
  }

  /**
   * The operation to update the run command.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine where the run command should be updated.
   * @param runCommandName The name of the virtual machine run command.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    vmName: string,
    runCommandName: string,
    options?: VirtualMachineRunCommandsUpdateApplicationJsonOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<VirtualMachineRunCommandsUpdateResponse>,
      VirtualMachineRunCommandsUpdateResponse
    >
  >;
  /**
   * The operation to update the run command.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine where the run command should be updated.
   * @param runCommandName The name of the virtual machine run command.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    vmName: string,
    runCommandName: string,
    options?: VirtualMachineRunCommandsUpdateTextJsonOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<VirtualMachineRunCommandsUpdateResponse>,
      VirtualMachineRunCommandsUpdateResponse
    >
  >;
  /**
   * The operation to update the run command.
   *
   */
  async beginUpdate(): Promise<
    PollerLike<
      PollOperationState<VirtualMachineRunCommandsUpdateResponse>,
      VirtualMachineRunCommandsUpdateResponse
    >
  > {}

  /**
   * The operation to update the run command.
   *
   */
  async beginUpdateAndWait(): Promise<VirtualMachineRunCommandsUpdateResponse> {
    if (args[-1] === "application/json") {
      const poller = await this.beginUpdate(...args);
      return poller.pollUntilDone();
    } else if (args[-1] === "application/json") {
      const poller = await this.beginUpdate(...args);
      return poller.pollUntilDone();
    }
    throw new Error("Impossible case");
  }

  /**
   * The operation to delete the run command.
   *
   */
  async beginDelete(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * The operation to delete the run command.
   *
   */
  async beginDeleteAndWait(): Promise<void> {
    const poller = await this.beginDelete();
    return poller.pollUntilDone();
  }

  /**
   * The operation to get the run command.
   *
   */
  getByVirtualMachine(): Promise<
    VirtualMachineRunCommandsGetByVirtualMachineResponse
  > {}

  /**
   * The operation to get all run commands of a Virtual Machine.
   *
   */
  private _listByVirtualMachine(): Promise<
    VirtualMachineRunCommandsListByVirtualMachineResponse
  > {}

  /**
   * ListNext
   *
   */
  private _listNext(): Promise<VirtualMachineRunCommandsListNextResponse> {}

  /**
   * ListByVirtualMachineNext
   *
   */
  private _listByVirtualMachineNext(): Promise<
    VirtualMachineRunCommandsListByVirtualMachineNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdate$jsonOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommands/{runCommandName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineRunCommand
    },
    201: {
      bodyMapper: Mappers.VirtualMachineRunCommand
    },
    202: {
      bodyMapper: Mappers.VirtualMachineRunCommand
    },
    204: {
      bodyMapper: Mappers.VirtualMachineRunCommand
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.runCommand,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.vmName,
    Parameters.runCommandName
  ],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "json",
  serializer
};
const update$jsonOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommands/{runCommandName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineRunCommand
    },
    201: {
      bodyMapper: Mappers.VirtualMachineRunCommand
    },
    202: {
      bodyMapper: Mappers.VirtualMachineRunCommand
    },
    204: {
      bodyMapper: Mappers.VirtualMachineRunCommand
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.runCommand1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.vmName,
    Parameters.runCommandName
  ],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "json",
  serializer
};
