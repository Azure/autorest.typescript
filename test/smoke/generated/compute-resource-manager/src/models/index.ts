/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The List Compute Operation operation response.
 */
export interface ComputeOperationListResult {
  /**
   * The list of compute operations
   */
  readonly value?: ComputeOperationValue[];
}

/**
 * Describes the properties of a Compute Operation value.
 */
export interface ComputeOperationValue {
  /**
   * The origin of the compute operation.
   */
  readonly origin?: string;
  /**
   * The name of the compute operation.
   */
  readonly name?: string;
  /**
   * The display name of the compute operation.
   */
  readonly operation?: string;
  /**
   * The display name of the resource the operation applies to.
   */
  readonly resource?: string;
  /**
   * The description of the operation.
   */
  readonly description?: string;
  /**
   * The resource provider for the operation.
   */
  readonly provider?: string;
}

export interface SubResource {
  /**
   * Resource Id
   */
  id?: string;
}

/**
 * Instance view status.
 */
export interface InstanceViewStatus {
  /**
   * The status code.
   */
  code?: string;
  /**
   * The level code.
   */
  level?: StatusLevelTypes;
  /**
   * The short localizable label for the status.
   */
  displayStatus?: string;
  /**
   * The detailed status message, including for alerts and error messages.
   */
  message?: string;
  /**
   * The time of the status.
   */
  time?: Date;
}

/**
 * Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
 */
export interface Sku {
  /**
   * The sku name.
   */
  name?: string;
  /**
   * Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
   */
  tier?: string;
  /**
   * Specifies the number of virtual machines in the scale set.
   */
  capacity?: number;
}

/**
 * The Resource model definition.
 */
export interface Resource {
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The Update Resource model definition.
 */
export interface UpdateResource {
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The List Availability Set operation response.
 */
export interface AvailabilitySetListResult {
  /**
   * The list of availability sets
   */
  value: AvailabilitySet[];
  /**
   * The URI to fetch the next page of AvailabilitySets. Call ListNext() with this URI to fetch the next page of AvailabilitySets.
   */
  nextLink?: string;
}

/**
 * The List Virtual Machine operation response.
 */
export interface VirtualMachineSizeListResult {
  /**
   * The list of virtual machine sizes.
   */
  value?: VirtualMachineSize[];
}

/**
 * Describes the properties of a VM size.
 */
export interface VirtualMachineSize {
  /**
   * The name of the virtual machine size.
   */
  name?: string;
  /**
   * The number of cores supported by the virtual machine size.
   */
  numberOfCores?: number;
  /**
   * The OS disk size, in MB, allowed by the virtual machine size.
   */
  osDiskSizeInMB?: number;
  /**
   * The resource disk size, in MB, allowed by the virtual machine size.
   */
  resourceDiskSizeInMB?: number;
  /**
   * The amount of memory, in MB, supported by the virtual machine size.
   */
  memoryInMB?: number;
  /**
   * The maximum number of data disks that can be attached to the virtual machine size.
   */
  maxDataDiskCount?: number;
}

/**
 * The List Proximity Placement Group operation response.
 */
export interface ProximityPlacementGroupListResult {
  /**
   * The list of proximity placement groups
   */
  value: ProximityPlacementGroup[];
  /**
   * The URI to fetch the next page of proximity placement groups.
   */
  nextLink?: string;
}

export interface SubResourceReadOnly {
  /**
   * Resource Id
   */
  readonly id?: string;
}

/**
 * The List Dedicated Host Group with resource group response.
 */
export interface DedicatedHostGroupListResult {
  /**
   * The list of dedicated host groups
   */
  value: DedicatedHostGroup[];
  /**
   * The URI to fetch the next page of Dedicated Host Groups. Call ListNext() with this URI to fetch the next page of Dedicated Host Groups.
   */
  nextLink?: string;
}

/**
 * The instance view of a dedicated host.
 */
export interface DedicatedHostInstanceView {
  /**
   * Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
   */
  readonly assetId?: string;
  /**
   * Unutilized capacity of the dedicated host.
   */
  availableCapacity?: DedicatedHostAvailableCapacity;
  /**
   * The resource status information.
   */
  statuses?: InstanceViewStatus[];
}

/**
 * Dedicated host unutilized capacity.
 */
export interface DedicatedHostAvailableCapacity {
  /**
   * The unutilized capacity of the dedicated host represented in terms of each VM size that is allowed to be deployed to the dedicated host.
   */
  allocatableVMs?: DedicatedHostAllocatableVM[];
}

/**
 * Represents the dedicated host unutilized capacity in terms of a specific VM size.
 */
export interface DedicatedHostAllocatableVM {
  /**
   * VM size in terms of which the unutilized capacity is represented.
   */
  vmSize?: string;
  /**
   * Maximum number of VMs of size vmSize that can fit in the dedicated host's remaining capacity.
   */
  count?: number;
}

/**
 * The list dedicated host operation response.
 */
export interface DedicatedHostListResult {
  /**
   * The list of dedicated hosts
   */
  value: DedicatedHost[];
  /**
   * The URI to fetch the next page of dedicated hosts. Call ListNext() with this URI to fetch the next page of dedicated hosts.
   */
  nextLink?: string;
}

/**
 * The list SSH public keys operation response.
 */
export interface SshPublicKeysGroupListResult {
  /**
   * The list of SSH public keys
   */
  value: SshPublicKeyResource[];
  /**
   * The URI to fetch the next page of SSH public keys. Call ListNext() with this URI to fetch the next page of SSH public keys.
   */
  nextLink?: string;
}

/**
 * Response from generation of an SSH key pair.
 */
export interface SshPublicKeyGenerateKeyPairResult {
  /**
   * Private key portion of the key pair used to authenticate to a virtual machine through ssh. The private key is returned in RFC3447 format and should be treated as a secret.
   */
  privateKey: string;
  /**
   * Public key portion of the key pair used to authenticate to a virtual machine through ssh. The public key is in ssh-rsa format.
   */
  publicKey: string;
  /**
   * The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{SshPublicKeyName}
   */
  id: string;
}

/**
 * The instance view of a virtual machine extension.
 */
export interface VirtualMachineExtensionInstanceView {
  /**
   * The virtual machine extension name.
   */
  name?: string;
  /**
   * Specifies the type of the extension; an example is "CustomScriptExtension".
   */
  type?: string;
  /**
   * Specifies the version of the script handler.
   */
  typeHandlerVersion?: string;
  /**
   * The resource status information.
   */
  substatuses?: InstanceViewStatus[];
  /**
   * The resource status information.
   */
  statuses?: InstanceViewStatus[];
}

/**
 * The List Extension operation response
 */
export interface VirtualMachineExtensionsListResult {
  /**
   * The list of extensions
   */
  value?: VirtualMachineExtension[];
}

/**
 * Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
 */
export interface PurchasePlan {
  /**
   * The publisher ID.
   */
  publisher: string;
  /**
   * The plan ID.
   */
  name: string;
  /**
   * Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
   */
  product: string;
}

/**
 * Contains the os disk image information.
 */
export interface OSDiskImage {
  /**
   * The operating system of the osDiskImage.
   */
  operatingSystem: OperatingSystemTypes;
}

/**
 * Contains the data disk images information.
 */
export interface DataDiskImage {
  /**
   * Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
   */
  readonly lun?: number;
}

/**
 * Describes automatic OS upgrade properties on the image.
 */
export interface AutomaticOSUpgradeProperties {
  /**
   * Specifies whether automatic OS upgrade is supported on the image.
   */
  automaticOSUpgradeSupported: boolean;
}

/**
 * The List Usages operation response.
 */
export interface ListUsagesResult {
  /**
   * The list of compute resource usages.
   */
  value: Usage[];
  /**
   * The URI to fetch the next page of compute resource usage information. Call ListNext() with this to fetch the next page of compute resource usage information.
   */
  nextLink?: string;
}

/**
 * Describes Compute Resource Usage.
 */
export interface Usage {
  /**
   * An enum describing the unit of usage measurement.
   */
  unit: "Count";
  /**
   * The current usage of the resource.
   */
  currentValue: number;
  /**
   * The maximum permitted usage of the resource.
   */
  limit: number;
  /**
   * The name of the type of usage.
   */
  name: UsageName;
}

/**
 * The Usage Names.
 */
export interface UsageName {
  /**
   * The name of the resource.
   */
  value?: string;
  /**
   * The localized name of the resource.
   */
  localizedValue?: string;
}

/**
 * The List Virtual Machine operation response.
 */
export interface VirtualMachineListResult {
  /**
   * The list of virtual machines.
   */
  value: VirtualMachine[];
  /**
   * The URI to fetch the next page of VMs. Call ListNext() with this URI to fetch the next page of Virtual Machines.
   */
  nextLink?: string;
}

/**
 * Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
 */
export interface Plan {
  /**
   * The plan ID.
   */
  name?: string;
  /**
   * The publisher ID.
   */
  publisher?: string;
  /**
   * Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
   */
  product?: string;
  /**
   * The promotion code.
   */
  promotionCode?: string;
}

/**
 * Specifies the hardware settings for the virtual machine.
 */
export interface HardwareProfile {
  /**
   * Specifies the size of the virtual machine. For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-sizes?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). <br><br> The available VM sizes depend on region and availability set. For a list of available sizes use these APIs:  <br><br> [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes) <br><br> [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/virtualmachinesizes/list) <br><br> [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes)
   */
  vmSize?: VirtualMachineSizeTypes;
}

/**
 * Specifies the storage settings for the virtual machine disks.
 */
export interface StorageProfile {
  /**
   * Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
   */
  imageReference?: ImageReference;
  /**
   * Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
   */
  osDisk?: OSDisk;
  /**
   * Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
   */
  dataDisks?: DataDisk[];
}

/**
 * Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
 */
export interface OSDisk {
  /**
   * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
   */
  osType?: OperatingSystemTypes;
  /**
   * Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15
   */
  encryptionSettings?: DiskEncryptionSettings;
  /**
   * The disk name.
   */
  name?: string;
  /**
   * The virtual hard disk.
   */
  vhd?: VirtualHardDisk;
  /**
   * The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
   */
  image?: VirtualHardDisk;
  /**
   * Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None** for Standard storage. **ReadOnly** for Premium storage.
   */
  caching?: CachingTypes;
  /**
   * Specifies whether writeAccelerator should be enabled or disabled on the disk.
   */
  writeAcceleratorEnabled?: boolean;
  /**
   * Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
   */
  diffDiskSettings?: DiffDiskSettings;
  /**
   * Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
   */
  createOption: DiskCreateOptionTypes;
  /**
   * Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
   */
  diskSizeGB?: number;
  /**
   * The managed disk parameters.
   */
  managedDisk?: ManagedDiskParameters;
}

/**
 * Describes a Encryption Settings for a Disk
 */
export interface DiskEncryptionSettings {
  /**
   * Specifies the location of the disk encryption key, which is a Key Vault Secret.
   */
  diskEncryptionKey?: KeyVaultSecretReference;
  /**
   * Specifies the location of the key encryption key in Key Vault.
   */
  keyEncryptionKey?: KeyVaultKeyReference;
  /**
   * Specifies whether disk encryption should be enabled on the virtual machine.
   */
  enabled?: boolean;
}

/**
 * Describes a reference to Key Vault Secret
 */
export interface KeyVaultSecretReference {
  /**
   * The URL referencing a secret in a Key Vault.
   */
  secretUrl: string;
  /**
   * The relative URL of the Key Vault containing the secret.
   */
  sourceVault: SubResource;
}

/**
 * Describes a reference to Key Vault Key
 */
export interface KeyVaultKeyReference {
  /**
   * The URL referencing a key encryption key in Key Vault.
   */
  keyUrl: string;
  /**
   * The relative URL of the Key Vault containing the key.
   */
  sourceVault: SubResource;
}

/**
 * Describes the uri of a disk.
 */
export interface VirtualHardDisk {
  /**
   * Specifies the virtual hard disk's uri.
   */
  uri?: string;
}

/**
 * Describes the parameters of ephemeral disk settings that can be specified for operating system disk. <br><br> NOTE: The ephemeral disk settings can only be specified for managed disk.
 */
export interface DiffDiskSettings {
  /**
   * Specifies the ephemeral disk settings for operating system disk.
   */
  option?: DiffDiskOptions;
  /**
   * Specifies the ephemeral disk placement for operating system disk.<br><br> Possible values are: <br><br> **CacheDisk** <br><br> **ResourceDisk** <br><br> Default: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** is used.<br><br> Refer to VM size documentation for Windows VM at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk.
   */
  placement?: DiffDiskPlacement;
}

/**
 * Describes a data disk.
 */
export interface DataDisk {
  /**
   * Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
   */
  lun: number;
  /**
   * The disk name.
   */
  name?: string;
  /**
   * The virtual hard disk.
   */
  vhd?: VirtualHardDisk;
  /**
   * The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
   */
  image?: VirtualHardDisk;
  /**
   * Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
   */
  caching?: CachingTypes;
  /**
   * Specifies whether writeAccelerator should be enabled or disabled on the disk.
   */
  writeAcceleratorEnabled?: boolean;
  /**
   * Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
   */
  createOption: DiskCreateOptionTypes;
  /**
   * Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
   */
  diskSizeGB?: number;
  /**
   * The managed disk parameters.
   */
  managedDisk?: ManagedDiskParameters;
  /**
   * Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
   */
  toBeDetached?: boolean;
  /**
   * Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
   */
  readonly diskIopsReadWrite?: number;
  /**
   * Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
   */
  readonly diskMBpsReadWrite?: number;
}

/**
 * Enables or disables a capability on the virtual machine or virtual machine scale set.
 */
export interface AdditionalCapabilities {
  /**
   * The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
   */
  ultraSSDEnabled?: boolean;
}

/**
 * Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
 */
export interface OSProfile {
  /**
   * Specifies the host OS name of the virtual machine. <br><br> This name cannot be updated after the VM is created. <br><br> **Max-length (Windows):** 15 characters <br><br> **Max-length (Linux):** 64 characters. <br><br> For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).
   */
  computerName?: string;
  /**
   * Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
   */
  adminUsername?: string;
  /**
   * Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
   */
  adminPassword?: string;
  /**
   * Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> **Note: Do not pass any secrets or passwords in customData property** <br><br> This property cannot be updated after the VM is created. <br><br> customData is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/) <br><br> For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
   */
  customData?: string;
  /**
   * Specifies Windows operating system settings on the virtual machine.
   */
  windowsConfiguration?: WindowsConfiguration;
  /**
   * Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
   */
  linuxConfiguration?: LinuxConfiguration;
  /**
   * Specifies set of certificates that should be installed onto the virtual machine.
   */
  secrets?: VaultSecretGroup[];
  /**
   * Specifies whether extension operations should be allowed on the virtual machine. <br><br>This may only be set to False when no extensions are present on the virtual machine.
   */
  allowExtensionOperations?: boolean;
  /**
   * Specifies whether the guest provision signal is required to infer provision success of the virtual machine.
   */
  requireGuestProvisionSignal?: boolean;
}

/**
 * Specifies Windows operating system settings on the virtual machine.
 */
export interface WindowsConfiguration {
  /**
   * Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
   */
  provisionVMAgent?: boolean;
  /**
   * Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. <br><br> For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
   */
  enableAutomaticUpdates?: boolean;
  /**
   * Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". <br><br> Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.getsystemtimezones).
   */
  timeZone?: string;
  /**
   * Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
   */
  additionalUnattendContent?: AdditionalUnattendContent[];
  /**
   * Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
   */
  winRM?: WinRMConfiguration;
}

/**
 * Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied.
 */
export interface AdditionalUnattendContent {
  /**
   * The pass name. Currently, the only allowable value is OobeSystem.
   */
  passName?: "OobeSystem";
  /**
   * The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
   */
  componentName?: "Microsoft-Windows-Shell-Setup";
  /**
   * Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
   */
  settingName?: SettingNames;
  /**
   * Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.
   */
  content?: string;
}

/**
 * Describes Windows Remote Management configuration of the VM
 */
export interface WinRMConfiguration {
  /**
   * The list of Windows Remote Management listeners
   */
  listeners?: WinRMListener[];
}

/**
 * Describes Protocol and thumbprint of Windows Remote Management listener
 */
export interface WinRMListener {
  /**
   * Specifies the protocol of WinRM listener. <br><br> Possible values are: <br>**http** <br><br> **https**
   */
  protocol?: ProtocolTypes;
  /**
   * This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>}
   */
  certificateUrl?: string;
}

/**
 * Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
 */
export interface LinuxConfiguration {
  /**
   * Specifies whether password authentication should be disabled.
   */
  disablePasswordAuthentication?: boolean;
  /**
   * Specifies the ssh key configuration for a Linux OS.
   */
  ssh?: SshConfiguration;
  /**
   * Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
   */
  provisionVMAgent?: boolean;
}

/**
 * SSH configuration for Linux based VMs running on Azure
 */
export interface SshConfiguration {
  /**
   * The list of SSH public keys used to authenticate with linux based VMs.
   */
  publicKeys?: SshPublicKey[];
}

/**
 * Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
 */
export interface SshPublicKey {
  /**
   * Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
   */
  path?: string;
  /**
   * SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
   */
  keyData?: string;
}

/**
 * Describes a set of certificates which are all in the same Key Vault.
 */
export interface VaultSecretGroup {
  /**
   * The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
   */
  sourceVault?: SubResource;
  /**
   * The list of key vault references in SourceVault which contain certificates.
   */
  vaultCertificates?: VaultCertificate[];
}

/**
 * Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
 */
export interface VaultCertificate {
  /**
   * This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>}
   */
  certificateUrl?: string;
  /**
   * For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. <br><br>For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted.
   */
  certificateStore?: string;
}

/**
 * Specifies the network interfaces of the virtual machine.
 */
export interface NetworkProfile {
  /**
   * Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
   */
  networkInterfaces?: NetworkInterfaceReference[];
}

/**
 * Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
 */
export interface DiagnosticsProfile {
  /**
   * Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
   */
  bootDiagnostics?: BootDiagnostics;
}

/**
 * Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
 */
export interface BootDiagnostics {
  /**
   * Whether boot diagnostics should be enabled on the Virtual Machine.
   */
  enabled?: boolean;
  /**
   * Uri of the storage account to use for placing the console output and screenshot.
   */
  storageUri?: string;
}

/**
 * Specifies the billing related details of a Azure Spot VM or VMSS. <br><br>Minimum api-version: 2019-03-01.
 */
export interface BillingProfile {
  /**
   * Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01.
   */
  maxPrice?: number;
}

/**
 * The instance view of a virtual machine.
 */
export interface VirtualMachineInstanceView {
  /**
   * Specifies the update domain of the virtual machine.
   */
  platformUpdateDomain?: number;
  /**
   * Specifies the fault domain of the virtual machine.
   */
  platformFaultDomain?: number;
  /**
   * The computer name assigned to the virtual machine.
   */
  computerName?: string;
  /**
   * The Operating System running on the virtual machine.
   */
  osName?: string;
  /**
   * The version of Operating System running on the virtual machine.
   */
  osVersion?: string;
  /**
   * Specifies the HyperVGeneration Type associated with a resource
   */
  hyperVGeneration?: HyperVGenerationType;
  /**
   * The Remote desktop certificate thumbprint.
   */
  rdpThumbPrint?: string;
  /**
   * The VM Agent running on the virtual machine.
   */
  vmAgent?: VirtualMachineAgentInstanceView;
  /**
   * The Maintenance Operation status on the virtual machine.
   */
  maintenanceRedeployStatus?: MaintenanceRedeployStatus;
  /**
   * The virtual machine disk information.
   */
  disks?: DiskInstanceView[];
  /**
   * The extensions information.
   */
  extensions?: VirtualMachineExtensionInstanceView[];
  /**
   * Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
   */
  bootDiagnostics?: BootDiagnosticsInstanceView;
  /**
   * The resource status information.
   */
  statuses?: InstanceViewStatus[];
}

/**
 * The instance view of the VM Agent running on the virtual machine.
 */
export interface VirtualMachineAgentInstanceView {
  /**
   * The VM Agent full version.
   */
  vmAgentVersion?: string;
  /**
   * The virtual machine extension handler instance view.
   */
  extensionHandlers?: VirtualMachineExtensionHandlerInstanceView[];
  /**
   * The resource status information.
   */
  statuses?: InstanceViewStatus[];
}

/**
 * The instance view of a virtual machine extension handler.
 */
export interface VirtualMachineExtensionHandlerInstanceView {
  /**
   * Specifies the type of the extension; an example is "CustomScriptExtension".
   */
  type?: string;
  /**
   * Specifies the version of the script handler.
   */
  typeHandlerVersion?: string;
  /**
   * The extension handler status.
   */
  status?: InstanceViewStatus;
}

/**
 * Maintenance Operation Status.
 */
export interface MaintenanceRedeployStatus {
  /**
   * True, if customer is allowed to perform Maintenance.
   */
  isCustomerInitiatedMaintenanceAllowed?: boolean;
  /**
   * Start Time for the Pre Maintenance Window.
   */
  preMaintenanceWindowStartTime?: Date;
  /**
   * End Time for the Pre Maintenance Window.
   */
  preMaintenanceWindowEndTime?: Date;
  /**
   * Start Time for the Maintenance Window.
   */
  maintenanceWindowStartTime?: Date;
  /**
   * End Time for the Maintenance Window.
   */
  maintenanceWindowEndTime?: Date;
  /**
   * The Last Maintenance Operation Result Code.
   */
  lastOperationResultCode?: MaintenanceOperationResultCodeTypes;
  /**
   * Message returned for the last Maintenance Operation.
   */
  lastOperationMessage?: string;
}

/**
 * The instance view of the disk.
 */
export interface DiskInstanceView {
  /**
   * The disk name.
   */
  name?: string;
  /**
   * Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15
   */
  encryptionSettings?: DiskEncryptionSettings[];
  /**
   * The resource status information.
   */
  statuses?: InstanceViewStatus[];
}

/**
 * The instance view of a virtual machine boot diagnostics.
 */
export interface BootDiagnosticsInstanceView {
  /**
   * The console screenshot blob URI.
   */
  readonly consoleScreenshotBlobUri?: string;
  /**
   * The Linux serial console log blob Uri.
   */
  readonly serialConsoleLogBlobUri?: string;
  /**
   * The boot diagnostics status information for the VM. <br><br> NOTE: It will be set only if there are errors encountered in enabling boot diagnostics.
   */
  readonly status?: InstanceViewStatus;
}

/**
 * Identity for the virtual machine.
 */
export interface VirtualMachineIdentity {
  /**
   * The principal id of virtual machine identity. This property will only be provided for a system assigned identity.
   */
  readonly principalId?: string;
  /**
   * The tenant id associated with the virtual machine. This property will only be provided for a system assigned identity.
   */
  readonly tenantId?: string;
  /**
   * The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
   */
  type?: ResourceIdentityType;
  /**
   * The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   */
  userAssignedIdentities?: {
    [propertyName: string]: Components1H8M3EpSchemasVirtualmachineidentityPropertiesUserassignedidentitiesAdditionalproperties;
  };
}

export interface Components1H8M3EpSchemasVirtualmachineidentityPropertiesUserassignedidentitiesAdditionalproperties {
  /**
   * The principal id of user assigned identity.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   */
  readonly clientId?: string;
}

/**
 * Describes a storage profile.
 */
export interface ImageStorageProfile {
  /**
   * Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
   */
  osDisk?: ImageOSDisk;
  /**
   * Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
   */
  dataDisks?: ImageDataDisk[];
  /**
   * Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
   */
  zoneResilient?: boolean;
}

/**
 * Describes a image disk.
 */
export interface ImageDisk {
  /**
   * The snapshot.
   */
  snapshot?: SubResource;
  /**
   * The managedDisk.
   */
  managedDisk?: SubResource;
  /**
   * The Virtual Hard Disk.
   */
  blobUri?: string;
  /**
   * Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
   */
  caching?: CachingTypes;
  /**
   * Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
   */
  diskSizeGB?: number;
  /**
   * Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
   */
  storageAccountType?: StorageAccountTypes;
  /**
   * Specifies the customer managed disk encryption set resource id for the managed image disk.
   */
  diskEncryptionSet?: SubResource;
}

/**
 * The List Image operation response.
 */
export interface ImageListResult {
  /**
   * The list of Images.
   */
  value: Image[];
  /**
   * The uri to fetch the next page of Images. Call ListNext() with this to fetch the next page of Images.
   */
  nextLink?: string;
}

/**
 * Capture Virtual Machine parameters.
 */
export interface VirtualMachineCaptureParameters {
  /**
   * The captured virtual hard disk's name prefix.
   */
  vhdPrefix: string;
  /**
   * The destination container name.
   */
  destinationContainerName: string;
  /**
   * Specifies whether to overwrite the destination virtual hard disk, in case of conflict.
   */
  overwriteVhds: boolean;
}

/**
 * An error response from the Compute service.
 */
export interface CloudError {
  /**
   * Api error.
   */
  error?: ApiError;
}

/**
 * Api error.
 */
export interface ApiError {
  /**
   * The Api error details
   */
  details?: ApiErrorBase[];
  /**
   * The Api inner error
   */
  innererror?: InnerError;
  /**
   * The error code.
   */
  code?: string;
  /**
   * The target of the particular error.
   */
  target?: string;
  /**
   * The error message.
   */
  message?: string;
}

/**
 * Api error base.
 */
export interface ApiErrorBase {
  /**
   * The error code.
   */
  code?: string;
  /**
   * The target of the particular error.
   */
  target?: string;
  /**
   * The error message.
   */
  message?: string;
}

/**
 * Inner error details.
 */
export interface InnerError {
  /**
   * The exception type.
   */
  exceptiontype?: string;
  /**
   * The internal error message or exception dump.
   */
  errordetail?: string;
}

/**
 * Parameters for Reimaging Virtual Machine. NOTE: Virtual Machine OS disk will always be reimaged
 */
export interface VirtualMachineReimageParameters {
  /**
   * Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage parameter is only supported for VM/VMSS with Ephemeral OS disk.
   */
  tempDisk?: boolean;
}

/**
 * Describes an upgrade policy - automatic, manual, or rolling.
 */
export interface UpgradePolicy {
  /**
   * Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
   */
  mode?: UpgradeMode;
  /**
   * The configuration parameters used while performing a rolling upgrade.
   */
  rollingUpgradePolicy?: RollingUpgradePolicy;
  /**
   * Configuration parameters used for performing automatic OS Upgrade.
   */
  automaticOSUpgradePolicy?: AutomaticOSUpgradePolicy;
}

/**
 * The configuration parameters used while performing a rolling upgrade.
 */
export interface RollingUpgradePolicy {
  /**
   * The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
   */
  maxBatchInstancePercent?: number;
  /**
   * The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
   */
  maxUnhealthyInstancePercent?: number;
  /**
   * The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
   */
  maxUnhealthyUpgradedInstancePercent?: number;
  /**
   * The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
   */
  pauseTimeBetweenBatches?: string;
}

/**
 * The configuration parameters used for performing automatic OS upgrade.
 */
export interface AutomaticOSUpgradePolicy {
  /**
   * Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. <br><br> If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true.
   */
  enableAutomaticOSUpgrade?: boolean;
  /**
   * Whether OS image rollback feature should be disabled. Default value is false.
   */
  disableAutomaticRollback?: boolean;
}

/**
 * Specifies the configuration parameters for automatic repairs on the virtual machine scale set.
 */
export interface AutomaticRepairsPolicy {
  /**
   * Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
   */
  enabled?: boolean;
  /**
   * The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 30 minutes (PT30M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M).
   */
  gracePeriod?: string;
}

/**
 * Describes a virtual machine scale set virtual machine profile.
 */
export interface VirtualMachineScaleSetVMProfile {
  /**
   * Specifies the operating system settings for the virtual machines in the scale set.
   */
  osProfile?: VirtualMachineScaleSetOSProfile;
  /**
   * Specifies the storage settings for the virtual machine disks.
   */
  storageProfile?: VirtualMachineScaleSetStorageProfile;
  /**
   * Specifies properties of the network interfaces of the virtual machines in the scale set.
   */
  networkProfile?: VirtualMachineScaleSetNetworkProfile;
  /**
   * Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
   */
  diagnosticsProfile?: DiagnosticsProfile;
  /**
   * Specifies a collection of settings for extensions installed on virtual machines in the scale set.
   */
  extensionProfile?: VirtualMachineScaleSetExtensionProfile;
  /**
   * Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15
   */
  licenseType?: string;
  /**
   * Specifies the priority for the virtual machines in the scale set. <br><br>Minimum api-version: 2017-10-30-preview
   */
  priority?: VirtualMachinePriorityTypes;
  /**
   * Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, the only supported value is 'Deallocate' and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
   */
  evictionPolicy?: VirtualMachineEvictionPolicyTypes;
  /**
   * Specifies the billing related details of a Azure Spot VMSS. <br><br>Minimum api-version: 2019-03-01.
   */
  billingProfile?: BillingProfile;
  /**
   * Specifies Scheduled Event related configurations.
   */
  scheduledEventsProfile?: ScheduledEventsProfile;
}

/**
 * Describes a virtual machine scale set OS profile.
 */
export interface VirtualMachineScaleSetOSProfile {
  /**
   * Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
   */
  computerNamePrefix?: string;
  /**
   * Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
   */
  adminUsername?: string;
  /**
   * Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
   */
  adminPassword?: string;
  /**
   * Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
   */
  customData?: string;
  /**
   * Specifies Windows operating system settings on the virtual machine.
   */
  windowsConfiguration?: WindowsConfiguration;
  /**
   * Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
   */
  linuxConfiguration?: LinuxConfiguration;
  /**
   * Specifies set of certificates that should be installed onto the virtual machines in the scale set.
   */
  secrets?: VaultSecretGroup[];
}

/**
 * Describes a virtual machine scale set storage profile.
 */
export interface VirtualMachineScaleSetStorageProfile {
  /**
   * Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
   */
  imageReference?: ImageReference;
  /**
   * Specifies information about the operating system disk used by the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
   */
  osDisk?: VirtualMachineScaleSetOSDisk;
  /**
   * Specifies the parameters that are used to add data disks to the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
   */
  dataDisks?: VirtualMachineScaleSetDataDisk[];
}

/**
 * Describes a virtual machine scale set operating system disk.
 */
export interface VirtualMachineScaleSetOSDisk {
  /**
   * The disk name.
   */
  name?: string;
  /**
   * Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
   */
  caching?: CachingTypes;
  /**
   * Specifies whether writeAccelerator should be enabled or disabled on the disk.
   */
  writeAcceleratorEnabled?: boolean;
  /**
   * Specifies how the virtual machines in the scale set should be created.<br><br> The only allowed value is: **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
   */
  createOption: DiskCreateOptionTypes;
  /**
   * Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
   */
  diffDiskSettings?: DiffDiskSettings;
  /**
   * Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
   */
  diskSizeGB?: number;
  /**
   * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
   */
  osType?: OperatingSystemTypes;
  /**
   * Specifies information about the unmanaged user image to base the scale set on.
   */
  image?: VirtualHardDisk;
  /**
   * Specifies the container urls that are used to store operating system disks for the scale set.
   */
  vhdContainers?: string[];
  /**
   * The managed disk parameters.
   */
  managedDisk?: VirtualMachineScaleSetManagedDiskParameters;
}

/**
 * Describes the parameters of a ScaleSet managed disk.
 */
export interface VirtualMachineScaleSetManagedDiskParameters {
  /**
   * Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
   */
  storageAccountType?: StorageAccountTypes;
  /**
   * Specifies the customer managed disk encryption set resource id for the managed disk.
   */
  diskEncryptionSet?: SubResource;
}

/**
 * Describes a virtual machine scale set data disk.
 */
export interface VirtualMachineScaleSetDataDisk {
  /**
   * The disk name.
   */
  name?: string;
  /**
   * Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
   */
  lun: number;
  /**
   * Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
   */
  caching?: CachingTypes;
  /**
   * Specifies whether writeAccelerator should be enabled or disabled on the disk.
   */
  writeAcceleratorEnabled?: boolean;
  /**
   * The create option.
   */
  createOption: DiskCreateOptionTypes;
  /**
   * Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
   */
  diskSizeGB?: number;
  /**
   * The managed disk parameters.
   */
  managedDisk?: VirtualMachineScaleSetManagedDiskParameters;
  /**
   * Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
   */
  diskIopsReadWrite?: number;
  /**
   * Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
   */
  diskMBpsReadWrite?: number;
}

/**
 * Describes a virtual machine scale set network profile.
 */
export interface VirtualMachineScaleSetNetworkProfile {
  /**
   * A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
   */
  healthProbe?: ApiEntityReference;
  /**
   * The list of network configurations.
   */
  networkInterfaceConfigurations?: VirtualMachineScaleSetNetworkConfiguration[];
}

/**
 * The API entity reference.
 */
export interface ApiEntityReference {
  /**
   * The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
   */
  id?: string;
}

/**
 * Describes a virtual machines scale sets network configuration's DNS settings.
 */
export interface VirtualMachineScaleSetNetworkConfigurationDnsSettings {
  /**
   * List of DNS servers IP addresses
   */
  dnsServers?: string[];
}

/**
 * Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
 */
export interface VirtualMachineScaleSetPublicIPAddressConfiguration {
  /**
   * The publicIP address configuration name.
   */
  name: string;
  /**
   * The idle timeout of the public IP address.
   */
  idleTimeoutInMinutes?: number;
  /**
   * The dns settings to be applied on the publicIP addresses .
   */
  dnsSettings?: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
  /**
   * The list of IP tags associated with the public IP address.
   */
  ipTags?: VirtualMachineScaleSetIpTag[];
  /**
   * The PublicIPPrefix from which to allocate publicIP addresses.
   */
  publicIPPrefix?: SubResource;
  /**
   * Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
   */
  publicIPAddressVersion?: IPVersion;
}

/**
 * Describes a virtual machines scale sets network configuration's DNS settings.
 */
export interface VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings {
  /**
   * The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created
   */
  domainNameLabel: string;
}

/**
 * Contains the IP tag associated with the public IP address.
 */
export interface VirtualMachineScaleSetIpTag {
  /**
   * IP tag type. Example: FirstPartyUsage.
   */
  ipTagType?: string;
  /**
   * IP tag associated with the public IP. Example: SQL, Storage etc.
   */
  tag?: string;
}

/**
 * Describes a virtual machine scale set extension profile.
 */
export interface VirtualMachineScaleSetExtensionProfile {
  /**
   * The virtual machine scale set child extension resources.
   */
  extensions?: VirtualMachineScaleSetExtension[];
}

export interface ScheduledEventsProfile {
  /**
   * Specifies Terminate Scheduled Event related configurations.
   */
  terminateNotificationProfile?: TerminateNotificationProfile;
}

export interface TerminateNotificationProfile {
  /**
   * Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
   */
  notBeforeTimeout?: string;
  /**
   * Specifies whether the Terminate Scheduled event is enabled or disabled.
   */
  enable?: boolean;
}

/**
 * Describes a scale-in policy for a virtual machine scale set.
 */
export interface ScaleInPolicy {
  /**
   * The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>
   */
  rules?: VirtualMachineScaleSetScaleInRules[];
}

/**
 * Identity for the virtual machine scale set.
 */
export interface VirtualMachineScaleSetIdentity {
  /**
   * The principal id of virtual machine scale set identity. This property will only be provided for a system assigned identity.
   */
  readonly principalId?: string;
  /**
   * The tenant id associated with the virtual machine scale set. This property will only be provided for a system assigned identity.
   */
  readonly tenantId?: string;
  /**
   * The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
   */
  type?: ResourceIdentityType;
  /**
   * The list of user identities associated with the virtual machine scale set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   */
  userAssignedIdentities?: {
    [propertyName: string]: ComponentsNj115SSchemasVirtualmachinescalesetidentityPropertiesUserassignedidentitiesAdditionalproperties;
  };
}

export interface ComponentsNj115SSchemasVirtualmachinescalesetidentityPropertiesUserassignedidentitiesAdditionalproperties {
  /**
   * The principal id of user assigned identity.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   */
  readonly clientId?: string;
}

/**
 * Describes a virtual machine scale set virtual machine profile.
 */
export interface VirtualMachineScaleSetUpdateVMProfile {
  /**
   * The virtual machine scale set OS profile.
   */
  osProfile?: VirtualMachineScaleSetUpdateOSProfile;
  /**
   * The virtual machine scale set storage profile.
   */
  storageProfile?: VirtualMachineScaleSetUpdateStorageProfile;
  /**
   * The virtual machine scale set network profile.
   */
  networkProfile?: VirtualMachineScaleSetUpdateNetworkProfile;
  /**
   * The virtual machine scale set diagnostics profile.
   */
  diagnosticsProfile?: DiagnosticsProfile;
  /**
   * The virtual machine scale set extension profile.
   */
  extensionProfile?: VirtualMachineScaleSetExtensionProfile;
  /**
   * The license type, which is for bring your own license scenario.
   */
  licenseType?: string;
  /**
   * Specifies the billing related details of a Azure Spot VMSS. <br><br>Minimum api-version: 2019-03-01.
   */
  billingProfile?: BillingProfile;
  /**
   * Specifies Scheduled Event related configurations.
   */
  scheduledEventsProfile?: ScheduledEventsProfile;
}

/**
 * Describes a virtual machine scale set OS profile.
 */
export interface VirtualMachineScaleSetUpdateOSProfile {
  /**
   * A base-64 encoded string of custom data.
   */
  customData?: string;
  /**
   * The Windows Configuration of the OS profile.
   */
  windowsConfiguration?: WindowsConfiguration;
  /**
   * The Linux Configuration of the OS profile.
   */
  linuxConfiguration?: LinuxConfiguration;
  /**
   * The List of certificates for addition to the VM.
   */
  secrets?: VaultSecretGroup[];
}

/**
 * Describes a virtual machine scale set storage profile.
 */
export interface VirtualMachineScaleSetUpdateStorageProfile {
  /**
   * The image reference.
   */
  imageReference?: ImageReference;
  /**
   * The OS disk.
   */
  osDisk?: VirtualMachineScaleSetUpdateOSDisk;
  /**
   * The data disks.
   */
  dataDisks?: VirtualMachineScaleSetDataDisk[];
}

/**
 * Describes virtual machine scale set operating system disk Update Object. This should be used for Updating VMSS OS Disk.
 */
export interface VirtualMachineScaleSetUpdateOSDisk {
  /**
   * The caching type.
   */
  caching?: CachingTypes;
  /**
   * Specifies whether writeAccelerator should be enabled or disabled on the disk.
   */
  writeAcceleratorEnabled?: boolean;
  /**
   * Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
   */
  diskSizeGB?: number;
  /**
   * The Source User Image VirtualHardDisk. This VirtualHardDisk will be copied before using it to attach to the Virtual Machine. If SourceImage is provided, the destination VirtualHardDisk should not exist.
   */
  image?: VirtualHardDisk;
  /**
   * The list of virtual hard disk container uris.
   */
  vhdContainers?: string[];
  /**
   * The managed disk parameters.
   */
  managedDisk?: VirtualMachineScaleSetManagedDiskParameters;
}

/**
 * Describes a virtual machine scale set network profile.
 */
export interface VirtualMachineScaleSetUpdateNetworkProfile {
  /**
   * A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
   */
  healthProbe?: ApiEntityReference;
  /**
   * The list of network configurations.
   */
  networkInterfaceConfigurations?: VirtualMachineScaleSetUpdateNetworkConfiguration[];
}

/**
 * Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
 */
export interface VirtualMachineScaleSetUpdatePublicIPAddressConfiguration {
  /**
   * The publicIP address configuration name.
   */
  name?: string;
  /**
   * The idle timeout of the public IP address.
   */
  idleTimeoutInMinutes?: number;
  /**
   * The dns settings to be applied on the publicIP addresses .
   */
  dnsSettings?: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
}

/**
 * Specifies a list of virtual machine instance IDs from the VM scale set.
 */
export interface VirtualMachineScaleSetVMInstanceIDs {
  /**
   * The virtual machine scale set instance ids. Omitting the virtual machine scale set instance ids will result in the operation being performed on all virtual machines in the virtual machine scale set.
   */
  instanceIds?: string[];
}

/**
 * Specifies a list of virtual machine instance IDs from the VM scale set.
 */
export interface VirtualMachineScaleSetVMInstanceRequiredIDs {
  /**
   * The virtual machine scale set instance ids.
   */
  instanceIds: string[];
}

/**
 * The instance view of a virtual machine scale set.
 */
export interface VirtualMachineScaleSetInstanceView {
  /**
   * The instance view status summary for the virtual machine scale set.
   */
  readonly virtualMachine?: VirtualMachineScaleSetInstanceViewStatusesSummary;
  /**
   * The extensions information.
   */
  readonly extensions?: VirtualMachineScaleSetVMExtensionsSummary[];
  /**
   * The resource status information.
   */
  statuses?: InstanceViewStatus[];
  /**
   * The orchestration services information.
   */
  readonly orchestrationServices?: OrchestrationServiceSummary[];
}

/**
 * Instance view statuses summary for virtual machines of a virtual machine scale set.
 */
export interface VirtualMachineScaleSetInstanceViewStatusesSummary {
  /**
   * The extensions information.
   */
  readonly statusesSummary?: VirtualMachineStatusCodeCount[];
}

/**
 * The status code and count of the virtual machine scale set instance view status summary.
 */
export interface VirtualMachineStatusCodeCount {
  /**
   * The instance view status code.
   */
  readonly code?: string;
  /**
   * The number of instances having a particular status code.
   */
  readonly count?: number;
}

/**
 * Extensions summary for virtual machines of a virtual machine scale set.
 */
export interface VirtualMachineScaleSetVMExtensionsSummary {
  /**
   * The extension name.
   */
  readonly name?: string;
  /**
   * The extensions information.
   */
  readonly statusesSummary?: VirtualMachineStatusCodeCount[];
}

/**
 * Summary for an orchestration service of a virtual machine scale set.
 */
export interface OrchestrationServiceSummary {
  /**
   * The name of the service.
   */
  readonly serviceName?: OrchestrationServiceNames;
  /**
   * The current state of the service.
   */
  readonly serviceState?: OrchestrationServiceState;
}

/**
 * The List Virtual Machine operation response.
 */
export interface VirtualMachineScaleSetListResult {
  /**
   * The list of virtual machine scale sets.
   */
  value: VirtualMachineScaleSet[];
  /**
   * The uri to fetch the next page of Virtual Machine Scale Sets. Call ListNext() with this to fetch the next page of VMSS.
   */
  nextLink?: string;
}

/**
 * The List VM scale set extension operation response.
 */
export interface VirtualMachineScaleSetExtensionListResult {
  /**
   * The list of VM scale set extensions.
   */
  value: VirtualMachineScaleSetExtension[];
  /**
   * The uri to fetch the next page of VM scale set extensions. Call ListNext() with this to fetch the next page of VM scale set extensions.
   */
  nextLink?: string;
}

/**
 * The List Virtual Machine operation response.
 */
export interface VirtualMachineScaleSetListWithLinkResult {
  /**
   * The list of virtual machine scale sets.
   */
  value: VirtualMachineScaleSet[];
  /**
   * The uri to fetch the next page of Virtual Machine Scale Sets. Call ListNext() with this to fetch the next page of Virtual Machine Scale Sets.
   */
  nextLink?: string;
}

/**
 * The Virtual Machine Scale Set List Skus operation response.
 */
export interface VirtualMachineScaleSetListSkusResult {
  /**
   * The list of skus available for the virtual machine scale set.
   */
  value: VirtualMachineScaleSetSku[];
  /**
   * The uri to fetch the next page of Virtual Machine Scale Set Skus. Call ListNext() with this to fetch the next page of VMSS Skus.
   */
  nextLink?: string;
}

/**
 * Describes an available virtual machine scale set sku.
 */
export interface VirtualMachineScaleSetSku {
  /**
   * The type of resource the sku applies to.
   */
  readonly resourceType?: string;
  /**
   * The Sku.
   */
  readonly sku?: Sku;
  /**
   * Specifies the number of virtual machines in the scale set.
   */
  readonly capacity?: VirtualMachineScaleSetSkuCapacity;
}

/**
 * Describes scaling information of a sku.
 */
export interface VirtualMachineScaleSetSkuCapacity {
  /**
   * The minimum capacity.
   */
  readonly minimum?: number;
  /**
   * The maximum capacity that can be set.
   */
  readonly maximum?: number;
  /**
   * The default capacity.
   */
  readonly defaultCapacity?: number;
  /**
   * The scale type applicable to the sku.
   */
  readonly scaleType?: VirtualMachineScaleSetSkuScaleType;
}

/**
 * List of Virtual Machine Scale Set OS Upgrade History operation response.
 */
export interface VirtualMachineScaleSetListOSUpgradeHistory {
  /**
   * The list of OS upgrades performed on the virtual machine scale set.
   */
  value: UpgradeOperationHistoricalStatusInfo[];
  /**
   * The uri to fetch the next page of OS Upgrade History. Call ListNext() with this to fetch the next page of history of upgrades.
   */
  nextLink?: string;
}

/**
 * Virtual Machine Scale Set OS Upgrade History operation response.
 */
export interface UpgradeOperationHistoricalStatusInfo {
  /**
   * Information about the properties of the upgrade operation.
   */
  readonly properties?: UpgradeOperationHistoricalStatusInfoProperties;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource location
   */
  readonly location?: string;
}

/**
 * Describes each OS upgrade on the Virtual Machine Scale Set.
 */
export interface UpgradeOperationHistoricalStatusInfoProperties {
  /**
   * Information about the overall status of the upgrade operation.
   */
  readonly runningStatus?: UpgradeOperationHistoryStatus;
  /**
   * Counts of the VMs in each state.
   */
  readonly progress?: RollingUpgradeProgressInfo;
  /**
   * Error Details for this upgrade if there are any.
   */
  readonly error?: ApiError;
  /**
   * Invoker of the Upgrade Operation
   */
  readonly startedBy?: UpgradeOperationInvoker;
  /**
   * Image Reference details
   */
  readonly targetImageReference?: ImageReference;
  /**
   * Information about OS rollback if performed
   */
  readonly rollbackInfo?: RollbackStatusInfo;
}

/**
 * Information about the current running state of the overall upgrade.
 */
export interface UpgradeOperationHistoryStatus {
  /**
   * Code indicating the current status of the upgrade.
   */
  readonly code?: UpgradeState;
  /**
   * Start time of the upgrade.
   */
  readonly startTime?: Date;
  /**
   * End time of the upgrade.
   */
  readonly endTime?: Date;
}

/**
 * Information about the number of virtual machine instances in each upgrade state.
 */
export interface RollingUpgradeProgressInfo {
  /**
   * The number of instances that have been successfully upgraded.
   */
  readonly successfulInstanceCount?: number;
  /**
   * The number of instances that have failed to be upgraded successfully.
   */
  readonly failedInstanceCount?: number;
  /**
   * The number of instances that are currently being upgraded.
   */
  readonly inProgressInstanceCount?: number;
  /**
   * The number of instances that have not yet begun to be upgraded.
   */
  readonly pendingInstanceCount?: number;
}

/**
 * Information about rollback on failed VM instances after a OS Upgrade operation.
 */
export interface RollbackStatusInfo {
  /**
   * The number of instances which have been successfully rolled back.
   */
  readonly successfullyRolledbackInstanceCount?: number;
  /**
   * The number of instances which failed to rollback.
   */
  readonly failedRolledbackInstanceCount?: number;
  /**
   * Error details if OS rollback failed.
   */
  readonly rollbackError?: ApiError;
}

/**
 * Information about the current running state of the overall upgrade.
 */
export interface RollingUpgradeRunningStatus {
  /**
   * Code indicating the current status of the upgrade.
   */
  readonly code?: RollingUpgradeStatusCode;
  /**
   * Start time of the upgrade.
   */
  readonly startTime?: Date;
  /**
   * The last action performed on the rolling upgrade.
   */
  readonly lastAction?: RollingUpgradeActionType;
  /**
   * Last action time of the upgrade.
   */
  readonly lastActionTime?: Date;
}

/**
 * Response after calling a manual recovery walk
 */
export interface RecoveryWalkResponse {
  /**
   * Whether the recovery walk was performed
   */
  readonly walkPerformed?: boolean;
  /**
   * The next update domain that needs to be walked. Null means walk spanning all update domains has been completed
   */
  readonly nextPlatformUpdateDomain?: number;
}

export interface VMScaleSetConvertToSinglePlacementGroupInput {
  /**
   * Id of the placement group in which you want future virtual machine instances to be placed. To query placement group Id, please use Virtual Machine Scale Set VMs - Get API. If not provided, the platform will choose one with maximum number of virtual machine instances.
   */
  activePlacementGroupId?: string;
}

/**
 * The input for OrchestrationServiceState
 */
export interface OrchestrationServiceStateInput {
  /**
   * The name of the service.
   */
  serviceName: OrchestrationServiceNames;
  /**
   * The action to be performed.
   */
  action: OrchestrationServiceStateAction;
}

/**
 * The instance view of a virtual machine scale set VM.
 */
export interface VirtualMachineScaleSetVMInstanceView {
  /**
   * The Update Domain count.
   */
  platformUpdateDomain?: number;
  /**
   * The Fault Domain count.
   */
  platformFaultDomain?: number;
  /**
   * The Remote desktop certificate thumbprint.
   */
  rdpThumbPrint?: string;
  /**
   * The VM Agent running on the virtual machine.
   */
  vmAgent?: VirtualMachineAgentInstanceView;
  /**
   * The Maintenance Operation status on the virtual machine.
   */
  maintenanceRedeployStatus?: MaintenanceRedeployStatus;
  /**
   * The disks information.
   */
  disks?: DiskInstanceView[];
  /**
   * The extensions information.
   */
  extensions?: VirtualMachineExtensionInstanceView[];
  /**
   * The health status for the VM.
   */
  readonly vmHealth?: VirtualMachineHealthStatus;
  /**
   * Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
   */
  bootDiagnostics?: BootDiagnosticsInstanceView;
  /**
   * The resource status information.
   */
  statuses?: InstanceViewStatus[];
  /**
   * The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
   */
  placementGroupId?: string;
}

/**
 * The health status of the VM.
 */
export interface VirtualMachineHealthStatus {
  /**
   * The health status information for the VM.
   */
  readonly status?: InstanceViewStatus;
}

/**
 * Describes a virtual machine scale set VM network profile.
 */
export interface VirtualMachineScaleSetVMNetworkProfileConfiguration {
  /**
   * The list of network configurations.
   */
  networkInterfaceConfigurations?: VirtualMachineScaleSetNetworkConfiguration[];
}

/**
 * The protection policy of a virtual machine scale set VM.
 */
export interface VirtualMachineScaleSetVMProtectionPolicy {
  /**
   * Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
   */
  protectFromScaleIn?: boolean;
  /**
   * Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM.
   */
  protectFromScaleSetActions?: boolean;
}

/**
 * The List Virtual Machine Scale Set VMs operation response.
 */
export interface VirtualMachineScaleSetVMListResult {
  /**
   * The list of virtual machine scale sets VMs.
   */
  value: VirtualMachineScaleSetVM[];
  /**
   * The uri to fetch the next page of Virtual Machine Scale Set VMs. Call ListNext() with this to fetch the next page of VMSS VMs
   */
  nextLink?: string;
}

/**
 * Api input base class for LogAnalytics Api.
 */
export interface LogAnalyticsInputBase {
  /**
   * SAS Uri of the logging blob container to which LogAnalytics Api writes output logs to.
   */
  blobContainerSasUri: string;
  /**
   * From time of the query
   */
  fromTime: Date;
  /**
   * To time of the query
   */
  toTime: Date;
  /**
   * Group query result by Throttle Policy applied.
   */
  groupByThrottlePolicy?: boolean;
  /**
   * Group query result by Operation Name.
   */
  groupByOperationName?: boolean;
  /**
   * Group query result by Resource Name.
   */
  groupByResourceName?: boolean;
}

/**
 * LogAnalytics operation status response
 */
export interface LogAnalyticsOperationResult {
  /**
   * LogAnalyticsOutput
   */
  readonly properties?: LogAnalyticsOutput;
}

/**
 * LogAnalytics output properties
 */
export interface LogAnalyticsOutput {
  /**
   * Output file Uri path to blob container.
   */
  readonly output?: string;
}

/**
 * The List Virtual Machine operation response.
 */
export interface RunCommandListResult {
  /**
   * The list of virtual machine run commands.
   */
  value: RunCommandDocumentBase[];
  /**
   * The uri to fetch the next page of run commands. Call ListNext() with this to fetch the next page of run commands.
   */
  nextLink?: string;
}

/**
 * Describes the properties of a Run Command metadata.
 */
export interface RunCommandDocumentBase {
  /**
   * The VM run command schema.
   */
  schema: string;
  /**
   * The VM run command id.
   */
  id: string;
  /**
   * The Operating System type.
   */
  osType: OperatingSystemTypes;
  /**
   * The VM run command label.
   */
  label: string;
  /**
   * The VM run command description.
   */
  description: string;
}

/**
 * Describes the properties of a run command parameter.
 */
export interface RunCommandParameterDefinition {
  /**
   * The run command parameter name.
   */
  name: string;
  /**
   * The run command parameter type.
   */
  type: string;
  /**
   * The run command parameter default value.
   */
  defaultValue?: string;
  /**
   * The run command parameter required.
   */
  required?: boolean;
}

/**
 * Capture Virtual Machine parameters.
 */
export interface RunCommandInput {
  /**
   * The run command id.
   */
  commandId: string;
  /**
   * Optional. The script to be executed.  When this value is given, the given script will override the default script of the command.
   */
  script?: string[];
  /**
   * The run command parameters.
   */
  parameters?: RunCommandInputParameter[];
}

/**
 * Describes the properties of a run command parameter.
 */
export interface RunCommandInputParameter {
  /**
   * The run command parameter name.
   */
  name: string;
  /**
   * The run command parameter value.
   */
  value: string;
}

export interface RunCommandResult {
  /**
   * Run command operation response.
   */
  value?: InstanceViewStatus[];
}

/**
 * The List Resource Skus operation response.
 */
export interface ResourceSkusResult {
  /**
   * The list of skus available for the subscription.
   */
  value: ResourceSku[];
  /**
   * The URI to fetch the next page of Resource Skus. Call ListNext() with this URI to fetch the next page of Resource Skus
   */
  nextLink?: string;
}

/**
 * Describes an available Compute SKU.
 */
export interface ResourceSku {
  /**
   * The type of resource the SKU applies to.
   */
  readonly resourceType?: string;
  /**
   * The name of SKU.
   */
  readonly name?: string;
  /**
   * Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
   */
  readonly tier?: string;
  /**
   * The Size of the SKU.
   */
  readonly size?: string;
  /**
   * The Family of this particular SKU.
   */
  readonly family?: string;
  /**
   * The Kind of resources that are supported in this SKU.
   */
  readonly kind?: string;
  /**
   * Specifies the number of virtual machines in the scale set.
   */
  readonly capacity?: ResourceSkuCapacity;
  /**
   * The set of locations that the SKU is available.
   */
  readonly locations?: string[];
  /**
   * A list of locations and availability zones in those locations where the SKU is available.
   */
  readonly locationInfo?: ResourceSkuLocationInfo[];
  /**
   * The api versions that support this SKU.
   */
  readonly apiVersions?: string[];
  /**
   * Metadata for retrieving price info.
   */
  readonly costs?: ResourceSkuCosts[];
  /**
   * A name value pair to describe the capability.
   */
  readonly capabilities?: ResourceSkuCapabilities[];
  /**
   * The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
   */
  readonly restrictions?: ResourceSkuRestrictions[];
}

/**
 * Describes scaling information of a SKU.
 */
export interface ResourceSkuCapacity {
  /**
   * The minimum capacity.
   */
  readonly minimum?: number;
  /**
   * The maximum capacity that can be set.
   */
  readonly maximum?: number;
  /**
   * The default capacity.
   */
  readonly default?: number;
  /**
   * The scale type applicable to the sku.
   */
  readonly scaleType?: ResourceSkuCapacityScaleType;
}

export interface ResourceSkuLocationInfo {
  /**
   * Location of the SKU
   */
  readonly location?: string;
  /**
   * List of availability zones where the SKU is supported.
   */
  readonly zones?: string[];
  /**
   * Details of capabilities available to a SKU in specific zones.
   */
  readonly zoneDetails?: ResourceSkuZoneDetails[];
}

/**
 * Describes The zonal capabilities of a SKU.
 */
export interface ResourceSkuZoneDetails {
  /**
   * The set of zones that the SKU is available in with the specified capabilities.
   */
  readonly name?: string[];
  /**
   * A list of capabilities that are available for the SKU in the specified list of zones.
   */
  readonly capabilities?: ResourceSkuCapabilities[];
}

/**
 * Describes The SKU capabilities object.
 */
export interface ResourceSkuCapabilities {
  /**
   * An invariant to describe the feature.
   */
  readonly name?: string;
  /**
   * An invariant if the feature is measured by quantity.
   */
  readonly value?: string;
}

/**
 * Describes metadata for retrieving price info.
 */
export interface ResourceSkuCosts {
  /**
   * Used for querying price from commerce.
   */
  readonly meterID?: string;
  /**
   * The multiplier is needed to extend the base metered cost.
   */
  readonly quantity?: number;
  /**
   * An invariant to show the extended unit.
   */
  readonly extendedUnit?: string;
}

/**
 * Describes scaling information of a SKU.
 */
export interface ResourceSkuRestrictions {
  /**
   * The type of restrictions.
   */
  readonly type?: ResourceSkuRestrictionsType;
  /**
   * The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
   */
  readonly values?: string[];
  /**
   * The information about the restriction where the SKU cannot be used.
   */
  readonly restrictionInfo?: ResourceSkuRestrictionInfo;
  /**
   * The reason for restriction.
   */
  readonly reasonCode?: ResourceSkuRestrictionsReasonCode;
}

export interface ResourceSkuRestrictionInfo {
  /**
   * Locations where the SKU is restricted
   */
  readonly locations?: string[];
  /**
   * List of availability zones where the SKU is restricted.
   */
  readonly zones?: string[];
}

/**
 * The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
 */
export interface DiskSku {
  /**
   * The sku name.
   */
  name?: DiskStorageAccountTypes;
  /**
   * The sku tier.
   */
  readonly tier?: string;
}

/**
 * Data used when creating a disk.
 */
export interface CreationData {
  /**
   * This enumerates the possible sources of a disk's creation.
   */
  createOption: DiskCreateOption;
  /**
   * Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
   */
  storageAccountId?: string;
  /**
   * Disk source information.
   */
  imageReference?: ImageDiskReference;
  /**
   * Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
   */
  galleryImageReference?: ImageDiskReference;
  /**
   * If createOption is Import, this is the URI of a blob to be imported into a managed disk.
   */
  sourceUri?: string;
  /**
   * If createOption is Copy, this is the ARM id of the source snapshot or disk.
   */
  sourceResourceId?: string;
  /**
   * If this field is set, this is the unique id identifying the source of this resource.
   */
  readonly sourceUniqueId?: string;
  /**
   * If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
   */
  uploadSizeBytes?: number;
}

/**
 * The source image used for creating the disk.
 */
export interface ImageDiskReference {
  /**
   * A relative uri containing either a Platform Image Repository or user image reference.
   */
  id: string;
  /**
   * If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
   */
  lun?: number;
}

/**
 * Encryption settings for disk or snapshot
 */
export interface EncryptionSettingsCollection {
  /**
   * Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
   */
  enabled: boolean;
  /**
   * A collection of encryption settings, one for each disk volume.
   */
  encryptionSettings?: EncryptionSettingsElement[];
  /**
   * Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
   */
  encryptionSettingsVersion?: string;
}

/**
 * Encryption settings for one disk volume.
 */
export interface EncryptionSettingsElement {
  /**
   * Key Vault Secret Url and vault id of the disk encryption key
   */
  diskEncryptionKey?: KeyVaultAndSecretReference;
  /**
   * Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
   */
  keyEncryptionKey?: KeyVaultAndKeyReference;
}

/**
 * Key Vault Secret Url and vault id of the encryption key
 */
export interface KeyVaultAndSecretReference {
  /**
   * Resource id of the KeyVault containing the key or secret
   */
  sourceVault: SourceVault;
  /**
   * Url pointing to a key or secret in KeyVault
   */
  secretUrl: string;
}

/**
 * The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
 */
export interface SourceVault {
  /**
   * Resource Id
   */
  id?: string;
}

/**
 * Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
 */
export interface KeyVaultAndKeyReference {
  /**
   * Resource id of the KeyVault containing the key or secret
   */
  sourceVault: SourceVault;
  /**
   * Url pointing to a key or secret in KeyVault
   */
  keyUrl: string;
}

/**
 * Encryption at rest settings for disk or snapshot
 */
export interface Encryption {
  /**
   * ResourceId of the disk encryption set to use for enabling encryption at rest.
   */
  diskEncryptionSetId?: string;
  /**
   * The type of key used to encrypt the data of the disk.
   */
  type?: EncryptionType;
}

export interface ShareInfoElement {
  /**
   * A relative URI containing the ID of the VM that has the disk attached.
   */
  readonly vmUri?: string;
}

/**
 * Disk update resource.
 */
export interface DiskUpdate {
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
   */
  sku?: DiskSku;
  /**
   * the Operating System type.
   */
  osType?: OperatingSystemTypes;
  /**
   * If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
   */
  diskSizeGB?: number;
  /**
   * Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
   */
  encryptionSettingsCollection?: EncryptionSettingsCollection;
  /**
   * The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
   */
  diskIopsReadWrite?: number;
  /**
   * The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
   */
  diskMBpsReadWrite?: number;
  /**
   * The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
   */
  diskIopsReadOnly?: number;
  /**
   * The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
   */
  diskMBpsReadOnly?: number;
  /**
   * The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
   */
  maxShares?: number;
  /**
   * Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
   */
  encryption?: Encryption;
}

/**
 * The List Disks operation response.
 */
export interface DiskList {
  /**
   * A list of disks.
   */
  value: Disk[];
  /**
   * The uri to fetch the next page of disks. Call ListNext() with this to fetch the next page of disks.
   */
  nextLink?: string;
}

/**
 * Data used for requesting a SAS.
 */
export interface GrantAccessData {
  access: AccessLevel;
  /**
   * Time duration in seconds until the SAS access expires.
   */
  durationInSeconds: number;
}

/**
 * A disk access SAS uri.
 */
export interface AccessUri {
  /**
   * A SAS uri for accessing a disk.
   */
  readonly accessSAS?: string;
}

/**
 * The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
 */
export interface SnapshotSku {
  /**
   * The sku name.
   */
  name?: SnapshotStorageAccountTypes;
  /**
   * The sku tier.
   */
  readonly tier?: string;
}

/**
 * Snapshot update resource.
 */
export interface SnapshotUpdate {
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
   */
  sku?: SnapshotSku;
  /**
   * the Operating System type.
   */
  osType?: OperatingSystemTypes;
  /**
   * If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
   */
  diskSizeGB?: number;
  /**
   * Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
   */
  encryptionSettingsCollection?: EncryptionSettingsCollection;
  /**
   * Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
   */
  encryption?: Encryption;
}

/**
 * The List Snapshots operation response.
 */
export interface SnapshotList {
  /**
   * A list of snapshots.
   */
  value: Snapshot[];
  /**
   * The uri to fetch the next page of snapshots. Call ListNext() with this to fetch the next page of snapshots.
   */
  nextLink?: string;
}

/**
 * The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
 */
export interface EncryptionSetIdentity {
  /**
   * The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
   */
  type?: DiskEncryptionSetIdentityType;
  /**
   * The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
   */
  readonly principalId?: string;
  /**
   * The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
   */
  readonly tenantId?: string;
}

/**
 * disk encryption set update resource.
 */
export interface DiskEncryptionSetUpdate {
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
   */
  activeKey?: KeyVaultAndKeyReference;
}

/**
 * The List disk encryption set operation response.
 */
export interface DiskEncryptionSetList {
  /**
   * A list of disk encryption sets.
   */
  value: DiskEncryptionSet[];
  /**
   * The uri to fetch the next page of disk encryption sets. Call ListNext() with this to fetch the next page of disk encryption sets.
   */
  nextLink?: string;
}

/**
 * Describes the gallery unique name.
 */
export interface GalleryIdentifier {
  /**
   * The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
   */
  readonly uniqueName?: string;
}

/**
 * The Update Resource model definition.
 */
export interface UpdateResourceDefinition {
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * This is the gallery Image Definition identifier.
 */
export interface GalleryImageIdentifier {
  /**
   * The name of the gallery Image Definition publisher.
   */
  publisher: string;
  /**
   * The name of the gallery Image Definition offer.
   */
  offer: string;
  /**
   * The name of the gallery Image Definition SKU.
   */
  sku: string;
}

/**
 * The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
 */
export interface RecommendedMachineConfiguration {
  /**
   * Describes the resource range.
   */
  vCPUs?: ResourceRange;
  /**
   * Describes the resource range.
   */
  memory?: ResourceRange;
}

/**
 * Describes the resource range.
 */
export interface ResourceRange {
  /**
   * The minimum number of the resource.
   */
  min?: number;
  /**
   * The maximum number of the resource.
   */
  max?: number;
}

/**
 * Describes the disallowed disk types.
 */
export interface Disallowed {
  /**
   * A list of disk types.
   */
  diskTypes?: string[];
}

/**
 * Describes the gallery Image Definition purchase plan. This is used by marketplace images.
 */
export interface ImagePurchasePlan {
  /**
   * The plan ID.
   */
  name?: string;
  /**
   * The publisher ID.
   */
  publisher?: string;
  /**
   * The product ID.
   */
  product?: string;
}

/**
 * Describes the basic gallery artifact publishing profile.
 */
export interface GalleryArtifactPublishingProfileBase {
  /**
   * The target regions where the Image Version is going to be replicated to. This property is updatable.
   */
  targetRegions?: TargetRegion[];
  /**
   * The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
   */
  replicaCount?: number;
  /**
   * If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
   */
  excludeFromLatest?: boolean;
  /**
   * The timestamp for when the gallery Image Version is published.
   */
  readonly publishedDate?: Date;
  /**
   * The end of life date of the gallery Image Version. This property can be used for decommissioning purposes. This property is updatable.
   */
  endOfLifeDate?: Date;
  /**
   * Specifies the storage account type to be used to store the image. This property is not updatable.
   */
  storageAccountType?: StorageAccountType;
}

/**
 * Describes the target region information.
 */
export interface TargetRegion {
  /**
   * The name of the region.
   */
  name: string;
  /**
   * The number of replicas of the Image Version to be created per region. This property is updatable.
   */
  regionalReplicaCount?: number;
  /**
   * Specifies the storage account type to be used to store the image. This property is not updatable.
   */
  storageAccountType?: StorageAccountType;
  /**
   * Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
   */
  encryption?: EncryptionImages;
}

/**
 * Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
 */
export interface EncryptionImages {
  /**
   * This is the disk image encryption base class.
   */
  osDiskImage?: DiskImageEncryption;
  /**
   * A list of encryption specifications for data disk images.
   */
  dataDiskImages?: DataDiskImageEncryption[];
}

/**
 * This is the disk image encryption base class.
 */
export interface DiskImageEncryption {
  /**
   * A relative URI containing the resource ID of the disk encryption set.
   */
  diskEncryptionSetId?: string;
}

/**
 * This is the storage profile of a Gallery Image Version.
 */
export interface GalleryImageVersionStorageProfile {
  /**
   * The gallery artifact version source.
   */
  source?: GalleryArtifactVersionSource;
  /**
   * This is the disk image base class.
   */
  osDiskImage?: GalleryDiskImage;
  /**
   * A list of data disk images.
   */
  dataDiskImages?: GalleryDataDiskImage[];
}

/**
 * The gallery artifact version source.
 */
export interface GalleryArtifactVersionSource {
  /**
   * The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, or user image.
   */
  id?: string;
}

/**
 * This is the disk image base class.
 */
export interface GalleryDiskImage {
  /**
   * This property indicates the size of the VHD to be created.
   */
  readonly sizeInGB?: number;
  /**
   * The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
   */
  hostCaching?: HostCaching;
  /**
   * The gallery artifact version source.
   */
  source?: GalleryArtifactVersionSource;
}

/**
 * This is the replication status of the gallery Image Version.
 */
export interface ReplicationStatus {
  /**
   * This is the aggregated replication status based on all the regional replication status flags.
   */
  readonly aggregatedState?: AggregatedReplicationState;
  /**
   * This is a summary of replication status for each region.
   */
  readonly summary?: RegionalReplicationStatus[];
}

/**
 * This is the regional replication status.
 */
export interface RegionalReplicationStatus {
  /**
   * The region to which the gallery Image Version is being replicated to.
   */
  readonly region?: string;
  /**
   * This is the regional replication state.
   */
  readonly state?: ReplicationState;
  /**
   * The details of the replication status.
   */
  readonly details?: string;
  /**
   * It indicates progress of the replication job.
   */
  readonly progress?: number;
}

/**
 * The source image from which the Image Version is going to be created.
 */
export interface UserArtifactSource {
  /**
   * Required. The fileName of the artifact.
   */
  fileName: string;
  /**
   * Required. The mediaLink of the artifact, must be a readable storage blob.
   */
  mediaLink: string;
}

/**
 * The List Galleries operation response.
 */
export interface GalleryList {
  /**
   * A list of galleries.
   */
  value: Gallery[];
  /**
   * The uri to fetch the next page of galleries. Call ListNext() with this to fetch the next page of galleries.
   */
  nextLink?: string;
}

/**
 * The List Gallery Images operation response.
 */
export interface GalleryImageList {
  /**
   * A list of Shared Image Gallery images.
   */
  value: GalleryImage[];
  /**
   * The uri to fetch the next page of Image Definitions in the Shared Image Gallery. Call ListNext() with this to fetch the next page of gallery Image Definitions.
   */
  nextLink?: string;
}

/**
 * The List Gallery Image version operation response.
 */
export interface GalleryImageVersionList {
  /**
   * A list of gallery Image Versions.
   */
  value: GalleryImageVersion[];
  /**
   * The uri to fetch the next page of gallery Image Versions. Call ListNext() with this to fetch the next page of gallery Image Versions.
   */
  nextLink?: string;
}

/**
 * The List Gallery Applications operation response.
 */
export interface GalleryApplicationList {
  /**
   * A list of Gallery Applications.
   */
  value: GalleryApplication[];
  /**
   * The uri to fetch the next page of Application Definitions in the Application Gallery. Call ListNext() with this to fetch the next page of gallery Application Definitions.
   */
  nextLink?: string;
}

/**
 * The List Gallery Application version operation response.
 */
export interface GalleryApplicationVersionList {
  /**
   * A list of gallery Application Versions.
   */
  value: GalleryApplicationVersion[];
  /**
   * The uri to fetch the next page of gallery Application Versions. Call ListNext() with this to fetch the next page of gallery Application Versions.
   */
  nextLink?: string;
}

/**
 * The response from the List Container Services operation.
 */
export interface ContainerServiceListResult {
  /**
   * the list of container services.
   */
  value?: ContainerService[];
  /**
   * The URL to get the next set of container service results.
   */
  nextLink?: string;
}

/**
 * Profile for the container service orchestrator.
 */
export interface ContainerServiceOrchestratorProfile {
  /**
   * The orchestrator to use to manage container service cluster resources. Valid values are Swarm, DCOS, and Custom.
   */
  orchestratorType: ContainerServiceOrchestratorTypes;
}

/**
 * Properties to configure a custom container service cluster.
 */
export interface ContainerServiceCustomProfile {
  /**
   * The name of the custom orchestrator to use.
   */
  orchestrator: string;
}

/**
 * Information about a service principal identity for the cluster to use for manipulating Azure APIs.
 */
export interface ContainerServicePrincipalProfile {
  /**
   * The ID for the service principal.
   */
  clientId: string;
  /**
   * The secret password associated with the service principal.
   */
  secret: string;
}

/**
 * Profile for the container service master.
 */
export interface ContainerServiceMasterProfile {
  /**
   * Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The default value is 1.
   */
  count?: Enum31;
  /**
   * DNS prefix to be used to create the FQDN for master.
   */
  dnsPrefix: string;
  /**
   * FQDN for the master.
   */
  readonly fqdn?: string;
}

/**
 * Profile for the container service agent pool.
 */
export interface ContainerServiceAgentPoolProfile {
  /**
   * Unique name of the agent pool profile in the context of the subscription and resource group.
   */
  name: string;
  /**
   * Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
   */
  count: number;
  /**
   * Size of agent VMs.
   */
  vmSize: ContainerServiceVMSizeTypes;
  /**
   * DNS prefix to be used to create the FQDN for the agent pool.
   */
  dnsPrefix: string;
  /**
   * FQDN for the agent pool.
   */
  readonly fqdn?: string;
}

/**
 * Profile for Windows VMs in the container service cluster.
 */
export interface ContainerServiceWindowsProfile {
  /**
   * The administrator username to use for Windows VMs.
   */
  adminUsername: string;
  /**
   * The administrator password to use for Windows VMs.
   */
  adminPassword: string;
}

/**
 * Profile for Linux VMs in the container service cluster.
 */
export interface ContainerServiceLinuxProfile {
  /**
   * The administrator username to use for Linux VMs.
   */
  adminUsername: string;
  /**
   * The ssh key configuration for Linux VMs.
   */
  ssh: ContainerServiceSshConfiguration;
}

/**
 * SSH configuration for Linux-based VMs running on Azure.
 */
export interface ContainerServiceSshConfiguration {
  /**
   * the list of SSH public keys used to authenticate with Linux-based VMs.
   */
  publicKeys: ContainerServiceSshPublicKey[];
}

/**
 * Contains information about SSH certificate public key data.
 */
export interface ContainerServiceSshPublicKey {
  /**
   * Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
   */
  keyData: string;
}

export interface ContainerServiceDiagnosticsProfile {
  /**
   * Profile for the container service VM diagnostic agent.
   */
  vmDiagnostics: ContainerServiceVMDiagnostics;
}

/**
 * Profile for diagnostics on the container service VMs.
 */
export interface ContainerServiceVMDiagnostics {
  /**
   * Whether the VM diagnostic agent is provisioned on the VM.
   */
  enabled: boolean;
  /**
   * The URI of the storage account where diagnostics are stored.
   */
  readonly storageUri?: string;
}

/**
 * The source image from which the Image Version is going to be created.
 */
export interface GalleryArtifactSource {
  /**
   * The managed artifact.
   */
  managedImage: ManagedArtifact;
}

/**
 * The managed artifact.
 */
export interface ManagedArtifact {
  /**
   * The managed artifact id.
   */
  id: string;
}

export type SubResourceWithColocationStatus = SubResource & {
  /**
   * Describes colocation status of a resource in the Proximity Placement Group.
   */
  colocationStatus?: InstanceViewStatus;
};

/**
 * Virtual machine image resource information.
 */
export type VirtualMachineImageResource = SubResource & {
  /**
   * The name of the resource.
   */
  name: string;
  /**
   * The supported Azure location of the resource.
   */
  location: string;
  /**
   * Specifies the tags that are assigned to the virtual machine. For more information about using tags, see [Using tags to organize your Azure resources](https://docs.microsoft.com/azure/azure-resource-manager/resource-group-using-tags.md).
   */
  tags?: { [propertyName: string]: string };
};

/**
 * Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
 */
export type ImageReference = SubResource & {
  /**
   * The image publisher.
   */
  publisher?: string;
  /**
   * Specifies the offer of the platform image or marketplace image used to create the virtual machine.
   */
  offer?: string;
  /**
   * The image SKU.
   */
  sku?: string;
  /**
   * Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
   */
  version?: string;
  /**
   * Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'.
   */
  readonly exactVersion?: string;
};

/**
 * The parameters of a managed disk.
 */
export type ManagedDiskParameters = SubResource & {
  /**
   * Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
   */
  storageAccountType?: StorageAccountTypes;
  /**
   * Specifies the customer managed disk encryption set resource id for the managed disk.
   */
  diskEncryptionSet?: SubResource;
};

/**
 * Describes a network interface reference.
 */
export type NetworkInterfaceReference = SubResource & {
  /**
   * Specifies the primary network interface in case the virtual machine has more than 1 network interface.
   */
  primary?: boolean;
};

/**
 * Output of virtual machine capture operation.
 */
export type VirtualMachineCaptureResult = SubResource & {
  /**
   * the schema of the captured virtual machine
   */
  readonly schema?: string;
  /**
   * the version of the content
   */
  readonly contentVersion?: string;
  /**
   * parameters of the captured virtual machine
   */
  readonly parameters?: any;
  /**
   * a list of resource items of the captured virtual machine
   */
  readonly resources?: any[];
};

/**
 * Describes a virtual machine scale set network profile's IP configuration.
 */
export type VirtualMachineScaleSetIPConfiguration = SubResource & {
  /**
   * The IP configuration name.
   */
  name: string;
  /**
   * Specifies the identifier of the subnet.
   */
  subnet?: ApiEntityReference;
  /**
   * Specifies the primary network interface in case the virtual machine has more than 1 network interface.
   */
  primary?: boolean;
  /**
   * The publicIPAddressConfiguration.
   */
  publicIPAddressConfiguration?: VirtualMachineScaleSetPublicIPAddressConfiguration;
  /**
   * Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
   */
  privateIPAddressVersion?: IPVersion;
  /**
   * Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway.
   */
  applicationGatewayBackendAddressPools?: SubResource[];
  /**
   * Specifies an array of references to application security group.
   */
  applicationSecurityGroups?: SubResource[];
  /**
   * Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same load balancer.
   */
  loadBalancerBackendAddressPools?: SubResource[];
  /**
   * Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same load balancer
   */
  loadBalancerInboundNatPools?: SubResource[];
};

/**
 * Describes a virtual machine scale set network profile's network configurations.
 */
export type VirtualMachineScaleSetNetworkConfiguration = SubResource & {
  /**
   * The network configuration name.
   */
  name: string;
  /**
   * Specifies the primary network interface in case the virtual machine has more than 1 network interface.
   */
  primary?: boolean;
  /**
   * Specifies whether the network interface is accelerated networking-enabled.
   */
  enableAcceleratedNetworking?: boolean;
  /**
   * The network security group.
   */
  networkSecurityGroup?: SubResource;
  /**
   * The dns settings to be applied on the network interfaces.
   */
  dnsSettings?: VirtualMachineScaleSetNetworkConfigurationDnsSettings;
  /**
   * Specifies the IP configurations of the network interface.
   */
  ipConfigurations?: VirtualMachineScaleSetIPConfiguration[];
  /**
   * Whether IP forwarding enabled on this NIC.
   */
  enableIPForwarding?: boolean;
};

/**
 * Describes a virtual machine scale set network profile's IP configuration. NOTE: The subnet of a scale set may be modified as long as the original subnet and the new subnet are in the same virtual network
 */
export type VirtualMachineScaleSetUpdateIPConfiguration = SubResource & {
  /**
   * The IP configuration name.
   */
  name?: string;
  /**
   * The subnet.
   */
  subnet?: ApiEntityReference;
  /**
   * Specifies the primary IP Configuration in case the network interface has more than one IP Configuration.
   */
  primary?: boolean;
  /**
   * The publicIPAddressConfiguration.
   */
  publicIPAddressConfiguration?: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration;
  /**
   * Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
   */
  privateIPAddressVersion?: IPVersion;
  /**
   * The application gateway backend address pools.
   */
  applicationGatewayBackendAddressPools?: SubResource[];
  /**
   * Specifies an array of references to application security group.
   */
  applicationSecurityGroups?: SubResource[];
  /**
   * The load balancer backend address pools.
   */
  loadBalancerBackendAddressPools?: SubResource[];
  /**
   * The load balancer inbound nat pools.
   */
  loadBalancerInboundNatPools?: SubResource[];
};

/**
 * Describes a virtual machine scale set network profile's network configurations.
 */
export type VirtualMachineScaleSetUpdateNetworkConfiguration = SubResource & {
  /**
   * The network configuration name.
   */
  name?: string;
  /**
   * Whether this is a primary NIC on a virtual machine.
   */
  primary?: boolean;
  /**
   * Specifies whether the network interface is accelerated networking-enabled.
   */
  enableAcceleratedNetworking?: boolean;
  /**
   * The network security group.
   */
  networkSecurityGroup?: SubResource;
  /**
   * The dns settings to be applied on the network interfaces.
   */
  dnsSettings?: VirtualMachineScaleSetNetworkConfigurationDnsSettings;
  /**
   * The virtual machine scale set IP Configuration.
   */
  ipConfigurations?: VirtualMachineScaleSetUpdateIPConfiguration[];
  /**
   * Whether IP forwarding enabled on this NIC.
   */
  enableIPForwarding?: boolean;
};

/**
 * Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. <br><br> NOTE: The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
 */
export type DiskEncryptionSetParameters = SubResource & {};

/**
 * Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Manage the availability of virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). <br><br> For more information on Azure planned maintenance, see [Planned maintenance for virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set.
 */
export type AvailabilitySet = Resource & {
  /**
   * Sku of the availability set, only name is required to be set. See AvailabilitySetSkuTypes for possible set of values. Use 'Aligned' for virtual machines with managed disks and 'Classic' for virtual machines with unmanaged disks. Default value is 'Classic'.
   */
  sku?: Sku;
  /**
   * Update Domain count.
   */
  platformUpdateDomainCount?: number;
  /**
   * Fault Domain count.
   */
  platformFaultDomainCount?: number;
  /**
   * A list of references to all virtual machines in the availability set.
   */
  virtualMachines?: SubResource[];
  /**
   * Specifies information about the proximity placement group that the availability set should be assigned to. <br><br>Minimum api-version: 2018-04-01.
   */
  proximityPlacementGroup?: SubResource;
  /**
   * The resource status information.
   */
  readonly statuses?: InstanceViewStatus[];
};

/**
 * Specifies information about the proximity placement group.
 */
export type ProximityPlacementGroup = Resource & {
  /**
   * Specifies the type of the proximity placement group. <br><br> Possible values are: <br><br> **Standard** : Co-locate resources within an Azure region or Availability Zone. <br><br> **Ultra** : For future use.
   */
  proximityPlacementGroupType?: ProximityPlacementGroupType;
  /**
   * A list of references to all virtual machines in the proximity placement group.
   */
  readonly virtualMachines?: SubResourceWithColocationStatus[];
  /**
   * A list of references to all virtual machine scale sets in the proximity placement group.
   */
  readonly virtualMachineScaleSets?: SubResourceWithColocationStatus[];
  /**
   * A list of references to all availability sets in the proximity placement group.
   */
  readonly availabilitySets?: SubResourceWithColocationStatus[];
  /**
   * Describes colocation status of the Proximity Placement Group.
   */
  colocationStatus?: InstanceViewStatus;
};

/**
 * Specifies information about the dedicated host group that the dedicated hosts should be assigned to. <br><br> Currently, a dedicated host can only be added to a dedicated host group at creation time. An existing dedicated host cannot be added to another dedicated host group.
 */
export type DedicatedHostGroup = Resource & {
  /**
   * Availability Zone to use for this host group. Only single zone is supported. The zone can be assigned only during creation. If not provided, the group supports all zones in the region. If provided, enforces each host in the group to be in the same zone.
   */
  zones?: string[];
  /**
   * Number of fault domains that the host group can span.
   */
  platformFaultDomainCount?: number;
  /**
   * A list of references to all dedicated hosts in the dedicated host group.
   */
  readonly hosts?: SubResourceReadOnly[];
};

/**
 * Specifies information about the Dedicated host.
 */
export type DedicatedHost = Resource & {
  /**
   * SKU of the dedicated host for Hardware Generation and VM family. Only name is required to be set. List Microsoft.Compute SKUs for a list of possible values.
   */
  sku: Sku;
  /**
   * Fault domain of the dedicated host within a dedicated host group.
   */
  platformFaultDomain?: number;
  /**
   * Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided.
   */
  autoReplaceOnFailure?: boolean;
  /**
   * A unique id generated and assigned to the dedicated host by the platform. <br><br> Does not change throughout the lifetime of the host.
   */
  readonly hostId?: string;
  /**
   * A list of references to all virtual machines in the Dedicated Host.
   */
  readonly virtualMachines?: SubResourceReadOnly[];
  /**
   * Specifies the software license type that will be applied to the VMs deployed on the dedicated host. <br><br> Possible values are: <br><br> **None** <br><br> **Windows_Server_Hybrid** <br><br> **Windows_Server_Perpetual** <br><br> Default: **None**
   */
  licenseType?: DedicatedHostLicenseTypes;
  /**
   * The date when the host was first provisioned.
   */
  readonly provisioningTime?: Date;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: string;
  /**
   * The dedicated host instance view.
   */
  readonly instanceView?: DedicatedHostInstanceView;
};

/**
 * Specifies information about the SSH public key.
 */
export type SshPublicKeyResource = Resource & {
  /**
   * SSH public key used to authenticate to a virtual machine through ssh. If this property is not initially provided when the resource is created, the publicKey property will be populated when generateKeyPair is called. If the public key is provided upon resource creation, the provided public key needs to be at least 2048-bit and in ssh-rsa format.
   */
  publicKey?: string;
};

/**
 * Describes a Virtual Machine Extension Image.
 */
export type VirtualMachineExtensionImage = Resource & {
  /**
   * The operating system this extension supports.
   */
  operatingSystem?: string;
  /**
   * The type of role (IaaS or PaaS) this extension supports.
   */
  computeRole?: string;
  /**
   * The schema defined by publisher, where extension consumers should provide settings in a matching schema.
   */
  handlerSchema?: string;
  /**
   * Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable on scalesets, but there might be cases where a publisher wants to explicitly indicate the extension is only enabled for CRP VMs but not VMSS.
   */
  vmScaleSetEnabled?: boolean;
  /**
   * Whether the handler can support multiple extensions.
   */
  supportsMultipleExtensions?: boolean;
};

/**
 * Describes a Virtual Machine Extension.
 */
export type VirtualMachineExtension = Resource & {
  /**
   * How the extension handler should be forced to update even if the extension configuration has not changed.
   */
  forceUpdateTag?: string;
  /**
   * The name of the extension handler publisher.
   */
  publisher?: string;
  /**
   * Specifies the type of the extension; an example is "CustomScriptExtension".
   */
  typePropertiesType?: string;
  /**
   * Specifies the version of the script handler.
   */
  typeHandlerVersion?: string;
  /**
   * Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
   */
  autoUpgradeMinorVersion?: boolean;
  /**
   * Json formatted public settings for the extension.
   */
  settings?: any;
  /**
   * The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
   */
  protectedSettings?: any;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: string;
  /**
   * The virtual machine extension instance view.
   */
  instanceView?: VirtualMachineExtensionInstanceView;
};

/**
 * Describes a Virtual Machine.
 */
export type VirtualMachine = Resource & {
  /**
   * Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
   */
  plan?: Plan;
  /**
   * The virtual machine child extension resources.
   */
  readonly resources?: VirtualMachineExtension[];
  /**
   * The identity of the virtual machine, if configured.
   */
  identity?: VirtualMachineIdentity;
  /**
   * The virtual machine zones.
   */
  zones?: string[];
  /**
   * Specifies the hardware settings for the virtual machine.
   */
  hardwareProfile?: HardwareProfile;
  /**
   * Specifies the storage settings for the virtual machine disks.
   */
  storageProfile?: StorageProfile;
  /**
   * Specifies additional capabilities enabled or disabled on the virtual machine.
   */
  additionalCapabilities?: AdditionalCapabilities;
  /**
   * Specifies the operating system settings used while creating the virtual machine. Some of the settings cannot be changed once VM is provisioned.
   */
  osProfile?: OSProfile;
  /**
   * Specifies the network interfaces of the virtual machine.
   */
  networkProfile?: NetworkProfile;
  /**
   * Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
   */
  diagnosticsProfile?: DiagnosticsProfile;
  /**
   * Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Manage the availability of virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). <br><br> For more information on Azure planned maintenance, see [Planned maintenance for virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Currently, a VM can only be added to availability set at creation time. The availability set to which the VM is being added should be under the same resource group as the availability set resource. An existing VM cannot be added to an availability set. <br><br>This property cannot exist along with a non-null properties.virtualMachineScaleSet reference.
   */
  availabilitySet?: SubResource;
  /**
   * Specifies information about the virtual machine scale set that the virtual machine should be assigned to. Virtual machines specified in the same virtual machine scale set are allocated to different nodes to maximize availability. Currently, a VM can only be added to virtual machine scale set at creation time. An existing VM cannot be added to a virtual machine scale set. <br><br>This property cannot exist along with a non-null properties.availabilitySet reference. <br><br>Minimum api‐version: 2019‐03‐01
   */
  virtualMachineScaleSet?: SubResource;
  /**
   * Specifies information about the proximity placement group that the virtual machine should be assigned to. <br><br>Minimum api-version: 2018-04-01.
   */
  proximityPlacementGroup?: SubResource;
  /**
   * Specifies the priority for the virtual machine. <br><br>Minimum api-version: 2019-03-01
   */
  priority?: VirtualMachinePriorityTypes;
  /**
   * Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, the only supported value is 'Deallocate' and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
   */
  evictionPolicy?: VirtualMachineEvictionPolicyTypes;
  /**
   * Specifies the billing related details of a Azure Spot virtual machine. <br><br>Minimum api-version: 2019-03-01.
   */
  billingProfile?: BillingProfile;
  /**
   * Specifies information about the dedicated host that the virtual machine resides in. <br><br>Minimum api-version: 2018-10-01.
   */
  host?: SubResource;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: string;
  /**
   * The virtual machine instance view.
   */
  readonly instanceView?: VirtualMachineInstanceView;
  /**
   * Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15
   */
  licenseType?: string;
  /**
   * Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.
   */
  readonly vmId?: string;
};

/**
 * The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
 */
export type Image = Resource & {
  /**
   * The source virtual machine from which Image is created.
   */
  sourceVirtualMachine?: SubResource;
  /**
   * Specifies the storage settings for the virtual machine disks.
   */
  storageProfile?: ImageStorageProfile;
  /**
   * The provisioning state.
   */
  readonly provisioningState?: string;
  /**
   * Gets the HyperVGenerationType of the VirtualMachine created from the image
   */
  hyperVGeneration?: HyperVGenerationTypes;
};

/**
 * Describes a Virtual Machine Scale Set.
 */
export type VirtualMachineScaleSet = Resource & {
  /**
   * The virtual machine scale set sku.
   */
  sku?: Sku;
  /**
   * Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
   */
  plan?: Plan;
  /**
   * The identity of the virtual machine scale set, if configured.
   */
  identity?: VirtualMachineScaleSetIdentity;
  /**
   * The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set
   */
  zones?: string[];
  /**
   * The upgrade policy.
   */
  upgradePolicy?: UpgradePolicy;
  /**
   * Policy for automatic repairs.
   */
  automaticRepairsPolicy?: AutomaticRepairsPolicy;
  /**
   * The virtual machine profile.
   */
  virtualMachineProfile?: VirtualMachineScaleSetVMProfile;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: string;
  /**
   * Specifies whether the Virtual Machine Scale Set should be overprovisioned.
   */
  overprovision?: boolean;
  /**
   * When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.
   */
  doNotRunExtensionsOnOverprovisionedVMs?: boolean;
  /**
   * Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
   */
  readonly uniqueId?: string;
  /**
   * When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if singlePlacementGroup is false, it may not be modified to true.
   */
  singlePlacementGroup?: boolean;
  /**
   * Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage.
   */
  zoneBalance?: boolean;
  /**
   * Fault Domain count for each placement group.
   */
  platformFaultDomainCount?: number;
  /**
   * Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. <br><br>Minimum api-version: 2018-04-01.
   */
  proximityPlacementGroup?: SubResource;
  /**
   * Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
   */
  additionalCapabilities?: AdditionalCapabilities;
  /**
   * Specifies the scale-in policy that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled-in.
   */
  scaleInPolicy?: ScaleInPolicy;
};

/**
 * The status of the latest virtual machine scale set rolling upgrade.
 */
export type RollingUpgradeStatusInfo = Resource & {
  /**
   * The rolling upgrade policies applied for this upgrade.
   */
  readonly policy?: RollingUpgradePolicy;
  /**
   * Information about the current running state of the overall upgrade.
   */
  readonly runningStatus?: RollingUpgradeRunningStatus;
  /**
   * Information about the number of virtual machine instances in each upgrade state.
   */
  readonly progress?: RollingUpgradeProgressInfo;
  /**
   * Error details for this upgrade, if there are any.
   */
  readonly error?: ApiError;
};

/**
 * Describes a virtual machine scale set virtual machine.
 */
export type VirtualMachineScaleSetVM = Resource & {
  /**
   * The virtual machine instance ID.
   */
  readonly instanceId?: string;
  /**
   * The virtual machine SKU.
   */
  readonly sku?: Sku;
  /**
   * Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
   */
  plan?: Plan;
  /**
   * The virtual machine child extension resources.
   */
  readonly resources?: VirtualMachineExtension[];
  /**
   * The virtual machine zones.
   */
  readonly zones?: string[];
  /**
   * Specifies whether the latest model has been applied to the virtual machine.
   */
  readonly latestModelApplied?: boolean;
  /**
   * Azure VM unique ID.
   */
  readonly vmId?: string;
  /**
   * The virtual machine instance view.
   */
  readonly instanceView?: VirtualMachineScaleSetVMInstanceView;
  /**
   * Specifies the hardware settings for the virtual machine.
   */
  hardwareProfile?: HardwareProfile;
  /**
   * Specifies the storage settings for the virtual machine disks.
   */
  storageProfile?: StorageProfile;
  /**
   * Specifies additional capabilities enabled or disabled on the virtual machine in the scale set. For instance: whether the virtual machine has the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
   */
  additionalCapabilities?: AdditionalCapabilities;
  /**
   * Specifies the operating system settings for the virtual machine.
   */
  osProfile?: OSProfile;
  /**
   * Specifies the network interfaces of the virtual machine.
   */
  networkProfile?: NetworkProfile;
  /**
   * Specifies the network profile configuration of the virtual machine.
   */
  networkProfileConfiguration?: VirtualMachineScaleSetVMNetworkProfileConfiguration;
  /**
   * Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
   */
  diagnosticsProfile?: DiagnosticsProfile;
  /**
   * Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Manage the availability of virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). <br><br> For more information on Azure planned maintenance, see [Planned maintenance for virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set.
   */
  availabilitySet?: SubResource;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: string;
  /**
   * Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15
   */
  licenseType?: string;
  /**
   * Specifies whether the model applied to the virtual machine is the model of the virtual machine scale set or the customized model for the virtual machine.
   */
  readonly modelDefinitionApplied?: string;
  /**
   * Specifies the protection policy of the virtual machine.
   */
  protectionPolicy?: VirtualMachineScaleSetVMProtectionPolicy;
};

/**
 * Disk resource.
 */
export type Disk = Resource & {
  /**
   * A relative URI containing the ID of the VM that has the disk attached.
   */
  readonly managedBy?: string;
  /**
   * List of relative URIs containing the IDs of the VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
   */
  readonly managedByExtended?: string[];
  /**
   * The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
   */
  sku?: DiskSku;
  /**
   * The Logical zone list for Disk.
   */
  zones?: string[];
  /**
   * The time when the disk was created.
   */
  readonly timeCreated?: Date;
  /**
   * The Operating System type.
   */
  osType?: OperatingSystemTypes;
  /**
   * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
   */
  hyperVGeneration?: HyperVGeneration;
  /**
   * Disk source information. CreationData information cannot be changed after the disk has been created.
   */
  creationData?: CreationData;
  /**
   * If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
   */
  diskSizeGB?: number;
  /**
   * The size of the disk in bytes. This field is read only.
   */
  readonly diskSizeBytes?: number;
  /**
   * Unique Guid identifying the resource.
   */
  readonly uniqueId?: string;
  /**
   * Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
   */
  encryptionSettingsCollection?: EncryptionSettingsCollection;
  /**
   * The disk provisioning state.
   */
  readonly provisioningState?: string;
  /**
   * The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
   */
  diskIopsReadWrite?: number;
  /**
   * The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
   */
  diskMBpsReadWrite?: number;
  /**
   * The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
   */
  diskIopsReadOnly?: number;
  /**
   * The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
   */
  diskMBpsReadOnly?: number;
  /**
   * The state of the disk.
   */
  readonly diskState?: DiskState;
  /**
   * Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
   */
  encryption?: Encryption;
  /**
   * The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
   */
  maxShares?: number;
  /**
   * Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
   */
  readonly shareInfo?: ShareInfoElement[];
};

/**
 * Snapshot resource.
 */
export type Snapshot = Resource & {
  /**
   * Unused. Always Null.
   */
  readonly managedBy?: string;
  /**
   * The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
   */
  sku?: SnapshotSku;
  /**
   * The time when the disk was created.
   */
  readonly timeCreated?: Date;
  /**
   * The Operating System type.
   */
  osType?: OperatingSystemTypes;
  /**
   * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
   */
  hyperVGeneration?: HyperVGeneration;
  /**
   * Disk source information. CreationData information cannot be changed after the disk has been created.
   */
  creationData?: CreationData;
  /**
   * If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
   */
  diskSizeGB?: number;
  /**
   * The size of the disk in bytes. This field is read only.
   */
  readonly diskSizeBytes?: number;
  /**
   * Unique Guid identifying the resource.
   */
  readonly uniqueId?: string;
  /**
   * Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
   */
  encryptionSettingsCollection?: EncryptionSettingsCollection;
  /**
   * The disk provisioning state.
   */
  readonly provisioningState?: string;
  /**
   * Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
   */
  incremental?: boolean;
  /**
   * Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
   */
  encryption?: Encryption;
};

/**
 * disk encryption set resource.
 */
export type DiskEncryptionSet = Resource & {
  /**
   * The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
   */
  identity?: EncryptionSetIdentity;
  /**
   * The key vault key which is currently used by this disk encryption set.
   */
  activeKey?: KeyVaultAndKeyReference;
  /**
   * A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.
   */
  readonly previousKeys?: KeyVaultAndKeyReference[];
  /**
   * The disk encryption set provisioning state.
   */
  readonly provisioningState?: string;
};

/**
 * Specifies information about the Shared Image Gallery that you want to create or update.
 */
export type Gallery = Resource & {
  /**
   * The description of this Shared Image Gallery resource. This property is updatable.
   */
  description?: string;
  /**
   * Describes the gallery unique name.
   */
  identifier?: GalleryIdentifier;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: GalleryPropertiesProvisioningState;
};

/**
 * Specifies information about the gallery Image Definition that you want to create or update.
 */
export type GalleryImage = Resource & {
  /**
   * The description of this gallery Image Definition resource. This property is updatable.
   */
  description?: string;
  /**
   * The Eula agreement for the gallery Image Definition.
   */
  eula?: string;
  /**
   * The privacy statement uri.
   */
  privacyStatementUri?: string;
  /**
   * The release note uri.
   */
  releaseNoteUri?: string;
  /**
   * This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
   */
  osType?: OperatingSystemTypes;
  /**
   * This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'.
   */
  osState?: OperatingSystemStateTypes;
  /**
   * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
   */
  hyperVGeneration?: HyperVGeneration;
  /**
   * The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable.
   */
  endOfLifeDate?: Date;
  /**
   * This is the gallery Image Definition identifier.
   */
  identifier?: GalleryImageIdentifier;
  /**
   * The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
   */
  recommended?: RecommendedMachineConfiguration;
  /**
   * Describes the disallowed disk types.
   */
  disallowed?: Disallowed;
  /**
   * Describes the gallery Image Definition purchase plan. This is used by marketplace images.
   */
  purchasePlan?: ImagePurchasePlan;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: GalleryImagePropertiesProvisioningState;
};

/**
 * Specifies information about the gallery Image Version that you want to create or update.
 */
export type GalleryImageVersion = Resource & {
  /**
   * Describes the basic gallery artifact publishing profile.
   */
  publishingProfile?: GalleryArtifactPublishingProfileBase;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: GalleryImageVersionPropertiesProvisioningState;
  /**
   * This is the storage profile of a Gallery Image Version.
   */
  storageProfile?: GalleryImageVersionStorageProfile;
  /**
   * This is the replication status of the gallery Image Version.
   */
  readonly replicationStatus?: ReplicationStatus;
};

/**
 * Specifies information about the gallery Application Definition that you want to create or update.
 */
export type GalleryApplication = Resource & {
  /**
   * The description of this gallery Application Definition resource. This property is updatable.
   */
  description?: string;
  /**
   * The Eula agreement for the gallery Application Definition.
   */
  eula?: string;
  /**
   * The privacy statement uri.
   */
  privacyStatementUri?: string;
  /**
   * The release note uri.
   */
  releaseNoteUri?: string;
  /**
   * The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable.
   */
  endOfLifeDate?: Date;
  /**
   * This property allows you to specify the supported type of the OS that application is built for. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
   */
  supportedOSType?: OperatingSystemTypes;
};

/**
 * Specifies information about the gallery Application Version that you want to create or update.
 */
export type GalleryApplicationVersion = Resource & {
  /**
   * The publishing profile of a gallery Image Version.
   */
  publishingProfile?: GalleryApplicationVersionPublishingProfile;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: GalleryApplicationVersionPropertiesProvisioningState;
  /**
   * This is the replication status of the gallery Image Version.
   */
  readonly replicationStatus?: ReplicationStatus;
};

/**
 * Container service.
 */
export type ContainerService = Resource & {
  /**
   * the current deployment or provisioning state, which only appears in the response.
   */
  readonly provisioningState?: string;
  /**
   * Properties of the orchestrator.
   */
  orchestratorProfile?: ContainerServiceOrchestratorProfile;
  /**
   * Properties for custom clusters.
   */
  customProfile?: ContainerServiceCustomProfile;
  /**
   * Properties for cluster service principals.
   */
  servicePrincipalProfile?: ContainerServicePrincipalProfile;
  /**
   * Properties of master agents.
   */
  masterProfile?: ContainerServiceMasterProfile;
  /**
   * Properties of the agent pool.
   */
  agentPoolProfiles?: ContainerServiceAgentPoolProfile[];
  /**
   * Properties of Windows VMs.
   */
  windowsProfile?: ContainerServiceWindowsProfile;
  /**
   * Properties of Linux VMs.
   */
  linuxProfile?: ContainerServiceLinuxProfile;
  /**
   * Properties of the diagnostic agent.
   */
  diagnosticsProfile?: ContainerServiceDiagnosticsProfile;
};

/**
 * Specifies information about the availability set that the virtual machine should be assigned to. Only tags may be updated.
 */
export type AvailabilitySetUpdate = UpdateResource & {
  /**
   * Sku of the availability set
   */
  sku?: Sku;
  /**
   * Update Domain count.
   */
  platformUpdateDomainCount?: number;
  /**
   * Fault Domain count.
   */
  platformFaultDomainCount?: number;
  /**
   * A list of references to all virtual machines in the availability set.
   */
  virtualMachines?: SubResource[];
  /**
   * Specifies information about the proximity placement group that the availability set should be assigned to. <br><br>Minimum api-version: 2018-04-01.
   */
  proximityPlacementGroup?: SubResource;
  /**
   * The resource status information.
   */
  readonly statuses?: InstanceViewStatus[];
};

/**
 * Specifies information about the dedicated host group that the dedicated host should be assigned to. Only tags may be updated.
 */
export type DedicatedHostGroupUpdate = UpdateResource & {
  /**
   * Availability Zone to use for this host group. Only single zone is supported. The zone can be assigned only during creation. If not provided, the group supports all zones in the region. If provided, enforces each host in the group to be in the same zone.
   */
  zones?: string[];
  /**
   * Number of fault domains that the host group can span.
   */
  platformFaultDomainCount?: number;
  /**
   * A list of references to all dedicated hosts in the dedicated host group.
   */
  readonly hosts?: SubResourceReadOnly[];
};

/**
 * Specifies information about the dedicated host. Only tags, autoReplaceOnFailure and licenseType may be updated.
 */
export type DedicatedHostUpdate = UpdateResource & {
  /**
   * Fault domain of the dedicated host within a dedicated host group.
   */
  platformFaultDomain?: number;
  /**
   * Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided.
   */
  autoReplaceOnFailure?: boolean;
  /**
   * A unique id generated and assigned to the dedicated host by the platform. <br><br> Does not change throughout the lifetime of the host.
   */
  readonly hostId?: string;
  /**
   * A list of references to all virtual machines in the Dedicated Host.
   */
  readonly virtualMachines?: SubResourceReadOnly[];
  /**
   * Specifies the software license type that will be applied to the VMs deployed on the dedicated host. <br><br> Possible values are: <br><br> **None** <br><br> **Windows_Server_Hybrid** <br><br> **Windows_Server_Perpetual** <br><br> Default: **None**
   */
  licenseType?: DedicatedHostLicenseTypes;
  /**
   * The date when the host was first provisioned.
   */
  readonly provisioningTime?: Date;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: string;
  /**
   * The dedicated host instance view.
   */
  readonly instanceView?: DedicatedHostInstanceView;
};

/**
 * Specifies information about the SSH public key.
 */
export type SshPublicKeyUpdateResource = UpdateResource & {
  /**
   * SSH public key used to authenticate to a virtual machine through ssh. If this property is not initially provided when the resource is created, the publicKey property will be populated when generateKeyPair is called. If the public key is provided upon resource creation, the provided public key needs to be at least 2048-bit and in ssh-rsa format.
   */
  publicKey?: string;
};

/**
 * Describes a Virtual Machine Extension.
 */
export type VirtualMachineExtensionUpdate = UpdateResource & {
  /**
   * How the extension handler should be forced to update even if the extension configuration has not changed.
   */
  forceUpdateTag?: string;
  /**
   * The name of the extension handler publisher.
   */
  publisher?: string;
  /**
   * Specifies the type of the extension; an example is "CustomScriptExtension".
   */
  type?: string;
  /**
   * Specifies the version of the script handler.
   */
  typeHandlerVersion?: string;
  /**
   * Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
   */
  autoUpgradeMinorVersion?: boolean;
  /**
   * Json formatted public settings for the extension.
   */
  settings?: any;
  /**
   * The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
   */
  protectedSettings?: any;
};

/**
 * The source user image virtual hard disk. Only tags may be updated.
 */
export type ImageUpdate = UpdateResource & {
  /**
   * The source virtual machine from which Image is created.
   */
  sourceVirtualMachine?: SubResource;
  /**
   * Specifies the storage settings for the virtual machine disks.
   */
  storageProfile?: ImageStorageProfile;
  /**
   * The provisioning state.
   */
  readonly provisioningState?: string;
  /**
   * Gets the HyperVGenerationType of the VirtualMachine created from the image
   */
  hyperVGeneration?: HyperVGenerationTypes;
};

/**
 * Describes a Virtual Machine Update.
 */
export type VirtualMachineUpdate = UpdateResource & {
  /**
   * Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
   */
  plan?: Plan;
  /**
   * The identity of the virtual machine, if configured.
   */
  identity?: VirtualMachineIdentity;
  /**
   * The virtual machine zones.
   */
  zones?: string[];
  /**
   * Specifies the hardware settings for the virtual machine.
   */
  hardwareProfile?: HardwareProfile;
  /**
   * Specifies the storage settings for the virtual machine disks.
   */
  storageProfile?: StorageProfile;
  /**
   * Specifies additional capabilities enabled or disabled on the virtual machine.
   */
  additionalCapabilities?: AdditionalCapabilities;
  /**
   * Specifies the operating system settings used while creating the virtual machine. Some of the settings cannot be changed once VM is provisioned.
   */
  osProfile?: OSProfile;
  /**
   * Specifies the network interfaces of the virtual machine.
   */
  networkProfile?: NetworkProfile;
  /**
   * Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
   */
  diagnosticsProfile?: DiagnosticsProfile;
  /**
   * Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Manage the availability of virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). <br><br> For more information on Azure planned maintenance, see [Planned maintenance for virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Currently, a VM can only be added to availability set at creation time. The availability set to which the VM is being added should be under the same resource group as the availability set resource. An existing VM cannot be added to an availability set. <br><br>This property cannot exist along with a non-null properties.virtualMachineScaleSet reference.
   */
  availabilitySet?: SubResource;
  /**
   * Specifies information about the virtual machine scale set that the virtual machine should be assigned to. Virtual machines specified in the same virtual machine scale set are allocated to different nodes to maximize availability. Currently, a VM can only be added to virtual machine scale set at creation time. An existing VM cannot be added to a virtual machine scale set. <br><br>This property cannot exist along with a non-null properties.availabilitySet reference. <br><br>Minimum api‐version: 2019‐03‐01
   */
  virtualMachineScaleSet?: SubResource;
  /**
   * Specifies information about the proximity placement group that the virtual machine should be assigned to. <br><br>Minimum api-version: 2018-04-01.
   */
  proximityPlacementGroup?: SubResource;
  /**
   * Specifies the priority for the virtual machine. <br><br>Minimum api-version: 2019-03-01
   */
  priority?: VirtualMachinePriorityTypes;
  /**
   * Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, the only supported value is 'Deallocate' and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
   */
  evictionPolicy?: VirtualMachineEvictionPolicyTypes;
  /**
   * Specifies the billing related details of a Azure Spot virtual machine. <br><br>Minimum api-version: 2019-03-01.
   */
  billingProfile?: BillingProfile;
  /**
   * Specifies information about the dedicated host that the virtual machine resides in. <br><br>Minimum api-version: 2018-10-01.
   */
  host?: SubResource;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: string;
  /**
   * The virtual machine instance view.
   */
  readonly instanceView?: VirtualMachineInstanceView;
  /**
   * Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15
   */
  licenseType?: string;
  /**
   * Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.
   */
  readonly vmId?: string;
};

/**
 * Describes a Virtual Machine Scale Set.
 */
export type VirtualMachineScaleSetUpdate = UpdateResource & {
  /**
   * The virtual machine scale set sku.
   */
  sku?: Sku;
  /**
   * The purchase plan when deploying a virtual machine scale set from VM Marketplace images.
   */
  plan?: Plan;
  /**
   * The identity of the virtual machine scale set, if configured.
   */
  identity?: VirtualMachineScaleSetIdentity;
  /**
   * The upgrade policy.
   */
  upgradePolicy?: UpgradePolicy;
  /**
   * Policy for automatic repairs.
   */
  automaticRepairsPolicy?: AutomaticRepairsPolicy;
  /**
   * The virtual machine profile.
   */
  virtualMachineProfile?: VirtualMachineScaleSetUpdateVMProfile;
  /**
   * Specifies whether the Virtual Machine Scale Set should be overprovisioned.
   */
  overprovision?: boolean;
  /**
   * When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.
   */
  doNotRunExtensionsOnOverprovisionedVMs?: boolean;
  /**
   * When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if singlePlacementGroup is false, it may not be modified to true.
   */
  singlePlacementGroup?: boolean;
  /**
   * Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
   */
  additionalCapabilities?: AdditionalCapabilities;
  /**
   * Specifies the scale-in policy that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled-in.
   */
  scaleInPolicy?: ScaleInPolicy;
  /**
   * Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. <br><br>Minimum api-version: 2018-04-01.
   */
  proximityPlacementGroup?: SubResource;
};

/**
 * Specifies information about the proximity placement group.
 */
export type ProximityPlacementGroupUpdate = UpdateResource & {};

/**
 * Describes a Virtual Machine Scale Set Extension.
 */
export type VirtualMachineScaleSetExtension = SubResourceReadOnly & {
  /**
   * The name of the extension.
   */
  name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
   */
  forceUpdateTag?: string;
  /**
   * The name of the extension handler publisher.
   */
  publisher?: string;
  /**
   * Specifies the type of the extension; an example is "CustomScriptExtension".
   */
  typePropertiesType?: string;
  /**
   * Specifies the version of the script handler.
   */
  typeHandlerVersion?: string;
  /**
   * Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
   */
  autoUpgradeMinorVersion?: boolean;
  /**
   * Json formatted public settings for the extension.
   */
  settings?: any;
  /**
   * The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
   */
  protectedSettings?: any;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: string;
  /**
   * Collection of extension names after which this extension needs to be provisioned.
   */
  provisionAfterExtensions?: string[];
};

/**
 * Describes a Virtual Machine Scale Set Extension.
 */
export type VirtualMachineScaleSetExtensionUpdate = SubResourceReadOnly & {
  /**
   * The name of the extension.
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
   */
  forceUpdateTag?: string;
  /**
   * The name of the extension handler publisher.
   */
  publisher?: string;
  /**
   * Specifies the type of the extension; an example is "CustomScriptExtension".
   */
  typePropertiesType?: string;
  /**
   * Specifies the version of the script handler.
   */
  typeHandlerVersion?: string;
  /**
   * Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
   */
  autoUpgradeMinorVersion?: boolean;
  /**
   * Json formatted public settings for the extension.
   */
  settings?: any;
  /**
   * The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
   */
  protectedSettings?: any;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: string;
  /**
   * Collection of extension names after which this extension needs to be provisioned.
   */
  provisionAfterExtensions?: string[];
};

/**
 * Describes an Operating System disk.
 */
export type ImageOSDisk = ImageDisk & {
  /**
   * This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
   */
  osType: OperatingSystemTypes;
  /**
   * The OS State.
   */
  osState: OperatingSystemStateTypes;
};

/**
 * Describes a data disk.
 */
export type ImageDataDisk = ImageDisk & {
  /**
   * Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
   */
  lun: number;
};

/**
 * Describes a Virtual Machine Scale Set VM Reimage Parameters.
 */
export type VirtualMachineScaleSetReimageParameters = VirtualMachineReimageParameters & {
  /**
   * The virtual machine scale set instance ids. Omitting the virtual machine scale set instance ids will result in the operation being performed on all virtual machines in the virtual machine scale set.
   */
  instanceIds?: string[];
};

/**
 * Describes a Virtual Machine Scale Set VM Reimage Parameters.
 */
export type VirtualMachineScaleSetVMReimageParameters = VirtualMachineReimageParameters & {};

/**
 * Api request input for LogAnalytics getRequestRateByInterval Api.
 */
export type RequestRateByIntervalInput = LogAnalyticsInputBase & {
  /**
   * Interval value in minutes used to create LogAnalytics call rate logs.
   */
  intervalLength: IntervalInMins;
};

/**
 * Api request input for LogAnalytics getThrottledRequests Api.
 */
export type ThrottledRequestsInput = LogAnalyticsInputBase & {};

/**
 * Describes the properties of a Run Command.
 */
export type RunCommandDocument = RunCommandDocumentBase & {
  /**
   * The script to be executed.
   */
  script: string[];
  /**
   * The parameters used by the script.
   */
  parameters?: RunCommandParameterDefinition[];
};

/**
 * Specifies information about the Shared Image Gallery that you want to update.
 */
export type GalleryUpdate = UpdateResourceDefinition & {
  /**
   * The description of this Shared Image Gallery resource. This property is updatable.
   */
  description?: string;
  /**
   * Describes the gallery unique name.
   */
  identifier?: GalleryIdentifier;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: GalleryPropertiesProvisioningState;
};

/**
 * Specifies information about the gallery Image Definition that you want to update.
 */
export type GalleryImageUpdate = UpdateResourceDefinition & {
  /**
   * The description of this gallery Image Definition resource. This property is updatable.
   */
  description?: string;
  /**
   * The Eula agreement for the gallery Image Definition.
   */
  eula?: string;
  /**
   * The privacy statement uri.
   */
  privacyStatementUri?: string;
  /**
   * The release note uri.
   */
  releaseNoteUri?: string;
  /**
   * This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
   */
  osType?: OperatingSystemTypes;
  /**
   * This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'.
   */
  osState?: OperatingSystemStateTypes;
  /**
   * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
   */
  hyperVGeneration?: HyperVGeneration;
  /**
   * The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable.
   */
  endOfLifeDate?: Date;
  /**
   * This is the gallery Image Definition identifier.
   */
  identifier?: GalleryImageIdentifier;
  /**
   * The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
   */
  recommended?: RecommendedMachineConfiguration;
  /**
   * Describes the disallowed disk types.
   */
  disallowed?: Disallowed;
  /**
   * Describes the gallery Image Definition purchase plan. This is used by marketplace images.
   */
  purchasePlan?: ImagePurchasePlan;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: GalleryImagePropertiesProvisioningState;
};

/**
 * Specifies information about the gallery Image Version that you want to update.
 */
export type GalleryImageVersionUpdate = UpdateResourceDefinition & {
  /**
   * Describes the basic gallery artifact publishing profile.
   */
  publishingProfile?: GalleryArtifactPublishingProfileBase;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: GalleryImageVersionPropertiesProvisioningState;
  /**
   * This is the storage profile of a Gallery Image Version.
   */
  storageProfile?: GalleryImageVersionStorageProfile;
  /**
   * This is the replication status of the gallery Image Version.
   */
  readonly replicationStatus?: ReplicationStatus;
};

/**
 * Specifies information about the gallery Application Definition that you want to update.
 */
export type GalleryApplicationUpdate = UpdateResourceDefinition & {
  /**
   * The description of this gallery Application Definition resource. This property is updatable.
   */
  description?: string;
  /**
   * The Eula agreement for the gallery Application Definition.
   */
  eula?: string;
  /**
   * The privacy statement uri.
   */
  privacyStatementUri?: string;
  /**
   * The release note uri.
   */
  releaseNoteUri?: string;
  /**
   * The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable.
   */
  endOfLifeDate?: Date;
  /**
   * This property allows you to specify the supported type of the OS that application is built for. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
   */
  supportedOSType?: OperatingSystemTypes;
};

/**
 * Specifies information about the gallery Application Version that you want to update.
 */
export type GalleryApplicationVersionUpdate = UpdateResourceDefinition & {
  /**
   * The publishing profile of a gallery Image Version.
   */
  publishingProfile?: GalleryApplicationVersionPublishingProfile;
  /**
   * The provisioning state, which only appears in the response.
   */
  readonly provisioningState?: GalleryApplicationVersionPropertiesProvisioningState;
  /**
   * This is the replication status of the gallery Image Version.
   */
  readonly replicationStatus?: ReplicationStatus;
};

/**
 * The publishing profile of a gallery Image Version.
 */
export type GalleryApplicationVersionPublishingProfile = GalleryArtifactPublishingProfileBase & {
  /**
   * The source image from which the Image Version is going to be created.
   */
  source: UserArtifactSource;
  /**
   * Optional. May be used to help process this file. The type of file contained in the source, e.g. zip, json, etc.
   */
  contentType?: string;
  /**
   * Optional. Whether or not this application reports health.
   */
  enableHealthCheck?: boolean;
};

/**
 * The publishing profile of a gallery Image Version.
 */
export type GalleryImageVersionPublishingProfile = GalleryArtifactPublishingProfileBase & {};

/**
 * Contains encryption settings for a data disk image.
 */
export type DataDiskImageEncryption = DiskImageEncryption & {
  /**
   * This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
   */
  lun: number;
};

/**
 * Contains encryption settings for an OS disk image.
 */
export type OSDiskImageEncryption = DiskImageEncryption & {};

/**
 * This is the data disk image.
 */
export type GalleryDataDiskImage = GalleryDiskImage & {
  /**
   * This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
   */
  lun: number;
};

/**
 * This is the OS disk image.
 */
export type GalleryOSDiskImage = GalleryDiskImage & {};

/**
 * Describes a Virtual Machine Image.
 */
export type VirtualMachineImage = VirtualMachineImageResource & {
  /**
   * Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
   */
  plan?: PurchasePlan;
  /**
   * Contains the os disk image information.
   */
  osDiskImage?: OSDiskImage;
  dataDiskImages?: DataDiskImage[];
  /**
   * Describes automatic OS upgrade properties on the image.
   */
  automaticOSUpgradeProperties?: AutomaticOSUpgradeProperties;
  /**
   * Specifies the HyperVGeneration Type
   */
  hyperVGeneration?: HyperVGenerationTypes;
};
/**
 * Defines values for ProximityPlacementGroupType.
 */
export type ProximityPlacementGroupType = "Standard" | "Ultra";
/**
 * Defines values for HyperVGenerationTypes.
 */
export type HyperVGenerationTypes = "V1" | "V2";
/**
 * Defines values for VirtualMachineSizeTypes.
 */
export type VirtualMachineSizeTypes =
  | "Basic_A0"
  | "Basic_A1"
  | "Basic_A2"
  | "Basic_A3"
  | "Basic_A4"
  | "Standard_A0"
  | "Standard_A1"
  | "Standard_A2"
  | "Standard_A3"
  | "Standard_A4"
  | "Standard_A5"
  | "Standard_A6"
  | "Standard_A7"
  | "Standard_A8"
  | "Standard_A9"
  | "Standard_A10"
  | "Standard_A11"
  | "Standard_A1_v2"
  | "Standard_A2_v2"
  | "Standard_A4_v2"
  | "Standard_A8_v2"
  | "Standard_A2m_v2"
  | "Standard_A4m_v2"
  | "Standard_A8m_v2"
  | "Standard_B1s"
  | "Standard_B1ms"
  | "Standard_B2s"
  | "Standard_B2ms"
  | "Standard_B4ms"
  | "Standard_B8ms"
  | "Standard_D1"
  | "Standard_D2"
  | "Standard_D3"
  | "Standard_D4"
  | "Standard_D11"
  | "Standard_D12"
  | "Standard_D13"
  | "Standard_D14"
  | "Standard_D1_v2"
  | "Standard_D2_v2"
  | "Standard_D3_v2"
  | "Standard_D4_v2"
  | "Standard_D5_v2"
  | "Standard_D2_v3"
  | "Standard_D4_v3"
  | "Standard_D8_v3"
  | "Standard_D16_v3"
  | "Standard_D32_v3"
  | "Standard_D64_v3"
  | "Standard_D2s_v3"
  | "Standard_D4s_v3"
  | "Standard_D8s_v3"
  | "Standard_D16s_v3"
  | "Standard_D32s_v3"
  | "Standard_D64s_v3"
  | "Standard_D11_v2"
  | "Standard_D12_v2"
  | "Standard_D13_v2"
  | "Standard_D14_v2"
  | "Standard_D15_v2"
  | "Standard_DS1"
  | "Standard_DS2"
  | "Standard_DS3"
  | "Standard_DS4"
  | "Standard_DS11"
  | "Standard_DS12"
  | "Standard_DS13"
  | "Standard_DS14"
  | "Standard_DS1_v2"
  | "Standard_DS2_v2"
  | "Standard_DS3_v2"
  | "Standard_DS4_v2"
  | "Standard_DS5_v2"
  | "Standard_DS11_v2"
  | "Standard_DS12_v2"
  | "Standard_DS13_v2"
  | "Standard_DS14_v2"
  | "Standard_DS15_v2"
  | "Standard_DS13-4_v2"
  | "Standard_DS13-2_v2"
  | "Standard_DS14-8_v2"
  | "Standard_DS14-4_v2"
  | "Standard_E2_v3"
  | "Standard_E4_v3"
  | "Standard_E8_v3"
  | "Standard_E16_v3"
  | "Standard_E32_v3"
  | "Standard_E64_v3"
  | "Standard_E2s_v3"
  | "Standard_E4s_v3"
  | "Standard_E8s_v3"
  | "Standard_E16s_v3"
  | "Standard_E32s_v3"
  | "Standard_E64s_v3"
  | "Standard_E32-16_v3"
  | "Standard_E32-8s_v3"
  | "Standard_E64-32s_v3"
  | "Standard_E64-16s_v3"
  | "Standard_F1"
  | "Standard_F2"
  | "Standard_F4"
  | "Standard_F8"
  | "Standard_F16"
  | "Standard_F1s"
  | "Standard_F2s"
  | "Standard_F4s"
  | "Standard_F8s"
  | "Standard_F16s"
  | "Standard_F2s_v2"
  | "Standard_F4s_v2"
  | "Standard_F8s_v2"
  | "Standard_F16s_v2"
  | "Standard_F32s_v2"
  | "Standard_F64s_v2"
  | "Standard_F72s_v2"
  | "Standard_G1"
  | "Standard_G2"
  | "Standard_G3"
  | "Standard_G4"
  | "Standard_G5"
  | "Standard_GS1"
  | "Standard_GS2"
  | "Standard_GS3"
  | "Standard_GS4"
  | "Standard_GS5"
  | "Standard_GS4-8"
  | "Standard_GS4-4"
  | "Standard_GS5-16"
  | "Standard_GS5-8"
  | "Standard_H8"
  | "Standard_H16"
  | "Standard_H8m"
  | "Standard_H16m"
  | "Standard_H16r"
  | "Standard_H16mr"
  | "Standard_L4s"
  | "Standard_L8s"
  | "Standard_L16s"
  | "Standard_L32s"
  | "Standard_M64s"
  | "Standard_M64ms"
  | "Standard_M128s"
  | "Standard_M128ms"
  | "Standard_M64-32ms"
  | "Standard_M64-16ms"
  | "Standard_M128-64ms"
  | "Standard_M128-32ms"
  | "Standard_NC6"
  | "Standard_NC12"
  | "Standard_NC24"
  | "Standard_NC24r"
  | "Standard_NC6s_v2"
  | "Standard_NC12s_v2"
  | "Standard_NC24s_v2"
  | "Standard_NC24rs_v2"
  | "Standard_NC6s_v3"
  | "Standard_NC12s_v3"
  | "Standard_NC24s_v3"
  | "Standard_NC24rs_v3"
  | "Standard_ND6s"
  | "Standard_ND12s"
  | "Standard_ND24s"
  | "Standard_ND24rs"
  | "Standard_NV6"
  | "Standard_NV12"
  | "Standard_NV24";
/**
 * Defines values for DiffDiskOptions.
 */
export type DiffDiskOptions = "Local";
/**
 * Defines values for DiffDiskPlacement.
 */
export type DiffDiskPlacement = "CacheDisk" | "ResourceDisk";
/**
 * Defines values for DiskCreateOptionTypes.
 */
export type DiskCreateOptionTypes = "FromImage" | "Empty" | "Attach";
/**
 * Defines values for StorageAccountTypes.
 */
export type StorageAccountTypes =
  | "Standard_LRS"
  | "Premium_LRS"
  | "StandardSSD_LRS"
  | "UltraSSD_LRS";
/**
 * Defines values for VirtualMachinePriorityTypes.
 */
export type VirtualMachinePriorityTypes = "Regular" | "Low" | "Spot";
/**
 * Defines values for VirtualMachineEvictionPolicyTypes.
 */
export type VirtualMachineEvictionPolicyTypes = "Deallocate" | "Delete";
/**
 * Defines values for HyperVGenerationType.
 */
export type HyperVGenerationType = "V1" | "V2";
/**
 * Defines values for IPVersion.
 */
export type IPVersion = "IPv4" | "IPv6";
/**
 * Defines values for VirtualMachineScaleSetScaleInRules.
 */
export type VirtualMachineScaleSetScaleInRules =
  | "Default"
  | "OldestVM"
  | "NewestVM";
/**
 * Defines values for OrchestrationServiceNames.
 */
export type OrchestrationServiceNames = "AutomaticRepairs";
/**
 * Defines values for OrchestrationServiceState.
 */
export type OrchestrationServiceState = "NotRunning" | "Running" | "Suspended";
/**
 * Defines values for OrchestrationServiceStateAction.
 */
export type OrchestrationServiceStateAction = "Resume" | "Suspend";
/**
 * Defines values for DiskStorageAccountTypes.
 */
export type DiskStorageAccountTypes =
  | "Standard_LRS"
  | "Premium_LRS"
  | "StandardSSD_LRS"
  | "UltraSSD_LRS";
/**
 * Defines values for HyperVGeneration.
 */
export type HyperVGeneration = "V1" | "V2";
/**
 * Defines values for DiskCreateOption.
 */
export type DiskCreateOption =
  | "Empty"
  | "Attach"
  | "FromImage"
  | "Import"
  | "Copy"
  | "Restore"
  | "Upload";
/**
 * Defines values for DiskState.
 */
export type DiskState =
  | "Unattached"
  | "Attached"
  | "Reserved"
  | "ActiveSAS"
  | "ReadyToUpload"
  | "ActiveUpload";
/**
 * Defines values for EncryptionType.
 */
export type EncryptionType =
  | "EncryptionAtRestWithPlatformKey"
  | "EncryptionAtRestWithCustomerKey";
/**
 * Defines values for AccessLevel.
 */
export type AccessLevel = "None" | "Read" | "Write";
/**
 * Defines values for SnapshotStorageAccountTypes.
 */
export type SnapshotStorageAccountTypes =
  | "Standard_LRS"
  | "Premium_LRS"
  | "Standard_ZRS";
/**
 * Defines values for DiskEncryptionSetIdentityType.
 */
export type DiskEncryptionSetIdentityType = "SystemAssigned";
/**
 * Defines values for GalleryPropertiesProvisioningState.
 */
export type GalleryPropertiesProvisioningState =
  | "Creating"
  | "Updating"
  | "Failed"
  | "Succeeded"
  | "Deleting"
  | "Migrating";
/**
 * Defines values for GalleryImagePropertiesProvisioningState.
 */
export type GalleryImagePropertiesProvisioningState =
  | "Creating"
  | "Updating"
  | "Failed"
  | "Succeeded"
  | "Deleting"
  | "Migrating";
/**
 * Defines values for StorageAccountType.
 */
export type StorageAccountType =
  | "Standard_LRS"
  | "Standard_ZRS"
  | "Premium_LRS";
/**
 * Defines values for GalleryImageVersionPropertiesProvisioningState.
 */
export type GalleryImageVersionPropertiesProvisioningState =
  | "Creating"
  | "Updating"
  | "Failed"
  | "Succeeded"
  | "Deleting"
  | "Migrating";
/**
 * Defines values for AggregatedReplicationState.
 */
export type AggregatedReplicationState =
  | "Unknown"
  | "InProgress"
  | "Completed"
  | "Failed";
/**
 * Defines values for ReplicationState.
 */
export type ReplicationState =
  | "Unknown"
  | "Replicating"
  | "Completed"
  | "Failed";
/**
 * Defines values for ReplicationStatusTypes.
 */
export type ReplicationStatusTypes = "ReplicationStatus";
/**
 * Defines values for GalleryApplicationVersionPropertiesProvisioningState.
 */
export type GalleryApplicationVersionPropertiesProvisioningState =
  | "Creating"
  | "Updating"
  | "Failed"
  | "Succeeded"
  | "Deleting"
  | "Migrating";
/**
 * Defines values for Enum31.
 */
export type Enum31 = 1 | 3 | 5;
/**
 * Defines values for ContainerServiceVMSizeTypes.
 */
export type ContainerServiceVMSizeTypes =
  | "Standard_A0"
  | "Standard_A1"
  | "Standard_A2"
  | "Standard_A3"
  | "Standard_A4"
  | "Standard_A5"
  | "Standard_A6"
  | "Standard_A7"
  | "Standard_A8"
  | "Standard_A9"
  | "Standard_A10"
  | "Standard_A11"
  | "Standard_D1"
  | "Standard_D2"
  | "Standard_D3"
  | "Standard_D4"
  | "Standard_D11"
  | "Standard_D12"
  | "Standard_D13"
  | "Standard_D14"
  | "Standard_D1_v2"
  | "Standard_D2_v2"
  | "Standard_D3_v2"
  | "Standard_D4_v2"
  | "Standard_D5_v2"
  | "Standard_D11_v2"
  | "Standard_D12_v2"
  | "Standard_D13_v2"
  | "Standard_D14_v2"
  | "Standard_G1"
  | "Standard_G2"
  | "Standard_G3"
  | "Standard_G4"
  | "Standard_G5"
  | "Standard_DS1"
  | "Standard_DS2"
  | "Standard_DS3"
  | "Standard_DS4"
  | "Standard_DS11"
  | "Standard_DS12"
  | "Standard_DS13"
  | "Standard_DS14"
  | "Standard_GS1"
  | "Standard_GS2"
  | "Standard_GS3"
  | "Standard_GS4"
  | "Standard_GS5";
/**
 * Defines values for AvailabilitySetSkuTypes.
 */
export type AvailabilitySetSkuTypes = "Classic" | "Aligned";
/**
 * Defines values for StatusLevelTypes.
 */
export type StatusLevelTypes = "Info" | "Warning" | "Error";
/**
 * Defines values for DedicatedHostLicenseTypes.
 */
export type DedicatedHostLicenseTypes =
  | "None"
  | "Windows_Server_Hybrid"
  | "Windows_Server_Perpetual";
/**
 * Defines values for OperatingSystemTypes.
 */
export type OperatingSystemTypes = "Windows" | "Linux";
/**
 * Defines values for CachingTypes.
 */
export type CachingTypes = "None" | "ReadOnly" | "ReadWrite";
/**
 * Defines values for SettingNames.
 */
export type SettingNames = "AutoLogon" | "FirstLogonCommands";
/**
 * Defines values for ProtocolTypes.
 */
export type ProtocolTypes = "Http" | "Https";
/**
 * Defines values for MaintenanceOperationResultCodeTypes.
 */
export type MaintenanceOperationResultCodeTypes =
  | "None"
  | "RetryLater"
  | "MaintenanceAborted"
  | "MaintenanceCompleted";
/**
 * Defines values for ResourceIdentityType.
 */
export type ResourceIdentityType =
  | "SystemAssigned"
  | "UserAssigned"
  | "SystemAssigned, UserAssigned"
  | "None";
/**
 * Defines values for OperatingSystemStateTypes.
 */
export type OperatingSystemStateTypes = "Generalized" | "Specialized";
/**
 * Defines values for UpgradeMode.
 */
export type UpgradeMode = "Automatic" | "Manual" | "Rolling";
/**
 * Defines values for VirtualMachineScaleSetSkuScaleType.
 */
export type VirtualMachineScaleSetSkuScaleType = "Automatic" | "None";
/**
 * Defines values for UpgradeState.
 */
export type UpgradeState =
  | "RollingForward"
  | "Cancelled"
  | "Completed"
  | "Faulted";
/**
 * Defines values for UpgradeOperationInvoker.
 */
export type UpgradeOperationInvoker = "Unknown" | "User" | "Platform";
/**
 * Defines values for RollingUpgradeStatusCode.
 */
export type RollingUpgradeStatusCode =
  | "RollingForward"
  | "Cancelled"
  | "Completed"
  | "Faulted";
/**
 * Defines values for RollingUpgradeActionType.
 */
export type RollingUpgradeActionType = "Start" | "Cancel";
/**
 * Defines values for IntervalInMins.
 */
export type IntervalInMins =
  | "ThreeMins"
  | "FiveMins"
  | "ThirtyMins"
  | "SixtyMins";
/**
 * Defines values for ResourceSkuCapacityScaleType.
 */
export type ResourceSkuCapacityScaleType = "Automatic" | "Manual" | "None";
/**
 * Defines values for ResourceSkuRestrictionsType.
 */
export type ResourceSkuRestrictionsType = "Location" | "Zone";
/**
 * Defines values for ResourceSkuRestrictionsReasonCode.
 */
export type ResourceSkuRestrictionsReasonCode =
  | "QuotaId"
  | "NotAvailableForSubscription";
/**
 * Defines values for HostCaching.
 */
export type HostCaching = "None" | "ReadOnly" | "ReadWrite";
/**
 * Defines values for ContainerServiceOrchestratorTypes.
 */
export type ContainerServiceOrchestratorTypes =
  | "Swarm"
  | "DCOS"
  | "Custom"
  | "Kubernetes";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = ComputeOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ComputeOperationListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AvailabilitySetsCreateOrUpdateResponse = AvailabilitySet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailabilitySet;
  };
};

/**
 * Contains response data for the update operation.
 */
export type AvailabilitySetsUpdateResponse = AvailabilitySet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailabilitySet;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AvailabilitySetsGetResponse = AvailabilitySet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailabilitySet;
  };
};

/**
 * Optional parameters.
 */
export interface AvailabilitySetsListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The expand expression to apply to the operation.
   */
  expand?: string;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type AvailabilitySetsListBySubscriptionResponse = AvailabilitySetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailabilitySetListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AvailabilitySetsListResponse = AvailabilitySetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailabilitySetListResult;
  };
};

/**
 * Contains response data for the listAvailableSizes operation.
 */
export type AvailabilitySetsListAvailableSizesResponse = VirtualMachineSizeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineSizeListResult;
  };
};

/**
 * Optional parameters.
 */
export interface AvailabilitySetsListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The expand expression to apply to the operation.
   */
  expand?: string;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type AvailabilitySetsListBySubscriptionNextResponse = AvailabilitySetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailabilitySetListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type AvailabilitySetsListNextResponse = AvailabilitySetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailabilitySetListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProximityPlacementGroupsCreateOrUpdateResponse = ProximityPlacementGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProximityPlacementGroup;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ProximityPlacementGroupsUpdateResponse = ProximityPlacementGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProximityPlacementGroup;
  };
};

/**
 * Optional parameters.
 */
export interface ProximityPlacementGroupsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * includeColocationStatus=true enables fetching the colocation status of all the resources in the proximity placement group.
   */
  includeColocationStatus?: string;
}

/**
 * Contains response data for the get operation.
 */
export type ProximityPlacementGroupsGetResponse = ProximityPlacementGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProximityPlacementGroup;
  };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type ProximityPlacementGroupsListBySubscriptionResponse = ProximityPlacementGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProximityPlacementGroupListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ProximityPlacementGroupsListByResourceGroupResponse = ProximityPlacementGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProximityPlacementGroupListResult;
  };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type ProximityPlacementGroupsListBySubscriptionNextResponse = ProximityPlacementGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProximityPlacementGroupListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ProximityPlacementGroupsListByResourceGroupNextResponse = ProximityPlacementGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProximityPlacementGroupListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DedicatedHostGroupsCreateOrUpdateResponse = DedicatedHostGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DedicatedHostGroup;
  };
};

/**
 * Contains response data for the update operation.
 */
export type DedicatedHostGroupsUpdateResponse = DedicatedHostGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DedicatedHostGroup;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DedicatedHostGroupsGetResponse = DedicatedHostGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DedicatedHostGroup;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DedicatedHostGroupsListByResourceGroupResponse = DedicatedHostGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DedicatedHostGroupListResult;
  };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type DedicatedHostGroupsListBySubscriptionResponse = DedicatedHostGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DedicatedHostGroupListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type DedicatedHostGroupsListByResourceGroupNextResponse = DedicatedHostGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DedicatedHostGroupListResult;
  };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type DedicatedHostGroupsListBySubscriptionNextResponse = DedicatedHostGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DedicatedHostGroupListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DedicatedHostsCreateOrUpdateResponse = DedicatedHost & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DedicatedHost;
  };
};

/**
 * Contains response data for the update operation.
 */
export type DedicatedHostsUpdateResponse = DedicatedHost & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DedicatedHost;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DedicatedHostsGetResponse = DedicatedHost & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DedicatedHost;
  };
};

/**
 * Contains response data for the listByHostGroup operation.
 */
export type DedicatedHostsListByHostGroupResponse = DedicatedHostListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DedicatedHostListResult;
  };
};

/**
 * Contains response data for the listByHostGroupNext operation.
 */
export type DedicatedHostsListByHostGroupNextResponse = DedicatedHostListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DedicatedHostListResult;
  };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type SshPublicKeysListBySubscriptionResponse = SshPublicKeysGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SshPublicKeysGroupListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type SshPublicKeysListByResourceGroupResponse = SshPublicKeysGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SshPublicKeysGroupListResult;
  };
};

/**
 * Contains response data for the create operation.
 */
export type SshPublicKeysCreateResponse = SshPublicKeyResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SshPublicKeyResource;
  };
};

/**
 * Contains response data for the update operation.
 */
export type SshPublicKeysUpdateResponse = SshPublicKeyResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SshPublicKeyResource;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SshPublicKeysGetResponse = SshPublicKeyResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SshPublicKeyResource;
  };
};

/**
 * Contains response data for the generateKeyPair operation.
 */
export type SshPublicKeysGenerateKeyPairResponse = SshPublicKeyGenerateKeyPairResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SshPublicKeyGenerateKeyPairResult;
  };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type SshPublicKeysListBySubscriptionNextResponse = SshPublicKeysGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SshPublicKeysGroupListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type SshPublicKeysListByResourceGroupNextResponse = SshPublicKeysGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SshPublicKeysGroupListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualMachineExtensionImagesGetResponse = VirtualMachineExtensionImage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineExtensionImage;
  };
};

/**
 * Contains response data for the listTypes operation.
 */
export type VirtualMachineExtensionImagesListTypesResponse = VirtualMachineExtensionImage[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineExtensionImage[];
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachineExtensionImagesListVersionsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply on the operation.
   */
  filter?: string;
  top?: number;
  orderby?: string;
}

/**
 * Contains response data for the listVersions operation.
 */
export type VirtualMachineExtensionImagesListVersionsResponse = VirtualMachineExtensionImage[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineExtensionImage[];
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualMachineExtensionsCreateOrUpdateResponse = VirtualMachineExtension & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineExtension;
  };
};

/**
 * Contains response data for the update operation.
 */
export type VirtualMachineExtensionsUpdateResponse = VirtualMachineExtension & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineExtension;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachineExtensionsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The expand expression to apply on the operation.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type VirtualMachineExtensionsGetResponse = VirtualMachineExtension & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineExtension;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachineExtensionsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The expand expression to apply on the operation.
   */
  expand?: string;
}

/**
 * Contains response data for the list operation.
 */
export type VirtualMachineExtensionsListResponse = VirtualMachineExtensionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineExtensionsListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualMachineImagesGetResponse = VirtualMachineImage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineImage;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachineImagesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The expand expression to apply on the operation.
   */
  expand?: string;
  top?: number;
  orderby?: string;
}

/**
 * Contains response data for the list operation.
 */
export type VirtualMachineImagesListResponse = VirtualMachineImageResource[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineImageResource[];
  };
};

/**
 * Contains response data for the listOffers operation.
 */
export type VirtualMachineImagesListOffersResponse = VirtualMachineImageResource[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineImageResource[];
  };
};

/**
 * Contains response data for the listPublishers operation.
 */
export type VirtualMachineImagesListPublishersResponse = VirtualMachineImageResource[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineImageResource[];
  };
};

/**
 * Contains response data for the listSkus operation.
 */
export type VirtualMachineImagesListSkusResponse = VirtualMachineImageResource[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineImageResource[];
  };
};

/**
 * Contains response data for the list operation.
 */
export type UsageListResponse = ListUsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListUsagesResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type UsageListNextResponse = ListUsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListUsagesResult;
  };
};

/**
 * Contains response data for the listByLocation operation.
 */
export type VirtualMachinesListByLocationResponse = VirtualMachineListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineListResult;
  };
};

/**
 * Contains response data for the capture operation.
 */
export type VirtualMachinesCaptureResponse = VirtualMachineCaptureResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineCaptureResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualMachinesCreateOrUpdateResponse = VirtualMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachine;
  };
};

/**
 * Contains response data for the update operation.
 */
export type VirtualMachinesUpdateResponse = VirtualMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachine;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualMachinesGetResponse = VirtualMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachine;
  };
};

/**
 * Contains response data for the instanceView operation.
 */
export type VirtualMachinesInstanceViewResponse = VirtualMachineInstanceView & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineInstanceView;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualMachinesListResponse = VirtualMachineListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineListResult;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachinesListAllOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * statusOnly=true enables fetching run time status of all Virtual Machines in the subscription.
   */
  statusOnly?: string;
}

/**
 * Contains response data for the listAll operation.
 */
export type VirtualMachinesListAllResponse = VirtualMachineListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineListResult;
  };
};

/**
 * Contains response data for the listAvailableSizes operation.
 */
export type VirtualMachinesListAvailableSizesResponse = VirtualMachineSizeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineSizeListResult;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachinesPowerOffOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The parameter to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Default value for this flag is false if not specified
   */
  skipShutdown?: boolean;
}

/**
 * Optional parameters.
 */
export interface VirtualMachinesReimageOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameters supplied to the Reimage Virtual Machine operation.
   */
  parameters?: VirtualMachineReimageParameters;
}

/**
 * Contains response data for the runCommand operation.
 */
export type VirtualMachinesRunCommandResponse = RunCommandResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RunCommandResult;
  };
};

/**
 * Contains response data for the listByLocationNext operation.
 */
export type VirtualMachinesListByLocationNextResponse = VirtualMachineListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualMachinesListNextResponse = VirtualMachineListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineListResult;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachinesListAllNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * statusOnly=true enables fetching run time status of all Virtual Machines in the subscription.
   */
  statusOnly?: string;
}

/**
 * Contains response data for the listAllNext operation.
 */
export type VirtualMachinesListAllNextResponse = VirtualMachineListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualMachineSizesListResponse = VirtualMachineSizeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineSizeListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ImagesCreateOrUpdateResponse = Image & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Image;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ImagesUpdateResponse = Image & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Image;
  };
};

/**
 * Optional parameters.
 */
export interface ImagesGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * The expand expression to apply on the operation.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type ImagesGetResponse = Image & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Image;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ImagesListByResourceGroupResponse = ImageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ImageListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ImagesListResponse = ImageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ImageListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ImagesListByResourceGroupNextResponse = ImageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ImageListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ImagesListNextResponse = ImageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ImageListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualMachineScaleSetsCreateOrUpdateResponse = VirtualMachineScaleSet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSet;
  };
};

/**
 * Contains response data for the update operation.
 */
export type VirtualMachineScaleSetsUpdateResponse = VirtualMachineScaleSet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSet;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualMachineScaleSetsGetResponse = VirtualMachineScaleSet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSet;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetsDeallocateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * A list of virtual machine instance IDs from the VM scale set.
   */
  vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
}

/**
 * Contains response data for the getInstanceView operation.
 */
export type VirtualMachineScaleSetsGetInstanceViewResponse = VirtualMachineScaleSetInstanceView & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetInstanceView;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualMachineScaleSetsListResponse = VirtualMachineScaleSetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetListResult;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type VirtualMachineScaleSetsListAllResponse = VirtualMachineScaleSetListWithLinkResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetListWithLinkResult;
  };
};

/**
 * Contains response data for the listSkus operation.
 */
export type VirtualMachineScaleSetsListSkusResponse = VirtualMachineScaleSetListSkusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetListSkusResult;
  };
};

/**
 * Contains response data for the getOSUpgradeHistory operation.
 */
export type VirtualMachineScaleSetsGetOSUpgradeHistoryResponse = VirtualMachineScaleSetListOSUpgradeHistory & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetListOSUpgradeHistory;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetsPowerOffOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The parameter to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Default value for this flag is false if not specified
   */
  skipShutdown?: boolean;
  /**
   * A list of virtual machine instance IDs from the VM scale set.
   */
  vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
}

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetsRestartOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * A list of virtual machine instance IDs from the VM scale set.
   */
  vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
}

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetsStartOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * A list of virtual machine instance IDs from the VM scale set.
   */
  vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
}

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetsRedeployOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * A list of virtual machine instance IDs from the VM scale set.
   */
  vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
}

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetsPerformMaintenanceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * A list of virtual machine instance IDs from the VM scale set.
   */
  vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
}

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetsReimageOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameters for Reimaging VM ScaleSet.
   */
  vmScaleSetReimageInput?: VirtualMachineScaleSetReimageParameters;
}

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetsReimageAllOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * A list of virtual machine instance IDs from the VM scale set.
   */
  vmInstanceIDs?: VirtualMachineScaleSetVMInstanceIDs;
}

/**
 * Contains response data for the forceRecoveryServiceFabricPlatformUpdateDomainWalk operation.
 */
export type VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse = RecoveryWalkResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecoveryWalkResponse;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualMachineScaleSetsListNextResponse = VirtualMachineScaleSetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type VirtualMachineScaleSetsListAllNextResponse = VirtualMachineScaleSetListWithLinkResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetListWithLinkResult;
  };
};

/**
 * Contains response data for the listSkusNext operation.
 */
export type VirtualMachineScaleSetsListSkusNextResponse = VirtualMachineScaleSetListSkusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetListSkusResult;
  };
};

/**
 * Contains response data for the getOSUpgradeHistoryNext operation.
 */
export type VirtualMachineScaleSetsGetOSUpgradeHistoryNextResponse = VirtualMachineScaleSetListOSUpgradeHistory & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetListOSUpgradeHistory;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualMachineScaleSetExtensionsCreateOrUpdateResponse = VirtualMachineScaleSetExtension & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetExtension;
  };
};

/**
 * Contains response data for the update operation.
 */
export type VirtualMachineScaleSetExtensionsUpdateResponse = VirtualMachineScaleSetExtension & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetExtension;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetExtensionsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The expand expression to apply on the operation.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type VirtualMachineScaleSetExtensionsGetResponse = VirtualMachineScaleSetExtension & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetExtension;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualMachineScaleSetExtensionsListResponse = VirtualMachineScaleSetExtensionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetExtensionListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualMachineScaleSetExtensionsListNextResponse = VirtualMachineScaleSetExtensionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetExtensionListResult;
  };
};

/**
 * Contains response data for the getLatest operation.
 */
export type VirtualMachineScaleSetRollingUpgradesGetLatestResponse = RollingUpgradeStatusInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RollingUpgradeStatusInfo;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse = VirtualMachineExtension & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineExtension;
  };
};

/**
 * Contains response data for the update operation.
 */
export type VirtualMachineScaleSetVMExtensionsUpdateResponse = VirtualMachineExtension & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineExtension;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetVMExtensionsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The expand expression to apply on the operation.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type VirtualMachineScaleSetVMExtensionsGetResponse = VirtualMachineExtension & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineExtension;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetVMExtensionsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The expand expression to apply on the operation.
   */
  expand?: string;
}

/**
 * Contains response data for the list operation.
 */
export type VirtualMachineScaleSetVMExtensionsListResponse = VirtualMachineExtensionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineExtensionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetVMsReimageOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameters for the Reimaging Virtual machine in ScaleSet.
   */
  vmScaleSetVMReimageInput?: VirtualMachineReimageParameters;
}

/**
 * Contains response data for the update operation.
 */
export type VirtualMachineScaleSetVMsUpdateResponse = VirtualMachineScaleSetVM & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetVM;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualMachineScaleSetVMsGetResponse = VirtualMachineScaleSetVM & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetVM;
  };
};

/**
 * Contains response data for the getInstanceView operation.
 */
export type VirtualMachineScaleSetVMsGetInstanceViewResponse = VirtualMachineScaleSetVMInstanceView & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetVMInstanceView;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetVMsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The expand expression to apply to the operation.
   */
  expand?: string;
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The list parameters.
   */
  select?: string;
}

/**
 * Contains response data for the list operation.
 */
export type VirtualMachineScaleSetVMsListResponse = VirtualMachineScaleSetVMListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetVMListResult;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetVMsPowerOffOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The parameter to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Default value for this flag is false if not specified
   */
  skipShutdown?: boolean;
}

/**
 * Contains response data for the runCommand operation.
 */
export type VirtualMachineScaleSetVMsRunCommandResponse = RunCommandResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RunCommandResult;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualMachineScaleSetVMsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The expand expression to apply to the operation.
   */
  expand?: string;
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
  /**
   * The list parameters.
   */
  select?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type VirtualMachineScaleSetVMsListNextResponse = VirtualMachineScaleSetVMListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualMachineScaleSetVMListResult;
  };
};

/**
 * Contains response data for the exportRequestRateByInterval operation.
 */
export type LogAnalyticsExportRequestRateByIntervalResponse = LogAnalyticsOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LogAnalyticsOperationResult;
  };
};

/**
 * Contains response data for the exportThrottledRequests operation.
 */
export type LogAnalyticsExportThrottledRequestsResponse = LogAnalyticsOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LogAnalyticsOperationResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualMachineRunCommandsListResponse = RunCommandListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RunCommandListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualMachineRunCommandsGetResponse = RunCommandDocument & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RunCommandDocument;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualMachineRunCommandsListNextResponse = RunCommandListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RunCommandListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ResourceSkusListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply on the operation.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ResourceSkusListResponse = ResourceSkusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceSkusResult;
  };
};

/**
 * Optional parameters.
 */
export interface ResourceSkusListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply on the operation.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ResourceSkusListNextResponse = ResourceSkusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceSkusResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DisksCreateOrUpdateResponse = Disk & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Disk;
  };
};

/**
 * Contains response data for the update operation.
 */
export type DisksUpdateResponse = Disk & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Disk;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DisksGetResponse = Disk & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Disk;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DisksListByResourceGroupResponse = DiskList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type DisksListResponse = DiskList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskList;
  };
};

/**
 * Contains response data for the grantAccess operation.
 */
export type DisksGrantAccessResponse = AccessUri & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccessUri;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type DisksListByResourceGroupNextResponse = DiskList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type DisksListNextResponse = DiskList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskList;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SnapshotsCreateOrUpdateResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Snapshot;
  };
};

/**
 * Contains response data for the update operation.
 */
export type SnapshotsUpdateResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Snapshot;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SnapshotsGetResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Snapshot;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type SnapshotsListByResourceGroupResponse = SnapshotList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type SnapshotsListResponse = SnapshotList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotList;
  };
};

/**
 * Contains response data for the grantAccess operation.
 */
export type SnapshotsGrantAccessResponse = AccessUri & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccessUri;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type SnapshotsListByResourceGroupNextResponse = SnapshotList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type SnapshotsListNextResponse = SnapshotList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotList;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DiskEncryptionSetsCreateOrUpdateResponse = DiskEncryptionSet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskEncryptionSet;
  };
};

/**
 * Contains response data for the update operation.
 */
export type DiskEncryptionSetsUpdateResponse = DiskEncryptionSet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskEncryptionSet;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DiskEncryptionSetsGetResponse = DiskEncryptionSet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskEncryptionSet;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DiskEncryptionSetsListByResourceGroupResponse = DiskEncryptionSetList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskEncryptionSetList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type DiskEncryptionSetsListResponse = DiskEncryptionSetList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskEncryptionSetList;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type DiskEncryptionSetsListByResourceGroupNextResponse = DiskEncryptionSetList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskEncryptionSetList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type DiskEncryptionSetsListNextResponse = DiskEncryptionSetList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskEncryptionSetList;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GalleriesCreateOrUpdateResponse = Gallery & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Gallery;
  };
};

/**
 * Contains response data for the update operation.
 */
export type GalleriesUpdateResponse = Gallery & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Gallery;
  };
};

/**
 * Contains response data for the get operation.
 */
export type GalleriesGetResponse = Gallery & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Gallery;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type GalleriesListByResourceGroupResponse = GalleryList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type GalleriesListResponse = GalleryList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryList;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type GalleriesListByResourceGroupNextResponse = GalleryList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type GalleriesListNextResponse = GalleryList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryList;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GalleryImagesCreateOrUpdateResponse = GalleryImage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryImage;
  };
};

/**
 * Contains response data for the update operation.
 */
export type GalleryImagesUpdateResponse = GalleryImage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryImage;
  };
};

/**
 * Contains response data for the get operation.
 */
export type GalleryImagesGetResponse = GalleryImage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryImage;
  };
};

/**
 * Contains response data for the listByGallery operation.
 */
export type GalleryImagesListByGalleryResponse = GalleryImageList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryImageList;
  };
};

/**
 * Contains response data for the listByGalleryNext operation.
 */
export type GalleryImagesListByGalleryNextResponse = GalleryImageList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryImageList;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GalleryImageVersionsCreateOrUpdateResponse = GalleryImageVersion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryImageVersion;
  };
};

/**
 * Contains response data for the update operation.
 */
export type GalleryImageVersionsUpdateResponse = GalleryImageVersion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryImageVersion;
  };
};

/**
 * Optional parameters.
 */
export interface GalleryImageVersionsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The expand expression to apply on the operation.
   */
  expand?: ReplicationStatusTypes;
}

/**
 * Contains response data for the get operation.
 */
export type GalleryImageVersionsGetResponse = GalleryImageVersion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryImageVersion;
  };
};

/**
 * Contains response data for the listByGalleryImage operation.
 */
export type GalleryImageVersionsListByGalleryImageResponse = GalleryImageVersionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryImageVersionList;
  };
};

/**
 * Contains response data for the listByGalleryImageNext operation.
 */
export type GalleryImageVersionsListByGalleryImageNextResponse = GalleryImageVersionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryImageVersionList;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GalleryApplicationsCreateOrUpdateResponse = GalleryApplication & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryApplication;
  };
};

/**
 * Contains response data for the update operation.
 */
export type GalleryApplicationsUpdateResponse = GalleryApplication & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryApplication;
  };
};

/**
 * Contains response data for the get operation.
 */
export type GalleryApplicationsGetResponse = GalleryApplication & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryApplication;
  };
};

/**
 * Contains response data for the listByGallery operation.
 */
export type GalleryApplicationsListByGalleryResponse = GalleryApplicationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryApplicationList;
  };
};

/**
 * Contains response data for the listByGalleryNext operation.
 */
export type GalleryApplicationsListByGalleryNextResponse = GalleryApplicationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryApplicationList;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GalleryApplicationVersionsCreateOrUpdateResponse = GalleryApplicationVersion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryApplicationVersion;
  };
};

/**
 * Contains response data for the update operation.
 */
export type GalleryApplicationVersionsUpdateResponse = GalleryApplicationVersion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryApplicationVersion;
  };
};

/**
 * Optional parameters.
 */
export interface GalleryApplicationVersionsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The expand expression to apply on the operation.
   */
  expand?: ReplicationStatusTypes;
}

/**
 * Contains response data for the get operation.
 */
export type GalleryApplicationVersionsGetResponse = GalleryApplicationVersion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryApplicationVersion;
  };
};

/**
 * Contains response data for the listByGalleryApplication operation.
 */
export type GalleryApplicationVersionsListByGalleryApplicationResponse = GalleryApplicationVersionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryApplicationVersionList;
  };
};

/**
 * Contains response data for the listByGalleryApplicationNext operation.
 */
export type GalleryApplicationVersionsListByGalleryApplicationNextResponse = GalleryApplicationVersionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GalleryApplicationVersionList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ContainerServicesListResponse = ContainerServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContainerServiceListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ContainerServicesCreateOrUpdateResponse = ContainerService & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContainerService;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ContainerServicesGetResponse = ContainerService & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContainerService;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ContainerServicesListByResourceGroupResponse = ContainerServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContainerServiceListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ContainerServicesListNextResponse = ContainerServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContainerServiceListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ContainerServicesListByResourceGroupNextResponse = ContainerServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContainerServiceListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ComputeManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
