/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  VirtualMachine,
  VirtualMachineSize,
  VirtualMachinesCaptureResponse,
  VirtualMachinesCreateOrUpdateResponse,
  VirtualMachinesUpdateResponse,
  VirtualMachinesGetResponse,
  VirtualMachinesInstanceViewResponse,
  VirtualMachinesRetrieveBootDiagnosticsDataResponse,
  VirtualMachinesAssessPatchesResponse,
  VirtualMachinesInstallPatchesResponse,
  VirtualMachinesRunCommandResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a VirtualMachines. */
export interface VirtualMachines {
  /**
   * Gets all the virtual machines under the specified subscription for the specified location.
   *
   */
  listByLocation(): PagedAsyncIterableIterator<VirtualMachine>;
  /**
   * Lists all of the virtual machines in the specified resource group. Use the nextLink property in the
   * response to get the next page of virtual machines.
   *
   */
  list(): PagedAsyncIterableIterator<VirtualMachine>;
  /**
   * Lists all of the virtual machines in the specified subscription. Use the nextLink property in the
   * response to get the next page of virtual machines.
   *
   */
  listAll(): PagedAsyncIterableIterator<VirtualMachine>;
  /**
   * Lists all available virtual machine sizes to which the specified virtual machine can be resized.
   *
   */
  listAvailableSizes(): PagedAsyncIterableIterator<VirtualMachineSize>;
  /**
   * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used to
   * create similar VMs.
   *
   */
  beginCapture(): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesCaptureResponse>,
      VirtualMachinesCaptureResponse
    >
  >;
  /**
   * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used to
   * create similar VMs.
   *
   */
  beginCaptureAndWait(): Promise<VirtualMachinesCaptureResponse>;
  /**
   * The operation to create or update a virtual machine. Please note some properties can be set only
   * during virtual machine creation.
   *
   */
  beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesCreateOrUpdateResponse>,
      VirtualMachinesCreateOrUpdateResponse
    >
  >;
  /**
   * The operation to create or update a virtual machine. Please note some properties can be set only
   * during virtual machine creation.
   *
   */
  beginCreateOrUpdateAndWait(): Promise<VirtualMachinesCreateOrUpdateResponse>;
  /**
   * The operation to update a virtual machine.
   *
   */
  beginUpdate(): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesUpdateResponse>,
      VirtualMachinesUpdateResponse
    >
  >;
  /**
   * The operation to update a virtual machine.
   *
   */
  beginUpdateAndWait(): Promise<VirtualMachinesUpdateResponse>;
  /**
   * The operation to delete a virtual machine.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * The operation to delete a virtual machine.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Retrieves information about the model view or the instance view of a virtual machine.
   *
   */
  get(): Promise<VirtualMachinesGetResponse>;
  /**
   * Retrieves information about the run-time state of a virtual machine.
   *
   */
  instanceView(): Promise<VirtualMachinesInstanceViewResponse>;
  /**
   * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
   * stop-deallocated before invoking this operation.
   *
   */
  beginConvertToManagedDisks(): Promise<
    PollerLike<PollOperationState<void>, void>
  >;
  /**
   * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
   * stop-deallocated before invoking this operation.
   *
   */
  beginConvertToManagedDisksAndWait(): Promise<void>;
  /**
   * Shuts down the virtual machine and releases the compute resources. You are not billed for the
   * compute resources that this virtual machine uses.
   *
   */
  beginDeallocate(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Shuts down the virtual machine and releases the compute resources. You are not billed for the
   * compute resources that this virtual machine uses.
   *
   */
  beginDeallocateAndWait(): Promise<void>;
  /**
   * Sets the OS state of the virtual machine to generalized. It is recommended to sysprep the virtual
   * machine before performing this operation. <br>For Windows, please refer to [Create a managed image
   * of a generalized VM in
   * Azure](https://docs.microsoft.com/azure/virtual-machines/windows/capture-image-resource).<br>For
   * Linux, please refer to [How to create an image of a virtual machine or
   * VHD](https://docs.microsoft.com/azure/virtual-machines/linux/capture-image).
   *
   */
  generalize(): Promise<void>;
  /**
   * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with the
   * same provisioned resources. You are still charged for this virtual machine.
   *
   */
  beginPowerOff(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with the
   * same provisioned resources. You are still charged for this virtual machine.
   *
   */
  beginPowerOffAndWait(): Promise<void>;
  /**
   * The operation to reapply a virtual machine's state.
   *
   */
  beginReapply(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * The operation to reapply a virtual machine's state.
   *
   */
  beginReapplyAndWait(): Promise<void>;
  /**
   * The operation to restart a virtual machine.
   *
   */
  beginRestart(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * The operation to restart a virtual machine.
   *
   */
  beginRestartAndWait(): Promise<void>;
  /**
   * The operation to start a virtual machine.
   *
   */
  beginStart(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * The operation to start a virtual machine.
   *
   */
  beginStartAndWait(): Promise<void>;
  /**
   * Shuts down the virtual machine, moves it to a new node, and powers it back on.
   *
   */
  beginRedeploy(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Shuts down the virtual machine, moves it to a new node, and powers it back on.
   *
   */
  beginRedeployAndWait(): Promise<void>;
  /**
   * Reimages the virtual machine which has an ephemeral OS disk back to its initial state.
   *
   */
  beginReimage(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Reimages the virtual machine which has an ephemeral OS disk back to its initial state.
   *
   */
  beginReimageAndWait(): Promise<void>;
  /**
   * The operation to retrieve SAS URIs for a virtual machine's boot diagnostic logs.
   *
   */
  retrieveBootDiagnosticsData(): Promise<
    VirtualMachinesRetrieveBootDiagnosticsDataResponse
  >;
  /**
   * The operation to perform maintenance on a virtual machine.
   *
   */
  beginPerformMaintenance(): Promise<
    PollerLike<PollOperationState<void>, void>
  >;
  /**
   * The operation to perform maintenance on a virtual machine.
   *
   */
  beginPerformMaintenanceAndWait(): Promise<void>;
  /**
   * The operation to simulate the eviction of spot virtual machine.
   *
   */
  simulateEviction(): Promise<void>;
  /**
   * Assess patches on the VM.
   *
   */
  beginAssessPatches(): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesAssessPatchesResponse>,
      VirtualMachinesAssessPatchesResponse
    >
  >;
  /**
   * Assess patches on the VM.
   *
   */
  beginAssessPatchesAndWait(): Promise<VirtualMachinesAssessPatchesResponse>;
  /**
   * Installs patches on the VM.
   *
   */
  beginInstallPatches(): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesInstallPatchesResponse>,
      VirtualMachinesInstallPatchesResponse
    >
  >;
  /**
   * Installs patches on the VM.
   *
   */
  beginInstallPatchesAndWait(): Promise<VirtualMachinesInstallPatchesResponse>;
  /**
   * Run command on the VM.
   *
   */
  beginRunCommand(): Promise<
    PollerLike<
      PollOperationState<VirtualMachinesRunCommandResponse>,
      VirtualMachinesRunCommandResponse
    >
  >;
  /**
   * Run command on the VM.
   *
   */
  beginRunCommandAndWait(): Promise<VirtualMachinesRunCommandResponse>;
}
