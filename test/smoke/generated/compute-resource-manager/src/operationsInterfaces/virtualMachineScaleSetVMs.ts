/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  VirtualMachineScaleSetVM,
  VirtualMachineScaleSetVMsUpdateResponse,
  VirtualMachineScaleSetVMsGetResponse,
  VirtualMachineScaleSetVMsGetInstanceViewResponse,
  VirtualMachineScaleSetVMsRetrieveBootDiagnosticsDataResponse,
  VirtualMachineScaleSetVMsRunCommandResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a VirtualMachineScaleSetVMs. */
export interface VirtualMachineScaleSetVMs {
  /**
   * Gets a list of all virtual machines in a VM scale sets.
   *
   */
  list(): PagedAsyncIterableIterator<VirtualMachineScaleSetVM>;
  /**
   * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
   *
   */
  beginReimage(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
   *
   */
  beginReimageAndWait(): Promise<void>;
  /**
   * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This
   * operation is only supported for managed disks.
   *
   */
  beginReimageAll(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This
   * operation is only supported for managed disks.
   *
   */
  beginReimageAllAndWait(): Promise<void>;
  /**
   * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and
   * releases the compute resources it uses. You are not billed for the compute resources of this virtual
   * machine once it is deallocated.
   *
   */
  beginDeallocate(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and
   * releases the compute resources it uses. You are not billed for the compute resources of this virtual
   * machine once it is deallocated.
   *
   */
  beginDeallocateAndWait(): Promise<void>;
  /**
   * Updates a virtual machine of a VM scale set.
   *
   */
  beginUpdate(): Promise<
    PollerLike<
      PollOperationState<VirtualMachineScaleSetVMsUpdateResponse>,
      VirtualMachineScaleSetVMsUpdateResponse
    >
  >;
  /**
   * Updates a virtual machine of a VM scale set.
   *
   */
  beginUpdateAndWait(): Promise<VirtualMachineScaleSetVMsUpdateResponse>;
  /**
   * Deletes a virtual machine from a VM scale set.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a virtual machine from a VM scale set.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Gets a virtual machine from a VM scale set.
   *
   */
  get(): Promise<VirtualMachineScaleSetVMsGetResponse>;
  /**
   * Gets the status of a virtual machine from a VM scale set.
   *
   */
  getInstanceView(): Promise<VirtualMachineScaleSetVMsGetInstanceViewResponse>;
  /**
   * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you
   * are getting charged for the resources. Instead, use deallocate to release resources and avoid
   * charges.
   *
   */
  beginPowerOff(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you
   * are getting charged for the resources. Instead, use deallocate to release resources and avoid
   * charges.
   *
   */
  beginPowerOffAndWait(): Promise<void>;
  /**
   * Restarts a virtual machine in a VM scale set.
   *
   */
  beginRestart(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Restarts a virtual machine in a VM scale set.
   *
   */
  beginRestartAndWait(): Promise<void>;
  /**
   * Starts a virtual machine in a VM scale set.
   *
   */
  beginStart(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Starts a virtual machine in a VM scale set.
   *
   */
  beginStartAndWait(): Promise<void>;
  /**
   * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers
   * it back on.
   *
   */
  beginRedeploy(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers
   * it back on.
   *
   */
  beginRedeployAndWait(): Promise<void>;
  /**
   * The operation to retrieve SAS URIs of boot diagnostic logs for a virtual machine in a VM scale set.
   *
   */
  retrieveBootDiagnosticsData(): Promise<
    VirtualMachineScaleSetVMsRetrieveBootDiagnosticsDataResponse
  >;
  /**
   * Performs maintenance on a virtual machine in a VM scale set.
   *
   */
  beginPerformMaintenance(): Promise<
    PollerLike<PollOperationState<void>, void>
  >;
  /**
   * Performs maintenance on a virtual machine in a VM scale set.
   *
   */
  beginPerformMaintenanceAndWait(): Promise<void>;
  /**
   * The operation to simulate the eviction of spot virtual machine in a VM scale set.
   *
   */
  simulateEviction(): Promise<void>;
  /**
   * Run command on a virtual machine in a VM scale set.
   *
   */
  beginRunCommand(): Promise<
    PollerLike<
      PollOperationState<VirtualMachineScaleSetVMsRunCommandResponse>,
      VirtualMachineScaleSetVMsRunCommandResponse
    >
  >;
  /**
   * Run command on a virtual machine in a VM scale set.
   *
   */
  beginRunCommandAndWait(): Promise<
    VirtualMachineScaleSetVMsRunCommandResponse
  >;
}
