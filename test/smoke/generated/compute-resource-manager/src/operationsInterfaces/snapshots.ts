/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Snapshot,
  SnapshotsCreateOrUpdateResponse,
  SnapshotsUpdateResponse,
  SnapshotsGetResponse,
  SnapshotsGrantAccessResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Snapshots. */
export interface Snapshots {
  /**
   * Lists snapshots under a resource group.
   *
   */
  listByResourceGroup(): PagedAsyncIterableIterator<Snapshot>;
  /**
   * Lists snapshots under a subscription.
   *
   */
  list(): PagedAsyncIterableIterator<Snapshot>;
  /**
   * Creates or updates a snapshot.
   *
   */
  beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<SnapshotsCreateOrUpdateResponse>,
      SnapshotsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a snapshot.
   *
   */
  beginCreateOrUpdateAndWait(): Promise<SnapshotsCreateOrUpdateResponse>;
  /**
   * Updates (patches) a snapshot.
   *
   */
  beginUpdate(): Promise<
    PollerLike<
      PollOperationState<SnapshotsUpdateResponse>,
      SnapshotsUpdateResponse
    >
  >;
  /**
   * Updates (patches) a snapshot.
   *
   */
  beginUpdateAndWait(): Promise<SnapshotsUpdateResponse>;
  /**
   * Gets information about a snapshot.
   *
   */
  get(): Promise<SnapshotsGetResponse>;
  /**
   * Deletes a snapshot.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a snapshot.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Grants access to a snapshot.
   *
   */
  beginGrantAccess(): Promise<
    PollerLike<
      PollOperationState<SnapshotsGrantAccessResponse>,
      SnapshotsGrantAccessResponse
    >
  >;
  /**
   * Grants access to a snapshot.
   *
   */
  beginGrantAccessAndWait(): Promise<SnapshotsGrantAccessResponse>;
  /**
   * Revokes access to a snapshot.
   *
   */
  beginRevokeAccess(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Revokes access to a snapshot.
   *
   */
  beginRevokeAccessAndWait(): Promise<void>;
}
