/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  VirtualMachineScaleSet,
  VirtualMachineScaleSetSku,
  UpgradeOperationHistoricalStatusInfo,
  VirtualMachineScaleSetsCreateOrUpdateResponse,
  VirtualMachineScaleSetsUpdateResponse,
  VirtualMachineScaleSetsGetResponse,
  VirtualMachineScaleSetsGetInstanceViewResponse,
  VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a VirtualMachineScaleSets. */
export interface VirtualMachineScaleSets {
  /**
   * Gets all the VM scale sets under the specified subscription for the specified location.
   *
   */
  listByLocation(): PagedAsyncIterableIterator<VirtualMachineScaleSet>;
  /**
   * Gets a list of all VM scale sets under a resource group.
   *
   */
  list(): PagedAsyncIterableIterator<VirtualMachineScaleSet>;
  /**
   * Gets a list of all VM Scale Sets in the subscription, regardless of the associated resource group.
   * Use nextLink property in the response to get the next page of VM Scale Sets. Do this till nextLink
   * is null to fetch all the VM Scale Sets.
   *
   */
  listAll(): PagedAsyncIterableIterator<VirtualMachineScaleSet>;
  /**
   * Gets a list of SKUs available for your VM scale set, including the minimum and maximum VM instances
   * allowed for each SKU.
   *
   */
  listSkus(): PagedAsyncIterableIterator<VirtualMachineScaleSetSku>;
  /**
   * Gets list of OS upgrades on a VM scale set instance.
   *
   */
  listOSUpgradeHistory(): PagedAsyncIterableIterator<
    UpgradeOperationHistoricalStatusInfo
  >;
  /**
   * Create or update a VM scale set.
   *
   */
  beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<VirtualMachineScaleSetsCreateOrUpdateResponse>,
      VirtualMachineScaleSetsCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a VM scale set.
   *
   */
  beginCreateOrUpdateAndWait(): Promise<
    VirtualMachineScaleSetsCreateOrUpdateResponse
  >;
  /**
   * Update a VM scale set.
   *
   */
  beginUpdate(): Promise<
    PollerLike<
      PollOperationState<VirtualMachineScaleSetsUpdateResponse>,
      VirtualMachineScaleSetsUpdateResponse
    >
  >;
  /**
   * Update a VM scale set.
   *
   */
  beginUpdateAndWait(): Promise<VirtualMachineScaleSetsUpdateResponse>;
  /**
   * Deletes a VM scale set.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a VM scale set.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Display information about a virtual machine scale set.
   *
   */
  get(): Promise<VirtualMachineScaleSetsGetResponse>;
  /**
   * Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and
   * releases the compute resources. You are not billed for the compute resources that this virtual
   * machine scale set deallocates.
   *
   */
  beginDeallocate(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and
   * releases the compute resources. You are not billed for the compute resources that this virtual
   * machine scale set deallocates.
   *
   */
  beginDeallocateAndWait(): Promise<void>;
  /**
   * Deletes virtual machines in a VM scale set.
   *
   */
  beginDeleteInstances(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes virtual machines in a VM scale set.
   *
   */
  beginDeleteInstancesAndWait(): Promise<void>;
  /**
   * Gets the status of a VM scale set instance.
   *
   */
  getInstanceView(): Promise<VirtualMachineScaleSetsGetInstanceViewResponse>;
  /**
   * Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still
   * attached and you are getting charged for the resources. Instead, use deallocate to release resources
   * and avoid charges.
   *
   */
  beginPowerOff(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still
   * attached and you are getting charged for the resources. Instead, use deallocate to release resources
   * and avoid charges.
   *
   */
  beginPowerOffAndWait(): Promise<void>;
  /**
   * Restarts one or more virtual machines in a VM scale set.
   *
   */
  beginRestart(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Restarts one or more virtual machines in a VM scale set.
   *
   */
  beginRestartAndWait(): Promise<void>;
  /**
   * Starts one or more virtual machines in a VM scale set.
   *
   */
  beginStart(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Starts one or more virtual machines in a VM scale set.
   *
   */
  beginStartAndWait(): Promise<void>;
  /**
   * Shuts down all the virtual machines in the virtual machine scale set, moves them to a new node, and
   * powers them back on.
   *
   */
  beginRedeploy(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Shuts down all the virtual machines in the virtual machine scale set, moves them to a new node, and
   * powers them back on.
   *
   */
  beginRedeployAndWait(): Promise<void>;
  /**
   * Perform maintenance on one or more virtual machines in a VM scale set. Operation on instances which
   * are not eligible for perform maintenance will be failed. Please refer to best practices for more
   * details:
   * https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-maintenance-notifications
   *
   */
  beginPerformMaintenance(): Promise<
    PollerLike<PollOperationState<void>, void>
  >;
  /**
   * Perform maintenance on one or more virtual machines in a VM scale set. Operation on instances which
   * are not eligible for perform maintenance will be failed. Please refer to best practices for more
   * details:
   * https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-maintenance-notifications
   *
   */
  beginPerformMaintenanceAndWait(): Promise<void>;
  /**
   * Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.
   *
   */
  beginUpdateInstances(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.
   *
   */
  beginUpdateInstancesAndWait(): Promise<void>;
  /**
   * Reimages (upgrade the operating system) one or more virtual machines in a VM scale set which don't
   * have a ephemeral OS disk, for virtual machines who have a ephemeral OS disk the virtual machine is
   * reset to initial state.
   *
   */
  beginReimage(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Reimages (upgrade the operating system) one or more virtual machines in a VM scale set which don't
   * have a ephemeral OS disk, for virtual machines who have a ephemeral OS disk the virtual machine is
   * reset to initial state.
   *
   */
  beginReimageAndWait(): Promise<void>;
  /**
   * Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This
   * operation is only supported for managed disks.
   *
   */
  beginReimageAll(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This
   * operation is only supported for managed disks.
   *
   */
  beginReimageAllAndWait(): Promise<void>;
  /**
   * Manual platform update domain walk to update virtual machines in a service fabric virtual machine
   * scale set.
   *
   */
  forceRecoveryServiceFabricPlatformUpdateDomainWalk(): Promise<
    VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse
  >;
  /**
   * Converts SinglePlacementGroup property to false for a existing virtual machine scale set.
   *
   */
  convertToSinglePlacementGroup(): Promise<void>;
  /**
   * Changes ServiceState property for a given service
   *
   */
  beginSetOrchestrationServiceState(): Promise<
    PollerLike<PollOperationState<void>, void>
  >;
  /**
   * Changes ServiceState property for a given service
   *
   */
  beginSetOrchestrationServiceStateAndWait(): Promise<void>;
}
