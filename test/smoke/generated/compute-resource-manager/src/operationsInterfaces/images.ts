/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Image,
  ImagesCreateOrUpdateResponse,
  ImageUpdate,
  ImagesUpdateResponse,
  ImagesGetOptionalParams,
  ImagesGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Images. */
export interface Images {
  /**
   * Gets the list of images under a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Image>;
  /**
   * Gets the list of Images in the subscription. Use nextLink property in the response to get the next
   * page of Images. Do this till nextLink is null to fetch all the Images.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): PagedAsyncIterableIterator<Image>;
  /**
   * Create or update an image.
   * @param resourceGroupName The name of the resource group.
   * @param imageName The name of the image.
   * @param parameters Parameters supplied to the Create Image operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    imageName: string,
    parameters: Image,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<
      PollOperationState<ImagesCreateOrUpdateResponse>,
      ImagesCreateOrUpdateResponse
    >
  >;
  /**
   * Update an image.
   * @param resourceGroupName The name of the resource group.
   * @param imageName The name of the image.
   * @param parameters Parameters supplied to the Update Image operation.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    imageName: string,
    parameters: ImageUpdate,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<PollOperationState<ImagesUpdateResponse>, ImagesUpdateResponse>
  >;
  /**
   * Deletes an Image.
   * @param resourceGroupName The name of the resource group.
   * @param imageName The name of the image.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    imageName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<PollOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Gets an image.
   * @param resourceGroupName The name of the resource group.
   * @param imageName The name of the image.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    imageName: string,
    options?: ImagesGetOptionalParams
  ): Promise<ImagesGetResponse>;
}
