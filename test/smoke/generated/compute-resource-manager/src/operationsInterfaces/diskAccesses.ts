/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  DiskAccess,
  PrivateEndpointConnection,
  DiskAccessesCreateOrUpdateResponse,
  DiskAccessesUpdateResponse,
  DiskAccessesGetResponse,
  DiskAccessesGetPrivateLinkResourcesResponse,
  DiskAccessesUpdateAPrivateEndpointConnectionResponse,
  DiskAccessesGetAPrivateEndpointConnectionResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a DiskAccesses. */
export interface DiskAccesses {
  /**
   * Lists all the disk access resources under a resource group.
   *
   */
  listByResourceGroup(): PagedAsyncIterableIterator<DiskAccess>;
  /**
   * Lists all the disk access resources under a subscription.
   *
   */
  list(): PagedAsyncIterableIterator<DiskAccess>;
  /**
   * List information about private endpoint connections under a disk access resource
   *
   */
  listPrivateEndpointConnections(): PagedAsyncIterableIterator<
    PrivateEndpointConnection
  >;
  /**
   * Creates or updates a disk access resource
   *
   */
  beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<DiskAccessesCreateOrUpdateResponse>,
      DiskAccessesCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a disk access resource
   *
   */
  beginCreateOrUpdateAndWait(): Promise<DiskAccessesCreateOrUpdateResponse>;
  /**
   * Updates (patches) a disk access resource.
   *
   */
  beginUpdate(): Promise<
    PollerLike<
      PollOperationState<DiskAccessesUpdateResponse>,
      DiskAccessesUpdateResponse
    >
  >;
  /**
   * Updates (patches) a disk access resource.
   *
   */
  beginUpdateAndWait(): Promise<DiskAccessesUpdateResponse>;
  /**
   * Gets information about a disk access resource.
   *
   */
  get(): Promise<DiskAccessesGetResponse>;
  /**
   * Deletes a disk access resource.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a disk access resource.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Gets the private link resources possible under disk access resource
   *
   */
  getPrivateLinkResources(): Promise<
    DiskAccessesGetPrivateLinkResourcesResponse
  >;
  /**
   * Approve or reject a private endpoint connection under disk access resource, this can't be used to
   * create a new private endpoint connection.
   *
   */
  beginUpdateAPrivateEndpointConnection(): Promise<
    PollerLike<
      PollOperationState<DiskAccessesUpdateAPrivateEndpointConnectionResponse>,
      DiskAccessesUpdateAPrivateEndpointConnectionResponse
    >
  >;
  /**
   * Approve or reject a private endpoint connection under disk access resource, this can't be used to
   * create a new private endpoint connection.
   *
   */
  beginUpdateAPrivateEndpointConnectionAndWait(): Promise<
    DiskAccessesUpdateAPrivateEndpointConnectionResponse
  >;
  /**
   * Gets information about a private endpoint connection under a disk access resource.
   *
   */
  getAPrivateEndpointConnection(): Promise<
    DiskAccessesGetAPrivateEndpointConnectionResponse
  >;
  /**
   * Deletes a private endpoint connection under a disk access resource.
   *
   */
  beginDeleteAPrivateEndpointConnection(): Promise<
    PollerLike<PollOperationState<void>, void>
  >;
  /**
   * Deletes a private endpoint connection under a disk access resource.
   *
   */
  beginDeleteAPrivateEndpointConnectionAndWait(): Promise<void>;
}
