/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Disk,
  DisksCreateOrUpdateResponse,
  DisksUpdateResponse,
  DisksGetResponse,
  DisksGrantAccessResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Disks. */
export interface Disks {
  /**
   * Lists all the disks under a resource group.
   *
   */
  listByResourceGroup(): PagedAsyncIterableIterator<Disk>;
  /**
   * Lists all the disks under a subscription.
   *
   */
  list(): PagedAsyncIterableIterator<Disk>;
  /**
   * Creates or updates a disk.
   *
   */
  beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<DisksCreateOrUpdateResponse>,
      DisksCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a disk.
   *
   */
  beginCreateOrUpdateAndWait(): Promise<DisksCreateOrUpdateResponse>;
  /**
   * Updates (patches) a disk.
   *
   */
  beginUpdate(): Promise<
    PollerLike<PollOperationState<DisksUpdateResponse>, DisksUpdateResponse>
  >;
  /**
   * Updates (patches) a disk.
   *
   */
  beginUpdateAndWait(): Promise<DisksUpdateResponse>;
  /**
   * Gets information about a disk.
   *
   */
  get(): Promise<DisksGetResponse>;
  /**
   * Deletes a disk.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a disk.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Grants access to a disk.
   *
   */
  beginGrantAccess(): Promise<
    PollerLike<
      PollOperationState<DisksGrantAccessResponse>,
      DisksGrantAccessResponse
    >
  >;
  /**
   * Grants access to a disk.
   *
   */
  beginGrantAccessAndWait(): Promise<DisksGrantAccessResponse>;
  /**
   * Revokes access to a disk.
   *
   */
  beginRevokeAccess(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Revokes access to a disk.
   *
   */
  beginRevokeAccessAndWait(): Promise<void>;
}
