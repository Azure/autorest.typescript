/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  CloudService,
  CloudServicesCreateOrUpdateResponse,
  CloudServicesUpdateResponse,
  CloudServicesGetResponse,
  CloudServicesGetInstanceViewResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a CloudServices. */
export interface CloudServices {
  /**
   * Gets a list of all cloud services in the subscription, regardless of the associated resource group.
   * Use nextLink property in the response to get the next page of Cloud Services. Do this till nextLink
   * is null to fetch all the Cloud Services.
   *
   */
  listAll(): PagedAsyncIterableIterator<CloudService>;
  /**
   * Gets a list of all cloud services under a resource group. Use nextLink property in the response to
   * get the next page of Cloud Services. Do this till nextLink is null to fetch all the Cloud Services.
   *
   */
  list(): PagedAsyncIterableIterator<CloudService>;
  /**
   * Create or update a cloud service. Please note some properties can be set only during cloud service
   * creation.
   *
   */
  beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<CloudServicesCreateOrUpdateResponse>,
      CloudServicesCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a cloud service. Please note some properties can be set only during cloud service
   * creation.
   *
   */
  beginCreateOrUpdateAndWait(): Promise<CloudServicesCreateOrUpdateResponse>;
  /**
   * Update a cloud service.
   *
   */
  beginUpdate(): Promise<
    PollerLike<
      PollOperationState<CloudServicesUpdateResponse>,
      CloudServicesUpdateResponse
    >
  >;
  /**
   * Update a cloud service.
   *
   */
  beginUpdateAndWait(): Promise<CloudServicesUpdateResponse>;
  /**
   * Deletes a cloud service.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a cloud service.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Display information about a cloud service.
   *
   */
  get(): Promise<CloudServicesGetResponse>;
  /**
   * Gets the status of a cloud service.
   *
   */
  getInstanceView(): Promise<CloudServicesGetInstanceViewResponse>;
  /**
   * Starts the cloud service.
   *
   */
  beginStart(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Starts the cloud service.
   *
   */
  beginStartAndWait(): Promise<void>;
  /**
   * Power off the cloud service. Note that resources are still attached and you are getting charged for
   * the resources.
   *
   */
  beginPowerOff(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Power off the cloud service. Note that resources are still attached and you are getting charged for
   * the resources.
   *
   */
  beginPowerOffAndWait(): Promise<void>;
  /**
   * Restarts one or more role instances in a cloud service.
   *
   */
  beginRestart(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Restarts one or more role instances in a cloud service.
   *
   */
  beginRestartAndWait(): Promise<void>;
  /**
   * Reimage asynchronous operation reinstalls the operating system on instances of web roles or worker
   * roles.
   *
   */
  beginReimage(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Reimage asynchronous operation reinstalls the operating system on instances of web roles or worker
   * roles.
   *
   */
  beginReimageAndWait(): Promise<void>;
  /**
   * Rebuild Role Instances reinstalls the operating system on instances of web roles or worker roles and
   * initializes the storage resources that are used by them. If you do not want to initialize storage
   * resources, you can use Reimage Role Instances.
   *
   */
  beginRebuild(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Rebuild Role Instances reinstalls the operating system on instances of web roles or worker roles and
   * initializes the storage resources that are used by them. If you do not want to initialize storage
   * resources, you can use Reimage Role Instances.
   *
   */
  beginRebuildAndWait(): Promise<void>;
  /**
   * Deletes role instances in a cloud service.
   *
   */
  beginDeleteInstances(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes role instances in a cloud service.
   *
   */
  beginDeleteInstancesAndWait(): Promise<void>;
}
