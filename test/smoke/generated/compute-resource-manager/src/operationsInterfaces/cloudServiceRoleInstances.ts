/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  RoleInstance,
  CloudServiceRoleInstancesGetResponse,
  CloudServiceRoleInstancesGetInstanceViewResponse,
  CloudServiceRoleInstancesGetRemoteDesktopFileResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a CloudServiceRoleInstances. */
export interface CloudServiceRoleInstances {
  /**
   * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get
   * the next page of role instances. Do this till nextLink is null to fetch all the role instances.
   *
   */
  list(): PagedAsyncIterableIterator<RoleInstance>;
  /**
   * Deletes a role instance from a cloud service.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a role instance from a cloud service.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Gets a role instance from a cloud service.
   *
   */
  get(): Promise<CloudServiceRoleInstancesGetResponse>;
  /**
   * Retrieves information about the run-time state of a role instance in a cloud service.
   *
   */
  getInstanceView(): Promise<CloudServiceRoleInstancesGetInstanceViewResponse>;
  /**
   * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud
   * service.
   *
   */
  beginRestart(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud
   * service.
   *
   */
  beginRestartAndWait(): Promise<void>;
  /**
   * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web
   * roles or worker roles.
   *
   */
  beginReimage(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web
   * roles or worker roles.
   *
   */
  beginReimageAndWait(): Promise<void>;
  /**
   * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web
   * roles or worker roles and initializes the storage resources that are used by them. If you do not
   * want to initialize storage resources, you can use Reimage Role Instance.
   *
   */
  beginRebuild(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web
   * roles or worker roles and initializes the storage resources that are used by them. If you do not
   * want to initialize storage resources, you can use Reimage Role Instance.
   *
   */
  beginRebuildAndWait(): Promise<void>;
  /**
   * Gets a remote desktop file for a role instance in a cloud service.
   *
   */
  getRemoteDesktopFile(): Promise<
    CloudServiceRoleInstancesGetRemoteDesktopFileResponse
  >;
}
