/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  DiskEncryptionSet,
  DiskEncryptionSetsCreateOrUpdateResponse,
  DiskEncryptionSetsUpdateResponse,
  DiskEncryptionSetsGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a DiskEncryptionSets. */
export interface DiskEncryptionSets {
  /**
   * Lists all the disk encryption sets under a resource group.
   *
   */
  listByResourceGroup(): PagedAsyncIterableIterator<DiskEncryptionSet>;
  /**
   * Lists all the disk encryption sets under a subscription.
   *
   */
  list(): PagedAsyncIterableIterator<DiskEncryptionSet>;
  /**
   * Lists all resources that are encrypted with this disk encryption set.
   *
   */
  listAssociatedResources(): PagedAsyncIterableIterator<string>;
  /**
   * Creates or updates a disk encryption set
   *
   */
  beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<DiskEncryptionSetsCreateOrUpdateResponse>,
      DiskEncryptionSetsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a disk encryption set
   *
   */
  beginCreateOrUpdateAndWait(): Promise<
    DiskEncryptionSetsCreateOrUpdateResponse
  >;
  /**
   * Updates (patches) a disk encryption set.
   *
   */
  beginUpdate(): Promise<
    PollerLike<
      PollOperationState<DiskEncryptionSetsUpdateResponse>,
      DiskEncryptionSetsUpdateResponse
    >
  >;
  /**
   * Updates (patches) a disk encryption set.
   *
   */
  beginUpdateAndWait(): Promise<DiskEncryptionSetsUpdateResponse>;
  /**
   * Gets information about a disk encryption set.
   *
   */
  get(): Promise<DiskEncryptionSetsGetResponse>;
  /**
   * Deletes a disk encryption set.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a disk encryption set.
   *
   */
  beginDeleteAndWait(): Promise<void>;
}
