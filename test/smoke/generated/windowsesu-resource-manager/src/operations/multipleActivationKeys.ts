/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { Windowsesu } from "../windowsesu";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  MultipleActivationKeysListResponse,
  MultipleActivationKeysListByResourceGroupResponse,
  MultipleActivationKeysGetResponse,
  MultipleActivationKey,
  MultipleActivationKeysCreateResponse,
  MultipleActivationKeyUpdate,
  MultipleActivationKeysUpdateResponse,
  MultipleActivationKeysListNextResponse,
  MultipleActivationKeysListByResourceGroupNextResponse
} from "../models";

/**
 * Class representing a MultipleActivationKeys.
 */
export class MultipleActivationKeys {
  private readonly client: Windowsesu;

  /**
   * Initialize a new instance of the class MultipleActivationKeys class.
   * @param client Reference to the service client
   */
  constructor(client: Windowsesu) {
    this.client = client;
  }

  /**
   * List all Multiple Activation Keys (MAK) created for a subscription.
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<MultipleActivationKeysListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<MultipleActivationKeysListResponse>;
  }

  /**
   * List all Multiple Activation Keys (MAK) in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<MultipleActivationKeysListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<MultipleActivationKeysListByResourceGroupResponse>;
  }

  /**
   * Get a MAK key.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param multipleActivationKeyName The name of the MAK key.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    multipleActivationKeyName: string,
    options?: coreHttp.OperationOptions
  ): Promise<MultipleActivationKeysGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        multipleActivationKeyName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<MultipleActivationKeysGetResponse>;
  }

  /**
   * Create a MAK key.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param multipleActivationKeyName The name of the MAK key.
   * @param multipleActivationKey Details of the MAK key.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    multipleActivationKeyName: string,
    multipleActivationKey: MultipleActivationKey,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<MultipleActivationKeysCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      multipleActivationKeyName,
      multipleActivationKey,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        MultipleActivationKeysCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Update a MAK key.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param multipleActivationKeyName The name of the MAK key.
   * @param multipleActivationKey Details of the MAK key.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    multipleActivationKeyName: string,
    multipleActivationKey: MultipleActivationKeyUpdate,
    options?: coreHttp.OperationOptions
  ): Promise<MultipleActivationKeysUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        multipleActivationKeyName,
        multipleActivationKey,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<MultipleActivationKeysUpdateResponse>;
  }

  /**
   * Delete a MAK key.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param multipleActivationKeyName The name of the MAK key.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    multipleActivationKeyName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        multipleActivationKeyName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<MultipleActivationKeysListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<MultipleActivationKeysListNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<MultipleActivationKeysListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<MultipleActivationKeysListByResourceGroupNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.WindowsESU/multipleActivationKeys",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MultipleActivationKeyList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU/multipleActivationKeys",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MultipleActivationKeyList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU/multipleActivationKeys/{multipleActivationKeyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MultipleActivationKey
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.multipleActivationKeyName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU/multipleActivationKeys/{multipleActivationKeyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MultipleActivationKey
    },
    201: {
      bodyMapper: Mappers.MultipleActivationKey
    },
    202: {
      bodyMapper: Mappers.MultipleActivationKey
    },
    204: {
      bodyMapper: Mappers.MultipleActivationKey
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.multipleActivationKey,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.multipleActivationKeyName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU/multipleActivationKeys/{multipleActivationKeyName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MultipleActivationKey
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.multipleActivationKey1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.multipleActivationKeyName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU/multipleActivationKeys/{multipleActivationKeyName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.multipleActivationKeyName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MultipleActivationKeyList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MultipleActivationKeyList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink1
  ],
  serializer
};
