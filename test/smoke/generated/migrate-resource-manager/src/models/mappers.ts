/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const CheckNameAvailabilityParameters: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Migrate/projects",
        serializedName: "type",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Available", "Invalid", "AlreadyExists"]
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreHttp.CompositeMapper = {
  serializedName: "CloudError",
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreHttp.CompositeMapper = {
  serializedName: "CloudErrorBody",
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudErrorBody" } }
        }
      }
    }
  }
};

export const AssessmentOptionsResultList: coreHttp.CompositeMapper = {
  serializedName: "AssessmentOptionsResultList",
  type: {
    name: "Composite",
    className: "AssessmentOptionsResultList",
    modelProperties: {
      vmFamilies: {
        serializedName: "vmFamilies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VmFamily" } }
        }
      },
      reservedInstanceVmFamilies: {
        serializedName: "reservedInstanceVmFamilies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "AssessmentOptionsResultListReservedInstanceVmFamiliesItem"
          }
        }
      }
    }
  }
};

export const VmFamily: coreHttp.CompositeMapper = {
  serializedName: "VmFamily",
  type: {
    name: "Composite",
    className: "VmFamily",
    modelProperties: {
      familyName: {
        serializedName: "familyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetLocations: {
        serializedName: "targetLocations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "VmFamilyTargetLocationsItem"
          }
        }
      },
      category: {
        serializedName: "category",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "VmFamilyCategoryItem"
          }
        }
      }
    }
  }
};

export const ProjectResultList: coreHttp.CompositeMapper = {
  serializedName: "ProjectResultList",
  type: {
    name: "Composite",
    className: "ProjectResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Project" } }
        }
      }
    }
  }
};

export const Project: coreHttp.CompositeMapper = {
  serializedName: "Project",
  type: {
    name: "Composite",
    className: "Project",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "any"
        }
      },
      createdTimestamp: {
        serializedName: "properties.createdTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedTimestamp: {
        serializedName: "properties.updatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      discoveryStatus: {
        serializedName: "properties.discoveryStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customerWorkspaceId: {
        serializedName: "properties.customerWorkspaceId",
        type: {
          name: "String"
        }
      },
      customerWorkspaceLocation: {
        serializedName: "properties.customerWorkspaceLocation",
        type: {
          name: "String"
        }
      },
      lastDiscoveryTimestamp: {
        serializedName: "properties.lastDiscoveryTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastDiscoverySessionId: {
        serializedName: "properties.lastDiscoverySessionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      numberOfGroups: {
        serializedName: "properties.numberOfGroups",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfMachines: {
        serializedName: "properties.numberOfMachines",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfAssessments: {
        serializedName: "properties.numberOfAssessments",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastAssessmentTimestamp: {
        serializedName: "properties.lastAssessmentTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectKey: coreHttp.CompositeMapper = {
  serializedName: "ProjectKey",
  type: {
    name: "Composite",
    className: "ProjectKey",
    modelProperties: {
      workspaceId: {
        serializedName: "workspaceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      workspaceKey: {
        serializedName: "workspaceKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MachineResultList: coreHttp.CompositeMapper = {
  serializedName: "MachineResultList",
  type: {
    name: "Composite",
    className: "MachineResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Machine" } }
        }
      }
    }
  }
};

export const Machine: coreHttp.CompositeMapper = {
  serializedName: "Machine",
  type: {
    name: "Composite",
    className: "Machine",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bootType: {
        serializedName: "properties.bootType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datacenterContainer: {
        serializedName: "properties.datacenterContainer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datacenterManagementServer: {
        serializedName: "properties.datacenterManagementServer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datacenterMachineId: {
        serializedName: "properties.datacenterMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datacenterManagementServerId: {
        serializedName: "properties.datacenterManagementServerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      megabytesOfMemory: {
        serializedName: "properties.megabytesOfMemory",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfCores: {
        serializedName: "properties.numberOfCores",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      operatingSystem: {
        serializedName: "properties.operatingSystem",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      groups: {
        serializedName: "properties.groups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MachinePropertiesGroupsItem"
          }
        }
      },
      createdTimestamp: {
        serializedName: "properties.createdTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedTimestamp: {
        serializedName: "properties.updatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      discoveredTimestamp: {
        serializedName: "properties.discoveredTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      disks: {
        serializedName: "properties.disks",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "Disk" } }
        }
      },
      networkAdapters: {
        serializedName: "properties.networkAdapters",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "NetworkAdapter" } }
        }
      }
    }
  }
};

export const Disk: coreHttp.CompositeMapper = {
  serializedName: "Disk",
  type: {
    name: "Composite",
    className: "Disk",
    modelProperties: {
      gigabytesAllocated: {
        serializedName: "gigabytesAllocated",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      gigabytesConsumed: {
        serializedName: "gigabytesConsumed",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NetworkAdapter: coreHttp.CompositeMapper = {
  serializedName: "NetworkAdapter",
  type: {
    name: "Composite",
    className: "NetworkAdapter",
    modelProperties: {
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "NetworkAdapterIpAddressesItem"
          }
        }
      }
    }
  }
};

export const GroupResultList: coreHttp.CompositeMapper = {
  serializedName: "GroupResultList",
  type: {
    name: "Composite",
    className: "GroupResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Group" } }
        }
      }
    }
  }
};

export const Group: coreHttp.CompositeMapper = {
  serializedName: "Group",
  type: {
    name: "Composite",
    className: "Group",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      machines: {
        serializedName: "properties.machines",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "GroupPropertiesMachinesItem"
          }
        }
      },
      assessments: {
        serializedName: "properties.assessments",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "GroupPropertiesAssessmentsItem"
          }
        }
      },
      createdTimestamp: {
        serializedName: "properties.createdTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedTimestamp: {
        serializedName: "properties.updatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AssessmentResultList: coreHttp.CompositeMapper = {
  serializedName: "AssessmentResultList",
  type: {
    name: "Composite",
    className: "AssessmentResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Assessment" } }
        }
      }
    }
  }
};

export const Assessment: coreHttp.CompositeMapper = {
  serializedName: "Assessment",
  type: {
    name: "Composite",
    className: "Assessment",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azureLocation: {
        serializedName: "properties.azureLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      azureOfferCode: {
        serializedName: "properties.azureOfferCode",
        required: true,
        type: {
          name: "String"
        }
      },
      azurePricingTier: {
        serializedName: "properties.azurePricingTier",
        required: true,
        type: {
          name: "String"
        }
      },
      azureStorageRedundancy: {
        serializedName: "properties.azureStorageRedundancy",
        required: true,
        type: {
          name: "String"
        }
      },
      scalingFactor: {
        serializedName: "properties.scalingFactor",
        required: true,
        type: {
          name: "Number"
        }
      },
      percentile: {
        serializedName: "properties.percentile",
        required: true,
        type: {
          name: "String"
        }
      },
      timeRange: {
        serializedName: "properties.timeRange",
        required: true,
        type: {
          name: "String"
        }
      },
      stage: {
        serializedName: "properties.stage",
        required: true,
        type: {
          name: "String"
        }
      },
      currency: {
        serializedName: "properties.currency",
        required: true,
        type: {
          name: "String"
        }
      },
      azureHybridUseBenefit: {
        serializedName: "properties.azureHybridUseBenefit",
        required: true,
        type: {
          name: "String"
        }
      },
      discountPercentage: {
        serializedName: "properties.discountPercentage",
        required: true,
        type: {
          name: "Number"
        }
      },
      confidenceRatingInPercentage: {
        serializedName: "properties.confidenceRatingInPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      sizingCriterion: {
        serializedName: "properties.sizingCriterion",
        required: true,
        type: {
          name: "String"
        }
      },
      pricesTimestamp: {
        serializedName: "properties.pricesTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      createdTimestamp: {
        serializedName: "properties.createdTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedTimestamp: {
        serializedName: "properties.updatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      monthlyComputeCost: {
        serializedName: "properties.monthlyComputeCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      monthlyBandwidthCost: {
        serializedName: "properties.monthlyBandwidthCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      monthlyStorageCost: {
        serializedName: "properties.monthlyStorageCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      numberOfMachines: {
        serializedName: "properties.numberOfMachines",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DownloadUrl: coreHttp.CompositeMapper = {
  serializedName: "DownloadUrl",
  type: {
    name: "Composite",
    className: "DownloadUrl",
    modelProperties: {
      assessmentReportUrl: {
        serializedName: "assessmentReportUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expirationTime: {
        serializedName: "expirationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AssessedMachineResultList: coreHttp.CompositeMapper = {
  serializedName: "AssessedMachineResultList",
  type: {
    name: "Composite",
    className: "AssessedMachineResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "AssessedMachine" } }
        }
      }
    }
  }
};

export const AssessedMachine: coreHttp.CompositeMapper = {
  serializedName: "AssessedMachine",
  type: {
    name: "Composite",
    className: "AssessedMachine",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      groups: {
        serializedName: "properties.groups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AssessedMachinePropertiesGroupsItem"
          }
        }
      },
      discoveredTimestamp: {
        serializedName: "properties.discoveredTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      bootType: {
        serializedName: "properties.bootType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datacenterContainer: {
        serializedName: "properties.datacenterContainer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datacenterManagementServer: {
        serializedName: "properties.datacenterManagementServer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datacenterMachineId: {
        serializedName: "properties.datacenterMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datacenterManagementServerId: {
        serializedName: "properties.datacenterManagementServerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      megabytesOfMemory: {
        serializedName: "properties.megabytesOfMemory",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfCores: {
        serializedName: "properties.numberOfCores",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      operatingSystem: {
        serializedName: "properties.operatingSystem",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      monthlyBandwidthCost: {
        serializedName: "properties.monthlyBandwidthCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      monthlyStorageCost: {
        serializedName: "properties.monthlyStorageCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      disks: {
        serializedName: "properties.disks",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "AssessedDisk" } }
        }
      },
      networkAdapters: {
        serializedName: "properties.networkAdapters",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "AssessedNetworkAdapter" }
          }
        }
      },
      recommendedSize: {
        serializedName: "properties.recommendedSize",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      numberOfCoresForRecommendedSize: {
        serializedName: "properties.numberOfCoresForRecommendedSize",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      megabytesOfMemoryForRecommendedSize: {
        serializedName: "properties.megabytesOfMemoryForRecommendedSize",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      monthlyComputeCostForRecommendedSize: {
        serializedName: "properties.monthlyComputeCostForRecommendedSize",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      percentageCoresUtilization: {
        serializedName: "properties.percentageCoresUtilization",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      percentageMemoryUtilization: {
        serializedName: "properties.percentageMemoryUtilization",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      percentageCoresUtilizationDataPointsExpected: {
        serializedName:
          "properties.percentageCoresUtilizationDataPointsExpected",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      percentageCoresUtilizationDataPointsReceived: {
        serializedName:
          "properties.percentageCoresUtilizationDataPointsReceived",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      percentageMemoryUtilizationDataPointsExpected: {
        serializedName:
          "properties.percentageMemoryUtilizationDataPointsExpected",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      percentageMemoryUtilizationDataPointsReceived: {
        serializedName:
          "properties.percentageMemoryUtilizationDataPointsReceived",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      suitability: {
        serializedName: "properties.suitability",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      suitabilityExplanation: {
        serializedName: "properties.suitabilityExplanation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdTimestamp: {
        serializedName: "properties.createdTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedTimestamp: {
        serializedName: "properties.updatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AssessedDisk: coreHttp.CompositeMapper = {
  serializedName: "AssessedDisk",
  type: {
    name: "Composite",
    className: "AssessedDisk",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      gigabytesProvisioned: {
        serializedName: "gigabytesProvisioned",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      gigabytesConsumed: {
        serializedName: "gigabytesConsumed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      megabytesPerSecondOfRead: {
        serializedName: "megabytesPerSecondOfRead",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      megabytesPerSecondOfReadDataPointsExpected: {
        serializedName: "megabytesPerSecondOfReadDataPointsExpected",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      megabytesPerSecondOfReadDataPointsReceived: {
        serializedName: "megabytesPerSecondOfReadDataPointsReceived",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      megabytesPerSecondOfWrite: {
        serializedName: "megabytesPerSecondOfWrite",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      megabytesPerSecondOfWriteDataPointsExpected: {
        serializedName: "megabytesPerSecondOfWriteDataPointsExpected",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      megabytesPerSecondOfWriteDataPointsReceived: {
        serializedName: "megabytesPerSecondOfWriteDataPointsReceived",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfReadOperationsPerSecond: {
        serializedName: "numberOfReadOperationsPerSecond",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfReadOperationsPerSecondDataPointsExpected: {
        serializedName: "numberOfReadOperationsPerSecondDataPointsExpected",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfReadOperationsPerSecondDataPointsReceived: {
        serializedName: "numberOfReadOperationsPerSecondDataPointsReceived",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfWriteOperationsPerSecond: {
        serializedName: "numberOfWriteOperationsPerSecond",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfWriteOperationsPerSecondDataPointsExpected: {
        serializedName: "numberOfWriteOperationsPerSecondDataPointsExpected",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfWriteOperationsPerSecondDataPointsReceived: {
        serializedName: "numberOfWriteOperationsPerSecondDataPointsReceived",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      monthlyStorageCost: {
        serializedName: "monthlyStorageCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recommendedDiskType: {
        serializedName: "recommendedDiskType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedDiskSize: {
        serializedName: "recommendedDiskSize",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      gigabytesForRecommendedDiskSize: {
        serializedName: "gigabytesForRecommendedDiskSize",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      suitability: {
        serializedName: "suitability",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      suitabilityExplanation: {
        serializedName: "suitabilityExplanation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssessedNetworkAdapter: coreHttp.CompositeMapper = {
  serializedName: "AssessedNetworkAdapter",
  type: {
    name: "Composite",
    className: "AssessedNetworkAdapter",
    modelProperties: {
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AssessedNetworkAdapterIpAddressesItem"
          }
        }
      },
      monthlyBandwidthCosts: {
        serializedName: "monthlyBandwidthCosts",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      megabytesPerSecondReceived: {
        serializedName: "megabytesPerSecondReceived",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      megabytesPerSecondReceivedDataPointsExpected: {
        serializedName: "megabytesPerSecondReceivedDataPointsExpected",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      megabytesPerSecondOfReadDataPointsReceived: {
        serializedName: "megabytesPerSecondOfReadDataPointsReceived",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      megabytesPerSecondTransmitted: {
        serializedName: "megabytesPerSecondTransmitted",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      megabytesPerSecondTransmittedDataPointsExpected: {
        serializedName: "megabytesPerSecondTransmittedDataPointsExpected",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      megabytesPerSecondTransmittedDataPointsReceived: {
        serializedName: "megabytesPerSecondTransmittedDataPointsReceived",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      netGigabytesTransmittedPerMonth: {
        serializedName: "netGigabytesTransmittedPerMonth",
        type: {
          name: "Number"
        }
      },
      suitability: {
        serializedName: "suitability",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      suitabilityExplanation: {
        serializedName: "suitabilityExplanation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResultList: coreHttp.CompositeMapper = {
  serializedName: "OperationResultList",
  type: {
    name: "Composite",
    className: "OperationResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectsListBySubscriptionHeaders: coreHttp.CompositeMapper = {
  serializedName: "projects_listBySubscriptionHeaders",
  type: {
    name: "Composite",
    className: "ProjectsListBySubscriptionHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectsListByResourceGroupHeaders: coreHttp.CompositeMapper = {
  serializedName: "projects_listByResourceGroupHeaders",
  type: {
    name: "Composite",
    className: "ProjectsListByResourceGroupHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectsGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "projects_getHeaders",
  type: {
    name: "Composite",
    className: "ProjectsGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectsCreateHeaders: coreHttp.CompositeMapper = {
  serializedName: "projects_createHeaders",
  type: {
    name: "Composite",
    className: "ProjectsCreateHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectsUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "projects_updateHeaders",
  type: {
    name: "Composite",
    className: "ProjectsUpdateHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectsDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "projects_deleteHeaders",
  type: {
    name: "Composite",
    className: "ProjectsDeleteHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectsGetKeysHeaders: coreHttp.CompositeMapper = {
  serializedName: "projects_getKeysHeaders",
  type: {
    name: "Composite",
    className: "ProjectsGetKeysHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MachinesListByProjectHeaders: coreHttp.CompositeMapper = {
  serializedName: "machines_listByProjectHeaders",
  type: {
    name: "Composite",
    className: "MachinesListByProjectHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MachinesGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "machines_getHeaders",
  type: {
    name: "Composite",
    className: "MachinesGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupsListByProjectHeaders: coreHttp.CompositeMapper = {
  serializedName: "groups_listByProjectHeaders",
  type: {
    name: "Composite",
    className: "GroupsListByProjectHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupsGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "groups_getHeaders",
  type: {
    name: "Composite",
    className: "GroupsGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupsCreateHeaders: coreHttp.CompositeMapper = {
  serializedName: "groups_createHeaders",
  type: {
    name: "Composite",
    className: "GroupsCreateHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupsDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "groups_deleteHeaders",
  type: {
    name: "Composite",
    className: "GroupsDeleteHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssessmentsListByGroupHeaders: coreHttp.CompositeMapper = {
  serializedName: "assessments_listByGroupHeaders",
  type: {
    name: "Composite",
    className: "AssessmentsListByGroupHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssessmentsListByProjectHeaders: coreHttp.CompositeMapper = {
  serializedName: "assessments_listByProjectHeaders",
  type: {
    name: "Composite",
    className: "AssessmentsListByProjectHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssessmentsGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "assessments_getHeaders",
  type: {
    name: "Composite",
    className: "AssessmentsGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssessmentsCreateHeaders: coreHttp.CompositeMapper = {
  serializedName: "assessments_createHeaders",
  type: {
    name: "Composite",
    className: "AssessmentsCreateHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssessmentsDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "assessments_deleteHeaders",
  type: {
    name: "Composite",
    className: "AssessmentsDeleteHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssessmentsGetReportDownloadUrlHeaders: coreHttp.CompositeMapper = {
  serializedName: "assessments_getReportDownloadUrlHeaders",
  type: {
    name: "Composite",
    className: "AssessmentsGetReportDownloadUrlHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssessedMachinesListByAssessmentHeaders: coreHttp.CompositeMapper = {
  serializedName: "assessedMachines_listByAssessmentHeaders",
  type: {
    name: "Composite",
    className: "AssessedMachinesListByAssessmentHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssessedMachinesGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "assessedMachines_getHeaders",
  type: {
    name: "Composite",
    className: "AssessedMachinesGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};
