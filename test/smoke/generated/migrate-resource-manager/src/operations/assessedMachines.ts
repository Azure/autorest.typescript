/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrate } from "../azureMigrate";
import {
  AssessedMachinesListByAssessmentResponse,
  AssessedMachinesGetResponse
} from "../models";

/**
 * Class representing a AssessedMachines.
 */
export class AssessedMachines {
  private readonly client: AzureMigrate;

  /**
   * Initialize a new instance of the class AssessedMachines class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrate) {
    this.client = client;
  }

  /**
   * Get list of machines that assessed as part of the specified assessment. Returns a json array of
   * objects of type 'assessedMachine' as specified in the Models section.
   *
   * Whenever an assessment is created or updated, it goes under computation. During this phase, the
   * 'status' field of Assessment object reports 'Computing'.
   * During the period when the assessment is under computation, the list of assessed machines is empty
   * and no assessed machines are returned by this call.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param options The options parameters.
   */
  listByAssessment(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AssessedMachinesListByAssessmentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        options: operationOptions
      },
      listByAssessmentOperationSpec
    ) as Promise<AssessedMachinesListByAssessmentResponse>;
  }

  /**
   * Get an assessed machine with its size & cost estimate that was evaluated in the specified
   * assessment.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param assessedMachineName Unique name of an assessed machine evaluated as part of an assessment.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    assessedMachineName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AssessedMachinesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        assessedMachineName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<AssessedMachinesGetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByAssessmentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssessedMachineResultList,
      headersMapper: Mappers.AssessedMachinesListByAssessmentHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName,
    Parameters.assessmentName
  ],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssessedMachine,
      headersMapper: Mappers.AssessedMachinesGetHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName,
    Parameters.assessmentName,
    Parameters.assessedMachineName
  ],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
