/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrate } from "../azureMigrate";
import {
  AssessmentsListByGroupResponse,
  AssessmentsListByProjectResponse,
  AssessmentsGetResponse,
  AssessmentsCreateOptionalParams,
  AssessmentsCreateResponse,
  AssessmentsDeleteResponse,
  AssessmentsGetReportDownloadUrlResponse
} from "../models";

/**
 * Class representing a Assessments.
 */
export class Assessments {
  private readonly client: AzureMigrate;

  /**
   * Initialize a new instance of the class Assessments class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrate) {
    this.client = client;
  }

  /**
   * Get all assessments created for the specified group.
   *
   * Returns a json array of objects of type 'assessment' as specified in Models section.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param options The options parameters.
   */
  listByGroup(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AssessmentsListByGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, groupName, options: operationOptions },
      listByGroupOperationSpec
    ) as Promise<AssessmentsListByGroupResponse>;
  }

  /**
   * Get all assessments created in the project.
   *
   * Returns a json array of objects of type 'assessment' as specified in Models section.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  listByProject(
    resourceGroupName: string,
    projectName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AssessmentsListByProjectResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, options: operationOptions },
      listByProjectOperationSpec
    ) as Promise<AssessmentsListByProjectResponse>;
  }

  /**
   * Get an existing assessment with the specified name. Returns a json object of type 'assessment' as
   * specified in Models section.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AssessmentsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<AssessmentsGetResponse>;
  }

  /**
   * Create a new assessment with the given name and the specified settings. Since name of an assessment
   * in a project is a unique identifier, if an assessment with the name provided already exists, then
   * the existing assessment is updated.
   *
   * Any PUT operation, resulting in either create or update on an assessment, will cause the assessment
   * to go in a "InProgress" state. This will be indicated by the field 'computationState' on the
   * Assessment object. During this time no other PUT operation will be allowed on that assessment
   * object, nor will a Delete operation. Once the computation for the assessment is complete, the field
   * 'computationState' will be updated to 'Ready', and then other PUT or DELETE operations can happen on
   * the assessment.
   *
   * When assessment is under computation, any PUT will lead to a 400 - Bad Request error.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: AssessmentsCreateOptionalParams
  ): Promise<AssessmentsCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        options: operationOptions
      },
      createOperationSpec
    ) as Promise<AssessmentsCreateResponse>;
  }

  /**
   * Delete an assessment from the project. The machines remain in the assessment. Deleting a
   * non-existent assessment results in a no-operation.
   *
   * When an assessment is under computation, as indicated by the 'computationState' field, it cannot be
   * deleted. Any such attempt will return a 400 - Bad Request.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AssessmentsDeleteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<AssessmentsDeleteResponse>;
  }

  /**
   * Get the URL for downloading the assessment in a report format.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param options The options parameters.
   */
  getReportDownloadUrl(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AssessmentsGetReportDownloadUrlResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        options: operationOptions
      },
      getReportDownloadUrlOperationSpec
    ) as Promise<AssessmentsGetReportDownloadUrlResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups/{groupName}/assessments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssessmentResultList,
      headersMapper: Mappers.AssessmentsListByGroupHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName
  ],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
const listByProjectOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/assessments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssessmentResultList,
      headersMapper: Mappers.AssessmentsListByProjectHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName
  ],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups/{groupName}/assessments/{assessmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Assessment,
      headersMapper: Mappers.AssessmentsGetHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName,
    Parameters.assessmentName
  ],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups/{groupName}/assessments/{assessmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Assessment,
      headersMapper: Mappers.AssessmentsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.assessment,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName,
    Parameters.assessmentName
  ],
  headerParameters: [Parameters.contentType, Parameters.acceptLanguage],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups/{groupName}/assessments/{assessmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.AssessmentsDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName,
    Parameters.assessmentName
  ],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
const getReportDownloadUrlOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups/{groupName}/assessments/{assessmentName}/downloadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadUrl,
      headersMapper: Mappers.AssessmentsGetReportDownloadUrlHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName,
    Parameters.assessmentName
  ],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
