/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrate } from "../azureMigrate";
import {
  GroupsListByProjectResponse,
  GroupsGetResponse,
  GroupsCreateOptionalParams,
  GroupsCreateResponse,
  GroupsDeleteResponse
} from "../models";

/**
 * Class representing a Groups.
 */
export class Groups {
  private readonly client: AzureMigrate;

  /**
   * Initialize a new instance of the class Groups class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrate) {
    this.client = client;
  }

  /**
   * Get all groups created in the project. Returns a json array of objects of type 'group' as specified
   * in the Models section.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  listByProject(
    resourceGroupName: string,
    projectName: string,
    options?: coreHttp.OperationOptions
  ): Promise<GroupsListByProjectResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, options: operationOptions },
      listByProjectOperationSpec
    ) as Promise<GroupsListByProjectResponse>;
  }

  /**
   * Get information related to a specific group in the project. Returns a json object of type 'group' as
   * specified in the models section.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<GroupsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, groupName, options: operationOptions },
      getOperationSpec
    ) as Promise<GroupsGetResponse>;
  }

  /**
   * Create a new group by sending a json object of type 'group' as given in Models section as part of
   * the Request Body. The group name in a project is unique. Labels can be applied on a group as part of
   * creation.
   *
   * If a group with the groupName specified in the URL already exists, then this call acts as an update.
   *
   * This operation is Idempotent.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    options?: GroupsCreateOptionalParams
  ): Promise<GroupsCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, groupName, options: operationOptions },
      createOperationSpec
    ) as Promise<GroupsCreateResponse>;
  }

  /**
   * Delete the group from the project. The machines remain in the project. Deleting a non-existent group
   * results in a no-operation.
   *
   * A group is an aggregation mechanism for machines in a project. Therefore, deleting group does not
   * delete machines in it.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<GroupsDeleteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, groupName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<GroupsDeleteResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByProjectOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupResultList,
      headersMapper: Mappers.GroupsListByProjectHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName
  ],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups/{groupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Group,
      headersMapper: Mappers.GroupsGetHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName
  ],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups/{groupName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Group,
      headersMapper: Mappers.GroupsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.group,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName
  ],
  headerParameters: [Parameters.contentType, Parameters.acceptLanguage],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}/groups/{groupName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.GroupsDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName
  ],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
