/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorSimple8000SeriesManagementClient } from "../storSimple8000SeriesManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  DeviceSettingsGetAlertSettingsResponse,
  AlertSettings,
  DeviceSettingsCreateOrUpdateAlertSettingsResponse,
  DeviceSettingsGetNetworkSettingsResponse,
  NetworkSettingsPatch,
  DeviceSettingsUpdateNetworkSettingsResponse,
  DeviceSettingsGetSecuritySettingsResponse,
  SecuritySettingsPatch,
  DeviceSettingsUpdateSecuritySettingsResponse,
  DeviceSettingsGetTimeSettingsResponse,
  TimeSettings,
  DeviceSettingsCreateOrUpdateTimeSettingsResponse
} from "../models";

/**
 * Class representing a DeviceSettings.
 */
export class DeviceSettings {
  private readonly client: StorSimple8000SeriesManagementClient;

  /**
   * Initialize a new instance of the class DeviceSettings class.
   * @param client Reference to the service client
   */
  constructor(client: StorSimple8000SeriesManagementClient) {
    this.client = client;
  }

  /**
   * Gets the alert settings of the specified device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name
   * @param options The options parameters.
   */
  getAlertSettings(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DeviceSettingsGetAlertSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, deviceName, options: operationOptions },
      getAlertSettingsOperationSpec
    ) as Promise<DeviceSettingsGetAlertSettingsResponse>;
  }

  /**
   * Creates or updates the alert settings of the specified device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name
   * @param parameters The alert settings to be added or updated.
   * @param options The options parameters.
   */
  async createOrUpdateAlertSettings(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    parameters: AlertSettings,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<DeviceSettingsCreateOrUpdateAlertSettingsResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        DeviceSettingsCreateOrUpdateAlertSettingsResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateAlertSettingsOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateAlertSettingsOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets the network settings of the specified device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name
   * @param options The options parameters.
   */
  getNetworkSettings(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DeviceSettingsGetNetworkSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, deviceName, options: operationOptions },
      getNetworkSettingsOperationSpec
    ) as Promise<DeviceSettingsGetNetworkSettingsResponse>;
  }

  /**
   * Updates the network settings on the specified device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name
   * @param parameters The network settings to be updated.
   * @param options The options parameters.
   */
  async updateNetworkSettings(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    parameters: NetworkSettingsPatch,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<DeviceSettingsUpdateNetworkSettingsResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        DeviceSettingsUpdateNetworkSettingsResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateNetworkSettingsOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateNetworkSettingsOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Returns the Security properties of the specified device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name
   * @param options The options parameters.
   */
  getSecuritySettings(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DeviceSettingsGetSecuritySettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, deviceName, options: operationOptions },
      getSecuritySettingsOperationSpec
    ) as Promise<DeviceSettingsGetSecuritySettingsResponse>;
  }

  /**
   * Patch Security properties of the specified device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name
   * @param parameters The security settings properties to be patched.
   * @param options The options parameters.
   */
  async updateSecuritySettings(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    parameters: SecuritySettingsPatch,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<DeviceSettingsUpdateSecuritySettingsResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        DeviceSettingsUpdateSecuritySettingsResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateSecuritySettingsOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateSecuritySettingsOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * sync Remote management Certificate between appliance and Service
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name
   * @param options The options parameters.
   */
  async syncRemotemanagementCertificate(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      syncRemotemanagementCertificateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: syncRemotemanagementCertificateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets the time settings of the specified device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name
   * @param options The options parameters.
   */
  getTimeSettings(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DeviceSettingsGetTimeSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, deviceName, options: operationOptions },
      getTimeSettingsOperationSpec
    ) as Promise<DeviceSettingsGetTimeSettingsResponse>;
  }

  /**
   * Creates or updates the time settings of the specified device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param deviceName The device name
   * @param parameters The time settings to be added or updated.
   * @param options The options parameters.
   */
  async createOrUpdateTimeSettings(
    resourceGroupName: string,
    managerName: string,
    deviceName: string,
    parameters: TimeSettings,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<DeviceSettingsCreateOrUpdateTimeSettingsResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managerName,
      deviceName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        DeviceSettingsCreateOrUpdateTimeSettingsResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateTimeSettingsOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateTimeSettingsOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getAlertSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertSettings
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const createOrUpdateAlertSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AlertSettings
    },
    201: {
      bodyMapper: Mappers.AlertSettings
    },
    202: {
      bodyMapper: Mappers.AlertSettings
    },
    204: {
      bodyMapper: Mappers.AlertSettings
    }
  },
  requestBody: Parameters.parameters12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getNetworkSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/networkSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSettings
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const updateNetworkSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/networkSettings/default",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSettings
    },
    201: {
      bodyMapper: Mappers.NetworkSettings
    },
    202: {
      bodyMapper: Mappers.NetworkSettings
    },
    204: {
      bodyMapper: Mappers.NetworkSettings
    }
  },
  requestBody: Parameters.parameters13,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getSecuritySettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecuritySettings
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const updateSecuritySettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SecuritySettings
    },
    201: {
      bodyMapper: Mappers.SecuritySettings
    },
    202: {
      bodyMapper: Mappers.SecuritySettings
    },
    204: {
      bodyMapper: Mappers.SecuritySettings
    }
  },
  requestBody: Parameters.parameters14,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const syncRemotemanagementCertificateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default/syncRemoteManagementCertificate",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const getTimeSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/timeSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TimeSettings
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const createOrUpdateTimeSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/timeSettings/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.TimeSettings
    },
    201: {
      bodyMapper: Mappers.TimeSettings
    },
    202: {
      bodyMapper: Mappers.TimeSettings
    },
    204: {
      bodyMapper: Mappers.TimeSettings
    }
  },
  requestBody: Parameters.parameters15,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
