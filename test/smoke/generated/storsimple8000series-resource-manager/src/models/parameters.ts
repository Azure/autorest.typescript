/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2017-06-01",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const managerName: coreHttp.OperationURLParameter = {
  parameterPath: "managerName",
  mapper: {
    constraints: {
      MaxLength: 50,
      MinLength: 2
    },
    serializedName: "managerName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Manager
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagerPatch
};

export const deviceName: coreHttp.OperationURLParameter = {
  parameterPath: "deviceName",
  mapper: {
    serializedName: "deviceName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagerExtendedInfo
};

export const ifMatch: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const accessControlRecordName: coreHttp.OperationURLParameter = {
  parameterPath: "accessControlRecordName",
  mapper: {
    serializedName: "accessControlRecordName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters3: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AccessControlRecord
};

export const accessControlRecordName1: coreHttp.OperationURLParameter = {
  parameterPath: "accessControlRecordName",
  mapper: {
    serializedName: "accessControlRecordName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const accessControlRecordName2: coreHttp.OperationURLParameter = {
  parameterPath: "accessControlRecordName",
  mapper: {
    serializedName: "accessControlRecordName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters4: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ClearAlertRequest
};

export const parameters5: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SendTestAlertEmailRequest
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const bandwidthSettingName: coreHttp.OperationURLParameter = {
  parameterPath: "bandwidthSettingName",
  mapper: {
    serializedName: "bandwidthSettingName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters6: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BandwidthSetting
};

export const bandwidthSettingName1: coreHttp.OperationURLParameter = {
  parameterPath: "bandwidthSettingName",
  mapper: {
    serializedName: "bandwidthSettingName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const bandwidthSettingName2: coreHttp.OperationURLParameter = {
  parameterPath: "bandwidthSettingName",
  mapper: {
    serializedName: "bandwidthSettingName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters7: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CloudAppliance
};

export const parameters8: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ConfigureDeviceRequest
};

export const expand: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const parameters9: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DevicePatch
};

export const parameters10: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.FailoverRequest
};

export const sourceDeviceName: coreHttp.OperationURLParameter = {
  parameterPath: "sourceDeviceName",
  mapper: {
    serializedName: "sourceDeviceName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters11: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ListFailoverTargetsRequest
};

export const parameters12: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AlertSettings
};

export const parameters13: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.NetworkSettingsPatch
};

export const parameters14: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SecuritySettingsPatch
};

export const parameters15: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TimeSettings
};

export const backupPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "backupPolicyName",
  mapper: {
    serializedName: "backupPolicyName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters16: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BackupPolicy
};

export const backupPolicyName1: coreHttp.OperationURLParameter = {
  parameterPath: "backupPolicyName",
  mapper: {
    serializedName: "backupPolicyName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const backupPolicyName2: coreHttp.OperationURLParameter = {
  parameterPath: "backupPolicyName",
  mapper: {
    serializedName: "backupPolicyName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const backupPolicyName3: coreHttp.OperationURLParameter = {
  parameterPath: "backupPolicyName",
  mapper: {
    serializedName: "backupPolicyName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const backupType: coreHttp.OperationQueryParameter = {
  parameterPath: "backupType",
  mapper: {
    serializedName: "backupType",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const backupScheduleName: coreHttp.OperationURLParameter = {
  parameterPath: "backupScheduleName",
  mapper: {
    serializedName: "backupScheduleName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters17: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BackupSchedule
};

export const backupScheduleName1: coreHttp.OperationURLParameter = {
  parameterPath: "backupScheduleName",
  mapper: {
    serializedName: "backupScheduleName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const backupScheduleName2: coreHttp.OperationURLParameter = {
  parameterPath: "backupScheduleName",
  mapper: {
    serializedName: "backupScheduleName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const backupName: coreHttp.OperationURLParameter = {
  parameterPath: "backupName",
  mapper: {
    serializedName: "backupName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters18: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CloneRequest
};

export const backupElementName: coreHttp.OperationURLParameter = {
  parameterPath: "backupElementName",
  mapper: {
    serializedName: "backupElementName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const backupName1: coreHttp.OperationURLParameter = {
  parameterPath: "backupName",
  mapper: {
    serializedName: "backupName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters19: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ControllerPowerStateChangeRequest
};

export const hardwareComponentGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "hardwareComponentGroupName",
  mapper: {
    serializedName: "hardwareComponentGroupName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const jobName: coreHttp.OperationURLParameter = {
  parameterPath: "jobName",
  mapper: {
    serializedName: "jobName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const jobName1: coreHttp.OperationURLParameter = {
  parameterPath: "jobName",
  mapper: {
    serializedName: "jobName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const volumeContainerName: coreHttp.OperationURLParameter = {
  parameterPath: "volumeContainerName",
  mapper: {
    serializedName: "volumeContainerName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters20: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VolumeContainer
};

export const volumeContainerName1: coreHttp.OperationURLParameter = {
  parameterPath: "volumeContainerName",
  mapper: {
    serializedName: "volumeContainerName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const volumeName: coreHttp.OperationURLParameter = {
  parameterPath: "volumeName",
  mapper: {
    serializedName: "volumeName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters21: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Volume
};

export const storageAccountCredentialName: coreHttp.OperationURLParameter = {
  parameterPath: "storageAccountCredentialName",
  mapper: {
    serializedName: "storageAccountCredentialName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters22: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.StorageAccountCredential
};

export const storageAccountCredentialName1: coreHttp.OperationURLParameter = {
  parameterPath: "storageAccountCredentialName",
  mapper: {
    serializedName: "storageAccountCredentialName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const storageAccountCredentialName2: coreHttp.OperationURLParameter = {
  parameterPath: "storageAccountCredentialName",
  mapper: {
    serializedName: "storageAccountCredentialName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
