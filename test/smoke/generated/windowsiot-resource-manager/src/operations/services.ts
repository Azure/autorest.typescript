/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DeviceServices } from "../deviceServices";
import {
  ServicesGetResponse,
  DeviceServiceProperties,
  ServicesCreateOrUpdateOptionalParams,
  ServicesCreateOrUpdateResponse,
  ServicesUpdateOptionalParams,
  ServicesUpdateResponse,
  ServicesDeleteResponse,
  ServicesListByResourceGroupResponse,
  ServicesListResponse,
  DeviceServiceCheckNameAvailabilityParameters,
  ServicesCheckDeviceServiceNameAvailabilityResponse,
  ServicesListByResourceGroupNextResponse,
  ServicesListNextResponse
} from "../models";

/**
 * Class representing a Services.
 */
export class Services {
  private readonly client: DeviceServices;

  /**
   * Initialize a new instance of the class Services class.
   * @param client Reference to the service client
   */
  constructor(client: DeviceServices) {
    this.client = client;
  }

  /**
   * Get the non-security related metadata of a Windows IoT Device Service.
   * @param resourceGroupName The name of the resource group that contains the Windows IoT Device
   *                          Service.
   * @param deviceName The name of the Windows IoT Device Service.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServicesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, deviceName, options: operationOptions },
      getOperationSpec
    ) as Promise<ServicesGetResponse>;
  }

  /**
   * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a
   * property is to retrieve the Windows IoT Device Service metadata and security metadata, and then
   * combine them with the modified values in a new body to update the Windows IoT Device Service.
   * @param resourceGroupName The name of the resource group that contains the Windows IoT Device
   *                          Service.
   * @param deviceName The name of the Windows IoT Device Service.
   * @param deviceService The Windows IoT Device Service metadata and security metadata.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    deviceName: string,
    deviceService: DeviceServiceProperties,
    options?: ServicesCreateOrUpdateOptionalParams
  ): Promise<ServicesCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deviceName,
        deviceService,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<ServicesCreateOrUpdateResponse>;
  }

  /**
   * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to
   * retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with
   * the modified values in a new body to update the Windows IoT Device Service.
   * @param resourceGroupName The name of the resource group that contains the Windows IoT Device
   *                          Service.
   * @param deviceName The name of the Windows IoT Device Service.
   * @param deviceService The Windows IoT Device Service metadata and security metadata.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    deviceName: string,
    deviceService: DeviceServiceProperties,
    options?: ServicesUpdateOptionalParams
  ): Promise<ServicesUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deviceName,
        deviceService,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<ServicesUpdateResponse>;
  }

  /**
   * Delete a Windows IoT Device Service.
   * @param resourceGroupName The name of the resource group that contains the Windows IoT Device
   *                          Service.
   * @param deviceName The name of the Windows IoT Device Service.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServicesDeleteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, deviceName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<ServicesDeleteResponse>;
  }

  /**
   * Get all the IoT hubs in a resource group.
   * @param resourceGroupName The name of the resource group that contains the Windows IoT Device
   *                          Service.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServicesListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<ServicesListByResourceGroupResponse>;
  }

  /**
   * Get all the IoT hubs in a subscription.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<ServicesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<ServicesListResponse>;
  }

  /**
   * Check if a Windows IoT Device Service name is available.
   * @param deviceServiceCheckNameAvailabilityParameters Set the name parameter in the
   *                                                     DeviceServiceCheckNameAvailabilityParameters structure to the name of the Windows IoT Device Service
   *                                                     to check.
   * @param options The options parameters.
   */
  checkDeviceServiceNameAvailability(
    deviceServiceCheckNameAvailabilityParameters: DeviceServiceCheckNameAvailabilityParameters,
    options?: coreHttp.OperationOptions
  ): Promise<ServicesCheckDeviceServiceNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        deviceServiceCheckNameAvailabilityParameters,
        options: operationOptions
      },
      checkDeviceServiceNameAvailabilityOperationSpec
    ) as Promise<ServicesCheckDeviceServiceNameAvailabilityResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group that contains the Windows IoT Device
   *                          Service.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServicesListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<ServicesListByResourceGroupNextResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServicesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ServicesListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices/{deviceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceService
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices/{deviceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceService
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  requestBody: Parameters.deviceService,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.contentType, Parameters.ifMatch],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices/{deviceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceService
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  requestBody: Parameters.deviceService,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.contentType, Parameters.ifMatch1],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices/{deviceName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceService
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName
  ],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceServiceDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.WindowsIoT/deviceServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceServiceDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const checkDeviceServiceNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.WindowsIoT/checkDeviceServiceNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceServiceNameAvailabilityInfo
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  requestBody: Parameters.deviceServiceCheckNameAvailabilityParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceServiceDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink1
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceServiceDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  serializer
};
