/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Class for CheckServiceProviderAvailabilityInput
 */
export interface CheckServiceProviderAvailabilityInput {
  /**
   * Gets or sets the peering service location.
   */
  peeringServiceLocation?: string;
  /**
   * Gets or sets the peering service provider.
   */
  peeringServiceProvider?: string;
}

/**
 * The error response that indicates why an operation has failed.
 */
export interface ErrorResponse {
  /**
   * The error code.
   */
  readonly code?: string;
  /**
   * The error message.
   */
  readonly message?: string;
}

/**
 * The paginated list of peerings.
 */
export interface PeeringListResult {
  /**
   * The list of peerings.
   */
  value?: Peering[];
  /**
   * The link to fetch the next page of peerings.
   */
  nextLink?: string;
}

/**
 * The ARM resource class.
 */
export interface Resource {
  /**
   * The name of the resource.
   */
  readonly name?: string;
  /**
   * The ID of the resource.
   */
  readonly id?: string;
  /**
   * The type of the resource.
   */
  readonly type?: string;
}

/**
 * Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
 */
export type Peering = Resource & {
  /**
   * The SKU that defines the tier and kind of the peering.
   */
  sku: PeeringSku;
  /**
   * The kind of the peering.
   */
  kind: Kind;
  /**
   * The location of the resource.
   */
  location: string;
  /**
   * The resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The properties that define a direct peering.
   */
  direct?: PeeringPropertiesDirect;
  /**
   * The properties that define an exchange peering.
   */
  exchange?: PeeringPropertiesExchange;
  /**
   * The location of the peering.
   */
  peeringLocation?: string;
  /**
   * The provisioning state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * The SKU that defines the tier and kind of the peering.
 */
export interface PeeringSku {
  /**
   * The name of the peering SKU.
   */
  name?: string;
  /**
   * The tier of the peering SKU.
   */
  tier?: Tier;
  /**
   * The family of the peering SKU.
   */
  family?: Family;
  /**
   * The size of the peering SKU.
   */
  size?: Size;
}

/**
 * The properties that define a direct peering.
 */
export interface PeeringPropertiesDirect {
  /**
   * The set of connections that constitute a direct peering.
   */
  connections?: DirectConnection[];
  /**
   * The flag that indicates whether or not the peering is used for peering service.
   */
  readonly useForPeeringService?: boolean;
  /**
   * The reference of the peer ASN.
   */
  peerAsn?: SubResource;
  /**
   * The type of direct peering.
   */
  directPeeringType?: DirectPeeringType;
}

/**
 * The properties that define a direct connection.
 */
export interface DirectConnection {
  /**
   * The bandwidth of the connection.
   */
  bandwidthInMbps?: number;
  /**
   * The bandwidth that is actually provisioned.
   */
  readonly provisionedBandwidthInMbps?: number;
  /**
   * The field indicating if Microsoft provides session ip addresses.
   */
  sessionAddressProvider?: SessionAddressProvider;
  /**
   * The flag that indicates whether or not the connection is used for peering service.
   */
  useForPeeringService?: boolean;
  /**
   * The PeeringDB.com ID of the facility at which the connection has to be set up.
   */
  peeringDBFacilityId?: number;
  /**
   * The state of the connection.
   */
  readonly connectionState?: ConnectionState;
  /**
   * The BGP session associated with the connection.
   */
  bgpSession?: BgpSession;
  /**
   * The unique identifier (GUID) for the connection.
   */
  connectionIdentifier?: string;
  /**
   * The error message related to the connection state, if any.
   */
  readonly errorMessage?: string;
}

/**
 * The properties that define a BGP session.
 */
export interface BgpSession {
  /**
   * The IPv4 prefix that contains both ends' IPv4 addresses.
   */
  sessionPrefixV4?: string;
  /**
   * The IPv6 prefix that contains both ends' IPv6 addresses.
   */
  sessionPrefixV6?: string;
  /**
   * The IPv4 session address on Microsoft's end.
   */
  microsoftSessionIPv4Address?: string;
  /**
   * The IPv6 session address on Microsoft's end.
   */
  microsoftSessionIPv6Address?: string;
  /**
   * The IPv4 session address on peer's end.
   */
  peerSessionIPv4Address?: string;
  /**
   * The IPv6 session address on peer's end.
   */
  peerSessionIPv6Address?: string;
  /**
   * The state of the IPv4 session.
   */
  readonly sessionStateV4?: SessionStateV4;
  /**
   * The state of the IPv6 session.
   */
  readonly sessionStateV6?: SessionStateV6;
  /**
   * The maximum number of prefixes advertised over the IPv4 session.
   */
  maxPrefixesAdvertisedV4?: number;
  /**
   * The maximum number of prefixes advertised over the IPv6 session.
   */
  maxPrefixesAdvertisedV6?: number;
  /**
   * The MD5 authentication key of the session.
   */
  md5AuthenticationKey?: string;
}

/**
 * The sub resource.
 */
export interface SubResource {
  /**
   * The identifier of the referenced resource.
   */
  id?: string;
}

/**
 * The properties that define an exchange peering.
 */
export interface PeeringPropertiesExchange {
  /**
   * The set of connections that constitute an exchange peering.
   */
  connections?: ExchangeConnection[];
  /**
   * The reference of the peer ASN.
   */
  peerAsn?: SubResource;
}

/**
 * The properties that define an exchange connection.
 */
export interface ExchangeConnection {
  /**
   * The PeeringDB.com ID of the facility at which the connection has to be set up.
   */
  peeringDBFacilityId?: number;
  /**
   * The state of the connection.
   */
  readonly connectionState?: ConnectionState;
  /**
   * The BGP session associated with the connection.
   */
  bgpSession?: BgpSession;
  /**
   * The unique identifier (GUID) for the connection.
   */
  connectionIdentifier?: string;
  /**
   * The error message related to the connection state, if any.
   */
  readonly errorMessage?: string;
}

/**
 * The paginated list of peering API operations.
 */
export interface OperationListResult {
  /**
   * The list of peering API operations.
   */
  value?: Operation[];
  /**
   * The link to fetch the next page of peering API operations.
   */
  nextLink?: string;
}

/**
 * The peering API operation.
 */
export interface Operation {
  /**
   * The name of the operation.
   */
  readonly name?: string;
  /**
   * The information related to the operation.
   */
  readonly display?: OperationDisplayInfo;
  /**
   * The flag that indicates whether the operation applies to data plane.
   */
  readonly isDataAction?: boolean;
}

/**
 * The information related to the operation.
 */
export interface OperationDisplayInfo {
  /**
   * The name of the resource provider.
   */
  readonly provider?: string;
  /**
   * The type of the resource.
   */
  readonly resource?: string;
  /**
   * The name of the operation.
   */
  readonly operation?: string;
  /**
   * The description of the operation.
   */
  readonly description?: string;
}

/**
 * The essential information related to the peer's ASN.
 */
export type PeerAsn = Resource & {
  /**
   * The Autonomous System Number (ASN) of the peer.
   */
  peerAsn?: number;
  /**
   * The contact details of the peer.
   */
  peerContactDetail?: ContactDetail[];
  /**
   * The name of the peer.
   */
  peerName?: string;
  /**
   * The validation state of the ASN associated with the peer.
   */
  validationState?: ValidationState;
  /**
   * The error message for the validation state
   */
  readonly errorMessage?: string;
};

/**
 * The contact detail class.
 */
export interface ContactDetail {
  /**
   * The role of the contact.
   */
  role?: Role;
  /**
   * The e-mail address of the contact.
   */
  email?: string;
  /**
   * The phone number of the contact.
   */
  phone?: string;
}

/**
 * The paginated list of peer ASNs.
 */
export interface PeerAsnListResult {
  /**
   * The list of peer ASNs.
   */
  value?: PeerAsn[];
  /**
   * The link to fetch the next page of peer ASNs.
   */
  nextLink?: string;
}

/**
 * The paginated list of peering locations.
 */
export interface PeeringLocationListResult {
  /**
   * The list of peering locations.
   */
  value?: PeeringLocation[];
  /**
   * The link to fetch the next page of peering locations.
   */
  nextLink?: string;
}

/**
 * Peering location is where connectivity could be established to the Microsoft Cloud Edge.
 */
export type PeeringLocation = Resource & {
  /**
   * The kind of peering that the peering location supports.
   */
  kind?: Kind;
  /**
   * The properties that define a direct peering location.
   */
  direct?: PeeringLocationPropertiesDirect;
  /**
   * The properties that define an exchange peering location.
   */
  exchange?: PeeringLocationPropertiesExchange;
  /**
   * The name of the peering location.
   */
  peeringLocation?: string;
  /**
   * The country in which the peering location exists.
   */
  country?: string;
  /**
   * The Azure region associated with the peering location.
   */
  azureRegion?: string;
};

/**
 * The properties that define a direct peering location.
 */
export interface PeeringLocationPropertiesDirect {
  /**
   * The list of direct peering facilities at the peering location.
   */
  peeringFacilities?: DirectPeeringFacility[];
  /**
   * The list of bandwidth offers available at the peering location.
   */
  bandwidthOffers?: PeeringBandwidthOffer[];
}

/**
 * The properties that define a direct peering facility.
 */
export interface DirectPeeringFacility {
  /**
   * The address of the direct peering facility.
   */
  address?: string;
  /**
   * The type of the direct peering.
   */
  directPeeringType?: DirectPeeringType;
  /**
   * The PeeringDB.com ID of the facility.
   */
  peeringDBFacilityId?: number;
  /**
   * The PeeringDB.com URL of the facility.
   */
  peeringDBFacilityLink?: string;
}

/**
 * The properties that define a peering bandwidth offer.
 */
export interface PeeringBandwidthOffer {
  /**
   * The name of the bandwidth offer.
   */
  offerName?: string;
  /**
   * The value of the bandwidth offer in Mbps.
   */
  valueInMbps?: number;
}

/**
 * The properties that define an exchange peering location.
 */
export interface PeeringLocationPropertiesExchange {
  /**
   * The list of exchange peering facilities at the peering location.
   */
  peeringFacilities?: ExchangePeeringFacility[];
}

/**
 * The properties that define an exchange peering facility.
 */
export interface ExchangePeeringFacility {
  /**
   * The name of the exchange peering facility.
   */
  exchangeName?: string;
  /**
   * The bandwidth of the connection between Microsoft and the exchange peering facility.
   */
  bandwidthInMbps?: number;
  /**
   * The IPv4 address of Microsoft at the exchange peering facility.
   */
  microsoftIPv4Address?: string;
  /**
   * The IPv6 address of Microsoft at the exchange peering facility.
   */
  microsoftIPv6Address?: string;
  /**
   * The IPv4 prefixes associated with the exchange peering facility.
   */
  facilityIPv4Prefix?: string;
  /**
   * The IPv6 prefixes associated with the exchange peering facility.
   */
  facilityIPv6Prefix?: string;
  /**
   * The PeeringDB.com ID of the facility.
   */
  peeringDBFacilityId?: number;
  /**
   * The PeeringDB.com URL of the facility.
   */
  peeringDBFacilityLink?: string;
}

/**
 * The customer's ASN that is registered by the peering service provider.
 */
export type PeeringRegisteredAsn = Resource & {
  /**
   * The customer's ASN from which traffic originates.
   */
  asn?: number;
  /**
   * The peering service prefix key that is to be shared with the customer.
   */
  readonly peeringServicePrefixKey?: string;
  /**
   * The provisioning state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * The paginated list of peering registered ASNs.
 */
export interface PeeringRegisteredAsnListResult {
  /**
   * The list of peering registered ASNs.
   */
  value?: PeeringRegisteredAsn[];
  /**
   * The link to fetch the next page of peering registered ASNs.
   */
  nextLink?: string;
}

/**
 * The customer's prefix that is registered by the peering service provider.
 */
export type PeeringRegisteredPrefix = Resource & {
  /**
   * The customer's prefix from which traffic originates.
   */
  prefix?: string;
  /**
   * The prefix validation state.
   */
  readonly prefixValidationState?: PrefixValidationState;
  /**
   * The peering service prefix key that is to be shared with the customer.
   */
  readonly peeringServicePrefixKey?: string;
  /**
   * The error message associated with the validation state, if any.
   */
  readonly errorMessage?: string;
  /**
   * The provisioning state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * The paginated list of peering registered prefixes.
 */
export interface PeeringRegisteredPrefixListResult {
  /**
   * The list of peering registered prefixes.
   */
  value?: PeeringRegisteredPrefix[];
  /**
   * The link to fetch the next page of peering registered prefixes.
   */
  nextLink?: string;
}

/**
 * The resource tags.
 */
export interface ResourceTags {
  /**
   * Gets or sets the tags, a dictionary of descriptors arm object
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The paginated list of peering service countries.
 */
export interface PeeringServiceCountryListResult {
  /**
   * The list of peering service countries.
   */
  value?: PeeringServiceCountry[];
  /**
   * The link to fetch the next page of peering service countries.
   */
  nextLink?: string;
}

/**
 * The peering service country.
 */
export type PeeringServiceCountry = Resource & {};

/**
 * The paginated list of peering service locations.
 */
export interface PeeringServiceLocationListResult {
  /**
   * The list of peering service locations.
   */
  value?: PeeringServiceLocation[];
  /**
   * The link to fetch the next page of peering service locations.
   */
  nextLink?: string;
}

/**
 * The peering service location.
 */
export type PeeringServiceLocation = Resource & {
  /**
   * Country of the customer
   */
  country?: string;
  /**
   * State of the customer
   */
  state?: string;
  /**
   * Azure region for the location
   */
  azureRegion?: string;
};

/**
 * The peering service prefix class.
 */
export type PeeringServicePrefix = Resource & {
  /**
   * The prefix from which your traffic originates.
   */
  prefix?: string;
  /**
   * The prefix validation state
   */
  readonly prefixValidationState?: PrefixValidationState;
  /**
   * The prefix learned type
   */
  readonly learnedType?: LearnedType;
  /**
   * The error message for validation state
   */
  readonly errorMessage?: string;
  /**
   * The list of events for peering service prefix
   */
  readonly events?: PeeringServicePrefixEvent[];
  /**
   * The peering service prefix key
   */
  peeringServicePrefixKey?: string;
  /**
   * The provisioning state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * The details of the event associated with a prefix.
 */
export interface PeeringServicePrefixEvent {
  /**
   * The timestamp of the event associated with a prefix.
   */
  readonly eventTimestamp?: Date;
  /**
   * The type of the event associated with a prefix.
   */
  readonly eventType?: string;
  /**
   * The summary of the event associated with a prefix.
   */
  readonly eventSummary?: string;
  /**
   * The level of the event associated with a prefix.
   */
  readonly eventLevel?: string;
  /**
   * The description of the event associated with a prefix.
   */
  readonly eventDescription?: string;
}

/**
 * The paginated list of peering service prefixes.
 */
export interface PeeringServicePrefixListResult {
  /**
   * The list of peering service prefixes.
   */
  value?: PeeringServicePrefix[];
  /**
   * The link to fetch the next page of peering service prefixes.
   */
  nextLink?: string;
}

/**
 * The paginated list of peering service providers.
 */
export interface PeeringServiceProviderListResult {
  /**
   * The list of peering service providers.
   */
  value?: PeeringServiceProvider[];
  /**
   * The link to fetch the next page of peering service providers.
   */
  nextLink?: string;
}

/**
 * PeeringService provider
 */
export type PeeringServiceProvider = Resource & {
  /**
   * The name of the service provider.
   */
  serviceProviderName?: string;
};

/**
 * Peering Service
 */
export type PeeringService = Resource & {
  /**
   * The SKU that defines the type of the peering service.
   */
  sku?: PeeringServiceSku;
  /**
   * The location of the resource.
   */
  location: string;
  /**
   * The resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The PeeringServiceLocation of the Customer.
   */
  peeringServiceLocation?: string;
  /**
   * The MAPS Provider Name.
   */
  peeringServiceProvider?: string;
  /**
   * The provisioning state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * The SKU that defines the type of the peering service.
 */
export interface PeeringServiceSku {
  /**
   * The name of the peering service SKU.
   */
  name?: string;
}

/**
 * The paginated list of peering services.
 */
export interface PeeringServiceListResult {
  /**
   * The list of peering services.
   */
  value?: PeeringService[];
  /**
   * The link to fetch the next page of peering services.
   */
  nextLink?: string;
}

/**
 * Defines values for Enum0.
 */
export type Enum0 = "Available" | "Unavailable";
/**
 * Defines values for Enum1.
 */
export type Enum1 = "Direct" | "Exchange";
/**
 * Defines values for Tier.
 */
export type Tier = "Basic" | "Premium";
/**
 * Defines values for Family.
 */
export type Family = "Direct" | "Exchange";
/**
 * Defines values for Size.
 */
export type Size = "Free" | "Metered" | "Unlimited";
/**
 * Defines values for Kind.
 */
export type Kind = "Direct" | "Exchange";
/**
 * Defines values for SessionAddressProvider.
 */
export type SessionAddressProvider = "Microsoft" | "Peer";
/**
 * Defines values for ConnectionState.
 */
export type ConnectionState =
  | "None"
  | "PendingApproval"
  | "Approved"
  | "ProvisioningStarted"
  | "ProvisioningFailed"
  | "ProvisioningCompleted"
  | "Validating"
  | "Active";
/**
 * Defines values for SessionStateV4.
 */
export type SessionStateV4 =
  | "None"
  | "Idle"
  | "Connect"
  | "Active"
  | "OpenSent"
  | "OpenConfirm"
  | "OpenReceived"
  | "Established"
  | "PendingAdd"
  | "PendingUpdate"
  | "PendingRemove";
/**
 * Defines values for SessionStateV6.
 */
export type SessionStateV6 =
  | "None"
  | "Idle"
  | "Connect"
  | "Active"
  | "OpenSent"
  | "OpenConfirm"
  | "OpenReceived"
  | "Established"
  | "PendingAdd"
  | "PendingUpdate"
  | "PendingRemove";
/**
 * Defines values for DirectPeeringType.
 */
export type DirectPeeringType =
  | "Edge"
  | "Transit"
  | "Cdn"
  | "Internal"
  | "Ix"
  | "IxRs";
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState =
  | "Succeeded"
  | "Updating"
  | "Deleting"
  | "Failed";
/**
 * Defines values for Role.
 */
export type Role = "Noc" | "Policy" | "Technical" | "Service" | "Other";
/**
 * Defines values for ValidationState.
 */
export type ValidationState = "None" | "Pending" | "Approved" | "Failed";
/**
 * Defines values for Enum14.
 */
export type Enum14 = "Direct" | "Exchange";
/**
 * Defines values for Enum15.
 */
export type Enum15 = "Edge" | "Transit" | "Cdn" | "Internal" | "Ix" | "IxRs";
/**
 * Defines values for PrefixValidationState.
 */
export type PrefixValidationState =
  | "None"
  | "Invalid"
  | "Verified"
  | "Failed"
  | "Pending"
  | "Warning"
  | "Unknown";
/**
 * Defines values for LearnedType.
 */
export type LearnedType = "None" | "ViaServiceProvider" | "ViaSession";

/**
 * Contains response data for the checkServiceProviderAvailability operation.
 */
export type PeeringManagementClientCheckServiceProviderAvailabilityResponse = {
  /**
   * The parsed response body.
   */
  body: Enum0;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Enum0;
  };
};

/**
 * Optional parameters.
 */
export interface LegacyPeeringsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The ASN number associated with a legacy peering.
   */
  asn?: number;
}

/**
 * Contains response data for the list operation.
 */
export type LegacyPeeringsListResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LegacyPeeringsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The ASN number associated with a legacy peering.
   */
  asn?: number;
}

/**
 * Contains response data for the listNext operation.
 */
export type LegacyPeeringsListNextResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PeerAsnsGetResponse = PeerAsn & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeerAsn;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PeerAsnsCreateOrUpdateResponse = PeerAsn & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeerAsn;
  };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type PeerAsnsListBySubscriptionResponse = PeerAsnListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeerAsnListResult;
  };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type PeerAsnsListBySubscriptionNextResponse = PeerAsnListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeerAsnListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PeeringLocationsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The type of direct peering.
   */
  directPeeringType?: Enum15;
}

/**
 * Contains response data for the list operation.
 */
export type PeeringLocationsListResponse = PeeringLocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringLocationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PeeringLocationsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The type of direct peering.
   */
  directPeeringType?: Enum15;
}

/**
 * Contains response data for the listNext operation.
 */
export type PeeringLocationsListNextResponse = PeeringLocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringLocationListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type RegisteredAsnsGetResponse = PeeringRegisteredAsn & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringRegisteredAsn;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RegisteredAsnsCreateOrUpdateResponse = PeeringRegisteredAsn & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringRegisteredAsn;
  };
};

/**
 * Contains response data for the listByPeering operation.
 */
export type RegisteredAsnsListByPeeringResponse = PeeringRegisteredAsnListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringRegisteredAsnListResult;
  };
};

/**
 * Contains response data for the listByPeeringNext operation.
 */
export type RegisteredAsnsListByPeeringNextResponse = PeeringRegisteredAsnListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringRegisteredAsnListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type RegisteredPrefixesGetResponse = PeeringRegisteredPrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringRegisteredPrefix;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RegisteredPrefixesCreateOrUpdateResponse = PeeringRegisteredPrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringRegisteredPrefix;
  };
};

/**
 * Contains response data for the listByPeering operation.
 */
export type RegisteredPrefixesListByPeeringResponse = PeeringRegisteredPrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringRegisteredPrefixListResult;
  };
};

/**
 * Contains response data for the listByPeeringNext operation.
 */
export type RegisteredPrefixesListByPeeringNextResponse = PeeringRegisteredPrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringRegisteredPrefixListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PeeringsGetResponse = Peering & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Peering;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PeeringsCreateOrUpdateResponse = Peering & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Peering;
  };
};

/**
 * Contains response data for the update operation.
 */
export type PeeringsUpdateResponse = Peering & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Peering;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type PeeringsListByResourceGroupResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringListResult;
  };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type PeeringsListBySubscriptionResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type PeeringsListByResourceGroupNextResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringListResult;
  };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type PeeringsListBySubscriptionNextResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PeeringServiceCountriesListResponse = PeeringServiceCountryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServiceCountryListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PeeringServiceCountriesListNextResponse = PeeringServiceCountryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServiceCountryListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PeeringServiceLocationsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The country of interest, in which the locations are to be present.
   */
  country?: string;
}

/**
 * Contains response data for the list operation.
 */
export type PeeringServiceLocationsListResponse = PeeringServiceLocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServiceLocationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PeeringServiceLocationsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The country of interest, in which the locations are to be present.
   */
  country?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type PeeringServiceLocationsListNextResponse = PeeringServiceLocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServiceLocationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PrefixesGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * The properties to be expanded.
   */
  expand?: string;
}

/**
 * Contains response data for the get operation.
 */
export type PrefixesGetResponse = PeeringServicePrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServicePrefix;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PrefixesCreateOrUpdateResponse = PeeringServicePrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServicePrefix;
  };
};

/**
 * Optional parameters.
 */
export interface PrefixesListByPeeringServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The properties to be expanded.
   */
  expand?: string;
}

/**
 * Contains response data for the listByPeeringService operation.
 */
export type PrefixesListByPeeringServiceResponse = PeeringServicePrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServicePrefixListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PrefixesListByPeeringServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The properties to be expanded.
   */
  expand?: string;
}

/**
 * Contains response data for the listByPeeringServiceNext operation.
 */
export type PrefixesListByPeeringServiceNextResponse = PeeringServicePrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServicePrefixListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PeeringServiceProvidersListResponse = PeeringServiceProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServiceProviderListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PeeringServiceProvidersListNextResponse = PeeringServiceProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServiceProviderListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PeeringServicesGetResponse = PeeringService & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringService;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PeeringServicesCreateOrUpdateResponse = PeeringService & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringService;
  };
};

/**
 * Contains response data for the update operation.
 */
export type PeeringServicesUpdateResponse = PeeringService & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringService;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type PeeringServicesListByResourceGroupResponse = PeeringServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServiceListResult;
  };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type PeeringServicesListBySubscriptionResponse = PeeringServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServiceListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type PeeringServicesListByResourceGroupNextResponse = PeeringServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServiceListResult;
  };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type PeeringServicesListBySubscriptionNextResponse = PeeringServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PeeringServiceListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PeeringManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
