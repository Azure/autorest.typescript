/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const CheckServiceProviderAvailabilityInput: coreHttp.CompositeMapper = {
  serializedName: "CheckServiceProviderAvailabilityInput",
  type: {
    name: "Composite",
    className: "CheckServiceProviderAvailabilityInput",
    modelProperties: {
      peeringServiceLocation: {
        serializedName: "peeringServiceLocation",
        type: {
          name: "String"
        }
      },
      peeringServiceProvider: {
        serializedName: "peeringServiceProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringListResult: coreHttp.CompositeMapper = {
  serializedName: "PeeringListResult",
  type: {
    name: "Composite",
    className: "PeeringListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Peering" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Peering: coreHttp.CompositeMapper = {
  serializedName: "Peering",
  type: {
    name: "Composite",
    className: "Peering",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "PeeringSku"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      direct: {
        serializedName: "direct",
        type: {
          name: "Composite",
          className: "PeeringPropertiesDirect"
        }
      },
      exchange: {
        serializedName: "exchange",
        type: {
          name: "Composite",
          className: "PeeringPropertiesExchange"
        }
      },
      peeringLocation: {
        serializedName: "properties.peeringLocation",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringSku: coreHttp.CompositeMapper = {
  serializedName: "PeeringSku",
  type: {
    name: "Composite",
    className: "PeeringSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringPropertiesDirect: coreHttp.CompositeMapper = {
  serializedName: "PeeringPropertiesDirect",
  type: {
    name: "Composite",
    className: "PeeringPropertiesDirect",
    modelProperties: {
      connections: {
        serializedName: "connections",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DirectConnection" }
          }
        }
      },
      useForPeeringService: {
        serializedName: "useForPeeringService",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      peerAsn: {
        serializedName: "peerAsn",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      directPeeringType: {
        serializedName: "directPeeringType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DirectConnection: coreHttp.CompositeMapper = {
  serializedName: "DirectConnection",
  type: {
    name: "Composite",
    className: "DirectConnection",
    modelProperties: {
      bandwidthInMbps: {
        serializedName: "bandwidthInMbps",
        type: {
          name: "Number"
        }
      },
      provisionedBandwidthInMbps: {
        serializedName: "provisionedBandwidthInMbps",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      sessionAddressProvider: {
        serializedName: "sessionAddressProvider",
        type: {
          name: "String"
        }
      },
      useForPeeringService: {
        serializedName: "useForPeeringService",
        type: {
          name: "Boolean"
        }
      },
      peeringDBFacilityId: {
        serializedName: "peeringDBFacilityId",
        type: {
          name: "Number"
        }
      },
      connectionState: {
        serializedName: "connectionState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bgpSession: {
        serializedName: "bgpSession",
        type: {
          name: "Composite",
          className: "BgpSession"
        }
      },
      connectionIdentifier: {
        serializedName: "connectionIdentifier",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BgpSession: coreHttp.CompositeMapper = {
  serializedName: "BgpSession",
  type: {
    name: "Composite",
    className: "BgpSession",
    modelProperties: {
      sessionPrefixV4: {
        serializedName: "sessionPrefixV4",
        type: {
          name: "String"
        }
      },
      sessionPrefixV6: {
        serializedName: "sessionPrefixV6",
        type: {
          name: "String"
        }
      },
      microsoftSessionIPv4Address: {
        serializedName: "microsoftSessionIPv4Address",
        type: {
          name: "String"
        }
      },
      microsoftSessionIPv6Address: {
        serializedName: "microsoftSessionIPv6Address",
        type: {
          name: "String"
        }
      },
      peerSessionIPv4Address: {
        serializedName: "peerSessionIPv4Address",
        type: {
          name: "String"
        }
      },
      peerSessionIPv6Address: {
        serializedName: "peerSessionIPv6Address",
        type: {
          name: "String"
        }
      },
      sessionStateV4: {
        serializedName: "sessionStateV4",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sessionStateV6: {
        serializedName: "sessionStateV6",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxPrefixesAdvertisedV4: {
        serializedName: "maxPrefixesAdvertisedV4",
        type: {
          name: "Number"
        }
      },
      maxPrefixesAdvertisedV6: {
        serializedName: "maxPrefixesAdvertisedV6",
        type: {
          name: "Number"
        }
      },
      md5AuthenticationKey: {
        serializedName: "md5AuthenticationKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubResource: coreHttp.CompositeMapper = {
  serializedName: "SubResource",
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringPropertiesExchange: coreHttp.CompositeMapper = {
  serializedName: "PeeringPropertiesExchange",
  type: {
    name: "Composite",
    className: "PeeringPropertiesExchange",
    modelProperties: {
      connections: {
        serializedName: "connections",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExchangeConnection" }
          }
        }
      },
      peerAsn: {
        serializedName: "peerAsn",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const ExchangeConnection: coreHttp.CompositeMapper = {
  serializedName: "ExchangeConnection",
  type: {
    name: "Composite",
    className: "ExchangeConnection",
    modelProperties: {
      peeringDBFacilityId: {
        serializedName: "peeringDBFacilityId",
        type: {
          name: "Number"
        }
      },
      connectionState: {
        serializedName: "connectionState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bgpSession: {
        serializedName: "bgpSession",
        type: {
          name: "Composite",
          className: "BgpSession"
        }
      },
      connectionIdentifier: {
        serializedName: "connectionIdentifier",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplayInfo"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationDisplayInfo: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplayInfo",
  type: {
    name: "Composite",
    className: "OperationDisplayInfo",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeerAsn: coreHttp.CompositeMapper = {
  serializedName: "PeerAsn",
  type: {
    name: "Composite",
    className: "PeerAsn",
    modelProperties: {
      ...Resource.type.modelProperties,
      peerAsn: {
        serializedName: "properties.peerAsn",
        type: {
          name: "Number"
        }
      },
      peerContactDetail: {
        serializedName: "properties.peerContactDetail",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ContactDetail" } }
        }
      },
      peerName: {
        serializedName: "properties.peerName",
        type: {
          name: "String"
        }
      },
      validationState: {
        serializedName: "properties.validationState",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContactDetail: coreHttp.CompositeMapper = {
  serializedName: "ContactDetail",
  type: {
    name: "Composite",
    className: "ContactDetail",
    modelProperties: {
      role: {
        serializedName: "role",
        type: {
          name: "String"
        }
      },
      email: {
        serializedName: "email",
        type: {
          name: "String"
        }
      },
      phone: {
        serializedName: "phone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeerAsnListResult: coreHttp.CompositeMapper = {
  serializedName: "PeerAsnListResult",
  type: {
    name: "Composite",
    className: "PeerAsnListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PeerAsn" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringLocationListResult: coreHttp.CompositeMapper = {
  serializedName: "PeeringLocationListResult",
  type: {
    name: "Composite",
    className: "PeeringLocationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PeeringLocation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringLocation: coreHttp.CompositeMapper = {
  serializedName: "PeeringLocation",
  type: {
    name: "Composite",
    className: "PeeringLocation",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      direct: {
        serializedName: "direct",
        type: {
          name: "Composite",
          className: "PeeringLocationPropertiesDirect"
        }
      },
      exchange: {
        serializedName: "exchange",
        type: {
          name: "Composite",
          className: "PeeringLocationPropertiesExchange"
        }
      },
      peeringLocation: {
        serializedName: "properties.peeringLocation",
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "properties.country",
        type: {
          name: "String"
        }
      },
      azureRegion: {
        serializedName: "properties.azureRegion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringLocationPropertiesDirect: coreHttp.CompositeMapper = {
  serializedName: "PeeringLocationPropertiesDirect",
  type: {
    name: "Composite",
    className: "PeeringLocationPropertiesDirect",
    modelProperties: {
      peeringFacilities: {
        serializedName: "peeringFacilities",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DirectPeeringFacility" }
          }
        }
      },
      bandwidthOffers: {
        serializedName: "bandwidthOffers",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PeeringBandwidthOffer" }
          }
        }
      }
    }
  }
};

export const DirectPeeringFacility: coreHttp.CompositeMapper = {
  serializedName: "DirectPeeringFacility",
  type: {
    name: "Composite",
    className: "DirectPeeringFacility",
    modelProperties: {
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      directPeeringType: {
        serializedName: "directPeeringType",
        type: {
          name: "String"
        }
      },
      peeringDBFacilityId: {
        serializedName: "peeringDBFacilityId",
        type: {
          name: "Number"
        }
      },
      peeringDBFacilityLink: {
        serializedName: "peeringDBFacilityLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringBandwidthOffer: coreHttp.CompositeMapper = {
  serializedName: "PeeringBandwidthOffer",
  type: {
    name: "Composite",
    className: "PeeringBandwidthOffer",
    modelProperties: {
      offerName: {
        serializedName: "offerName",
        type: {
          name: "String"
        }
      },
      valueInMbps: {
        serializedName: "valueInMbps",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PeeringLocationPropertiesExchange: coreHttp.CompositeMapper = {
  serializedName: "PeeringLocationPropertiesExchange",
  type: {
    name: "Composite",
    className: "PeeringLocationPropertiesExchange",
    modelProperties: {
      peeringFacilities: {
        serializedName: "peeringFacilities",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ExchangePeeringFacility" }
          }
        }
      }
    }
  }
};

export const ExchangePeeringFacility: coreHttp.CompositeMapper = {
  serializedName: "ExchangePeeringFacility",
  type: {
    name: "Composite",
    className: "ExchangePeeringFacility",
    modelProperties: {
      exchangeName: {
        serializedName: "exchangeName",
        type: {
          name: "String"
        }
      },
      bandwidthInMbps: {
        serializedName: "bandwidthInMbps",
        type: {
          name: "Number"
        }
      },
      microsoftIPv4Address: {
        serializedName: "microsoftIPv4Address",
        type: {
          name: "String"
        }
      },
      microsoftIPv6Address: {
        serializedName: "microsoftIPv6Address",
        type: {
          name: "String"
        }
      },
      facilityIPv4Prefix: {
        serializedName: "facilityIPv4Prefix",
        type: {
          name: "String"
        }
      },
      facilityIPv6Prefix: {
        serializedName: "facilityIPv6Prefix",
        type: {
          name: "String"
        }
      },
      peeringDBFacilityId: {
        serializedName: "peeringDBFacilityId",
        type: {
          name: "Number"
        }
      },
      peeringDBFacilityLink: {
        serializedName: "peeringDBFacilityLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringRegisteredAsn: coreHttp.CompositeMapper = {
  serializedName: "PeeringRegisteredAsn",
  type: {
    name: "Composite",
    className: "PeeringRegisteredAsn",
    modelProperties: {
      ...Resource.type.modelProperties,
      asn: {
        serializedName: "properties.asn",
        type: {
          name: "Number"
        }
      },
      peeringServicePrefixKey: {
        serializedName: "properties.peeringServicePrefixKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringRegisteredAsnListResult: coreHttp.CompositeMapper = {
  serializedName: "PeeringRegisteredAsnListResult",
  type: {
    name: "Composite",
    className: "PeeringRegisteredAsnListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PeeringRegisteredAsn" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringRegisteredPrefix: coreHttp.CompositeMapper = {
  serializedName: "PeeringRegisteredPrefix",
  type: {
    name: "Composite",
    className: "PeeringRegisteredPrefix",
    modelProperties: {
      ...Resource.type.modelProperties,
      prefix: {
        serializedName: "properties.prefix",
        type: {
          name: "String"
        }
      },
      prefixValidationState: {
        serializedName: "properties.prefixValidationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      peeringServicePrefixKey: {
        serializedName: "properties.peeringServicePrefixKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringRegisteredPrefixListResult: coreHttp.CompositeMapper = {
  serializedName: "PeeringRegisteredPrefixListResult",
  type: {
    name: "Composite",
    className: "PeeringRegisteredPrefixListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PeeringRegisteredPrefix" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceTags: coreHttp.CompositeMapper = {
  serializedName: "ResourceTags",
  type: {
    name: "Composite",
    className: "ResourceTags",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const PeeringServiceCountryListResult: coreHttp.CompositeMapper = {
  serializedName: "PeeringServiceCountryListResult",
  type: {
    name: "Composite",
    className: "PeeringServiceCountryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PeeringServiceCountry" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServiceCountry: coreHttp.CompositeMapper = {
  serializedName: "PeeringServiceCountry",
  type: {
    name: "Composite",
    className: "PeeringServiceCountry",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const PeeringServiceLocationListResult: coreHttp.CompositeMapper = {
  serializedName: "PeeringServiceLocationListResult",
  type: {
    name: "Composite",
    className: "PeeringServiceLocationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PeeringServiceLocation" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServiceLocation: coreHttp.CompositeMapper = {
  serializedName: "PeeringServiceLocation",
  type: {
    name: "Composite",
    className: "PeeringServiceLocation",
    modelProperties: {
      ...Resource.type.modelProperties,
      country: {
        serializedName: "properties.country",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      azureRegion: {
        serializedName: "properties.azureRegion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServicePrefix: coreHttp.CompositeMapper = {
  serializedName: "PeeringServicePrefix",
  type: {
    name: "Composite",
    className: "PeeringServicePrefix",
    modelProperties: {
      ...Resource.type.modelProperties,
      prefix: {
        serializedName: "properties.prefix",
        type: {
          name: "String"
        }
      },
      prefixValidationState: {
        serializedName: "properties.prefixValidationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      learnedType: {
        serializedName: "properties.learnedType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      events: {
        serializedName: "properties.events",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PeeringServicePrefixEvent" }
          }
        }
      },
      peeringServicePrefixKey: {
        serializedName: "properties.peeringServicePrefixKey",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServicePrefixEvent: coreHttp.CompositeMapper = {
  serializedName: "PeeringServicePrefixEvent",
  type: {
    name: "Composite",
    className: "PeeringServicePrefixEvent",
    modelProperties: {
      eventTimestamp: {
        serializedName: "eventTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      eventType: {
        serializedName: "eventType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventSummary: {
        serializedName: "eventSummary",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventLevel: {
        serializedName: "eventLevel",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventDescription: {
        serializedName: "eventDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServicePrefixListResult: coreHttp.CompositeMapper = {
  serializedName: "PeeringServicePrefixListResult",
  type: {
    name: "Composite",
    className: "PeeringServicePrefixListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PeeringServicePrefix" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServiceProviderListResult: coreHttp.CompositeMapper = {
  serializedName: "PeeringServiceProviderListResult",
  type: {
    name: "Composite",
    className: "PeeringServiceProviderListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PeeringServiceProvider" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServiceProvider: coreHttp.CompositeMapper = {
  serializedName: "PeeringServiceProvider",
  type: {
    name: "Composite",
    className: "PeeringServiceProvider",
    modelProperties: {
      ...Resource.type.modelProperties,
      serviceProviderName: {
        serializedName: "properties.serviceProviderName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringService: coreHttp.CompositeMapper = {
  serializedName: "PeeringService",
  type: {
    name: "Composite",
    className: "PeeringService",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "PeeringServiceSku"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      peeringServiceLocation: {
        serializedName: "properties.peeringServiceLocation",
        type: {
          name: "String"
        }
      },
      peeringServiceProvider: {
        serializedName: "properties.peeringServiceProvider",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServiceSku: coreHttp.CompositeMapper = {
  serializedName: "PeeringServiceSku",
  type: {
    name: "Composite",
    className: "PeeringServiceSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServiceListResult: coreHttp.CompositeMapper = {
  serializedName: "PeeringServiceListResult",
  type: {
    name: "Composite",
    className: "PeeringServiceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PeeringService" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
