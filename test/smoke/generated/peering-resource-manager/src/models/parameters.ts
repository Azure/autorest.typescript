/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const checkServiceProviderAvailabilityInput: coreHttp.OperationParameter = {
  parameterPath: "checkServiceProviderAvailabilityInput",
  mapper: Mappers.CheckServiceProviderAvailabilityInput
};

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2020-01-01-preview",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const peeringLocation: coreHttp.OperationQueryParameter = {
  parameterPath: "peeringLocation",
  mapper: {
    serializedName: "peeringLocation",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const kind: coreHttp.OperationQueryParameter = {
  parameterPath: "kind",
  mapper: {
    serializedName: "kind",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const asn: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "asn"],
  mapper: {
    serializedName: "asn",
    type: {
      name: "Number"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const peerAsnName: coreHttp.OperationURLParameter = {
  parameterPath: "peerAsnName",
  mapper: {
    serializedName: "peerAsnName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const peerAsn: coreHttp.OperationParameter = {
  parameterPath: "peerAsn",
  mapper: Mappers.PeerAsn
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const kind1: coreHttp.OperationQueryParameter = {
  parameterPath: "kind",
  mapper: {
    serializedName: "kind",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const directPeeringType: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "directPeeringType"],
  mapper: {
    serializedName: "directPeeringType",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const peeringName: coreHttp.OperationURLParameter = {
  parameterPath: "peeringName",
  mapper: {
    serializedName: "peeringName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const registeredAsnName: coreHttp.OperationURLParameter = {
  parameterPath: "registeredAsnName",
  mapper: {
    serializedName: "registeredAsnName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const registeredAsn: coreHttp.OperationParameter = {
  parameterPath: "registeredAsn",
  mapper: Mappers.PeeringRegisteredAsn
};

export const registeredAsnName1: coreHttp.OperationURLParameter = {
  parameterPath: "registeredAsnName",
  mapper: {
    serializedName: "registeredAsnName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const registeredPrefixName: coreHttp.OperationURLParameter = {
  parameterPath: "registeredPrefixName",
  mapper: {
    serializedName: "registeredPrefixName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const registeredPrefix: coreHttp.OperationParameter = {
  parameterPath: "registeredPrefix",
  mapper: Mappers.PeeringRegisteredPrefix
};

export const peering: coreHttp.OperationParameter = {
  parameterPath: "peering",
  mapper: Mappers.Peering
};

export const tags: coreHttp.OperationParameter = {
  parameterPath: "tags",
  mapper: Mappers.ResourceTags
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const country: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "country"],
  mapper: {
    serializedName: "country",
    type: {
      name: "String"
    }
  }
};

export const peeringServiceName: coreHttp.OperationURLParameter = {
  parameterPath: "peeringServiceName",
  mapper: {
    serializedName: "peeringServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const prefixName: coreHttp.OperationURLParameter = {
  parameterPath: "prefixName",
  mapper: {
    serializedName: "prefixName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const peeringServicePrefix: coreHttp.OperationParameter = {
  parameterPath: "peeringServicePrefix",
  mapper: Mappers.PeeringServicePrefix
};

export const nextLink4: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const peeringServiceName1: coreHttp.OperationURLParameter = {
  parameterPath: "peeringServiceName",
  mapper: {
    serializedName: "peeringServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const peeringService: coreHttp.OperationParameter = {
  parameterPath: "peeringService",
  mapper: Mappers.PeeringService
};
