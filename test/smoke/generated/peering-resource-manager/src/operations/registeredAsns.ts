/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClient } from "../peeringManagementClient";
import {
  RegisteredAsnsGetResponse,
  PeeringRegisteredAsn,
  RegisteredAsnsCreateOrUpdateResponse,
  RegisteredAsnsListByPeeringResponse,
  RegisteredAsnsListByPeeringNextResponse
} from "../models";

/**
 * Class representing a RegisteredAsns.
 */
export class RegisteredAsns {
  private readonly client: PeeringManagementClient;

  /**
   * Initialize a new instance of the class RegisteredAsns class.
   * @param client Reference to the service client
   */
  constructor(client: PeeringManagementClient) {
    this.client = client;
  }

  /**
   * Gets an existing registered ASN with the specified name under the given subscription, resource group
   * and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the registered ASN.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    peeringName: string,
    registeredAsnName: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegisteredAsnsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        registeredAsnName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<RegisteredAsnsGetResponse>;
  }

  /**
   * Creates a new registered ASN with the specified name under the given subscription, resource group
   * and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsn The properties needed to create a registered ASN.
   * @param registeredAsnName The name of the ASN.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    peeringName: string,
    registeredAsn: PeeringRegisteredAsn,
    registeredAsnName: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegisteredAsnsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        registeredAsn,
        registeredAsnName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<RegisteredAsnsCreateOrUpdateResponse>;
  }

  /**
   * Deletes an existing registered ASN with the specified name under the given subscription, resource
   * group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the registered ASN.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    peeringName: string,
    registeredAsnName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        registeredAsnName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Lists all registered ASNs under the given subscription, resource group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param options The options parameters.
   */
  listByPeering(
    resourceGroupName: string,
    peeringName: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegisteredAsnsListByPeeringResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, peeringName, options: operationOptions },
      listByPeeringOperationSpec
    ) as Promise<RegisteredAsnsListByPeeringResponse>;
  }

  /**
   * ListByPeeringNext
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param nextLink The nextLink from the previous successful call to the ListByPeering method.
   * @param options The options parameters.
   */
  listByPeeringNext(
    resourceGroupName: string,
    peeringName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegisteredAsnsListByPeeringNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, peeringName, nextLink, options: operationOptions },
      listByPeeringNextOperationSpec
    ) as Promise<RegisteredAsnsListByPeeringNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredAsn
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.registeredAsnName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredAsn
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.registeredAsn,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.registeredAsnName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.registeredAsnName
  ],
  serializer
};
const listByPeeringOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredAsnListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName
  ],
  serializer
};
const listByPeeringNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredAsnListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.nextLink2
  ],
  serializer
};
