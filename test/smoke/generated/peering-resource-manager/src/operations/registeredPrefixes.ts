/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClient } from "../peeringManagementClient";
import {
  RegisteredPrefixesGetResponse,
  PeeringRegisteredPrefix,
  RegisteredPrefixesCreateOrUpdateResponse,
  RegisteredPrefixesListByPeeringResponse,
  RegisteredPrefixesListByPeeringNextResponse
} from "../models";

/**
 * Class representing a RegisteredPrefixes.
 */
export class RegisteredPrefixes {
  private readonly client: PeeringManagementClient;

  /**
   * Initialize a new instance of the class RegisteredPrefixes class.
   * @param client Reference to the service client
   */
  constructor(client: PeeringManagementClient) {
    this.client = client;
  }

  /**
   * Gets an existing registered prefix with the specified name under the given subscription, resource
   * group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredPrefixName The name of the registered prefix.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    peeringName: string,
    registeredPrefixName: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegisteredPrefixesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        registeredPrefixName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<RegisteredPrefixesGetResponse>;
  }

  /**
   * Creates a new registered prefix with the specified name under the given subscription, resource group
   * and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredPrefixName The name of the registered prefix.
   * @param registeredPrefix The properties needed to create a registered prefix.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    peeringName: string,
    registeredPrefixName: string,
    registeredPrefix: PeeringRegisteredPrefix,
    options?: coreHttp.OperationOptions
  ): Promise<RegisteredPrefixesCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        registeredPrefixName,
        registeredPrefix,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<RegisteredPrefixesCreateOrUpdateResponse>;
  }

  /**
   * Deletes an existing registered prefix with the specified name under the given subscription, resource
   * group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredPrefixName The name of the registered prefix.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    peeringName: string,
    registeredPrefixName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        registeredPrefixName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Lists all registered prefixes under the given subscription, resource group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param options The options parameters.
   */
  listByPeering(
    resourceGroupName: string,
    peeringName: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegisteredPrefixesListByPeeringResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, peeringName, options: operationOptions },
      listByPeeringOperationSpec
    ) as Promise<RegisteredPrefixesListByPeeringResponse>;
  }

  /**
   * ListByPeeringNext
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param nextLink The nextLink from the previous successful call to the ListByPeering method.
   * @param options The options parameters.
   */
  listByPeeringNext(
    resourceGroupName: string,
    peeringName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegisteredPrefixesListByPeeringNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, peeringName, nextLink, options: operationOptions },
      listByPeeringNextOperationSpec
    ) as Promise<RegisteredPrefixesListByPeeringNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes/{registeredPrefixName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredPrefix
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.registeredPrefixName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes/{registeredPrefixName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredPrefix
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.registeredPrefix,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.registeredPrefixName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes/{registeredPrefixName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.registeredPrefixName
  ],
  serializer
};
const listByPeeringOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredPrefixListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName
  ],
  serializer
};
const listByPeeringNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredPrefixListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.nextLink2
  ],
  serializer
};
