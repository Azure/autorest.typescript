/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClient } from "../peeringManagementClient";
import {
  PrefixesGetOptionalParams,
  PrefixesGetResponse,
  PeeringServicePrefix,
  PrefixesCreateOrUpdateResponse,
  PrefixesListByPeeringServiceOptionalParams,
  PrefixesListByPeeringServiceResponse,
  PrefixesListByPeeringServiceNextOptionalParams,
  PrefixesListByPeeringServiceNextResponse
} from "../models";

/**
 * Class representing a Prefixes.
 */
export class Prefixes {
  private readonly client: PeeringManagementClient;

  /**
   * Initialize a new instance of the class Prefixes class.
   * @param client Reference to the service client
   */
  constructor(client: PeeringManagementClient) {
    this.client = client;
  }

  /**
   * Gets an existing prefix with the specified name under the given subscription, resource group and
   * peering service.
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param prefixName The name of the prefix.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    peeringServiceName: string,
    prefixName: string,
    options?: PrefixesGetOptionalParams
  ): Promise<PrefixesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringServiceName,
        prefixName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<PrefixesGetResponse>;
  }

  /**
   * Creates a new prefix with the specified name under the given subscription, resource group and
   * peering service.
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param prefixName The name of the prefix.
   * @param peeringServicePrefix The properties needed to create a prefix.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    peeringServiceName: string,
    prefixName: string,
    peeringServicePrefix: PeeringServicePrefix,
    options?: coreHttp.OperationOptions
  ): Promise<PrefixesCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringServiceName,
        prefixName,
        peeringServicePrefix,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<PrefixesCreateOrUpdateResponse>;
  }

  /**
   * Deletes an existing prefix with the specified name under the given subscription, resource group and
   * peering service.
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param prefixName The name of the prefix.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    peeringServiceName: string,
    prefixName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringServiceName,
        prefixName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Lists all prefixes under the given subscription, resource group and peering service.
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param options The options parameters.
   */
  listByPeeringService(
    resourceGroupName: string,
    peeringServiceName: string,
    options?: PrefixesListByPeeringServiceOptionalParams
  ): Promise<PrefixesListByPeeringServiceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, peeringServiceName, options: operationOptions },
      listByPeeringServiceOperationSpec
    ) as Promise<PrefixesListByPeeringServiceResponse>;
  }

  /**
   * ListByPeeringServiceNext
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param nextLink The nextLink from the previous successful call to the ListByPeeringService method.
   * @param options The options parameters.
   */
  listByPeeringServiceNext(
    resourceGroupName: string,
    peeringServiceName: string,
    nextLink: string,
    options?: PrefixesListByPeeringServiceNextOptionalParams
  ): Promise<PrefixesListByPeeringServiceNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringServiceName,
        nextLink,
        options: operationOptions
      },
      listByPeeringServiceNextOperationSpec
    ) as Promise<PrefixesListByPeeringServiceNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefix
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.prefixName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefix
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.peeringServicePrefix,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.prefixName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.prefixName
  ],
  serializer
};
const listByPeeringServiceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefixListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringServiceName
  ],
  serializer
};
const listByPeeringServiceNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefixListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.nextLink4
  ],
  serializer
};
