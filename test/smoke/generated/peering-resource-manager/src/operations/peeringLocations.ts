/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClient } from "../peeringManagementClient";
import {
  Enum14,
  PeeringLocationsListOptionalParams,
  PeeringLocationsListResponse,
  PeeringLocationsListNextOptionalParams,
  PeeringLocationsListNextResponse
} from "../models";

/**
 * Class representing a PeeringLocations.
 */
export class PeeringLocations {
  private readonly client: PeeringManagementClient;

  /**
   * Initialize a new instance of the class PeeringLocations class.
   * @param client Reference to the service client
   */
  constructor(client: PeeringManagementClient) {
    this.client = client;
  }

  /**
   * Lists all of the available peering locations for the specified kind of peering.
   * @param kind The kind of the peering.
   * @param options The options parameters.
   */
  list(
    kind: Enum14,
    options?: PeeringLocationsListOptionalParams
  ): Promise<PeeringLocationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { kind, options: operationOptions },
      listOperationSpec
    ) as Promise<PeeringLocationsListResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param kind The kind of the peering.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    kind: Enum14,
    options?: PeeringLocationsListNextOptionalParams
  ): Promise<PeeringLocationsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, kind, options: operationOptions },
      listNextOperationSpec
    ) as Promise<PeeringLocationsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringLocations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringLocationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.kind1,
    Parameters.directPeeringType
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringLocationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.kind1,
    Parameters.directPeeringType
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  serializer
};
