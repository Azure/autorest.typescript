/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClient } from "../peeringManagementClient";
import {
  Enum1,
  LegacyPeeringsListOptionalParams,
  LegacyPeeringsListResponse,
  LegacyPeeringsListNextOptionalParams,
  LegacyPeeringsListNextResponse
} from "../models";

/**
 * Class representing a LegacyPeerings.
 */
export class LegacyPeerings {
  private readonly client: PeeringManagementClient;

  /**
   * Initialize a new instance of the class LegacyPeerings class.
   * @param client Reference to the service client
   */
  constructor(client: PeeringManagementClient) {
    this.client = client;
  }

  /**
   * Lists all of the legacy peerings under the given subscription matching the specified kind and
   * location.
   * @param peeringLocation The location of the peering.
   * @param kind The kind of the peering.
   * @param options The options parameters.
   */
  list(
    peeringLocation: string,
    kind: Enum1,
    options?: LegacyPeeringsListOptionalParams
  ): Promise<LegacyPeeringsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { peeringLocation, kind, options: operationOptions },
      listOperationSpec
    ) as Promise<LegacyPeeringsListResponse>;
  }

  /**
   * ListNext
   * @param peeringLocation The location of the peering.
   * @param kind The kind of the peering.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    peeringLocation: string,
    kind: Enum1,
    nextLink: string,
    options?: LegacyPeeringsListNextOptionalParams
  ): Promise<LegacyPeeringsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { peeringLocation, kind, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<LegacyPeeringsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Peering/legacyPeerings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.peeringLocation,
    Parameters.kind,
    Parameters.asn
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.peeringLocation,
    Parameters.kind,
    Parameters.asn
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  serializer
};
