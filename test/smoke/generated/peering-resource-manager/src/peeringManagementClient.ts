/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { PeeringManagementClientContext } from "./peeringManagementClientContext";
import {
  CheckServiceProviderAvailabilityInput,
  PeeringManagementClientCheckServiceProviderAvailabilityResponse
} from "./models";

class PeeringManagementClient extends PeeringManagementClientContext {
  /**
   * Initializes a new instance of the PeeringManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The Azure subscription ID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    subscriptionId: string,
    options?: Models.PeeringManagementClientOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.legacyPeerings = new operations.LegacyPeerings(this);
    this.operations = new operations.Operations(this);
    this.peerAsns = new operations.PeerAsns(this);
    this.peeringLocations = new operations.PeeringLocations(this);
    this.registeredAsns = new operations.RegisteredAsns(this);
    this.registeredPrefixes = new operations.RegisteredPrefixes(this);
    this.peerings = new operations.Peerings(this);
    this.peeringServiceCountries = new operations.PeeringServiceCountries(this);
    this.peeringServiceLocations = new operations.PeeringServiceLocations(this);
    this.prefixes = new operations.Prefixes(this);
    this.peeringServiceProviders = new operations.PeeringServiceProviders(this);
    this.peeringServices = new operations.PeeringServices(this);
  }

  /**
   * Checks if the peering service provider is present within 1000 miles of customer's location
   * @param checkServiceProviderAvailabilityInput The CheckServiceProviderAvailabilityInput indicating
   *                                              customer location and service provider.
   * @param options The options parameters.
   */
  checkServiceProviderAvailability(
    checkServiceProviderAvailabilityInput: CheckServiceProviderAvailabilityInput,
    options?: coreHttp.OperationOptions
  ): Promise<PeeringManagementClientCheckServiceProviderAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { checkServiceProviderAvailabilityInput, options: operationOptions },
      checkServiceProviderAvailabilityOperationSpec
    ) as Promise<
      PeeringManagementClientCheckServiceProviderAvailabilityResponse
    >;
  }

  legacyPeerings: operations.LegacyPeerings;
  operations: operations.Operations;
  peerAsns: operations.PeerAsns;
  peeringLocations: operations.PeeringLocations;
  registeredAsns: operations.RegisteredAsns;
  registeredPrefixes: operations.RegisteredPrefixes;
  peerings: operations.Peerings;
  peeringServiceCountries: operations.PeeringServiceCountries;
  peeringServiceLocations: operations.PeeringServiceLocations;
  prefixes: operations.Prefixes;
  peeringServiceProviders: operations.PeeringServiceProviders;
  peeringServices: operations.PeeringServices;
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const checkServiceProviderAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Peering/CheckServiceProviderAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" }, serializedName: "Enum0" }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.checkServiceProviderAvailabilityInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType],
  serializer
};

// Operation Specifications

export {
  PeeringManagementClient,
  PeeringManagementClientContext,
  Models as PeeringManagementModels,
  Mappers as PeeringManagementMappers
};
export * from "./operations";
