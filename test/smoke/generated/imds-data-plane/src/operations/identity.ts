/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { InstanceMetadataClient } from "../instanceMetadataClient";
import {
  IdentityGetTokenOptionalParams,
  IdentityGetTokenResponse,
  IdentityGetInfoResponse
} from "../models";

/**
 * Class representing a Identity.
 */
export class Identity {
  private readonly client: InstanceMetadataClient;

  /**
   * Initialize a new instance of the class Identity class.
   * @param client Reference to the service client
   */
  constructor(client: InstanceMetadataClient) {
    this.client = client;
  }

  /**
   * Get a Token from Azure AD
   * @param resource This is the urlencoded identifier URI of the sink resource for the requested Azure
   *                 AD token. The resulting token contains the corresponding aud for this resource.
   * @param options The options parameters.
   */
  getToken(
    resource: string,
    options?: IdentityGetTokenOptionalParams
  ): Promise<IdentityGetTokenResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resource, options: operationOptions },
      getTokenOperationSpec
    ) as Promise<IdentityGetTokenResponse>;
  }

  /**
   * Get information about AAD Metadata
   * @param options The options parameters.
   */
  getInfo(
    options?: coreHttp.OperationOptions
  ): Promise<IdentityGetInfoResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getInfoOperationSpec
    ) as Promise<IdentityGetInfoResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getTokenOperationSpec: coreHttp.OperationSpec = {
  path: "/identity/oauth2/token",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IdentityTokenResponse
    },
    default: {
      bodyMapper: Mappers.IdentityErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.resource,
    Parameters.clientId,
    Parameters.objectId,
    Parameters.msiResId,
    Parameters.authority,
    Parameters.bypassCache
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.metadata],
  serializer
};
const getInfoOperationSpec: coreHttp.OperationSpec = {
  path: "/identity/info",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IdentityInfoResponse
    },
    default: {
      bodyMapper: Mappers.IdentityErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.metadata],
  serializer
};
