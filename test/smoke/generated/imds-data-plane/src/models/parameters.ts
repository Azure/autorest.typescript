/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-02-01",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const metadata: coreHttp.OperationParameter = {
  parameterPath: "metadata",
  mapper: {
    defaultValue: "true",
    serializedName: "Metadata",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const nonce: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "nonce"],
  mapper: {
    serializedName: "nonce",
    type: {
      name: "String"
    }
  }
};

export const resource: coreHttp.OperationQueryParameter = {
  parameterPath: "resource",
  mapper: {
    serializedName: "resource",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const clientId: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "clientId"],
  mapper: {
    serializedName: "client_id",
    type: {
      name: "String"
    }
  }
};

export const objectId: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "objectId"],
  mapper: {
    serializedName: "object_id",
    type: {
      name: "String"
    }
  }
};

export const msiResId: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "msiResId"],
  mapper: {
    serializedName: "msi_res_id",
    type: {
      name: "String"
    }
  }
};

export const authority: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "authority"],
  mapper: {
    serializedName: "authority",
    type: {
      name: "String"
    }
  }
};

export const bypassCache: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "bypassCache"],
  mapper: {
    defaultValue: "true",
    serializedName: "bypass_cache",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};
