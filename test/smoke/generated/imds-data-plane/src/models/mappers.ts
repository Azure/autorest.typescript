/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Instance: coreHttp.CompositeMapper = {
  serializedName: "Instance",
  type: {
    name: "Composite",
    className: "Instance",
    modelProperties: {
      compute: {
        serializedName: "compute",
        type: {
          name: "Composite",
          className: "Compute"
        }
      },
      network: {
        serializedName: "network",
        type: {
          name: "Composite",
          className: "Network"
        }
      }
    }
  }
};

export const Compute: coreHttp.CompositeMapper = {
  serializedName: "Compute",
  type: {
    name: "Composite",
    className: "Compute",
    modelProperties: {
      azEnvironment: {
        serializedName: "azEnvironment",
        type: {
          name: "String"
        }
      },
      customData: {
        serializedName: "customData",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      placementGroupId: {
        serializedName: "placementGroupId",
        type: {
          name: "String"
        }
      },
      plan: {
        serializedName: "plan",
        type: {
          name: "Composite",
          className: "PlanProperties"
        }
      },
      publicKeys: {
        serializedName: "publicKeys",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PublicKeysProperties" }
          }
        }
      },
      platformFaultDomain: {
        serializedName: "platformFaultDomain",
        type: {
          name: "String"
        }
      },
      platformUpdateDomain: {
        serializedName: "platformUpdateDomain",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      resourceGroupName: {
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      vmScaleSetName: {
        serializedName: "vmScaleSetName",
        type: {
          name: "String"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      zone: {
        serializedName: "zone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PlanProperties: coreHttp.CompositeMapper = {
  serializedName: "PlanProperties",
  type: {
    name: "Composite",
    className: "PlanProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "product",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicKeysProperties: coreHttp.CompositeMapper = {
  serializedName: "PublicKeysProperties",
  type: {
    name: "Composite",
    className: "PublicKeysProperties",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      keyData: {
        serializedName: "keyData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Network: coreHttp.CompositeMapper = {
  serializedName: "Network",
  type: {
    name: "Composite",
    className: "Network",
    modelProperties: {
      interface: {
        serializedName: "interface",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NetworkInterface" }
          }
        }
      }
    }
  }
};

export const NetworkInterface: coreHttp.CompositeMapper = {
  serializedName: "NetworkInterface",
  type: {
    name: "Composite",
    className: "NetworkInterface",
    modelProperties: {
      ipv4: {
        serializedName: "ipv4",
        type: {
          name: "Composite",
          className: "NetworkInterfaceIpv4"
        }
      },
      ipv6: {
        serializedName: "ipv6",
        type: {
          name: "Composite",
          className: "NetworkInterfaceIpv6"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceIpv4: coreHttp.CompositeMapper = {
  serializedName: "NetworkInterfaceIpv4",
  type: {
    name: "Composite",
    className: "NetworkInterfaceIpv4",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Ipv4Properties" } }
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SubnetProperties" }
          }
        }
      }
    }
  }
};

export const Ipv4Properties: coreHttp.CompositeMapper = {
  serializedName: "Ipv4Properties",
  type: {
    name: "Composite",
    className: "Ipv4Properties",
    modelProperties: {
      privateIpAddress: {
        serializedName: "privateIpAddress",
        type: {
          name: "String"
        }
      },
      publicIpAddress: {
        serializedName: "publicIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubnetProperties: coreHttp.CompositeMapper = {
  serializedName: "SubnetProperties",
  type: {
    name: "Composite",
    className: "SubnetProperties",
    modelProperties: {
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "prefix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceIpv6: coreHttp.CompositeMapper = {
  serializedName: "NetworkInterfaceIpv6",
  type: {
    name: "Composite",
    className: "NetworkInterfaceIpv6",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Ipv6Properties" } }
        }
      }
    }
  }
};

export const Ipv6Properties: coreHttp.CompositeMapper = {
  serializedName: "Ipv6Properties",
  type: {
    name: "Composite",
    className: "Ipv6Properties",
    modelProperties: {
      privateIpAddress: {
        serializedName: "privateIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AttestedData: coreHttp.CompositeMapper = {
  serializedName: "AttestedData",
  type: {
    name: "Composite",
    className: "AttestedData",
    modelProperties: {
      signature: {
        serializedName: "signature",
        type: {
          name: "String"
        }
      },
      encoding: {
        serializedName: "encoding",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityTokenResponse: coreHttp.CompositeMapper = {
  serializedName: "IdentityTokenResponse",
  type: {
    name: "Composite",
    className: "IdentityTokenResponse",
    modelProperties: {
      accessToken: {
        serializedName: "access_token",
        type: {
          name: "String"
        }
      },
      expiresIn: {
        serializedName: "expires_in",
        type: {
          name: "String"
        }
      },
      expiresOn: {
        serializedName: "expires_on",
        type: {
          name: "String"
        }
      },
      extExpiresIn: {
        serializedName: "ext_expires_in",
        type: {
          name: "String"
        }
      },
      notBefore: {
        serializedName: "not_before",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      tokenType: {
        serializedName: "token_type",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "client_id",
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "object_id",
        type: {
          name: "String"
        }
      },
      msiResId: {
        serializedName: "msi_res_id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "IdentityErrorResponse",
  type: {
    name: "Composite",
    className: "IdentityErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "String"
        }
      },
      errorDescription: {
        serializedName: "error_description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityInfoResponse: coreHttp.CompositeMapper = {
  serializedName: "IdentityInfoResponse",
  type: {
    name: "Composite",
    className: "IdentityInfoResponse",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};
