/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { InkRecognizerClient } from "../inkRecognizerClient";
import {
  AnalysisRequest,
  InkRecognizerRecognizeOptionalParams,
  InkRecognizerRecognizeResponse
} from "../models";

/**
 * Class representing a InkRecognizer.
 */
export class InkRecognizer {
  private readonly client: InkRecognizerClient;

  /**
   * Initialize a new instance of the class InkRecognizer class.
   * @param client Reference to the service client
   */
  constructor(client: InkRecognizerClient) {
    this.client = client;
  }

  /**
   * Ink Recognition operation is used to perform ink layout and recognition of written words and shapes.
   * It allows passing the ink strokes to the service to get the recognition results in the response.
   * @param body The collection of stroke objects to send for analysis
   * @param options The options parameters.
   */
  recognize(
    body: AnalysisRequest,
    options?: InkRecognizerRecognizeOptionalParams
  ): Promise<InkRecognizerRecognizeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { body, options: operationOptions },
      recognizeOperationSpec
    ) as Promise<InkRecognizerRecognizeResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const recognizeOperationSpec: coreHttp.OperationSpec = {
  path: "/recognize",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType, Parameters.xMsClientRequestId],
  serializer
};
