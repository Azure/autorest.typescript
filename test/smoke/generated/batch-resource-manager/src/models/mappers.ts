/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const BatchAccountCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "BatchAccountCreateParameters",
  type: {
    name: "Composite",
    className: "BatchAccountCreateParameters",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      autoStorage: {
        serializedName: "autoStorage",
        type: {
          name: "Composite",
          className: "AutoStorageBaseProperties"
        }
      },
      poolAllocationMode: {
        serializedName: "properties.poolAllocationMode",
        type: {
          name: "Enum",
          allowedValues: ["BatchService", "UserSubscription"]
        }
      },
      keyVaultReference: {
        serializedName: "keyVaultReference",
        type: {
          name: "Composite",
          className: "KeyVaultReference"
        }
      },
      publicNetworkAccess: {
        defaultValue: "Enabled",
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      encryption: {
        serializedName: "encryption",
        type: {
          name: "Composite",
          className: "EncryptionProperties"
        }
      }
    }
  }
};

export const AutoStorageBaseProperties: coreHttp.CompositeMapper = {
  serializedName: "AutoStorageBaseProperties",
  type: {
    name: "Composite",
    className: "AutoStorageBaseProperties",
    modelProperties: {
      storageAccountId: {
        serializedName: "storageAccountId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultReference: coreHttp.CompositeMapper = {
  serializedName: "KeyVaultReference",
  type: {
    name: "Composite",
    className: "KeyVaultReference",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionProperties: coreHttp.CompositeMapper = {
  serializedName: "EncryptionProperties",
  type: {
    name: "Composite",
    className: "EncryptionProperties",
    modelProperties: {
      keySource: {
        serializedName: "keySource",
        type: {
          name: "Enum",
          allowedValues: ["Microsoft.Batch", "Microsoft.KeyVault"]
        }
      },
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreHttp.CompositeMapper = {
  serializedName: "KeyVaultProperties",
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyIdentifier: {
        serializedName: "keyIdentifier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const BatchAccount: coreHttp.CompositeMapper = {
  serializedName: "BatchAccount",
  type: {
    name: "Composite",
    className: "BatchAccount",
    modelProperties: {
      ...Resource.type.modelProperties,
      accountEndpoint: {
        serializedName: "properties.accountEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Invalid",
            "Creating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Cancelled"
          ]
        }
      },
      poolAllocationMode: {
        serializedName: "properties.poolAllocationMode",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["BatchService", "UserSubscription"]
        }
      },
      keyVaultReference: {
        serializedName: "keyVaultReference",
        type: {
          name: "Composite",
          className: "KeyVaultReference"
        }
      },
      publicNetworkAccess: {
        defaultValue: "Enabled",
        serializedName: "properties.publicNetworkAccess",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      autoStorage: {
        serializedName: "autoStorage",
        type: {
          name: "Composite",
          className: "AutoStorageProperties"
        }
      },
      encryption: {
        serializedName: "encryption",
        type: {
          name: "Composite",
          className: "EncryptionProperties"
        }
      },
      dedicatedCoreQuota: {
        serializedName: "properties.dedicatedCoreQuota",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lowPriorityCoreQuota: {
        serializedName: "properties.lowPriorityCoreQuota",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      dedicatedCoreQuotaPerVMFamily: {
        serializedName: "properties.dedicatedCoreQuotaPerVMFamily",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineFamilyCoreQuota"
            }
          }
        }
      },
      dedicatedCoreQuotaPerVMFamilyEnforced: {
        serializedName: "properties.dedicatedCoreQuotaPerVMFamilyEnforced",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      poolQuota: {
        serializedName: "properties.poolQuota",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      activeJobAndJobScheduleQuota: {
        serializedName: "properties.activeJobAndJobScheduleQuota",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutoStorageProperties: coreHttp.CompositeMapper = {
  serializedName: "AutoStorageProperties",
  type: {
    name: "Composite",
    className: "AutoStorageProperties",
    modelProperties: {
      ...AutoStorageBaseProperties.type.modelProperties,
      lastKeySync: {
        serializedName: "lastKeySync",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const VirtualMachineFamilyCoreQuota: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachineFamilyCoreQuota",
  type: {
    name: "Composite",
    className: "VirtualMachineFamilyCoreQuota",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      coreQuota: {
        serializedName: "coreQuota",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CloudError: coreHttp.CompositeMapper = {
  serializedName: "CloudError",
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreHttp.CompositeMapper = {
  serializedName: "CloudErrorBody",
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudErrorBody" } }
        }
      }
    }
  }
};

export const BatchAccountUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "BatchAccountUpdateParameters",
  type: {
    name: "Composite",
    className: "BatchAccountUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      autoStorage: {
        serializedName: "autoStorage",
        type: {
          name: "Composite",
          className: "AutoStorageBaseProperties"
        }
      },
      encryption: {
        serializedName: "encryption",
        type: {
          name: "Composite",
          className: "EncryptionProperties"
        }
      }
    }
  }
};

export const BatchAccountListResult: coreHttp.CompositeMapper = {
  serializedName: "BatchAccountListResult",
  type: {
    name: "Composite",
    className: "BatchAccountListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "BatchAccount" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchAccountRegenerateKeyParameters: coreHttp.CompositeMapper = {
  serializedName: "BatchAccountRegenerateKeyParameters",
  type: {
    name: "Composite",
    className: "BatchAccountRegenerateKeyParameters",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Primary", "Secondary"]
        }
      }
    }
  }
};

export const BatchAccountKeys: coreHttp.CompositeMapper = {
  serializedName: "BatchAccountKeys",
  type: {
    name: "Composite",
    className: "BatchAccountKeys",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      primary: {
        serializedName: "primary",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondary: {
        serializedName: "secondary",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActivateApplicationPackageParameters: coreHttp.CompositeMapper = {
  serializedName: "ActivateApplicationPackageParameters",
  type: {
    name: "Composite",
    className: "ActivateApplicationPackageParameters",
    modelProperties: {
      format: {
        serializedName: "format",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreHttp.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationPackage: coreHttp.CompositeMapper = {
  serializedName: "ApplicationPackage",
  type: {
    name: "Composite",
    className: "ApplicationPackage",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Pending", "Active"]
        }
      },
      format: {
        serializedName: "properties.format",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageUrl: {
        serializedName: "properties.storageUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageUrlExpiry: {
        serializedName: "properties.storageUrlExpiry",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastActivationTime: {
        serializedName: "properties.lastActivationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Application: coreHttp.CompositeMapper = {
  serializedName: "Application",
  type: {
    name: "Composite",
    className: "Application",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      allowUpdates: {
        serializedName: "properties.allowUpdates",
        type: {
          name: "Boolean"
        }
      },
      defaultVersion: {
        serializedName: "properties.defaultVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListApplicationsResult: coreHttp.CompositeMapper = {
  serializedName: "ListApplicationsResult",
  type: {
    name: "Composite",
    className: "ListApplicationsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Application" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListApplicationPackagesResult: coreHttp.CompositeMapper = {
  serializedName: "ListApplicationPackagesResult",
  type: {
    name: "Composite",
    className: "ListApplicationPackagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ApplicationPackage" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchLocationQuota: coreHttp.CompositeMapper = {
  serializedName: "BatchLocationQuota",
  type: {
    name: "Composite",
    className: "BatchLocationQuota",
    modelProperties: {
      accountQuota: {
        serializedName: "accountQuota",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityParameters: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Batch/batchAccounts",
        serializedName: "type",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Invalid", "AlreadyExists"]
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListCertificatesResult: coreHttp.CompositeMapper = {
  serializedName: "ListCertificatesResult",
  type: {
    name: "Composite",
    className: "ListCertificatesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Certificate" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Certificate: coreHttp.CompositeMapper = {
  serializedName: "Certificate",
  type: {
    name: "Composite",
    className: "Certificate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      thumbprintAlgorithm: {
        serializedName: "properties.thumbprintAlgorithm",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      format: {
        serializedName: "properties.format",
        type: {
          name: "Enum",
          allowedValues: ["Pfx", "Cer"]
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Succeeded", "Deleting", "Failed"]
        }
      },
      provisioningStateTransitionTime: {
        serializedName: "properties.provisioningStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      previousProvisioningState: {
        serializedName: "properties.previousProvisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Succeeded", "Deleting", "Failed"]
        }
      },
      previousProvisioningStateTransitionTime: {
        serializedName: "properties.previousProvisioningStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      publicData: {
        serializedName: "properties.publicData",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deleteCertificateError: {
        serializedName: "deleteCertificateError",
        type: {
          name: "Composite",
          className: "DeleteCertificateError"
        }
      }
    }
  }
};

export const CertificateBaseProperties: coreHttp.CompositeMapper = {
  serializedName: "CertificateBaseProperties",
  type: {
    name: "Composite",
    className: "CertificateBaseProperties",
    modelProperties: {
      thumbprintAlgorithm: {
        serializedName: "thumbprintAlgorithm",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      format: {
        serializedName: "format",
        type: {
          name: "Enum",
          allowedValues: ["Pfx", "Cer"]
        }
      }
    }
  }
};

export const CertificateProperties: coreHttp.CompositeMapper = {
  serializedName: "CertificateProperties",
  type: {
    name: "Composite",
    className: "CertificateProperties",
    modelProperties: {
      ...CertificateBaseProperties.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Succeeded", "Deleting", "Failed"]
        }
      },
      provisioningStateTransitionTime: {
        serializedName: "provisioningStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      previousProvisioningState: {
        serializedName: "previousProvisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Succeeded", "Deleting", "Failed"]
        }
      },
      previousProvisioningStateTransitionTime: {
        serializedName: "previousProvisioningStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      publicData: {
        serializedName: "publicData",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deleteCertificateError: {
        serializedName: "deleteCertificateError",
        type: {
          name: "Composite",
          className: "DeleteCertificateError"
        }
      }
    }
  }
};

export const DeleteCertificateError: coreHttp.CompositeMapper = {
  serializedName: "DeleteCertificateError",
  type: {
    name: "Composite",
    className: "DeleteCertificateError",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DeleteCertificateError" }
          }
        }
      }
    }
  }
};

export const CertificateCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "CertificateCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "CertificateCreateOrUpdateParameters",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      thumbprintAlgorithm: {
        serializedName: "properties.thumbprintAlgorithm",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      format: {
        serializedName: "properties.format",
        type: {
          name: "Enum",
          allowedValues: ["Pfx", "Cer"]
        }
      },
      data: {
        serializedName: "properties.data",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateCreateOrUpdateProperties: coreHttp.CompositeMapper = {
  serializedName: "CertificateCreateOrUpdateProperties",
  type: {
    name: "Composite",
    className: "CertificateCreateOrUpdateProperties",
    modelProperties: {
      ...CertificateBaseProperties.type.modelProperties,
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListPrivateLinkResourcesResult: coreHttp.CompositeMapper = {
  serializedName: "ListPrivateLinkResourcesResult",
  type: {
    name: "Composite",
    className: "ListPrivateLinkResourcesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateLinkResource" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreHttp.CompositeMapper = {
  serializedName: "PrivateLinkResource",
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PrivateLinkResourcePropertiesRequiredMembersItem"
          }
        }
      }
    }
  }
};

export const ListPrivateEndpointConnectionsResult: coreHttp.CompositeMapper = {
  serializedName: "ListPrivateEndpointConnectionsResult",
  type: {
    name: "Composite",
    className: "ListPrivateEndpointConnectionsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateEndpointConnection" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreHttp.CompositeMapper = {
  serializedName: "PrivateEndpointConnection",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Succeeded", "Updating", "Failed"]
        }
      },
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreHttp.CompositeMapper = {
  serializedName: "PrivateEndpoint",
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreHttp.CompositeMapper = {
  serializedName: "PrivateLinkServiceConnectionState",
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: ["Approved", "Pending", "Rejected", "Disconnected"]
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionRequired: {
        serializedName: "actionRequired",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListPoolsResult: coreHttp.CompositeMapper = {
  serializedName: "ListPoolsResult",
  type: {
    name: "Composite",
    className: "ListPoolsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Pool" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Pool: coreHttp.CompositeMapper = {
  serializedName: "Pool",
  type: {
    name: "Composite",
    className: "Pool",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "properties.lastModified",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Succeeded", "Deleting"]
        }
      },
      provisioningStateTransitionTime: {
        serializedName: "properties.provisioningStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      allocationState: {
        serializedName: "properties.allocationState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Steady", "Resizing", "Stopping"]
        }
      },
      allocationStateTransitionTime: {
        serializedName: "properties.allocationStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      vmSize: {
        serializedName: "properties.vmSize",
        type: {
          name: "String"
        }
      },
      deploymentConfiguration: {
        serializedName: "deploymentConfiguration",
        type: {
          name: "Composite",
          className: "DeploymentConfiguration"
        }
      },
      currentDedicatedNodes: {
        serializedName: "properties.currentDedicatedNodes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currentLowPriorityNodes: {
        serializedName: "properties.currentLowPriorityNodes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      scaleSettings: {
        serializedName: "scaleSettings",
        type: {
          name: "Composite",
          className: "ScaleSettings"
        }
      },
      autoScaleRun: {
        serializedName: "autoScaleRun",
        type: {
          name: "Composite",
          className: "AutoScaleRun"
        }
      },
      interNodeCommunication: {
        serializedName: "properties.interNodeCommunication",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "NetworkConfiguration"
        }
      },
      maxTasksPerNode: {
        serializedName: "properties.maxTasksPerNode",
        type: {
          name: "Number"
        }
      },
      taskSchedulingPolicy: {
        serializedName: "taskSchedulingPolicy",
        type: {
          name: "Composite",
          className: "TaskSchedulingPolicy"
        }
      },
      userAccounts: {
        serializedName: "properties.userAccounts",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UserAccount" } }
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataItem" } }
        }
      },
      startTask: {
        serializedName: "startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      certificates: {
        serializedName: "properties.certificates",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CertificateReference" }
          }
        }
      },
      applicationPackages: {
        serializedName: "properties.applicationPackages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      applicationLicenses: {
        serializedName: "properties.applicationLicenses",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PoolPropertiesApplicationLicensesItem"
          }
        }
      },
      resizeOperationStatus: {
        serializedName: "resizeOperationStatus",
        type: {
          name: "Composite",
          className: "ResizeOperationStatus"
        }
      },
      mountConfiguration: {
        serializedName: "properties.mountConfiguration",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MountConfiguration" }
          }
        }
      }
    }
  }
};

export const DeploymentConfiguration: coreHttp.CompositeMapper = {
  serializedName: "DeploymentConfiguration",
  type: {
    name: "Composite",
    className: "DeploymentConfiguration",
    modelProperties: {
      cloudServiceConfiguration: {
        serializedName: "cloudServiceConfiguration",
        type: {
          name: "Composite",
          className: "CloudServiceConfiguration"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      }
    }
  }
};

export const CloudServiceConfiguration: coreHttp.CompositeMapper = {
  serializedName: "CloudServiceConfiguration",
  type: {
    name: "Composite",
    className: "CloudServiceConfiguration",
    modelProperties: {
      osFamily: {
        serializedName: "osFamily",
        required: true,
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineConfiguration: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachineConfiguration",
  type: {
    name: "Composite",
    className: "VirtualMachineConfiguration",
    modelProperties: {
      imageReference: {
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      },
      nodeAgentSkuId: {
        serializedName: "nodeAgentSkuId",
        required: true,
        type: {
          name: "String"
        }
      },
      windowsConfiguration: {
        serializedName: "windowsConfiguration",
        type: {
          name: "Composite",
          className: "WindowsConfiguration"
        }
      },
      dataDisks: {
        serializedName: "dataDisks",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DataDisk" } }
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      containerConfiguration: {
        serializedName: "containerConfiguration",
        type: {
          name: "Composite",
          className: "ContainerConfiguration"
        }
      },
      diskEncryptionConfiguration: {
        serializedName: "diskEncryptionConfiguration",
        type: {
          name: "Composite",
          className: "DiskEncryptionConfiguration"
        }
      }
    }
  }
};

export const ImageReference: coreHttp.CompositeMapper = {
  serializedName: "ImageReference",
  type: {
    name: "Composite",
    className: "ImageReference",
    modelProperties: {
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WindowsConfiguration: coreHttp.CompositeMapper = {
  serializedName: "WindowsConfiguration",
  type: {
    name: "Composite",
    className: "WindowsConfiguration",
    modelProperties: {
      enableAutomaticUpdates: {
        serializedName: "enableAutomaticUpdates",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DataDisk: coreHttp.CompositeMapper = {
  serializedName: "DataDisk",
  type: {
    name: "Composite",
    className: "DataDisk",
    modelProperties: {
      lun: {
        serializedName: "lun",
        required: true,
        type: {
          name: "Number"
        }
      },
      caching: {
        serializedName: "caching",
        type: {
          name: "Enum",
          allowedValues: ["None", "ReadOnly", "ReadWrite"]
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        required: true,
        type: {
          name: "Number"
        }
      },
      storageAccountType: {
        serializedName: "storageAccountType",
        type: {
          name: "Enum",
          allowedValues: ["Standard_LRS", "Premium_LRS"]
        }
      }
    }
  }
};

export const ContainerConfiguration: coreHttp.CompositeMapper = {
  serializedName: "ContainerConfiguration",
  type: {
    name: "Composite",
    className: "ContainerConfiguration",
    modelProperties: {
      type: {
        defaultValue: "DockerCompatible",
        serializedName: "type",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      containerImageNames: {
        serializedName: "containerImageNames",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ContainerConfigurationContainerImageNamesItem"
          }
        }
      },
      containerRegistries: {
        serializedName: "containerRegistries",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ContainerRegistry" }
          }
        }
      }
    }
  }
};

export const ContainerRegistry: coreHttp.CompositeMapper = {
  serializedName: "ContainerRegistry",
  type: {
    name: "Composite",
    className: "ContainerRegistry",
    modelProperties: {
      registryServer: {
        serializedName: "registryServer",
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "username",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskEncryptionConfiguration: coreHttp.CompositeMapper = {
  serializedName: "DiskEncryptionConfiguration",
  type: {
    name: "Composite",
    className: "DiskEncryptionConfiguration",
    modelProperties: {
      targets: {
        serializedName: "targets",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Enum", allowedValues: ["OsDisk", "TemporaryDisk"] },
            serializedName: "DiskEncryptionTarget"
          }
        }
      }
    }
  }
};

export const ScaleSettings: coreHttp.CompositeMapper = {
  serializedName: "ScaleSettings",
  type: {
    name: "Composite",
    className: "ScaleSettings",
    modelProperties: {
      fixedScale: {
        serializedName: "fixedScale",
        type: {
          name: "Composite",
          className: "FixedScaleSettings"
        }
      },
      autoScale: {
        serializedName: "autoScale",
        type: {
          name: "Composite",
          className: "AutoScaleSettings"
        }
      }
    }
  }
};

export const FixedScaleSettings: coreHttp.CompositeMapper = {
  serializedName: "FixedScaleSettings",
  type: {
    name: "Composite",
    className: "FixedScaleSettings",
    modelProperties: {
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      targetDedicatedNodes: {
        serializedName: "targetDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      targetLowPriorityNodes: {
        serializedName: "targetLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      nodeDeallocationOption: {
        serializedName: "nodeDeallocationOption",
        type: {
          name: "Enum",
          allowedValues: [
            "Requeue",
            "Terminate",
            "TaskCompletion",
            "RetainedData"
          ]
        }
      }
    }
  }
};

export const AutoScaleSettings: coreHttp.CompositeMapper = {
  serializedName: "AutoScaleSettings",
  type: {
    name: "Composite",
    className: "AutoScaleSettings",
    modelProperties: {
      formula: {
        serializedName: "formula",
        required: true,
        type: {
          name: "String"
        }
      },
      evaluationInterval: {
        serializedName: "evaluationInterval",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const AutoScaleRun: coreHttp.CompositeMapper = {
  serializedName: "AutoScaleRun",
  type: {
    name: "Composite",
    className: "AutoScaleRun",
    modelProperties: {
      evaluationTime: {
        serializedName: "evaluationTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      results: {
        serializedName: "results",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "AutoScaleRunError"
        }
      }
    }
  }
};

export const AutoScaleRunError: coreHttp.CompositeMapper = {
  serializedName: "AutoScaleRunError",
  type: {
    name: "Composite",
    className: "AutoScaleRunError",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AutoScaleRunError" }
          }
        }
      }
    }
  }
};

export const NetworkConfiguration: coreHttp.CompositeMapper = {
  serializedName: "NetworkConfiguration",
  type: {
    name: "Composite",
    className: "NetworkConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      },
      endpointConfiguration: {
        serializedName: "endpointConfiguration",
        type: {
          name: "Composite",
          className: "PoolEndpointConfiguration"
        }
      },
      publicIPAddressConfiguration: {
        serializedName: "publicIPAddressConfiguration",
        type: {
          name: "Composite",
          className: "PublicIPAddressConfiguration"
        }
      }
    }
  }
};

export const PoolEndpointConfiguration: coreHttp.CompositeMapper = {
  serializedName: "PoolEndpointConfiguration",
  type: {
    name: "Composite",
    className: "PoolEndpointConfiguration",
    modelProperties: {
      inboundNatPools: {
        serializedName: "inboundNatPools",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InboundNatPool" } }
        }
      }
    }
  }
};

export const InboundNatPool: coreHttp.CompositeMapper = {
  serializedName: "InboundNatPool",
  type: {
    name: "Composite",
    className: "InboundNatPool",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["TCP", "UDP"]
        }
      },
      backendPort: {
        serializedName: "backendPort",
        required: true,
        type: {
          name: "Number"
        }
      },
      frontendPortRangeStart: {
        serializedName: "frontendPortRangeStart",
        required: true,
        type: {
          name: "Number"
        }
      },
      frontendPortRangeEnd: {
        serializedName: "frontendPortRangeEnd",
        required: true,
        type: {
          name: "Number"
        }
      },
      networkSecurityGroupRules: {
        serializedName: "networkSecurityGroupRules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NetworkSecurityGroupRule" }
          }
        }
      }
    }
  }
};

export const NetworkSecurityGroupRule: coreHttp.CompositeMapper = {
  serializedName: "NetworkSecurityGroupRule",
  type: {
    name: "Composite",
    className: "NetworkSecurityGroupRule",
    modelProperties: {
      priority: {
        serializedName: "priority",
        required: true,
        type: {
          name: "Number"
        }
      },
      access: {
        serializedName: "access",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Allow", "Deny"]
        }
      },
      sourceAddressPrefix: {
        serializedName: "sourceAddressPrefix",
        required: true,
        type: {
          name: "String"
        }
      },
      sourcePortRanges: {
        serializedName: "sourcePortRanges",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "NetworkSecurityGroupRuleSourcePortRangesItem"
          }
        }
      }
    }
  }
};

export const PublicIPAddressConfiguration: coreHttp.CompositeMapper = {
  serializedName: "PublicIPAddressConfiguration",
  type: {
    name: "Composite",
    className: "PublicIPAddressConfiguration",
    modelProperties: {
      provision: {
        serializedName: "provision",
        type: {
          name: "Enum",
          allowedValues: ["BatchManaged", "UserManaged", "NoPublicIPAddresses"]
        }
      },
      ipAddressIds: {
        serializedName: "ipAddressIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PublicIPAddressConfigurationIpAddressIdsItem"
          }
        }
      }
    }
  }
};

export const TaskSchedulingPolicy: coreHttp.CompositeMapper = {
  serializedName: "TaskSchedulingPolicy",
  type: {
    name: "Composite",
    className: "TaskSchedulingPolicy",
    modelProperties: {
      nodeFillType: {
        serializedName: "nodeFillType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Spread", "Pack"]
        }
      }
    }
  }
};

export const UserAccount: coreHttp.CompositeMapper = {
  serializedName: "UserAccount",
  type: {
    name: "Composite",
    className: "UserAccount",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      },
      elevationLevel: {
        serializedName: "elevationLevel",
        type: {
          name: "Enum",
          allowedValues: ["NonAdmin", "Admin"]
        }
      },
      linuxUserConfiguration: {
        serializedName: "linuxUserConfiguration",
        type: {
          name: "Composite",
          className: "LinuxUserConfiguration"
        }
      },
      windowsUserConfiguration: {
        serializedName: "windowsUserConfiguration",
        type: {
          name: "Composite",
          className: "WindowsUserConfiguration"
        }
      }
    }
  }
};

export const LinuxUserConfiguration: coreHttp.CompositeMapper = {
  serializedName: "LinuxUserConfiguration",
  type: {
    name: "Composite",
    className: "LinuxUserConfiguration",
    modelProperties: {
      uid: {
        serializedName: "uid",
        type: {
          name: "Number"
        }
      },
      gid: {
        serializedName: "gid",
        type: {
          name: "Number"
        }
      },
      sshPrivateKey: {
        serializedName: "sshPrivateKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WindowsUserConfiguration: coreHttp.CompositeMapper = {
  serializedName: "WindowsUserConfiguration",
  type: {
    name: "Composite",
    className: "WindowsUserConfiguration",
    modelProperties: {
      loginMode: {
        serializedName: "loginMode",
        type: {
          name: "Enum",
          allowedValues: ["Batch", "Interactive"]
        }
      }
    }
  }
};

export const MetadataItem: coreHttp.CompositeMapper = {
  serializedName: "MetadataItem",
  type: {
    name: "Composite",
    className: "MetadataItem",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StartTask: coreHttp.CompositeMapper = {
  serializedName: "StartTask",
  type: {
    name: "Composite",
    className: "StartTask",
    modelProperties: {
      commandLine: {
        serializedName: "commandLine",
        type: {
          name: "String"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceFile" } }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentSetting" }
          }
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      },
      maxTaskRetryCount: {
        serializedName: "maxTaskRetryCount",
        type: {
          name: "Number"
        }
      },
      waitForSuccess: {
        serializedName: "waitForSuccess",
        type: {
          name: "Boolean"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      }
    }
  }
};

export const ResourceFile: coreHttp.CompositeMapper = {
  serializedName: "ResourceFile",
  type: {
    name: "Composite",
    className: "ResourceFile",
    modelProperties: {
      autoStorageContainerName: {
        serializedName: "autoStorageContainerName",
        type: {
          name: "String"
        }
      },
      storageContainerUrl: {
        serializedName: "storageContainerUrl",
        type: {
          name: "String"
        }
      },
      httpUrl: {
        serializedName: "httpUrl",
        type: {
          name: "String"
        }
      },
      blobPrefix: {
        serializedName: "blobPrefix",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "filePath",
        type: {
          name: "String"
        }
      },
      fileMode: {
        serializedName: "fileMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentSetting: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentSetting",
  type: {
    name: "Composite",
    className: "EnvironmentSetting",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserIdentity: coreHttp.CompositeMapper = {
  serializedName: "UserIdentity",
  type: {
    name: "Composite",
    className: "UserIdentity",
    modelProperties: {
      userName: {
        serializedName: "userName",
        type: {
          name: "String"
        }
      },
      autoUser: {
        serializedName: "autoUser",
        type: {
          name: "Composite",
          className: "AutoUserSpecification"
        }
      }
    }
  }
};

export const AutoUserSpecification: coreHttp.CompositeMapper = {
  serializedName: "AutoUserSpecification",
  type: {
    name: "Composite",
    className: "AutoUserSpecification",
    modelProperties: {
      scope: {
        serializedName: "scope",
        type: {
          name: "Enum",
          allowedValues: ["Task", "Pool"]
        }
      },
      elevationLevel: {
        serializedName: "elevationLevel",
        type: {
          name: "Enum",
          allowedValues: ["NonAdmin", "Admin"]
        }
      }
    }
  }
};

export const TaskContainerSettings: coreHttp.CompositeMapper = {
  serializedName: "TaskContainerSettings",
  type: {
    name: "Composite",
    className: "TaskContainerSettings",
    modelProperties: {
      containerRunOptions: {
        serializedName: "containerRunOptions",
        type: {
          name: "String"
        }
      },
      imageName: {
        serializedName: "imageName",
        required: true,
        type: {
          name: "String"
        }
      },
      registry: {
        serializedName: "registry",
        type: {
          name: "Composite",
          className: "ContainerRegistry"
        }
      },
      workingDirectory: {
        serializedName: "workingDirectory",
        type: {
          name: "Enum",
          allowedValues: ["TaskWorkingDirectory", "ContainerImageDefault"]
        }
      }
    }
  }
};

export const CertificateReference: coreHttp.CompositeMapper = {
  serializedName: "CertificateReference",
  type: {
    name: "Composite",
    className: "CertificateReference",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      storeLocation: {
        serializedName: "storeLocation",
        type: {
          name: "Enum",
          allowedValues: ["CurrentUser", "LocalMachine"]
        }
      },
      storeName: {
        serializedName: "storeName",
        type: {
          name: "String"
        }
      },
      visibility: {
        serializedName: "visibility",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["StartTask", "Task", "RemoteUser"]
            },
            serializedName: "CertificateVisibility"
          }
        }
      }
    }
  }
};

export const ApplicationPackageReference: coreHttp.CompositeMapper = {
  serializedName: "ApplicationPackageReference",
  type: {
    name: "Composite",
    className: "ApplicationPackageReference",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResizeOperationStatus: coreHttp.CompositeMapper = {
  serializedName: "ResizeOperationStatus",
  type: {
    name: "Composite",
    className: "ResizeOperationStatus",
    modelProperties: {
      targetDedicatedNodes: {
        serializedName: "targetDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      targetLowPriorityNodes: {
        serializedName: "targetLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      nodeDeallocationOption: {
        serializedName: "nodeDeallocationOption",
        type: {
          name: "Enum",
          allowedValues: [
            "Requeue",
            "Terminate",
            "TaskCompletion",
            "RetainedData"
          ]
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResizeError" } }
        }
      }
    }
  }
};

export const ResizeError: coreHttp.CompositeMapper = {
  serializedName: "ResizeError",
  type: {
    name: "Composite",
    className: "ResizeError",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResizeError" } }
        }
      }
    }
  }
};

export const MountConfiguration: coreHttp.CompositeMapper = {
  serializedName: "MountConfiguration",
  type: {
    name: "Composite",
    className: "MountConfiguration",
    modelProperties: {
      azureBlobFileSystemConfiguration: {
        serializedName: "azureBlobFileSystemConfiguration",
        type: {
          name: "Composite",
          className: "AzureBlobFileSystemConfiguration"
        }
      },
      nfsMountConfiguration: {
        serializedName: "nfsMountConfiguration",
        type: {
          name: "Composite",
          className: "NFSMountConfiguration"
        }
      },
      cifsMountConfiguration: {
        serializedName: "cifsMountConfiguration",
        type: {
          name: "Composite",
          className: "CifsMountConfiguration"
        }
      },
      azureFileShareConfiguration: {
        serializedName: "azureFileShareConfiguration",
        type: {
          name: "Composite",
          className: "AzureFileShareConfiguration"
        }
      }
    }
  }
};

export const AzureBlobFileSystemConfiguration: coreHttp.CompositeMapper = {
  serializedName: "AzureBlobFileSystemConfiguration",
  type: {
    name: "Composite",
    className: "AzureBlobFileSystemConfiguration",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "containerName",
        required: true,
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      },
      sasKey: {
        serializedName: "sasKey",
        type: {
          name: "String"
        }
      },
      blobfuseOptions: {
        serializedName: "blobfuseOptions",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        serializedName: "relativeMountPath",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NFSMountConfiguration: coreHttp.CompositeMapper = {
  serializedName: "NFSMountConfiguration",
  type: {
    name: "Composite",
    className: "NFSMountConfiguration",
    modelProperties: {
      source: {
        serializedName: "source",
        required: true,
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        serializedName: "relativeMountPath",
        required: true,
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CifsMountConfiguration: coreHttp.CompositeMapper = {
  serializedName: "CifsMountConfiguration",
  type: {
    name: "Composite",
    className: "CifsMountConfiguration",
    modelProperties: {
      username: {
        serializedName: "username",
        required: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        required: true,
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        serializedName: "relativeMountPath",
        required: true,
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFileShareConfiguration: coreHttp.CompositeMapper = {
  serializedName: "AzureFileShareConfiguration",
  type: {
    name: "Composite",
    className: "AzureFileShareConfiguration",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      },
      azureFileUrl: {
        serializedName: "azureFileUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        required: true,
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        serializedName: "relativeMountPath",
        required: true,
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateCreateHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate_createHeaders",
  type: {
    name: "Composite",
    className: "CertificateCreateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate_updateHeaders",
  type: {
    name: "Composite",
    className: "CertificateUpdateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate_getHeaders",
  type: {
    name: "Composite",
    className: "CertificateGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateCancelDeletionHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate_cancelDeletionHeaders",
  type: {
    name: "Composite",
    className: "CertificateCancelDeletionHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "privateEndpointConnection_updateHeaders",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionUpdateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolCreateHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_createHeaders",
  type: {
    name: "Composite",
    className: "PoolCreateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_updateHeaders",
  type: {
    name: "Composite",
    className: "PoolUpdateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_getHeaders",
  type: {
    name: "Composite",
    className: "PoolGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolDisableAutoScaleHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_disableAutoScaleHeaders",
  type: {
    name: "Composite",
    className: "PoolDisableAutoScaleHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolStopResizeHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool_stopResizeHeaders",
  type: {
    name: "Composite",
    className: "PoolStopResizeHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};
