/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Parameters supplied to the Create operation.
 */
export interface BatchAccountCreateParameters {
  /**
   * The region in which to create the account.
   */
  location: string;
  /**
   * The user-specified tags associated with the account.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The properties related to the auto-storage account.
   */
  autoStorage?: AutoStorageBaseProperties;
  /**
   * The pool allocation mode also affects how clients may authenticate to the Batch Service API. If the mode is BatchService, clients may authenticate using access keys or Azure Active Directory. If the mode is UserSubscription, clients must use Azure Active Directory. The default is BatchService.
   */
  poolAllocationMode?: PoolAllocationMode;
  /**
   * A reference to the Azure key vault associated with the Batch account.
   */
  keyVaultReference?: KeyVaultReference;
  /**
   * The network access type for operating on the resources in the Batch account.
   */
  publicNetworkAccess?: PublicNetworkAccessType;
  encryption?: EncryptionProperties;
}

/**
 * The properties related to the auto-storage account.
 */
export interface AutoStorageBaseProperties {
  /**
   * The resource ID of the storage account to be used for auto-storage account.
   */
  storageAccountId: string;
}

/**
 * Identifies the Azure key vault associated with a Batch account.
 */
export interface KeyVaultReference {
  /**
   * The resource ID of the Azure key vault associated with the Batch account.
   */
  id: string;
  /**
   * The URL of the Azure key vault associated with the Batch account.
   */
  url: string;
}

export interface EncryptionProperties {
  /**
   * Type of the key source.
   */
  keySource?: KeySource;
  /**
   * Additional details when using Microsoft.KeyVault
   */
  keyVaultProperties?: KeyVaultProperties;
}

export interface KeyVaultProperties {
  /**
   * Full path to the versioned secret. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053
   */
  keyIdentifier?: string;
}

/**
 * A definition of an Azure resource.
 */
export interface Resource {
  /**
   * The ID of the resource.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   */
  readonly type?: string;
  /**
   * The location of the resource.
   */
  readonly location?: string;
  /**
   * The tags of the resource.
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * Contains information about an Azure Batch account.
 */
export type BatchAccount = Resource & {
  /**
   * The account endpoint used to interact with the Batch service.
   */
  readonly accountEndpoint?: string;
  /**
   * The provisioned state of the resource
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The allocation mode for creating pools in the Batch account.
   */
  readonly poolAllocationMode?: PoolAllocationMode;
  /**
   * Identifies the Azure key vault associated with a Batch account.
   */
  readonly keyVaultReference?: KeyVaultReference;
  /**
   * If not specified, the default value is 'enabled'.
   */
  readonly publicNetworkAccess?: PublicNetworkAccessType;
  /**
   * Contains information about the auto-storage account associated with a Batch account.
   */
  readonly autoStorage?: AutoStorageProperties;
  readonly encryption?: EncryptionProperties;
  /**
   * For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
   */
  readonly dedicatedCoreQuota?: number;
  /**
   * For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
   */
  readonly lowPriorityCoreQuota?: number;
  /**
   * A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
   */
  readonly dedicatedCoreQuotaPerVMFamily?: VirtualMachineFamilyCoreQuota[];
  /**
   * Batch is transitioning its core quota system for dedicated cores to be enforced per Virtual Machine family. During this transitional phase, the dedicated core quota per Virtual Machine family may not yet be enforced. If this flag is false, dedicated core quota is enforced via the old dedicatedCoreQuota property on the account and does not consider Virtual Machine family. If this flag is true, dedicated core quota is enforced via the dedicatedCoreQuotaPerVMFamily property on the account, and the old dedicatedCoreQuota does not apply.
   */
  readonly dedicatedCoreQuotaPerVMFamilyEnforced?: boolean;
  /**
   * The pool quota for the Batch account.
   */
  readonly poolQuota?: number;
  /**
   * The active job and job schedule quota for the Batch account.
   */
  readonly activeJobAndJobScheduleQuota?: number;
};

/**
 * Contains information about the auto-storage account associated with a Batch account.
 */
export type AutoStorageProperties = AutoStorageBaseProperties & {
  /**
   * The UTC time at which storage keys were last synchronized with the Batch account.
   */
  lastKeySync: Date;
};

/**
 * A VM Family and its associated core quota for the Batch account.
 */
export interface VirtualMachineFamilyCoreQuota {
  /**
   * The Virtual Machine family name.
   */
  readonly name?: string;
  /**
   * The core quota for the VM family for the Batch account.
   */
  readonly coreQuota?: number;
}

/**
 * An error response from the Batch service.
 */
export interface CloudError {
  /**
   * An error response from the Batch service.
   */
  error?: CloudErrorBody;
}

/**
 * An error response from the Batch service.
 */
export interface CloudErrorBody {
  /**
   * An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
   */
  code?: string;
  /**
   * A message describing the error, intended to be suitable for display in a user interface.
   */
  message?: string;
  /**
   * The target of the particular error. For example, the name of the property in error.
   */
  target?: string;
  /**
   * A list of additional details about the error.
   */
  details?: CloudErrorBody[];
}

/**
 * Parameters for updating an Azure Batch account.
 */
export interface BatchAccountUpdateParameters {
  /**
   * The user-specified tags associated with the account.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The properties related to the auto-storage account.
   */
  autoStorage?: AutoStorageBaseProperties;
  encryption?: EncryptionProperties;
}

/**
 * Values returned by the List operation.
 */
export interface BatchAccountListResult {
  /**
   * The collection of Batch accounts returned by the listing operation.
   */
  value?: BatchAccount[];
  /**
   * The continuation token.
   */
  nextLink?: string;
}

/**
 * Parameters supplied to the RegenerateKey operation.
 */
export interface BatchAccountRegenerateKeyParameters {
  /**
   * The type of account key to regenerate.
   */
  keyName: AccountKeyType;
}

/**
 * A set of Azure Batch account keys.
 */
export interface BatchAccountKeys {
  /**
   * The Batch account name.
   */
  readonly accountName?: string;
  /**
   * The primary key associated with the account.
   */
  readonly primary?: string;
  /**
   * The secondary key associated with the account.
   */
  readonly secondary?: string;
}

/**
 * Parameters for an activating an application package.
 */
export interface ActivateApplicationPackageParameters {
  /**
   * The format of the application package binary file.
   */
  format: string;
}

/**
 * A definition of an Azure resource.
 */
export interface ProxyResource {
  /**
   * The ID of the resource.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   */
  readonly type?: string;
  /**
   * The ETag of the resource, used for concurrency statements.
   */
  readonly etag?: string;
}

/**
 * An application package which represents a particular version of an application.
 */
export type ApplicationPackage = ProxyResource & {
  /**
   * The current state of the application package.
   */
  readonly state?: PackageState;
  /**
   * The format of the application package, if the package is active.
   */
  readonly format?: string;
  /**
   * The URL for the application package in Azure Storage.
   */
  readonly storageUrl?: string;
  /**
   * The UTC time at which the Azure Storage URL will expire.
   */
  readonly storageUrlExpiry?: Date;
  /**
   * The time at which the package was last activated, if the package is active.
   */
  readonly lastActivationTime?: Date;
};

/**
 * Contains information about an application in a Batch account.
 */
export type Application = ProxyResource & {
  /**
   * The display name for the application.
   */
  displayName?: string;
  /**
   * A value indicating whether packages within the application may be overwritten using the same version string.
   */
  allowUpdates?: boolean;
  /**
   * The package to use if a client requests the application but does not specify a version. This property can only be set to the name of an existing package.
   */
  defaultVersion?: string;
};

/**
 * The result of performing list applications.
 */
export interface ListApplicationsResult {
  /**
   * The list of applications.
   */
  value?: Application[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The result of performing list application packages.
 */
export interface ListApplicationPackagesResult {
  /**
   * The list of application packages.
   */
  value?: ApplicationPackage[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Quotas associated with a Batch region for a particular subscription.
 */
export interface BatchLocationQuota {
  /**
   * The number of Batch accounts that may be created under the subscription in the specified region.
   */
  readonly accountQuota?: number;
}

/**
 * Result of the request to list REST API operations. It contains a list of operations and a URL nextLink to get the next set of results.
 */
export interface OperationListResult {
  /**
   * The list of operations supported by the resource provider.
   */
  value?: Operation[];
  /**
   * The URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * A REST API operation
 */
export interface Operation {
  /**
   * This is of the format {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * The object that describes the operation.
   */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation.
   */
  origin?: string;
  /**
   * Any object
   */
  properties?: any;
}

/**
 * The object that describes the operation.
 */
export interface OperationDisplay {
  /**
   * Friendly name of the resource provider.
   */
  provider?: string;
  /**
   * For example: read, write, delete, or listKeys/action
   */
  operation?: string;
  /**
   * The resource type on which the operation is performed.
   */
  resource?: string;
  /**
   * The friendly name of the operation
   */
  description?: string;
}

/**
 * Parameters for a check name availability request.
 */
export interface CheckNameAvailabilityParameters {
  /**
   * The name to check for availability
   */
  name: string;
  /**
   * The resource type.
   */
  type: "Microsoft.Batch/batchAccounts";
}

/**
 * The CheckNameAvailability operation response.
 */
export interface CheckNameAvailabilityResult {
  /**
   * Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or invalid and cannot be used.
   */
  readonly nameAvailable?: boolean;
  /**
   * Gets the reason that a Batch account name could not be used. The Reason element is only returned if NameAvailable is false.
   */
  readonly reason?: NameAvailabilityReason;
  /**
   * Gets an error message explaining the Reason value in more detail.
   */
  readonly message?: string;
}

/**
 * Values returned by the List operation.
 */
export interface ListCertificatesResult {
  /**
   * The collection of returned certificates.
   */
  value?: Certificate[];
  /**
   * The continuation token.
   */
  nextLink?: string;
}

/**
 * Contains information about a certificate.
 */
export type Certificate = ProxyResource & {
  /**
   * This must match the first portion of the certificate name. Currently required to be 'SHA1'.
   */
  thumbprintAlgorithm?: string;
  /**
   * This must match the thumbprint from the name.
   */
  thumbprint?: string;
  /**
   * The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
   */
  format?: CertificateFormat;
  readonly provisioningState?: CertificateProvisioningState;
  /**
   * The time at which the certificate entered its current state.
   */
  readonly provisioningStateTransitionTime?: Date;
  /**
   * The previous provisioned state of the resource
   */
  readonly previousProvisioningState?: CertificateProvisioningState;
  /**
   * The time at which the certificate entered its previous state.
   */
  readonly previousProvisioningStateTransitionTime?: Date;
  /**
   * The public key of the certificate.
   */
  readonly publicData?: string;
  /**
   * This is only returned when the certificate provisioningState is 'Failed'.
   */
  readonly deleteCertificateError?: DeleteCertificateError;
};

export interface CertificateBaseProperties {
  /**
   * This must match the first portion of the certificate name. Currently required to be 'SHA1'.
   */
  thumbprintAlgorithm?: string;
  /**
   * This must match the thumbprint from the name.
   */
  thumbprint?: string;
  /**
   * The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
   */
  format?: CertificateFormat;
}

/**
 * Certificate properties.
 */
export type CertificateProperties = CertificateBaseProperties & {
  readonly provisioningState?: CertificateProvisioningState;
  /**
   * The time at which the certificate entered its current state.
   */
  readonly provisioningStateTransitionTime?: Date;
  /**
   * The previous provisioned state of the resource
   */
  readonly previousProvisioningState?: CertificateProvisioningState;
  /**
   * The time at which the certificate entered its previous state.
   */
  readonly previousProvisioningStateTransitionTime?: Date;
  /**
   * The public key of the certificate.
   */
  readonly publicData?: string;
  /**
   * This is only returned when the certificate provisioningState is 'Failed'.
   */
  readonly deleteCertificateError?: DeleteCertificateError;
};

/**
 * An error response from the Batch service.
 */
export interface DeleteCertificateError {
  /**
   * An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
   */
  code: string;
  /**
   * A message describing the error, intended to be suitable for display in a user interface.
   */
  message: string;
  /**
   * The target of the particular error. For example, the name of the property in error.
   */
  target?: string;
  /**
   * A list of additional details about the error.
   */
  details?: DeleteCertificateError[];
}

/**
 * Contains information about a certificate.
 */
export type CertificateCreateOrUpdateParameters = ProxyResource & {
  /**
   * This must match the first portion of the certificate name. Currently required to be 'SHA1'.
   */
  thumbprintAlgorithm?: string;
  /**
   * This must match the thumbprint from the name.
   */
  thumbprint?: string;
  /**
   * The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
   */
  format?: CertificateFormat;
  /**
   * The maximum size is 10KB.
   */
  data?: string;
  /**
   * This must not be specified if the certificate format is Cer.
   */
  password?: string;
};

/**
 * Certificate properties for create operations
 */
export type CertificateCreateOrUpdateProperties = CertificateBaseProperties & {
  /**
   * The maximum size is 10KB.
   */
  data: string;
  /**
   * This must not be specified if the certificate format is Cer.
   */
  password?: string;
};

/**
 * Values returned by the List operation.
 */
export interface ListPrivateLinkResourcesResult {
  /**
   * The collection of returned private link resources.
   */
  value?: PrivateLinkResource[];
  /**
   * The continuation token.
   */
  nextLink?: string;
}

/**
 * Contains information about a private link resource.
 */
export type PrivateLinkResource = ProxyResource & {
  /**
   * The group id is used to establish the private link connection.
   */
  readonly groupId?: string;
  /**
   * The list of required members that are used to establish the private link connection.
   */
  readonly requiredMembers?: string[];
};

/**
 * Values returned by the List operation.
 */
export interface ListPrivateEndpointConnectionsResult {
  /**
   * The collection of returned private endpoint connection.
   */
  value?: PrivateEndpointConnection[];
  /**
   * The continuation token.
   */
  nextLink?: string;
}

/**
 * Contains information about a private link resource.
 */
export type PrivateEndpointConnection = ProxyResource & {
  /**
   * The provisioning state of the private endpoint connection.
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
  /**
   * The private endpoint of the private endpoint connection.
   */
  privateEndpoint?: PrivateEndpoint;
  /**
   * The private link service connection state of the private endpoint connection
   */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
};

/**
 * The private endpoint of the private endpoint connection.
 */
export interface PrivateEndpoint {
  /**
   * The ARM resource identifier of the private endpoint. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/privateEndpoints/{privateEndpoint}.
   */
  readonly id?: string;
}

/**
 * The private link service connection state of the private endpoint connection
 */
export interface PrivateLinkServiceConnectionState {
  /**
   * The status of the Batch private endpoint connection
   */
  status?: PrivateLinkServiceConnectionStatus;
  /**
   * Description of the private Connection state
   */
  description?: string;
  /**
   * Action required on the private connection state
   */
  readonly actionRequired?: string;
}

/**
 * Values returned by the List operation.
 */
export interface ListPoolsResult {
  /**
   * The collection of returned pools.
   */
  value?: Pool[];
  /**
   * The continuation token.
   */
  nextLink?: string;
}

/**
 * Contains information about a pool.
 */
export type Pool = ProxyResource & {
  /**
   * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * This is the last time at which the pool level data, such as the targetDedicatedNodes or autoScaleSettings, changed. It does not factor in node-level changes such as a compute node changing state.
   */
  readonly lastModified?: Date;
  /**
   * The creation time of the pool.
   */
  readonly creationTime?: Date;
  /**
   * The current state of the pool.
   */
  readonly provisioningState?: PoolProvisioningState;
  /**
   * The time at which the pool entered its current state.
   */
  readonly provisioningStateTransitionTime?: Date;
  /**
   * Whether the pool is resizing.
   */
  readonly allocationState?: AllocationState;
  /**
   * The time at which the pool entered its current allocation state.
   */
  readonly allocationStateTransitionTime?: Date;
  /**
   * For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
   */
  vmSize?: string;
  /**
   * Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
   */
  deploymentConfiguration?: DeploymentConfiguration;
  /**
   * The number of compute nodes currently in the pool.
   */
  readonly currentDedicatedNodes?: number;
  /**
   * The number of low priority compute nodes currently in the pool.
   */
  readonly currentLowPriorityNodes?: number;
  /**
   * Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
   */
  scaleSettings?: ScaleSettings;
  /**
   * This property is set only if the pool automatically scales, i.e. autoScaleSettings are used.
   */
  readonly autoScaleRun?: AutoScaleRun;
  /**
   * This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
   */
  interNodeCommunication?: InterNodeCommunicationState;
  /**
   * The network configuration for a pool.
   */
  networkConfiguration?: NetworkConfiguration;
  /**
   * The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
   */
  maxTasksPerNode?: number;
  /**
   * If not specified, the default is spread.
   */
  taskSchedulingPolicy?: TaskSchedulingPolicy;
  /**
   * The list of user accounts to be created on each node in the pool.
   */
  userAccounts?: UserAccount[];
  /**
   * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
  /**
   * In an PATCH (update) operation, this property can be set to an empty object to remove the start task from the pool.
   */
  startTask?: StartTask;
  /**
   * For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
   */
  certificates?: CertificateReference[];
  /**
   * Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references on any given pool.
   */
  applicationPackages?: ApplicationPackageReference[];
  /**
   * The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
   */
  applicationLicenses?: string[];
  /**
   * Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
   */
  readonly resizeOperationStatus?: ResizeOperationStatus;
  /**
   * This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
   */
  mountConfiguration?: MountConfiguration[];
};

/**
 * Deployment configuration properties.
 */
export interface DeploymentConfiguration {
  /**
   * This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
   */
  cloudServiceConfiguration?: CloudServiceConfiguration;
  /**
   * This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
   */
  virtualMachineConfiguration?: VirtualMachineConfiguration;
}

/**
 * The configuration for nodes in a pool based on the Azure Cloud Services platform.
 */
export interface CloudServiceConfiguration {
  /**
   * Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
   */
  osFamily: string;
  /**
   * The default value is * which specifies the latest operating system version for the specified OS family.
   */
  osVersion?: string;
}

/**
 * The configuration for compute nodes in a pool based on the Azure Virtual Machines infrastructure.
 */
export interface VirtualMachineConfiguration {
  /**
   * A reference to an Azure Virtual Machines Marketplace image or the Azure Image resource of a custom Virtual Machine. To get the list of all imageReferences verified by Azure Batch, see the 'List supported node agent SKUs' operation.
   */
  imageReference: ImageReference;
  /**
   * The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
   */
  nodeAgentSkuId: string;
  /**
   * This property must not be specified if the imageReference specifies a Linux OS image.
   */
  windowsConfiguration?: WindowsConfiguration;
  /**
   * This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
   */
  dataDisks?: DataDisk[];
  /**
   * This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
   *
   *  Windows_Server - The on-premises license is for Windows Server.
   *  Windows_Client - The on-premises license is for Windows Client.
   *
   */
  licenseType?: string;
  /**
   * If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
   */
  containerConfiguration?: ContainerConfiguration;
  /**
   * If specified, encryption is performed on each node in the pool during node provisioning.
   */
  diskEncryptionConfiguration?: DiskEncryptionConfiguration;
}

/**
 * A reference to an Azure Virtual Machines Marketplace image or the Azure Image resource of a custom Virtual Machine. To get the list of all imageReferences verified by Azure Batch, see the 'List supported node agent SKUs' operation.
 */
export interface ImageReference {
  /**
   * For example, Canonical or MicrosoftWindowsServer.
   */
  publisher?: string;
  /**
   * For example, UbuntuServer or WindowsServer.
   */
  offer?: string;
  /**
   * For example, 18.04-LTS or 2019-Datacenter.
   */
  sku?: string;
  /**
   * A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
   */
  version?: string;
  /**
   * This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
   */
  id?: string;
}

/**
 * Windows operating system settings to apply to the virtual machine.
 */
export interface WindowsConfiguration {
  /**
   * If omitted, the default value is true.
   */
  enableAutomaticUpdates?: boolean;
}

/**
 * Settings which will be used by the data disks associated to Compute Nodes in the Pool. When using attached data disks, you need to mount and format the disks from within a VM to use them.
 */
export interface DataDisk {
  /**
   * The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
   */
  lun: number;
  /**
   * Values are:
   *
   *  none - The caching mode for the disk is not enabled.
   *  readOnly - The caching mode for the disk is read only.
   *  readWrite - The caching mode for the disk is read and write.
   *
   *  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
   */
  caching?: CachingType;
  /**
   * The initial disk size in GB when creating new data disk.
   */
  diskSizeGB: number;
  /**
   * If omitted, the default is "Standard_LRS". Values are:
   *
   *  Standard_LRS - The data disk should use standard locally redundant storage.
   *  Premium_LRS - The data disk should use premium locally redundant storage.
   */
  storageAccountType?: StorageAccountType;
}

/**
 * The configuration for container-enabled pools.
 */
export interface ContainerConfiguration {
  /**
   * The container technology to be used.
   */
  type: "DockerCompatible";
  /**
   * This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
   */
  containerImageNames?: string[];
  /**
   * If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
   */
  containerRegistries?: ContainerRegistry[];
}

/**
 * A private container registry.
 */
export interface ContainerRegistry {
  /**
   * If omitted, the default is "docker.io".
   */
  registryServer?: string;
  /**
   * The user name to log into the registry server.
   */
  userName: string;
  /**
   * The password to log into the registry server.
   */
  password: string;
}

/**
 * The disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
 */
export interface DiskEncryptionConfiguration {
  /**
   * On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified.
   */
  targets?: DiskEncryptionTarget[];
}

/**
 * Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
 */
export interface ScaleSettings {
  /**
   * This property and autoScale are mutually exclusive and one of the properties must be specified.
   */
  fixedScale?: FixedScaleSettings;
  /**
   * This property and fixedScale are mutually exclusive and one of the properties must be specified.
   */
  autoScale?: AutoScaleSettings;
}

/**
 * Fixed scale settings for the pool.
 */
export interface FixedScaleSettings {
  /**
   * The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  resizeTimeout?: string;
  /**
   * At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
   */
  targetDedicatedNodes?: number;
  /**
   * At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
   */
  targetLowPriorityNodes?: number;
  /**
   * If omitted, the default value is Requeue.
   */
  nodeDeallocationOption?: ComputeNodeDeallocationOption;
}

/**
 * AutoScale settings for the pool.
 */
export interface AutoScaleSettings {
  /**
   * A formula for the desired number of compute nodes in the pool.
   */
  formula: string;
  /**
   * If omitted, the default value is 15 minutes (PT15M).
   */
  evaluationInterval?: string;
}

/**
 * The results and errors from an execution of a pool autoscale formula.
 */
export interface AutoScaleRun {
  /**
   * The time at which the autoscale formula was last evaluated.
   */
  evaluationTime: Date;
  /**
   * Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
   */
  results?: string;
  /**
   * An error that occurred when autoscaling a pool.
   */
  error?: AutoScaleRunError;
}

/**
 * An error that occurred when autoscaling a pool.
 */
export interface AutoScaleRunError {
  /**
   * An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
   */
  code: string;
  /**
   * A message describing the error, intended to be suitable for display in a user interface.
   */
  message: string;
  /**
   * Additional details about the error.
   */
  details?: AutoScaleRunError[];
}

/**
 * The network configuration for a pool.
 */
export interface NetworkConfiguration {
  /**
   * The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
   */
  subnetId?: string;
  /**
   * Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
   */
  endpointConfiguration?: PoolEndpointConfiguration;
  /**
   * This property is only supported on Pools with the virtualMachineConfiguration property.
   */
  publicIPAddressConfiguration?: PublicIPAddressConfiguration;
}

/**
 * The endpoint configuration for a pool.
 */
export interface PoolEndpointConfiguration {
  /**
   * The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400.
   */
  inboundNatPools: InboundNatPool[];
}

/**
 * A inbound NAT pool that can be used to address specific ports on compute nodes in a Batch pool externally.
 */
export interface InboundNatPool {
  /**
   * The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
   */
  name: string;
  /**
   * The protocol of the endpoint.
   */
  protocol: InboundEndpointProtocol;
  /**
   * This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
   */
  backendPort: number;
  /**
   * Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
   */
  frontendPortRangeStart: number;
  /**
   * Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
   */
  frontendPortRangeEnd: number;
  /**
   * The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
   */
  networkSecurityGroupRules?: NetworkSecurityGroupRule[];
}

/**
 * A network security group rule to apply to an inbound endpoint.
 */
export interface NetworkSecurityGroupRule {
  /**
   * Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
   */
  priority: number;
  /**
   * The action that should be taken for a specified IP address, subnet range or tag.
   */
  access: NetworkSecurityGroupRuleAccess;
  /**
   * Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
   */
  sourceAddressPrefix: string;
  /**
   * Valid values are '*' (for all ports 0 - 65535) or arrays of ports or port ranges (i.e. 100-200). The ports should in the range of 0 to 65535 and the port ranges or ports can't overlap. If any other values are provided the request fails with HTTP status code 400. Default value will be *.
   */
  sourcePortRanges?: string[];
}

/**
 * The public IP Address configuration of the networking configuration of a Pool.
 */
export interface PublicIPAddressConfiguration {
  /**
   * The default value is BatchManaged
   */
  provision?: IPAddressProvisioningType;
  /**
   * The number of IPs specified here limits the maximum size of the Pool - 50 dedicated nodes or 20 low-priority nodes can be allocated for each public IP. For example, a pool needing 150 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
   */
  ipAddressIds?: string[];
}

/**
 * Specifies how tasks should be distributed across compute nodes.
 */
export interface TaskSchedulingPolicy {
  /**
   * How tasks should be distributed across compute nodes.
   */
  nodeFillType: ComputeNodeFillType;
}

/**
 * Properties used to create a user on an Azure Batch node.
 */
export interface UserAccount {
  /**
   * The name of the user account.
   */
  name: string;
  /**
   * The password for the user account.
   */
  password: string;
  /**
   * nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
   */
  elevationLevel?: ElevationLevel;
  /**
   * This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
   */
  linuxUserConfiguration?: LinuxUserConfiguration;
  /**
   * This property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user is created with the default options.
   */
  windowsUserConfiguration?: WindowsUserConfiguration;
}

/**
 * Properties used to create a user account on a Linux node.
 */
export interface LinuxUserConfiguration {
  /**
   * The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
   */
  uid?: number;
  /**
   * The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
   */
  gid?: number;
  /**
   * The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
   */
  sshPrivateKey?: string;
}

/**
 * Properties used to create a user account on a Windows node.
 */
export interface WindowsUserConfiguration {
  /**
   * Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for CloudServiceConfiguration pools is batch mode.
   */
  loginMode?: LoginMode;
}

/**
 * The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
 */
export interface MetadataItem {
  /**
   * The name of the metadata item.
   */
  name: string;
  /**
   * The value of the metadata item.
   */
  value: string;
}

/**
 * In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start tasks which create breakaway process or install/launch services from the start task working directory, as this will block Batch from being able to re-run the start task.
 */
export interface StartTask {
  /**
   * The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
   */
  commandLine?: string;
  /**
   * A list of files that the Batch service will download to the compute node before running the command line.
   */
  resourceFiles?: ResourceFile[];
  /**
   * A list of environment variable settings for the start task.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * If omitted, the task runs as a non-administrative user unique to the task.
   */
  userIdentity?: UserIdentity;
  /**
   * The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
   */
  maxTaskRetryCount?: number;
  /**
   * If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.
   */
  waitForSuccess?: boolean;
  /**
   * When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
   */
  containerSettings?: TaskContainerSettings;
}

/**
 * A single file or multiple files to be downloaded to a compute node.
 */
export interface ResourceFile {
  /**
   * The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
   */
  autoStorageContainerName?: string;
  /**
   * The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the blob, or set the ACL for the blob or its container to allow public access.
   */
  storageContainerUrl?: string;
  /**
   * The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL is Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
   */
  httpUrl?: string;
  /**
   * The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
   */
  blobPrefix?: string;
  /**
   * If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..').
   */
  filePath?: string;
  /**
   * This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
   */
  fileMode?: string;
}

/**
 * An environment variable to be set on a task process.
 */
export interface EnvironmentSetting {
  /**
   * The name of the environment variable.
   */
  name: string;
  /**
   * The value of the environment variable.
   */
  value?: string;
}

/**
 * Specify either the userName or autoUser property, but not both.
 */
export interface UserIdentity {
  /**
   * The userName and autoUser properties are mutually exclusive; you must specify one but not both.
   */
  userName?: string;
  /**
   * The userName and autoUser properties are mutually exclusive; you must specify one but not both.
   */
  autoUser?: AutoUserSpecification;
}

/**
 * Specifies the parameters for the auto user that runs a task on the Batch service.
 */
export interface AutoUserSpecification {
  /**
   * The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.
   */
  scope?: AutoUserScope;
  /**
   * The default value is nonAdmin.
   */
  elevationLevel?: ElevationLevel;
}

/**
 * The container settings for a task.
 */
export interface TaskContainerSettings {
  /**
   * These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
   */
  containerRunOptions?: string;
  /**
   * This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
   */
  imageName: string;
  /**
   * This setting can be omitted if was already provided at pool creation.
   */
  registry?: ContainerRegistry;
  /**
   * A flag to indicate where the container task working directory is. The default is 'taskWorkingDirectory'.
   */
  workingDirectory?: ContainerWorkingDirectory;
}

/**
 * A reference to a certificate to be installed on compute nodes in a pool. This must exist inside the same account as the pool.
 */
export interface CertificateReference {
  /**
   * The fully qualified ID of the certificate to install on the pool. This must be inside the same batch account as the pool.
   */
  id: string;
  /**
   * The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
   */
  storeLocation?: CertificateStoreLocation;
  /**
   * This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
   */
  storeName?: string;
  /**
   * Which user accounts on the compute node should have access to the private data of the certificate.
   */
  visibility?: CertificateVisibility[];
}

/**
 * Link to an application package inside the batch account
 */
export interface ApplicationPackageReference {
  /**
   * The ID of the application package to install. This must be inside the same batch account as the pool. This can either be a reference to a specific version or the default version if one exists.
   */
  id: string;
  /**
   * If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409.
   */
  version?: string;
}

/**
 * Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
 */
export interface ResizeOperationStatus {
  /**
   * The desired number of dedicated compute nodes in the pool.
   */
  targetDedicatedNodes?: number;
  /**
   * The desired number of low-priority compute nodes in the pool.
   */
  targetLowPriorityNodes?: number;
  /**
   * The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  resizeTimeout?: string;
  /**
   * The default value is requeue.
   */
  nodeDeallocationOption?: ComputeNodeDeallocationOption;
  /**
   * The time when this resize operation was started.
   */
  startTime?: Date;
  /**
   * This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.
   */
  errors?: ResizeError[];
}

/**
 * An error that occurred when resizing a pool.
 */
export interface ResizeError {
  /**
   * An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
   */
  code: string;
  /**
   * A message describing the error, intended to be suitable for display in a user interface.
   */
  message: string;
  /**
   * Additional details about the error.
   */
  details?: ResizeError[];
}

/**
 * The file system to mount on each node.
 */
export interface MountConfiguration {
  /**
   * This property is mutually exclusive with all other properties.
   */
  azureBlobFileSystemConfiguration?: AzureBlobFileSystemConfiguration;
  /**
   * This property is mutually exclusive with all other properties.
   */
  nfsMountConfiguration?: NFSMountConfiguration;
  /**
   * This property is mutually exclusive with all other properties.
   */
  cifsMountConfiguration?: CifsMountConfiguration;
  /**
   * This property is mutually exclusive with all other properties.
   */
  azureFileShareConfiguration?: AzureFileShareConfiguration;
}

/**
 * Information used to connect to an Azure Storage Container using Blobfuse.
 */
export interface AzureBlobFileSystemConfiguration {
  /**
   * The Azure Storage Account name.
   */
  accountName: string;
  /**
   * The Azure Blob Storage Container name.
   */
  containerName: string;
  /**
   * This property is mutually exclusive with sasKey and one must be specified.
   */
  accountKey?: string;
  /**
   * This property is mutually exclusive with accountKey and one must be specified.
   */
  sasKey?: string;
  /**
   * These are 'net use' options in Windows and 'mount' options in Linux.
   */
  blobfuseOptions?: string;
  /**
   * All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
   */
  relativeMountPath: string;
}

/**
 * Information used to connect to an NFS file system.
 */
export interface NFSMountConfiguration {
  /**
   * The URI of the file system to mount.
   */
  source: string;
  /**
   * All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
   */
  relativeMountPath: string;
  /**
   * These are 'net use' options in Windows and 'mount' options in Linux.
   */
  mountOptions?: string;
}

/**
 * Information used to connect to a CIFS file system.
 */
export interface CifsMountConfiguration {
  /**
   * The user to use for authentication against the CIFS file system.
   */
  username: string;
  /**
   * The URI of the file system to mount.
   */
  source: string;
  /**
   * All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
   */
  relativeMountPath: string;
  /**
   * These are 'net use' options in Windows and 'mount' options in Linux.
   */
  mountOptions?: string;
  /**
   * The password to use for authentication against the CIFS file system.
   */
  password: string;
}

/**
 * Information used to connect to an Azure Fileshare.
 */
export interface AzureFileShareConfiguration {
  /**
   * The Azure Storage account name.
   */
  accountName: string;
  /**
   * This is of the form 'https://{account}.file.core.windows.net/'.
   */
  azureFileUrl: string;
  /**
   * The Azure Storage account key.
   */
  accountKey: string;
  /**
   * All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
   */
  relativeMountPath: string;
  /**
   * These are 'net use' options in Windows and 'mount' options in Linux.
   */
  mountOptions?: string;
}

/**
 * Defines headers for certificate_create operation.
 */
export interface CertificateCreateHeaders {
  eTag?: string;
}

/**
 * Defines headers for certificate_update operation.
 */
export interface CertificateUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for certificate_get operation.
 */
export interface CertificateGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for certificate_cancelDeletion operation.
 */
export interface CertificateCancelDeletionHeaders {
  eTag?: string;
}

/**
 * Defines headers for privateEndpointConnection_update operation.
 */
export interface PrivateEndpointConnectionUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for pool_create operation.
 */
export interface PoolCreateHeaders {
  eTag?: string;
}

/**
 * Defines headers for pool_update operation.
 */
export interface PoolUpdateHeaders {
  eTag?: string;
}

/**
 * Defines headers for pool_get operation.
 */
export interface PoolGetHeaders {
  eTag?: string;
}

/**
 * Defines headers for pool_disableAutoScale operation.
 */
export interface PoolDisableAutoScaleHeaders {
  eTag?: string;
}

/**
 * Defines headers for pool_stopResize operation.
 */
export interface PoolStopResizeHeaders {
  eTag?: string;
}

/**
 * Defines values for PoolAllocationMode.
 */
export type PoolAllocationMode = "BatchService" | "UserSubscription";
/**
 * Defines values for PublicNetworkAccessType.
 */
export type PublicNetworkAccessType = "Enabled" | "Disabled";
/**
 * Defines values for KeySource.
 */
export type KeySource = "Microsoft.Batch" | "Microsoft.KeyVault";
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState =
  | "Invalid"
  | "Creating"
  | "Deleting"
  | "Succeeded"
  | "Failed"
  | "Cancelled";
/**
 * Defines values for AccountKeyType.
 */
export type AccountKeyType = "Primary" | "Secondary";
/**
 * Defines values for PackageState.
 */
export type PackageState = "Pending" | "Active";
/**
 * Defines values for NameAvailabilityReason.
 */
export type NameAvailabilityReason = "Invalid" | "AlreadyExists";
/**
 * Defines values for CertificateFormat.
 */
export type CertificateFormat = "Pfx" | "Cer";
/**
 * Defines values for CertificateProvisioningState.
 */
export type CertificateProvisioningState = "Succeeded" | "Deleting" | "Failed";
/**
 * Defines values for PrivateEndpointConnectionProvisioningState.
 */
export type PrivateEndpointConnectionProvisioningState =
  | "Succeeded"
  | "Updating"
  | "Failed";
/**
 * Defines values for PrivateLinkServiceConnectionStatus.
 */
export type PrivateLinkServiceConnectionStatus =
  | "Approved"
  | "Pending"
  | "Rejected"
  | "Disconnected";
/**
 * Defines values for PoolProvisioningState.
 */
export type PoolProvisioningState = "Succeeded" | "Deleting";
/**
 * Defines values for AllocationState.
 */
export type AllocationState = "Steady" | "Resizing" | "Stopping";
/**
 * Defines values for CachingType.
 */
export type CachingType = "None" | "ReadOnly" | "ReadWrite";
/**
 * Defines values for StorageAccountType.
 */
export type StorageAccountType = "Standard_LRS" | "Premium_LRS";
/**
 * Defines values for DiskEncryptionTarget.
 */
export type DiskEncryptionTarget = "OsDisk" | "TemporaryDisk";
/**
 * Defines values for ComputeNodeDeallocationOption.
 */
export type ComputeNodeDeallocationOption =
  | "Requeue"
  | "Terminate"
  | "TaskCompletion"
  | "RetainedData";
/**
 * Defines values for InterNodeCommunicationState.
 */
export type InterNodeCommunicationState = "Enabled" | "Disabled";
/**
 * Defines values for InboundEndpointProtocol.
 */
export type InboundEndpointProtocol = "TCP" | "UDP";
/**
 * Defines values for NetworkSecurityGroupRuleAccess.
 */
export type NetworkSecurityGroupRuleAccess = "Allow" | "Deny";
/**
 * Defines values for IPAddressProvisioningType.
 */
export type IPAddressProvisioningType =
  | "BatchManaged"
  | "UserManaged"
  | "NoPublicIPAddresses";
/**
 * Defines values for ComputeNodeFillType.
 */
export type ComputeNodeFillType = "Spread" | "Pack";
/**
 * Defines values for ElevationLevel.
 */
export type ElevationLevel = "NonAdmin" | "Admin";
/**
 * Defines values for LoginMode.
 */
export type LoginMode = "Batch" | "Interactive";
/**
 * Defines values for AutoUserScope.
 */
export type AutoUserScope = "Task" | "Pool";
/**
 * Defines values for ContainerWorkingDirectory.
 */
export type ContainerWorkingDirectory =
  | "TaskWorkingDirectory"
  | "ContainerImageDefault";
/**
 * Defines values for CertificateStoreLocation.
 */
export type CertificateStoreLocation = "CurrentUser" | "LocalMachine";
/**
 * Defines values for CertificateVisibility.
 */
export type CertificateVisibility = "StartTask" | "Task" | "RemoteUser";

/**
 * Contains response data for the create operation.
 */
export type BatchAccountCreateResponse = BatchAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BatchAccount;
  };
};

/**
 * Contains response data for the update operation.
 */
export type BatchAccountUpdateResponse = BatchAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BatchAccount;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BatchAccountGetResponse = BatchAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BatchAccount;
  };
};

/**
 * Contains response data for the list operation.
 */
export type BatchAccountListResponse = BatchAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BatchAccountListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type BatchAccountListByResourceGroupResponse = BatchAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BatchAccountListResult;
  };
};

/**
 * Contains response data for the regenerateKey operation.
 */
export type BatchAccountRegenerateKeyResponse = BatchAccountKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BatchAccountKeys;
  };
};

/**
 * Contains response data for the getKeys operation.
 */
export type BatchAccountGetKeysResponse = BatchAccountKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BatchAccountKeys;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type BatchAccountListNextResponse = BatchAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BatchAccountListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type BatchAccountListByResourceGroupNextResponse = BatchAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BatchAccountListResult;
  };
};

/**
 * Contains response data for the activate operation.
 */
export type ApplicationPackageActivateResponse = ApplicationPackage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationPackage;
  };
};

/**
 * Optional parameters.
 */
export interface ApplicationPackageCreateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The parameters for the request.
   */
  parameters?: ApplicationPackage;
}

/**
 * Contains response data for the create operation.
 */
export type ApplicationPackageCreateResponse = ApplicationPackage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationPackage;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApplicationPackageGetResponse = ApplicationPackage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationPackage;
  };
};

/**
 * Optional parameters.
 */
export interface ApplicationPackageListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The maximum number of items to return in the response.
   */
  maxresults?: number;
}

/**
 * Contains response data for the list operation.
 */
export type ApplicationPackageListResponse = ListApplicationPackagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListApplicationPackagesResult;
  };
};

/**
 * Optional parameters.
 */
export interface ApplicationPackageListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The maximum number of items to return in the response.
   */
  maxresults?: number;
}

/**
 * Contains response data for the listNext operation.
 */
export type ApplicationPackageListNextResponse = ListApplicationPackagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListApplicationPackagesResult;
  };
};

/**
 * Optional parameters.
 */
export interface ApplicationCreateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The parameters for the request.
   */
  parameters?: Application;
}

/**
 * Contains response data for the create operation.
 */
export type ApplicationCreateResponse = Application & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Application;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ApplicationGetResponse = Application & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Application;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ApplicationUpdateResponse = Application & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Application;
  };
};

/**
 * Optional parameters.
 */
export interface ApplicationListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The maximum number of items to return in the response.
   */
  maxresults?: number;
}

/**
 * Contains response data for the list operation.
 */
export type ApplicationListResponse = ListApplicationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListApplicationsResult;
  };
};

/**
 * Optional parameters.
 */
export interface ApplicationListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The maximum number of items to return in the response.
   */
  maxresults?: number;
}

/**
 * Contains response data for the listNext operation.
 */
export type ApplicationListNextResponse = ListApplicationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListApplicationsResult;
  };
};

/**
 * Contains response data for the getQuotas operation.
 */
export type LocationGetQuotasResponse = BatchLocationQuota & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BatchLocationQuota;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type LocationCheckNameAvailabilityResponse = CheckNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameAvailabilityResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface CertificateListByBatchAccountOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The maximum number of items to return in the response.
   */
  maxresults?: number;
  /**
   * Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection.
   */
  select?: string;
  /**
   * OData filter expression. Valid properties for filtering are "properties/provisioningState", "properties/provisioningStateTransitionTime", "name".
   */
  filter?: string;
}

/**
 * Contains response data for the listByBatchAccount operation.
 */
export type CertificateListByBatchAccountResponse = ListCertificatesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListCertificatesResult;
  };
};

/**
 * Optional parameters.
 */
export interface CertificateCreateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The entity state (ETag) version of the certificate to update. A value of "*" can be used to apply the operation only if the certificate already exists. If omitted, this operation will always be applied.
   */
  ifMatch?: string;
  /**
   * Set to '*' to allow a new certificate to be created, but to prevent updating an existing certificate. Other values will be ignored.
   */
  ifNoneMatch?: string;
}

/**
 * Contains response data for the create operation.
 */
export type CertificateCreateResponse = CertificateCreateHeaders &
  Certificate & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Certificate;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateCreateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface CertificateUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The entity state (ETag) version of the certificate to update. This value can be omitted or set to "*" to apply the operation unconditionally.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the update operation.
 */
export type CertificateUpdateResponse = CertificateUpdateHeaders &
  Certificate & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Certificate;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateUpdateHeaders;
    };
  };

/**
 * Contains response data for the get operation.
 */
export type CertificateGetResponse = CertificateGetHeaders &
  Certificate & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Certificate;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateGetHeaders;
    };
  };

/**
 * Contains response data for the cancelDeletion operation.
 */
export type CertificateCancelDeletionResponse = CertificateCancelDeletionHeaders &
  Certificate & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Certificate;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateCancelDeletionHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface CertificateListByBatchAccountNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The maximum number of items to return in the response.
   */
  maxresults?: number;
  /**
   * Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection.
   */
  select?: string;
  /**
   * OData filter expression. Valid properties for filtering are "properties/provisioningState", "properties/provisioningStateTransitionTime", "name".
   */
  filter?: string;
}

/**
 * Contains response data for the listByBatchAccountNext operation.
 */
export type CertificateListByBatchAccountNextResponse = ListCertificatesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListCertificatesResult;
  };
};

/**
 * Optional parameters.
 */
export interface PrivateLinkResourceListByBatchAccountOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The maximum number of items to return in the response.
   */
  maxresults?: number;
}

/**
 * Contains response data for the listByBatchAccount operation.
 */
export type PrivateLinkResourceListByBatchAccountResponse = ListPrivateLinkResourcesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListPrivateLinkResourcesResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PrivateLinkResourceGetResponse = PrivateLinkResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkResource;
  };
};

/**
 * Optional parameters.
 */
export interface PrivateLinkResourceListByBatchAccountNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The maximum number of items to return in the response.
   */
  maxresults?: number;
}

/**
 * Contains response data for the listByBatchAccountNext operation.
 */
export type PrivateLinkResourceListByBatchAccountNextResponse = ListPrivateLinkResourcesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListPrivateLinkResourcesResult;
  };
};

/**
 * Optional parameters.
 */
export interface PrivateEndpointConnectionListByBatchAccountOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The maximum number of items to return in the response.
   */
  maxresults?: number;
}

/**
 * Contains response data for the listByBatchAccount operation.
 */
export type PrivateEndpointConnectionListByBatchAccountResponse = ListPrivateEndpointConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListPrivateEndpointConnectionsResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PrivateEndpointConnectionGetResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnection;
  };
};

/**
 * Optional parameters.
 */
export interface PrivateEndpointConnectionUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The state (ETag) version of the private endpoint connection to update. This value can be omitted or set to "*" to apply the operation unconditionally.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the update operation.
 */
export type PrivateEndpointConnectionUpdateResponse = PrivateEndpointConnectionUpdateHeaders &
  PrivateEndpointConnection & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateEndpointConnection;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PrivateEndpointConnectionUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface PrivateEndpointConnectionListByBatchAccountNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The maximum number of items to return in the response.
   */
  maxresults?: number;
}

/**
 * Contains response data for the listByBatchAccountNext operation.
 */
export type PrivateEndpointConnectionListByBatchAccountNextResponse = ListPrivateEndpointConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListPrivateEndpointConnectionsResult;
  };
};

/**
 * Optional parameters.
 */
export interface PoolListByBatchAccountOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The maximum number of items to return in the response.
   */
  maxresults?: number;
  /**
   * Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection.
   */
  select?: string;
  /**
   * OData filter expression. Valid properties for filtering are:
   *
   *  name
   *  properties/allocationState
   *  properties/allocationStateTransitionTime
   *  properties/creationTime
   *  properties/provisioningState
   *  properties/provisioningStateTransitionTime
   *  properties/lastModified
   *  properties/vmSize
   *  properties/interNodeCommunication
   *  properties/scaleSettings/autoScale
   *  properties/scaleSettings/fixedScale
   */
  filter?: string;
}

/**
 * Contains response data for the listByBatchAccount operation.
 */
export type PoolListByBatchAccountResponse = ListPoolsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListPoolsResult;
  };
};

/**
 * Optional parameters.
 */
export interface PoolCreateOptionalParams extends coreHttp.OperationOptions {
  /**
   * The entity state (ETag) version of the pool to update. A value of "*" can be used to apply the operation only if the pool already exists. If omitted, this operation will always be applied.
   */
  ifMatch?: string;
  /**
   * Set to '*' to allow a new pool to be created, but to prevent updating an existing pool. Other values will be ignored.
   */
  ifNoneMatch?: string;
}

/**
 * Contains response data for the create operation.
 */
export type PoolCreateResponse = PoolCreateHeaders &
  Pool & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Pool;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolCreateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface PoolUpdateOptionalParams extends coreHttp.OperationOptions {
  /**
   * The entity state (ETag) version of the pool to update. This value can be omitted or set to "*" to apply the operation unconditionally.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the update operation.
 */
export type PoolUpdateResponse = PoolUpdateHeaders &
  Pool & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Pool;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolUpdateHeaders;
    };
  };

/**
 * Contains response data for the get operation.
 */
export type PoolGetResponse = PoolGetHeaders &
  Pool & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Pool;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolGetHeaders;
    };
  };

/**
 * Contains response data for the disableAutoScale operation.
 */
export type PoolDisableAutoScaleResponse = PoolDisableAutoScaleHeaders &
  Pool & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Pool;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolDisableAutoScaleHeaders;
    };
  };

/**
 * Contains response data for the stopResize operation.
 */
export type PoolStopResizeResponse = PoolStopResizeHeaders &
  Pool & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Pool;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolStopResizeHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface PoolListByBatchAccountNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The maximum number of items to return in the response.
   */
  maxresults?: number;
  /**
   * Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection.
   */
  select?: string;
  /**
   * OData filter expression. Valid properties for filtering are:
   *
   *  name
   *  properties/allocationState
   *  properties/allocationStateTransitionTime
   *  properties/creationTime
   *  properties/provisioningState
   *  properties/provisioningStateTransitionTime
   *  properties/lastModified
   *  properties/vmSize
   *  properties/interNodeCommunication
   *  properties/scaleSettings/autoScale
   *  properties/scaleSettings/fixedScale
   */
  filter?: string;
}

/**
 * Contains response data for the listByBatchAccountNext operation.
 */
export type PoolListByBatchAccountNextResponse = ListPoolsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListPoolsResult;
  };
};

/**
 * Optional parameters.
 */
export interface BatchManagementOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
