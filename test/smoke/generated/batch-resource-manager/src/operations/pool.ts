/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BatchManagement } from "../batchManagement";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  PoolListByBatchAccountOptionalParams,
  PoolListByBatchAccountResponse,
  Pool as PoolModel,
  PoolCreateOptionalParams,
  PoolCreateResponse,
  PoolUpdateOptionalParams,
  PoolUpdateResponse,
  PoolGetResponse,
  PoolDisableAutoScaleResponse,
  PoolStopResizeResponse,
  PoolListByBatchAccountNextOptionalParams,
  PoolListByBatchAccountNextResponse
} from "../models";

/**
 * Class representing a Pool.
 */
export class Pool {
  private readonly client: BatchManagement;

  /**
   * Initialize a new instance of the class Pool class.
   * @param client Reference to the service client
   */
  constructor(client: BatchManagement) {
    this.client = client;
  }

  /**
   * Lists all of the pools in the specified account.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param options The options parameters.
   */
  listByBatchAccount(
    resourceGroupName: string,
    accountName: string,
    options?: PoolListByBatchAccountOptionalParams
  ): Promise<PoolListByBatchAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options: operationOptions },
      listByBatchAccountOperationSpec
    ) as Promise<PoolListByBatchAccountResponse>;
  }

  /**
   * Creates a new pool inside the specified account.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param parameters Additional parameters for pool creation.
   * @param poolName The pool name. This must be unique within the account.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    accountName: string,
    parameters: PoolModel,
    poolName: string,
    options?: PoolCreateOptionalParams
  ): Promise<LROPoller<PoolCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      parameters,
      poolName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        PoolCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Updates the properties of an existing pool.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param poolName The pool name. This must be unique within the account.
   * @param parameters Pool properties that should be updated. Properties that are supplied will be
   *                   updated, any property not supplied will be unchanged.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    parameters: PoolModel,
    options?: PoolUpdateOptionalParams
  ): Promise<PoolUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        poolName,
        parameters,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<PoolUpdateResponse>;
  }

  /**
   * Deletes the specified pool.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param poolName The pool name. This must be unique within the account.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      poolName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets information about the specified pool.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param poolName The pool name. This must be unique within the account.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PoolGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, poolName, options: operationOptions },
      getOperationSpec
    ) as Promise<PoolGetResponse>;
  }

  /**
   * Disables automatic scaling for a pool.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param poolName The pool name. This must be unique within the account.
   * @param options The options parameters.
   */
  disableAutoScale(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PoolDisableAutoScaleResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, poolName, options: operationOptions },
      disableAutoScaleOperationSpec
    ) as Promise<PoolDisableAutoScaleResponse>;
  }

  /**
   * This does not restore the pool to its previous state before the resize operation: it only stops any
   * further changes being made, and the pool maintains its current state. After stopping, the pool
   * stabilizes at the number of nodes it was at when the stop operation was done. During the stop
   * operation, the pool allocation state changes first to stopping and then to steady. A resize
   * operation need not be an explicit resize pool request; this API can also be used to halt the initial
   * sizing of the pool when it is created.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param poolName The pool name. This must be unique within the account.
   * @param options The options parameters.
   */
  stopResize(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PoolStopResizeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, poolName, options: operationOptions },
      stopResizeOperationSpec
    ) as Promise<PoolStopResizeResponse>;
  }

  /**
   * ListByBatchAccountNext
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param nextLink The nextLink from the previous successful call to the ListByBatchAccount method.
   * @param options The options parameters.
   */
  listByBatchAccountNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: PoolListByBatchAccountNextOptionalParams
  ): Promise<PoolListByBatchAccountNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options: operationOptions },
      listByBatchAccountNextOperationSpec
    ) as Promise<PoolListByBatchAccountNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByBatchAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListPoolsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxresults,
    Parameters.select,
    Parameters.filter1
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Pool,
      headersMapper: Mappers.PoolCreateHeaders
    },
    201: {
      bodyMapper: Mappers.Pool,
      headersMapper: Mappers.PoolCreateHeaders
    },
    202: {
      bodyMapper: Mappers.Pool,
      headersMapper: Mappers.PoolCreateHeaders
    },
    204: {
      bodyMapper: Mappers.Pool,
      headersMapper: Mappers.PoolCreateHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.poolName
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.ifMatch3,
    Parameters.ifNoneMatch1
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Pool,
      headersMapper: Mappers.PoolUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.poolName
  ],
  headerParameters: [Parameters.contentType, Parameters.ifMatch4],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.poolName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Pool,
      headersMapper: Mappers.PoolGetHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.poolName
  ],
  serializer
};
const disableAutoScaleOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}/disableAutoScale",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Pool,
      headersMapper: Mappers.PoolDisableAutoScaleHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.poolName
  ],
  serializer
};
const stopResizeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}/stopResize",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Pool,
      headersMapper: Mappers.PoolStopResizeHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.poolName
  ],
  serializer
};
const listByBatchAccountNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListPoolsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxresults,
    Parameters.select,
    Parameters.filter1
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.nextLink2
  ],
  serializer
};
