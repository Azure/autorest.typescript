/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BatchManagement } from "../batchManagement";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  CertificateListByBatchAccountOptionalParams,
  CertificateListByBatchAccountResponse,
  CertificateCreateOrUpdateParameters,
  CertificateCreateOptionalParams,
  CertificateCreateResponse,
  CertificateUpdateOptionalParams,
  CertificateUpdateResponse,
  CertificateGetResponse,
  CertificateCancelDeletionResponse,
  CertificateListByBatchAccountNextOptionalParams,
  CertificateListByBatchAccountNextResponse
} from "../models";

/**
 * Class representing a Certificate.
 */
export class Certificate {
  private readonly client: BatchManagement;

  /**
   * Initialize a new instance of the class Certificate class.
   * @param client Reference to the service client
   */
  constructor(client: BatchManagement) {
    this.client = client;
  }

  /**
   * Lists all of the certificates in the specified account.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param options The options parameters.
   */
  listByBatchAccount(
    resourceGroupName: string,
    accountName: string,
    options?: CertificateListByBatchAccountOptionalParams
  ): Promise<CertificateListByBatchAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options: operationOptions },
      listByBatchAccountOperationSpec
    ) as Promise<CertificateListByBatchAccountResponse>;
  }

  /**
   * Creates a new certificate inside the specified account.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param parameters Additional parameters for certificate creation.
   * @param certificateName The identifier for the certificate. This must be made up of algorithm and
   *                        thumbprint separated by a dash, and must match the certificate data in the request. For example
   *                        SHA1-a3d1c5.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    accountName: string,
    parameters: CertificateCreateOrUpdateParameters,
    certificateName: string,
    options?: CertificateCreateOptionalParams
  ): Promise<LROPoller<CertificateCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      parameters,
      certificateName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CertificateCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Updates the properties of an existing certificate.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param certificateName The identifier for the certificate. This must be made up of algorithm and
   *                        thumbprint separated by a dash, and must match the certificate data in the request. For example
   *                        SHA1-a3d1c5.
   * @param parameters Certificate entity to update.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    certificateName: string,
    parameters: CertificateCreateOrUpdateParameters,
    options?: CertificateUpdateOptionalParams
  ): Promise<CertificateUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        certificateName,
        parameters,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<CertificateUpdateResponse>;
  }

  /**
   * Deletes the specified certificate.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param certificateName The identifier for the certificate. This must be made up of algorithm and
   *                        thumbprint separated by a dash, and must match the certificate data in the request. For example
   *                        SHA1-a3d1c5.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    accountName: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      certificateName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets information about the specified certificate.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param certificateName The identifier for the certificate. This must be made up of algorithm and
   *                        thumbprint separated by a dash, and must match the certificate data in the request. For example
   *                        SHA1-a3d1c5.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CertificateGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        certificateName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<CertificateGetResponse>;
  }

  /**
   * If you try to delete a certificate that is being used by a pool or compute node, the status of the
   * certificate changes to deleteFailed. If you decide that you want to continue using the certificate,
   * you can use this operation to set the status of the certificate back to active. If you intend to
   * delete the certificate, you do not need to run this operation after the deletion failed. You must
   * make sure that the certificate is not being used by any resources, and then you can try again to
   * delete the certificate.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param certificateName The identifier for the certificate. This must be made up of algorithm and
   *                        thumbprint separated by a dash, and must match the certificate data in the request. For example
   *                        SHA1-a3d1c5.
   * @param options The options parameters.
   */
  cancelDeletion(
    resourceGroupName: string,
    accountName: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CertificateCancelDeletionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        certificateName,
        options: operationOptions
      },
      cancelDeletionOperationSpec
    ) as Promise<CertificateCancelDeletionResponse>;
  }

  /**
   * ListByBatchAccountNext
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param nextLink The nextLink from the previous successful call to the ListByBatchAccount method.
   * @param options The options parameters.
   */
  listByBatchAccountNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: CertificateListByBatchAccountNextOptionalParams
  ): Promise<CertificateListByBatchAccountNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options: operationOptions },
      listByBatchAccountNextOperationSpec
    ) as Promise<CertificateListByBatchAccountNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByBatchAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListCertificatesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxresults,
    Parameters.select,
    Parameters.filter
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Certificate,
      headersMapper: Mappers.CertificateCreateHeaders
    },
    201: {
      bodyMapper: Mappers.Certificate,
      headersMapper: Mappers.CertificateCreateHeaders
    },
    202: {
      bodyMapper: Mappers.Certificate,
      headersMapper: Mappers.CertificateCreateHeaders
    },
    204: {
      bodyMapper: Mappers.Certificate,
      headersMapper: Mappers.CertificateCreateHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.certificateName
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Certificate,
      headersMapper: Mappers.CertificateUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.certificateName
  ],
  headerParameters: [Parameters.contentType, Parameters.ifMatch1],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.certificateName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Certificate,
      headersMapper: Mappers.CertificateGetHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.certificateName
  ],
  serializer
};
const cancelDeletionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}/cancelDelete",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Certificate,
      headersMapper: Mappers.CertificateCancelDeletionHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.certificateName
  ],
  serializer
};
const listByBatchAccountNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListCertificatesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxresults,
    Parameters.select,
    Parameters.filter
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.nextLink2
  ],
  serializer
};
