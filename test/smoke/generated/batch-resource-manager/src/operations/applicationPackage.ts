/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BatchManagement } from "../batchManagement";
import {
  ActivateApplicationPackageParameters,
  ApplicationPackageActivateResponse,
  ApplicationPackageCreateOptionalParams,
  ApplicationPackageCreateResponse,
  ApplicationPackageGetResponse,
  ApplicationPackageListOptionalParams,
  ApplicationPackageListResponse,
  ApplicationPackageListNextOptionalParams,
  ApplicationPackageListNextResponse
} from "../models";

/**
 * Class representing a ApplicationPackage.
 */
export class ApplicationPackage {
  private readonly client: BatchManagement;

  /**
   * Initialize a new instance of the class ApplicationPackage class.
   * @param client Reference to the service client
   */
  constructor(client: BatchManagement) {
    this.client = client;
  }

  /**
   * Activates the specified application package. This should be done after the `ApplicationPackage` was
   * created and uploaded. This needs to be done before an `ApplicationPackage` can be used on Pools or
   * Tasks.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param parameters The parameters for the request.
   * @param applicationName The name of the application. This must be unique within the account.
   * @param versionName The version of the application.
   * @param options The options parameters.
   */
  activate(
    resourceGroupName: string,
    accountName: string,
    parameters: ActivateApplicationPackageParameters,
    applicationName: string,
    versionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationPackageActivateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        parameters,
        applicationName,
        versionName,
        options: operationOptions
      },
      activateOperationSpec
    ) as Promise<ApplicationPackageActivateResponse>;
  }

  /**
   * Creates an application package record. The record contains the SAS where the package should be
   * uploaded to.  Once it is uploaded the `ApplicationPackage` needs to be activated using
   * `ApplicationPackageActive` before it can be used.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param applicationName The name of the application. This must be unique within the account.
   * @param versionName The version of the application.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    accountName: string,
    applicationName: string,
    versionName: string,
    options?: ApplicationPackageCreateOptionalParams
  ): Promise<ApplicationPackageCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        applicationName,
        versionName,
        options: operationOptions
      },
      createOperationSpec
    ) as Promise<ApplicationPackageCreateResponse>;
  }

  /**
   * Deletes an application package record and its associated binary file.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param applicationName The name of the application. This must be unique within the account.
   * @param versionName The version of the application.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    applicationName: string,
    versionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        applicationName,
        versionName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets information about the specified application package.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param applicationName The name of the application. This must be unique within the account.
   * @param versionName The version of the application.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    applicationName: string,
    versionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationPackageGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        applicationName,
        versionName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ApplicationPackageGetResponse>;
  }

  /**
   * Lists all of the application packages in the specified application.
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param applicationName The name of the application. This must be unique within the account.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    accountName: string,
    applicationName: string,
    options?: ApplicationPackageListOptionalParams
  ): Promise<ApplicationPackageListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        applicationName,
        options: operationOptions
      },
      listOperationSpec
    ) as Promise<ApplicationPackageListResponse>;
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group that contains the Batch account.
   * @param accountName The name of the Batch account.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param applicationName The name of the application. This must be unique within the account.
   * @param options The options parameters.
   */
  listNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    applicationName: string,
    options?: ApplicationPackageListNextOptionalParams
  ): Promise<ApplicationPackageListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        nextLink,
        applicationName,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<ApplicationPackageListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const activateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions/{versionName}/activate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationPackage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.applicationName,
    Parameters.versionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions/{versionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationPackage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.applicationName,
    Parameters.versionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions/{versionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.applicationName,
    Parameters.versionName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions/{versionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationPackage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.applicationName,
    Parameters.versionName
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListApplicationPackagesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxresults],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.applicationName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListApplicationPackagesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxresults],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.accountName1,
    Parameters.nextLink,
    Parameters.applicationName
  ],
  serializer
};
