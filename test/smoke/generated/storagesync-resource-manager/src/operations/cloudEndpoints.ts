/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftStorageSync } from "../microsoftStorageSync";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  CloudEndpointCreateParameters,
  CloudEndpointsCreateResponse,
  CloudEndpointsGetResponse,
  CloudEndpointsDeleteResponse,
  CloudEndpointsListBySyncGroupResponse,
  BackupRequest,
  CloudEndpointsPreBackupResponse,
  CloudEndpointsPostBackupResponse,
  PreRestoreRequest,
  CloudEndpointsRestoreheartbeatResponse,
  PostRestoreRequest,
  TriggerChangeDetectionParameters
} from "../models";

/**
 * Class representing a CloudEndpoints.
 */
export class CloudEndpoints {
  private readonly client: MicrosoftStorageSync;

  /**
   * Initialize a new instance of the class CloudEndpoints class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftStorageSync) {
    this.client = client;
  }

  /**
   * Create a new CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param parameters Body of Cloud Endpoint resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    parameters: CloudEndpointCreateParameters,
    cloudEndpointName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<CloudEndpointsCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      parameters,
      cloudEndpointName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CloudEndpointsCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Get a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CloudEndpointsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<CloudEndpointsGetResponse>;
  }

  /**
   * Delete a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<CloudEndpointsDeleteResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      cloudEndpointName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CloudEndpointsDeleteResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Get a CloudEndpoint List.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param options The options parameters.
   */
  listBySyncGroup(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CloudEndpointsListBySyncGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        options: operationOptions
      },
      listBySyncGroupOperationSpec
    ) as Promise<CloudEndpointsListBySyncGroupResponse>;
  }

  /**
   * Pre Backup a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param parameters Body of Backup request.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param options The options parameters.
   */
  async preBackup(
    resourceGroupName: string,
    parameters: BackupRequest,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<CloudEndpointsPreBackupResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      parameters,
      storageSyncServiceName,
      syncGroupName,
      cloudEndpointName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CloudEndpointsPreBackupResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      preBackupOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: preBackupOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Post Backup a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param parameters Body of Backup request.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param options The options parameters.
   */
  async postBackup(
    resourceGroupName: string,
    parameters: BackupRequest,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<CloudEndpointsPostBackupResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      parameters,
      storageSyncServiceName,
      syncGroupName,
      cloudEndpointName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CloudEndpointsPostBackupResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      postBackupOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: postBackupOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Pre Restore a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Body of Cloud Endpoint object.
   * @param options The options parameters.
   */
  async preRestore(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: PreRestoreRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      cloudEndpointName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      preRestoreOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: preRestoreOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Restore Heartbeat a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param options The options parameters.
   */
  restoreheartbeat(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CloudEndpointsRestoreheartbeatResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName,
        options: operationOptions
      },
      restoreheartbeatOperationSpec
    ) as Promise<CloudEndpointsRestoreheartbeatResponse>;
  }

  /**
   * Post Restore a given CloudEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Body of Cloud Endpoint object.
   * @param options The options parameters.
   */
  async postRestore(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: PostRestoreRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      cloudEndpointName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      postRestoreOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: postRestoreOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Triggers detection of changes performed on Azure File share connected to the specified Azure File
   * Sync Cloud Endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param cloudEndpointName Name of Cloud Endpoint object.
   * @param parameters Trigger Change Detection Action parameters.
   * @param options The options parameters.
   */
  async triggerChangeDetection(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    cloudEndpointName: string,
    parameters: TriggerChangeDetectionParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      cloudEndpointName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      triggerChangeDetectionOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: triggerChangeDetectionOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CloudEndpoint,
      headersMapper: Mappers.CloudEndpointsCreateHeaders
    },
    201: {
      bodyMapper: Mappers.CloudEndpoint,
      headersMapper: Mappers.CloudEndpointsCreateHeaders
    },
    202: {
      bodyMapper: Mappers.CloudEndpoint,
      headersMapper: Mappers.CloudEndpointsCreateHeaders
    },
    204: {
      bodyMapper: Mappers.CloudEndpoint,
      headersMapper: Mappers.CloudEndpointsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.cloudEndpointName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CloudEndpoint,
      headersMapper: Mappers.CloudEndpointsGetHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.cloudEndpointName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.CloudEndpointsDeleteHeaders
    },
    201: {
      headersMapper: Mappers.CloudEndpointsDeleteHeaders
    },
    202: {
      headersMapper: Mappers.CloudEndpointsDeleteHeaders
    },
    204: {
      headersMapper: Mappers.CloudEndpointsDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.cloudEndpointName
  ],
  serializer
};
const listBySyncGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CloudEndpointArray,
      headersMapper: Mappers.CloudEndpointsListBySyncGroupHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName
  ],
  serializer
};
const preBackupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prebackup",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.CloudEndpointsPreBackupHeaders
    },
    201: {
      headersMapper: Mappers.CloudEndpointsPreBackupHeaders
    },
    202: {
      headersMapper: Mappers.CloudEndpointsPreBackupHeaders
    },
    204: {
      headersMapper: Mappers.CloudEndpointsPreBackupHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName1,
    Parameters.syncGroupName1,
    Parameters.cloudEndpointName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const postBackupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postbackup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PostBackupResponse,
      headersMapper: Mappers.CloudEndpointsPostBackupHeaders
    },
    201: {
      bodyMapper: Mappers.PostBackupResponse,
      headersMapper: Mappers.CloudEndpointsPostBackupHeaders
    },
    202: {
      bodyMapper: Mappers.PostBackupResponse,
      headersMapper: Mappers.CloudEndpointsPostBackupHeaders
    },
    204: {
      bodyMapper: Mappers.PostBackupResponse,
      headersMapper: Mappers.CloudEndpointsPostBackupHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName1,
    Parameters.syncGroupName1,
    Parameters.cloudEndpointName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const preRestoreOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prerestore",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName1,
    Parameters.syncGroupName1,
    Parameters.cloudEndpointName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const restoreheartbeatOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/restoreheartbeat",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.CloudEndpointsRestoreheartbeatHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.cloudEndpointName
  ],
  serializer
};
const postRestoreOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postrestore",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName1,
    Parameters.syncGroupName1,
    Parameters.cloudEndpointName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const triggerChangeDetectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/triggerChangeDetection",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName1,
    Parameters.syncGroupName1,
    Parameters.cloudEndpointName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
