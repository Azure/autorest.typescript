/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftStorageSync } from "../microsoftStorageSync";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ServerEndpointCreateParameters,
  ServerEndpointsCreateResponse,
  ServerEndpointsUpdateOptionalParams,
  ServerEndpointsUpdateResponse,
  ServerEndpointsGetResponse,
  ServerEndpointsDeleteResponse,
  ServerEndpointsListBySyncGroupResponse,
  RecallActionParameters,
  ServerEndpointsRecallActionResponse
} from "../models";

/**
 * Class representing a ServerEndpoints.
 */
export class ServerEndpoints {
  private readonly client: MicrosoftStorageSync;

  /**
   * Initialize a new instance of the class ServerEndpoints class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftStorageSync) {
    this.client = client;
  }

  /**
   * Create a new ServerEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param parameters Body of Server Endpoint object.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    parameters: ServerEndpointCreateParameters,
    serverEndpointName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ServerEndpointsCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      parameters,
      serverEndpointName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ServerEndpointsCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Patch a given ServerEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param options The options parameters.
   */
  async update(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    serverEndpointName: string,
    options?: ServerEndpointsUpdateOptionalParams
  ): Promise<LROPoller<ServerEndpointsUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      serverEndpointName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ServerEndpointsUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Get a ServerEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    serverEndpointName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServerEndpointsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        serverEndpointName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ServerEndpointsGetResponse>;
  }

  /**
   * Delete a given ServerEndpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    serverEndpointName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ServerEndpointsDeleteResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      serverEndpointName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ServerEndpointsDeleteResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Get a ServerEndpoint list.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param options The options parameters.
   */
  listBySyncGroup(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServerEndpointsListBySyncGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        options: operationOptions
      },
      listBySyncGroupOperationSpec
    ) as Promise<ServerEndpointsListBySyncGroupResponse>;
  }

  /**
   * Recall a server endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param syncGroupName Name of Sync Group resource.
   * @param serverEndpointName Name of Server Endpoint object.
   * @param parameters Body of Recall Action object.
   * @param options The options parameters.
   */
  async recallAction(
    resourceGroupName: string,
    storageSyncServiceName: string,
    syncGroupName: string,
    serverEndpointName: string,
    parameters: RecallActionParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ServerEndpointsRecallActionResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      storageSyncServiceName,
      syncGroupName,
      serverEndpointName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ServerEndpointsRecallActionResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      recallActionOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: recallActionOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsCreateHeaders
    },
    201: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsCreateHeaders
    },
    202: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsCreateHeaders
    },
    204: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.serverEndpointName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsUpdateHeaders
    },
    201: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsUpdateHeaders
    },
    202: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsUpdateHeaders
    },
    204: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.serverEndpointName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerEndpoint,
      headersMapper: Mappers.ServerEndpointsGetHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.serverEndpointName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ServerEndpointsDeleteHeaders
    },
    201: {
      headersMapper: Mappers.ServerEndpointsDeleteHeaders
    },
    202: {
      headersMapper: Mappers.ServerEndpointsDeleteHeaders
    },
    204: {
      headersMapper: Mappers.ServerEndpointsDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.serverEndpointName
  ],
  serializer
};
const listBySyncGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerEndpointArray,
      headersMapper: Mappers.ServerEndpointsListBySyncGroupHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName1,
    Parameters.syncGroupName1
  ],
  serializer
};
const recallActionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}/recallAction",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ServerEndpointsRecallActionHeaders
    },
    201: {
      headersMapper: Mappers.ServerEndpointsRecallActionHeaders
    },
    202: {
      headersMapper: Mappers.ServerEndpointsRecallActionHeaders
    },
    204: {
      headersMapper: Mappers.ServerEndpointsRecallActionHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.syncGroupName,
    Parameters.serverEndpointName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
