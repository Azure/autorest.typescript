/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftStorageSync } from "../microsoftStorageSync";
import { OperationStatusGetResponse } from "../models";

/**
 * Class representing a OperationStatus.
 */
export class OperationStatus {
  private readonly client: MicrosoftStorageSync;

  /**
   * Initialize a new instance of the class OperationStatus class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftStorageSync) {
    this.client = client;
  }

  /**
   * Get Operation status
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowId workflow Id
   * @param locationName The desired region to obtain information from.
   * @param operationId operation Id
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workflowId: string,
    locationName: string,
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<OperationStatusGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowId,
        locationName,
        operationId,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<OperationStatusGetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/locations/{locationName}/workflows/{workflowId}/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus,
      headersMapper: Mappers.OperationStatusGetHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowId,
    Parameters.locationName1,
    Parameters.operationId
  ],
  serializer
};
