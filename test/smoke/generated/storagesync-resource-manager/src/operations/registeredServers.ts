/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftStorageSync } from "../microsoftStorageSync";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  RegisteredServersListByStorageSyncServiceResponse,
  RegisteredServersGetResponse,
  RegisteredServerCreateParameters,
  RegisteredServersCreateResponse,
  RegisteredServersDeleteResponse,
  TriggerRolloverRequest,
  RegisteredServersTriggerRolloverResponse
} from "../models";

/**
 * Class representing a RegisteredServers.
 */
export class RegisteredServers {
  private readonly client: MicrosoftStorageSync;

  /**
   * Initialize a new instance of the class RegisteredServers class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftStorageSync) {
    this.client = client;
  }

  /**
   * Get a given registered server list.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param options The options parameters.
   */
  listByStorageSyncService(
    resourceGroupName: string,
    storageSyncServiceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegisteredServersListByStorageSyncServiceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, storageSyncServiceName, options: operationOptions },
      listByStorageSyncServiceOperationSpec
    ) as Promise<RegisteredServersListByStorageSyncServiceResponse>;
  }

  /**
   * Get a given registered server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param serverId GUID identifying the on-premises server.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    storageSyncServiceName: string,
    serverId: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegisteredServersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageSyncServiceName,
        serverId,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<RegisteredServersGetResponse>;
  }

  /**
   * Add a new registered server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param serverId GUID identifying the on-premises server.
   * @param parameters Body of Registered Server object.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    storageSyncServiceName: string,
    serverId: string,
    parameters: RegisteredServerCreateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<RegisteredServersCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      storageSyncServiceName,
      serverId,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        RegisteredServersCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Delete the given registered server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param serverId GUID identifying the on-premises server.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    storageSyncServiceName: string,
    serverId: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<RegisteredServersDeleteResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      storageSyncServiceName,
      serverId,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        RegisteredServersDeleteResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Triggers Server certificate rollover.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageSyncServiceName Name of Storage Sync Service resource.
   * @param parameters Body of Trigger Rollover request.
   * @param serverId Server Id
   * @param options The options parameters.
   */
  async triggerRollover(
    resourceGroupName: string,
    storageSyncServiceName: string,
    parameters: TriggerRolloverRequest,
    serverId: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<RegisteredServersTriggerRolloverResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      storageSyncServiceName,
      parameters,
      serverId,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        RegisteredServersTriggerRolloverResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      triggerRolloverOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: triggerRolloverOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByStorageSyncServiceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegisteredServerArray,
      headersMapper: Mappers.RegisteredServersListByStorageSyncServiceHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegisteredServer,
      headersMapper: Mappers.RegisteredServersGetHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.serverId
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RegisteredServer,
      headersMapper: Mappers.RegisteredServersCreateHeaders
    },
    201: {
      bodyMapper: Mappers.RegisteredServer,
      headersMapper: Mappers.RegisteredServersCreateHeaders
    },
    202: {
      bodyMapper: Mappers.RegisteredServer,
      headersMapper: Mappers.RegisteredServersCreateHeaders
    },
    204: {
      bodyMapper: Mappers.RegisteredServer,
      headersMapper: Mappers.RegisteredServersCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.serverId
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.RegisteredServersDeleteHeaders
    },
    201: {
      headersMapper: Mappers.RegisteredServersDeleteHeaders
    },
    202: {
      headersMapper: Mappers.RegisteredServersDeleteHeaders
    },
    204: {
      headersMapper: Mappers.RegisteredServersDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.serverId
  ],
  serializer
};
const triggerRolloverOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}/triggerRollover",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.RegisteredServersTriggerRolloverHeaders
    },
    201: {
      headersMapper: Mappers.RegisteredServersTriggerRolloverHeaders
    },
    202: {
      headersMapper: Mappers.RegisteredServersTriggerRolloverHeaders
    },
    204: {
      headersMapper: Mappers.RegisteredServersTriggerRolloverHeaders
    },
    default: {
      bodyMapper: Mappers.StorageSyncError
    }
  },
  requestBody: Parameters.parameters13,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageSyncServiceName,
    Parameters.serverId1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
