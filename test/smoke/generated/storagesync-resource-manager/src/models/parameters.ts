/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-10-01",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CheckNameAvailabilityParameters
};

export const locationName: coreHttp.OperationURLParameter = {
  parameterPath: "locationName",
  mapper: {
    serializedName: "locationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.StorageSyncServiceCreateParameters
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-w._()]+$"),
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const storageSyncServiceName: coreHttp.OperationURLParameter = {
  parameterPath: "storageSyncServiceName",
  mapper: {
    serializedName: "storageSyncServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: Mappers.StorageSyncServiceUpdateParameters
};

export const parameters3: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SyncGroupCreateParameters
};

export const syncGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "syncGroupName",
  mapper: {
    serializedName: "syncGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters4: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CloudEndpointCreateParameters
};

export const cloudEndpointName: coreHttp.OperationURLParameter = {
  parameterPath: "cloudEndpointName",
  mapper: {
    serializedName: "cloudEndpointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters5: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BackupRequest
};

export const storageSyncServiceName1: coreHttp.OperationURLParameter = {
  parameterPath: "storageSyncServiceName",
  mapper: {
    serializedName: "storageSyncServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const syncGroupName1: coreHttp.OperationURLParameter = {
  parameterPath: "syncGroupName",
  mapper: {
    serializedName: "syncGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const cloudEndpointName1: coreHttp.OperationURLParameter = {
  parameterPath: "cloudEndpointName",
  mapper: {
    serializedName: "cloudEndpointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters6: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PreRestoreRequest
};

export const parameters7: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PostRestoreRequest
};

export const parameters8: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TriggerChangeDetectionParameters
};

export const parameters9: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ServerEndpointCreateParameters
};

export const serverEndpointName: coreHttp.OperationURLParameter = {
  parameterPath: "serverEndpointName",
  mapper: {
    serializedName: "serverEndpointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters10: coreHttp.OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: Mappers.ServerEndpointUpdateParameters
};

export const parameters11: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.RecallActionParameters
};

export const serverId: coreHttp.OperationURLParameter = {
  parameterPath: "serverId",
  mapper: {
    serializedName: "serverId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters12: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.RegisteredServerCreateParameters
};

export const parameters13: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TriggerRolloverRequest
};

export const serverId1: coreHttp.OperationURLParameter = {
  parameterPath: "serverId",
  mapper: {
    serializedName: "serverId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const workflowId: coreHttp.OperationURLParameter = {
  parameterPath: "workflowId",
  mapper: {
    serializedName: "workflowId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const locationName1: coreHttp.OperationURLParameter = {
  parameterPath: "locationName",
  mapper: {
    serializedName: "locationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const operationId: coreHttp.OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "String"
    }
  }
};
