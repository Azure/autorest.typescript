/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const blockchainMemberName: coreHttp.OperationURLParameter = {
  parameterPath: "blockchainMemberName",
  mapper: {
    serializedName: "blockchainMemberName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2018-06-01-preview",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const blockchainMember: coreHttp.OperationParameter = {
  parameterPath: ["options", "blockchainMember"],
  mapper: Mappers.BlockchainMember
};

export const blockchainMemberName1: coreHttp.OperationURLParameter = {
  parameterPath: "blockchainMemberName",
  mapper: {
    serializedName: "blockchainMemberName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const blockchainMember1: coreHttp.OperationParameter = {
  parameterPath: ["options", "blockchainMember"],
  mapper: Mappers.BlockchainMemberUpdate
};

export const apiKey: coreHttp.OperationParameter = {
  parameterPath: ["options", "apiKey"],
  mapper: Mappers.ApiKey
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const locationName: coreHttp.OperationURLParameter = {
  parameterPath: "locationName",
  mapper: {
    serializedName: "locationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const operationId: coreHttp.OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nameAvailabilityRequest: coreHttp.OperationParameter = {
  parameterPath: ["options", "nameAvailabilityRequest"],
  mapper: Mappers.NameAvailabilityRequest
};

export const locationName1: coreHttp.OperationURLParameter = {
  parameterPath: "locationName",
  mapper: {
    serializedName: "locationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const transactionNodeName: coreHttp.OperationURLParameter = {
  parameterPath: "transactionNodeName",
  mapper: {
    serializedName: "transactionNodeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const transactionNode: coreHttp.OperationParameter = {
  parameterPath: ["options", "transactionNode"],
  mapper: Mappers.TransactionNode
};

export const transactionNode1: coreHttp.OperationParameter = {
  parameterPath: ["options", "transactionNode"],
  mapper: Mappers.TransactionNodeUpdate
};

export const apiKey1: coreHttp.OperationParameter = {
  parameterPath: ["options", "apiKey"],
  mapper: Mappers.ApiKey
};
