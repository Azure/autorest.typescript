/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreHttp.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const BlockchainMember: coreHttp.CompositeMapper = {
  serializedName: "BlockchainMember",
  type: {
    name: "Composite",
    className: "BlockchainMember",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      validatorNodesSku: {
        serializedName: "validatorNodesSku",
        type: {
          name: "Composite",
          className: "BlockchainMemberNodesSku"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dns: {
        serializedName: "properties.dns",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.userName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      consortium: {
        serializedName: "properties.consortium",
        type: {
          name: "String"
        }
      },
      consortiumManagementAccountAddress: {
        serializedName: "properties.consortiumManagementAccountAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      consortiumManagementAccountPassword: {
        serializedName: "properties.consortiumManagementAccountPassword",
        type: {
          name: "String"
        }
      },
      consortiumRole: {
        serializedName: "properties.consortiumRole",
        type: {
          name: "String"
        }
      },
      consortiumMemberDisplayName: {
        serializedName: "properties.consortiumMemberDisplayName",
        type: {
          name: "String"
        }
      },
      rootContractAddress: {
        serializedName: "properties.rootContractAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicKey: {
        serializedName: "properties.publicKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FirewallRule" } }
        }
      }
    }
  }
};

export const BlockchainMemberNodesSku: coreHttp.CompositeMapper = {
  serializedName: "BlockchainMemberNodesSku",
  type: {
    name: "Composite",
    className: "BlockchainMemberNodesSku",
    modelProperties: {
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FirewallRule: coreHttp.CompositeMapper = {
  serializedName: "FirewallRule",
  type: {
    name: "Composite",
    className: "FirewallRule",
    modelProperties: {
      ruleName: {
        serializedName: "ruleName",
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        serializedName: "startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlockchainMemberUpdate: coreHttp.CompositeMapper = {
  serializedName: "BlockchainMemberUpdate",
  type: {
    name: "Composite",
    className: "BlockchainMemberUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FirewallRule" } }
        }
      },
      consortiumManagementAccountPassword: {
        serializedName: "properties.consortiumManagementAccountPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TransactionNodePropertiesUpdate: coreHttp.CompositeMapper = {
  serializedName: "TransactionNodePropertiesUpdate",
  type: {
    name: "Composite",
    className: "TransactionNodePropertiesUpdate",
    modelProperties: {
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      firewallRules: {
        serializedName: "firewallRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FirewallRule" } }
        }
      }
    }
  }
};

export const BlockchainMemberPropertiesUpdate: coreHttp.CompositeMapper = {
  serializedName: "BlockchainMemberPropertiesUpdate",
  type: {
    name: "Composite",
    className: "BlockchainMemberPropertiesUpdate",
    modelProperties: {
      ...TransactionNodePropertiesUpdate.type.modelProperties,
      consortiumManagementAccountPassword: {
        serializedName: "consortiumManagementAccountPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlockchainMemberCollection: coreHttp.CompositeMapper = {
  serializedName: "BlockchainMemberCollection",
  type: {
    name: "Composite",
    className: "BlockchainMemberCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "BlockchainMember" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConsortiumMemberCollection: coreHttp.CompositeMapper = {
  serializedName: "ConsortiumMemberCollection",
  type: {
    name: "Composite",
    className: "ConsortiumMemberCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConsortiumMember" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConsortiumMember: coreHttp.CompositeMapper = {
  serializedName: "ConsortiumMember",
  type: {
    name: "Composite",
    className: "ConsortiumMember",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "role",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      joinDate: {
        serializedName: "joinDate",
        type: {
          name: "DateTime"
        }
      },
      dateModified: {
        serializedName: "dateModified",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ApiKeyCollection: coreHttp.CompositeMapper = {
  serializedName: "ApiKeyCollection",
  type: {
    name: "Composite",
    className: "ApiKeyCollection",
    modelProperties: {
      keys: {
        serializedName: "keys",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ApiKey" } }
        }
      }
    }
  }
};

export const ApiKey: coreHttp.CompositeMapper = {
  serializedName: "ApiKey",
  type: {
    name: "Composite",
    className: "ApiKey",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResult: coreHttp.CompositeMapper = {
  serializedName: "OperationResult",
  type: {
    name: "Composite",
    className: "OperationResult",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const NameAvailabilityRequest: coreHttp.CompositeMapper = {
  serializedName: "NameAvailabilityRequest",
  type: {
    name: "Composite",
    className: "NameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameAvailability: coreHttp.CompositeMapper = {
  serializedName: "NameAvailability",
  type: {
    name: "Composite",
    className: "NameAvailability",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConsortiumCollection: coreHttp.CompositeMapper = {
  serializedName: "ConsortiumCollection",
  type: {
    name: "Composite",
    className: "ConsortiumCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Consortium" } }
        }
      }
    }
  }
};

export const Consortium: coreHttp.CompositeMapper = {
  serializedName: "Consortium",
  type: {
    name: "Composite",
    className: "Consortium",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperationCollection: coreHttp.CompositeMapper = {
  serializedName: "ResourceProviderOperationCollection",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ResourceProviderOperation" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperation: coreHttp.CompositeMapper = {
  serializedName: "ResourceProviderOperation",
  type: {
    name: "Composite",
    className: "ResourceProviderOperation",
    modelProperties: {
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ResourceProviderOperationDisplay"
        }
      }
    }
  }
};

export const ResourceProviderOperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "ResourceProviderOperationDisplay",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceTypeSkuCollection: coreHttp.CompositeMapper = {
  serializedName: "ResourceTypeSkuCollection",
  type: {
    name: "Composite",
    className: "ResourceTypeSkuCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceTypeSku" } }
        }
      }
    }
  }
};

export const ResourceTypeSku: coreHttp.CompositeMapper = {
  serializedName: "ResourceTypeSku",
  type: {
    name: "Composite",
    className: "ResourceTypeSku",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      skus: {
        serializedName: "skus",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SkuSetting" } }
        }
      }
    }
  }
};

export const SkuSetting: coreHttp.CompositeMapper = {
  serializedName: "SkuSetting",
  type: {
    name: "Composite",
    className: "SkuSetting",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SkuSettingLocationsItem"
          }
        }
      },
      requiredFeatures: {
        serializedName: "requiredFeatures",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SkuSettingRequiredFeaturesItem"
          }
        }
      }
    }
  }
};

export const TransactionNode: coreHttp.CompositeMapper = {
  serializedName: "TransactionNode",
  type: {
    name: "Composite",
    className: "TransactionNode",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dns: {
        serializedName: "properties.dns",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicKey: {
        serializedName: "properties.publicKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.userName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FirewallRule" } }
        }
      }
    }
  }
};

export const TransactionNodeUpdate: coreHttp.CompositeMapper = {
  serializedName: "TransactionNodeUpdate",
  type: {
    name: "Composite",
    className: "TransactionNodeUpdate",
    modelProperties: {
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FirewallRule" } }
        }
      }
    }
  }
};

export const TransactionNodeCollection: coreHttp.CompositeMapper = {
  serializedName: "TransactionNodeCollection",
  type: {
    name: "Composite",
    className: "TransactionNodeCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TransactionNode" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
