/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The core properties of the resources.
 */
export interface Resource {
  /**
   * Fully qualified resource Id of the resource.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   */
  readonly name?: string;
  /**
   * The type of the service - e.g. "Microsoft.Blockchain"
   */
  readonly type?: string;
}

/**
 * The resource model definition for a top level resource.
 */
export type TrackedResource = Resource & {
  /**
   * The GEO location of the blockchain service.
   */
  location?: string;
  /**
   * Tags of the service which is a list of key value pairs that describes the resource.
   */
  tags?: { [propertyName: string]: string };
};

/**
 * Payload of the blockchain member which is exposed in the request/response of the resource provider.
 */
export type BlockchainMember = TrackedResource & {
  /**
   * Gets or sets the blockchain member Sku.
   */
  sku?: Sku;
  /**
   * Gets or sets the blockchain protocol.
   */
  protocol?: BlockchainProtocol;
  /**
   * Gets or sets the blockchain validator nodes Sku.
   */
  validatorNodesSku?: BlockchainMemberNodesSku;
  /**
   * Gets or sets the blockchain member provision state.
   */
  readonly provisioningState?: BlockchainMemberProvisioningState;
  /**
   * Gets the dns endpoint of the blockchain member.
   */
  readonly dns?: string;
  /**
   * Gets the auth user name of the blockchain member.
   */
  readonly userName?: string;
  /**
   * Sets the basic auth password of the blockchain member.
   */
  password?: string;
  /**
   * Gets or sets the consortium for the blockchain member.
   */
  consortium?: string;
  /**
   * Gets the managed consortium management account address.
   */
  readonly consortiumManagementAccountAddress?: string;
  /**
   * Sets the managed consortium management account password.
   */
  consortiumManagementAccountPassword?: string;
  /**
   * Gets the role of the member in the consortium.
   */
  consortiumRole?: string;
  /**
   * Gets the display name of the member in the consortium.
   */
  consortiumMemberDisplayName?: string;
  /**
   * Gets the Ethereum root contract address of the blockchain.
   */
  readonly rootContractAddress?: string;
  /**
   * Gets the public key of the blockchain member (default transaction node).
   */
  readonly publicKey?: string;
  /**
   * Gets or sets firewall rules
   */
  firewallRules?: FirewallRule[];
};

/**
 * Payload of the blockchain member nodes Sku for a blockchain member.
 */
export interface BlockchainMemberNodesSku {
  /**
   * Gets or sets the nodes capacity.
   */
  capacity?: number;
}

/**
 * Ip range for firewall rules
 */
export interface FirewallRule {
  /**
   * Gets or sets the name of the firewall rules.
   */
  ruleName?: string;
  /**
   * Gets or sets the start IP address of the firewall rule range.
   */
  startIpAddress?: string;
  /**
   * Gets or sets the end IP address of the firewall rule range.
   */
  endIpAddress?: string;
}

/**
 * Blockchain member Sku in payload
 */
export interface Sku {
  /**
   * Gets or sets Sku name
   */
  name?: string;
  /**
   * Gets or sets Sku tier
   */
  tier?: string;
}

/**
 * Update the payload of the blockchain member which is exposed in the request/response of the resource provider.
 */
export interface BlockchainMemberUpdate {
  /**
   * Tags of the service which is a list of key value pairs that describes the resource.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Sets the transaction node dns endpoint basic auth password.
   */
  password?: string;
  /**
   * Gets or sets the firewall rules.
   */
  firewallRules?: FirewallRule[];
  /**
   * Sets the managed consortium management account password.
   */
  consortiumManagementAccountPassword?: string;
}

/**
 * Update the payload of the transaction node properties in the transaction node payload.
 */
export interface TransactionNodePropertiesUpdate {
  /**
   * Sets the transaction node dns endpoint basic auth password.
   */
  password?: string;
  /**
   * Gets or sets the firewall rules.
   */
  firewallRules?: FirewallRule[];
}

/**
 * Update the payload of the blockchain member properties for a blockchain member.
 */
export type BlockchainMemberPropertiesUpdate = TransactionNodePropertiesUpdate & {
  /**
   * Sets the managed consortium management account password.
   */
  consortiumManagementAccountPassword?: string;
};

/**
 * Collection of the blockchain member payload which is exposed in the request/response of the resource provider.
 */
export interface BlockchainMemberCollection {
  /**
   * Gets or sets the collection of blockchain members.
   */
  value?: BlockchainMember[];
  /**
   * Gets or sets the URL, that the client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * Collection of consortium payload.
 */
export interface ConsortiumMemberCollection {
  /**
   * Gets or sets the collection of consortiums.
   */
  value?: ConsortiumMember[];
  /**
   * Gets or sets the URL, that the client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * Consortium approval
 */
export interface ConsortiumMember {
  /**
   * Gets the consortium member name.
   */
  name?: string;
  /**
   * Gets the consortium member display name.
   */
  displayName?: string;
  /**
   * Gets the consortium member subscription id.
   */
  subscriptionId?: string;
  /**
   * Gets the consortium member role.
   */
  role?: string;
  /**
   * Gets the consortium member status.
   */
  status?: string;
  /**
   * Gets the consortium member join date.
   */
  joinDate?: Date;
  /**
   * Gets the consortium member modified date.
   */
  dateModified?: Date;
}

/**
 * Collection of the API key payload which is exposed in the response of the resource provider.
 */
export interface ApiKeyCollection {
  /**
   * Gets or sets the collection of API key.
   */
  keys?: ApiKey[];
}

/**
 * API key payload which is exposed in the request/response of the resource provider.
 */
export interface ApiKey {
  /**
   * Gets or sets the API key name.
   */
  keyName?: string;
  /**
   * Gets or sets the API key value.
   */
  value?: string;
}

/**
 * Operation result payload which is exposed in the response of the resource provider.
 */
export interface OperationResult {
  /**
   * Gets or sets the operation name.
   */
  name?: string;
  /**
   * Gets or sets the operation start time.
   */
  startTime?: Date;
  /**
   * Gets or sets the operation end time.
   */
  endTime?: Date;
}

/**
 * Name availability request payload which is exposed in the request of the resource provider.
 */
export interface NameAvailabilityRequest {
  /**
   * Gets or sets the name to check.
   */
  name?: string;
  /**
   * Gets or sets the type of the resource to check.
   */
  type?: string;
}

/**
 * Name availability payload which is exposed in the response of the resource provider.
 */
export interface NameAvailability {
  /**
   * Gets or sets the value indicating whether the name is available.
   */
  nameAvailable?: boolean;
  /**
   * Gets or sets the message.
   */
  message?: string;
  /**
   * Gets or sets the name availability reason.
   */
  reason?: NameAvailabilityReason;
}

/**
 * Collection of the consortium payload.
 */
export interface ConsortiumCollection {
  /**
   * Gets or sets the collection of consortiums.
   */
  value?: Consortium[];
}

/**
 * Consortium payload
 */
export interface Consortium {
  /**
   * Gets or sets the blockchain member name.
   */
  name?: string;
  /**
   * Gets or sets the protocol for the consortium.
   */
  protocol?: BlockchainProtocol;
}

/**
 * Collection of operation payload which is exposed in the response of the resource provider.
 */
export interface ResourceProviderOperationCollection {
  /**
   * Gets or sets the collection of operations.
   */
  value?: ResourceProviderOperation[];
  /**
   * Gets or sets the URL, that the client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * Operation payload which is exposed in the response of the resource provider.
 */
export interface ResourceProviderOperation {
  /**
   * Gets or sets the origin.
   */
  origin?: string;
  /**
   * Gets or sets the operation name.
   */
  name?: string;
  /**
   * Gets or sets a value indicating whether the operation is a data action or not.
   */
  isDataAction?: boolean;
  /**
   * Gets or sets operation display
   */
  display?: ResourceProviderOperationDisplay;
}

/**
 * Operation display payload which is exposed in the response of the resource provider.
 */
export interface ResourceProviderOperationDisplay {
  /**
   * Gets or sets the name of the provider for display purposes.
   */
  provider?: string;
  /**
   * Gets or sets the name of the resource type for display purposes.
   */
  resource?: string;
  /**
   * Gets or sets the name of the operation for display purposes.
   */
  operation?: string;
  /**
   * Gets or sets the description of the provider for display purposes.
   */
  description?: string;
}

/**
 * Collection of the resource type Sku.
 */
export interface ResourceTypeSkuCollection {
  /**
   * Gets or sets the collection of resource type Sku.
   */
  value?: ResourceTypeSku[];
}

/**
 * Resource type Sku.
 */
export interface ResourceTypeSku {
  /**
   * Gets or sets the resource type
   */
  resourceType?: string;
  /**
   * Gets or sets the Skus
   */
  skus?: SkuSetting[];
}

/**
 * Sku Setting.
 */
export interface SkuSetting {
  /**
   * Gets or sets the Sku name.
   */
  name?: string;
  /**
   * Gets or sets the Sku tier.
   */
  tier?: string;
  /**
   * Gets or sets the locations.
   */
  locations?: string[];
  /**
   * Gets or sets the required features.
   */
  requiredFeatures?: string[];
}

/**
 * Payload of the transaction node which is the request/response of the resource provider.
 */
export type TransactionNode = Resource & {
  /**
   * Gets or sets the transaction node location.
   */
  location?: string;
  /**
   * Gets or sets the blockchain member provision state.
   */
  readonly provisioningState?: NodeProvisioningState;
  /**
   * Gets or sets the transaction node dns endpoint.
   */
  readonly dns?: string;
  /**
   * Gets or sets the transaction node public key.
   */
  readonly publicKey?: string;
  /**
   * Gets or sets the transaction node dns endpoint basic auth user name.
   */
  readonly userName?: string;
  /**
   * Sets the transaction node dns endpoint basic auth password.
   */
  password?: string;
  /**
   * Gets or sets the firewall rules.
   */
  firewallRules?: FirewallRule[];
};

/**
 * Update the transaction node payload which is exposed in the request/response of the resource provider.
 */
export interface TransactionNodeUpdate {
  /**
   * Sets the transaction node dns endpoint basic auth password.
   */
  password?: string;
  /**
   * Gets or sets the firewall rules.
   */
  firewallRules?: FirewallRule[];
}

/**
 * Collection of transaction node payload which is exposed in the request/response of the resource provider.
 */
export interface TransactionNodeCollection {
  /**
   * Gets or sets the collection of transaction nodes.
   */
  value?: TransactionNode[];
  /**
   * Gets or sets the URL, that the client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * Defines values for BlockchainProtocol.
 */
export type BlockchainProtocol = "NotSpecified" | "Parity" | "Quorum" | "Corda";
/**
 * Defines values for BlockchainMemberProvisioningState.
 */
export type BlockchainMemberProvisioningState =
  | "NotSpecified"
  | "Updating"
  | "Deleting"
  | "Succeeded"
  | "Failed"
  | "Stale";
/**
 * Defines values for NameAvailabilityReason.
 */
export type NameAvailabilityReason =
  | "NotSpecified"
  | "AlreadyExists"
  | "Invalid";
/**
 * Defines values for NodeProvisioningState.
 */
export type NodeProvisioningState =
  | "NotSpecified"
  | "Updating"
  | "Deleting"
  | "Succeeded"
  | "Failed";

/**
 * Contains response data for the get operation.
 */
export type BlockchainMembersGetResponse = BlockchainMember & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BlockchainMember;
  };
};

/**
 * Optional parameters.
 */
export interface BlockchainMembersCreateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Payload to create a blockchain member.
   */
  blockchainMember?: BlockchainMember;
}

/**
 * Contains response data for the create operation.
 */
export type BlockchainMembersCreateResponse = BlockchainMember & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BlockchainMember;
  };
};

/**
 * Optional parameters.
 */
export interface BlockchainMembersUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Payload to update the blockchain member.
   */
  blockchainMember?: BlockchainMemberUpdate;
}

/**
 * Contains response data for the update operation.
 */
export type BlockchainMembersUpdateResponse = BlockchainMember & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BlockchainMember;
  };
};

/**
 * Contains response data for the list operation.
 */
export type BlockchainMembersListResponse = BlockchainMemberCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BlockchainMemberCollection;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type BlockchainMembersListAllResponse = BlockchainMemberCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BlockchainMemberCollection;
  };
};

/**
 * Contains response data for the listConsortiumMembers operation.
 */
export type BlockchainMembersListConsortiumMembersResponse = ConsortiumMemberCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConsortiumMemberCollection;
  };
};

/**
 * Contains response data for the listApiKeys operation.
 */
export type BlockchainMembersListApiKeysResponse = ApiKeyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiKeyCollection;
  };
};

/**
 * Optional parameters.
 */
export interface BlockchainMembersListRegenerateApiKeysOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * api key to be regenerate
   */
  apiKey?: ApiKey;
}

/**
 * Contains response data for the listRegenerateApiKeys operation.
 */
export type BlockchainMembersListRegenerateApiKeysResponse = ApiKeyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiKeyCollection;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type BlockchainMembersListNextResponse = BlockchainMemberCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BlockchainMemberCollection;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type BlockchainMembersListAllNextResponse = BlockchainMemberCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BlockchainMemberCollection;
  };
};

/**
 * Contains response data for the listConsortiumMembersNext operation.
 */
export type BlockchainMembersListConsortiumMembersNextResponse = ConsortiumMemberCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConsortiumMemberCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BlockchainMemberOperationResultsGetResponse = OperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationResult;
  };
};

/**
 * Optional parameters.
 */
export interface LocationsCheckNameAvailabilityOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Name availability request payload.
   */
  nameAvailabilityRequest?: NameAvailabilityRequest;
}

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type LocationsCheckNameAvailabilityResponse = NameAvailability & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NameAvailability;
  };
};

/**
 * Contains response data for the listConsortiums operation.
 */
export type LocationsListConsortiumsResponse = ConsortiumCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConsortiumCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = ResourceProviderOperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceProviderOperationCollection;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = ResourceProviderOperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceProviderOperationCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type SkusListResponse = ResourceTypeSkuCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceTypeSkuCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type TransactionNodesGetResponse = TransactionNode & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TransactionNode;
  };
};

/**
 * Optional parameters.
 */
export interface TransactionNodesCreateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Payload to create the transaction node.
   */
  transactionNode?: TransactionNode;
}

/**
 * Contains response data for the create operation.
 */
export type TransactionNodesCreateResponse = TransactionNode & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TransactionNode;
  };
};

/**
 * Optional parameters.
 */
export interface TransactionNodesUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Payload to create the transaction node.
   */
  transactionNode?: TransactionNodeUpdate;
}

/**
 * Contains response data for the update operation.
 */
export type TransactionNodesUpdateResponse = TransactionNode & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TransactionNode;
  };
};

/**
 * Contains response data for the list operation.
 */
export type TransactionNodesListResponse = TransactionNodeCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TransactionNodeCollection;
  };
};

/**
 * Contains response data for the listApiKeys operation.
 */
export type TransactionNodesListApiKeysResponse = ApiKeyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiKeyCollection;
  };
};

/**
 * Optional parameters.
 */
export interface TransactionNodesListRegenerateApiKeysOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * api key to be regenerated
   */
  apiKey?: ApiKey;
}

/**
 * Contains response data for the listRegenerateApiKeys operation.
 */
export type TransactionNodesListRegenerateApiKeysResponse = ApiKeyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiKeyCollection;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type TransactionNodesListNextResponse = TransactionNodeCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TransactionNodeCollection;
  };
};

/**
 * Optional parameters.
 */
export interface BlockchainManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
