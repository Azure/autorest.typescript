/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BlockchainManagementClient } from "../blockchainManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  TransactionNodesGetResponse,
  TransactionNodesCreateOptionalParams,
  TransactionNodesCreateResponse,
  TransactionNodesUpdateOptionalParams,
  TransactionNodesUpdateResponse,
  TransactionNodesListResponse,
  TransactionNodesListApiKeysResponse,
  TransactionNodesListRegenerateApiKeysOptionalParams,
  TransactionNodesListRegenerateApiKeysResponse,
  TransactionNodesListNextResponse
} from "../models";

/**
 * Class representing a TransactionNodes.
 */
export class TransactionNodes {
  private readonly client: BlockchainManagementClient;

  /**
   * Initialize a new instance of the class TransactionNodes class.
   * @param client Reference to the service client
   */
  constructor(client: BlockchainManagementClient) {
    this.client = client;
  }

  /**
   * Get the details of the transaction node.
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param transactionNodeName Transaction node name.
   * @param options The options parameters.
   */
  get(
    blockchainMemberName: string,
    resourceGroupName: string,
    transactionNodeName: string,
    options?: coreHttp.OperationOptions
  ): Promise<TransactionNodesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        blockchainMemberName,
        resourceGroupName,
        transactionNodeName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<TransactionNodesGetResponse>;
  }

  /**
   * Create or update the transaction node.
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param transactionNodeName Transaction node name.
   * @param options The options parameters.
   */
  async create(
    blockchainMemberName: string,
    resourceGroupName: string,
    transactionNodeName: string,
    options?: TransactionNodesCreateOptionalParams
  ): Promise<LROPoller<TransactionNodesCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      blockchainMemberName,
      resourceGroupName,
      transactionNodeName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        TransactionNodesCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Delete the transaction node.
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param transactionNodeName Transaction node name.
   * @param options The options parameters.
   */
  async delete(
    blockchainMemberName: string,
    resourceGroupName: string,
    transactionNodeName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      blockchainMemberName,
      resourceGroupName,
      transactionNodeName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Update the transaction node.
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param transactionNodeName Transaction node name.
   * @param options The options parameters.
   */
  update(
    blockchainMemberName: string,
    resourceGroupName: string,
    transactionNodeName: string,
    options?: TransactionNodesUpdateOptionalParams
  ): Promise<TransactionNodesUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        blockchainMemberName,
        resourceGroupName,
        transactionNodeName,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<TransactionNodesUpdateResponse>;
  }

  /**
   * Lists the transaction nodes for a blockchain member.
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param options The options parameters.
   */
  list(
    blockchainMemberName: string,
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<TransactionNodesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { blockchainMemberName, resourceGroupName, options: operationOptions },
      listOperationSpec
    ) as Promise<TransactionNodesListResponse>;
  }

  /**
   * List the API keys for the transaction node.
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param transactionNodeName Transaction node name.
   * @param options The options parameters.
   */
  listApiKeys(
    blockchainMemberName: string,
    resourceGroupName: string,
    transactionNodeName: string,
    options?: coreHttp.OperationOptions
  ): Promise<TransactionNodesListApiKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        blockchainMemberName,
        resourceGroupName,
        transactionNodeName,
        options: operationOptions
      },
      listApiKeysOperationSpec
    ) as Promise<TransactionNodesListApiKeysResponse>;
  }

  /**
   * Regenerate the API keys for the blockchain member.
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param transactionNodeName Transaction node name.
   * @param options The options parameters.
   */
  listRegenerateApiKeys(
    blockchainMemberName: string,
    resourceGroupName: string,
    transactionNodeName: string,
    options?: TransactionNodesListRegenerateApiKeysOptionalParams
  ): Promise<TransactionNodesListRegenerateApiKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        blockchainMemberName,
        resourceGroupName,
        transactionNodeName,
        options: operationOptions
      },
      listRegenerateApiKeysOperationSpec
    ) as Promise<TransactionNodesListRegenerateApiKeysResponse>;
  }

  /**
   * ListNext
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    blockchainMemberName: string,
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<TransactionNodesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        blockchainMemberName,
        resourceGroupName,
        nextLink,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<TransactionNodesListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionNode
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.transactionNodeName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionNode
    },
    201: {
      bodyMapper: Mappers.TransactionNode
    },
    202: {
      bodyMapper: Mappers.TransactionNode
    },
    204: {
      bodyMapper: Mappers.TransactionNode
    }
  },
  requestBody: Parameters.transactionNode,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.transactionNodeName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.transactionNodeName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionNode
    }
  },
  requestBody: Parameters.transactionNode1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.transactionNodeName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionNodeCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const listApiKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}/listApiKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ApiKeyCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.transactionNodeName
  ],
  serializer
};
const listRegenerateApiKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}/regenerateApiKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ApiKeyCollection
    }
  },
  requestBody: Parameters.apiKey1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.transactionNodeName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionNodeCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  serializer
};
