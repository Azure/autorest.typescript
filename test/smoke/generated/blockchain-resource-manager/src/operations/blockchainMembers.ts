/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BlockchainManagementClient } from "../blockchainManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  BlockchainMembersGetResponse,
  BlockchainMembersCreateOptionalParams,
  BlockchainMembersCreateResponse,
  BlockchainMembersUpdateOptionalParams,
  BlockchainMembersUpdateResponse,
  BlockchainMembersListResponse,
  BlockchainMembersListAllResponse,
  BlockchainMembersListConsortiumMembersResponse,
  BlockchainMembersListApiKeysResponse,
  BlockchainMembersListRegenerateApiKeysOptionalParams,
  BlockchainMembersListRegenerateApiKeysResponse,
  BlockchainMembersListNextResponse,
  BlockchainMembersListAllNextResponse,
  BlockchainMembersListConsortiumMembersNextResponse
} from "../models";

/**
 * Class representing a BlockchainMembers.
 */
export class BlockchainMembers {
  private readonly client: BlockchainManagementClient;

  /**
   * Initialize a new instance of the class BlockchainMembers class.
   * @param client Reference to the service client
   */
  constructor(client: BlockchainManagementClient) {
    this.client = client;
  }

  /**
   * Get details about a blockchain member.
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param options The options parameters.
   */
  get(
    blockchainMemberName: string,
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BlockchainMembersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { blockchainMemberName, resourceGroupName, options: operationOptions },
      getOperationSpec
    ) as Promise<BlockchainMembersGetResponse>;
  }

  /**
   * Create a blockchain member.
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param options The options parameters.
   */
  async create(
    blockchainMemberName: string,
    resourceGroupName: string,
    options?: BlockchainMembersCreateOptionalParams
  ): Promise<LROPoller<BlockchainMembersCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      blockchainMemberName,
      resourceGroupName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        BlockchainMembersCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Delete a blockchain member.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param blockchainMemberName Blockchain member name
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    blockchainMemberName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      blockchainMemberName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Update a blockchain member.
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param options The options parameters.
   */
  update(
    blockchainMemberName: string,
    resourceGroupName: string,
    options?: BlockchainMembersUpdateOptionalParams
  ): Promise<BlockchainMembersUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { blockchainMemberName, resourceGroupName, options: operationOptions },
      updateOperationSpec
    ) as Promise<BlockchainMembersUpdateResponse>;
  }

  /**
   * Lists the blockchain members for a resource group.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BlockchainMembersListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listOperationSpec
    ) as Promise<BlockchainMembersListResponse>;
  }

  /**
   * Lists the blockchain members for a subscription.
   * @param options The options parameters.
   */
  listAll(
    options?: coreHttp.OperationOptions
  ): Promise<BlockchainMembersListAllResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listAllOperationSpec
    ) as Promise<BlockchainMembersListAllResponse>;
  }

  /**
   * Lists the consortium members for a blockchain member.
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param options The options parameters.
   */
  listConsortiumMembers(
    blockchainMemberName: string,
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BlockchainMembersListConsortiumMembersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { blockchainMemberName, resourceGroupName, options: operationOptions },
      listConsortiumMembersOperationSpec
    ) as Promise<BlockchainMembersListConsortiumMembersResponse>;
  }

  /**
   * Lists the API keys for a blockchain member.
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param options The options parameters.
   */
  listApiKeys(
    blockchainMemberName: string,
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BlockchainMembersListApiKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { blockchainMemberName, resourceGroupName, options: operationOptions },
      listApiKeysOperationSpec
    ) as Promise<BlockchainMembersListApiKeysResponse>;
  }

  /**
   * Regenerate the API keys for a blockchain member.
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param options The options parameters.
   */
  listRegenerateApiKeys(
    blockchainMemberName: string,
    resourceGroupName: string,
    options?: BlockchainMembersListRegenerateApiKeysOptionalParams
  ): Promise<BlockchainMembersListRegenerateApiKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { blockchainMemberName, resourceGroupName, options: operationOptions },
      listRegenerateApiKeysOperationSpec
    ) as Promise<BlockchainMembersListRegenerateApiKeysResponse>;
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<BlockchainMembersListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<BlockchainMembersListNextResponse>;
  }

  /**
   * ListAllNext
   * @param nextLink The nextLink from the previous successful call to the ListAll method.
   * @param options The options parameters.
   */
  listAllNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<BlockchainMembersListAllNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listAllNextOperationSpec
    ) as Promise<BlockchainMembersListAllNextResponse>;
  }

  /**
   * ListConsortiumMembersNext
   * @param blockchainMemberName Blockchain member name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param nextLink The nextLink from the previous successful call to the ListConsortiumMembers method.
   * @param options The options parameters.
   */
  listConsortiumMembersNext(
    blockchainMemberName: string,
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<BlockchainMembersListConsortiumMembersNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        blockchainMemberName,
        resourceGroupName,
        nextLink,
        options: operationOptions
      },
      listConsortiumMembersNextOperationSpec
    ) as Promise<BlockchainMembersListConsortiumMembersNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BlockchainMember
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.BlockchainMember
    },
    201: {
      bodyMapper: Mappers.BlockchainMember
    },
    202: {
      bodyMapper: Mappers.BlockchainMember
    },
    204: {
      bodyMapper: Mappers.BlockchainMember
    }
  },
  requestBody: Parameters.blockchainMember,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.blockchainMemberName1
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.BlockchainMember
    }
  },
  requestBody: Parameters.blockchainMember1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BlockchainMemberCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const listAllOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Blockchain/blockchainMembers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BlockchainMemberCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listConsortiumMembersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/consortiumMembers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConsortiumMemberCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const listApiKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/listApiKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ApiKeyCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const listRegenerateApiKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/regenerateApiKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ApiKeyCollection
    }
  },
  requestBody: Parameters.apiKey,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BlockchainMemberCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  serializer
};
const listAllNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BlockchainMemberCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink1
  ],
  serializer
};
const listConsortiumMembersNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConsortiumMemberCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.blockchainMemberName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink2
  ],
  serializer
};
