/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The general resource model definition
 */
export interface Resource {
  /**
   * Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   */
  readonly id?: string;
  /**
   * The name of the resource
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   */
  readonly type?: string;
  /**
   * The geo-location where the resource lives
   */
  location?: string;
}

/**
 * The resource model definition for a ARM tracked top level resource
 */
export type TrackedResource = Resource & {
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
};

/**
 * The Managed Network resource
 */
export type ManagedNetwork = TrackedResource & {
  /**
   * Provisioning state of the ManagedNetwork resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The collection of management groups, subscriptions, virtual networks, and subnets by the Managed Network. This is a read-only property that is reflective of all ScopeAssignments for this Managed Network
   */
  scope?: Scope;
  /**
   * The collection of groups and policies concerned with connectivity
   */
  readonly connectivity?: ConnectivityCollection;
};

/**
 * Base for resource properties.
 */
export interface ResourceProperties {
  /**
   * Provisioning state of the ManagedNetwork resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
}

/**
 * Properties of Managed Network
 */
export type ManagedNetworkProperties = ResourceProperties & {
  /**
   * The collection of management groups, subscriptions, virtual networks, and subnets by the Managed Network. This is a read-only property that is reflective of all ScopeAssignments for this Managed Network
   */
  scope?: Scope;
  /**
   * The collection of groups and policies concerned with connectivity
   */
  readonly connectivity?: ConnectivityCollection;
};

/**
 * Scope of a Managed Network
 */
export interface Scope {
  /**
   * The collection of management groups covered by the Managed Network
   */
  managementGroups?: ResourceId[];
  /**
   * The collection of subscriptions covered by the Managed Network
   */
  subscriptions?: ResourceId[];
  /**
   * The collection of virtual nets covered by the Managed Network
   */
  virtualNetworks?: ResourceId[];
  /**
   * The collection of  subnets covered by the Managed Network
   */
  subnets?: ResourceId[];
}

/**
 * Generic pointer to a resource
 */
export interface ResourceId {
  /**
   * Resource Id
   */
  id?: string;
}

/**
 * The collection of Connectivity related groups and policies within the Managed Network
 */
export interface ConnectivityCollection {
  /**
   * The collection of connectivity related Managed Network Groups within the Managed Network
   */
  readonly groups?: ManagedNetworkGroup[];
  /**
   * The collection of Managed Network Peering Policies within the Managed Network
   */
  readonly peerings?: ManagedNetworkPeeringPolicy[];
}

/**
 * The resource model definition for a ARM proxy resource. It will have everything other than required location and tags
 */
export type ProxyResource = Resource & {};

/**
 * The Managed Network Group resource
 */
export type ManagedNetworkGroup = ProxyResource & {
  /**
   * Responsibility role under which this Managed Network Group will be created
   */
  kind?: "Connectivity";
  /**
   * Provisioning state of the ManagedNetwork resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The collection of management groups covered by the Managed Network
   */
  managementGroups?: ResourceId[];
  /**
   * The collection of subscriptions covered by the Managed Network
   */
  subscriptions?: ResourceId[];
  /**
   * The collection of virtual nets covered by the Managed Network
   */
  virtualNetworks?: ResourceId[];
  /**
   * The collection of  subnets covered by the Managed Network
   */
  subnets?: ResourceId[];
};

/**
 * Properties of a Managed Network Group
 */
export type ManagedNetworkGroupProperties = ResourceProperties & {
  /**
   * The collection of management groups covered by the Managed Network
   */
  managementGroups?: ResourceId[];
  /**
   * The collection of subscriptions covered by the Managed Network
   */
  subscriptions?: ResourceId[];
  /**
   * The collection of virtual nets covered by the Managed Network
   */
  virtualNetworks?: ResourceId[];
  /**
   * The collection of  subnets covered by the Managed Network
   */
  subnets?: ResourceId[];
};

/**
 * The Managed Network Peering Policy resource
 */
export type ManagedNetworkPeeringPolicy = ProxyResource & {
  /**
   * Gets or sets the properties of a Managed Network Policy
   */
  properties?: ManagedNetworkPeeringPolicyProperties;
};

/**
 * Properties of a Managed Network Peering Policy
 */
export type ManagedNetworkPeeringPolicyProperties = ResourceProperties & {
  /**
   * Gets or sets the connectivity type of a network structure policy
   */
  type: Type;
  /**
   * Gets or sets the hub virtual network ID
   */
  hub?: ResourceId;
  /**
   * Gets or sets the spokes group IDs
   */
  spokes?: ResourceId[];
  /**
   * Gets or sets the mesh group IDs
   */
  mesh?: ResourceId[];
};

/**
 * The error response that indicates why an operation has failed.
 */
export interface ErrorResponse {
  /**
   * The error code.
   */
  readonly code?: string;
  /**
   * The error message.
   */
  readonly message?: string;
}

/**
 * Update Tags of Managed Network
 */
export interface ManagedNetworkUpdate {
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Result of the request to list Managed Network. It contains a list of Managed Networks and a URL link to get the next set of results.
 */
export interface ManagedNetworkListResult {
  /**
   * Gets a page of ManagedNetworks
   */
  value?: ManagedNetwork[];
  /**
   * Gets the URL to get the next page of results.
   */
  nextLink?: string;
}

/**
 * The Managed Network resource
 */
export type ScopeAssignment = ProxyResource & {
  /**
   * Provisioning state of the ManagedNetwork resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  readonly etag?: string;
  /**
   * The managed network ID with scope will be assigned to.
   */
  assignedManagedNetwork?: string;
};

/**
 * Properties of Managed Network
 */
export type ScopeAssignmentProperties = ResourceProperties & {
  /**
   * The managed network ID with scope will be assigned to.
   */
  assignedManagedNetwork?: string;
};

/**
 * Result of the request to list ScopeAssignment. It contains a list of groups and a URL link to get the next set of results.
 */
export interface ScopeAssignmentListResult {
  /**
   * Gets a page of ScopeAssignment
   */
  value?: ScopeAssignment[];
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Result of the request to list Managed Network Groups. It contains a list of groups and a URL link to get the next set of results.
 */
export interface ManagedNetworkGroupListResult {
  /**
   * Gets a page of ManagedNetworkGroup
   */
  value?: ManagedNetworkGroup[];
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Result of the request to list Managed Network Peering Policies. It contains a list of policies and a URL link to get the next set of results.
 */
export interface ManagedNetworkPeeringPolicyListResult {
  /**
   * Gets a page of Peering Policies
   */
  value?: ManagedNetworkPeeringPolicy[];
  /**
   * Gets the URL to get the next page of results.
   */
  nextLink?: string;
}

/**
 * Result of the request to list Managed Network operations. It contains a list of operations and a URL link to get the next set of results.
 */
export interface OperationListResult {
  /**
   * List of Resource Provider operations supported by the Managed Network resource provider.
   */
  value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.ManagedNetwork
   */
  provider?: string;
  /**
   * Resource on which the operation is performed: Profile, endpoint, etc.
   */
  resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  operation?: string;
}

/**
 * Properties of a Hub and Spoke Peering Policy
 */
export type HubAndSpokePeeringPolicyProperties = ManagedNetworkPeeringPolicyProperties & {
  /**
   * Gets or sets the hub virtual network ID
   */
  hub?: ResourceId;
  /**
   * Gets or sets the spokes group IDs
   */
  spokes?: ResourceId[];
};

/**
 * Properties of a Mesh Peering Policy
 */
export type MeshPeeringPolicyProperties = ManagedNetworkPeeringPolicyProperties & {
  /**
   * Gets or sets the mesh group IDs
   */
  mesh?: ResourceId[];
};
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState =
  | "Updating"
  | "Deleting"
  | "Failed"
  | "Succeeded";
/**
 * Defines values for Type.
 */
export type Type = "HubAndSpokeTopology" | "MeshTopology";

/**
 * Contains response data for the get operation.
 */
export type ManagedNetworksGetResponse = ManagedNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetwork;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedNetworksCreateOrUpdateResponse = ManagedNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetwork;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ManagedNetworksUpdateResponse = ManagedNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetwork;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedNetworksListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * May be used to limit the number of results in a page for list queries.
   */
  top?: number;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ManagedNetworksListByResourceGroupResponse = ManagedNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetworkListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedNetworksListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * May be used to limit the number of results in a page for list queries.
   */
  top?: number;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type ManagedNetworksListBySubscriptionResponse = ManagedNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetworkListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedNetworksListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * May be used to limit the number of results in a page for list queries.
   */
  top?: number;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ManagedNetworksListByResourceGroupNextResponse = ManagedNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetworkListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedNetworksListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * May be used to limit the number of results in a page for list queries.
   */
  top?: number;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type ManagedNetworksListBySubscriptionNextResponse = ManagedNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetworkListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ScopeAssignmentsGetResponse = ScopeAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ScopeAssignment;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ScopeAssignmentsCreateOrUpdateResponse = ScopeAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ScopeAssignment;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ScopeAssignmentsListResponse = ScopeAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ScopeAssignmentListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ScopeAssignmentsListNextResponse = ScopeAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ScopeAssignmentListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedNetworkGroupsGetResponse = ManagedNetworkGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetworkGroup;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedNetworkGroupsCreateOrUpdateResponse = ManagedNetworkGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetworkGroup;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedNetworkGroupsListByManagedNetworkOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * May be used to limit the number of results in a page for list queries.
   */
  top?: number;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the listByManagedNetwork operation.
 */
export type ManagedNetworkGroupsListByManagedNetworkResponse = ManagedNetworkGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetworkGroupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedNetworkGroupsListByManagedNetworkNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * May be used to limit the number of results in a page for list queries.
   */
  top?: number;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the listByManagedNetworkNext operation.
 */
export type ManagedNetworkGroupsListByManagedNetworkNextResponse = ManagedNetworkGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetworkGroupListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedNetworkPeeringPoliciesGetResponse = ManagedNetworkPeeringPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetworkPeeringPolicy;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedNetworkPeeringPoliciesCreateOrUpdateResponse = ManagedNetworkPeeringPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetworkPeeringPolicy;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedNetworkPeeringPoliciesListByManagedNetworkOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * May be used to limit the number of results in a page for list queries.
   */
  top?: number;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the listByManagedNetwork operation.
 */
export type ManagedNetworkPeeringPoliciesListByManagedNetworkResponse = ManagedNetworkPeeringPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetworkPeeringPolicyListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedNetworkPeeringPoliciesListByManagedNetworkNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * May be used to limit the number of results in a page for list queries.
   */
  top?: number;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the listByManagedNetworkNext operation.
 */
export type ManagedNetworkPeeringPoliciesListByManagedNetworkNextResponse = ManagedNetworkPeeringPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedNetworkPeeringPolicyListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagedNetworkManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
