/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreHttp.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ManagedNetwork: coreHttp.CompositeMapper = {
  serializedName: "ManagedNetwork",
  type: {
    name: "Composite",
    className: "ManagedNetwork",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "properties.etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        type: {
          name: "Composite",
          className: "Scope"
        }
      },
      connectivity: {
        serializedName: "connectivity",
        type: {
          name: "Composite",
          className: "ConnectivityCollection"
        }
      }
    }
  }
};

export const ResourceProperties: coreHttp.CompositeMapper = {
  serializedName: "ResourceProperties",
  type: {
    name: "Composite",
    className: "ResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedNetworkProperties: coreHttp.CompositeMapper = {
  serializedName: "ManagedNetworkProperties",
  type: {
    name: "Composite",
    className: "ManagedNetworkProperties",
    modelProperties: {
      ...ResourceProperties.type.modelProperties,
      scope: {
        serializedName: "scope",
        type: {
          name: "Composite",
          className: "Scope"
        }
      },
      connectivity: {
        serializedName: "connectivity",
        type: {
          name: "Composite",
          className: "ConnectivityCollection"
        }
      }
    }
  }
};

export const Scope: coreHttp.CompositeMapper = {
  serializedName: "Scope",
  type: {
    name: "Composite",
    className: "Scope",
    modelProperties: {
      managementGroups: {
        serializedName: "managementGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      },
      subscriptions: {
        serializedName: "subscriptions",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      },
      virtualNetworks: {
        serializedName: "virtualNetworks",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      },
      subnets: {
        serializedName: "subnets",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      }
    }
  }
};

export const ResourceId: coreHttp.CompositeMapper = {
  serializedName: "ResourceId",
  type: {
    name: "Composite",
    className: "ResourceId",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectivityCollection: coreHttp.CompositeMapper = {
  serializedName: "ConnectivityCollection",
  type: {
    name: "Composite",
    className: "ConnectivityCollection",
    modelProperties: {
      groups: {
        serializedName: "groups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ManagedNetworkGroup" }
          }
        }
      },
      peerings: {
        serializedName: "peerings",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedNetworkPeeringPolicy"
            }
          }
        }
      }
    }
  }
};

export const ProxyResource: coreHttp.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const ManagedNetworkGroup: coreHttp.CompositeMapper = {
  serializedName: "ManagedNetworkGroup",
  type: {
    name: "Composite",
    className: "ManagedNetworkGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        defaultValue: "Connectivity",
        serializedName: "kind",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "properties.etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managementGroups: {
        serializedName: "properties.managementGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      },
      subscriptions: {
        serializedName: "properties.subscriptions",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      },
      virtualNetworks: {
        serializedName: "properties.virtualNetworks",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      },
      subnets: {
        serializedName: "properties.subnets",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      }
    }
  }
};

export const ManagedNetworkGroupProperties: coreHttp.CompositeMapper = {
  serializedName: "ManagedNetworkGroupProperties",
  type: {
    name: "Composite",
    className: "ManagedNetworkGroupProperties",
    modelProperties: {
      ...ResourceProperties.type.modelProperties,
      managementGroups: {
        serializedName: "managementGroups",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      },
      subscriptions: {
        serializedName: "subscriptions",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      },
      virtualNetworks: {
        serializedName: "virtualNetworks",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      },
      subnets: {
        serializedName: "subnets",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      }
    }
  }
};

export const ManagedNetworkPeeringPolicy: coreHttp.CompositeMapper = {
  serializedName: "ManagedNetworkPeeringPolicy",
  type: {
    name: "Composite",
    className: "ManagedNetworkPeeringPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ManagedNetworkPeeringPolicyProperties"
        }
      }
    }
  }
};

export const ManagedNetworkPeeringPolicyProperties: coreHttp.CompositeMapper = {
  serializedName: "ManagedNetworkPeeringPolicyProperties",
  type: {
    name: "Composite",
    className: "ManagedNetworkPeeringPolicyProperties",
    modelProperties: {
      ...ResourceProperties.type.modelProperties,
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      hub: {
        serializedName: "hub",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      spokes: {
        serializedName: "spokes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      },
      mesh: {
        serializedName: "mesh",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedNetworkUpdate: coreHttp.CompositeMapper = {
  serializedName: "ManagedNetworkUpdate",
  type: {
    name: "Composite",
    className: "ManagedNetworkUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ManagedNetworkListResult: coreHttp.CompositeMapper = {
  serializedName: "ManagedNetworkListResult",
  type: {
    name: "Composite",
    className: "ManagedNetworkListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ManagedNetwork" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScopeAssignment: coreHttp.CompositeMapper = {
  serializedName: "ScopeAssignment",
  type: {
    name: "Composite",
    className: "ScopeAssignment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "properties.etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      assignedManagedNetwork: {
        serializedName: "properties.assignedManagedNetwork",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScopeAssignmentProperties: coreHttp.CompositeMapper = {
  serializedName: "ScopeAssignmentProperties",
  type: {
    name: "Composite",
    className: "ScopeAssignmentProperties",
    modelProperties: {
      ...ResourceProperties.type.modelProperties,
      assignedManagedNetwork: {
        serializedName: "assignedManagedNetwork",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScopeAssignmentListResult: coreHttp.CompositeMapper = {
  serializedName: "ScopeAssignmentListResult",
  type: {
    name: "Composite",
    className: "ScopeAssignmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ScopeAssignment" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedNetworkGroupListResult: coreHttp.CompositeMapper = {
  serializedName: "ManagedNetworkGroupListResult",
  type: {
    name: "Composite",
    className: "ManagedNetworkGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ManagedNetworkGroup" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedNetworkPeeringPolicyListResult: coreHttp.CompositeMapper = {
  serializedName: "ManagedNetworkPeeringPolicyListResult",
  type: {
    name: "Composite",
    className: "ManagedNetworkPeeringPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedNetworkPeeringPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HubAndSpokePeeringPolicyProperties: coreHttp.CompositeMapper = {
  serializedName: "HubAndSpokeTopology",
  type: {
    name: "Composite",
    className: "HubAndSpokePeeringPolicyProperties",
    modelProperties: {
      ...ManagedNetworkPeeringPolicyProperties.type.modelProperties,
      hub: {
        serializedName: "hub",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      spokes: {
        serializedName: "spokes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      }
    }
  }
};

export const MeshPeeringPolicyProperties: coreHttp.CompositeMapper = {
  serializedName: "MeshTopology",
  type: {
    name: "Composite",
    className: "MeshPeeringPolicyProperties",
    modelProperties: {
      ...ManagedNetworkPeeringPolicyProperties.type.modelProperties,
      mesh: {
        serializedName: "mesh",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceId" } }
        }
      }
    }
  }
};
