/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagedNetworkManagementClient } from "../managedNetworkManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ManagedNetworkGroupsGetResponse,
  ManagedNetworkGroup,
  ManagedNetworkGroupsCreateOrUpdateResponse,
  ManagedNetworkGroupsListByManagedNetworkOptionalParams,
  ManagedNetworkGroupsListByManagedNetworkResponse,
  ManagedNetworkGroupsListByManagedNetworkNextOptionalParams,
  ManagedNetworkGroupsListByManagedNetworkNextResponse
} from "../models";

/**
 * Class representing a ManagedNetworkGroups.
 */
export class ManagedNetworkGroups {
  private readonly client: ManagedNetworkManagementClient;

  /**
   * Initialize a new instance of the class ManagedNetworkGroups class.
   * @param client Reference to the service client
   */
  constructor(client: ManagedNetworkManagementClient) {
    this.client = client;
  }

  /**
   * The Get ManagedNetworkGroups operation gets a Managed Network Group specified by the resource group,
   * Managed Network name, and group name
   * @param resourceGroupName The name of the resource group.
   * @param managedNetworkName The name of the Managed Network.
   * @param managedNetworkGroupName The name of the Managed Network Group.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    managedNetworkName: string,
    managedNetworkGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ManagedNetworkGroupsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managedNetworkName,
        managedNetworkGroupName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ManagedNetworkGroupsGetResponse>;
  }

  /**
   * The Put ManagedNetworkGroups operation creates or updates a Managed Network Group resource
   * @param resourceGroupName The name of the resource group.
   * @param managedNetworkName The name of the Managed Network.
   * @param managedNetworkGroupName The name of the Managed Network Group.
   * @param managedNetworkGroup Parameters supplied to the create/update a Managed Network Group resource
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    managedNetworkName: string,
    managedNetworkGroupName: string,
    managedNetworkGroup: ManagedNetworkGroup,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ManagedNetworkGroupsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managedNetworkName,
      managedNetworkGroupName,
      managedNetworkGroup,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ManagedNetworkGroupsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * The Delete ManagedNetworkGroups operation deletes a Managed Network Group specified by the resource
   * group, Managed Network name, and group name
   * @param resourceGroupName The name of the resource group.
   * @param managedNetworkName The name of the Managed Network.
   * @param managedNetworkGroupName The name of the Managed Network Group.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    managedNetworkName: string,
    managedNetworkGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      managedNetworkName,
      managedNetworkGroupName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * The ListByManagedNetwork ManagedNetworkGroup operation retrieves all the Managed Network Groups in a
   * specified Managed Networks in a paginated format.
   * @param resourceGroupName The name of the resource group.
   * @param managedNetworkName The name of the Managed Network.
   * @param options The options parameters.
   */
  listByManagedNetwork(
    resourceGroupName: string,
    managedNetworkName: string,
    options?: ManagedNetworkGroupsListByManagedNetworkOptionalParams
  ): Promise<ManagedNetworkGroupsListByManagedNetworkResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, managedNetworkName, options: operationOptions },
      listByManagedNetworkOperationSpec
    ) as Promise<ManagedNetworkGroupsListByManagedNetworkResponse>;
  }

  /**
   * ListByManagedNetworkNext
   * @param resourceGroupName The name of the resource group.
   * @param managedNetworkName The name of the Managed Network.
   * @param nextLink The nextLink from the previous successful call to the ListByManagedNetwork method.
   * @param options The options parameters.
   */
  listByManagedNetworkNext(
    resourceGroupName: string,
    managedNetworkName: string,
    nextLink: string,
    options?: ManagedNetworkGroupsListByManagedNetworkNextOptionalParams
  ): Promise<ManagedNetworkGroupsListByManagedNetworkNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managedNetworkName,
        nextLink,
        options: operationOptions
      },
      listByManagedNetworkNextOperationSpec
    ) as Promise<ManagedNetworkGroupsListByManagedNetworkNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}/managedNetworkGroups/{managedNetworkGroupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedNetworkGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managedNetworkName,
    Parameters.managedNetworkGroupName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}/managedNetworkGroups/{managedNetworkGroupName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedNetworkGroup
    },
    201: {
      bodyMapper: Mappers.ManagedNetworkGroup
    },
    202: {
      bodyMapper: Mappers.ManagedNetworkGroup
    },
    204: {
      bodyMapper: Mappers.ManagedNetworkGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.managedNetworkGroup,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managedNetworkName,
    Parameters.managedNetworkGroupName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}/managedNetworkGroups/{managedNetworkGroupName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managedNetworkName,
    Parameters.managedNetworkGroupName
  ],
  serializer
};
const listByManagedNetworkOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork/managedNetworks/{managedNetworkName}/managedNetworkGroups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedNetworkGroupListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skiptoken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managedNetworkName
  ],
  serializer
};
const listByManagedNetworkNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedNetworkGroupListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skiptoken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managedNetworkName,
    Parameters.nextLink3
  ],
  serializer
};
