/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagedNetworkManagementClient } from "../managedNetworkManagementClient";
import {
  ScopeAssignmentsGetResponse,
  ScopeAssignment,
  ScopeAssignmentsCreateOrUpdateResponse,
  ScopeAssignmentsListResponse,
  ScopeAssignmentsListNextResponse
} from "../models";

/**
 * Class representing a ScopeAssignments.
 */
export class ScopeAssignments {
  private readonly client: ManagedNetworkManagementClient;

  /**
   * Initialize a new instance of the class ScopeAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: ManagedNetworkManagementClient) {
    this.client = client;
  }

  /**
   * Get the specified scope assignment.
   * @param scope The base resource of the scope assignment.
   * @param scopeAssignmentName The name of the scope assignment to get.
   * @param options The options parameters.
   */
  get(
    scope: string,
    scopeAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ScopeAssignmentsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, scopeAssignmentName, options: operationOptions },
      getOperationSpec
    ) as Promise<ScopeAssignmentsGetResponse>;
  }

  /**
   * Creates a scope assignment.
   * @param parameters Parameters supplied to the specify which Managed Network this scope is being
   *                   assigned
   * @param scope The base resource of the scope assignment to create. The scope can be any REST resource
   *              instance. For example, use 'subscriptions/{subscription-id}' for a subscription,
   *              'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and
   *              'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
   *              for a resource.
   * @param scopeAssignmentName The name of the scope assignment to create.
   * @param options The options parameters.
   */
  createOrUpdate(
    parameters: ScopeAssignment,
    scope: string,
    scopeAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ScopeAssignmentsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { parameters, scope, scopeAssignmentName, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<ScopeAssignmentsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a scope assignment.
   * @param scope The scope of the scope assignment to delete.
   * @param scopeAssignmentName The name of the scope assignment to delete.
   * @param options The options parameters.
   */
  delete(
    scope: string,
    scopeAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, scopeAssignmentName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get the specified scope assignment.
   * @param scope The base resource of the scope assignment.
   * @param options The options parameters.
   */
  list(
    scope: string,
    options?: coreHttp.OperationOptions
  ): Promise<ScopeAssignmentsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, options: operationOptions },
      listOperationSpec
    ) as Promise<ScopeAssignmentsListResponse>;
  }

  /**
   * ListNext
   * @param scope The base resource of the scope assignment.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    scope: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ScopeAssignmentsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ScopeAssignmentsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScopeAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.scopeAssignmentName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ScopeAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope1,
    Parameters.scopeAssignmentName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}",
  httpMethod: "DELETE",
  responses: { 200: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope2,
    Parameters.scopeAssignmentName2
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.ManagedNetwork/scopeAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScopeAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScopeAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.nextLink2],
  serializer
};
