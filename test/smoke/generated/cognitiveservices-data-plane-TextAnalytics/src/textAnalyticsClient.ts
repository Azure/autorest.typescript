/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { TextAnalyticsClientContext } from "./textAnalyticsClientContext";
import {
  TextAnalyticsClientDetectLanguageOptionalParams,
  TextAnalyticsClientDetectLanguageResponse,
  TextAnalyticsClientEntitiesOptionalParams,
  TextAnalyticsClientEntitiesResponse,
  TextAnalyticsClientKeyPhrasesOptionalParams,
  TextAnalyticsClientKeyPhrasesResponse,
  TextAnalyticsClientSentimentOptionalParams,
  TextAnalyticsClientSentimentResponse
} from "./models";

class TextAnalyticsClient extends TextAnalyticsClientContext {
  /**
   * Initializes a new instance of the TextAnalyticsClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   *                 https://westus.api.cognitive.microsoft.com).
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    endpoint: string,
    options?: Models.TextAnalyticsClientOptionalParams
  ) {
    super(credentials, endpoint, options);
  }

  /**
   * Scores close to 1 indicate 100% certainty that the identified language is true. A total of 120
   * languages are supported.
   * @param options The options parameters.
   */
  detectLanguage(
    options?: TextAnalyticsClientDetectLanguageOptionalParams
  ): Promise<TextAnalyticsClientDetectLanguageResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      detectLanguageOperationSpec
    ) as Promise<TextAnalyticsClientDetectLanguageResponse>;
  }

  /**
   * To get even more information on each recognized entity we recommend using the Bing Entity Search API
   * by querying for the recognized entities names. See the <a
   * href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/text-analytics-supported-languages">Supported
   * languages in Text Analytics API</a> for the list of enabled languages.
   * @param options The options parameters.
   */
  entities(
    options?: TextAnalyticsClientEntitiesOptionalParams
  ): Promise<TextAnalyticsClientEntitiesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      entitiesOperationSpec
    ) as Promise<TextAnalyticsClientEntitiesResponse>;
  }

  /**
   * See the <a
   * href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages">Text
   * Analytics Documentation</a> for details about the languages that are supported by key phrase
   * extraction.
   * @param options The options parameters.
   */
  keyPhrases(
    options?: TextAnalyticsClientKeyPhrasesOptionalParams
  ): Promise<TextAnalyticsClientKeyPhrasesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      keyPhrasesOperationSpec
    ) as Promise<TextAnalyticsClientKeyPhrasesResponse>;
  }

  /**
   * Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment.
   * A score of 0.5 indicates the lack of sentiment (e.g. a factoid statement). See the <a
   * href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages">Text
   * Analytics Documentation</a> for details about the languages that are supported by sentiment
   * analysis.
   * @param options The options parameters.
   */
  sentiment(
    options?: TextAnalyticsClientSentimentOptionalParams
  ): Promise<TextAnalyticsClientSentimentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      sentimentOperationSpec
    ) as Promise<TextAnalyticsClientSentimentResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const detectLanguageOperationSpec: coreHttp.OperationSpec = {
  path: "/languages",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LanguageBatchResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.languageBatchInput,
  queryParameters: [Parameters.showStats],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  serializer
};
const entitiesOperationSpec: coreHttp.OperationSpec = {
  path: "/entities",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EntitiesBatchResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.multiLanguageBatchInput,
  queryParameters: [Parameters.showStats],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  serializer
};
const keyPhrasesOperationSpec: coreHttp.OperationSpec = {
  path: "/keyPhrases",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.KeyPhraseBatchResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.multiLanguageBatchInput1,
  queryParameters: [Parameters.showStats],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  serializer
};
const sentimentOperationSpec: coreHttp.OperationSpec = {
  path: "/sentiment",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SentimentBatchResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.multiLanguageBatchInput,
  queryParameters: [Parameters.showStats],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  serializer
};

// Operation Specifications

export {
  TextAnalyticsClient,
  TextAnalyticsClientContext,
  Models as TextAnalyticsModels,
  Mappers as TextAnalyticsMappers
};
