/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageImportExport } from "../storageImportExport";
import { LocationsListResponse, LocationsGetResponse } from "../models";

/**
 * Class representing a Locations.
 */
export class Locations {
  private readonly client: StorageImportExport;

  /**
   * Initialize a new instance of the class Locations class.
   * @param client Reference to the service client
   */
  constructor(client: StorageImportExport) {
    this.client = client;
  }

  /**
   * Returns a list of locations to which you can ship the disks associated with an import or export job.
   * A location is a Microsoft data center region.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<LocationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<LocationsListResponse>;
  }

  /**
   * Returns the details about a location to which you can ship the disks associated with an import or
   * export job. A location is an Azure region.
   * @param locationName The name of the location. For example, West US or westus.
   * @param options The options parameters.
   */
  get(
    locationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LocationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { locationName, options: operationOptions },
      getOperationSpec
    ) as Promise<LocationsGetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ImportExport/locations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LocationsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ImportExport/locations/{locationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Location
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.locationName],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
