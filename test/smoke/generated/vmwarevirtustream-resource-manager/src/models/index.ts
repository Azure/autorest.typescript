/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Pageable list of operations
 */
export interface OperationList {
  /**
   * List of operations
   */
  readonly value?: Operation[];
  /**
   * URL to get the next page if any
   */
  readonly nextLink?: string;
}

/**
 * A REST API operation
 */
export interface Operation {
  /**
   * Name of the operation being performed on this object
   */
  readonly name?: string;
  /**
   * Contains the localized display information for this operation
   */
  readonly display?: OperationDisplay;
}

/**
 * Contains the localized display information for this operation
 */
export interface OperationDisplay {
  /**
   * Localized friendly form of the resource provider name
   */
  readonly provider?: string;
  /**
   * Localized friendly form of the resource type related to this operation
   */
  readonly resource?: string;
  /**
   * Localized friendly name for the operation
   */
  readonly operation?: string;
  /**
   * Localized friendly description for the operation
   */
  readonly description?: string;
}

/**
 * API error response
 */
export interface ApiError {
  /**
   * An error returned by the API
   */
  error?: ApiErrorBase;
}

/**
 * Api error.
 */
export interface ApiErrorBase {
  /**
   * Error code
   */
  code?: string;
  /**
   * Error message
   */
  message?: string;
}

/**
 * A paged list of private clouds
 */
export interface PrivateCloudList {
  /**
   * The items on the page
   */
  readonly value?: PrivateCloud[];
  /**
   * URL to get the next page if any
   */
  readonly nextLink?: string;
}

/**
 * The core properties of ARM resources
 */
export interface Resource {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM tracked top level resource
 */
export type TrackedResource = Resource & {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
};

/**
 * A private cloud resource
 */
export type PrivateCloud = TrackedResource & {
  /**
   * The properties of a private cloud resource
   */
  properties?: PrivateCloudProperties;
};

/**
 * The properties of a private cloud resource
 */
export interface PrivateCloudProperties {
  /**
   * The provisioning state
   */
  readonly provisioningState?: PrivateCloudProvisioningState;
  /**
   * An ExpressRoute Circuit
   */
  circuit?: Circuit;
  /**
   * The default cluster used for management
   */
  cluster?: DefaultClusterProperties;
  /**
   * The clusters
   */
  readonly clusters?: string[];
  /**
   * The endpoints
   */
  readonly endpoints?: Endpoints;
  /**
   * Connectivity to internet is enabled or disabled
   */
  internet?: InternetEnum;
  /**
   * vCenter Single Sign On Identity Sources
   */
  identitySources?: IdentitySource[];
  /**
   * The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
   */
  networkBlock?: string;
  /**
   * Network used to access vCenter Server and NSX-T Manager
   */
  readonly managementNetwork?: string;
  /**
   * Used for virtual machine cold migration, cloning, and snapshot migration
   */
  readonly provisioningNetwork?: string;
  /**
   * Used for live migration of virtual machines
   */
  readonly vmotionNetwork?: string;
  /**
   * Optionally, set the vCenter admin password when the private cloud is created
   */
  vcenterPassword?: string;
  /**
   * Optionally, set the NSX-T Manager password when the private cloud is created
   */
  nsxtPassword?: string;
}

/**
 * An ExpressRoute Circuit
 */
export interface Circuit {
  /**
   * CIDR of primary subnet
   */
  readonly primarySubnet?: string;
  /**
   * CIDR of secondary subnet
   */
  readonly secondarySubnet?: string;
  /**
   * Identifier of the ExpressRoute (Microsoft Colo only)
   */
  readonly expressRouteID?: string;
  /**
   * Authorizations for the ExpressRoute (Microsoft Colo only)
   */
  authorizations?: ExpressRouteAuthorization[];
  /**
   * ExpressRoute private peering identifier
   */
  readonly expressRoutePrivatePeeringID?: string;
}

/**
 * Authorization for an ExpressRoute
 */
export interface ExpressRouteAuthorization {
  /**
   * The name of the ExpressRoute
   */
  name?: string;
  /**
   * The ID of the ExpressRoute
   */
  readonly id?: string;
  /**
   * The key of the ExpressRoute
   */
  readonly key?: string;
}

/**
 * The properties of a default cluster
 */
export interface DefaultClusterProperties {
  /**
   * The identity
   */
  readonly clusterId?: number;
  /**
   * The cluster size
   */
  clusterSize?: number;
  /**
   * The hosts
   */
  readonly hosts?: string[];
}

/**
 * Endpoint addresses
 */
export interface Endpoints {
  /**
   * Endpoint for the NSX-T Data Center manager
   */
  readonly nsxtManager?: string;
  /**
   * Endpoint for Virtual Center Server Appliance
   */
  readonly vcsa?: string;
}

/**
 * vCenter Single Sign On Identity Source
 */
export interface IdentitySource {
  /**
   * The name of the identity source
   */
  name?: string;
  /**
   * The domain's NetBIOS name
   */
  alias?: string;
  /**
   * The domain's dns name
   */
  domain?: string;
  /**
   * The base distinguished name for users
   */
  baseUserDN?: string;
  /**
   * The base distinguished name for groups
   */
  baseGroupDN?: string;
  /**
   * Primary server URL
   */
  primaryServer?: string;
  /**
   * Secondary server URL
   */
  secondaryServer?: string;
  /**
   * Protect LDAP communication using SSL certificate (LDAPS)
   */
  ssl?: SslEnum;
  /**
   * The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group
   */
  username?: string;
  /**
   * The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups.
   */
  password?: string;
}

/**
 * A paged list of clusters
 */
export interface ClusterList {
  /**
   * The items on a page
   */
  readonly value?: Cluster[];
  /**
   * URL to get the next page if any
   */
  readonly nextLink?: string;
}

/**
 * A cluster resource
 */
export type Cluster = Resource & {
  /**
   * The properties of a cluster resource
   */
  properties?: ClusterProperties;
};

/**
 * The properties of a cluster
 */
export type ClusterProperties = DefaultClusterProperties & {
  /**
   * The state of the cluster provisioning
   */
  readonly provisioningState?: ClusterProvisioningState;
};

/**
 * Administrative credentials for accessing vCenter and NSX-T
 */
export interface AdminCredentials {
  /**
   * NSX-T Manager username
   */
  readonly nsxtUsername?: string;
  /**
   * NSX-T Manager password
   */
  readonly nsxtPassword?: string;
  /**
   * vCenter admin username
   */
  readonly vcenterUsername?: string;
  /**
   * vCenter admin password
   */
  readonly vcenterPassword?: string;
}

/**
 * Defines values for PrivateCloudProvisioningState.
 */
export type PrivateCloudProvisioningState =
  | "Succeeded"
  | "Failed"
  | "Cancelled"
  | "Pending"
  | "Building"
  | "Updating";
/**
 * Defines values for InternetEnum.
 */
export type InternetEnum = "Enabled" | "Disabled";
/**
 * Defines values for SslEnum.
 */
export type SslEnum = "Enabled" | "Disabled";
/**
 * Defines values for ClusterProvisioningState.
 */
export type ClusterProvisioningState =
  | "Succeeded"
  | "Failed"
  | "Cancelled"
  | "Updating";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PrivateCloudsListResponse = PrivateCloudList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateCloudList;
  };
};

/**
 * Contains response data for the listInSubscription operation.
 */
export type PrivateCloudsListInSubscriptionResponse = PrivateCloudList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateCloudList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PrivateCloudsGetResponse = PrivateCloud & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateCloud;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PrivateCloudsCreateOrUpdateResponse = PrivateCloud & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateCloud;
  };
};

/**
 * Contains response data for the update operation.
 */
export type PrivateCloudsUpdateResponse = PrivateCloud & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateCloud;
  };
};

/**
 * Contains response data for the listAdminCredentials operation.
 */
export type PrivateCloudsListAdminCredentialsResponse = AdminCredentials & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AdminCredentials;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PrivateCloudsListNextResponse = PrivateCloudList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateCloudList;
  };
};

/**
 * Contains response data for the listInSubscriptionNext operation.
 */
export type PrivateCloudsListInSubscriptionNextResponse = PrivateCloudList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateCloudList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ClustersListResponse = ClusterList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ClusterList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ClustersGetResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Cluster;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ClustersCreateOrUpdateResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Cluster;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ClustersUpdateResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Cluster;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ClustersListNextResponse = ClusterList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ClusterList;
  };
};

/**
 * Optional parameters.
 */
export interface AzureVMwareSolutionByVirtustreamApiOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
