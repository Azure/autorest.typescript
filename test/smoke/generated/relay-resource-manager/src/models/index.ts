/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Result of the request to list Relay operations. It contains a list of operations and a URL link to get the next set of results.
 */
export interface OperationListResult {
  /**
   * List of Relay operations supported by resource provider.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  readonly nextLink?: string;
}

/**
 * A Relay REST API operation.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Relay.
   */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed: Invoice, etc.
   */
  readonly resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  readonly operation?: string;
}

/**
 * Error reponse indicates Relay service is not able to process the incoming request. The reason is provided in the error message.
 */
export interface ErrorResponse {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * Description of the check name availability request properties.
 */
export interface CheckNameAvailability {
  /**
   * The namespace name to check for availability. The namespace name can contain only letters, numbers, and hyphens. The namespace must start with a letter, and it must end with a letter or number.
   */
  name: string;
}

/**
 * Description of the check name availability request properties.
 */
export interface CheckNameAvailabilityResult {
  /**
   * The detailed info regarding the reason associated with the namespace.
   */
  readonly message?: string;
  /**
   * Value indicating namespace is available. Returns true if the namespace is available; otherwise, false.
   */
  nameAvailable?: boolean;
  /**
   * The reason for unavailability of a namespace.
   */
  reason?: UnavailableReason;
}

/**
 * The response from the list namespace operation.
 */
export interface RelayNamespaceListResult {
  /**
   * Result of the list namespace operation.
   */
  value?: RelayNamespace[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of namespaces.
   */
  nextLink?: string;
}

/**
 * The resource definition.
 */
export interface Resource {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
}

/**
 * Definition of resource.
 */
export type TrackedResource = Resource & {
  /**
   * Resource location.
   */
  location: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
};

/**
 * Description of a namespace resource.
 */
export type RelayNamespace = TrackedResource & {
  /**
   * SKU of the namespace.
   */
  sku?: Sku;
  readonly provisioningState?: ProvisioningStateEnum;
  /**
   * The time the namespace was created.
   */
  readonly createdAt?: Date;
  /**
   * The time the namespace was updated.
   */
  readonly updatedAt?: Date;
  /**
   * Endpoint you can use to perform Service Bus operations.
   */
  readonly serviceBusEndpoint?: string;
  /**
   * Identifier for Azure Insights metrics.
   */
  readonly metricId?: string;
};

/**
 * SKU of the namespace.
 */
export interface Sku {
  /**
   * Name of this SKU.
   */
  name: "Standard";
  /**
   * The tier of this SKU.
   */
  tier?: "Standard";
}

/**
 * Definition of resource.
 */
export type ResourceNamespacePatch = Resource & {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
};

/**
 * Description of a namespace resource.
 */
export type RelayUpdateParameters = ResourceNamespacePatch & {
  /**
   * SKU of the namespace.
   */
  sku?: Sku;
  readonly provisioningState?: ProvisioningStateEnum;
  /**
   * The time the namespace was created.
   */
  readonly createdAt?: Date;
  /**
   * The time the namespace was updated.
   */
  readonly updatedAt?: Date;
  /**
   * Endpoint you can use to perform Service Bus operations.
   */
  readonly serviceBusEndpoint?: string;
  /**
   * Identifier for Azure Insights metrics.
   */
  readonly metricId?: string;
};

/**
 * The response from the list namespace operation.
 */
export interface AuthorizationRuleListResult {
  /**
   * Result of the list authorization rules operation.
   */
  value?: AuthorizationRule[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of authorization rules.
   */
  nextLink?: string;
}

/**
 * Description of a namespace authorization rule.
 */
export type AuthorizationRule = Resource & {
  /**
   * The rights associated with the rule.
   */
  rights: AccessRights[];
};

/**
 * Namespace/Relay Connection String
 */
export interface AccessKeys {
  /**
   * Primary connection string of the created namespace authorization rule.
   */
  primaryConnectionString?: string;
  /**
   * Secondary connection string of the created namespace authorization rule.
   */
  secondaryConnectionString?: string;
  /**
   * A base64-encoded 256-bit primary key for signing and validating the SAS token.
   */
  primaryKey?: string;
  /**
   * A base64-encoded 256-bit secondary key for signing and validating the SAS token.
   */
  secondaryKey?: string;
  /**
   * A string that describes the authorization rule.
   */
  keyName?: string;
}

/**
 * Parameters supplied to the regenerate authorization rule operation, specifies which key neeeds to be reset.
 */
export interface RegenerateAccessKeyParameters {
  /**
   * The access key to regenerate.
   */
  keyType: KeyType;
  /**
   * Optional. If the key value is provided, this is set to key type, or autogenerated key value set for key type.
   */
  key?: string;
}

/**
 * The response of the list hybrid connection operation.
 */
export interface HybridConnectionListResult {
  /**
   * Result of the list hybrid connections.
   */
  value?: HybridConnection[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list hybrid connection operation.
   */
  nextLink?: string;
}

/**
 * Description of hybrid connection resource.
 */
export type HybridConnection = Resource & {
  /**
   * The time the hybrid connection was created.
   */
  readonly createdAt?: Date;
  /**
   * The time the namespace was updated.
   */
  readonly updatedAt?: Date;
  /**
   * The number of listeners for this hybrid connection. Note that min : 1 and max:25 are supported.
   */
  readonly listenerCount?: number;
  /**
   * Returns true if client authorization is needed for this hybrid connection; otherwise, false.
   */
  requiresClientAuthorization?: boolean;
  /**
   * The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
   */
  userMetadata?: string;
};

/**
 * The response of the list WCF relay operation.
 */
export interface WcfRelaysListResult {
  /**
   * Result of the list WCF relay operation.
   */
  value?: WcfRelay[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of WCF relays.
   */
  nextLink?: string;
}

/**
 * Description of the WCF relay resource.
 */
export type WcfRelay = Resource & {
  /**
   * Returns true if the relay is dynamic; otherwise, false.
   */
  readonly isDynamic?: boolean;
  /**
   * The time the WCF relay was created.
   */
  readonly createdAt?: Date;
  /**
   * The time the namespace was updated.
   */
  readonly updatedAt?: Date;
  /**
   * The number of listeners for this relay. Note that min :1 and max:25 are supported.
   */
  readonly listenerCount?: number;
  /**
   * WCF relay type.
   */
  relayType?: Relaytype;
  /**
   * Returns true if client authorization is needed for this relay; otherwise, false.
   */
  requiresClientAuthorization?: boolean;
  /**
   * Returns true if transport security is needed for this relay; otherwise, false.
   */
  requiresTransportSecurity?: boolean;
  /**
   * The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
   */
  userMetadata?: string;
};
/**
 * Defines values for UnavailableReason.
 */
export type UnavailableReason =
  | "None"
  | "InvalidName"
  | "SubscriptionIsDisabled"
  | "NameInUse"
  | "NameInLockdown"
  | "TooManyNamespaceInCurrentSubscription";
/**
 * Defines values for ProvisioningStateEnum.
 */
export type ProvisioningStateEnum =
  | "Created"
  | "Succeeded"
  | "Deleted"
  | "Failed"
  | "Updating"
  | "Unknown";
/**
 * Defines values for AccessRights.
 */
export type AccessRights = "Manage" | "Send" | "Listen";
/**
 * Defines values for KeyType.
 */
export type KeyType = "PrimaryKey" | "SecondaryKey";
/**
 * Defines values for Relaytype.
 */
export type Relaytype = "NetTcp" | "Http";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type NamespacesCheckNameAvailabilityResponse = CheckNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameAvailabilityResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type NamespacesListResponse = RelayNamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayNamespaceListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type NamespacesListByResourceGroupResponse = RelayNamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayNamespaceListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NamespacesCreateOrUpdateResponse = RelayNamespace & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayNamespace;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NamespacesGetResponse = RelayNamespace & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayNamespace;
  };
};

/**
 * Contains response data for the update operation.
 */
export type NamespacesUpdateResponse = RelayNamespace & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayNamespace;
  };
};

/**
 * Contains response data for the listAuthorizationRules operation.
 */
export type NamespacesListAuthorizationRulesResponse = AuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the createOrUpdateAuthorizationRule operation.
 */
export type NamespacesCreateOrUpdateAuthorizationRuleResponse = AuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRule;
  };
};

/**
 * Contains response data for the getAuthorizationRule operation.
 */
export type NamespacesGetAuthorizationRuleResponse = AuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRule;
  };
};

/**
 * Contains response data for the listKeys operation.
 */
export type NamespacesListKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccessKeys;
  };
};

/**
 * Contains response data for the regenerateKeys operation.
 */
export type NamespacesRegenerateKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccessKeys;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type NamespacesListNextResponse = RelayNamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayNamespaceListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type NamespacesListByResourceGroupNextResponse = RelayNamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayNamespaceListResult;
  };
};

/**
 * Contains response data for the listAuthorizationRulesNext operation.
 */
export type NamespacesListAuthorizationRulesNextResponse = AuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the listByNamespace operation.
 */
export type HybridConnectionsListByNamespaceResponse = HybridConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnectionListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type HybridConnectionsCreateOrUpdateResponse = HybridConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type HybridConnectionsGetResponse = HybridConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnection;
  };
};

/**
 * Contains response data for the listAuthorizationRules operation.
 */
export type HybridConnectionsListAuthorizationRulesResponse = AuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the createOrUpdateAuthorizationRule operation.
 */
export type HybridConnectionsCreateOrUpdateAuthorizationRuleResponse = AuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRule;
  };
};

/**
 * Contains response data for the getAuthorizationRule operation.
 */
export type HybridConnectionsGetAuthorizationRuleResponse = AuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRule;
  };
};

/**
 * Contains response data for the listKeys operation.
 */
export type HybridConnectionsListKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccessKeys;
  };
};

/**
 * Contains response data for the regenerateKeys operation.
 */
export type HybridConnectionsRegenerateKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccessKeys;
  };
};

/**
 * Contains response data for the listByNamespaceNext operation.
 */
export type HybridConnectionsListByNamespaceNextResponse = HybridConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnectionListResult;
  };
};

/**
 * Contains response data for the listAuthorizationRulesNext operation.
 */
export type HybridConnectionsListAuthorizationRulesNextResponse = AuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the listByNamespace operation.
 */
export type WCFRelaysListByNamespaceResponse = WcfRelaysListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WcfRelaysListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type WCFRelaysCreateOrUpdateResponse = WcfRelay & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WcfRelay;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WCFRelaysGetResponse = WcfRelay & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WcfRelay;
  };
};

/**
 * Contains response data for the listAuthorizationRules operation.
 */
export type WCFRelaysListAuthorizationRulesResponse = AuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the createOrUpdateAuthorizationRule operation.
 */
export type WCFRelaysCreateOrUpdateAuthorizationRuleResponse = AuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRule;
  };
};

/**
 * Contains response data for the getAuthorizationRule operation.
 */
export type WCFRelaysGetAuthorizationRuleResponse = AuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRule;
  };
};

/**
 * Contains response data for the listKeys operation.
 */
export type WCFRelaysListKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccessKeys;
  };
};

/**
 * Contains response data for the regenerateKeys operation.
 */
export type WCFRelaysRegenerateKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccessKeys;
  };
};

/**
 * Contains response data for the listByNamespaceNext operation.
 */
export type WCFRelaysListByNamespaceNextResponse = WcfRelaysListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WcfRelaysListResult;
  };
};

/**
 * Contains response data for the listAuthorizationRulesNext operation.
 */
export type WCFRelaysListAuthorizationRulesNextResponse = AuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRuleListResult;
  };
};

/**
 * Optional parameters.
 */
export interface RelayApiOptionalParams extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
