/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RelayApi } from "../relayApi";
import {
  HybridConnectionsListByNamespaceResponse,
  HybridConnection,
  HybridConnectionsCreateOrUpdateResponse,
  HybridConnectionsGetResponse,
  HybridConnectionsListAuthorizationRulesResponse,
  AuthorizationRule,
  HybridConnectionsCreateOrUpdateAuthorizationRuleResponse,
  HybridConnectionsGetAuthorizationRuleResponse,
  HybridConnectionsListKeysResponse,
  RegenerateAccessKeyParameters,
  HybridConnectionsRegenerateKeysResponse,
  HybridConnectionsListByNamespaceNextResponse,
  HybridConnectionsListAuthorizationRulesNextResponse
} from "../models";

/**
 * Class representing a HybridConnections.
 */
export class HybridConnections {
  private readonly client: RelayApi;

  /**
   * Initialize a new instance of the class HybridConnections class.
   * @param client Reference to the service client
   */
  constructor(client: RelayApi) {
    this.client = client;
  }

  /**
   * Lists the hybrid connection within the namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  listByNamespace(
    resourceGroupName: string,
    namespaceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridConnectionsListByNamespaceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, options: operationOptions },
      listByNamespaceOperationSpec
    ) as Promise<HybridConnectionsListByNamespaceResponse>;
  }

  /**
   * Creates or updates a service hybrid connection. This operation is idempotent.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param parameters Parameters supplied to create a hybrid connection.
   * @param hybridConnectionName The hybrid connection name.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    namespaceName: string,
    parameters: HybridConnection,
    hybridConnectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridConnectionsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        parameters,
        hybridConnectionName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<HybridConnectionsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a hybrid connection.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param hybridConnectionName The hybrid connection name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    namespaceName: string,
    hybridConnectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        hybridConnectionName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Returns the description for the specified hybrid connection.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param hybridConnectionName The hybrid connection name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    namespaceName: string,
    hybridConnectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridConnectionsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        hybridConnectionName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<HybridConnectionsGetResponse>;
  }

  /**
   * Authorization rules for a hybrid connection.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param hybridConnectionName The hybrid connection name.
   * @param options The options parameters.
   */
  listAuthorizationRules(
    resourceGroupName: string,
    namespaceName: string,
    hybridConnectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridConnectionsListAuthorizationRulesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        hybridConnectionName,
        options: operationOptions
      },
      listAuthorizationRulesOperationSpec
    ) as Promise<HybridConnectionsListAuthorizationRulesResponse>;
  }

  /**
   * Creates or updates an authorization rule for a hybrid connection.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param parameters The authorization rule parameters.
   * @param authorizationRuleName The authorization rule name.
   * @param hybridConnectionName The hybrid connection name.
   * @param options The options parameters.
   */
  createOrUpdateAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    parameters: AuthorizationRule,
    authorizationRuleName: string,
    hybridConnectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridConnectionsCreateOrUpdateAuthorizationRuleResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        parameters,
        authorizationRuleName,
        hybridConnectionName,
        options: operationOptions
      },
      createOrUpdateAuthorizationRuleOperationSpec
    ) as Promise<HybridConnectionsCreateOrUpdateAuthorizationRuleResponse>;
  }

  /**
   * Deletes a hybrid connection authorization rule.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param hybridConnectionName The hybrid connection name.
   * @param options The options parameters.
   */
  deleteAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    hybridConnectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        hybridConnectionName,
        options: operationOptions
      },
      deleteAuthorizationRuleOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Hybrid connection authorization rule for a hybrid connection by name.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param hybridConnectionName The hybrid connection name.
   * @param options The options parameters.
   */
  getAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    hybridConnectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridConnectionsGetAuthorizationRuleResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        hybridConnectionName,
        options: operationOptions
      },
      getAuthorizationRuleOperationSpec
    ) as Promise<HybridConnectionsGetAuthorizationRuleResponse>;
  }

  /**
   * Primary and secondary connection strings to the hybrid connection.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param hybridConnectionName The hybrid connection name.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    hybridConnectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridConnectionsListKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        hybridConnectionName,
        options: operationOptions
      },
      listKeysOperationSpec
    ) as Promise<HybridConnectionsListKeysResponse>;
  }

  /**
   * Regenerates the primary or secondary connection strings to the hybrid connection.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param parameters Parameters supplied to regenerate authorization rule.
   * @param hybridConnectionName The hybrid connection name.
   * @param options The options parameters.
   */
  regenerateKeys(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    parameters: RegenerateAccessKeyParameters,
    hybridConnectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridConnectionsRegenerateKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        parameters,
        hybridConnectionName,
        options: operationOptions
      },
      regenerateKeysOperationSpec
    ) as Promise<HybridConnectionsRegenerateKeysResponse>;
  }

  /**
   * ListByNamespaceNext
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param nextLink The nextLink from the previous successful call to the ListByNamespace method.
   * @param options The options parameters.
   */
  listByNamespaceNext(
    resourceGroupName: string,
    namespaceName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridConnectionsListByNamespaceNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, nextLink, options: operationOptions },
      listByNamespaceNextOperationSpec
    ) as Promise<HybridConnectionsListByNamespaceNextResponse>;
  }

  /**
   * ListAuthorizationRulesNext
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
   * @param hybridConnectionName The hybrid connection name.
   * @param options The options parameters.
   */
  listAuthorizationRulesNext(
    resourceGroupName: string,
    namespaceName: string,
    nextLink: string,
    hybridConnectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridConnectionsListAuthorizationRulesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        nextLink,
        hybridConnectionName,
        options: operationOptions
      },
      listAuthorizationRulesNextOperationSpec
    ) as Promise<HybridConnectionsListAuthorizationRulesNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByNamespaceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnectionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.hybridConnectionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.hybridConnectionName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.hybridConnectionName
  ],
  serializer
};
const listAuthorizationRulesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.hybridConnectionName
  ],
  serializer
};
const createOrUpdateAuthorizationRuleOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AuthorizationRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.authorizationRuleName,
    Parameters.hybridConnectionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteAuthorizationRuleOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.authorizationRuleName,
    Parameters.hybridConnectionName
  ],
  serializer
};
const getAuthorizationRuleOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AuthorizationRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.authorizationRuleName,
    Parameters.hybridConnectionName
  ],
  serializer
};
const listKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}/listKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.authorizationRuleName,
    Parameters.hybridConnectionName
  ],
  serializer
};
const regenerateKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}/regenerateKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.authorizationRuleName,
    Parameters.hybridConnectionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByNamespaceNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnectionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.nextLink3
  ],
  serializer
};
const listAuthorizationRulesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.nextLink2,
    Parameters.hybridConnectionName
  ],
  serializer
};
