/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PersonalizerClient } from "../personalizerClient";
import {
  PolicyGetResponse,
  PolicyContract,
  PolicyUpdateResponse,
  PolicyResetResponse
} from "../models";

/**
 * Class representing a Policy.
 */
export class Policy {
  private readonly client: PersonalizerClient;

  /**
   * Initialize a new instance of the class Policy class.
   * @param client Reference to the service client
   */
  constructor(client: PersonalizerClient) {
    this.client = client;
  }

  /**
   * Get the Learning settings currently used by the Personalizer service.
   * @param options The options parameters.
   */
  get(options?: coreHttp.OperationOptions): Promise<PolicyGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getOperationSpec
    ) as Promise<PolicyGetResponse>;
  }

  /**
   * Update the Learning settings that the Personalizer service will use to train models.
   * @param policy The Learning settings.
   * @param options The options parameters.
   */
  update(
    policy: PolicyContract,
    options?: coreHttp.OperationOptions
  ): Promise<PolicyUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { policy, options: operationOptions },
      updateOperationSpec
    ) as Promise<PolicyUpdateResponse>;
  }

  /**
   * Resets the Learning settings of the Personalizer service to default.
   * @param options The options parameters.
   */
  reset(options?: coreHttp.OperationOptions): Promise<PolicyResetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      resetOperationSpec
    ) as Promise<PolicyResetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/configurations/policy",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyContract
    }
  },
  urlParameters: [Parameters.endpoint],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/configurations/policy",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.policy,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  serializer
};
const resetOperationSpec: coreHttp.OperationSpec = {
  path: "/configurations/policy",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyContract
    }
  },
  urlParameters: [Parameters.endpoint],
  serializer
};
