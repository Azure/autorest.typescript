/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PersonalizerClient } from "../personalizerClient";
import { RewardRequest } from "../models";

/**
 * Class representing a Events.
 */
export class Events {
  private readonly client: PersonalizerClient;

  /**
   * Initialize a new instance of the class Events class.
   * @param client Reference to the service client
   */
  constructor(client: PersonalizerClient) {
    this.client = client;
  }

  /**
   * Report reward that resulted from using the action specified in rewardActionId for the specified
   * event.
   * @param reward The reward should be a floating point number, typically between 0 and 1.
   * @param eventId The event id this reward applies to.
   * @param options The options parameters.
   */
  reward(
    reward: RewardRequest,
    eventId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { reward, eventId, options: operationOptions },
      rewardOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Report that the specified event was actually displayed to the user and a reward should be expected
   * for it
   * @param eventId The event ID this activation applies to.
   * @param options The options parameters.
   */
  activate(
    eventId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { eventId, options: operationOptions },
      activateOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const rewardOperationSpec: coreHttp.OperationSpec = {
  path: "/events/{eventId}/reward",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.reward,
  urlParameters: [Parameters.endpoint, Parameters.eventId],
  headerParameters: [Parameters.contentType],
  serializer
};
const activateOperationSpec: coreHttp.OperationSpec = {
  path: "/events/{eventId}/activate",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.eventId1],
  serializer
};
