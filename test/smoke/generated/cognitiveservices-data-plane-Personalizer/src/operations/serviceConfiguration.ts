/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PersonalizerClient } from "../personalizerClient";
import {
  ServiceConfigurationGetResponse,
  ServiceConfiguration as ServiceConfigurationModel,
  ServiceConfigurationUpdateResponse
} from "../models";

/**
 * Class representing a ServiceConfiguration.
 */
export class ServiceConfiguration {
  private readonly client: PersonalizerClient;

  /**
   * Initialize a new instance of the class ServiceConfiguration class.
   * @param client Reference to the service client
   */
  constructor(client: PersonalizerClient) {
    this.client = client;
  }

  /**
   * Get the Personalizer service configuration.
   * @param options The options parameters.
   */
  get(
    options?: coreHttp.OperationOptions
  ): Promise<ServiceConfigurationGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getOperationSpec
    ) as Promise<ServiceConfigurationGetResponse>;
  }

  /**
   * Update the Personalizer service configuration.
   * @param config The personalizer service configuration.
   * @param options The options parameters.
   */
  update(
    config: ServiceConfigurationModel,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceConfigurationUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { config, options: operationOptions },
      updateOperationSpec
    ) as Promise<ServiceConfigurationUpdateResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/configurations/service",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfiguration
    }
  },
  urlParameters: [Parameters.endpoint],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/configurations/service",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.config,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  serializer
};
