/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PersonalizerClient } from "../personalizerClient";
import {
  EvaluationsGetResponse,
  EvaluationsListResponse,
  EvaluationContract,
  EvaluationsCreateResponse
} from "../models";

/**
 * Class representing a Evaluations.
 */
export class Evaluations {
  private readonly client: PersonalizerClient;

  /**
   * Initialize a new instance of the class Evaluations class.
   * @param client Reference to the service client
   */
  constructor(client: PersonalizerClient) {
    this.client = client;
  }

  /**
   * Get the evaluation associated with the Id.
   * @param evaluationId Id of the evaluation.
   * @param options The options parameters.
   */
  get(
    evaluationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<EvaluationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { evaluationId, options: operationOptions },
      getOperationSpec
    ) as Promise<EvaluationsGetResponse>;
  }

  /**
   * Delete the evaluation associated with the Id.
   * @param evaluationId Id of the evaluation to delete.
   * @param options The options parameters.
   */
  delete(
    evaluationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { evaluationId, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * List all the submitted evaluations.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<EvaluationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<EvaluationsListResponse>;
  }

  /**
   * Submit a new evaluation job.
   * @param evaluation The evaluation job definition.
   * @param options The options parameters.
   */
  create(
    evaluation: EvaluationContract,
    options?: coreHttp.OperationOptions
  ): Promise<EvaluationsCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { evaluation, options: operationOptions },
      createOperationSpec
    ) as Promise<EvaluationsCreateResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/evaluations/{evaluationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Evaluation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.evaluationId],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/evaluations/{evaluationId}",
  httpMethod: "DELETE",
  responses: { 204: {} },
  urlParameters: [Parameters.endpoint, Parameters.evaluationId1],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path: "/evaluations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Evaluation" } }
        },
        serializedName: "ArrayOfEvaluation"
      }
    }
  },
  urlParameters: [Parameters.endpoint],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path: "/evaluations",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.Evaluation,
      headersMapper: Mappers.EvaluationsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.evaluation,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  serializer
};
