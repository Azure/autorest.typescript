/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { PersonalizerClientContext } from "./personalizerClientContext";
import { RankRequest, PersonalizerClientRankResponse } from "./models";

class PersonalizerClient extends PersonalizerClientContext {
  /**
   * Initializes a new instance of the PersonalizerClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param endpoint Supported Cognitive Services endpoint.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    endpoint: string,
    options?: Models.PersonalizerClientOptionalParams
  ) {
    super(credentials, endpoint, options);
    this.serviceConfiguration = new operations.ServiceConfiguration(this);
    this.policy = new operations.Policy(this);
    this.evaluations = new operations.Evaluations(this);
    this.events = new operations.Events(this);
    this.log = new operations.Log(this);
    this.model = new operations.Model(this);
  }

  /**
   * Submit a Personalizer rank request, to get which of the provided actions should be used in the
   * provided context.
   * @param rankRequest A Personalizer request.
   * @param options The options parameters.
   */
  rank(
    rankRequest: RankRequest,
    options?: coreHttp.OperationOptions
  ): Promise<PersonalizerClientRankResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { rankRequest, options: operationOptions },
      rankOperationSpec
    ) as Promise<PersonalizerClientRankResponse>;
  }

  serviceConfiguration: operations.ServiceConfiguration;
  policy: operations.Policy;
  evaluations: operations.Evaluations;
  events: operations.Events;
  log: operations.Log;
  model: operations.Model;
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const rankOperationSpec: coreHttp.OperationSpec = {
  path: "/rank",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.RankResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.rankRequest,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  serializer
};

// Operation Specifications

export {
  PersonalizerClient,
  PersonalizerClientContext,
  Models as PersonalizerModels,
  Mappers as PersonalizerMappers
};
export * from "./operations";
