/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AceProvisioningManagementPartnerApi } from "../aceProvisioningManagementPartnerApi";
import {
  PartnerGetResponse,
  PartnerCreateResponse,
  PartnerUpdateResponse
} from "../models";

/**
 * Class representing a Partner.
 */
export class Partner {
  private readonly client: AceProvisioningManagementPartnerApi;

  /**
   * Initialize a new instance of the class Partner class.
   * @param client Reference to the service client
   */
  constructor(client: AceProvisioningManagementPartnerApi) {
    this.client = client;
  }

  /**
   * Get the management partner using the partnerId, objectId and tenantId.
   * @param partnerId Id of the Partner
   * @param options The options parameters.
   */
  get(
    partnerId: string,
    options?: coreHttp.OperationOptions
  ): Promise<PartnerGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { partnerId, options: operationOptions },
      getOperationSpec
    ) as Promise<PartnerGetResponse>;
  }

  /**
   * Create a management partner for the objectId and tenantId.
   * @param partnerId Id of the Partner
   * @param options The options parameters.
   */
  create(
    partnerId: string,
    options?: coreHttp.OperationOptions
  ): Promise<PartnerCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { partnerId, options: operationOptions },
      createOperationSpec
    ) as Promise<PartnerCreateResponse>;
  }

  /**
   * Update the management partner for the objectId and tenantId.
   * @param partnerId Id of the Partner
   * @param options The options parameters.
   */
  update(
    partnerId: string,
    options?: coreHttp.OperationOptions
  ): Promise<PartnerUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { partnerId, options: operationOptions },
      updateOperationSpec
    ) as Promise<PartnerUpdateResponse>;
  }

  /**
   * Delete the management partner for the objectId and tenantId.
   * @param partnerId Id of the Partner
   * @param options The options parameters.
   */
  delete(
    partnerId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { partnerId, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ManagementPartner/partners/{partnerId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.partnerId],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ManagementPartner/partners/{partnerId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.partnerId],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ManagementPartner/partners/{partnerId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.partnerId],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ManagementPartner/partners/{partnerId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.partnerId],
  serializer
};
