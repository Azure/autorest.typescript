/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GraphRbacManagementClientContext } from "../graphRbacManagementClientContext";
import {
  Application,
  ApplicationsListOptionalParams,
  DirectoryObjectUnion,
  KeyCredential,
  PasswordCredential,
  ApplicationCreateParameters,
  ApplicationsCreateResponse,
  ApplicationsListResponse,
  ApplicationsGetResponse,
  ApplicationUpdateParameters,
  ApplicationsListOwnersResponse,
  AddOwnerParameters,
  ApplicationsListKeyCredentialsResponse,
  KeyCredentialsUpdateParameters,
  ApplicationsListPasswordCredentialsResponse,
  PasswordCredentialsUpdateParameters,
  ApplicationsGetServicePrincipalsIdByAppIdResponse,
  ApplicationsListNextResponse,
  ApplicationsListOwnersNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a Applications. */
export class Applications {
  private readonly client: GraphRbacManagementClientContext;

  /**
   * Initialize a new instance of the class Applications class.
   * @param client Reference to the service client
   */
  constructor(client: GraphRbacManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists applications by filter parameters.
   * @param options The options parameters.
   */
  public list(
    options?: ApplicationsListOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: ApplicationsListOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: ApplicationsListOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * The owners are a set of non-admin users who are allowed to modify this object.
   * @param applicationObjectId The object ID of the application for which to get owners.
   * @param options The options parameters.
   */
  public listOwners(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<DirectoryObjectUnion> {
    const iter = this.listOwnersPagingAll(applicationObjectId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listOwnersPagingPage(applicationObjectId, options);
      }
    };
  }

  private async *listOwnersPagingPage(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<DirectoryObjectUnion[]> {
    let result = await this._listOwners(applicationObjectId, options);
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._listOwnersNext(
        applicationObjectId,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listOwnersPagingAll(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<DirectoryObjectUnion> {
    for await (const page of this.listOwnersPagingPage(
      applicationObjectId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get the keyCredentials associated with an application.
   * @param applicationObjectId Application object ID.
   * @param options The options parameters.
   */
  public listKeyCredentials(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<KeyCredential> {
    const iter = this.listKeyCredentialsPagingAll(applicationObjectId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listKeyCredentialsPagingPage(applicationObjectId, options);
      }
    };
  }

  private async *listKeyCredentialsPagingPage(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<KeyCredential[]> {
    let result = await this._listKeyCredentials(applicationObjectId, options);
    yield result.value || [];
  }

  private async *listKeyCredentialsPagingAll(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<KeyCredential> {
    for await (const page of this.listKeyCredentialsPagingPage(
      applicationObjectId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get the passwordCredentials associated with an application.
   * @param applicationObjectId Application object ID.
   * @param options The options parameters.
   */
  public listPasswordCredentials(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<PasswordCredential> {
    const iter = this.listPasswordCredentialsPagingAll(
      applicationObjectId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPasswordCredentialsPagingPage(
          applicationObjectId,
          options
        );
      }
    };
  }

  private async *listPasswordCredentialsPagingPage(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<PasswordCredential[]> {
    let result = await this._listPasswordCredentials(
      applicationObjectId,
      options
    );
    yield result.value || [];
  }

  private async *listPasswordCredentialsPagingAll(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<PasswordCredential> {
    for await (const page of this.listPasswordCredentialsPagingPage(
      applicationObjectId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of applications from the current tenant.
   * @param nextLink Next link for the list operation.
   * @param options The options parameters.
   */
  public listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextPagingPage(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listNextPagingAll(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listNextPagingPage(nextLink, options)) {
      yield* page;
    }
  }

  /**
   * Create a new application.
   * @param parameters The parameters for creating an application.
   * @param options The options parameters.
   */
  create(
    parameters: ApplicationCreateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationsCreateResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      parameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createOperationSpec
    ) as Promise<ApplicationsCreateResponse>;
  }

  /**
   * Lists applications by filter parameters.
   * @param options The options parameters.
   */
  private _list(
    options?: ApplicationsListOptionalParams
  ): Promise<ApplicationsListResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOperationSpec
    ) as Promise<ApplicationsListResponse>;
  }

  /**
   * Delete an application.
   * @param applicationObjectId Application object ID.
   * @param options The options parameters.
   */
  delete(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      applicationObjectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get an application by object ID.
   * @param applicationObjectId Application object ID.
   * @param options The options parameters.
   */
  get(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationsGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      applicationObjectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<ApplicationsGetResponse>;
  }

  /**
   * Update an existing application.
   * @param applicationObjectId Application object ID.
   * @param parameters Parameters to update an existing application.
   * @param options The options parameters.
   */
  patch(
    applicationObjectId: string,
    parameters: ApplicationUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      applicationObjectId,
      parameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      patchOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * The owners are a set of non-admin users who are allowed to modify this object.
   * @param applicationObjectId The object ID of the application for which to get owners.
   * @param options The options parameters.
   */
  private _listOwners(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationsListOwnersResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      applicationObjectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOwnersOperationSpec
    ) as Promise<ApplicationsListOwnersResponse>;
  }

  /**
   * Add an owner to an application.
   * @param applicationObjectId The object ID of the application to which to add the owner.
   * @param parameters The URL of the owner object, such as
   *                   https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
   * @param options The options parameters.
   */
  addOwner(
    applicationObjectId: string,
    parameters: AddOwnerParameters,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      applicationObjectId,
      parameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      addOwnerOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Remove a member from owners.
   * @param applicationObjectId The object ID of the application from which to remove the owner.
   * @param ownerObjectId Owner object id
   * @param options The options parameters.
   */
  removeOwner(
    applicationObjectId: string,
    ownerObjectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      applicationObjectId,
      ownerObjectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      removeOwnerOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get the keyCredentials associated with an application.
   * @param applicationObjectId Application object ID.
   * @param options The options parameters.
   */
  private _listKeyCredentials(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationsListKeyCredentialsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      applicationObjectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listKeyCredentialsOperationSpec
    ) as Promise<ApplicationsListKeyCredentialsResponse>;
  }

  /**
   * Update the keyCredentials associated with an application.
   * @param applicationObjectId Application object ID.
   * @param parameters Parameters to update the keyCredentials of an existing application.
   * @param options The options parameters.
   */
  updateKeyCredentials(
    applicationObjectId: string,
    parameters: KeyCredentialsUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      applicationObjectId,
      parameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updateKeyCredentialsOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get the passwordCredentials associated with an application.
   * @param applicationObjectId Application object ID.
   * @param options The options parameters.
   */
  private _listPasswordCredentials(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationsListPasswordCredentialsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      applicationObjectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listPasswordCredentialsOperationSpec
    ) as Promise<ApplicationsListPasswordCredentialsResponse>;
  }

  /**
   * Update passwordCredentials associated with an application.
   * @param applicationObjectId Application object ID.
   * @param parameters Parameters to update passwordCredentials of an existing application.
   * @param options The options parameters.
   */
  updatePasswordCredentials(
    applicationObjectId: string,
    parameters: PasswordCredentialsUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      applicationObjectId,
      parameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updatePasswordCredentialsOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets an object id for a given application id from the current tenant.
   * @param applicationID The application ID.
   * @param options The options parameters.
   */
  getServicePrincipalsIdByAppId(
    applicationID: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationsGetServicePrincipalsIdByAppIdResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      applicationID,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getServicePrincipalsIdByAppIdOperationSpec
    ) as Promise<ApplicationsGetServicePrincipalsIdByAppIdResponse>;
  }

  /**
   * Gets a list of applications from the current tenant.
   * @param nextLink Next link for the list operation.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationsListNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listNextOperationSpec
    ) as Promise<ApplicationsListNextResponse>;
  }

  /**
   * ListOwnersNext
   * @param applicationObjectId The object ID of the application for which to get owners.
   * @param nextLink The nextLink from the previous successful call to the ListOwners method.
   * @param options The options parameters.
   */
  private _listOwnersNext(
    applicationObjectId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationsListOwnersNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      applicationObjectId,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOwnersNextOperationSpec
    ) as Promise<ApplicationsListOwnersNextResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/applications",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.Application
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/applications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.tenantID],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/applications/{applicationObjectId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.applicationObjectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/applications/{applicationObjectId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Application
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.applicationObjectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const patchOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/applications/{applicationObjectId}",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.applicationObjectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOwnersOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/applications/{applicationObjectId}/owners",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryObjectListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.applicationObjectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const addOwnerOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/applications/{applicationObjectId}/$links/owners",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.applicationObjectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const removeOwnerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{tenantID}/applications/{applicationObjectId}/$links/owners/{ownerObjectId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.applicationObjectId,
    Parameters.ownerObjectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listKeyCredentialsOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/applications/{applicationObjectId}/keyCredentials",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyCredentialListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.applicationObjectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateKeyCredentialsOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/applications/{applicationObjectId}/keyCredentials",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.applicationObjectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listPasswordCredentialsOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/applications/{applicationObjectId}/passwordCredentials",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PasswordCredentialListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.applicationObjectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updatePasswordCredentialsOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/applications/{applicationObjectId}/passwordCredentials",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.applicationObjectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getServicePrincipalsIdByAppIdOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/servicePrincipalsByAppId/{applicationID}/objectId",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServicePrincipalObjectResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.applicationID
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listOwnersNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryObjectListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.nextLink,
    Parameters.applicationObjectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
