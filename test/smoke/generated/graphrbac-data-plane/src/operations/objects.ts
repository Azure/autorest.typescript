/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GraphRbacManagementClient } from "../graphRbacManagementClient";
import {
  GetObjectsParameters,
  ObjectsGetObjectsByObjectIdsResponse,
  ObjectsGetObjectsByObjectIdsNextResponse
} from "../models";

/**
 * Class representing a Objects.
 */
export class Objects {
  private readonly client: GraphRbacManagementClient;

  /**
   * Initialize a new instance of the class Objects class.
   * @param client Reference to the service client
   */
  constructor(client: GraphRbacManagementClient) {
    this.client = client;
  }

  /**
   * Gets the directory objects specified in a list of object IDs. You can also specify which resource
   * collections (users, groups, etc.) should be searched by specifying the optional types parameter.
   * @param parameters Objects filtering parameters.
   * @param options The options parameters.
   */
  getObjectsByObjectIds(
    parameters: GetObjectsParameters,
    options?: coreHttp.OperationOptions
  ): Promise<ObjectsGetObjectsByObjectIdsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { parameters, options: operationOptions },
      getObjectsByObjectIdsOperationSpec
    ) as Promise<ObjectsGetObjectsByObjectIdsResponse>;
  }

  /**
   * Gets AD group membership for the specified AD object IDs.
   * @param nextLink Next link for the list operation.
   * @param options The options parameters.
   */
  getObjectsByObjectIdsNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ObjectsGetObjectsByObjectIdsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      getObjectsByObjectIdsNextOperationSpec
    ) as Promise<ObjectsGetObjectsByObjectIdsNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getObjectsByObjectIdsOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/getObjectsByObjectIds",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryObjectListResult
    }
  },
  requestBody: Parameters.parameters14,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
const getObjectsByObjectIdsNextOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryObjectListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
