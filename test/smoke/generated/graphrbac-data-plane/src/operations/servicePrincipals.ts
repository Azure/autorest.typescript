/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GraphRbacManagementClientContext } from "../graphRbacManagementClientContext";
import {
  ServicePrincipal,
  ServicePrincipalsListOptionalParams,
  DirectoryObjectUnion,
  KeyCredential,
  PasswordCredential,
  ServicePrincipalCreateParameters,
  ServicePrincipalsCreateResponse,
  ServicePrincipalsListResponse,
  ServicePrincipalUpdateParameters,
  ServicePrincipalsGetResponse,
  ServicePrincipalsListOwnersResponse,
  ServicePrincipalsListKeyCredentialsResponse,
  KeyCredentialsUpdateParameters,
  ServicePrincipalsListPasswordCredentialsResponse,
  PasswordCredentialsUpdateParameters,
  ServicePrincipalsListNextResponse,
  ServicePrincipalsListOwnersNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a ServicePrincipals. */
export class ServicePrincipals {
  private readonly client: GraphRbacManagementClientContext;

  /**
   * Initialize a new instance of the class ServicePrincipals class.
   * @param client Reference to the service client
   */
  constructor(client: GraphRbacManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a list of service principals from the current tenant.
   * @param options The options parameters.
   */
  public list(
    options?: ServicePrincipalsListOptionalParams
  ): PagedAsyncIterableIterator<ServicePrincipal> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: ServicePrincipalsListOptionalParams
  ): AsyncIterableIterator<ServicePrincipal[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: ServicePrincipalsListOptionalParams
  ): AsyncIterableIterator<ServicePrincipal> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * The owners are a set of non-admin users who are allowed to modify this object.
   * @param objectId The object ID of the service principal for which to get owners.
   * @param options The options parameters.
   */
  public listOwners(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<DirectoryObjectUnion> {
    const iter = this.listOwnersPagingAll(objectId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listOwnersPagingPage(objectId, options);
      }
    };
  }

  private async *listOwnersPagingPage(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<DirectoryObjectUnion[]> {
    let result = await this._listOwners(objectId, options);
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._listOwnersNext(objectId, continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listOwnersPagingAll(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<DirectoryObjectUnion> {
    for await (const page of this.listOwnersPagingPage(objectId, options)) {
      yield* page;
    }
  }

  /**
   * Get the keyCredentials associated with the specified service principal.
   * @param objectId The object ID of the service principal for which to get keyCredentials.
   * @param options The options parameters.
   */
  public listKeyCredentials(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<KeyCredential> {
    const iter = this.listKeyCredentialsPagingAll(objectId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listKeyCredentialsPagingPage(objectId, options);
      }
    };
  }

  private async *listKeyCredentialsPagingPage(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<KeyCredential[]> {
    let result = await this._listKeyCredentials(objectId, options);
    yield result.value || [];
  }

  private async *listKeyCredentialsPagingAll(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<KeyCredential> {
    for await (const page of this.listKeyCredentialsPagingPage(
      objectId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the passwordCredentials associated with a service principal.
   * @param objectId The object ID of the service principal.
   * @param options The options parameters.
   */
  public listPasswordCredentials(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<PasswordCredential> {
    const iter = this.listPasswordCredentialsPagingAll(objectId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPasswordCredentialsPagingPage(objectId, options);
      }
    };
  }

  private async *listPasswordCredentialsPagingPage(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<PasswordCredential[]> {
    let result = await this._listPasswordCredentials(objectId, options);
    yield result.value || [];
  }

  private async *listPasswordCredentialsPagingAll(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<PasswordCredential> {
    for await (const page of this.listPasswordCredentialsPagingPage(
      objectId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of service principals from the current tenant.
   * @param nextLink Next link for the list operation.
   * @param options The options parameters.
   */
  public listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<ServicePrincipal> {
    const iter = this.listNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextPagingPage(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<ServicePrincipal[]> {
    let result = await this._listNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listNextPagingAll(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<ServicePrincipal> {
    for await (const page of this.listNextPagingPage(nextLink, options)) {
      yield* page;
    }
  }

  /**
   * Creates a service principal in the directory.
   * @param parameters Parameters to create a service principal.
   * @param options The options parameters.
   */
  create(
    parameters: ServicePrincipalCreateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<ServicePrincipalsCreateResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      parameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createOperationSpec
    ) as Promise<ServicePrincipalsCreateResponse>;
  }

  /**
   * Gets a list of service principals from the current tenant.
   * @param options The options parameters.
   */
  private _list(
    options?: ServicePrincipalsListOptionalParams
  ): Promise<ServicePrincipalsListResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOperationSpec
    ) as Promise<ServicePrincipalsListResponse>;
  }

  /**
   * Updates a service principal in the directory.
   * @param objectId The object ID of the service principal to delete.
   * @param parameters Parameters to update a service principal.
   * @param options The options parameters.
   */
  update(
    objectId: string,
    parameters: ServicePrincipalUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      objectId,
      parameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updateOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Deletes a service principal from the directory.
   * @param objectId The object ID of the service principal to delete.
   * @param options The options parameters.
   */
  delete(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      objectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets service principal information from the directory. Query by objectId or pass a filter to query
   * by appId
   * @param objectId The object ID of the service principal to get.
   * @param options The options parameters.
   */
  get(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServicePrincipalsGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      objectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<ServicePrincipalsGetResponse>;
  }

  /**
   * The owners are a set of non-admin users who are allowed to modify this object.
   * @param objectId The object ID of the service principal for which to get owners.
   * @param options The options parameters.
   */
  private _listOwners(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServicePrincipalsListOwnersResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      objectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOwnersOperationSpec
    ) as Promise<ServicePrincipalsListOwnersResponse>;
  }

  /**
   * Get the keyCredentials associated with the specified service principal.
   * @param objectId The object ID of the service principal for which to get keyCredentials.
   * @param options The options parameters.
   */
  private _listKeyCredentials(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServicePrincipalsListKeyCredentialsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      objectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listKeyCredentialsOperationSpec
    ) as Promise<ServicePrincipalsListKeyCredentialsResponse>;
  }

  /**
   * Update the keyCredentials associated with a service principal.
   * @param objectId The object ID for which to get service principal information.
   * @param parameters Parameters to update the keyCredentials of an existing service principal.
   * @param options The options parameters.
   */
  updateKeyCredentials(
    objectId: string,
    parameters: KeyCredentialsUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      objectId,
      parameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updateKeyCredentialsOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets the passwordCredentials associated with a service principal.
   * @param objectId The object ID of the service principal.
   * @param options The options parameters.
   */
  private _listPasswordCredentials(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServicePrincipalsListPasswordCredentialsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      objectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listPasswordCredentialsOperationSpec
    ) as Promise<ServicePrincipalsListPasswordCredentialsResponse>;
  }

  /**
   * Updates the passwordCredentials associated with a service principal.
   * @param objectId The object ID of the service principal.
   * @param parameters Parameters to update the passwordCredentials of an existing service principal.
   * @param options The options parameters.
   */
  updatePasswordCredentials(
    objectId: string,
    parameters: PasswordCredentialsUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      objectId,
      parameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updatePasswordCredentialsOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets a list of service principals from the current tenant.
   * @param nextLink Next link for the list operation.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServicePrincipalsListNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listNextOperationSpec
    ) as Promise<ServicePrincipalsListNextResponse>;
  }

  /**
   * ListOwnersNext
   * @param objectId The object ID of the service principal for which to get owners.
   * @param nextLink The nextLink from the previous successful call to the ListOwners method.
   * @param options The options parameters.
   */
  private _listOwnersNext(
    objectId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServicePrincipalsListOwnersNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      objectId,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOwnersNextOperationSpec
    ) as Promise<ServicePrincipalsListOwnersNextResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/servicePrincipals",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ServicePrincipal
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/servicePrincipals",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServicePrincipalListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.tenantID],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/servicePrincipals/{objectId}",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  requestBody: Parameters.parameters10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.objectId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/servicePrincipals/{objectId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.objectId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/servicePrincipals/{objectId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServicePrincipal
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.objectId],
  headerParameters: [Parameters.accept],
  serializer
};
const listOwnersOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/servicePrincipals/{objectId}/owners",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryObjectListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.objectId],
  headerParameters: [Parameters.accept],
  serializer
};
const listKeyCredentialsOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/servicePrincipals/{objectId}/keyCredentials",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyCredentialListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.objectId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateKeyCredentialsOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/servicePrincipals/{objectId}/keyCredentials",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.objectId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listPasswordCredentialsOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/servicePrincipals/{objectId}/passwordCredentials",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PasswordCredentialListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.objectId],
  headerParameters: [Parameters.accept],
  serializer
};
const updatePasswordCredentialsOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/servicePrincipals/{objectId}/passwordCredentials",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.objectId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServicePrincipalListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listOwnersNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryObjectListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.nextLink,
    Parameters.objectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
