/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GraphRbacManagementClient } from "../graphRbacManagementClient";
import {
  OAuth2PermissionGrantListOptionalParams,
  OAuth2PermissionGrantListResponse,
  OAuth2PermissionGrantCreateOptionalParams,
  OAuth2PermissionGrantCreateResponse,
  OAuth2PermissionGrantListNextResponse
} from "../models";

/**
 * Class representing a OAuth2PermissionGrant.
 */
export class OAuth2PermissionGrant {
  private readonly client: GraphRbacManagementClient;

  /**
   * Initialize a new instance of the class OAuth2PermissionGrant class.
   * @param client Reference to the service client
   */
  constructor(client: GraphRbacManagementClient) {
    this.client = client;
  }

  /**
   * Queries OAuth2 permissions grants for the relevant SP ObjectId of an app.
   * @param options The options parameters.
   */
  list(
    options?: OAuth2PermissionGrantListOptionalParams
  ): Promise<OAuth2PermissionGrantListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<OAuth2PermissionGrantListResponse>;
  }

  /**
   * Grants OAuth2 permissions for the relevant resource Ids of an app.
   * @param options The options parameters.
   */
  create(
    options?: OAuth2PermissionGrantCreateOptionalParams
  ): Promise<OAuth2PermissionGrantCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      createOperationSpec
    ) as Promise<OAuth2PermissionGrantCreateResponse>;
  }

  /**
   * Delete a OAuth2 permission grant for the relevant resource Ids of an app.
   * @param objectId The object ID of a permission grant.
   * @param options The options parameters.
   */
  delete(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { objectId, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets the next page of OAuth2 permission grants
   * @param nextLink Next link for the list operation.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<OAuth2PermissionGrantListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<OAuth2PermissionGrantListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/oauth2PermissionGrants",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OAuth2PermissionGrantListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.tenantID],
  headerParameters: [Parameters.accept1],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/oauth2PermissionGrants",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.OAuth2PermissionGrant
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/oauth2PermissionGrants/{objectId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.objectId],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OAuth2PermissionGrantListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
