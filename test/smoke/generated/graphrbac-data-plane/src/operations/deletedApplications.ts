/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GraphRbacManagementClient } from "../graphRbacManagementClient";
import {
  DeletedApplicationsRestoreResponse,
  DeletedApplicationsListOptionalParams,
  DeletedApplicationsListResponse,
  DeletedApplicationsListNextResponse
} from "../models";

/**
 * Class representing a DeletedApplications.
 */
export class DeletedApplications {
  private readonly client: GraphRbacManagementClient;

  /**
   * Initialize a new instance of the class DeletedApplications class.
   * @param client Reference to the service client
   */
  constructor(client: GraphRbacManagementClient) {
    this.client = client;
  }

  /**
   * Restores the deleted application in the directory.
   * @param objectId Application object ID.
   * @param options The options parameters.
   */
  restore(
    objectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DeletedApplicationsRestoreResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      objectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      restoreOperationSpec
    ) as Promise<DeletedApplicationsRestoreResponse>;
  }

  /**
   * Gets a list of deleted applications in the directory.
   * @param options The options parameters.
   */
  list(
    options?: DeletedApplicationsListOptionalParams
  ): Promise<DeletedApplicationsListResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOperationSpec
    ) as Promise<DeletedApplicationsListResponse>;
  }

  /**
   * Hard-delete an application.
   * @param applicationObjectId Application object ID.
   * @param options The options parameters.
   */
  hardDelete(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      applicationObjectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      hardDeleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets a list of deleted applications in the directory.
   * @param nextLink Next link for the list operation.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DeletedApplicationsListNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listNextOperationSpec
    ) as Promise<DeletedApplicationsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const restoreOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/deletedApplications/{objectId}/restore",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Application
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.objectId],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/deletedApplications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.tenantID],
  headerParameters: [Parameters.accept],
  serializer
};
const hardDeleteOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/deletedApplications/{applicationObjectId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.tenantID,
    Parameters.applicationObjectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "/{tenantID}/{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
