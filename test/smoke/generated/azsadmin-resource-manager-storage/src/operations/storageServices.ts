/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageAdminClient } from "../storageAdminClient";
import {
  StorageServicesListRGResponse,
  StorageServicesListSubResponse,
  StorageServicesGetResponse,
  StorageServicesCreateResponse
} from "../models";

/**
 * Class representing a StorageServices.
 */
export class StorageServices {
  private readonly client: StorageAdminClient;

  /**
   * Initialize a new instance of the class StorageServices class.
   * @param client Reference to the service client
   */
  constructor(client: StorageAdminClient) {
    this.client = client;
  }

  /**
   * Returns the storage services list under the specified resource group and subscription.
   * @param subscriptionId Subscription Id.
   * @param resourceGroup Resource group name.
   * @param options The options parameters.
   */
  listRG(
    subscriptionId: string,
    resourceGroup: string,
    options?: coreHttp.OperationOptions
  ): Promise<StorageServicesListRGResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroup, options: operationOptions },
      listRGOperationSpec
    ) as Promise<StorageServicesListRGResponse>;
  }

  /**
   * Returns the storage services list under the specified subscription.
   * @param subscriptionId Subscription Id.
   * @param options The options parameters.
   */
  listSub(
    subscriptionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<StorageServicesListSubResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, options: operationOptions },
      listSubOperationSpec
    ) as Promise<StorageServicesListSubResponse>;
  }

  /**
   * Returns the specified storage service.
   * @param subscriptionId Subscription Id.
   * @param resourceGroup Resource group name.
   * @param serviceName Storage service name.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    resourceGroup: string,
    serviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<StorageServicesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroup, serviceName, options: operationOptions },
      getOperationSpec
    ) as Promise<StorageServicesGetResponse>;
  }

  /**
   * Create the specified storage resource.
   * @param subscriptionId Subscription Id.
   * @param resourceGroup Resource group name.
   * @param serviceName Storage service name.
   * @param options The options parameters.
   */
  create(
    subscriptionId: string,
    resourceGroup: string,
    serviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<StorageServicesCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroup, serviceName, options: operationOptions },
      createOperationSpec
    ) as Promise<StorageServicesCreateResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listRGOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.Storage.Admin/storageServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "StorageService" } }
        },
        serializedName: "StorageServiceList"
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  serializer
};
const listSubOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/storageServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "StorageService" } }
        },
        serializedName: "StorageServiceList"
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.Storage.Admin/storageServices/{serviceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageService
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.serviceName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.Storage.Admin/storageServices/{serviceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StorageService
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.serviceName
  ],
  serializer
};
