/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageAdminClient } from "../storageAdminClient";
import {
  Settings,
  StorageSettingsUpdateResponse,
  StorageSettingsGetResponse
} from "../models";

/**
 * Class representing a StorageSettings.
 */
export class StorageSettings {
  private readonly client: StorageAdminClient;

  /**
   * Initialize a new instance of the class StorageSettings class.
   * @param client Reference to the service client
   */
  constructor(client: StorageAdminClient) {
    this.client = client;
  }

  /**
   * Update storage resource provider settings.
   * @param subscriptionId Subscription Id.
   * @param location Resource location.
   * @param settingsObject Parameters used to update storage resource provider settings
   * @param options The options parameters.
   */
  update(
    subscriptionId: string,
    location: string,
    settingsObject: Settings,
    options?: coreHttp.OperationOptions
  ): Promise<StorageSettingsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, location, settingsObject, options: operationOptions },
      updateOperationSpec
    ) as Promise<StorageSettingsUpdateResponse>;
  }

  /**
   * Returns the storage resource provider settings.
   * @param subscriptionId Subscription Id.
   * @param location Resource location.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<StorageSettingsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, location, options: operationOptions },
      getOperationSpec
    ) as Promise<StorageSettingsGetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/settings",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Settings
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.settingsObject,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/settings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Settings
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  serializer
};
