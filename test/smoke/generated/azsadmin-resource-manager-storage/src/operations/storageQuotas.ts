/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageAdminClient } from "../storageAdminClient";
import {
  StorageQuota,
  StorageQuotasCreateOrUpdateResponse,
  StorageQuotasGetResponse,
  StorageQuotasListResponse
} from "../models";

/**
 * Class representing a StorageQuotas.
 */
export class StorageQuotas {
  private readonly client: StorageAdminClient;

  /**
   * Initialize a new instance of the class StorageQuotas class.
   * @param client Reference to the service client
   */
  constructor(client: StorageAdminClient) {
    this.client = client;
  }

  /**
   * Create or update an existing storage quota.
   * @param subscriptionId Subscription Id.
   * @param location Resource location.
   * @param quotaObject The properties of quota being created or updated.
   * @param quotaName The name of the storage quota.
   * @param options The options parameters.
   */
  createOrUpdate(
    subscriptionId: string,
    location: string,
    quotaObject: StorageQuota,
    quotaName: string,
    options?: coreHttp.OperationOptions
  ): Promise<StorageQuotasCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        location,
        quotaObject,
        quotaName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<StorageQuotasCreateOrUpdateResponse>;
  }

  /**
   * Delete an existing quota
   * @param subscriptionId Subscription Id.
   * @param location Resource location.
   * @param quotaName The name of the storage quota.
   * @param options The options parameters.
   */
  delete(
    subscriptionId: string,
    location: string,
    quotaName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, location, quotaName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Returns the specified storage quota.
   * @param subscriptionId Subscription Id.
   * @param location Resource location.
   * @param quotaName The name of the storage quota.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    location: string,
    quotaName: string,
    options?: coreHttp.OperationOptions
  ): Promise<StorageQuotasGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, location, quotaName, options: operationOptions },
      getOperationSpec
    ) as Promise<StorageQuotasGetResponse>;
  }

  /**
   * Returns a list of storage quotas at the given location.
   * @param subscriptionId Subscription Id.
   * @param location Resource location.
   * @param options The options parameters.
   */
  list(
    subscriptionId: string,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<StorageQuotasListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, location, options: operationOptions },
      listOperationSpec
    ) as Promise<StorageQuotasListResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/quotas/{quotaName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StorageQuota
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.quotaObject,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.quotaName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/quotas/{quotaName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.quotaName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/quotas/{quotaName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageQuota
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.quotaName
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/quotas",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageQuotaList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  serializer
};
