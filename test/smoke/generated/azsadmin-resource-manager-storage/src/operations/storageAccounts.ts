/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageAdminClient } from "../storageAdminClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  StorageAccountsListOptionalParams,
  StorageAccountsListResponse,
  StorageAccountsGetResponse,
  StorageAccountsUndeleteOptionalParams,
  StorageAccountsUndeleteResponse,
  StorageAccountsListNextOptionalParams,
  StorageAccountsListNextResponse
} from "../models";

/**
 * Class representing a StorageAccounts.
 */
export class StorageAccounts {
  private readonly client: StorageAdminClient;

  /**
   * Initialize a new instance of the class StorageAccounts class.
   * @param client Reference to the service client
   */
  constructor(client: StorageAdminClient) {
    this.client = client;
  }

  /**
   * Returns a list of storage accounts.
   * @param subscriptionId Subscription Id.
   * @param location Resource location.
   * @param options The options parameters.
   */
  list(
    subscriptionId: string,
    location: string,
    options?: StorageAccountsListOptionalParams
  ): Promise<StorageAccountsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, location, options: operationOptions },
      listOperationSpec
    ) as Promise<StorageAccountsListResponse>;
  }

  /**
   * Returns the requested storage account.
   * @param subscriptionId Subscription Id.
   * @param location Resource location.
   * @param accountId Internal storage account ID, which is not visible to tenant.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    location: string,
    accountId: string,
    options?: coreHttp.OperationOptions
  ): Promise<StorageAccountsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, location, accountId, options: operationOptions },
      getOperationSpec
    ) as Promise<StorageAccountsGetResponse>;
  }

  /**
   * Undelete a deleted storage account with new account name if the a new name is provided.
   * @param subscriptionId Subscription Id.
   * @param location Resource location.
   * @param accountId Internal storage account ID, which is not visible to tenant.
   * @param options The options parameters.
   */
  async undelete(
    subscriptionId: string,
    location: string,
    accountId: string,
    options?: StorageAccountsUndeleteOptionalParams
  ): Promise<LROPoller<StorageAccountsUndeleteResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "location"
    );

    const args: coreHttp.OperationArguments = {
      subscriptionId,
      location,
      accountId,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        StorageAccountsUndeleteResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      undeleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: undeleteOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Start reclaim storage capacity on deleted storage objects.
   * @param subscriptionId Subscription Id.
   * @param location Resource location.
   * @param options The options parameters.
   */
  async reclaimStorageCapacity(
    subscriptionId: string,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      subscriptionId,
      location,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      reclaimStorageCapacityOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: reclaimStorageCapacityOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListNext
   * @param subscriptionId Subscription Id.
   * @param location Resource location.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    subscriptionId: string,
    location: string,
    nextLink: string,
    options?: StorageAccountsListNextOptionalParams
  ): Promise<StorageAccountsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, location, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<StorageAccountsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/storageAccounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccountList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.summary
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/storageAccounts/{accountId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.accountId
  ],
  serializer
};
const undeleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/storageAccounts/{accountId}/undelete",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UndeleteStorageAccount
    },
    201: {
      bodyMapper: Mappers.UndeleteStorageAccount
    },
    202: {
      bodyMapper: Mappers.UndeleteStorageAccount
    },
    204: {
      bodyMapper: Mappers.UndeleteStorageAccount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.newAccountName],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.accountId
  ],
  serializer
};
const reclaimStorageCapacityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Storage.Admin/locations/{location}/reclaimStorageCapacity",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccountList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.summary
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.nextLink
  ],
  serializer
};
