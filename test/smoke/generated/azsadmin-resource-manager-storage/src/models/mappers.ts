/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const StorageAccountList: coreHttp.CompositeMapper = {
  serializedName: "StorageAccountList",
  type: {
    name: "Composite",
    className: "StorageAccountList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "StorageAccount" } }
        }
      },
      odataNextLink: {
        serializedName: "@odata\\.nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccount: coreHttp.CompositeMapper = {
  serializedName: "StorageAccount",
  type: {
    name: "Composite",
    className: "StorageAccount",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      tenantViewId: {
        serializedName: "properties.tenantViewId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountType: {
        serializedName: "properties.accountType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      primaryEndpoints: {
        serializedName: "properties.primaryEndpoints",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      primaryLocation: {
        serializedName: "properties.primaryLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      faultDomain: {
        serializedName: "properties.faultDomain",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusOfPrimary: {
        serializedName: "properties.statusOfPrimary",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantSubscriptionId: {
        serializedName: "properties.tenantSubscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantStorageAccountName: {
        serializedName: "properties.tenantStorageAccountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantResourceGroupName: {
        serializedName: "properties.tenantResourceGroupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deletedTime: {
        serializedName: "properties.deletedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      accountStatus: {
        serializedName: "properties.accountStatus",
        type: {
          name: "String"
        }
      },
      accountId: {
        serializedName: "properties.accountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "encryption",
        type: {
          name: "Composite",
          className: "StorageEncryption"
        }
      },
      supportsHttpsTrafficOnly: {
        serializedName: "properties.supportsHttpsTrafficOnly",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      accessTier: {
        serializedName: "properties.accessTier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthState: {
        serializedName: "properties.healthState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageEncryption: coreHttp.CompositeMapper = {
  serializedName: "StorageEncryption",
  type: {
    name: "Composite",
    className: "StorageEncryption",
    modelProperties: {
      services: {
        serializedName: "services",
        type: {
          name: "Composite",
          className: "StorageEncryptionServices"
        }
      },
      keySource: {
        defaultValue: "Microsoft.Storage",
        serializedName: "keySource",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageEncryptionServices: coreHttp.CompositeMapper = {
  serializedName: "StorageEncryptionServices",
  type: {
    name: "Composite",
    className: "StorageEncryptionServices",
    modelProperties: {
      blob: {
        serializedName: "blob",
        type: {
          name: "Composite",
          className: "StorageEncryptionSetting"
        }
      },
      table: {
        serializedName: "table",
        type: {
          name: "Composite",
          className: "StorageEncryptionSetting"
        }
      },
      queue: {
        serializedName: "queue",
        type: {
          name: "Composite",
          className: "StorageEncryptionSetting"
        }
      }
    }
  }
};

export const StorageEncryptionSetting: coreHttp.CompositeMapper = {
  serializedName: "StorageEncryptionSetting",
  type: {
    name: "Composite",
    className: "StorageEncryptionSetting",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      lastEnabledTime: {
        serializedName: "lastEnabledTime",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ErrorResponseDetailsItem"
          }
        }
      }
    }
  }
};

export const UndeleteStorageAccount: coreHttp.CompositeMapper = {
  serializedName: "UndeleteStorageAccount",
  type: {
    name: "Composite",
    className: "UndeleteStorageAccount",
    modelProperties: {
      accountId: {
        serializedName: "accountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      newAccountName: {
        serializedName: "newAccountName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageQuota: coreHttp.CompositeMapper = {
  serializedName: "StorageQuota",
  type: {
    name: "Composite",
    className: "StorageQuota",
    modelProperties: {
      ...Resource.type.modelProperties,
      numberOfStorageAccounts: {
        defaultValue: 20,
        serializedName: "properties.numberOfStorageAccounts",
        type: {
          name: "Number"
        }
      },
      capacityInGb: {
        defaultValue: 500,
        serializedName: "properties.capacityInGb",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StorageQuotaList: coreHttp.CompositeMapper = {
  serializedName: "StorageQuotaList",
  type: {
    name: "Composite",
    className: "StorageQuotaList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "StorageQuota" } }
        }
      }
    }
  }
};

export const Settings: coreHttp.CompositeMapper = {
  serializedName: "Settings",
  type: {
    name: "Composite",
    className: "Settings",
    modelProperties: {
      ...Resource.type.modelProperties,
      retentionPeriodForDeletedStorageAccountsInDays: {
        serializedName:
          "properties.retentionPeriodForDeletedStorageAccountsInDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OperationList: coreHttp.CompositeMapper = {
  serializedName: "OperationList",
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "Display"
        }
      }
    }
  }
};

export const Display: coreHttp.CompositeMapper = {
  serializedName: "Display",
  type: {
    name: "Composite",
    className: "Display",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AsyncOperationModel: coreHttp.CompositeMapper = {
  serializedName: "AsyncOperationModel",
  type: {
    name: "Composite",
    className: "AsyncOperationModel",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationStartTime: {
        serializedName: "operationStartTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationEndTime: {
        serializedName: "operationEndTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locationHeader: {
        serializedName: "locationHeader",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      httpStatus: {
        serializedName: "httpStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      response: {
        serializedName: "response",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "operation.name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      apiVersion: {
        serializedName: "context.apiVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      activityId: {
        serializedName: "context.activityId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationName: {
        serializedName: "context.operationName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "context.errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      runtimeException: {
        serializedName: "context.runtimeException",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "context.startTime",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageService: coreHttp.CompositeMapper = {
  serializedName: "StorageService",
  type: {
    name: "Composite",
    className: "StorageService",
    modelProperties: {
      ...Resource.type.modelProperties,
      serviceName: {
        serializedName: "properties.serviceName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AcquisitionList: coreHttp.CompositeMapper = {
  serializedName: "AcquisitionList",
  type: {
    name: "Composite",
    className: "AcquisitionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Acquisition" } }
        }
      }
    }
  }
};

export const Acquisition: coreHttp.CompositeMapper = {
  serializedName: "Acquisition",
  type: {
    name: "Composite",
    className: "Acquisition",
    modelProperties: {
      susbcriptionid: {
        serializedName: "susbcriptionid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageaccount: {
        serializedName: "storageaccount",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      container: {
        serializedName: "container",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      blob: {
        serializedName: "blob",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      acquisitionid: {
        serializedName: "acquisitionid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "filePath",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      filePathUnc: {
        serializedName: "filePathUnc",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maximumblobsize: {
        serializedName: "maximumblobsize",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
