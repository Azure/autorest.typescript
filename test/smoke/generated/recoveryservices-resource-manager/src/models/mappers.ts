/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const CertificateRequest: coreHttp.CompositeMapper = {
  serializedName: "CertificateRequest",
  type: {
    name: "Composite",
    className: "CertificateRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RawCertificateData"
        }
      }
    }
  }
};

export const RawCertificateData: coreHttp.CompositeMapper = {
  serializedName: "RawCertificateData",
  type: {
    name: "Composite",
    className: "RawCertificateData",
    modelProperties: {
      authType: {
        serializedName: "authType",
        type: {
          name: "String"
        }
      },
      certificate: {
        serializedName: "certificate",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const VaultCertificateResponse: coreHttp.CompositeMapper = {
  serializedName: "VaultCertificateResponse",
  type: {
    name: "Composite",
    className: "VaultCertificateResponse",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ResourceCertificateDetails"
        }
      }
    }
  }
};

export const ResourceCertificateDetails: coreHttp.CompositeMapper = {
  serializedName: "ResourceCertificateDetails",
  type: {
    name: "Composite",
    className: "ResourceCertificateDetails",
    uberParent: "ResourceCertificateDetails",
    polymorphicDiscriminator: {
      serializedName: "authType",
      clientName: "authType"
    },
    modelProperties: {
      authType: {
        serializedName: "authType",
        required: true,
        type: {
          name: "String"
        }
      },
      certificate: {
        serializedName: "certificate",
        type: {
          name: "ByteArray"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      issuer: {
        serializedName: "issuer",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "Number"
        }
      },
      subject: {
        serializedName: "subject",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      validFrom: {
        serializedName: "validFrom",
        type: {
          name: "DateTime"
        }
      },
      validTo: {
        serializedName: "validTo",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ReplicationUsageList: coreHttp.CompositeMapper = {
  serializedName: "ReplicationUsageList",
  type: {
    name: "Composite",
    className: "ReplicationUsageList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReplicationUsage" }
          }
        }
      }
    }
  }
};

export const ReplicationUsage: coreHttp.CompositeMapper = {
  serializedName: "ReplicationUsage",
  type: {
    name: "Composite",
    className: "ReplicationUsage",
    modelProperties: {
      monitoringSummary: {
        serializedName: "monitoringSummary",
        type: {
          name: "Composite",
          className: "MonitoringSummary"
        }
      },
      jobsSummary: {
        serializedName: "jobsSummary",
        type: {
          name: "Composite",
          className: "JobsSummary"
        }
      },
      protectedItemCount: {
        serializedName: "protectedItemCount",
        type: {
          name: "Number"
        }
      },
      recoveryPlanCount: {
        serializedName: "recoveryPlanCount",
        type: {
          name: "Number"
        }
      },
      registeredServersCount: {
        serializedName: "registeredServersCount",
        type: {
          name: "Number"
        }
      },
      recoveryServicesProviderAuthType: {
        serializedName: "recoveryServicesProviderAuthType",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MonitoringSummary: coreHttp.CompositeMapper = {
  serializedName: "MonitoringSummary",
  type: {
    name: "Composite",
    className: "MonitoringSummary",
    modelProperties: {
      unHealthyVmCount: {
        serializedName: "unHealthyVmCount",
        type: {
          name: "Number"
        }
      },
      unHealthyProviderCount: {
        serializedName: "unHealthyProviderCount",
        type: {
          name: "Number"
        }
      },
      eventsCount: {
        serializedName: "eventsCount",
        type: {
          name: "Number"
        }
      },
      deprecatedProviderCount: {
        serializedName: "deprecatedProviderCount",
        type: {
          name: "Number"
        }
      },
      supportedProviderCount: {
        serializedName: "supportedProviderCount",
        type: {
          name: "Number"
        }
      },
      unsupportedProviderCount: {
        serializedName: "unsupportedProviderCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobsSummary: coreHttp.CompositeMapper = {
  serializedName: "JobsSummary",
  type: {
    name: "Composite",
    className: "JobsSummary",
    modelProperties: {
      failedJobs: {
        serializedName: "failedJobs",
        type: {
          name: "Number"
        }
      },
      suspendedJobs: {
        serializedName: "suspendedJobs",
        type: {
          name: "Number"
        }
      },
      inProgressJobs: {
        serializedName: "inProgressJobs",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CheckNameAvailabilityParameters: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityParameters",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResultResource: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResultResource",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResultResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CheckNameAvailabilityResult"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultList: coreHttp.CompositeMapper = {
  serializedName: "VaultList",
  type: {
    name: "Composite",
    className: "VaultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Vault" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreHttp.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const Vault: coreHttp.CompositeMapper = {
  serializedName: "Vault",
  type: {
    name: "Composite",
    className: "Vault",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const VaultProperties: coreHttp.CompositeMapper = {
  serializedName: "VaultProperties",
  type: {
    name: "Composite",
    className: "VaultProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      upgradeDetails: {
        serializedName: "upgradeDetails",
        type: {
          name: "Composite",
          className: "UpgradeDetails"
        }
      }
    }
  }
};

export const UpgradeDetails: coreHttp.CompositeMapper = {
  serializedName: "UpgradeDetails",
  type: {
    name: "Composite",
    className: "UpgradeDetails",
    modelProperties: {
      operationId: {
        serializedName: "operationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTimeUtc: {
        serializedName: "startTimeUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedTimeUtc: {
        serializedName: "lastUpdatedTimeUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTimeUtc: {
        serializedName: "endTimeUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      triggerType: {
        serializedName: "triggerType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      upgradedResourceId: {
        serializedName: "upgradedResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      previousResourceId: {
        serializedName: "previousResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientDiscoveryResponse: coreHttp.CompositeMapper = {
  serializedName: "ClientDiscoveryResponse",
  type: {
    name: "Composite",
    className: "ClientDiscoveryResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClientDiscoveryValueForSingleApi"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientDiscoveryValueForSingleApi: coreHttp.CompositeMapper = {
  serializedName: "ClientDiscoveryValueForSingleApi",
  type: {
    name: "Composite",
    className: "ClientDiscoveryValueForSingleApi",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ClientDiscoveryDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClientDiscoveryForProperties"
        }
      }
    }
  }
};

export const ClientDiscoveryDisplay: coreHttp.CompositeMapper = {
  serializedName: "ClientDiscoveryDisplay",
  type: {
    name: "Composite",
    className: "ClientDiscoveryDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientDiscoveryForProperties: coreHttp.CompositeMapper = {
  serializedName: "ClientDiscoveryForProperties",
  type: {
    name: "Composite",
    className: "ClientDiscoveryForProperties",
    modelProperties: {
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ClientDiscoveryForServiceSpecification"
        }
      }
    }
  }
};

export const ClientDiscoveryForServiceSpecification: coreHttp.CompositeMapper = {
  serializedName: "ClientDiscoveryForServiceSpecification",
  type: {
    name: "Composite",
    className: "ClientDiscoveryForServiceSpecification",
    modelProperties: {
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClientDiscoveryForLogSpecification"
            }
          }
        }
      }
    }
  }
};

export const ClientDiscoveryForLogSpecification: coreHttp.CompositeMapper = {
  serializedName: "ClientDiscoveryForLogSpecification",
  type: {
    name: "Composite",
    className: "ClientDiscoveryForLogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PatchTrackedResource: coreHttp.CompositeMapper = {
  serializedName: "PatchTrackedResource",
  type: {
    name: "Composite",
    className: "PatchTrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const PatchVault: coreHttp.CompositeMapper = {
  serializedName: "PatchVault",
  type: {
    name: "Composite",
    className: "PatchVault",
    modelProperties: {
      ...PatchTrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const VaultExtendedInfoResource: coreHttp.CompositeMapper = {
  serializedName: "VaultExtendedInfoResource",
  type: {
    name: "Composite",
    className: "VaultExtendedInfoResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      integrityKey: {
        serializedName: "properties.integrityKey",
        type: {
          name: "String"
        }
      },
      encryptionKey: {
        serializedName: "properties.encryptionKey",
        type: {
          name: "String"
        }
      },
      encryptionKeyThumbprint: {
        serializedName: "properties.encryptionKeyThumbprint",
        type: {
          name: "String"
        }
      },
      algorithm: {
        serializedName: "properties.algorithm",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultUsageList: coreHttp.CompositeMapper = {
  serializedName: "VaultUsageList",
  type: {
    name: "Composite",
    className: "VaultUsageList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VaultUsage" } }
        }
      }
    }
  }
};

export const VaultUsage: coreHttp.CompositeMapper = {
  serializedName: "VaultUsage",
  type: {
    name: "Composite",
    className: "VaultUsage",
    modelProperties: {
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      quotaPeriod: {
        serializedName: "quotaPeriod",
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        serializedName: "nextResetTime",
        type: {
          name: "DateTime"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "NameInfo"
        }
      }
    }
  }
};

export const NameInfo: coreHttp.CompositeMapper = {
  serializedName: "NameInfo",
  type: {
    name: "Composite",
    className: "NameInfo",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceCertificateAndAadDetails: coreHttp.CompositeMapper = {
  serializedName: "AzureActiveDirectory",
  type: {
    name: "Composite",
    className: "ResourceCertificateAndAadDetails",
    uberParent: "ResourceCertificateDetails",
    polymorphicDiscriminator:
      ResourceCertificateDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceCertificateDetails.type.modelProperties,
      aadAuthority: {
        serializedName: "aadAuthority",
        required: true,
        type: {
          name: "String"
        }
      },
      aadTenantId: {
        serializedName: "aadTenantId",
        required: true,
        type: {
          name: "String"
        }
      },
      servicePrincipalClientId: {
        serializedName: "servicePrincipalClientId",
        required: true,
        type: {
          name: "String"
        }
      },
      servicePrincipalObjectId: {
        serializedName: "servicePrincipalObjectId",
        required: true,
        type: {
          name: "String"
        }
      },
      azureManagementEndpointAudience: {
        serializedName: "azureManagementEndpointAudience",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceCertificateAndAcsDetails: coreHttp.CompositeMapper = {
  serializedName: "AccessControlService",
  type: {
    name: "Composite",
    className: "ResourceCertificateAndAcsDetails",
    uberParent: "ResourceCertificateDetails",
    polymorphicDiscriminator:
      ResourceCertificateDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceCertificateDetails.type.modelProperties,
      globalAcsNamespace: {
        serializedName: "globalAcsNamespace",
        required: true,
        type: {
          name: "String"
        }
      },
      globalAcsHostName: {
        serializedName: "globalAcsHostName",
        required: true,
        type: {
          name: "String"
        }
      },
      globalAcsRPRealm: {
        serializedName: "globalAcsRPRealm",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  ResourceCertificateDetails: ResourceCertificateDetails,
  "ResourceCertificateDetails.AzureActiveDirectory": ResourceCertificateAndAadDetails,
  "ResourceCertificateDetails.AccessControlService": ResourceCertificateAndAcsDetails
};
