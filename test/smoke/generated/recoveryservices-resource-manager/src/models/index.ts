/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type ResourceCertificateDetailsUnion =
  | ResourceCertificateDetails
  | ResourceCertificateAndAadDetails
  | ResourceCertificateAndAcsDetails;

/**
 * Details of the certificate to be uploaded to the vault.
 */
export interface CertificateRequest {
  /**
   * Raw certificate data.
   */
  properties?: RawCertificateData;
}

/**
 * Raw certificate data.
 */
export interface RawCertificateData {
  /**
   * Specifies the authentication type.
   */
  authType?: AuthType;
  /**
   * The base64 encoded certificate raw data string
   */
  certificate?: Uint8Array;
}

/**
 * Certificate corresponding to a vault that can be used by clients to register themselves with the vault.
 */
export interface VaultCertificateResponse {
  /**
   * Resource name associated with the resource.
   */
  readonly name?: string;
  /**
   * Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
   */
  readonly type?: string;
  /**
   * Resource Id represents the complete path to the resource.
   */
  readonly id?: string;
  /**
   * Certificate details representing the Vault credentials.
   */
  properties?: ResourceCertificateDetailsUnion;
}

/**
 * Certificate details representing the Vault credentials.
 */
export interface ResourceCertificateDetails {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  authType: "AzureActiveDirectory" | "AccessControlService";
  /**
   * The base64 encoded certificate raw data string.
   */
  certificate?: Uint8Array;
  /**
   * Certificate friendly name.
   */
  friendlyName?: string;
  /**
   * Certificate issuer.
   */
  issuer?: string;
  /**
   * Resource ID of the vault.
   */
  resourceId?: number;
  /**
   * Certificate Subject Name.
   */
  subject?: string;
  /**
   * Certificate thumbprint.
   */
  thumbprint?: string;
  /**
   * Certificate Validity start Date time.
   */
  validFrom?: Date;
  /**
   * Certificate Validity End Date time.
   */
  validTo?: Date;
}

/**
 * Replication usages for vault.
 */
export interface ReplicationUsageList {
  /**
   * The list of replication usages for the given vault.
   */
  value?: ReplicationUsage[];
}

/**
 * Replication usages of a vault.
 */
export interface ReplicationUsage {
  /**
   * Summary of the replication monitoring data for this vault.
   */
  monitoringSummary?: MonitoringSummary;
  /**
   * Summary of the replication jobs data for this vault.
   */
  jobsSummary?: JobsSummary;
  /**
   * Number of replication protected items for this vault.
   */
  protectedItemCount?: number;
  /**
   * Number of replication recovery plans for this vault.
   */
  recoveryPlanCount?: number;
  /**
   * Number of servers registered to this vault.
   */
  registeredServersCount?: number;
  /**
   * The authentication type of recovery service providers in the vault.
   */
  recoveryServicesProviderAuthType?: number;
}

/**
 * Summary of the replication monitoring data for this vault.
 */
export interface MonitoringSummary {
  /**
   * Count of unhealthy VMs.
   */
  unHealthyVmCount?: number;
  /**
   * Count of unhealthy replication providers.
   */
  unHealthyProviderCount?: number;
  /**
   * Count of all critical warnings.
   */
  eventsCount?: number;
  /**
   * Count of all deprecated recovery service providers.
   */
  deprecatedProviderCount?: number;
  /**
   * Count of all the supported recovery service providers.
   */
  supportedProviderCount?: number;
  /**
   * Count of all the unsupported recovery service providers.
   */
  unsupportedProviderCount?: number;
}

/**
 * Summary of the replication job data for this vault.
 */
export interface JobsSummary {
  /**
   * Count of failed jobs.
   */
  failedJobs?: number;
  /**
   * Count of suspended jobs.
   */
  suspendedJobs?: number;
  /**
   * Count of in-progress jobs.
   */
  inProgressJobs?: number;
}

/**
 * Resource Name availability input parameters - Resource type and resource name
 */
export interface CheckNameAvailabilityParameters {
  /**
   * Describes the Resource type: Microsoft.RecoveryServices/Vaults
   */
  type?: string;
  /**
   * Resource name for which availability needs to be checked
   */
  name?: string;
}

/**
 * ARM Resource.
 */
export interface Resource {
  /**
   * Resource Id represents the complete path to the resource.
   */
  readonly id?: string;
  /**
   * Resource name associated with the resource.
   */
  readonly name?: string;
  /**
   * Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
   */
  readonly type?: string;
  /**
   * Optional ETag.
   */
  eTag?: string;
}

/**
 * Response for check name availability API. Resource provider will set availability as true | false.
 */
export type CheckNameAvailabilityResultResource = Resource & {
  /**
   * CheckNameAvailabilityResultResource properties
   */
  properties?: CheckNameAvailabilityResult;
};

/**
 * Response for check name availability API. Resource provider will set availability as true | false.
 */
export interface CheckNameAvailabilityResult {
  nameAvailable?: boolean;
  reason?: string;
  message?: string;
}

/**
 * The response model for a list of Vaults.
 */
export interface VaultList {
  value?: Vault[];
  readonly nextLink?: string;
}

/**
 * Tracked resource with location.
 */
export type TrackedResource = Resource & {
  /**
   * Resource location.
   */
  location: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
};

/**
 * Resource information, as returned by the resource provider.
 */
export type Vault = TrackedResource & {
  /**
   * Properties of the vault.
   */
  properties?: VaultProperties;
  /**
   * Identifies the unique system identifier for each Azure resource.
   */
  sku?: Sku;
};

/**
 * Properties of the vault.
 */
export interface VaultProperties {
  /**
   * Provisioning State.
   */
  readonly provisioningState?: string;
  /**
   * Details for upgrading vault.
   */
  upgradeDetails?: UpgradeDetails;
}

/**
 * Details for upgrading vault.
 */
export interface UpgradeDetails {
  /**
   * ID of the vault upgrade operation.
   */
  readonly operationId?: string;
  /**
   * UTC time at which the upgrade operation has started.
   */
  readonly startTimeUtc?: Date;
  /**
   * UTC time at which the upgrade operation status was last updated.
   */
  readonly lastUpdatedTimeUtc?: Date;
  /**
   * UTC time at which the upgrade operation has ended.
   */
  readonly endTimeUtc?: Date;
  /**
   * Status of the vault upgrade operation.
   */
  readonly status?: VaultUpgradeState;
  /**
   * Message to the user containing information about the upgrade operation.
   */
  readonly message?: string;
  /**
   * The way the vault upgrade was triggered.
   */
  readonly triggerType?: TriggerType;
  /**
   * Resource ID of the upgraded vault.
   */
  readonly upgradedResourceId?: string;
  /**
   * Resource ID of the vault before the upgrade.
   */
  readonly previousResourceId?: string;
}

/**
 * Identifies the unique system identifier for each Azure resource.
 */
export interface Sku {
  /**
   * The Sku name.
   */
  name: SkuName;
}

/**
 * Operations List response which contains list of available APIs.
 */
export interface ClientDiscoveryResponse {
  /**
   * List of available operations.
   */
  value?: ClientDiscoveryValueForSingleApi[];
  /**
   * Link to the next chunk of the response
   */
  nextLink?: string;
}

/**
 * Available operation details.
 */
export interface ClientDiscoveryValueForSingleApi {
  /**
   * Name of the Operation.
   */
  name?: string;
  /**
   * Contains the localized display information for this particular operation
   */
  display?: ClientDiscoveryDisplay;
  /**
   * The intended executor of the operation;governs the display of the operation in the RBAC UX and the audit logs UX
   */
  origin?: string;
  /**
   * ShoeBox properties for the given operation.
   */
  properties?: ClientDiscoveryForProperties;
}

/**
 * Localized display information of an operation.
 */
export interface ClientDiscoveryDisplay {
  /**
   * Name of the provider for display purposes
   */
  provider?: string;
  /**
   * ResourceType for which this Operation can be performed.
   */
  resource?: string;
  /**
   * Operations Name itself.
   */
  operation?: string;
  /**
   * Description of the operation having details of what operation is about.
   */
  description?: string;
}

/**
 * Class to represent shoebox properties in json client discovery.
 */
export interface ClientDiscoveryForProperties {
  /**
   * Operation properties.
   */
  serviceSpecification?: ClientDiscoveryForServiceSpecification;
}

/**
 * Class to represent shoebox service specification in json client discovery.
 */
export interface ClientDiscoveryForServiceSpecification {
  /**
   * List of log specifications of this operation.
   */
  logSpecifications?: ClientDiscoveryForLogSpecification[];
}

/**
 * Class to represent shoebox log specification in json client discovery.
 */
export interface ClientDiscoveryForLogSpecification {
  /**
   * Name of the log.
   */
  name?: string;
  /**
   * Localized display name
   */
  displayName?: string;
  /**
   * Blobs created in customer storage account per hour
   */
  blobDuration?: string;
}

/**
 * Tracked resource with location.
 */
export type PatchTrackedResource = Resource & {
  /**
   * Resource location.
   */
  location?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
};

/**
 * Patch Resource information, as returned by the resource provider.
 */
export type PatchVault = PatchTrackedResource & {
  /**
   * Properties of the vault.
   */
  properties?: VaultProperties;
  /**
   * Identifies the unique system identifier for each Azure resource.
   */
  sku?: Sku;
};

/**
 * Vault extended information.
 */
export type VaultExtendedInfoResource = Resource & {
  /**
   * Integrity key.
   */
  integrityKey?: string;
  /**
   * Encryption key.
   */
  encryptionKey?: string;
  /**
   * Encryption key thumbprint.
   */
  encryptionKeyThumbprint?: string;
  /**
   * Algorithm for Vault ExtendedInfo
   */
  algorithm?: string;
};

/**
 * Usage for vault.
 */
export interface VaultUsageList {
  /**
   * The list of usages for the given vault.
   */
  value?: VaultUsage[];
}

/**
 * Usages of a vault.
 */
export interface VaultUsage {
  /**
   * Unit of the usage.
   */
  unit?: UsagesUnit;
  /**
   * Quota period of usage.
   */
  quotaPeriod?: string;
  /**
   * Next reset time of usage.
   */
  nextResetTime?: Date;
  /**
   * Current value of usage.
   */
  currentValue?: number;
  /**
   * Limit of usage.
   */
  limit?: number;
  /**
   * Name of usage.
   */
  name?: NameInfo;
}

/**
 * The name of usage.
 */
export interface NameInfo {
  /**
   * Value of usage.
   */
  value?: string;
  /**
   * Localized value of usage.
   */
  localizedValue?: string;
}

/**
 * Certificate details representing the Vault credentials for AAD.
 */
export type ResourceCertificateAndAadDetails = ResourceCertificateDetails & {
  /**
   * AAD tenant authority.
   */
  aadAuthority: string;
  /**
   * AAD tenant Id.
   */
  aadTenantId: string;
  /**
   * AAD service principal clientId.
   */
  servicePrincipalClientId: string;
  /**
   * AAD service principal ObjectId.
   */
  servicePrincipalObjectId: string;
  /**
   * Azure Management Endpoint Audience.
   */
  azureManagementEndpointAudience: string;
};

/**
 * Certificate details representing the Vault credentials for ACS.
 */
export type ResourceCertificateAndAcsDetails = ResourceCertificateDetails & {
  /**
   * ACS namespace name - tenant for our service.
   */
  globalAcsNamespace: string;
  /**
   * Acs mgmt host name to connect to.
   */
  globalAcsHostName: string;
  /**
   * Global ACS namespace RP realm.
   */
  globalAcsRPRealm: string;
};
/**
 * Defines values for AuthType.
 */
export type AuthType =
  | "Invalid"
  | "ACS"
  | "AAD"
  | "AccessControlService"
  | "AzureActiveDirectory";
/**
 * Defines values for VaultUpgradeState.
 */
export type VaultUpgradeState =
  | "Unknown"
  | "InProgress"
  | "Upgraded"
  | "Failed";
/**
 * Defines values for TriggerType.
 */
export type TriggerType = "UserTriggered" | "ForcedUpgrade";
/**
 * Defines values for SkuName.
 */
export type SkuName = "Standard" | "RS0";
/**
 * Defines values for UsagesUnit.
 */
export type UsagesUnit =
  | "Count"
  | "Bytes"
  | "Seconds"
  | "Percent"
  | "CountPerSecond"
  | "BytesPerSecond";

/**
 * Contains response data for the create operation.
 */
export type VaultCertificatesCreateResponse = VaultCertificateResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VaultCertificateResponse;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ReplicationUsagesListResponse = ReplicationUsageList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReplicationUsageList;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type RecoveryServicesCheckNameAvailabilityResponse = CheckNameAvailabilityResultResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameAvailabilityResultResource;
  };
};

/**
 * Contains response data for the listBySubscriptionId operation.
 */
export type VaultsListBySubscriptionIdResponse = VaultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VaultList;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VaultsListByResourceGroupResponse = VaultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VaultList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VaultsGetResponse = Vault & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Vault;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VaultsCreateOrUpdateResponse = Vault & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Vault;
  };
};

/**
 * Contains response data for the update operation.
 */
export type VaultsUpdateResponse = Vault & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Vault;
  };
};

/**
 * Contains response data for the listBySubscriptionIdNext operation.
 */
export type VaultsListBySubscriptionIdNextResponse = VaultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VaultList;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VaultsListByResourceGroupNextResponse = VaultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VaultList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = ClientDiscoveryResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ClientDiscoveryResponse;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = ClientDiscoveryResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ClientDiscoveryResponse;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VaultExtendedInfoGetResponse = VaultExtendedInfoResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VaultExtendedInfoResource;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VaultExtendedInfoCreateOrUpdateResponse = VaultExtendedInfoResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VaultExtendedInfoResource;
  };
};

/**
 * Contains response data for the update operation.
 */
export type VaultExtendedInfoUpdateResponse = VaultExtendedInfoResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VaultExtendedInfoResource;
  };
};

/**
 * Contains response data for the listByVaults operation.
 */
export type UsagesListByVaultsResponse = VaultUsageList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VaultUsageList;
  };
};

/**
 * Optional parameters.
 */
export interface RecoveryServicesClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
