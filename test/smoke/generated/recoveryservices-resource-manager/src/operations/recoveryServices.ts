/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RecoveryServicesClient } from "../recoveryServicesClient";
import {
  CheckNameAvailabilityParameters,
  RecoveryServicesCheckNameAvailabilityResponse
} from "../models";

/**
 * Class representing a RecoveryServices.
 */
export class RecoveryServices {
  private readonly client: RecoveryServicesClient;

  /**
   * Initialize a new instance of the class RecoveryServices class.
   * @param client Reference to the service client
   */
  constructor(client: RecoveryServicesClient) {
    this.client = client;
  }

  /**
   * API to check for resource name availability.
   * A name is available if no other resource exists that has the same SubscriptionId, Resource Name and
   * Type
   * or if one or more such resources exist, each of these must be GC'd and their time of deletion be
   * more than 24 Hours Ago
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param input Contains information about Resource type and Resource name
   * @param location Location of the resource
   * @param options The options parameters.
   */
  checkNameAvailability(
    resourceGroupName: string,
    input: CheckNameAvailabilityParameters,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<RecoveryServicesCheckNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, input, location, options: operationOptions },
      checkNameAvailabilityOperationSpec
    ) as Promise<RecoveryServicesCheckNameAvailabilityResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/locations/{location}/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResultResource
    }
  },
  requestBody: Parameters.input,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
