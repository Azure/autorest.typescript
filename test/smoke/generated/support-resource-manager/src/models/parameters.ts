/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2020-04-01",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const serviceName: coreHttp.OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    serializedName: "serviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceName1: coreHttp.OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    serializedName: "serviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceName2: coreHttp.OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    serializedName: "serviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const problemClassificationName: coreHttp.OperationURLParameter = {
  parameterPath: "problemClassificationName",
  mapper: {
    serializedName: "problemClassificationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const checkNameAvailabilityInput: coreHttp.OperationParameter = {
  parameterPath: "checkNameAvailabilityInput",
  mapper: Mappers.CheckNameAvailabilityInput
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const top: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const supportTicketName: coreHttp.OperationURLParameter = {
  parameterPath: "supportTicketName",
  mapper: {
    serializedName: "supportTicketName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const updateSupportTicket: coreHttp.OperationParameter = {
  parameterPath: "updateSupportTicket",
  mapper: Mappers.UpdateSupportTicket
};

export const createSupportTicketParameters: coreHttp.OperationParameter = {
  parameterPath: "createSupportTicketParameters",
  mapper: Mappers.SupportTicketDetails
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const top1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const communicationName: coreHttp.OperationURLParameter = {
  parameterPath: "communicationName",
  mapper: {
    serializedName: "communicationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const createCommunicationParameters: coreHttp.OperationParameter = {
  parameterPath: "createCommunicationParameters",
  mapper: Mappers.CommunicationDetails
};
