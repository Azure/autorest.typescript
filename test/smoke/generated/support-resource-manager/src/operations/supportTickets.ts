/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftSupport } from "../microsoftSupport";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  CheckNameAvailabilityInput,
  SupportTicketsCheckNameAvailabilityResponse,
  SupportTicketsListOptionalParams,
  SupportTicketsListResponse,
  SupportTicketsGetResponse,
  UpdateSupportTicket,
  SupportTicketsUpdateResponse,
  SupportTicketDetails,
  SupportTicketsCreateResponse,
  SupportTicketsListNextOptionalParams,
  SupportTicketsListNextResponse
} from "../models";

/**
 * Class representing a SupportTickets.
 */
export class SupportTickets {
  private readonly client: MicrosoftSupport;

  /**
   * Initialize a new instance of the class SupportTickets class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftSupport) {
    this.client = client;
  }

  /**
   * Check the availability of a resource name. This API should be used to check the uniqueness of the
   * name for support ticket creation for the selected subscription.
   * @param checkNameAvailabilityInput Input to check.
   * @param options The options parameters.
   */
  checkNameAvailability(
    checkNameAvailabilityInput: CheckNameAvailabilityInput,
    options?: coreHttp.OperationOptions
  ): Promise<SupportTicketsCheckNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { checkNameAvailabilityInput, options: operationOptions },
      checkNameAvailabilityOperationSpec
    ) as Promise<SupportTicketsCheckNameAvailabilityResponse>;
  }

  /**
   * Lists all the support tickets for an Azure subscription. You can also filter the support tickets by
   * _Status_ or _CreatedDate_ using the $filter parameter. Output will be a paged result with
   * _nextLink_, using which you can retrieve the next set of support tickets. <br/><br/>Support ticket
   * data is available for 12 months after ticket creation. If a ticket was created more than 12 months
   * ago, a request for data might cause an error.
   * @param options The options parameters.
   */
  list(
    options?: SupportTicketsListOptionalParams
  ): Promise<SupportTicketsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<SupportTicketsListResponse>;
  }

  /**
   * Get ticket details for an Azure subscription. Support ticket data is available for 12 months after
   * ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an
   * error.
   * @param supportTicketName Support ticket name.
   * @param options The options parameters.
   */
  get(
    supportTicketName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SupportTicketsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { supportTicketName, options: operationOptions },
      getOperationSpec
    ) as Promise<SupportTicketsGetResponse>;
  }

  /**
   * This API allows you to update the severity level, ticket status, and your contact information in the
   * support ticket.<br/><br/>Note: The severity levels cannot be changed if a support ticket is actively
   * being worked upon by an Azure support engineer. In such a case, contact your support engineer to
   * request severity update by adding a new communication using the Communications
   * API.<br/><br/>Changing the ticket status to _closed_ is allowed only on an unassigned case. When an
   * engineer is actively working on the ticket, send your ticket closure request by sending a note to
   * your engineer.
   * @param supportTicketName Support ticket name.
   * @param updateSupportTicket UpdateSupportTicket object.
   * @param options The options parameters.
   */
  update(
    supportTicketName: string,
    updateSupportTicket: UpdateSupportTicket,
    options?: coreHttp.OperationOptions
  ): Promise<SupportTicketsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { supportTicketName, updateSupportTicket, options: operationOptions },
      updateOperationSpec
    ) as Promise<SupportTicketsUpdateResponse>;
  }

  /**
   * Creates a new support ticket for Subscription and Service limits (Quota), Technical, Billing, and
   * Subscription Management issues for the specified subscription. Learn the
   * [prerequisites](https://aka.ms/supportAPI) required to create a support ticket.<br/><br/>Always call
   * the Services and ProblemClassifications API to get the most recent set of services and problem
   * categories required for support ticket creation.<br/><br/>Adding attachments is not currently
   * supported via the API. To add a file to an existing support ticket, visit the [Manage support
   * ticket](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest)
   * page in the Azure portal, select the support ticket, and use the file upload control to add a new
   * file.<br/><br/>Providing consent to share diagnostic information with Azure support is currently not
   * supported via the API. The Azure support engineer working on your ticket will reach out to you for
   * consent if your issue requires gathering diagnostic information from your Azure
   * resources.<br/><br/>**Creating a support ticket for on-behalf-of**: Include
   * _x-ms-authorization-auxiliary_ header to provide an auxiliary token as per
   * [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant).
   * The primary token will be from the tenant for whom a support ticket is being raised against the
   * subscription, i.e. Cloud solution provider (CSP) customer tenant. The auxiliary token will be from
   * the Cloud solution provider (CSP) partner tenant.
   * @param supportTicketName Support ticket name.
   * @param createSupportTicketParameters Support ticket request payload.
   * @param options The options parameters.
   */
  async create(
    supportTicketName: string,
    createSupportTicketParameters: SupportTicketDetails,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<SupportTicketsCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      supportTicketName,
      createSupportTicketParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SupportTicketsCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: SupportTicketsListNextOptionalParams
  ): Promise<SupportTicketsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<SupportTicketsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityOutput
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  requestBody: Parameters.checkNameAvailabilityInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SupportTicketsListResult
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SupportTicketDetails
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.supportTicketName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SupportTicketDetails
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  requestBody: Parameters.updateSupportTicket,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.supportTicketName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SupportTicketDetails
    },
    201: {
      bodyMapper: Mappers.SupportTicketDetails
    },
    202: {
      bodyMapper: Mappers.SupportTicketDetails
    },
    204: {
      bodyMapper: Mappers.SupportTicketDetails
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  requestBody: Parameters.createSupportTicketParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.supportTicketName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SupportTicketsListResult
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  serializer
};
