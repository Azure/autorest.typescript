/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftSupport } from "../microsoftSupport";
import { ServicesListResponse, ServicesGetResponse } from "../models";

/**
 * Class representing a Services.
 */
export class Services {
  private readonly client: MicrosoftSupport;

  /**
   * Initialize a new instance of the class Services class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftSupport) {
    this.client = client;
  }

  /**
   * Lists all the Azure services available for support ticket creation. For **Technical** issues, select
   * the Service Id that maps to the Azure service/product as displayed in the **Services** drop-down
   * list on the Azure portal's [New support
   * request](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/overview) page.
   * Always use the service and its corresponding problem classification(s) obtained programmatically for
   * support ticket creation. This practice ensures that you always have the most recent set of service
   * and problem classification Ids.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<ServicesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<ServicesListResponse>;
  }

  /**
   * Gets a specific Azure service for support ticket creation.
   * @param serviceName Name of the Azure service.
   * @param options The options parameters.
   */
  get(
    serviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServicesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, options: operationOptions },
      getOperationSpec
    ) as Promise<ServicesGetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Support/services",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServicesListResult
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Support/services/{serviceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Service
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.serviceName],
  serializer
};
