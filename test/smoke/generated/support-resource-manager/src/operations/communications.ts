/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftSupport } from "../microsoftSupport";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  CheckNameAvailabilityInput,
  CommunicationsCheckNameAvailabilityResponse,
  CommunicationsListOptionalParams,
  CommunicationsListResponse,
  CommunicationsGetResponse,
  CommunicationDetails,
  CommunicationsCreateResponse,
  CommunicationsListNextOptionalParams,
  CommunicationsListNextResponse
} from "../models";

/**
 * Class representing a Communications.
 */
export class Communications {
  private readonly client: MicrosoftSupport;

  /**
   * Initialize a new instance of the class Communications class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftSupport) {
    this.client = client;
  }

  /**
   * Check the availability of a resource name. This API should be used to check the uniqueness of the
   * name for adding a new communication to the support ticket.
   * @param checkNameAvailabilityInput Input to check.
   * @param supportTicketName Support ticket name.
   * @param options The options parameters.
   */
  checkNameAvailability(
    checkNameAvailabilityInput: CheckNameAvailabilityInput,
    supportTicketName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CommunicationsCheckNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        checkNameAvailabilityInput,
        supportTicketName,
        options: operationOptions
      },
      checkNameAvailabilityOperationSpec
    ) as Promise<CommunicationsCheckNameAvailabilityResponse>;
  }

  /**
   * Lists all communications (attachments not included) for a support ticket. <br/></br> You can also
   * filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter
   * parameter. The only type of communication supported today is _Web_. Output will be a paged result
   * with _nextLink_, using which you can retrieve the next set of Communication results.
   * <br/><br/>Support ticket data is available for 12 months after ticket creation. If a ticket was
   * created more than 12 months ago, a request for data might cause an error.
   * @param supportTicketName Support ticket name.
   * @param options The options parameters.
   */
  list(
    supportTicketName: string,
    options?: CommunicationsListOptionalParams
  ): Promise<CommunicationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { supportTicketName, options: operationOptions },
      listOperationSpec
    ) as Promise<CommunicationsListResponse>;
  }

  /**
   * Returns communication details for a support ticket.
   * @param supportTicketName Support ticket name.
   * @param communicationName Communication name.
   * @param options The options parameters.
   */
  get(
    supportTicketName: string,
    communicationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CommunicationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { supportTicketName, communicationName, options: operationOptions },
      getOperationSpec
    ) as Promise<CommunicationsGetResponse>;
  }

  /**
   * Adds a new customer communication to an Azure support ticket.
   * @param supportTicketName Support ticket name.
   * @param communicationName Communication name.
   * @param createCommunicationParameters Communication object.
   * @param options The options parameters.
   */
  async create(
    supportTicketName: string,
    communicationName: string,
    createCommunicationParameters: CommunicationDetails,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<CommunicationsCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      supportTicketName,
      communicationName,
      createCommunicationParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CommunicationsCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * ListNext
   * @param supportTicketName Support ticket name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    supportTicketName: string,
    nextLink: string,
    options?: CommunicationsListNextOptionalParams
  ): Promise<CommunicationsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { supportTicketName, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<CommunicationsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityOutput
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  requestBody: Parameters.checkNameAvailabilityInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.supportTicketName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationsListResult
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top1, Parameters.filter1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.supportTicketName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationDetails
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.supportTicketName,
    Parameters.communicationName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationDetails
    },
    201: {
      bodyMapper: Mappers.CommunicationDetails
    },
    202: {
      bodyMapper: Mappers.CommunicationDetails
    },
    204: {
      bodyMapper: Mappers.CommunicationDetails
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  requestBody: Parameters.createCommunicationParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.supportTicketName,
    Parameters.communicationName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationsListResult
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top1, Parameters.filter1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.supportTicketName,
    Parameters.nextLink
  ],
  serializer
};
