/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataBoxManagementClient } from "../dataBoxManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  JobsListOptionalParams,
  JobsListResponse,
  JobsListByResourceGroupOptionalParams,
  JobsListByResourceGroupResponse,
  JobsGetOptionalParams,
  JobsGetResponse,
  JobResource,
  JobsCreateResponse,
  JobResourceUpdateParameter,
  JobsUpdateOptionalParams,
  JobsUpdateResponse,
  ShipmentPickUpRequest,
  JobsBookShipmentPickUpResponse,
  CancellationReason,
  JobsListCredentialsResponse,
  JobsListNextOptionalParams,
  JobsListNextResponse,
  JobsListByResourceGroupNextOptionalParams,
  JobsListByResourceGroupNextResponse
} from "../models";

/**
 * Class representing a Jobs.
 */
export class Jobs {
  private readonly client: DataBoxManagementClient;

  /**
   * Initialize a new instance of the class Jobs class.
   * @param client Reference to the service client
   */
  constructor(client: DataBoxManagementClient) {
    this.client = client;
  }

  /**
   * Lists all the jobs available under the subscription.
   * @param options The options parameters.
   */
  list(options?: JobsListOptionalParams): Promise<JobsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<JobsListResponse>;
  }

  /**
   * Lists all the jobs available under the given resource group.
   * @param resourceGroupName The Resource Group Name
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: JobsListByResourceGroupOptionalParams
  ): Promise<JobsListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<JobsListByResourceGroupResponse>;
  }

  /**
   * Gets information about the specified job.
   * @param resourceGroupName The Resource Group Name
   * @param jobName The name of the job Resource within the specified resource group. job names must be
   *                between 3 and 24 characters in length and use any alphanumeric and underscore only
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    jobName: string,
    options?: JobsGetOptionalParams
  ): Promise<JobsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, jobName, options: operationOptions },
      getOperationSpec
    ) as Promise<JobsGetResponse>;
  }

  /**
   * Creates a new job with the specified parameters. Existing job cannot be updated with this API and
   * should instead be updated with the Update job API.
   * @param resourceGroupName The Resource Group Name
   * @param jobName The name of the job Resource within the specified resource group. job names must be
   *                between 3 and 24 characters in length and use any alphanumeric and underscore only
   * @param jobResource Job details from request body.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    jobName: string,
    jobResource: JobResource,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<JobsCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      jobName,
      jobResource,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        JobsCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes a job.
   * @param resourceGroupName The Resource Group Name
   * @param jobName The name of the job Resource within the specified resource group. job names must be
   *                between 3 and 24 characters in length and use any alphanumeric and underscore only
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    jobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      jobName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Updates the properties of an existing job.
   * @param resourceGroupName The Resource Group Name
   * @param jobName The name of the job Resource within the specified resource group. job names must be
   *                between 3 and 24 characters in length and use any alphanumeric and underscore only
   * @param jobResourceUpdateParameter Job update parameters from request body.
   * @param options The options parameters.
   */
  async update(
    resourceGroupName: string,
    jobName: string,
    jobResourceUpdateParameter: JobResourceUpdateParameter,
    options?: JobsUpdateOptionalParams
  ): Promise<LROPoller<JobsUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      jobName,
      jobResourceUpdateParameter,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        JobsUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Book shipment pick up.
   * @param resourceGroupName The Resource Group Name
   * @param jobName The name of the job Resource within the specified resource group. job names must be
   *                between 3 and 24 characters in length and use any alphanumeric and underscore only
   * @param shipmentPickUpRequest Details of shipment pick up request.
   * @param options The options parameters.
   */
  bookShipmentPickUp(
    resourceGroupName: string,
    jobName: string,
    shipmentPickUpRequest: ShipmentPickUpRequest,
    options?: coreHttp.OperationOptions
  ): Promise<JobsBookShipmentPickUpResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobName,
        shipmentPickUpRequest,
        options: operationOptions
      },
      bookShipmentPickUpOperationSpec
    ) as Promise<JobsBookShipmentPickUpResponse>;
  }

  /**
   * CancelJob.
   * @param resourceGroupName The Resource Group Name
   * @param jobName The name of the job Resource within the specified resource group. job names must be
   *                between 3 and 24 characters in length and use any alphanumeric and underscore only
   * @param cancellationReason Reason for cancellation.
   * @param options The options parameters.
   */
  cancel(
    resourceGroupName: string,
    jobName: string,
    cancellationReason: CancellationReason,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobName,
        cancellationReason,
        options: operationOptions
      },
      cancelOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * This method gets the unencrypted secrets related to the job.
   * @param resourceGroupName The Resource Group Name
   * @param jobName The name of the job Resource within the specified resource group. job names must be
   *                between 3 and 24 characters in length and use any alphanumeric and underscore only
   * @param options The options parameters.
   */
  listCredentials(
    resourceGroupName: string,
    jobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<JobsListCredentialsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, jobName, options: operationOptions },
      listCredentialsOperationSpec
    ) as Promise<JobsListCredentialsResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: JobsListNextOptionalParams
  ): Promise<JobsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<JobsListNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The Resource Group Name
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: JobsListByResourceGroupNextOptionalParams
  ): Promise<JobsListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<JobsListByResourceGroupNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skipToken],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skipToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.JobResource
    },
    201: {
      bodyMapper: Mappers.JobResource
    },
    202: {
      bodyMapper: Mappers.JobResource
    },
    204: {
      bodyMapper: Mappers.JobResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.jobResource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.JobResource
    },
    201: {
      bodyMapper: Mappers.JobResource
    },
    202: {
      bodyMapper: Mappers.JobResource
    },
    204: {
      bodyMapper: Mappers.JobResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.jobResourceUpdateParameter,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.contentType, Parameters.ifMatch],
  serializer
};
const bookShipmentPickUpOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/bookShipmentPickUp",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ShipmentPickUpResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.shipmentPickUpRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const cancelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/cancel",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.cancellationReason,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listCredentialsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/listCredentials",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UnencryptedCredentialsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skipToken],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skipToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink1
  ],
  serializer
};
