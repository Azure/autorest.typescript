/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataBoxManagementClient } from "../dataBoxManagementClient";
import {
  AvailableSkuRequest,
  ServiceListAvailableSkusResponse,
  ServiceListAvailableSkusByResourceGroupResponse,
  ValidateAddress,
  ServiceValidateAddressResponse,
  ValidationRequestUnion,
  ServiceValidateInputsByResourceGroupResponse,
  ServiceValidateInputsResponse,
  RegionConfigurationRequest,
  ServiceRegionConfigurationResponse,
  ServiceListAvailableSkusNextResponse,
  ServiceListAvailableSkusByResourceGroupNextResponse
} from "../models";

/**
 * Class representing a Service.
 */
export class Service {
  private readonly client: DataBoxManagementClient;

  /**
   * Initialize a new instance of the class Service class.
   * @param client Reference to the service client
   */
  constructor(client: DataBoxManagementClient) {
    this.client = client;
  }

  /**
   * This method provides the list of available skus for the given subscription and location.
   * @param availableSkuRequest Filters for showing the available skus.
   * @param location The location of the resource
   * @param options The options parameters.
   */
  listAvailableSkus(
    availableSkuRequest: AvailableSkuRequest,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceListAvailableSkusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { availableSkuRequest, location, options: operationOptions },
      listAvailableSkusOperationSpec
    ) as Promise<ServiceListAvailableSkusResponse>;
  }

  /**
   * This method provides the list of available skus for the given subscription, resource group and
   * location.
   * @param resourceGroupName The Resource Group Name
   * @param availableSkuRequest Filters for showing the available skus.
   * @param location The location of the resource
   * @param options The options parameters.
   */
  listAvailableSkusByResourceGroup(
    resourceGroupName: string,
    availableSkuRequest: AvailableSkuRequest,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceListAvailableSkusByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        availableSkuRequest,
        location,
        options: operationOptions
      },
      listAvailableSkusByResourceGroupOperationSpec
    ) as Promise<ServiceListAvailableSkusByResourceGroupResponse>;
  }

  /**
   * [DEPRECATED NOTICE: This operation will soon be removed] This method validates the customer shipping
   * address and provide alternate addresses if any.
   * @param location The location of the resource
   * @param validateAddress Shipping address of the customer.
   * @param options The options parameters.
   */
  validateAddress(
    location: string,
    validateAddress: ValidateAddress,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceValidateAddressResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, validateAddress, options: operationOptions },
      validateAddressOperationSpec
    ) as Promise<ServiceValidateAddressResponse>;
  }

  /**
   * This method does all necessary pre-job creation validation under resource group.
   * @param resourceGroupName The Resource Group Name
   * @param location The location of the resource
   * @param validationRequest Inputs of the customer.
   * @param options The options parameters.
   */
  validateInputsByResourceGroup(
    resourceGroupName: string,
    location: string,
    validationRequest: ValidationRequestUnion,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceValidateInputsByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        location,
        validationRequest,
        options: operationOptions
      },
      validateInputsByResourceGroupOperationSpec
    ) as Promise<ServiceValidateInputsByResourceGroupResponse>;
  }

  /**
   * This method does all necessary pre-job creation validation under subscription.
   * @param location The location of the resource
   * @param validationRequest Inputs of the customer.
   * @param options The options parameters.
   */
  validateInputs(
    location: string,
    validationRequest: ValidationRequestUnion,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceValidateInputsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, validationRequest, options: operationOptions },
      validateInputsOperationSpec
    ) as Promise<ServiceValidateInputsResponse>;
  }

  /**
   * This API provides configuration details specific to given region/location.
   * @param location The location of the resource
   * @param regionConfigurationRequest Request body to get the configuration for the region.
   * @param options The options parameters.
   */
  regionConfiguration(
    location: string,
    regionConfigurationRequest: RegionConfigurationRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceRegionConfigurationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, regionConfigurationRequest, options: operationOptions },
      regionConfigurationOperationSpec
    ) as Promise<ServiceRegionConfigurationResponse>;
  }

  /**
   * ListAvailableSkusNext
   * @param availableSkuRequest Filters for showing the available skus.
   * @param location The location of the resource
   * @param nextLink The nextLink from the previous successful call to the ListAvailableSkus method.
   * @param options The options parameters.
   */
  listAvailableSkusNext(
    availableSkuRequest: AvailableSkuRequest,
    location: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceListAvailableSkusNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { availableSkuRequest, location, nextLink, options: operationOptions },
      listAvailableSkusNextOperationSpec
    ) as Promise<ServiceListAvailableSkusNextResponse>;
  }

  /**
   * ListAvailableSkusByResourceGroupNext
   * @param resourceGroupName The Resource Group Name
   * @param availableSkuRequest Filters for showing the available skus.
   * @param location The location of the resource
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAvailableSkusByResourceGroup method.
   * @param options The options parameters.
   */
  listAvailableSkusByResourceGroupNext(
    resourceGroupName: string,
    availableSkuRequest: AvailableSkuRequest,
    location: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceListAvailableSkusByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        availableSkuRequest,
        location,
        nextLink,
        options: operationOptions
      },
      listAvailableSkusByResourceGroupNextOperationSpec
    ) as Promise<ServiceListAvailableSkusByResourceGroupNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listAvailableSkusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/availableSkus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableSkusResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.availableSkuRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listAvailableSkusByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/availableSkus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableSkusResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.availableSkuRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const validateAddressOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateAddress",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AddressValidationOutput
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.validateAddress,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const validateInputsByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/validateInputs",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ValidationResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.validationRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const validateInputsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateInputs",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ValidationResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.validationRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const regionConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RegionConfigurationResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.regionConfigurationRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listAvailableSkusNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableSkusResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.availableSkuRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.nextLink2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listAvailableSkusByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableSkusResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.availableSkuRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.nextLink3
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
