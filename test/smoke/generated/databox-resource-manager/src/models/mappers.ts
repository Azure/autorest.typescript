/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationList: coreHttp.CompositeMapper = {
  serializedName: "OperationList",
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        type: {
          name: "any"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreHttp.CompositeMapper = {
  serializedName: "CloudError",
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudError" } }
        }
      }
    }
  }
};

export const JobResourceList: coreHttp.CompositeMapper = {
  serializedName: "JobResourceList",
  type: {
    name: "Composite",
    className: "JobResourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobResource" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["DataBox", "DataBoxDisk", "DataBoxHeavy"]
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobResource: coreHttp.CompositeMapper = {
  serializedName: "JobResource",
  type: {
    name: "Composite",
    className: "JobResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isCancellable: {
        serializedName: "properties.isCancellable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isDeletable: {
        serializedName: "properties.isDeletable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isShippingAddressEditable: {
        serializedName: "properties.isShippingAddressEditable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DeviceOrdered",
            "DevicePrepared",
            "Dispatched",
            "Delivered",
            "PickedUp",
            "AtAzureDC",
            "DataCopy",
            "Completed",
            "CompletedWithErrors",
            "Cancelled",
            "Failed_IssueReportedAtCustomer",
            "Failed_IssueDetectedAtAzureDC",
            "Aborted",
            "CompletedWithWarnings",
            "ReadyToDispatchFromAzureDC",
            "ReadyToReceiveAtAzureDC"
          ]
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Composite",
          className: "JobDetails"
        }
      },
      cancellationReason: {
        serializedName: "properties.cancellationReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deliveryType: {
        serializedName: "properties.deliveryType",
        type: {
          name: "Enum",
          allowedValues: ["NonScheduled", "Scheduled"]
        }
      },
      deliveryInfo: {
        serializedName: "deliveryInfo",
        type: {
          name: "Composite",
          className: "JobDeliveryInfo"
        }
      },
      isCancellableWithoutFee: {
        serializedName: "properties.isCancellableWithoutFee",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ErrorModel: coreHttp.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobDetails: coreHttp.CompositeMapper = {
  serializedName: "JobDetails",
  type: {
    name: "Composite",
    className: "JobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: {
      serializedName: "jobDetailsType",
      clientName: "jobDetailsType"
    },
    modelProperties: {
      expectedDataSizeInTerabytes: {
        serializedName: "expectedDataSizeInTerabytes",
        type: {
          name: "Number"
        }
      },
      jobStages: {
        serializedName: "jobStages",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobStages" } }
        }
      },
      contactDetails: {
        serializedName: "contactDetails",
        type: {
          name: "Composite",
          className: "ContactDetails"
        }
      },
      shippingAddress: {
        serializedName: "shippingAddress",
        type: {
          name: "Composite",
          className: "ShippingAddress"
        }
      },
      deliveryPackage: {
        serializedName: "deliveryPackage",
        type: {
          name: "Composite",
          className: "PackageShippingDetails"
        }
      },
      returnPackage: {
        serializedName: "returnPackage",
        type: {
          name: "Composite",
          className: "PackageShippingDetails"
        }
      },
      destinationAccountDetails: {
        serializedName: "destinationAccountDetails",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DestinationAccountDetails" }
          }
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobErrorDetails" } }
        }
      },
      jobDetailsType: {
        serializedName: "jobDetailsType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["DataBox", "DataBoxDisk", "DataBoxHeavy"]
        }
      },
      preferences: {
        serializedName: "preferences",
        type: {
          name: "Composite",
          className: "Preferences"
        }
      },
      copyLogDetails: {
        serializedName: "copyLogDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CopyLogDetails" } }
        }
      },
      reverseShipmentLabelSasKey: {
        serializedName: "reverseShipmentLabelSasKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      chainOfCustodySasKey: {
        serializedName: "chainOfCustodySasKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStages: coreHttp.CompositeMapper = {
  serializedName: "JobStages",
  type: {
    name: "Composite",
    className: "JobStages",
    modelProperties: {
      stageName: {
        serializedName: "stageName",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DeviceOrdered",
            "DevicePrepared",
            "Dispatched",
            "Delivered",
            "PickedUp",
            "AtAzureDC",
            "DataCopy",
            "Completed",
            "CompletedWithErrors",
            "Cancelled",
            "Failed_IssueReportedAtCustomer",
            "Failed_IssueDetectedAtAzureDC",
            "Aborted",
            "CompletedWithWarnings",
            "ReadyToDispatchFromAzureDC",
            "ReadyToReceiveAtAzureDC"
          ]
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stageStatus: {
        serializedName: "stageStatus",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "InProgress",
            "Succeeded",
            "Failed",
            "Cancelled",
            "Cancelling",
            "SucceededWithErrors"
          ]
        }
      },
      stageTime: {
        serializedName: "stageTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      jobStageDetails: {
        serializedName: "jobStageDetails",
        readOnly: true,
        type: {
          name: "any"
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobErrorDetails" } }
        }
      }
    }
  }
};

export const JobErrorDetails: coreHttp.CompositeMapper = {
  serializedName: "JobErrorDetails",
  type: {
    name: "Composite",
    className: "JobErrorDetails",
    modelProperties: {
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      exceptionMessage: {
        serializedName: "exceptionMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContactDetails: coreHttp.CompositeMapper = {
  serializedName: "ContactDetails",
  type: {
    name: "Composite",
    className: "ContactDetails",
    modelProperties: {
      contactName: {
        serializedName: "contactName",
        required: true,
        type: {
          name: "String"
        }
      },
      phone: {
        serializedName: "phone",
        required: true,
        type: {
          name: "String"
        }
      },
      phoneExtension: {
        serializedName: "phoneExtension",
        type: {
          name: "String"
        }
      },
      mobile: {
        serializedName: "mobile",
        type: {
          name: "String"
        }
      },
      emailList: {
        serializedName: "emailList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ContactDetailsEmailListItem"
          }
        }
      },
      notificationPreference: {
        serializedName: "notificationPreference",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NotificationPreference" }
          }
        }
      }
    }
  }
};

export const NotificationPreference: coreHttp.CompositeMapper = {
  serializedName: "NotificationPreference",
  type: {
    name: "Composite",
    className: "NotificationPreference",
    modelProperties: {
      stageName: {
        serializedName: "stageName",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DevicePrepared",
            "Dispatched",
            "Delivered",
            "PickedUp",
            "AtAzureDC",
            "DataCopy"
          ]
        }
      },
      sendNotification: {
        serializedName: "sendNotification",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ShippingAddress: coreHttp.CompositeMapper = {
  serializedName: "ShippingAddress",
  type: {
    name: "Composite",
    className: "ShippingAddress",
    modelProperties: {
      streetAddress1: {
        serializedName: "streetAddress1",
        required: true,
        type: {
          name: "String"
        }
      },
      streetAddress2: {
        serializedName: "streetAddress2",
        type: {
          name: "String"
        }
      },
      streetAddress3: {
        serializedName: "streetAddress3",
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        type: {
          name: "String"
        }
      },
      stateOrProvince: {
        serializedName: "stateOrProvince",
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "country",
        required: true,
        type: {
          name: "String"
        }
      },
      postalCode: {
        serializedName: "postalCode",
        required: true,
        type: {
          name: "String"
        }
      },
      zipExtendedCode: {
        serializedName: "zipExtendedCode",
        type: {
          name: "String"
        }
      },
      companyName: {
        serializedName: "companyName",
        type: {
          name: "String"
        }
      },
      addressType: {
        serializedName: "addressType",
        type: {
          name: "Enum",
          allowedValues: ["None", "Residential", "Commercial"]
        }
      }
    }
  }
};

export const PackageShippingDetails: coreHttp.CompositeMapper = {
  serializedName: "PackageShippingDetails",
  type: {
    name: "Composite",
    className: "PackageShippingDetails",
    modelProperties: {
      carrierName: {
        serializedName: "carrierName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      trackingId: {
        serializedName: "trackingId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      trackingUrl: {
        serializedName: "trackingUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DestinationAccountDetails: coreHttp.CompositeMapper = {
  serializedName: "DestinationAccountDetails",
  type: {
    name: "Composite",
    className: "DestinationAccountDetails",
    uberParent: "DestinationAccountDetails",
    polymorphicDiscriminator: {
      serializedName: "dataDestinationType",
      clientName: "dataDestinationType"
    },
    modelProperties: {
      dataDestinationType: {
        serializedName: "dataDestinationType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["StorageAccount", "ManagedDisk"]
        }
      },
      accountId: {
        serializedName: "accountId",
        type: {
          name: "String"
        }
      },
      sharePassword: {
        serializedName: "sharePassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Preferences: coreHttp.CompositeMapper = {
  serializedName: "Preferences",
  type: {
    name: "Composite",
    className: "Preferences",
    modelProperties: {
      preferredDataCenterRegion: {
        serializedName: "preferredDataCenterRegion",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PreferencesPreferredDataCenterRegionItem"
          }
        }
      },
      transportPreferences: {
        serializedName: "transportPreferences",
        type: {
          name: "Composite",
          className: "TransportPreferences"
        }
      }
    }
  }
};

export const TransportPreferences: coreHttp.CompositeMapper = {
  serializedName: "TransportPreferences",
  type: {
    name: "Composite",
    className: "TransportPreferences",
    modelProperties: {
      preferredShipmentType: {
        serializedName: "preferredShipmentType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["CustomerManaged", "MicrosoftManaged"]
        }
      }
    }
  }
};

export const CopyLogDetails: coreHttp.CompositeMapper = {
  serializedName: "CopyLogDetails",
  type: {
    name: "Composite",
    className: "CopyLogDetails",
    uberParent: "CopyLogDetails",
    polymorphicDiscriminator: {
      serializedName: "copyLogDetailsType",
      clientName: "copyLogDetailsType"
    },
    modelProperties: {
      copyLogDetailsType: {
        serializedName: "copyLogDetailsType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["DataBox", "DataBoxDisk", "DataBoxHeavy"]
        }
      }
    }
  }
};

export const JobDeliveryInfo: coreHttp.CompositeMapper = {
  serializedName: "JobDeliveryInfo",
  type: {
    name: "Composite",
    className: "JobDeliveryInfo",
    modelProperties: {
      scheduledDateTime: {
        serializedName: "scheduledDateTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AvailableSkuRequest: coreHttp.CompositeMapper = {
  serializedName: "AvailableSkuRequest",
  type: {
    name: "Composite",
    className: "AvailableSkuRequest",
    modelProperties: {
      transferType: {
        defaultValue: "ImportToAzure",
        serializedName: "transferType",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "country",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      skuNames: {
        serializedName: "skuNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["DataBox", "DataBoxDisk", "DataBoxHeavy"]
            },
            serializedName: "SkuName"
          }
        }
      }
    }
  }
};

export const AvailableSkusResult: coreHttp.CompositeMapper = {
  serializedName: "AvailableSkusResult",
  type: {
    name: "Composite",
    className: "AvailableSkusResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SkuInformation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuInformation: coreHttp.CompositeMapper = {
  serializedName: "SkuInformation",
  type: {
    name: "Composite",
    className: "SkuInformation",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      enabled: {
        serializedName: "enabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      destinationToServiceLocationMap: {
        serializedName: "properties.destinationToServiceLocationMap",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DestinationToServiceLocationMap"
            }
          }
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Composite",
          className: "SkuCapacity"
        }
      },
      costs: {
        serializedName: "properties.costs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SkuCost" } }
        }
      },
      apiVersions: {
        serializedName: "properties.apiVersions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SkuPropertiesApiVersionsItem"
          }
        }
      },
      disabledReason: {
        serializedName: "properties.disabledReason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Country",
            "Region",
            "Feature",
            "OfferType",
            "NoSubscriptionInfo"
          ]
        }
      },
      disabledReasonMessage: {
        serializedName: "properties.disabledReasonMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredFeature: {
        serializedName: "properties.requiredFeature",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DestinationToServiceLocationMap: coreHttp.CompositeMapper = {
  serializedName: "DestinationToServiceLocationMap",
  type: {
    name: "Composite",
    className: "DestinationToServiceLocationMap",
    modelProperties: {
      destinationLocation: {
        serializedName: "destinationLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceLocation: {
        serializedName: "serviceLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuCapacity: coreHttp.CompositeMapper = {
  serializedName: "SkuCapacity",
  type: {
    name: "Composite",
    className: "SkuCapacity",
    modelProperties: {
      usable: {
        serializedName: "usable",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maximum: {
        serializedName: "maximum",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuCost: coreHttp.CompositeMapper = {
  serializedName: "SkuCost",
  type: {
    name: "Composite",
    className: "SkuCost",
    modelProperties: {
      meterId: {
        serializedName: "meterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterType: {
        serializedName: "meterType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidationInputRequest: coreHttp.CompositeMapper = {
  serializedName: "ValidationInputRequest",
  type: {
    name: "Composite",
    className: "ValidationInputRequest",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator: {
      serializedName: "validationType",
      clientName: "validationType"
    },
    modelProperties: {
      validationType: {
        serializedName: "validationType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "ValidateAddress",
            "ValidateDataDestinationDetails",
            "ValidateSubscriptionIsAllowedToCreateJob",
            "ValidatePreferences",
            "ValidateCreateOrderLimit",
            "ValidateSkuAvailability"
          ]
        }
      }
    }
  }
};

export const ValidateAddress: coreHttp.CompositeMapper = {
  serializedName: "ValidateAddress",
  type: {
    name: "Composite",
    className: "ValidateAddress",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator:
      ValidationInputRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      shippingAddress: {
        serializedName: "shippingAddress",
        type: {
          name: "Composite",
          className: "ShippingAddress"
        }
      },
      deviceType: {
        serializedName: "deviceType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["DataBox", "DataBoxDisk", "DataBoxHeavy"]
        }
      },
      transportPreferences: {
        serializedName: "transportPreferences",
        type: {
          name: "Composite",
          className: "TransportPreferences"
        }
      }
    }
  }
};

export const AddressValidationOutput: coreHttp.CompositeMapper = {
  serializedName: "AddressValidationOutput",
  type: {
    name: "Composite",
    className: "AddressValidationOutput",
    modelProperties: {
      validationType: {
        serializedName: "properties.validationType",
        type: {
          name: "Enum",
          allowedValues: [
            "ValidateAddress",
            "ValidateDataDestinationDetails",
            "ValidateSubscriptionIsAllowedToCreateJob",
            "ValidatePreferences",
            "ValidateCreateOrderLimit",
            "ValidateSkuAvailability"
          ]
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      },
      validationStatus: {
        serializedName: "properties.validationStatus",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Ambiguous"]
        }
      },
      alternateAddresses: {
        serializedName: "properties.alternateAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ShippingAddress" } }
        }
      }
    }
  }
};

export const ValidationInputResponse: coreHttp.CompositeMapper = {
  serializedName: "ValidationInputResponse",
  type: {
    name: "Composite",
    className: "ValidationInputResponse",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator: {
      serializedName: "validationType",
      clientName: "validationType"
    },
    modelProperties: {
      validationType: {
        serializedName: "validationType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "ValidateAddress",
            "ValidateDataDestinationDetails",
            "ValidateSubscriptionIsAllowedToCreateJob",
            "ValidatePreferences",
            "ValidateCreateOrderLimit",
            "ValidateSkuAvailability"
          ]
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const AddressValidationProperties: coreHttp.CompositeMapper = {
  serializedName: "ValidateAddress",
  type: {
    name: "Composite",
    className: "AddressValidationProperties",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator:
      ValidationInputResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      validationStatus: {
        serializedName: "validationStatus",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Ambiguous"]
        }
      },
      alternateAddresses: {
        serializedName: "alternateAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ShippingAddress" } }
        }
      }
    }
  }
};

export const ValidationRequest: coreHttp.CompositeMapper = {
  serializedName: "ValidationRequest",
  type: {
    name: "Composite",
    className: "ValidationRequest",
    uberParent: "ValidationRequest",
    polymorphicDiscriminator: {
      serializedName: "validationCategory",
      clientName: "validationCategory"
    },
    modelProperties: {
      individualRequestDetails: {
        serializedName: "individualRequestDetails",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ValidationInputRequest" }
          }
        }
      },
      validationCategory: {
        defaultValue: "JobCreationValidation",
        serializedName: "validationCategory",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidationResponse: coreHttp.CompositeMapper = {
  serializedName: "ValidationResponse",
  type: {
    name: "Composite",
    className: "ValidationResponse",
    modelProperties: {
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "AllValidToProceed",
            "InputsRevisitRequired",
            "CertainInputValidationsSkipped"
          ]
        }
      },
      individualResponseDetails: {
        serializedName: "properties.individualResponseDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ValidationInputResponse" }
          }
        }
      }
    }
  }
};

export const JobResourceUpdateParameter: coreHttp.CompositeMapper = {
  serializedName: "JobResourceUpdateParameter",
  type: {
    name: "Composite",
    className: "JobResourceUpdateParameter",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Composite",
          className: "UpdateJobDetails"
        }
      },
      destinationAccountDetails: {
        serializedName: "properties.destinationAccountDetails",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DestinationAccountDetails" }
          }
        }
      }
    }
  }
};

export const UpdateJobDetails: coreHttp.CompositeMapper = {
  serializedName: "UpdateJobDetails",
  type: {
    name: "Composite",
    className: "UpdateJobDetails",
    modelProperties: {
      contactDetails: {
        serializedName: "contactDetails",
        type: {
          name: "Composite",
          className: "ContactDetails"
        }
      },
      shippingAddress: {
        serializedName: "shippingAddress",
        type: {
          name: "Composite",
          className: "ShippingAddress"
        }
      }
    }
  }
};

export const ShipmentPickUpRequest: coreHttp.CompositeMapper = {
  serializedName: "ShipmentPickUpRequest",
  type: {
    name: "Composite",
    className: "ShipmentPickUpRequest",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      shipmentLocation: {
        serializedName: "shipmentLocation",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShipmentPickUpResponse: coreHttp.CompositeMapper = {
  serializedName: "ShipmentPickUpResponse",
  type: {
    name: "Composite",
    className: "ShipmentPickUpResponse",
    modelProperties: {
      confirmationNumber: {
        serializedName: "confirmationNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      readyByTime: {
        serializedName: "readyByTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CancellationReason: coreHttp.CompositeMapper = {
  serializedName: "CancellationReason",
  type: {
    name: "Composite",
    className: "CancellationReason",
    modelProperties: {
      reason: {
        serializedName: "reason",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnencryptedCredentialsList: coreHttp.CompositeMapper = {
  serializedName: "UnencryptedCredentialsList",
  type: {
    name: "Composite",
    className: "UnencryptedCredentialsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "UnencryptedCredentials" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnencryptedCredentials: coreHttp.CompositeMapper = {
  serializedName: "UnencryptedCredentials",
  type: {
    name: "Composite",
    className: "UnencryptedCredentials",
    modelProperties: {
      jobName: {
        serializedName: "jobName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      jobSecrets: {
        serializedName: "jobSecrets",
        type: {
          name: "Composite",
          className: "JobSecrets"
        }
      }
    }
  }
};

export const JobSecrets: coreHttp.CompositeMapper = {
  serializedName: "JobSecrets",
  type: {
    name: "Composite",
    className: "JobSecrets",
    uberParent: "JobSecrets",
    polymorphicDiscriminator: {
      serializedName: "jobSecretsType",
      clientName: "jobSecretsType"
    },
    modelProperties: {
      jobSecretsType: {
        serializedName: "jobSecretsType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["DataBox", "DataBoxDisk", "DataBoxHeavy"]
        }
      },
      dcAccessSecurityCode: {
        serializedName: "dcAccessSecurityCode",
        type: {
          name: "Composite",
          className: "DcAccessSecurityCode"
        }
      }
    }
  }
};

export const DcAccessSecurityCode: coreHttp.CompositeMapper = {
  serializedName: "DcAccessSecurityCode",
  type: {
    name: "Composite",
    className: "DcAccessSecurityCode",
    modelProperties: {
      forwardDcAccessCode: {
        serializedName: "forwardDcAccessCode",
        type: {
          name: "String"
        }
      },
      reverseDcAccessCode: {
        serializedName: "reverseDcAccessCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegionConfigurationRequest: coreHttp.CompositeMapper = {
  serializedName: "RegionConfigurationRequest",
  type: {
    name: "Composite",
    className: "RegionConfigurationRequest",
    modelProperties: {
      scheduleAvailabilityRequest: {
        serializedName: "scheduleAvailabilityRequest",
        type: {
          name: "Composite",
          className: "ScheduleAvailabilityRequest"
        }
      },
      transportAvailabilityRequest: {
        serializedName: "transportAvailabilityRequest",
        type: {
          name: "Composite",
          className: "TransportAvailabilityRequest"
        }
      }
    }
  }
};

export const ScheduleAvailabilityRequest: coreHttp.CompositeMapper = {
  serializedName: "ScheduleAvailabilityRequest",
  type: {
    name: "Composite",
    className: "ScheduleAvailabilityRequest",
    uberParent: "ScheduleAvailabilityRequest",
    polymorphicDiscriminator: {
      serializedName: "skuName",
      clientName: "skuName"
    },
    modelProperties: {
      storageLocation: {
        serializedName: "storageLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "skuName",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["DataBox", "DataBoxDisk", "DataBoxHeavy"]
        }
      }
    }
  }
};

export const TransportAvailabilityRequest: coreHttp.CompositeMapper = {
  serializedName: "TransportAvailabilityRequest",
  type: {
    name: "Composite",
    className: "TransportAvailabilityRequest",
    modelProperties: {
      skuName: {
        serializedName: "skuName",
        type: {
          name: "Enum",
          allowedValues: ["DataBox", "DataBoxDisk", "DataBoxHeavy"]
        }
      }
    }
  }
};

export const RegionConfigurationResponse: coreHttp.CompositeMapper = {
  serializedName: "RegionConfigurationResponse",
  type: {
    name: "Composite",
    className: "RegionConfigurationResponse",
    modelProperties: {
      scheduleAvailabilityResponse: {
        serializedName: "scheduleAvailabilityResponse",
        type: {
          name: "Composite",
          className: "ScheduleAvailabilityResponse"
        }
      },
      transportAvailabilityResponse: {
        serializedName: "transportAvailabilityResponse",
        type: {
          name: "Composite",
          className: "TransportAvailabilityResponse"
        }
      }
    }
  }
};

export const ScheduleAvailabilityResponse: coreHttp.CompositeMapper = {
  serializedName: "ScheduleAvailabilityResponse",
  type: {
    name: "Composite",
    className: "ScheduleAvailabilityResponse",
    modelProperties: {
      availableDates: {
        serializedName: "availableDates",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "DateTime" },
            serializedName: "ScheduleAvailabilityResponseAvailableDatesItem"
          }
        }
      }
    }
  }
};

export const TransportAvailabilityResponse: coreHttp.CompositeMapper = {
  serializedName: "TransportAvailabilityResponse",
  type: {
    name: "Composite",
    className: "TransportAvailabilityResponse",
    modelProperties: {
      transportAvailabilityDetails: {
        serializedName: "transportAvailabilityDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TransportAvailabilityDetails"
            }
          }
        }
      }
    }
  }
};

export const TransportAvailabilityDetails: coreHttp.CompositeMapper = {
  serializedName: "TransportAvailabilityDetails",
  type: {
    name: "Composite",
    className: "TransportAvailabilityDetails",
    modelProperties: {
      shipmentType: {
        serializedName: "shipmentType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["CustomerManaged", "MicrosoftManaged"]
        }
      }
    }
  }
};

export const AccountCredentialDetails: coreHttp.CompositeMapper = {
  serializedName: "AccountCredentialDetails",
  type: {
    name: "Composite",
    className: "AccountCredentialDetails",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataDestinationType: {
        serializedName: "dataDestinationType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["StorageAccount", "ManagedDisk"]
        }
      },
      accountConnectionString: {
        serializedName: "accountConnectionString",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      shareCredentialDetails: {
        serializedName: "shareCredentialDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ShareCredentialDetails" }
          }
        }
      }
    }
  }
};

export const ShareCredentialDetails: coreHttp.CompositeMapper = {
  serializedName: "ShareCredentialDetails",
  type: {
    name: "Composite",
    className: "ShareCredentialDetails",
    modelProperties: {
      shareName: {
        serializedName: "shareName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      shareType: {
        serializedName: "shareType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "UnknownType",
            "HCS",
            "BlockBlob",
            "PageBlob",
            "AzureFile",
            "ManagedDisk"
          ]
        }
      },
      userName: {
        serializedName: "userName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedAccessProtocols: {
        serializedName: "supportedAccessProtocols",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Enum", allowedValues: ["SMB", "NFS"] },
            serializedName: "AccessProtocol"
          }
        }
      }
    }
  }
};

export const ApplianceNetworkConfiguration: coreHttp.CompositeMapper = {
  serializedName: "ApplianceNetworkConfiguration",
  type: {
    name: "Composite",
    className: "ApplianceNetworkConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArmBaseObject: coreHttp.CompositeMapper = {
  serializedName: "ArmBaseObject",
  type: {
    name: "Composite",
    className: "ArmBaseObject",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CopyProgress: coreHttp.CompositeMapper = {
  serializedName: "CopyProgress",
  type: {
    name: "Composite",
    className: "CopyProgress",
    modelProperties: {
      storageAccountName: {
        serializedName: "storageAccountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataDestinationType: {
        serializedName: "dataDestinationType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["StorageAccount", "ManagedDisk"]
        }
      },
      accountId: {
        serializedName: "accountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bytesSentToCloud: {
        serializedName: "bytesSentToCloud",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalBytesToProcess: {
        serializedName: "totalBytesToProcess",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      filesProcessed: {
        serializedName: "filesProcessed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalFilesToProcess: {
        serializedName: "totalFilesToProcess",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      invalidFilesProcessed: {
        serializedName: "invalidFilesProcessed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      invalidFileBytesUploaded: {
        serializedName: "invalidFileBytesUploaded",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      renamedContainerCount: {
        serializedName: "renamedContainerCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      filesErroredOut: {
        serializedName: "filesErroredOut",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateOrderLimitForSubscriptionValidationRequest: coreHttp.CompositeMapper = {
  serializedName: "ValidateCreateOrderLimit",
  type: {
    name: "Composite",
    className: "CreateOrderLimitForSubscriptionValidationRequest",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator:
      ValidationInputRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      deviceType: {
        serializedName: "deviceType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["DataBox", "DataBoxDisk", "DataBoxHeavy"]
        }
      }
    }
  }
};

export const CreateOrderLimitForSubscriptionValidationResponseProperties: coreHttp.CompositeMapper = {
  serializedName: "ValidateCreateOrderLimit",
  type: {
    name: "Composite",
    className: "CreateOrderLimitForSubscriptionValidationResponseProperties",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator:
      ValidationInputResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Skipped"]
        }
      }
    }
  }
};

export const DataBoxAccountCopyLogDetails: coreHttp.CompositeMapper = {
  serializedName: "DataBox",
  type: {
    name: "Composite",
    className: "DataBoxAccountCopyLogDetails",
    uberParent: "CopyLogDetails",
    polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...CopyLogDetails.type.modelProperties,
      accountName: {
        serializedName: "accountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      copyLogLink: {
        serializedName: "copyLogLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxDiskCopyLogDetails: coreHttp.CompositeMapper = {
  serializedName: "DataBoxDisk",
  type: {
    name: "Composite",
    className: "DataBoxDiskCopyLogDetails",
    uberParent: "CopyLogDetails",
    polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...CopyLogDetails.type.modelProperties,
      diskSerialNumber: {
        serializedName: "diskSerialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorLogLink: {
        serializedName: "errorLogLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      verboseLogLink: {
        serializedName: "verboseLogLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxDiskCopyProgress: coreHttp.CompositeMapper = {
  serializedName: "DataBoxDiskCopyProgress",
  type: {
    name: "Composite",
    className: "DataBoxDiskCopyProgress",
    modelProperties: {
      serialNumber: {
        serializedName: "serialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bytesCopied: {
        serializedName: "bytesCopied",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      percentComplete: {
        serializedName: "percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "NotStarted",
            "InProgress",
            "Completed",
            "CompletedWithErrors",
            "Failed",
            "NotReturned",
            "HardwareError",
            "DeviceFormatted",
            "DeviceMetadataModified",
            "StorageAccountNotAccessible",
            "UnsupportedData"
          ]
        }
      }
    }
  }
};

export const DataBoxDiskJobDetails: coreHttp.CompositeMapper = {
  serializedName: "DataBoxDisk",
  type: {
    name: "Composite",
    className: "DataBoxDiskJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      preferredDisks: {
        serializedName: "preferredDisks",
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" }, serializedName: "Integer" }
        }
      },
      copyProgress: {
        serializedName: "copyProgress",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DataBoxDiskCopyProgress" }
          }
        }
      },
      disksAndSizeDetails: {
        serializedName: "disksAndSizeDetails",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" }, serializedName: "Integer" }
        }
      },
      passkey: {
        serializedName: "passkey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxDiskJobSecrets: coreHttp.CompositeMapper = {
  serializedName: "DataBoxDisk",
  type: {
    name: "Composite",
    className: "DataBoxDiskJobSecrets",
    uberParent: "JobSecrets",
    polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobSecrets.type.modelProperties,
      diskSecrets: {
        serializedName: "diskSecrets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DiskSecret" } }
        }
      },
      passKey: {
        serializedName: "passKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isPasskeyUserDefined: {
        serializedName: "isPasskeyUserDefined",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DiskSecret: coreHttp.CompositeMapper = {
  serializedName: "DiskSecret",
  type: {
    name: "Composite",
    className: "DiskSecret",
    modelProperties: {
      diskSerialNumber: {
        serializedName: "diskSerialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bitLockerKey: {
        serializedName: "bitLockerKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxHeavyAccountCopyLogDetails: coreHttp.CompositeMapper = {
  serializedName: "DataBoxHeavy",
  type: {
    name: "Composite",
    className: "DataBoxHeavyAccountCopyLogDetails",
    uberParent: "CopyLogDetails",
    polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...CopyLogDetails.type.modelProperties,
      accountName: {
        serializedName: "accountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      copyLogLink: {
        serializedName: "copyLogLink",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "DataBoxHeavyAccountCopyLogDetailsCopyLogLinkItem"
          }
        }
      }
    }
  }
};

export const DataBoxHeavyJobDetails: coreHttp.CompositeMapper = {
  serializedName: "DataBoxHeavy",
  type: {
    name: "Composite",
    className: "DataBoxHeavyJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      copyProgress: {
        serializedName: "copyProgress",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CopyProgress" } }
        }
      },
      devicePassword: {
        serializedName: "devicePassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxHeavyJobSecrets: coreHttp.CompositeMapper = {
  serializedName: "DataBoxHeavy",
  type: {
    name: "Composite",
    className: "DataBoxHeavyJobSecrets",
    uberParent: "JobSecrets",
    polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobSecrets.type.modelProperties,
      cabinetPodSecrets: {
        serializedName: "cabinetPodSecrets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DataBoxHeavySecret" }
          }
        }
      }
    }
  }
};

export const DataBoxHeavySecret: coreHttp.CompositeMapper = {
  serializedName: "DataBoxHeavySecret",
  type: {
    name: "Composite",
    className: "DataBoxHeavySecret",
    modelProperties: {
      deviceSerialNumber: {
        serializedName: "deviceSerialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      devicePassword: {
        serializedName: "devicePassword",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkConfigurations: {
        serializedName: "networkConfigurations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplianceNetworkConfiguration"
            }
          }
        }
      },
      encodedValidationCertPubKey: {
        serializedName: "encodedValidationCertPubKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountCredentialDetails: {
        serializedName: "accountCredentialDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AccountCredentialDetails" }
          }
        }
      }
    }
  }
};

export const DataBoxJobDetails: coreHttp.CompositeMapper = {
  serializedName: "DataBox",
  type: {
    name: "Composite",
    className: "DataBoxJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      copyProgress: {
        serializedName: "copyProgress",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CopyProgress" } }
        }
      },
      devicePassword: {
        serializedName: "devicePassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataboxJobSecrets: coreHttp.CompositeMapper = {
  serializedName: "DataBox",
  type: {
    name: "Composite",
    className: "DataboxJobSecrets",
    uberParent: "JobSecrets",
    polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobSecrets.type.modelProperties,
      podSecrets: {
        serializedName: "podSecrets",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DataBoxSecret" } }
        }
      }
    }
  }
};

export const DataBoxSecret: coreHttp.CompositeMapper = {
  serializedName: "DataBoxSecret",
  type: {
    name: "Composite",
    className: "DataBoxSecret",
    modelProperties: {
      deviceSerialNumber: {
        serializedName: "deviceSerialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      devicePassword: {
        serializedName: "devicePassword",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkConfigurations: {
        serializedName: "networkConfigurations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplianceNetworkConfiguration"
            }
          }
        }
      },
      encodedValidationCertPubKey: {
        serializedName: "encodedValidationCertPubKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountCredentialDetails: {
        serializedName: "accountCredentialDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AccountCredentialDetails" }
          }
        }
      }
    }
  }
};

export const DataBoxScheduleAvailabilityRequest: coreHttp.CompositeMapper = {
  serializedName: "DataBox",
  type: {
    name: "Composite",
    className: "DataBoxScheduleAvailabilityRequest",
    uberParent: "ScheduleAvailabilityRequest",
    polymorphicDiscriminator:
      ScheduleAvailabilityRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ScheduleAvailabilityRequest.type.modelProperties
    }
  }
};

export const DataDestinationDetailsValidationRequest: coreHttp.CompositeMapper = {
  serializedName: "ValidateDataDestinationDetails",
  type: {
    name: "Composite",
    className: "DataDestinationDetailsValidationRequest",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator:
      ValidationInputRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      destinationAccountDetails: {
        serializedName: "destinationAccountDetails",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DestinationAccountDetails" }
          }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataDestinationDetailsValidationResponseProperties: coreHttp.CompositeMapper = {
  serializedName: "ValidateDataDestinationDetails",
  type: {
    name: "Composite",
    className: "DataDestinationDetailsValidationResponseProperties",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator:
      ValidationInputResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Skipped"]
        }
      }
    }
  }
};

export const DestinationManagedDiskDetails: coreHttp.CompositeMapper = {
  serializedName: "ManagedDisk",
  type: {
    name: "Composite",
    className: "DestinationManagedDiskDetails",
    uberParent: "DestinationAccountDetails",
    polymorphicDiscriminator:
      DestinationAccountDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...DestinationAccountDetails.type.modelProperties,
      resourceGroupId: {
        serializedName: "resourceGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      stagingStorageAccountId: {
        serializedName: "stagingStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DestinationStorageAccountDetails: coreHttp.CompositeMapper = {
  serializedName: "StorageAccount",
  type: {
    name: "Composite",
    className: "DestinationStorageAccountDetails",
    uberParent: "DestinationAccountDetails",
    polymorphicDiscriminator:
      DestinationAccountDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...DestinationAccountDetails.type.modelProperties,
      storageAccountId: {
        serializedName: "storageAccountId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskScheduleAvailabilityRequest: coreHttp.CompositeMapper = {
  serializedName: "DataBoxDisk",
  type: {
    name: "Composite",
    className: "DiskScheduleAvailabilityRequest",
    uberParent: "ScheduleAvailabilityRequest",
    polymorphicDiscriminator:
      ScheduleAvailabilityRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ScheduleAvailabilityRequest.type.modelProperties,
      expectedDataSizeInTerabytes: {
        serializedName: "expectedDataSizeInTerabytes",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HeavyScheduleAvailabilityRequest: coreHttp.CompositeMapper = {
  serializedName: "DataBoxHeavy",
  type: {
    name: "Composite",
    className: "HeavyScheduleAvailabilityRequest",
    uberParent: "ScheduleAvailabilityRequest",
    polymorphicDiscriminator:
      ScheduleAvailabilityRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ScheduleAvailabilityRequest.type.modelProperties
    }
  }
};

export const PreferencesValidationRequest: coreHttp.CompositeMapper = {
  serializedName: "ValidatePreferences",
  type: {
    name: "Composite",
    className: "PreferencesValidationRequest",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator:
      ValidationInputRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      preference: {
        serializedName: "preference",
        type: {
          name: "Composite",
          className: "Preferences"
        }
      },
      deviceType: {
        serializedName: "deviceType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["DataBox", "DataBoxDisk", "DataBoxHeavy"]
        }
      }
    }
  }
};

export const PreferencesValidationResponseProperties: coreHttp.CompositeMapper = {
  serializedName: "ValidatePreferences",
  type: {
    name: "Composite",
    className: "PreferencesValidationResponseProperties",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator:
      ValidationInputResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Skipped"]
        }
      }
    }
  }
};

export const SkuAvailabilityValidationRequest: coreHttp.CompositeMapper = {
  serializedName: "ValidateSkuAvailability",
  type: {
    name: "Composite",
    className: "SkuAvailabilityValidationRequest",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator:
      ValidationInputRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      deviceType: {
        serializedName: "deviceType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["DataBox", "DataBoxDisk", "DataBoxHeavy"]
        }
      },
      transferType: {
        defaultValue: "ImportToAzure",
        serializedName: "transferType",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "country",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuAvailabilityValidationResponseProperties: coreHttp.CompositeMapper = {
  serializedName: "ValidateSkuAvailability",
  type: {
    name: "Composite",
    className: "SkuAvailabilityValidationResponseProperties",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator:
      ValidationInputResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Skipped"]
        }
      }
    }
  }
};

export const SubscriptionIsAllowedToCreateJobValidationRequest: coreHttp.CompositeMapper = {
  serializedName: "ValidateSubscriptionIsAllowedToCreateJob",
  type: {
    name: "Composite",
    className: "SubscriptionIsAllowedToCreateJobValidationRequest",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator:
      ValidationInputRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties
    }
  }
};

export const SubscriptionIsAllowedToCreateJobValidationResponseProperties: coreHttp.CompositeMapper = {
  serializedName: "ValidateSubscriptionIsAllowedToCreateJob",
  type: {
    name: "Composite",
    className: "SubscriptionIsAllowedToCreateJobValidationResponseProperties",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator:
      ValidationInputResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Skipped"]
        }
      }
    }
  }
};

export const CreateJobValidations: coreHttp.CompositeMapper = {
  serializedName: "JobCreationValidation",
  type: {
    name: "Composite",
    className: "CreateJobValidations",
    uberParent: "ValidationRequest",
    polymorphicDiscriminator: ValidationRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationRequest.type.modelProperties
    }
  }
};

export let discriminators = {
  JobDetails: JobDetails,
  DestinationAccountDetails: DestinationAccountDetails,
  CopyLogDetails: CopyLogDetails,
  ValidationInputRequest: ValidationInputRequest,
  "ValidationInputRequest.ValidateAddress": ValidateAddress,
  ValidationInputResponse: ValidationInputResponse,
  "ValidationInputResponse.ValidateAddress": AddressValidationProperties,
  ValidationRequest: ValidationRequest,
  JobSecrets: JobSecrets,
  ScheduleAvailabilityRequest: ScheduleAvailabilityRequest,
  "ValidationInputRequest.ValidateCreateOrderLimit": CreateOrderLimitForSubscriptionValidationRequest,
  "ValidationInputResponse.ValidateCreateOrderLimit": CreateOrderLimitForSubscriptionValidationResponseProperties,
  "CopyLogDetails.DataBox": DataBoxAccountCopyLogDetails,
  "CopyLogDetails.DataBoxDisk": DataBoxDiskCopyLogDetails,
  "JobDetails.DataBoxDisk": DataBoxDiskJobDetails,
  "JobSecrets.DataBoxDisk": DataBoxDiskJobSecrets,
  "CopyLogDetails.DataBoxHeavy": DataBoxHeavyAccountCopyLogDetails,
  "JobDetails.DataBoxHeavy": DataBoxHeavyJobDetails,
  "JobSecrets.DataBoxHeavy": DataBoxHeavyJobSecrets,
  "JobDetails.DataBox": DataBoxJobDetails,
  "JobSecrets.DataBox": DataboxJobSecrets,
  "ScheduleAvailabilityRequest.DataBox": DataBoxScheduleAvailabilityRequest,
  "ValidationInputRequest.ValidateDataDestinationDetails": DataDestinationDetailsValidationRequest,
  "ValidationInputResponse.ValidateDataDestinationDetails": DataDestinationDetailsValidationResponseProperties,
  "DestinationAccountDetails.ManagedDisk": DestinationManagedDiskDetails,
  "DestinationAccountDetails.StorageAccount": DestinationStorageAccountDetails,
  "ScheduleAvailabilityRequest.DataBoxDisk": DiskScheduleAvailabilityRequest,
  "ScheduleAvailabilityRequest.DataBoxHeavy": HeavyScheduleAvailabilityRequest,
  "ValidationInputRequest.ValidatePreferences": PreferencesValidationRequest,
  "ValidationInputResponse.ValidatePreferences": PreferencesValidationResponseProperties,
  "ValidationInputRequest.ValidateSkuAvailability": SkuAvailabilityValidationRequest,
  "ValidationInputResponse.ValidateSkuAvailability": SkuAvailabilityValidationResponseProperties,
  "ValidationInputRequest.ValidateSubscriptionIsAllowedToCreateJob": SubscriptionIsAllowedToCreateJobValidationRequest,
  "ValidationInputResponse.ValidateSubscriptionIsAllowedToCreateJob": SubscriptionIsAllowedToCreateJobValidationResponseProperties,
  "ValidationRequest.JobCreationValidation": CreateJobValidations
};
