/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * List of Operations
 */
export interface OperationList {
  /**
   * Array of operations
   */
  value?: Operation[];
  /**
   * URI to the next page of operations.
   */
  nextLink?: string;
}

/**
 * Describes the supported REST operation.
 */
export interface Operation {
  /**
   * The name of the operation being performed on this particular object. This name should match the name that appears in RBAC or the event service.
   */
  name?: string;
  /**
   * Contains the localized display information for this particular operation or action.
   */
  display?: Display;
  /**
   * Origin for the operation. Eg. User, System
   */
  origin?: string;
}

/**
 * Contains the localized display information for this particular operation or action.
 */
export interface Display {
  /**
   * The localized, friendly version of the resource provider name. The provider name is expected to include the name of the publisher or company responsible. The provider name format should use title case and begin with "Microsoft" for first-party services. For example, the provider name may be"Microsoft Monitoring Insights" or "Microsoft Compute."
   */
  provider?: string;
  /**
   * The localized, friendly version of the resource type related to this action or operation; the resource type should match the public documentation for the resource provider.
   */
  resource?: string;
  /**
   * The localized, friendly name for the operation. Use the name as it will displayed to the user.
   */
  operation?: string;
  /**
   * The localized, friendly description for the operation. The description will be displayed to the user. It should be thorough and concise for used in both tooltips and detailed views.
   */
  description?: string;
}

/**
 * List of action plans
 */
export interface ActionPlanList {
  /**
   * Array of action plans.
   */
  value?: ActionPlanResourceEntity[];
  /**
   * Continuation token
   */
  nextLink?: string;
}

/**
 * Object model of azure resource manager base.
 */
export interface Resource {
  /**
   * ID of the resource.
   */
  readonly id?: string;
  /**
   * Name of the resource.
   */
  readonly name?: string;
  /**
   * Type of Resource.
   */
  readonly type?: string;
  /**
   * Location of the resource.
   */
  location?: string;
}

/**
 * Action Plan Resource Entity
 */
export type ActionPlanResourceEntity = Resource & {
  /**
   * Entity tag of the resource
   */
  eTag?: string;
  /**
   * Action plan uri
   */
  actionPlanUri?: string;
  /**
   * The target resource group name
   */
  resourceGroupName?: string;
  /**
   * The target subscription identifier
   */
  subscriptionId?: string;
  /**
   * The deployment parameters in JToken format
   */
  parameters?: JTokenString;
  /**
   * The deployment start time
   */
  startTime?: Date;
  /**
   * The deployment end time
   */
  endTime?: Date;
  /**
   * Error Information
   */
  error?: ExtendedErrorInfo;
  /**
   * The provisioning state
   */
  provisioningState?: string;
  /**
   * Action plan instance identifier
   */
  actionPlanInstanceId?: string;
  /**
   * Blob container name storing the deployment data
   */
  blobContainerName?: string;
};

/**
 * Error information
 */
export interface JTokenString {
  /**
   * Parameters as JToken string
   */
  value?: string;
}

/**
 * Error information
 */
export interface ExtendedErrorInfo {
  /**
   * Error Code
   */
  code?: string;
  /**
   * Error Message
   */
  message?: string;
  /**
   * Error message details
   */
  details?: ExtendedErrorInfo;
}

/**
 * List of action plan operations
 */
export interface ActionPlanOperationsList {
  /**
   * Array of action plan operations.
   */
  value?: ActionPlanOperationResourceEntity[];
  /**
   * Continuation token
   */
  nextLink?: string;
}

/**
 * Action Plan Operation Resource Entity
 */
export type ActionPlanOperationResourceEntity = Resource & {
  /**
   * Entity tag of the resource
   */
  eTag?: string;
  /**
   * The operation title
   */
  title?: string;
  /**
   * The operation description
   */
  description?: string;
  /**
   * The action plan operation type
   */
  typePropertiesType?: string;
  /**
   * The target subscription identifier
   */
  subscriptionId?: string;
  /**
   * The deployment parameters in JToken format
   */
  parameters?: any;
  /**
   * The deployment start time
   */
  startTime?: Date;
  /**
   * The deployment end time
   */
  endTime?: Date;
  /**
   * The action plan operation outputs in JToken format
   */
  outputs?: any;
  /**
   * Error Information
   */
  error?: ExtendedErrorInfo;
  /**
   * The provisioning state
   */
  provisioningState?: string;
  /**
   * Action plan instance identifier
   */
  actionPlanInstanceId?: string;
  /**
   * Action plan operation identifier
   */
  actionPlanOperationId?: string;
  /**
   * Blob container name storing the deployment data
   */
  blobContainerName?: string;
};

/**
 * List of file containers.
 */
export interface FileContainersList {
  /**
   * List of file containers.
   */
  value?: FileContainer[];
  /**
   * Continuation token.
   */
  nextLink?: string;
}

/**
 * File container entity.
 */
export type FileContainer = Resource & {
  /**
   * File container resource identifier containing product manifest.
   */
  fileContainerId?: string;
  /**
   * The remote file location. This is write-only property, DRP never returns it back to a user.
   */
  sourceUri?: string;
  /**
   * The file or container Uri. This is read-only property; a user cannot set it.
   */
  uri?: string;
  /**
   * Specifies the file post copy action.
   */
  postCopyAction?: PostCopyAction;
  /**
   * The error response message.
   */
  error?: ErrorInfo;
  /**
   * Provisioning state of the resource.
   */
  provisioningState?: string;
};

/**
 * Extended Error Information.
 */
export interface ErrorInfo {
  /**
   * The error code.
   */
  code?: string;
  /**
   * The error message.
   */
  message?: string;
  /**
   * The detailed error messages.
   */
  details?: ErrorInfo[];
}

/**
 * Parameters for creating a new file container.
 */
export interface FileContainerParameters {
  /**
   * Specifies the file post copy action.
   */
  postCopyAction?: PostCopyAction;
  /**
   * Specifies The remote file location.
   */
  sourceUri?: string;
}

/**
 * List of Product Deployments.
 */
export interface ProductDeploymentsList {
  /**
   * List of Product Deployments.
   */
  value?: ProductDeploymentResourceEntity[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Product deployment entity
 */
export type ProductDeploymentResourceEntity = Resource & {
  /**
   * entity tag
   */
  eTag?: string;
  /**
   * Status of the product deployment.
   */
  status?: DeploymentStatus;
  /**
   * The product subscription identifier
   */
  subscriptionId?: string;
  /**
   * The current deployment information
   */
  deployment?: DeploymentInfo;
  /**
   * The last successful deployment information
   */
  lastSuccessfulDeployment?: DeploymentInfo;
  /**
   * Resource provider secret rotation information
   */
  secretRotation?: SecretRotationInfo;
  /**
   * Product deployment resource internal state
   */
  internalState?: ProductDeploymentsInternalState;
  /**
   * Error Information
   */
  error?: ExtendedErrorInfo;
  /**
   * Resource provider secret rotation information
   */
  externalAccess?: ExternalAccessInfo;
  /**
   * The provisioning state
   */
  provisioningState?: string;
  /**
   * The product identifier
   */
  productId?: string;
};

/**
 * Resource provider deployment information
 */
export interface DeploymentInfo {
  /**
   * The product version
   */
  version?: string;
  /**
   * The latest deployment parameters as JToken
   */
  parameters?: string;
  /**
   * The identifier of the latest action plan instance resource.
   */
  actionPlanInstanceResourceId?: string;
  /**
   * entity tag
   */
  eTag?: string;
}

/**
 * Resource provider deployment information
 */
export interface SecretRotationInfo {
  /**
   * The identifier of the latest secret rotation plan instance resource.
   */
  secretRotationPlanInstanceResourceId?: string;
}

/**
 * Resource type internal state
 */
export interface ProductDeploymentsInternalState {
  /**
   * The latest deployment job identifier
   */
  jobId?: string;
  /**
   * The intermediate vault resource identifier
   */
  intermediateVaultId?: string;
  /**
   * The intermediate vault Uri.
   */
  intermediateVaultUri?: string;
  /**
   * The current external access role assignment identifier
   */
  externalAccessRoleAssignmentId?: string;
}

/**
 * Resource provider deployment information
 */
export interface ExternalAccessInfo {
  /**
   * The object identifier of the user, group or service principal that have access to resource provider subscription.
   */
  principalId?: string;
  /**
   * The deployment start time
   */
  expirationTime?: Date;
}

/**
 * Parameters for bootstrap action
 */
export interface BootStrapActionParameters {
  /**
   * Generic Version object
   */
  version?: string;
}

/**
 * Parameters for deploy action
 */
export interface DeployActionParameters {
  /**
   * Generic Version object
   */
  version?: string;
  /**
   * Deployment parameters, value in JToken
   */
  parameters?: string;
}

/**
 * Parameters for bootstrap action
 */
export interface UnlockActionParameters {
  /**
   * Duration in TimeSpan format(Define which ISO format)
   */
  duration?: string;
}

/**
 * List of product packages.
 */
export interface ProductPackagesList {
  /**
   * List of product packages.
   */
  value?: ProductPackage[];
  /**
   * Continuation Token.
   */
  nextLink?: string;
}

/**
 * Properties for a product package.
 */
export type ProductPackage = Resource & {
  /**
   * File container resource identifier containing product manifest.
   */
  fileContainerId?: string;
  /**
   * Value indicating whether the package is applicable for deployment.
   */
  isDeployable?: boolean;
  /**
   * Value indicating whether the package is applicable for update.
   */
  isUpdatable?: boolean;
  /**
   * The identifier of product deployment; null if this version is not installed.
   */
  productDeploymentId?: string;
  /**
   * Provisioning state of the resource.
   */
  provisioningState?: string;
};

/**
 * List of product secrets.
 */
export interface ProductSecretsList {
  /**
   * List of product secrets.
   */
  value?: ProductSecret[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Properties for a product secret.
 */
export type ProductSecret = Resource & {
  /**
   * The secret state.
   */
  secretState?: SecretState;
  /**
   * The secret type-specific descriptor.
   */
  secretDescriptor?: SecretDescriptor;
  /**
   * The expiration period of the secret (in ISO8601 format).
   */
  expiresAfter?: string;
  /**
   * The secret description.
   */
  description?: string;
  /**
   * Provisioning state of the resource.
   */
  provisioningState?: string;
  /**
   * Specifies the secret kind.
   */
  secretKind?: SecretKind;
};

/**
 * Represents the secret state.
 */
export interface SecretState {
  /**
   * The secret status.
   */
  status?: SecretStatus;
  /**
   * the secret rotation status.
   */
  rotationStatus?: SecretRotationStatus;
  /**
   * The secret expiration date.
   */
  expirationDate?: Date;
}

/**
 * The secret type-specific descriptor.
 */
export interface SecretDescriptor {
  /**
   * The key length.
   */
  keyLength?: number;
  /**
   * Alternative DNS Names.
   */
  alternativeDnsNames?: string[];
  /**
   * A value indicating whether the secondary or primary storage account key is active as a secret.
   */
  secondaryKeyIsActive?: boolean;
  /**
   * The storage account key secret rotation status.
   */
  rotationStatus?: RotationStatus;
  /**
   * The minimum password length is 8 characters, and the maximum password length is 128 characters.
   */
  passwordLength?: number;
  /**
   * The allowed characters in the password
   */
  allowedCharacters?: string;
  /**
   * Password validation regular expression.
   */
  passwordValidationRegex?: string;
  /**
   * Certificate's subject
   */
  subject?: string;
  /**
   * The list of alternative IP addresses.
   */
  alternativeIpAddresses?: string[];
}

/**
 * Parameters required for creating/updating a product secret.
 */
export interface SecretParameters {
  /**
   * The secret value in a secure string format.
   */
  secretValue?: string;
  /**
   * The pfx certificate file location.
   */
  pfxFileName?: string;
  /**
   * The pfx certificate file password.
   */
  pfxPassword?: string;
  /**
   * The symmetric key.
   */
  symmetricKey?: string;
  /**
   * The pfx certificate file password.
   */
  password?: string;
}

/**
 * Additional properties of the product
 */
export interface ProductProperties {
  /**
   * The version of the product
   */
  version?: string;
}

/**
 * Link to a product.
 */
export interface ProductLink {
  /**
   * Displayed name of product.
   */
  displayName?: string;
  /**
   * URI to product.
   */
  uri?: string;
}

/**
 * Defines values for PostCopyAction.
 */
export type PostCopyAction = "None" | "Unzip";
/**
 * Defines values for DeploymentStatus.
 */
export type DeploymentStatus =
  | "None"
  | "Bootstrapping"
  | "BootstrapSucceeded"
  | "BootstrapFailed"
  | "Deploying"
  | "DeploymentSucceeded"
  | "DeploymentFailed"
  | "Updating"
  | "UpdateSucceeded"
  | "UpdateFailed"
  | "Removing"
  | "RemoveFailed"
  | "SecretRotationInProgress"
  | "SecretRotationSucceeded"
  | "SecretRotationFailed"
  | "Migrated";
/**
 * Defines values for SecretStatus.
 */
export type SecretStatus = "NotUploaded" | "Uploaded" | "Deployed";
/**
 * Defines values for SecretRotationStatus.
 */
export type SecretRotationStatus = "None" | "InProgress" | "Complete";
/**
 * Defines values for RotationStatus.
 */
export type RotationStatus =
  | "None"
  | "PlantNewSak"
  | "RotateInactiveSak"
  | "Complete";
/**
 * Defines values for SecretKind.
 */
export type SecretKind =
  | "AdHoc"
  | "Certificate"
  | "Password"
  | "StorageAccount"
  | "SymmetricKey";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ActionPlansListResponse = ActionPlanList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ActionPlanList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ActionPlansGetResponse = ActionPlanResourceEntity & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ActionPlanResourceEntity;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ActionPlansListNextResponse = ActionPlanList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ActionPlanList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ActionPlanOperationsListResponse = ActionPlanOperationsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ActionPlanOperationsList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ActionPlanOperationsGetResponse = ActionPlanOperationResourceEntity & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ActionPlanOperationResourceEntity;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ActionPlanOperationsListNextResponse = ActionPlanOperationsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ActionPlanOperationsList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type FileContainersListResponse = FileContainersList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FileContainersList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type FileContainersGetResponse = FileContainer & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FileContainer;
  };
};

/**
 * Contains response data for the create operation.
 */
export type FileContainersCreateResponse = FileContainer & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FileContainer;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type FileContainersListNextResponse = FileContainersList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FileContainersList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ProductDeploymentsListResponse = ProductDeploymentsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductDeploymentsList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ProductDeploymentsGetResponse = ProductDeploymentResourceEntity & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductDeploymentResourceEntity;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ProductDeploymentsListNextResponse = ProductDeploymentsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductDeploymentsList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ProductPackagesListResponse = ProductPackagesList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductPackagesList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ProductPackagesGetResponse = ProductPackage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductPackage;
  };
};

/**
 * Contains response data for the create operation.
 */
export type ProductPackagesCreateResponse = ProductPackage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductPackage;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ProductPackagesListNextResponse = ProductPackagesList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductPackagesList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ProductSecretsListResponse = ProductSecretsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductSecretsList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ProductSecretsGetResponse = ProductSecret & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductSecret;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ProductSecretsListNextResponse = ProductSecretsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProductSecretsList;
  };
};

/**
 * Optional parameters.
 */
export interface DeploymentAdminClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
