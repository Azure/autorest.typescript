/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DeploymentAdminClient } from "../deploymentAdminClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ProductSecretsListResponse,
  ProductSecretsGetResponse,
  SecretParameters,
  ProductSecretsListNextResponse
} from "../models";

/**
 * Class representing a ProductSecrets.
 */
export class ProductSecrets {
  private readonly client: DeploymentAdminClient;

  /**
   * Initialize a new instance of the class ProductSecrets class.
   * @param client Reference to the service client
   */
  constructor(client: DeploymentAdminClient) {
    this.client = client;
  }

  /**
   * Returns an array of product secrets.
   * @param productId The product identifier.
   * @param options The options parameters.
   */
  list(
    productId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProductSecretsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { productId, options: operationOptions },
      listOperationSpec
    ) as Promise<ProductSecretsListResponse>;
  }

  /**
   * Retrieves the specific product secret details.
   * @param productId The product identifier.
   * @param secretName The secret name.
   * @param options The options parameters.
   */
  get(
    productId: string,
    secretName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProductSecretsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { productId, secretName, options: operationOptions },
      getOperationSpec
    ) as Promise<ProductSecretsGetResponse>;
  }

  /**
   * Imports a product secret.
   * @param productId The product identifier.
   * @param secretName The secret name.
   * @param secretParameters The parameters required for creating/updating a product secret.
   * @param options The options parameters.
   */
  async import(
    productId: string,
    secretName: string,
    secretParameters: SecretParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      productId,
      secretName,
      secretParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      importOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: importOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Validates a product secret.
   * @param productId The product identifier.
   * @param secretName The secret name.
   * @param secretParameters The parameters required for creating/updating a product secret.
   * @param options The options parameters.
   */
  async validate(
    productId: string,
    secretName: string,
    secretParameters: SecretParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      productId,
      secretName,
      secretParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      validateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: validateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param productId The product identifier.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    productId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProductSecretsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, productId, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ProductSecretsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productPackages/{productId}/secrets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductSecretsList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.productId
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productSecrets/{productId}/secrets/{secretName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductSecret
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.productId,
    Parameters.secretName
  ],
  serializer
};
const importOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productSecrets/{productId}/secrets/{secretName}/import",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.secretParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.productId,
    Parameters.secretName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const validateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productSecrets/{productId}/secrets/{secretName}/validate",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.secretParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.productId,
    Parameters.secretName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductSecretsList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.productId
  ],
  serializer
};
