/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagementLockClient } from "../managementLockClient";
import {
  ManagementLockObject,
  ManagementLocksCreateOrUpdateAtResourceGroupLevelResponse,
  ManagementLocksGetAtResourceGroupLevelResponse,
  ManagementLocksCreateOrUpdateByScopeResponse,
  ManagementLocksGetByScopeResponse,
  ManagementLocksCreateOrUpdateAtResourceLevelResponse,
  ManagementLocksGetAtResourceLevelResponse,
  ManagementLocksCreateOrUpdateAtSubscriptionLevelResponse,
  ManagementLocksGetAtSubscriptionLevelResponse,
  ManagementLocksListAtResourceGroupLevelOptionalParams,
  ManagementLocksListAtResourceGroupLevelResponse,
  ManagementLocksListAtResourceLevelOptionalParams,
  ManagementLocksListAtResourceLevelResponse,
  ManagementLocksListAtSubscriptionLevelOptionalParams,
  ManagementLocksListAtSubscriptionLevelResponse,
  ManagementLocksListByScopeOptionalParams,
  ManagementLocksListByScopeResponse,
  ManagementLocksListAtResourceGroupLevelNextOptionalParams,
  ManagementLocksListAtResourceGroupLevelNextResponse,
  ManagementLocksListAtResourceLevelNextOptionalParams,
  ManagementLocksListAtResourceLevelNextResponse,
  ManagementLocksListAtSubscriptionLevelNextOptionalParams,
  ManagementLocksListAtSubscriptionLevelNextResponse,
  ManagementLocksListByScopeNextOptionalParams,
  ManagementLocksListByScopeNextResponse
} from "../models";

/**
 * Class representing a ManagementLocks.
 */
export class ManagementLocks {
  private readonly client: ManagementLockClient;

  /**
   * Initialize a new instance of the class ManagementLocks class.
   * @param client Reference to the service client
   */
  constructor(client: ManagementLockClient) {
    this.client = client;
  }

  /**
   * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
   * management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   * @param resourceGroupName The name of the resource group to lock.
   * @param lockName The lock name. The lock name can be a maximum of 260 characters. It cannot contain
   *                 <, > %, &, :, \, ?, /, or any control characters.
   * @param parameters The management lock parameters.
   * @param options The options parameters.
   */
  createOrUpdateAtResourceGroupLevel(
    resourceGroupName: string,
    lockName: string,
    parameters: ManagementLockObject,
    options?: coreHttp.OperationOptions
  ): Promise<ManagementLocksCreateOrUpdateAtResourceGroupLevelResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, lockName, parameters, options: operationOptions },
      createOrUpdateAtResourceGroupLevelOperationSpec
    ) as Promise<ManagementLocksCreateOrUpdateAtResourceGroupLevelResponse>;
  }

  /**
   * To delete management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   * @param resourceGroupName The name of the resource group containing the lock.
   * @param lockName The name of lock to delete.
   * @param options The options parameters.
   */
  deleteAtResourceGroupLevel(
    resourceGroupName: string,
    lockName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, lockName, options: operationOptions },
      deleteAtResourceGroupLevelOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets a management lock at the resource group level.
   * @param resourceGroupName The name of the locked resource group.
   * @param lockName The name of the lock to get.
   * @param options The options parameters.
   */
  getAtResourceGroupLevel(
    resourceGroupName: string,
    lockName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ManagementLocksGetAtResourceGroupLevelResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, lockName, options: operationOptions },
      getAtResourceGroupLevelOperationSpec
    ) as Promise<ManagementLocksGetAtResourceGroupLevelResponse>;
  }

  /**
   * Create or update a management lock by scope.
   * @param scope The scope for the lock. When providing a scope for the assignment, use
   *              '/subscriptions/{subscriptionId}' for subscriptions,
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
   *              for resources.
   * @param lockName The name of lock.
   * @param parameters Create or update management lock parameters.
   * @param options The options parameters.
   */
  createOrUpdateByScope(
    scope: string,
    lockName: string,
    parameters: ManagementLockObject,
    options?: coreHttp.OperationOptions
  ): Promise<ManagementLocksCreateOrUpdateByScopeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, lockName, parameters, options: operationOptions },
      createOrUpdateByScopeOperationSpec
    ) as Promise<ManagementLocksCreateOrUpdateByScopeResponse>;
  }

  /**
   * Delete a management lock by scope.
   * @param scope The scope for the lock.
   * @param lockName The name of lock.
   * @param options The options parameters.
   */
  deleteByScope(
    scope: string,
    lockName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, lockName, options: operationOptions },
      deleteByScopeOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a management lock by scope.
   * @param scope The scope for the lock.
   * @param lockName The name of lock.
   * @param options The options parameters.
   */
  getByScope(
    scope: string,
    lockName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ManagementLocksGetByScopeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, lockName, options: operationOptions },
      getByScopeOperationSpec
    ) as Promise<ManagementLocksGetByScopeResponse>;
  }

  /**
   * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
   * management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   * @param resourceGroupName The name of the resource group containing the resource to lock.
   * @param resourceProviderNamespace The resource provider namespace of the resource to lock.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the resource to lock.
   * @param resourceName The name of the resource to lock.
   * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot
   *                 contain <, > %, &, :, \, ?, /, or any control characters.
   * @param parameters Parameters for creating or updating a  management lock.
   * @param options The options parameters.
   */
  createOrUpdateAtResourceLevel(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    lockName: string,
    parameters: ManagementLockObject,
    options?: coreHttp.OperationOptions
  ): Promise<ManagementLocksCreateOrUpdateAtResourceLevelResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        lockName,
        parameters,
        options: operationOptions
      },
      createOrUpdateAtResourceLevelOperationSpec
    ) as Promise<ManagementLocksCreateOrUpdateAtResourceLevelResponse>;
  }

  /**
   * To delete management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   * @param resourceGroupName The name of the resource group containing the resource with the lock to
   *                          delete.
   * @param resourceProviderNamespace The resource provider namespace of the resource with the lock to
   *                                  delete.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the resource with the lock to delete.
   * @param resourceName The name of the resource with the lock to delete.
   * @param lockName The name of the lock to delete.
   * @param options The options parameters.
   */
  deleteAtResourceLevel(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    lockName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        lockName,
        options: operationOptions
      },
      deleteAtResourceLevelOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get the management lock of a resource or any level below resource.
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath An extra path parameter needed in some services, like SQL Databases.
   * @param resourceType The type of the resource.
   * @param resourceName The name of the resource.
   * @param lockName The name of lock.
   * @param options The options parameters.
   */
  getAtResourceLevel(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    lockName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ManagementLocksGetAtResourceLevelResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        lockName,
        options: operationOptions
      },
      getAtResourceLevelOperationSpec
    ) as Promise<ManagementLocksGetAtResourceLevelResponse>;
  }

  /**
   * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
   * management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot
   *                 contain <, > %, &, :, \, ?, /, or any control characters.
   * @param parameters The management lock parameters.
   * @param options The options parameters.
   */
  createOrUpdateAtSubscriptionLevel(
    lockName: string,
    parameters: ManagementLockObject,
    options?: coreHttp.OperationOptions
  ): Promise<ManagementLocksCreateOrUpdateAtSubscriptionLevelResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { lockName, parameters, options: operationOptions },
      createOrUpdateAtSubscriptionLevelOperationSpec
    ) as Promise<ManagementLocksCreateOrUpdateAtSubscriptionLevelResponse>;
  }

  /**
   * To delete management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   * @param lockName The name of lock to delete.
   * @param options The options parameters.
   */
  deleteAtSubscriptionLevel(
    lockName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { lockName, options: operationOptions },
      deleteAtSubscriptionLevelOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets a management lock at the subscription level.
   * @param lockName The name of the lock to get.
   * @param options The options parameters.
   */
  getAtSubscriptionLevel(
    lockName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ManagementLocksGetAtSubscriptionLevelResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { lockName, options: operationOptions },
      getAtSubscriptionLevelOperationSpec
    ) as Promise<ManagementLocksGetAtSubscriptionLevelResponse>;
  }

  /**
   * Gets all the management locks for a resource group.
   * @param resourceGroupName The name of the resource group containing the locks to get.
   * @param options The options parameters.
   */
  listAtResourceGroupLevel(
    resourceGroupName: string,
    options?: ManagementLocksListAtResourceGroupLevelOptionalParams
  ): Promise<ManagementLocksListAtResourceGroupLevelResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listAtResourceGroupLevelOperationSpec
    ) as Promise<ManagementLocksListAtResourceGroupLevelResponse>;
  }

  /**
   * Gets all the management locks for a resource or any level below resource.
   * @param resourceGroupName The name of the resource group containing the locked resource. The name is
   *                          case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the locked resource.
   * @param resourceName The name of the locked resource.
   * @param options The options parameters.
   */
  listAtResourceLevel(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: ManagementLocksListAtResourceLevelOptionalParams
  ): Promise<ManagementLocksListAtResourceLevelResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        options: operationOptions
      },
      listAtResourceLevelOperationSpec
    ) as Promise<ManagementLocksListAtResourceLevelResponse>;
  }

  /**
   * Gets all the management locks for a subscription.
   * @param options The options parameters.
   */
  listAtSubscriptionLevel(
    options?: ManagementLocksListAtSubscriptionLevelOptionalParams
  ): Promise<ManagementLocksListAtSubscriptionLevelResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listAtSubscriptionLevelOperationSpec
    ) as Promise<ManagementLocksListAtSubscriptionLevelResponse>;
  }

  /**
   * Gets all the management locks for a scope.
   * @param scope The scope for the lock. When providing a scope for the assignment, use
   *              '/subscriptions/{subscriptionId}' for subscriptions,
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
   *              for resources.
   * @param options The options parameters.
   */
  listByScope(
    scope: string,
    options?: ManagementLocksListByScopeOptionalParams
  ): Promise<ManagementLocksListByScopeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, options: operationOptions },
      listByScopeOperationSpec
    ) as Promise<ManagementLocksListByScopeResponse>;
  }

  /**
   * ListAtResourceGroupLevelNext
   * @param resourceGroupName The name of the resource group containing the locks to get.
   * @param nextLink The nextLink from the previous successful call to the ListAtResourceGroupLevel
   *                 method.
   * @param options The options parameters.
   */
  listAtResourceGroupLevelNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceGroupLevelNextOptionalParams
  ): Promise<ManagementLocksListAtResourceGroupLevelNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listAtResourceGroupLevelNextOperationSpec
    ) as Promise<ManagementLocksListAtResourceGroupLevelNextResponse>;
  }

  /**
   * ListAtResourceLevelNext
   * @param resourceGroupName The name of the resource group containing the locked resource. The name is
   *                          case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the locked resource.
   * @param resourceName The name of the locked resource.
   * @param nextLink The nextLink from the previous successful call to the ListAtResourceLevel method.
   * @param options The options parameters.
   */
  listAtResourceLevelNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceLevelNextOptionalParams
  ): Promise<ManagementLocksListAtResourceLevelNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        nextLink,
        options: operationOptions
      },
      listAtResourceLevelNextOperationSpec
    ) as Promise<ManagementLocksListAtResourceLevelNextResponse>;
  }

  /**
   * ListAtSubscriptionLevelNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionLevel
   *                 method.
   * @param options The options parameters.
   */
  listAtSubscriptionLevelNext(
    nextLink: string,
    options?: ManagementLocksListAtSubscriptionLevelNextOptionalParams
  ): Promise<ManagementLocksListAtSubscriptionLevelNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listAtSubscriptionLevelNextOperationSpec
    ) as Promise<ManagementLocksListAtSubscriptionLevelNextResponse>;
  }

  /**
   * ListByScopeNext
   * @param scope The scope for the lock. When providing a scope for the assignment, use
   *              '/subscriptions/{subscriptionId}' for subscriptions,
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
   *              for resources.
   * @param nextLink The nextLink from the previous successful call to the ListByScope method.
   * @param options The options parameters.
   */
  listByScopeNext(
    scope: string,
    nextLink: string,
    options?: ManagementLocksListByScopeNextOptionalParams
  ): Promise<ManagementLocksListByScopeNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, nextLink, options: operationOptions },
      listByScopeNextOperationSpec
    ) as Promise<ManagementLocksListByScopeNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOrUpdateAtResourceGroupLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockObject
    },
    201: {
      bodyMapper: Mappers.ManagementLockObject
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.lockName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteAtResourceGroupLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.lockName,
    Parameters.subscriptionId
  ],
  serializer
};
const getAtResourceGroupLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockObject
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.lockName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateByScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockObject
    },
    201: {
      bodyMapper: Mappers.ManagementLockObject
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.lockName, Parameters.scope],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteByScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.lockName, Parameters.scope],
  serializer
};
const getByScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockObject
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.lockName, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAtResourceLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockObject
    },
    201: {
      bodyMapper: Mappers.ManagementLockObject
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.lockName,
    Parameters.subscriptionId,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteAtResourceLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.lockName,
    Parameters.subscriptionId,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  serializer
};
const getAtResourceLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockObject
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.lockName,
    Parameters.subscriptionId,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAtSubscriptionLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockObject
    },
    201: {
      bodyMapper: Mappers.ManagementLockObject
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.lockName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteAtSubscriptionLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.lockName,
    Parameters.subscriptionId
  ],
  serializer
};
const getAtSubscriptionLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockObject
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.lockName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtResourceGroupLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtResourceLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionLevelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Authorization/locks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtResourceGroupLevelNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtResourceLevelNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionLevelNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByScopeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
