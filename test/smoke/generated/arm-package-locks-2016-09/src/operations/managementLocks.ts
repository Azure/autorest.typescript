/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ManagementLocks } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagementLockClient } from "../managementLockClient";
import {
  ManagementLockObject,
  ManagementLocksCreateOrUpdateAtResourceGroupLevelResponse,
  ManagementLocksGetAtResourceGroupLevelResponse,
  ManagementLocksCreateOrUpdateByScopeResponse,
  ManagementLocksGetByScopeResponse,
  ManagementLocksCreateOrUpdateAtResourceLevelResponse,
  ManagementLocksGetAtResourceLevelResponse,
  ManagementLocksCreateOrUpdateAtSubscriptionLevelResponse,
  ManagementLocksGetAtSubscriptionLevelResponse,
  ManagementLocksListAtResourceGroupLevelResponse,
  ManagementLocksListAtResourceLevelResponse,
  ManagementLocksListAtSubscriptionLevelResponse,
  ManagementLocksListByScopeResponse,
  ManagementLocksListAtResourceGroupLevelNextResponse,
  ManagementLocksListAtResourceLevelNextResponse,
  ManagementLocksListAtSubscriptionLevelNextResponse,
  ManagementLocksListByScopeNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ManagementLocks operations. */
export class ManagementLocksImpl implements ManagementLocks {
  private readonly client: ManagementLockClient;

  /**
   * Initialize a new instance of the class ManagementLocks class.
   * @param client Reference to the service client
   */
  constructor(client: ManagementLockClient) {
    this.client = client;
  }

  /**
   * Gets all the management locks for a resource group.
   *
   */
  public listAtResourceGroupLevel(): PagedAsyncIterableIterator<
    ManagementLockObject
  > {
    const iter = this.listAtResourceGroupLevelPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtResourceGroupLevelPagingPage();
      }
    };
  }

  private async *listAtResourceGroupLevelPagingPage(): AsyncIterableIterator<
    ManagementLockObject[]
  > {
    let result = await this._listAtResourceGroupLevel();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtResourceGroupLevelNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtResourceGroupLevelPagingAll(): AsyncIterableIterator<
    ManagementLockObject
  > {
    for await (const page of this.listAtResourceGroupLevelPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets all the management locks for a resource or any level below resource.
   *
   */
  public listAtResourceLevel(): PagedAsyncIterableIterator<
    ManagementLockObject
  > {
    const iter = this.listAtResourceLevelPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtResourceLevelPagingPage();
      }
    };
  }

  private async *listAtResourceLevelPagingPage(): AsyncIterableIterator<
    ManagementLockObject[]
  > {
    let result = await this._listAtResourceLevel();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtResourceLevelNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtResourceLevelPagingAll(): AsyncIterableIterator<
    ManagementLockObject
  > {
    for await (const page of this.listAtResourceLevelPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets all the management locks for a subscription.
   *
   */
  public listAtSubscriptionLevel(): PagedAsyncIterableIterator<
    ManagementLockObject
  > {
    const iter = this.listAtSubscriptionLevelPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionLevelPagingPage();
      }
    };
  }

  private async *listAtSubscriptionLevelPagingPage(): AsyncIterableIterator<
    ManagementLockObject[]
  > {
    let result = await this._listAtSubscriptionLevel();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionLevelNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionLevelPagingAll(): AsyncIterableIterator<
    ManagementLockObject
  > {
    for await (const page of this.listAtSubscriptionLevelPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets all the management locks for a scope.
   *
   */
  public listByScope(): PagedAsyncIterableIterator<ManagementLockObject> {
    const iter = this.listByScopePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByScopePagingPage();
      }
    };
  }

  private async *listByScopePagingPage(): AsyncIterableIterator<
    ManagementLockObject[]
  > {
    let result = await this._listByScope();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByScopeNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByScopePagingAll(): AsyncIterableIterator<
    ManagementLockObject
  > {
    for await (const page of this.listByScopePagingPage()) {
      yield* page;
    }
  }

  /**
   * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
   * management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   *
   */
  createOrUpdateAtResourceGroupLevel(): Promise<
    ManagementLocksCreateOrUpdateAtResourceGroupLevelResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, lockName, options },
      createOrUpdateAtResourceGroupLevelOperationSpec
    );
  }

  /**
   * To delete management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   *
   */
  deleteAtResourceGroupLevel(): Promise<void> {}

  /**
   * Gets a management lock at the resource group level.
   *
   */
  getAtResourceGroupLevel(): Promise<
    ManagementLocksGetAtResourceGroupLevelResponse
  > {}

  /**
   * Create or update a management lock by scope.
   *
   */
  createOrUpdateByScope(): Promise<
    ManagementLocksCreateOrUpdateByScopeResponse
  > {
    return this.client.sendOperationRequest(
      { scope, lockName, options },
      createOrUpdateByScopeOperationSpec
    );
  }

  /**
   * Delete a management lock by scope.
   *
   */
  deleteByScope(): Promise<void> {}

  /**
   * Get a management lock by scope.
   *
   */
  getByScope(): Promise<ManagementLocksGetByScopeResponse> {}

  /**
   * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
   * management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   *
   */
  createOrUpdateAtResourceLevel(): Promise<
    ManagementLocksCreateOrUpdateAtResourceLevelResponse
  > {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        lockName,
        options
      },
      createOrUpdateAtResourceLevelOperationSpec
    );
  }

  /**
   * To delete management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   *
   */
  deleteAtResourceLevel(): Promise<void> {}

  /**
   * Get the management lock of a resource or any level below resource.
   *
   */
  getAtResourceLevel(): Promise<ManagementLocksGetAtResourceLevelResponse> {}

  /**
   * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
   * management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   *
   */
  createOrUpdateAtSubscriptionLevel(): Promise<
    ManagementLocksCreateOrUpdateAtSubscriptionLevelResponse
  > {
    return this.client.sendOperationRequest(
      { lockName, options },
      createOrUpdateAtSubscriptionLevelOperationSpec
    );
  }

  /**
   * To delete management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   *
   */
  deleteAtSubscriptionLevel(): Promise<void> {}

  /**
   * Gets a management lock at the subscription level.
   *
   */
  getAtSubscriptionLevel(): Promise<
    ManagementLocksGetAtSubscriptionLevelResponse
  > {}

  /**
   * Gets all the management locks for a resource group.
   *
   */
  private _listAtResourceGroupLevel(): Promise<
    ManagementLocksListAtResourceGroupLevelResponse
  > {}

  /**
   * Gets all the management locks for a resource or any level below resource.
   *
   */
  private _listAtResourceLevel(): Promise<
    ManagementLocksListAtResourceLevelResponse
  > {}

  /**
   * Gets all the management locks for a subscription.
   *
   */
  private _listAtSubscriptionLevel(): Promise<
    ManagementLocksListAtSubscriptionLevelResponse
  > {}

  /**
   * Gets all the management locks for a scope.
   *
   */
  private _listByScope(): Promise<ManagementLocksListByScopeResponse> {}

  /**
   * ListAtResourceGroupLevelNext
   *
   */
  private _listAtResourceGroupLevelNext(): Promise<
    ManagementLocksListAtResourceGroupLevelNextResponse
  > {}

  /**
   * ListAtResourceLevelNext
   *
   */
  private _listAtResourceLevelNext(): Promise<
    ManagementLocksListAtResourceLevelNextResponse
  > {}

  /**
   * ListAtSubscriptionLevelNext
   *
   */
  private _listAtSubscriptionLevelNext(): Promise<
    ManagementLocksListAtSubscriptionLevelNextResponse
  > {}

  /**
   * ListByScopeNext
   *
   */
  private _listByScopeNext(): Promise<ManagementLocksListByScopeNextResponse> {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateAtResourceGroupLevelOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockObject
    },
    201: {
      bodyMapper: Mappers.ManagementLockObject
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.lockName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOrUpdateByScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockObject
    },
    201: {
      bodyMapper: Mappers.ManagementLockObject
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.lockName, Parameters.scope],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOrUpdateAtResourceLevelOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockObject
    },
    201: {
      bodyMapper: Mappers.ManagementLockObject
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.lockName,
    Parameters.subscriptionId,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOrUpdateAtSubscriptionLevelOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementLockObject
    },
    201: {
      bodyMapper: Mappers.ManagementLockObject
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.lockName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
