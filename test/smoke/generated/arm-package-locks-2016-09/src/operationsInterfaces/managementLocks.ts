/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  ManagementLockObject,
  ManagementLocksCreateOrUpdateAtResourceGroupLevelResponse,
  ManagementLocksGetAtResourceGroupLevelResponse,
  ManagementLocksCreateOrUpdateByScopeResponse,
  ManagementLocksGetByScopeResponse,
  ManagementLocksCreateOrUpdateAtResourceLevelResponse,
  ManagementLocksGetAtResourceLevelResponse,
  ManagementLocksCreateOrUpdateAtSubscriptionLevelResponse,
  ManagementLocksGetAtSubscriptionLevelResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ManagementLocks. */
export interface ManagementLocks {
  /**
   * Gets all the management locks for a resource group.
   *
   */
  listAtResourceGroupLevel(): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * Gets all the management locks for a resource or any level below resource.
   *
   */
  listAtResourceLevel(): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * Gets all the management locks for a subscription.
   *
   */
  listAtSubscriptionLevel(): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * Gets all the management locks for a scope.
   *
   */
  listByScope(): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
   * management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   *
   */
  createOrUpdateAtResourceGroupLevel(): Promise<
    ManagementLocksCreateOrUpdateAtResourceGroupLevelResponse
  >;
  /**
   * To delete management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   *
   */
  deleteAtResourceGroupLevel(): Promise<void>;
  /**
   * Gets a management lock at the resource group level.
   *
   */
  getAtResourceGroupLevel(): Promise<
    ManagementLocksGetAtResourceGroupLevelResponse
  >;
  /**
   * Create or update a management lock by scope.
   *
   */
  createOrUpdateByScope(): Promise<
    ManagementLocksCreateOrUpdateByScopeResponse
  >;
  /**
   * Delete a management lock by scope.
   *
   */
  deleteByScope(): Promise<void>;
  /**
   * Get a management lock by scope.
   *
   */
  getByScope(): Promise<ManagementLocksGetByScopeResponse>;
  /**
   * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
   * management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   *
   */
  createOrUpdateAtResourceLevel(): Promise<
    ManagementLocksCreateOrUpdateAtResourceLevelResponse
  >;
  /**
   * To delete management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   *
   */
  deleteAtResourceLevel(): Promise<void>;
  /**
   * Get the management lock of a resource or any level below resource.
   *
   */
  getAtResourceLevel(): Promise<ManagementLocksGetAtResourceLevelResponse>;
  /**
   * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
   * management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   *
   */
  createOrUpdateAtSubscriptionLevel(): Promise<
    ManagementLocksCreateOrUpdateAtSubscriptionLevelResponse
  >;
  /**
   * To delete management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   *
   */
  deleteAtSubscriptionLevel(): Promise<void>;
  /**
   * Gets a management lock at the subscription level.
   *
   */
  getAtSubscriptionLevel(): Promise<
    ManagementLocksGetAtSubscriptionLevelResponse
  >;
}
