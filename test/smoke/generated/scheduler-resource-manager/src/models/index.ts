/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type HttpAuthenticationUnion =
  | HttpAuthentication
  | ClientCertAuthentication
  | BasicAuthentication
  | OAuthAuthentication;

export interface JobCollectionListResult {
  /**
   * Gets the job collections.
   */
  readonly value?: JobCollectionDefinition[];
  /**
   * Gets or sets the URL to get the next set of job collections.
   */
  nextLink?: string;
}

export interface JobCollectionDefinition {
  /**
   * Gets the job collection resource identifier.
   */
  readonly id?: string;
  /**
   * Gets the job collection resource type.
   */
  readonly type?: string;
  /**
   * Gets or sets the job collection resource name.
   */
  name?: string;
  /**
   * Gets or sets the storage account location.
   */
  location?: string;
  /**
   * Gets or sets the tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the job collection properties.
   */
  properties?: JobCollectionProperties;
}

export interface JobCollectionProperties {
  /**
   * Gets or sets the SKU.
   */
  sku?: Sku;
  /**
   * Gets or sets the state.
   */
  state?: JobCollectionState;
  /**
   * Gets or sets the job collection quota.
   */
  quota?: JobCollectionQuota;
}

export interface Sku {
  /**
   * Gets or set the SKU.
   */
  name?: SkuDefinition;
}

export interface JobCollectionQuota {
  /**
   * Gets or set the maximum job count.
   */
  maxJobCount?: number;
  /**
   * Gets or sets the maximum job occurrence.
   */
  maxJobOccurrence?: number;
  /**
   * Gets or set the maximum recurrence.
   */
  maxRecurrence?: JobMaxRecurrence;
}

export interface JobMaxRecurrence {
  /**
   * Gets or sets the frequency of recurrence (second, minute, hour, day, week, month).
   */
  frequency?: RecurrenceFrequency;
  /**
   * Gets or sets the interval between retries.
   */
  interval?: number;
}

export interface JobDefinition {
  /**
   * Gets the job resource identifier.
   */
  readonly id?: string;
  /**
   * Gets the job resource type.
   */
  readonly type?: string;
  /**
   * Gets the job resource name.
   */
  readonly name?: string;
  /**
   * Gets or sets the job properties.
   */
  properties?: JobProperties;
}

export interface JobProperties {
  /**
   * Gets or sets the job start time.
   */
  startTime?: Date;
  /**
   * Gets or sets the job action.
   */
  action?: JobAction;
  /**
   * Gets or sets the job recurrence.
   */
  recurrence?: JobRecurrence;
  /**
   * Gets or set the job state.
   */
  state?: JobState;
  /**
   * Gets the job status.
   */
  readonly status?: JobStatus;
}

export interface JobAction {
  /**
   * Gets or sets the job action type.
   */
  type?: JobActionType;
  /**
   * Gets or sets the http requests.
   */
  request?: HttpRequest;
  /**
   * Gets or sets the storage queue message.
   */
  queueMessage?: StorageQueueMessage;
  /**
   * Gets or sets the service bus queue message.
   */
  serviceBusQueueMessage?: ServiceBusQueueMessage;
  /**
   * Gets or sets the service bus topic message.
   */
  serviceBusTopicMessage?: ServiceBusTopicMessage;
  /**
   * Gets or sets the retry policy.
   */
  retryPolicy?: RetryPolicy;
  /**
   * Gets or sets the error action.
   */
  errorAction?: JobErrorAction;
}

export interface HttpRequest {
  /**
   * Gets or sets the authentication method of the request.
   */
  authentication?: HttpAuthenticationUnion;
  /**
   * Gets or sets the URI of the request.
   */
  uri?: string;
  /**
   * Gets or sets the method of the request.
   */
  method?: string;
  /**
   * Gets or sets the request body.
   */
  body?: string;
  /**
   * Gets or sets the headers.
   */
  headers?: { [propertyName: string]: string };
}

export interface HttpAuthentication {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  type: "ClientCertificate" | "Basic" | "ActiveDirectoryOAuth";
}

export interface StorageQueueMessage {
  /**
   * Gets or sets the storage account name.
   */
  storageAccount?: string;
  /**
   * Gets or sets the queue name.
   */
  queueName?: string;
  /**
   * Gets or sets the SAS key.
   */
  sasToken?: string;
  /**
   * Gets or sets the message.
   */
  message?: string;
}

export interface ServiceBusMessage {
  /**
   * Gets or sets the Service Bus authentication.
   */
  authentication?: ServiceBusAuthentication;
  /**
   * Gets or sets the brokered message properties.
   */
  brokeredMessageProperties?: ServiceBusBrokeredMessageProperties;
  /**
   * Gets or sets the custom message properties.
   */
  customMessageProperties?: { [propertyName: string]: string };
  /**
   * Gets or sets the message.
   */
  message?: string;
  /**
   * Gets or sets the namespace.
   */
  namespace?: string;
  /**
   * Gets or sets the transport type.
   */
  transportType?: ServiceBusTransportType;
}

export interface ServiceBusAuthentication {
  /**
   * Gets or sets the SAS key.
   */
  sasKey?: string;
  /**
   * Gets or sets the SAS key name.
   */
  sasKeyName?: string;
  /**
   * Gets or sets the authentication type.
   */
  type?: ServiceBusAuthenticationType;
}

export interface ServiceBusBrokeredMessageProperties {
  /**
   * Gets or sets the content type.
   */
  contentType?: string;
  /**
   * Gets or sets the correlation ID.
   */
  correlationId?: string;
  /**
   * Gets or sets the force persistence.
   */
  forcePersistence?: boolean;
  /**
   * Gets or sets the label.
   */
  label?: string;
  /**
   * Gets or sets the message ID.
   */
  messageId?: string;
  /**
   * Gets or sets the partition key.
   */
  partitionKey?: string;
  /**
   * Gets or sets the reply to.
   */
  replyTo?: string;
  /**
   * Gets or sets the reply to session ID.
   */
  replyToSessionId?: string;
  /**
   * Gets or sets the scheduled enqueue time UTC.
   */
  scheduledEnqueueTimeUtc?: Date;
  /**
   * Gets or sets the session ID.
   */
  sessionId?: string;
  /**
   * Gets or sets the time to live.
   */
  timeToLive?: string;
  /**
   * Gets or sets the to.
   */
  to?: string;
  /**
   * Gets or sets the via partition key.
   */
  viaPartitionKey?: string;
}

export type ServiceBusQueueMessage = ServiceBusMessage & {
  /**
   * Gets or sets the queue name.
   */
  queueName?: string;
};

export type ServiceBusTopicMessage = ServiceBusMessage & {
  /**
   * Gets or sets the topic path.
   */
  topicPath?: string;
};

export interface RetryPolicy {
  /**
   * Gets or sets the retry strategy to be used.
   */
  retryType?: RetryType;
  /**
   * Gets or sets the retry interval between retries, specify duration in ISO 8601 format.
   */
  retryInterval?: string;
  /**
   * Gets or sets the number of times a retry should be attempted.
   */
  retryCount?: number;
}

export interface JobErrorAction {
  /**
   * Gets or sets the job error action type.
   */
  type?: JobActionType;
  /**
   * Gets or sets the http requests.
   */
  request?: HttpRequest;
  /**
   * Gets or sets the storage queue message.
   */
  queueMessage?: StorageQueueMessage;
  /**
   * Gets or sets the service bus queue message.
   */
  serviceBusQueueMessage?: ServiceBusQueueMessage;
  /**
   * Gets or sets the service bus topic message.
   */
  serviceBusTopicMessage?: ServiceBusTopicMessage;
  /**
   * Gets or sets the retry policy.
   */
  retryPolicy?: RetryPolicy;
}

export interface JobRecurrence {
  /**
   * Gets or sets the frequency of recurrence (second, minute, hour, day, week, month).
   */
  frequency?: RecurrenceFrequency;
  /**
   * Gets or sets the interval between retries.
   */
  interval?: number;
  /**
   * Gets or sets the maximum number of times that the job should run.
   */
  count?: number;
  /**
   * Gets or sets the time at which the job will complete.
   */
  endTime?: Date;
  schedule?: JobRecurrenceSchedule;
}

export interface JobRecurrenceSchedule {
  /**
   * Gets or sets the days of the week that the job should execute on.
   */
  weekDays?: DayOfWeek[];
  /**
   * Gets or sets the hours of the day that the job should execute at.
   */
  hours?: number[];
  /**
   * Gets or sets the minutes of the hour that the job should execute at.
   */
  minutes?: number[];
  /**
   * Gets or sets the days of the month that the job should execute on. Must be between 1 and 31.
   */
  monthDays?: number[];
  /**
   * Gets or sets the occurrences of days within a month.
   */
  monthlyOccurrences?: JobRecurrenceScheduleMonthlyOccurrence[];
}

export interface JobRecurrenceScheduleMonthlyOccurrence {
  /**
   * Gets or sets the day. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
   */
  day?: JobScheduleDay;
  /**
   * Gets or sets the occurrence. Must be between -5 and 5.
   */
  occurrence?: number;
}

export interface JobStatus {
  /**
   * Gets the number of times this job has executed.
   */
  readonly executionCount?: number;
  /**
   * Gets the number of times this job has failed.
   */
  readonly failureCount?: number;
  /**
   * Gets the number of faulted occurrences (occurrences that were retried and failed as many times as the retry policy states).
   */
  readonly faultedCount?: number;
  /**
   * Gets the time the last occurrence executed in ISO-8601 format.  Could be empty if job has not run yet.
   */
  readonly lastExecutionTime?: Date;
  /**
   * Gets the time of the next occurrence in ISO-8601 format. Could be empty if the job is completed.
   */
  readonly nextExecutionTime?: Date;
}

export interface JobListResult {
  /**
   * Gets or sets all jobs under job collection.
   */
  value?: JobDefinition[];
  /**
   * Gets or sets the URL to get the next set of jobs.
   */
  nextLink?: string;
}

export interface JobHistoryListResult {
  /**
   * Gets or sets the job histories under job.
   */
  value?: JobHistoryDefinition[];
  /**
   * Gets or sets the URL to get the next set of job histories.
   */
  nextLink?: string;
}

export interface JobHistoryDefinition {
  /**
   * Gets the job history identifier.
   */
  readonly id?: string;
  /**
   * Gets the job history resource type.
   */
  readonly type?: string;
  /**
   * Gets the job history name.
   */
  readonly name?: string;
  /**
   * Gets or sets the job history properties.
   */
  readonly properties?: JobHistoryDefinitionProperties;
}

export interface JobHistoryDefinitionProperties {
  /**
   * Gets the start time for this job.
   */
  readonly startTime?: Date;
  /**
   * Gets the end time for this job.
   */
  readonly endTime?: Date;
  /**
   * Gets the expected execution time for this job.
   */
  readonly expectedExecutionTime?: Date;
  /**
   * Gets the job history action name.
   */
  readonly actionName?: JobHistoryActionName;
  /**
   * Gets the job history status.
   */
  readonly status?: JobExecutionStatus;
  /**
   * Gets the message for the job history.
   */
  readonly message?: string;
  /**
   * Gets the retry count for job.
   */
  readonly retryCount?: number;
  /**
   * Gets the repeat count for the job.
   */
  readonly repeatCount?: number;
}

export type ClientCertAuthentication = HttpAuthentication & {
  /**
   * Gets or sets the certificate password, return value will always be empty.
   */
  password?: string;
  /**
   * Gets or sets the pfx certificate. Accepts certification in base64 encoding, return value will always be empty.
   */
  pfx?: string;
  /**
   * Gets or sets the certificate thumbprint.
   */
  certificateThumbprint?: string;
  /**
   * Gets or sets the certificate expiration date.
   */
  certificateExpirationDate?: Date;
  /**
   * Gets or sets the certificate subject name.
   */
  certificateSubjectName?: string;
};

export type BasicAuthentication = HttpAuthentication & {
  /**
   * Gets or sets the username.
   */
  username?: string;
  /**
   * Gets or sets the password, return value will always be empty.
   */
  password?: string;
};

export type OAuthAuthentication = HttpAuthentication & {
  /**
   * Gets or sets the secret, return value will always be empty.
   */
  secret?: string;
  /**
   * Gets or sets the tenant.
   */
  tenant?: string;
  /**
   * Gets or sets the audience.
   */
  audience?: string;
  /**
   * Gets or sets the client identifier.
   */
  clientId?: string;
};

export interface JobStateFilter {
  /**
   * Gets or sets the job state.
   */
  state?: JobState;
}

export interface JobHistoryFilter {
  /**
   * Gets or sets the job execution status.
   */
  status?: JobExecutionStatus;
}

/**
 * Defines values for SkuDefinition.
 */
export type SkuDefinition = "Standard" | "Free" | "P10Premium" | "P20Premium";
/**
 * Defines values for JobCollectionState.
 */
export type JobCollectionState =
  | "Enabled"
  | "Disabled"
  | "Suspended"
  | "Deleted";
/**
 * Defines values for RecurrenceFrequency.
 */
export type RecurrenceFrequency = "Minute" | "Hour" | "Day" | "Week" | "Month";
/**
 * Defines values for JobActionType.
 */
export type JobActionType =
  | "Http"
  | "Https"
  | "StorageQueue"
  | "ServiceBusQueue"
  | "ServiceBusTopic";
/**
 * Defines values for HttpAuthenticationType.
 */
export type HttpAuthenticationType =
  | "NotSpecified"
  | "ClientCertificate"
  | "ActiveDirectoryOAuth"
  | "Basic";
/**
 * Defines values for ServiceBusAuthenticationType.
 */
export type ServiceBusAuthenticationType = "NotSpecified" | "SharedAccessKey";
/**
 * Defines values for ServiceBusTransportType.
 */
export type ServiceBusTransportType = "NotSpecified" | "NetMessaging" | "AMQP";
/**
 * Defines values for RetryType.
 */
export type RetryType = "None" | "Fixed";
/**
 * Defines values for DayOfWeek.
 */
export type DayOfWeek =
  | "Sunday"
  | "Monday"
  | "Tuesday"
  | "Wednesday"
  | "Thursday"
  | "Friday"
  | "Saturday";
/**
 * Defines values for JobScheduleDay.
 */
export type JobScheduleDay =
  | "Monday"
  | "Tuesday"
  | "Wednesday"
  | "Thursday"
  | "Friday"
  | "Saturday"
  | "Sunday";
/**
 * Defines values for JobState.
 */
export type JobState = "Enabled" | "Disabled" | "Faulted" | "Completed";
/**
 * Defines values for JobHistoryActionName.
 */
export type JobHistoryActionName = "MainAction" | "ErrorAction";
/**
 * Defines values for JobExecutionStatus.
 */
export type JobExecutionStatus = "Completed" | "Failed" | "Postponed";

/**
 * Contains response data for the listBySubscription operation.
 */
export type JobCollectionsListBySubscriptionResponse = JobCollectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobCollectionListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type JobCollectionsListByResourceGroupResponse = JobCollectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobCollectionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type JobCollectionsGetResponse = JobCollectionDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobCollectionDefinition;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type JobCollectionsCreateOrUpdateResponse = JobCollectionDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobCollectionDefinition;
  };
};

/**
 * Contains response data for the patch operation.
 */
export type JobCollectionsPatchResponse = JobCollectionDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobCollectionDefinition;
  };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type JobCollectionsListBySubscriptionNextResponse = JobCollectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobCollectionListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type JobCollectionsListByResourceGroupNextResponse = JobCollectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobCollectionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type JobsGetResponse = JobDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobDefinition;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type JobsCreateOrUpdateResponse = JobDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobDefinition;
  };
};

/**
 * Contains response data for the patch operation.
 */
export type JobsPatchResponse = JobDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobDefinition;
  };
};

/**
 * Optional parameters.
 */
export interface JobsListOptionalParams extends coreHttp.OperationOptions {
  /**
   * The number of jobs to request, in the of range of [1..100].
   */
  top?: number;
  /**
   * The (0-based) index of the job history list from which to begin requesting entries.
   */
  skip?: number;
  /**
   * The filter to apply on the job state.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type JobsListResponse = JobListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobListResult;
  };
};

/**
 * Optional parameters.
 */
export interface JobsListJobHistoryOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The (0-based) index of the job history list from which to begin requesting entries.
   */
  skip?: number;
  /**
   * The filter to apply on the job state.
   */
  filter?: string;
  /**
   * the number of job history to request, in the of range of [1..100].
   */
  top?: number;
}

/**
 * Contains response data for the listJobHistory operation.
 */
export type JobsListJobHistoryResponse = JobHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobHistoryListResult;
  };
};

/**
 * Optional parameters.
 */
export interface JobsListNextOptionalParams extends coreHttp.OperationOptions {
  /**
   * The number of jobs to request, in the of range of [1..100].
   */
  top?: number;
  /**
   * The (0-based) index of the job history list from which to begin requesting entries.
   */
  skip?: number;
  /**
   * The filter to apply on the job state.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type JobsListNextResponse = JobListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobListResult;
  };
};

/**
 * Optional parameters.
 */
export interface JobsListJobHistoryNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The (0-based) index of the job history list from which to begin requesting entries.
   */
  skip?: number;
  /**
   * The filter to apply on the job state.
   */
  filter?: string;
  /**
   * the number of job history to request, in the of range of [1..100].
   */
  top?: number;
}

/**
 * Contains response data for the listJobHistoryNext operation.
 */
export type JobsListJobHistoryNextResponse = JobHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JobHistoryListResult;
  };
};

/**
 * Optional parameters.
 */
export interface SchedulerManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
