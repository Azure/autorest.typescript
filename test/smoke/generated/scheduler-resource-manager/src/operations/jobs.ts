/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SchedulerManagementClient } from "../schedulerManagementClient";
import {
  JobsGetResponse,
  JobDefinition,
  JobsCreateOrUpdateResponse,
  JobsPatchResponse,
  JobsListOptionalParams,
  JobsListResponse,
  JobsListJobHistoryOptionalParams,
  JobsListJobHistoryResponse,
  JobsListNextOptionalParams,
  JobsListNextResponse,
  JobsListJobHistoryNextOptionalParams,
  JobsListJobHistoryNextResponse
} from "../models";

/**
 * Class representing a Jobs.
 */
export class Jobs {
  private readonly client: SchedulerManagementClient;

  /**
   * Initialize a new instance of the class Jobs class.
   * @param client Reference to the service client
   */
  constructor(client: SchedulerManagementClient) {
    this.client = client;
  }

  /**
   * Gets a job.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    jobCollectionName: string,
    jobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<JobsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<JobsGetResponse>;
  }

  /**
   * Provisions a new job or updates an existing job.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param job The job definition.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    jobCollectionName: string,
    jobName: string,
    job: JobDefinition,
    options?: coreHttp.OperationOptions
  ): Promise<JobsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobName,
        job,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<JobsCreateOrUpdateResponse>;
  }

  /**
   * Patches an existing job.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param job The job definition.
   * @param options The options parameters.
   */
  patch(
    resourceGroupName: string,
    jobCollectionName: string,
    jobName: string,
    job: JobDefinition,
    options?: coreHttp.OperationOptions
  ): Promise<JobsPatchResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobName,
        job,
        options: operationOptions
      },
      patchOperationSpec
    ) as Promise<JobsPatchResponse>;
  }

  /**
   * Deletes a job.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    jobCollectionName: string,
    jobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Runs a job.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param options The options parameters.
   */
  run(
    resourceGroupName: string,
    jobCollectionName: string,
    jobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobName,
        options: operationOptions
      },
      runOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Lists all jobs under the specified job collection.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    jobCollectionName: string,
    options?: JobsListOptionalParams
  ): Promise<JobsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, jobCollectionName, options: operationOptions },
      listOperationSpec
    ) as Promise<JobsListResponse>;
  }

  /**
   * Lists job history.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param options The options parameters.
   */
  listJobHistory(
    resourceGroupName: string,
    jobCollectionName: string,
    jobName: string,
    options?: JobsListJobHistoryOptionalParams
  ): Promise<JobsListJobHistoryResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobName,
        options: operationOptions
      },
      listJobHistoryOperationSpec
    ) as Promise<JobsListJobHistoryResponse>;
  }

  /**
   * ListNext
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    resourceGroupName: string,
    jobCollectionName: string,
    nextLink: string,
    options?: JobsListNextOptionalParams
  ): Promise<JobsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        nextLink,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<JobsListNextResponse>;
  }

  /**
   * ListJobHistoryNext
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param nextLink The nextLink from the previous successful call to the ListJobHistory method.
   * @param options The options parameters.
   */
  listJobHistoryNext(
    resourceGroupName: string,
    jobCollectionName: string,
    jobName: string,
    nextLink: string,
    options?: JobsListJobHistoryNextOptionalParams
  ): Promise<JobsListJobHistoryNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobName,
        nextLink,
        options: operationOptions
      },
      listJobHistoryNextOperationSpec
    ) as Promise<JobsListJobHistoryNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinition
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.jobName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinition
    }
  },
  requestBody: Parameters.job,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const patchOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinition
    }
  },
  requestBody: Parameters.job,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.jobName
  ],
  serializer
};
const runOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/run",
  httpMethod: "POST",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.jobName
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobListResult
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName
  ],
  serializer
};
const listJobHistoryOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/history",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobHistoryListResult
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.filter,
    Parameters.top1
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.jobName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobListResult
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.nextLink2
  ],
  serializer
};
const listJobHistoryNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobHistoryListResult
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.filter,
    Parameters.top1
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.jobName,
    Parameters.nextLink3
  ],
  serializer
};
