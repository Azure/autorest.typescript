/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BatchAI } from "../batchAI";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ClusterCreateParameters,
  ClustersCreateResponse,
  ClusterUpdateParameters,
  ClustersUpdateResponse,
  ClustersGetResponse,
  ClustersListRemoteLoginInformationResponse,
  ClustersListByWorkspaceOptionalParams,
  ClustersListByWorkspaceResponse,
  ClustersListRemoteLoginInformationNextResponse,
  ClustersListByWorkspaceNextOptionalParams,
  ClustersListByWorkspaceNextResponse
} from "../models";

/**
 * Class representing a Clusters.
 */
export class Clusters {
  private readonly client: BatchAI;

  /**
   * Initialize a new instance of the class Clusters class.
   * @param client Reference to the service client
   */
  constructor(client: BatchAI) {
    this.client = client;
  }

  /**
   * Creates a Cluster in the given Workspace.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param parameters The parameters to provide for the Cluster creation.
   * @param clusterName The name of the cluster within the specified resource group. Cluster names can
   *                    only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The
   *                    name must be from 1 through 64 characters long.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    workspaceName: string,
    parameters: ClusterCreateParameters,
    clusterName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ClustersCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      workspaceName,
      parameters,
      clusterName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ClustersCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Updates properties of a Cluster.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param clusterName The name of the cluster within the specified resource group. Cluster names can
   *                    only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The
   *                    name must be from 1 through 64 characters long.
   * @param parameters Additional parameters for cluster update.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    workspaceName: string,
    clusterName: string,
    parameters: ClusterUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<ClustersUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        clusterName,
        parameters,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<ClustersUpdateResponse>;
  }

  /**
   * Deletes a Cluster.
   * @param options The options parameters.
   */
  async deleteModel(
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteModelOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteModelOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets information about a Cluster.
   * @param options The options parameters.
   */
  getModel(options?: coreHttp.OperationOptions): Promise<ClustersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getModelOperationSpec
    ) as Promise<ClustersGetResponse>;
  }

  /**
   * Get the IP address, port of all the compute nodes in the Cluster.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param clusterName The name of the cluster within the specified resource group. Cluster names can
   *                    only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The
   *                    name must be from 1 through 64 characters long.
   * @param options The options parameters.
   */
  listRemoteLoginInformation(
    resourceGroupName: string,
    workspaceName: string,
    clusterName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ClustersListRemoteLoginInformationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        clusterName,
        options: operationOptions
      },
      listRemoteLoginInformationOperationSpec
    ) as Promise<ClustersListRemoteLoginInformationResponse>;
  }

  /**
   * Gets information about Clusters associated with the given Workspace.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param options The options parameters.
   */
  listByWorkspace(
    resourceGroupName: string,
    workspaceName: string,
    options?: ClustersListByWorkspaceOptionalParams
  ): Promise<ClustersListByWorkspaceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, options: operationOptions },
      listByWorkspaceOperationSpec
    ) as Promise<ClustersListByWorkspaceResponse>;
  }

  /**
   * ListRemoteLoginInformationNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param nextLink The nextLink from the previous successful call to the ListRemoteLoginInformation
   *                 method.
   * @param clusterName The name of the cluster within the specified resource group. Cluster names can
   *                    only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The
   *                    name must be from 1 through 64 characters long.
   * @param options The options parameters.
   */
  listRemoteLoginInformationNext(
    resourceGroupName: string,
    workspaceName: string,
    nextLink: string,
    clusterName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ClustersListRemoteLoginInformationNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        nextLink,
        clusterName,
        options: operationOptions
      },
      listRemoteLoginInformationNextOperationSpec
    ) as Promise<ClustersListRemoteLoginInformationNextResponse>;
  }

  /**
   * ListByWorkspaceNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param nextLink The nextLink from the previous successful call to the ListByWorkspace method.
   * @param options The options parameters.
   */
  listByWorkspaceNext(
    resourceGroupName: string,
    workspaceName: string,
    nextLink: string,
    options?: ClustersListByWorkspaceNextOptionalParams
  ): Promise<ClustersListByWorkspaceNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, nextLink, options: operationOptions },
      listByWorkspaceNextOperationSpec
    ) as Promise<ClustersListByWorkspaceNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Cluster
    },
    201: {
      bodyMapper: Mappers.Cluster
    },
    202: {
      bodyMapper: Mappers.Cluster
    },
    204: {
      bodyMapper: Mappers.Cluster
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Cluster
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteModelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
const getModelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Cluster
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
const listRemoteLoginInformationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}/listRemoteLoginInformation",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RemoteLoginInformationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.clusterName
  ],
  serializer
};
const listByWorkspaceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClusterListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxResults6],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  serializer
};
const listRemoteLoginInformationNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RemoteLoginInformationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.nextLink5,
    Parameters.clusterName
  ],
  serializer
};
const listByWorkspaceNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClusterListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxResults6],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.nextLink2
  ],
  serializer
};
