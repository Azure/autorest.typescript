/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BatchAI } from "../batchAI";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  JobsListByExperimentOptionalParams,
  JobsListByExperimentResponse,
  JobCreateParameters,
  JobsCreateResponse,
  JobsGetResponse,
  JobsListOutputFilesOptions,
  JobsListOutputFilesResponse,
  JobsListRemoteLoginInformationResponse,
  JobsListByExperimentNextOptionalParams,
  JobsListByExperimentNextResponse,
  JobsListOutputFilesNextResponse,
  JobsListRemoteLoginInformationNextResponse
} from "../models";

/**
 * Class representing a Jobs.
 */
export class Jobs {
  private readonly client: BatchAI;

  /**
   * Initialize a new instance of the class Jobs class.
   * @param client Reference to the service client
   */
  constructor(client: BatchAI) {
    this.client = client;
  }

  /**
   * Gets a list of Jobs within the specified Experiment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param experimentName The name of the experiment. Experiment names can only contain a combination of
   *                       alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                       characters long.
   * @param options The options parameters.
   */
  listByExperiment(
    resourceGroupName: string,
    workspaceName: string,
    experimentName: string,
    options?: JobsListByExperimentOptionalParams
  ): Promise<JobsListByExperimentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        experimentName,
        options: operationOptions
      },
      listByExperimentOperationSpec
    ) as Promise<JobsListByExperimentResponse>;
  }

  /**
   * Creates a Job in the given Experiment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param experimentName The name of the experiment. Experiment names can only contain a combination of
   *                       alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                       characters long.
   * @param parameters The parameters to provide for job creation.
   * @param jobName The name of the job within the specified resource group. Job names can only contain a
   *                combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from
   *                1 through 64 characters long.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    workspaceName: string,
    experimentName: string,
    parameters: JobCreateParameters,
    jobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<JobsCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      workspaceName,
      experimentName,
      parameters,
      jobName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        JobsCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes a Job.
   * @param options The options parameters.
   */
  async deleteModel(
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteModelOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteModelOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets information about a Job.
   * @param options The options parameters.
   */
  getModel(options?: coreHttp.OperationOptions): Promise<JobsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getModelOperationSpec
    ) as Promise<JobsGetResponse>;
  }

  /**
   * List all directories and files inside the given directory of the Job's output directory (if the
   * output directory is on Azure File Share or Azure Storage Container).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param experimentName The name of the experiment. Experiment names can only contain a combination of
   *                       alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                       characters long.
   * @param jobName The name of the job within the specified resource group. Job names can only contain a
   *                combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from
   *                1 through 64 characters long.
   * @param jobsListOutputFilesOptions Parameter group
   * @param options The options parameters.
   */
  listOutputFiles(
    resourceGroupName: string,
    workspaceName: string,
    experimentName: string,
    jobName: string,
    jobsListOutputFilesOptions: JobsListOutputFilesOptions,
    options?: coreHttp.OperationOptions
  ): Promise<JobsListOutputFilesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        experimentName,
        jobName,
        jobsListOutputFilesOptions,
        options: operationOptions
      },
      listOutputFilesOperationSpec
    ) as Promise<JobsListOutputFilesResponse>;
  }

  /**
   * Gets a list of currently existing nodes which were used for the Job execution. The returned
   * information contains the node ID, its public IP and SSH port.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param experimentName The name of the experiment. Experiment names can only contain a combination of
   *                       alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                       characters long.
   * @param jobName The name of the job within the specified resource group. Job names can only contain a
   *                combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from
   *                1 through 64 characters long.
   * @param options The options parameters.
   */
  listRemoteLoginInformation(
    resourceGroupName: string,
    workspaceName: string,
    experimentName: string,
    jobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<JobsListRemoteLoginInformationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        experimentName,
        jobName,
        options: operationOptions
      },
      listRemoteLoginInformationOperationSpec
    ) as Promise<JobsListRemoteLoginInformationResponse>;
  }

  /**
   * Terminates a job.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param experimentName The name of the experiment. Experiment names can only contain a combination of
   *                       alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                       characters long.
   * @param jobName The name of the job within the specified resource group. Job names can only contain a
   *                combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from
   *                1 through 64 characters long.
   * @param options The options parameters.
   */
  async terminate(
    resourceGroupName: string,
    workspaceName: string,
    experimentName: string,
    jobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      workspaceName,
      experimentName,
      jobName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      terminateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: terminateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListByExperimentNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param experimentName The name of the experiment. Experiment names can only contain a combination of
   *                       alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                       characters long.
   * @param nextLink The nextLink from the previous successful call to the ListByExperiment method.
   * @param options The options parameters.
   */
  listByExperimentNext(
    resourceGroupName: string,
    workspaceName: string,
    experimentName: string,
    nextLink: string,
    options?: JobsListByExperimentNextOptionalParams
  ): Promise<JobsListByExperimentNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        experimentName,
        nextLink,
        options: operationOptions
      },
      listByExperimentNextOperationSpec
    ) as Promise<JobsListByExperimentNextResponse>;
  }

  /**
   * ListOutputFilesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param experimentName The name of the experiment. Experiment names can only contain a combination of
   *                       alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                       characters long.
   * @param jobName The name of the job within the specified resource group. Job names can only contain a
   *                combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from
   *                1 through 64 characters long.
   * @param nextLink The nextLink from the previous successful call to the ListOutputFiles method.
   * @param jobsListOutputFilesOptions Parameter group
   * @param options The options parameters.
   */
  listOutputFilesNext(
    resourceGroupName: string,
    workspaceName: string,
    experimentName: string,
    jobName: string,
    nextLink: string,
    jobsListOutputFilesOptions: JobsListOutputFilesOptions,
    options?: coreHttp.OperationOptions
  ): Promise<JobsListOutputFilesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        experimentName,
        jobName,
        nextLink,
        jobsListOutputFilesOptions,
        options: operationOptions
      },
      listOutputFilesNextOperationSpec
    ) as Promise<JobsListOutputFilesNextResponse>;
  }

  /**
   * ListRemoteLoginInformationNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param workspaceName The name of the workspace. Workspace names can only contain a combination of
   *                      alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                      characters long.
   * @param experimentName The name of the experiment. Experiment names can only contain a combination of
   *                       alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64
   *                       characters long.
   * @param jobName The name of the job within the specified resource group. Job names can only contain a
   *                combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from
   *                1 through 64 characters long.
   * @param nextLink The nextLink from the previous successful call to the ListRemoteLoginInformation
   *                 method.
   * @param options The options parameters.
   */
  listRemoteLoginInformationNext(
    resourceGroupName: string,
    workspaceName: string,
    experimentName: string,
    jobName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<JobsListRemoteLoginInformationNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        experimentName,
        jobName,
        nextLink,
        options: operationOptions
      },
      listRemoteLoginInformationNextOperationSpec
    ) as Promise<JobsListRemoteLoginInformationNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByExperimentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxResults3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.experimentName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    201: {
      bodyMapper: Mappers.Job
    },
    202: {
      bodyMapper: Mappers.Job
    },
    204: {
      bodyMapper: Mappers.Job
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.experimentName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteModelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
const getModelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
const listOutputFilesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}/listOutputFiles",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FileListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.outputdirectoryid,
    Parameters.directory,
    Parameters.linkexpiryinminutes,
    Parameters.maxResults4
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.experimentName,
    Parameters.jobName
  ],
  serializer
};
const listRemoteLoginInformationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}/listRemoteLoginInformation",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RemoteLoginInformationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.experimentName,
    Parameters.jobName
  ],
  serializer
};
const terminateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}/terminate",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.experimentName,
    Parameters.jobName
  ],
  serializer
};
const listByExperimentNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxResults3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.experimentName,
    Parameters.nextLink3
  ],
  serializer
};
const listOutputFilesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FileListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.outputdirectoryid,
    Parameters.directory,
    Parameters.linkexpiryinminutes,
    Parameters.maxResults4
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.experimentName,
    Parameters.jobName,
    Parameters.nextLink4
  ],
  serializer
};
const listRemoteLoginInformationNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RemoteLoginInformationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.experimentName,
    Parameters.jobName,
    Parameters.nextLink5
  ],
  serializer
};
