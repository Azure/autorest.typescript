/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListUsagesResult: coreHttp.CompositeMapper = {
  serializedName: "ListUsagesResult",
  type: {
    name: "Composite",
    className: "ListUsagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Usage" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: coreHttp.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        defaultValue: "Count",
        serializedName: "unit",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const UsageName: coreHttp.CompositeMapper = {
  serializedName: "UsageName",
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceListResult: coreHttp.CompositeMapper = {
  serializedName: "WorkspaceListResult",
  type: {
    name: "Composite",
    className: "WorkspaceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Workspace" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      typeModel: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const Workspace: coreHttp.CompositeMapper = {
  serializedName: "Workspace",
  type: {
    name: "Composite",
    className: "Workspace",
    modelProperties: {
      ...Resource.type.modelProperties,
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningStateTransitionTime: {
        serializedName: "properties.provisioningStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CloudError: coreHttp.CompositeMapper = {
  serializedName: "CloudError",
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreHttp.CompositeMapper = {
  serializedName: "CloudErrorBody",
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudErrorBody" } }
        }
      }
    }
  }
};

export const WorkspaceCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "WorkspaceCreateParameters",
  type: {
    name: "Composite",
    className: "WorkspaceCreateParameters",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const WorkspaceUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "WorkspaceUpdateParameters",
  type: {
    name: "Composite",
    className: "WorkspaceUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ExperimentListResult: coreHttp.CompositeMapper = {
  serializedName: "ExperimentListResult",
  type: {
    name: "Composite",
    className: "ExperimentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Experiment" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreHttp.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      typeModel: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Experiment: coreHttp.CompositeMapper = {
  serializedName: "Experiment",
  type: {
    name: "Composite",
    className: "Experiment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningStateTransitionTime: {
        serializedName: "properties.provisioningStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const JobListResult: coreHttp.CompositeMapper = {
  serializedName: "JobListResult",
  type: {
    name: "Composite",
    className: "JobListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Job" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Job: coreHttp.CompositeMapper = {
  serializedName: "Job",
  type: {
    name: "Composite",
    className: "Job",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      schedulingPriority: {
        serializedName: "properties.schedulingPriority",
        type: {
          name: "String"
        }
      },
      cluster: {
        serializedName: "cluster",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      mountVolumes: {
        serializedName: "mountVolumes",
        type: {
          name: "Composite",
          className: "MountVolumes"
        }
      },
      nodeCount: {
        serializedName: "properties.nodeCount",
        type: {
          name: "Number"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "ContainerSettings"
        }
      },
      toolType: {
        serializedName: "properties.toolType",
        type: {
          name: "String"
        }
      },
      cntkSettings: {
        serializedName: "cntkSettings",
        type: {
          name: "Composite",
          className: "CNTKsettings"
        }
      },
      pyTorchSettings: {
        serializedName: "pyTorchSettings",
        type: {
          name: "Composite",
          className: "PyTorchSettings"
        }
      },
      tensorFlowSettings: {
        serializedName: "tensorFlowSettings",
        type: {
          name: "Composite",
          className: "TensorFlowSettings"
        }
      },
      caffeSettings: {
        serializedName: "caffeSettings",
        type: {
          name: "Composite",
          className: "CaffeSettings"
        }
      },
      caffe2Settings: {
        serializedName: "caffe2Settings",
        type: {
          name: "Composite",
          className: "Caffe2Settings"
        }
      },
      chainerSettings: {
        serializedName: "chainerSettings",
        type: {
          name: "Composite",
          className: "ChainerSettings"
        }
      },
      customToolkitSettings: {
        serializedName: "customToolkitSettings",
        type: {
          name: "Composite",
          className: "CustomToolkitSettings"
        }
      },
      customMpiSettings: {
        serializedName: "customMpiSettings",
        type: {
          name: "Composite",
          className: "CustomMpiSettings"
        }
      },
      horovodSettings: {
        serializedName: "horovodSettings",
        type: {
          name: "Composite",
          className: "HorovodSettings"
        }
      },
      jobPreparation: {
        serializedName: "jobPreparation",
        type: {
          name: "Composite",
          className: "JobPreparation"
        }
      },
      jobOutputDirectoryPathSegment: {
        serializedName: "properties.jobOutputDirectoryPathSegment",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stdOutErrPathPrefix: {
        serializedName: "properties.stdOutErrPathPrefix",
        type: {
          name: "String"
        }
      },
      inputDirectories: {
        serializedName: "properties.inputDirectories",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InputDirectory" } }
        }
      },
      outputDirectories: {
        serializedName: "properties.outputDirectories",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OutputDirectory" } }
        }
      },
      environmentVariables: {
        serializedName: "properties.environmentVariables",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentVariable" }
          }
        }
      },
      secrets: {
        serializedName: "properties.secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentVariableWithSecretValue"
            }
          }
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "JobPropertiesConstraints"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningStateTransitionTime: {
        serializedName: "properties.provisioningStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      executionState: {
        serializedName: "properties.executionState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      executionStateTransitionTime: {
        serializedName: "properties.executionStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      executionInfo: {
        serializedName: "executionInfo",
        type: {
          name: "Composite",
          className: "JobPropertiesExecutionInfo"
        }
      }
    }
  }
};

export const ResourceId: coreHttp.CompositeMapper = {
  serializedName: "ResourceId",
  type: {
    name: "Composite",
    className: "ResourceId",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MountVolumes: coreHttp.CompositeMapper = {
  serializedName: "MountVolumes",
  type: {
    name: "Composite",
    className: "MountVolumes",
    modelProperties: {
      azureFileShares: {
        serializedName: "azureFileShares",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AzureFileShareReference" }
          }
        }
      },
      azureBlobFileSystems: {
        serializedName: "azureBlobFileSystems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureBlobFileSystemReference"
            }
          }
        }
      },
      fileServers: {
        serializedName: "fileServers",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "FileServerReference" }
          }
        }
      },
      unmanagedFileSystems: {
        serializedName: "unmanagedFileSystems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UnmanagedFileSystemReference"
            }
          }
        }
      }
    }
  }
};

export const AzureFileShareReference: coreHttp.CompositeMapper = {
  serializedName: "AzureFileShareReference",
  type: {
    name: "Composite",
    className: "AzureFileShareReference",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      },
      azureFileUrl: {
        serializedName: "azureFileUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "AzureStorageCredentialsInfo"
        }
      },
      relativeMountPath: {
        serializedName: "relativeMountPath",
        required: true,
        type: {
          name: "String"
        }
      },
      fileMode: {
        defaultValue: "0777",
        serializedName: "fileMode",
        type: {
          name: "String"
        }
      },
      directoryMode: {
        defaultValue: "0777",
        serializedName: "directoryMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureStorageCredentialsInfo: coreHttp.CompositeMapper = {
  serializedName: "AzureStorageCredentialsInfo",
  type: {
    name: "Composite",
    className: "AzureStorageCredentialsInfo",
    modelProperties: {
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      },
      accountKeySecretReference: {
        serializedName: "accountKeySecretReference",
        type: {
          name: "Composite",
          className: "KeyVaultSecretReference"
        }
      }
    }
  }
};

export const KeyVaultSecretReference: coreHttp.CompositeMapper = {
  serializedName: "KeyVaultSecretReference",
  type: {
    name: "Composite",
    className: "KeyVaultSecretReference",
    modelProperties: {
      sourceVault: {
        serializedName: "sourceVault",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      secretUrl: {
        serializedName: "secretUrl",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBlobFileSystemReference: coreHttp.CompositeMapper = {
  serializedName: "AzureBlobFileSystemReference",
  type: {
    name: "Composite",
    className: "AzureBlobFileSystemReference",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "containerName",
        required: true,
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "AzureStorageCredentialsInfo"
        }
      },
      relativeMountPath: {
        serializedName: "relativeMountPath",
        required: true,
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileServerReference: coreHttp.CompositeMapper = {
  serializedName: "FileServerReference",
  type: {
    name: "Composite",
    className: "FileServerReference",
    modelProperties: {
      fileServer: {
        serializedName: "fileServer",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      sourceDirectory: {
        serializedName: "sourceDirectory",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        serializedName: "relativeMountPath",
        required: true,
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnmanagedFileSystemReference: coreHttp.CompositeMapper = {
  serializedName: "UnmanagedFileSystemReference",
  type: {
    name: "Composite",
    className: "UnmanagedFileSystemReference",
    modelProperties: {
      mountCommand: {
        serializedName: "mountCommand",
        required: true,
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        serializedName: "relativeMountPath",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerSettings: coreHttp.CompositeMapper = {
  serializedName: "ContainerSettings",
  type: {
    name: "Composite",
    className: "ContainerSettings",
    modelProperties: {
      imageSourceRegistry: {
        serializedName: "imageSourceRegistry",
        type: {
          name: "Composite",
          className: "ImageSourceRegistry"
        }
      },
      shmSize: {
        serializedName: "shmSize",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageSourceRegistry: coreHttp.CompositeMapper = {
  serializedName: "ImageSourceRegistry",
  type: {
    name: "Composite",
    className: "ImageSourceRegistry",
    modelProperties: {
      serverUrl: {
        serializedName: "serverUrl",
        type: {
          name: "String"
        }
      },
      image: {
        serializedName: "image",
        required: true,
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "PrivateRegistryCredentials"
        }
      }
    }
  }
};

export const PrivateRegistryCredentials: coreHttp.CompositeMapper = {
  serializedName: "PrivateRegistryCredentials",
  type: {
    name: "Composite",
    className: "PrivateRegistryCredentials",
    modelProperties: {
      username: {
        serializedName: "username",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      passwordSecretReference: {
        serializedName: "passwordSecretReference",
        type: {
          name: "Composite",
          className: "KeyVaultSecretReference"
        }
      }
    }
  }
};

export const CNTKsettings: coreHttp.CompositeMapper = {
  serializedName: "CNTKsettings",
  type: {
    name: "Composite",
    className: "CNTKsettings",
    modelProperties: {
      languageType: {
        serializedName: "languageType",
        type: {
          name: "String"
        }
      },
      configFilePath: {
        serializedName: "configFilePath",
        type: {
          name: "String"
        }
      },
      pythonScriptFilePath: {
        serializedName: "pythonScriptFilePath",
        type: {
          name: "String"
        }
      },
      pythonInterpreterPath: {
        serializedName: "pythonInterpreterPath",
        type: {
          name: "String"
        }
      },
      commandLineArgs: {
        serializedName: "commandLineArgs",
        type: {
          name: "String"
        }
      },
      processCount: {
        serializedName: "processCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PyTorchSettings: coreHttp.CompositeMapper = {
  serializedName: "PyTorchSettings",
  type: {
    name: "Composite",
    className: "PyTorchSettings",
    modelProperties: {
      pythonScriptFilePath: {
        serializedName: "pythonScriptFilePath",
        required: true,
        type: {
          name: "String"
        }
      },
      pythonInterpreterPath: {
        serializedName: "pythonInterpreterPath",
        type: {
          name: "String"
        }
      },
      commandLineArgs: {
        serializedName: "commandLineArgs",
        type: {
          name: "String"
        }
      },
      processCount: {
        serializedName: "processCount",
        type: {
          name: "Number"
        }
      },
      communicationBackend: {
        serializedName: "communicationBackend",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TensorFlowSettings: coreHttp.CompositeMapper = {
  serializedName: "TensorFlowSettings",
  type: {
    name: "Composite",
    className: "TensorFlowSettings",
    modelProperties: {
      pythonScriptFilePath: {
        serializedName: "pythonScriptFilePath",
        required: true,
        type: {
          name: "String"
        }
      },
      pythonInterpreterPath: {
        serializedName: "pythonInterpreterPath",
        type: {
          name: "String"
        }
      },
      masterCommandLineArgs: {
        serializedName: "masterCommandLineArgs",
        type: {
          name: "String"
        }
      },
      workerCommandLineArgs: {
        serializedName: "workerCommandLineArgs",
        type: {
          name: "String"
        }
      },
      parameterServerCommandLineArgs: {
        serializedName: "parameterServerCommandLineArgs",
        type: {
          name: "String"
        }
      },
      workerCount: {
        serializedName: "workerCount",
        type: {
          name: "Number"
        }
      },
      parameterServerCount: {
        serializedName: "parameterServerCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CaffeSettings: coreHttp.CompositeMapper = {
  serializedName: "CaffeSettings",
  type: {
    name: "Composite",
    className: "CaffeSettings",
    modelProperties: {
      configFilePath: {
        serializedName: "configFilePath",
        type: {
          name: "String"
        }
      },
      pythonScriptFilePath: {
        serializedName: "pythonScriptFilePath",
        type: {
          name: "String"
        }
      },
      pythonInterpreterPath: {
        serializedName: "pythonInterpreterPath",
        type: {
          name: "String"
        }
      },
      commandLineArgs: {
        serializedName: "commandLineArgs",
        type: {
          name: "String"
        }
      },
      processCount: {
        serializedName: "processCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Caffe2Settings: coreHttp.CompositeMapper = {
  serializedName: "Caffe2Settings",
  type: {
    name: "Composite",
    className: "Caffe2Settings",
    modelProperties: {
      pythonScriptFilePath: {
        serializedName: "pythonScriptFilePath",
        required: true,
        type: {
          name: "String"
        }
      },
      pythonInterpreterPath: {
        serializedName: "pythonInterpreterPath",
        type: {
          name: "String"
        }
      },
      commandLineArgs: {
        serializedName: "commandLineArgs",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ChainerSettings: coreHttp.CompositeMapper = {
  serializedName: "ChainerSettings",
  type: {
    name: "Composite",
    className: "ChainerSettings",
    modelProperties: {
      pythonScriptFilePath: {
        serializedName: "pythonScriptFilePath",
        required: true,
        type: {
          name: "String"
        }
      },
      pythonInterpreterPath: {
        serializedName: "pythonInterpreterPath",
        type: {
          name: "String"
        }
      },
      commandLineArgs: {
        serializedName: "commandLineArgs",
        type: {
          name: "String"
        }
      },
      processCount: {
        serializedName: "processCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CustomToolkitSettings: coreHttp.CompositeMapper = {
  serializedName: "CustomToolkitSettings",
  type: {
    name: "Composite",
    className: "CustomToolkitSettings",
    modelProperties: {
      commandLine: {
        serializedName: "commandLine",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomMpiSettings: coreHttp.CompositeMapper = {
  serializedName: "CustomMpiSettings",
  type: {
    name: "Composite",
    className: "CustomMpiSettings",
    modelProperties: {
      commandLine: {
        serializedName: "commandLine",
        required: true,
        type: {
          name: "String"
        }
      },
      processCount: {
        serializedName: "processCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HorovodSettings: coreHttp.CompositeMapper = {
  serializedName: "HorovodSettings",
  type: {
    name: "Composite",
    className: "HorovodSettings",
    modelProperties: {
      pythonScriptFilePath: {
        serializedName: "pythonScriptFilePath",
        required: true,
        type: {
          name: "String"
        }
      },
      pythonInterpreterPath: {
        serializedName: "pythonInterpreterPath",
        type: {
          name: "String"
        }
      },
      commandLineArgs: {
        serializedName: "commandLineArgs",
        type: {
          name: "String"
        }
      },
      processCount: {
        serializedName: "processCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobPreparation: coreHttp.CompositeMapper = {
  serializedName: "JobPreparation",
  type: {
    name: "Composite",
    className: "JobPreparation",
    modelProperties: {
      commandLine: {
        serializedName: "commandLine",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InputDirectory: coreHttp.CompositeMapper = {
  serializedName: "InputDirectory",
  type: {
    name: "Composite",
    className: "InputDirectory",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutputDirectory: coreHttp.CompositeMapper = {
  serializedName: "OutputDirectory",
  type: {
    name: "Composite",
    className: "OutputDirectory",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      pathPrefix: {
        serializedName: "pathPrefix",
        required: true,
        type: {
          name: "String"
        }
      },
      pathSuffix: {
        serializedName: "pathSuffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentVariable: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentVariable",
  type: {
    name: "Composite",
    className: "EnvironmentVariable",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentVariableWithSecretValue: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentVariableWithSecretValue",
  type: {
    name: "Composite",
    className: "EnvironmentVariableWithSecretValue",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      valueSecretReference: {
        serializedName: "valueSecretReference",
        type: {
          name: "Composite",
          className: "KeyVaultSecretReference"
        }
      }
    }
  }
};

export const JobPropertiesConstraints: coreHttp.CompositeMapper = {
  serializedName: "JobPropertiesConstraints",
  type: {
    name: "Composite",
    className: "JobPropertiesConstraints",
    modelProperties: {
      maxWallClockTime: {
        defaultValue: "7.00:00:00",
        serializedName: "maxWallClockTime",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const JobPropertiesExecutionInfo: coreHttp.CompositeMapper = {
  serializedName: "JobPropertiesExecutionInfo",
  type: {
    name: "Composite",
    className: "JobPropertiesExecutionInfo",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "BatchAIError" } }
        }
      }
    }
  }
};

export const BatchAIError: coreHttp.CompositeMapper = {
  serializedName: "BatchAIError",
  type: {
    name: "Composite",
    className: "BatchAIError",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NameValuePair" } }
        }
      }
    }
  }
};

export const NameValuePair: coreHttp.CompositeMapper = {
  serializedName: "NameValuePair",
  type: {
    name: "Composite",
    className: "NameValuePair",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "JobCreateParameters",
  type: {
    name: "Composite",
    className: "JobCreateParameters",
    modelProperties: {
      schedulingPriority: {
        serializedName: "properties.schedulingPriority",
        type: {
          name: "String"
        }
      },
      cluster: {
        serializedName: "cluster",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      mountVolumes: {
        serializedName: "mountVolumes",
        type: {
          name: "Composite",
          className: "MountVolumes"
        }
      },
      nodeCount: {
        serializedName: "properties.nodeCount",
        type: {
          name: "Number"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "ContainerSettings"
        }
      },
      cntkSettings: {
        serializedName: "cntkSettings",
        type: {
          name: "Composite",
          className: "CNTKsettings"
        }
      },
      pyTorchSettings: {
        serializedName: "pyTorchSettings",
        type: {
          name: "Composite",
          className: "PyTorchSettings"
        }
      },
      tensorFlowSettings: {
        serializedName: "tensorFlowSettings",
        type: {
          name: "Composite",
          className: "TensorFlowSettings"
        }
      },
      caffeSettings: {
        serializedName: "caffeSettings",
        type: {
          name: "Composite",
          className: "CaffeSettings"
        }
      },
      caffe2Settings: {
        serializedName: "caffe2Settings",
        type: {
          name: "Composite",
          className: "Caffe2Settings"
        }
      },
      chainerSettings: {
        serializedName: "chainerSettings",
        type: {
          name: "Composite",
          className: "ChainerSettings"
        }
      },
      customToolkitSettings: {
        serializedName: "customToolkitSettings",
        type: {
          name: "Composite",
          className: "CustomToolkitSettings"
        }
      },
      customMpiSettings: {
        serializedName: "customMpiSettings",
        type: {
          name: "Composite",
          className: "CustomMpiSettings"
        }
      },
      horovodSettings: {
        serializedName: "horovodSettings",
        type: {
          name: "Composite",
          className: "HorovodSettings"
        }
      },
      jobPreparation: {
        serializedName: "jobPreparation",
        type: {
          name: "Composite",
          className: "JobPreparation"
        }
      },
      stdOutErrPathPrefix: {
        serializedName: "properties.stdOutErrPathPrefix",
        type: {
          name: "String"
        }
      },
      inputDirectories: {
        serializedName: "properties.inputDirectories",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InputDirectory" } }
        }
      },
      outputDirectories: {
        serializedName: "properties.outputDirectories",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OutputDirectory" } }
        }
      },
      environmentVariables: {
        serializedName: "properties.environmentVariables",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentVariable" }
          }
        }
      },
      secrets: {
        serializedName: "properties.secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentVariableWithSecretValue"
            }
          }
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "JobBasePropertiesConstraints"
        }
      }
    }
  }
};

export const JobBasePropertiesConstraints: coreHttp.CompositeMapper = {
  serializedName: "JobBasePropertiesConstraints",
  type: {
    name: "Composite",
    className: "JobBasePropertiesConstraints",
    modelProperties: {
      maxWallClockTime: {
        defaultValue: "7.00:00:00",
        serializedName: "maxWallClockTime",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const FileListResult: coreHttp.CompositeMapper = {
  serializedName: "FileListResult",
  type: {
    name: "Composite",
    className: "FileListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "File" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const File: coreHttp.CompositeMapper = {
  serializedName: "File",
  type: {
    name: "Composite",
    className: "File",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fileType: {
        serializedName: "fileType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      downloadUrl: {
        serializedName: "downloadUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "properties.lastModified",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      contentLength: {
        serializedName: "properties.contentLength",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RemoteLoginInformationListResult: coreHttp.CompositeMapper = {
  serializedName: "RemoteLoginInformationListResult",
  type: {
    name: "Composite",
    className: "RemoteLoginInformationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RemoteLoginInformation" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RemoteLoginInformation: coreHttp.CompositeMapper = {
  serializedName: "RemoteLoginInformation",
  type: {
    name: "Composite",
    className: "RemoteLoginInformation",
    modelProperties: {
      nodeId: {
        serializedName: "nodeId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FileServerCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "FileServerCreateParameters",
  type: {
    name: "Composite",
    className: "FileServerCreateParameters",
    modelProperties: {
      vmSize: {
        serializedName: "properties.vmSize",
        type: {
          name: "String"
        }
      },
      sshConfiguration: {
        serializedName: "sshConfiguration",
        type: {
          name: "Composite",
          className: "SshConfiguration"
        }
      },
      dataDisks: {
        serializedName: "dataDisks",
        type: {
          name: "Composite",
          className: "DataDisks"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      }
    }
  }
};

export const SshConfiguration: coreHttp.CompositeMapper = {
  serializedName: "SshConfiguration",
  type: {
    name: "Composite",
    className: "SshConfiguration",
    modelProperties: {
      publicIPsToAllow: {
        serializedName: "publicIPsToAllow",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SshConfigurationPublicIPsToAllowItem"
          }
        }
      },
      userAccountSettings: {
        serializedName: "userAccountSettings",
        type: {
          name: "Composite",
          className: "UserAccountSettings"
        }
      }
    }
  }
};

export const UserAccountSettings: coreHttp.CompositeMapper = {
  serializedName: "UserAccountSettings",
  type: {
    name: "Composite",
    className: "UserAccountSettings",
    modelProperties: {
      adminUserName: {
        serializedName: "adminUserName",
        required: true,
        type: {
          name: "String"
        }
      },
      adminUserSshPublicKey: {
        serializedName: "adminUserSshPublicKey",
        type: {
          name: "String"
        }
      },
      adminUserPassword: {
        serializedName: "adminUserPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataDisks: coreHttp.CompositeMapper = {
  serializedName: "DataDisks",
  type: {
    name: "Composite",
    className: "DataDisks",
    modelProperties: {
      diskSizeInGB: {
        serializedName: "diskSizeInGB",
        required: true,
        type: {
          name: "Number"
        }
      },
      cachingType: {
        defaultValue: "none",
        serializedName: "cachingType",
        type: {
          name: "Enum",
          allowedValues: ["none", "readonly", "readwrite"]
        }
      },
      diskCount: {
        serializedName: "diskCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      storageAccountType: {
        serializedName: "storageAccountType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileServer: coreHttp.CompositeMapper = {
  serializedName: "FileServer",
  type: {
    name: "Composite",
    className: "FileServer",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      vmSize: {
        serializedName: "properties.vmSize",
        type: {
          name: "String"
        }
      },
      sshConfiguration: {
        serializedName: "sshConfiguration",
        type: {
          name: "Composite",
          className: "SshConfiguration"
        }
      },
      dataDisks: {
        serializedName: "dataDisks",
        type: {
          name: "Composite",
          className: "DataDisks"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      mountSettings: {
        serializedName: "mountSettings",
        type: {
          name: "Composite",
          className: "MountSettings"
        }
      },
      provisioningStateTransitionTime: {
        serializedName: "properties.provisioningStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MountSettings: coreHttp.CompositeMapper = {
  serializedName: "MountSettings",
  type: {
    name: "Composite",
    className: "MountSettings",
    modelProperties: {
      mountPoint: {
        serializedName: "mountPoint",
        type: {
          name: "String"
        }
      },
      fileServerPublicIP: {
        serializedName: "fileServerPublicIP",
        type: {
          name: "String"
        }
      },
      fileServerInternalIP: {
        serializedName: "fileServerInternalIP",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileServerListResult: coreHttp.CompositeMapper = {
  serializedName: "FileServerListResult",
  type: {
    name: "Composite",
    className: "FileServerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FileServer" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "ClusterCreateParameters",
  type: {
    name: "Composite",
    className: "ClusterCreateParameters",
    modelProperties: {
      vmSize: {
        serializedName: "properties.vmSize",
        type: {
          name: "String"
        }
      },
      vmPriority: {
        serializedName: "properties.vmPriority",
        type: {
          name: "Enum",
          allowedValues: ["dedicated", "lowpriority"]
        }
      },
      scaleSettings: {
        serializedName: "scaleSettings",
        type: {
          name: "Composite",
          className: "ScaleSettings"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      nodeSetup: {
        serializedName: "nodeSetup",
        type: {
          name: "Composite",
          className: "NodeSetup"
        }
      },
      userAccountSettings: {
        serializedName: "userAccountSettings",
        type: {
          name: "Composite",
          className: "UserAccountSettings"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      }
    }
  }
};

export const ScaleSettings: coreHttp.CompositeMapper = {
  serializedName: "ScaleSettings",
  type: {
    name: "Composite",
    className: "ScaleSettings",
    modelProperties: {
      manual: {
        serializedName: "manual",
        type: {
          name: "Composite",
          className: "ManualScaleSettings"
        }
      },
      autoScale: {
        serializedName: "autoScale",
        type: {
          name: "Composite",
          className: "AutoScaleSettings"
        }
      }
    }
  }
};

export const ManualScaleSettings: coreHttp.CompositeMapper = {
  serializedName: "ManualScaleSettings",
  type: {
    name: "Composite",
    className: "ManualScaleSettings",
    modelProperties: {
      targetNodeCount: {
        serializedName: "targetNodeCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      nodeDeallocationOption: {
        defaultValue: "requeue",
        serializedName: "nodeDeallocationOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoScaleSettings: coreHttp.CompositeMapper = {
  serializedName: "AutoScaleSettings",
  type: {
    name: "Composite",
    className: "AutoScaleSettings",
    modelProperties: {
      minimumNodeCount: {
        serializedName: "minimumNodeCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      maximumNodeCount: {
        serializedName: "maximumNodeCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      initialNodeCount: {
        serializedName: "initialNodeCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualMachineConfiguration: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachineConfiguration",
  type: {
    name: "Composite",
    className: "VirtualMachineConfiguration",
    modelProperties: {
      imageReference: {
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      }
    }
  }
};

export const ImageReference: coreHttp.CompositeMapper = {
  serializedName: "ImageReference",
  type: {
    name: "Composite",
    className: "ImageReference",
    modelProperties: {
      publisher: {
        serializedName: "publisher",
        required: true,
        type: {
          name: "String"
        }
      },
      offer: {
        serializedName: "offer",
        required: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        required: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      virtualMachineImageId: {
        serializedName: "virtualMachineImageId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeSetup: coreHttp.CompositeMapper = {
  serializedName: "NodeSetup",
  type: {
    name: "Composite",
    className: "NodeSetup",
    modelProperties: {
      setupTask: {
        serializedName: "setupTask",
        type: {
          name: "Composite",
          className: "SetupTask"
        }
      },
      mountVolumes: {
        serializedName: "mountVolumes",
        type: {
          name: "Composite",
          className: "MountVolumes"
        }
      },
      performanceCountersSettings: {
        serializedName: "performanceCountersSettings",
        type: {
          name: "Composite",
          className: "PerformanceCountersSettings"
        }
      }
    }
  }
};

export const SetupTask: coreHttp.CompositeMapper = {
  serializedName: "SetupTask",
  type: {
    name: "Composite",
    className: "SetupTask",
    modelProperties: {
      commandLine: {
        serializedName: "commandLine",
        required: true,
        type: {
          name: "String"
        }
      },
      environmentVariables: {
        serializedName: "environmentVariables",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentVariable" }
          }
        }
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentVariableWithSecretValue"
            }
          }
        }
      },
      stdOutErrPathPrefix: {
        serializedName: "stdOutErrPathPrefix",
        required: true,
        type: {
          name: "String"
        }
      },
      stdOutErrPathSuffix: {
        serializedName: "stdOutErrPathSuffix",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PerformanceCountersSettings: coreHttp.CompositeMapper = {
  serializedName: "PerformanceCountersSettings",
  type: {
    name: "Composite",
    className: "PerformanceCountersSettings",
    modelProperties: {
      appInsightsReference: {
        serializedName: "appInsightsReference",
        type: {
          name: "Composite",
          className: "AppInsightsReference"
        }
      }
    }
  }
};

export const AppInsightsReference: coreHttp.CompositeMapper = {
  serializedName: "AppInsightsReference",
  type: {
    name: "Composite",
    className: "AppInsightsReference",
    modelProperties: {
      component: {
        serializedName: "component",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      instrumentationKey: {
        serializedName: "instrumentationKey",
        type: {
          name: "String"
        }
      },
      instrumentationKeySecretReference: {
        serializedName: "instrumentationKeySecretReference",
        type: {
          name: "Composite",
          className: "KeyVaultSecretReference"
        }
      }
    }
  }
};

export const Cluster: coreHttp.CompositeMapper = {
  serializedName: "Cluster",
  type: {
    name: "Composite",
    className: "Cluster",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      vmSize: {
        serializedName: "properties.vmSize",
        type: {
          name: "String"
        }
      },
      vmPriority: {
        serializedName: "properties.vmPriority",
        type: {
          name: "Enum",
          allowedValues: ["dedicated", "lowpriority"]
        }
      },
      scaleSettings: {
        serializedName: "scaleSettings",
        type: {
          name: "Composite",
          className: "ScaleSettings"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      nodeSetup: {
        serializedName: "nodeSetup",
        type: {
          name: "Composite",
          className: "NodeSetup"
        }
      },
      userAccountSettings: {
        serializedName: "userAccountSettings",
        type: {
          name: "Composite",
          className: "UserAccountSettings"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningStateTransitionTime: {
        serializedName: "properties.provisioningStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      allocationState: {
        serializedName: "properties.allocationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allocationStateTransitionTime: {
        serializedName: "properties.allocationStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      errors: {
        serializedName: "properties.errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "BatchAIError" } }
        }
      },
      currentNodeCount: {
        serializedName: "properties.currentNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nodeStateCounts: {
        serializedName: "nodeStateCounts",
        type: {
          name: "Composite",
          className: "NodeStateCounts"
        }
      }
    }
  }
};

export const NodeStateCounts: coreHttp.CompositeMapper = {
  serializedName: "NodeStateCounts",
  type: {
    name: "Composite",
    className: "NodeStateCounts",
    modelProperties: {
      idleNodeCount: {
        serializedName: "idleNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      runningNodeCount: {
        serializedName: "runningNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      preparingNodeCount: {
        serializedName: "preparingNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unusableNodeCount: {
        serializedName: "unusableNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      leavingNodeCount: {
        serializedName: "leavingNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ClusterUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "ClusterUpdateParameters",
  type: {
    name: "Composite",
    className: "ClusterUpdateParameters",
    modelProperties: {
      scaleSettings: {
        serializedName: "scaleSettings",
        type: {
          name: "Composite",
          className: "ScaleSettings"
        }
      }
    }
  }
};

export const ClusterListResult: coreHttp.CompositeMapper = {
  serializedName: "ClusterListResult",
  type: {
    name: "Composite",
    className: "ClusterListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Cluster" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
