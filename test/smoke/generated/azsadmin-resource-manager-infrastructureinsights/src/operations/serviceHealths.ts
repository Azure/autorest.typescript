/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { InfrastructureInsightsAdminClient } from "../infrastructureInsightsAdminClient";
import {
  ServiceHealthsListOptionalParams,
  ServiceHealthsListResponse,
  ServiceHealthsGetResponse,
  ServiceHealthsListNextOptionalParams,
  ServiceHealthsListNextResponse
} from "../models";

/**
 * Class representing a ServiceHealths.
 */
export class ServiceHealths {
  private readonly client: InfrastructureInsightsAdminClient;

  /**
   * Initialize a new instance of the class ServiceHealths class.
   * @param client Reference to the service client
   */
  constructor(client: InfrastructureInsightsAdminClient) {
    this.client = client;
  }

  /**
   * Returns the list of all resource provider health states.
   * @param resourceGroupName The name of the resource group.
   * @param location Name of the region
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    location: string,
    options?: ServiceHealthsListOptionalParams
  ): Promise<ServiceHealthsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, location, options: operationOptions },
      listOperationSpec
    ) as Promise<ServiceHealthsListResponse>;
  }

  /**
   * Returns the requested service health object.
   * @param resourceGroupName The name of the resource group.
   * @param location Name of the region
   * @param serviceHealth Service Health name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    location: string,
    serviceHealth: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceHealthsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, location, serviceHealth, options: operationOptions },
      getOperationSpec
    ) as Promise<ServiceHealthsGetResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroupName The name of the resource group.
   * @param location Name of the region
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroupName: string,
    location: string,
    options?: ServiceHealthsListNextOptionalParams
  ): Promise<ServiceHealthsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroupName, location, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ServiceHealthsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.InfrastructureInsights.Admin/regionHealths/{location}/serviceHealths",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceHealthList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.InfrastructureInsights.Admin/regionHealths/{location}/serviceHealths/{serviceHealth}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceHealth
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.serviceHealth
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceHealthList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  serializer
};
