/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { InfrastructureInsightsAdminClient } from "../infrastructureInsightsAdminClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  AlertsListOptionalParams,
  AlertsListResponse,
  AlertsGetResponse,
  Alert,
  AlertsCloseResponse,
  AlertsListNextOptionalParams,
  AlertsListNextResponse
} from "../models";

/**
 * Class representing a Alerts.
 */
export class Alerts {
  private readonly client: InfrastructureInsightsAdminClient;

  /**
   * Initialize a new instance of the class Alerts class.
   * @param client Reference to the service client
   */
  constructor(client: InfrastructureInsightsAdminClient) {
    this.client = client;
  }

  /**
   * Returns the list of all alerts in a given region.
   * @param resourceGroupName The name of the resource group.
   * @param location Name of the region
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    location: string,
    options?: AlertsListOptionalParams
  ): Promise<AlertsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, location, options: operationOptions },
      listOperationSpec
    ) as Promise<AlertsListResponse>;
  }

  /**
   * Returns the requested an alert.
   * @param resourceGroupName The name of the resource group.
   * @param location Name of the region
   * @param alertName Name of the alert.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    location: string,
    alertName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AlertsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, location, alertName, options: operationOptions },
      getOperationSpec
    ) as Promise<AlertsGetResponse>;
  }

  /**
   * Closes the given alert.
   * @param resourceGroupName The name of the resource group.
   * @param location Name of the region
   * @param alertName Name of the alert.
   * @param alert Updated alert parameter.
   * @param user The username used to perform the operation.
   * @param options The options parameters.
   */
  close(
    resourceGroupName: string,
    location: string,
    alertName: string,
    alert: Alert,
    user: string,
    options?: coreHttp.OperationOptions
  ): Promise<AlertsCloseResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        location,
        alertName,
        alert,
        user,
        options: operationOptions
      },
      closeOperationSpec
    ) as Promise<AlertsCloseResponse>;
  }

  /**
   * Repairs an alert.
   * @param resourceGroupName The name of the resource group.
   * @param location Name of the region
   * @param alertName Name of the alert.
   * @param options The options parameters.
   */
  async repair(
    resourceGroupName: string,
    location: string,
    alertName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      location,
      alertName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      repairOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: repairOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroupName The name of the resource group.
   * @param location Name of the region
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroupName: string,
    location: string,
    options?: AlertsListNextOptionalParams
  ): Promise<AlertsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroupName, location, options: operationOptions },
      listNextOperationSpec
    ) as Promise<AlertsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.InfrastructureInsights.Admin/regionHealths/{location}/alerts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.InfrastructureInsights.Admin/regionHealths/{location}/alerts/{alertName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Alert
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.alertName
  ],
  serializer
};
const closeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.InfrastructureInsights.Admin/regionHealths/{location}/alerts/{alertName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Alert
    }
  },
  requestBody: Parameters.alert,
  queryParameters: [Parameters.apiVersion, Parameters.user],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.alertName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const repairOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.InfrastructureInsights.Admin/regionHealths/{location}/alerts/{alertName}/repair",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.alertName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  serializer
};
