/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { InfrastructureInsightsAdminClient } from "../infrastructureInsightsAdminClient";
import {
  RegionHealthsListOptionalParams,
  RegionHealthsListResponse,
  RegionHealthsGetResponse,
  RegionHealthsListNextOptionalParams,
  RegionHealthsListNextResponse
} from "../models";

/**
 * Class representing a RegionHealths.
 */
export class RegionHealths {
  private readonly client: InfrastructureInsightsAdminClient;

  /**
   * Initialize a new instance of the class RegionHealths class.
   * @param client Reference to the service client
   */
  constructor(client: InfrastructureInsightsAdminClient) {
    this.client = client;
  }

  /**
   * Returns the list of all health status for the region.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: RegionHealthsListOptionalParams
  ): Promise<RegionHealthsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listOperationSpec
    ) as Promise<RegionHealthsListResponse>;
  }

  /**
   * Returns the requested health status of a region.
   * @param resourceGroupName The name of the resource group.
   * @param location Name of the region
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<RegionHealthsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, location, options: operationOptions },
      getOperationSpec
    ) as Promise<RegionHealthsGetResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroupName: string,
    options?: RegionHealthsListNextOptionalParams
  ): Promise<RegionHealthsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroupName, options: operationOptions },
      listNextOperationSpec
    ) as Promise<RegionHealthsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.InfrastructureInsights.Admin/regionHealths",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegionHealthList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.InfrastructureInsights.Admin/regionHealths/{location}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegionHealth
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegionHealthList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
