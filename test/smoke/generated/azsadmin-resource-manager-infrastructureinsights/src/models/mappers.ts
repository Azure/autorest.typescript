/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationList: coreHttp.CompositeMapper = {
  serializedName: "OperationList",
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "Display"
        }
      }
    }
  }
};

export const Display: coreHttp.CompositeMapper = {
  serializedName: "Display",
  type: {
    name: "Composite",
    className: "Display",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertList: coreHttp.CompositeMapper = {
  serializedName: "AlertList",
  type: {
    name: "Composite",
    className: "AlertList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Alert" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreHttp.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Alert: coreHttp.CompositeMapper = {
  serializedName: "Alert",
  type: {
    name: "Composite",
    className: "Alert",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      closedTimestamp: {
        serializedName: "properties.closedTimestamp",
        type: {
          name: "String"
        }
      },
      createdTimestamp: {
        serializedName: "properties.createdTimestamp",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "String" }, serializedName: "String" }
            },
            serializedName: "Dictionary"
          }
        }
      },
      faultId: {
        serializedName: "properties.faultId",
        type: {
          name: "String"
        }
      },
      alertId: {
        serializedName: "properties.alertId",
        type: {
          name: "String"
        }
      },
      faultTypeId: {
        serializedName: "properties.faultTypeId",
        type: {
          name: "String"
        }
      },
      lastUpdatedTimestamp: {
        serializedName: "properties.lastUpdatedTimestamp",
        type: {
          name: "String"
        }
      },
      alertProperties: {
        serializedName: "properties.alertProperties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      remediation: {
        serializedName: "properties.remediation",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "String" }, serializedName: "String" }
            },
            serializedName: "Dictionary"
          }
        }
      },
      resourceRegistrationId: {
        serializedName: "properties.resourceRegistrationId",
        type: {
          name: "String"
        }
      },
      resourceProviderRegistrationId: {
        serializedName: "properties.resourceProviderRegistrationId",
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "properties.severity",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "properties.title",
        type: {
          name: "String"
        }
      },
      impactedResourceId: {
        serializedName: "properties.impactedResourceId",
        type: {
          name: "String"
        }
      },
      impactedResourceDisplayName: {
        serializedName: "properties.impactedResourceDisplayName",
        type: {
          name: "String"
        }
      },
      closedByUserAlias: {
        serializedName: "properties.closedByUserAlias",
        type: {
          name: "String"
        }
      },
      hasValidRemediationAction: {
        serializedName: "properties.hasValidRemediationAction",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RegionHealthList: coreHttp.CompositeMapper = {
  serializedName: "RegionHealthList",
  type: {
    name: "Composite",
    className: "RegionHealthList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RegionHealth" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegionHealth: coreHttp.CompositeMapper = {
  serializedName: "RegionHealth",
  type: {
    name: "Composite",
    className: "RegionHealth",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      alertSummary: {
        serializedName: "alertSummary",
        type: {
          name: "Composite",
          className: "AlertSummary"
        }
      },
      usageMetrics: {
        serializedName: "properties.usageMetrics",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UsageMetrics" } }
        }
      }
    }
  }
};

export const AlertSummary: coreHttp.CompositeMapper = {
  serializedName: "AlertSummary",
  type: {
    name: "Composite",
    className: "AlertSummary",
    modelProperties: {
      criticalAlertCount: {
        serializedName: "criticalAlertCount",
        type: {
          name: "Number"
        }
      },
      warningAlertCount: {
        serializedName: "warningAlertCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UsageMetrics: coreHttp.CompositeMapper = {
  serializedName: "UsageMetrics",
  type: {
    name: "Composite",
    className: "UsageMetrics",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      metricsValue: {
        serializedName: "metricsValue",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Metrics" } }
        }
      }
    }
  }
};

export const Metrics: coreHttp.CompositeMapper = {
  serializedName: "Metrics",
  type: {
    name: "Composite",
    className: "Metrics",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      maCounterName: {
        serializedName: "maCounterName",
        type: {
          name: "String"
        }
      },
      observedTimestamp: {
        serializedName: "observedTimestamp",
        type: {
          name: "DateTime"
        }
      },
      sourceType: {
        serializedName: "sourceType",
        type: {
          name: "String"
        }
      },
      sourceName: {
        serializedName: "sourceName",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ResourceHealthList: coreHttp.CompositeMapper = {
  serializedName: "ResourceHealthList",
  type: {
    name: "Composite",
    className: "ResourceHealthList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceHealth" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceHealth: coreHttp.CompositeMapper = {
  serializedName: "ResourceHealth",
  type: {
    name: "Composite",
    className: "ResourceHealth",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      alertSummary: {
        serializedName: "alertSummary",
        type: {
          name: "Composite",
          className: "AlertSummary"
        }
      },
      healthState: {
        serializedName: "properties.healthState",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "properties.namespace",
        type: {
          name: "String"
        }
      },
      registrationId: {
        serializedName: "properties.registrationId",
        type: {
          name: "String"
        }
      },
      routePrefix: {
        serializedName: "properties.routePrefix",
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "properties.resourceLocation",
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "properties.resourceName",
        type: {
          name: "String"
        }
      },
      resourceDisplayName: {
        serializedName: "properties.resourceDisplayName",
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "properties.resourceType",
        type: {
          name: "String"
        }
      },
      resourceURI: {
        serializedName: "properties.resourceURI",
        type: {
          name: "String"
        }
      },
      rpRegistrationId: {
        serializedName: "properties.rpRegistrationId",
        type: {
          name: "String"
        }
      },
      usageMetrics: {
        serializedName: "properties.usageMetrics",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UsageMetrics" } }
        }
      }
    }
  }
};

export const BaseHealth: coreHttp.CompositeMapper = {
  serializedName: "BaseHealth",
  type: {
    name: "Composite",
    className: "BaseHealth",
    modelProperties: {
      alertSummary: {
        serializedName: "alertSummary",
        type: {
          name: "Composite",
          className: "AlertSummary"
        }
      },
      healthState: {
        serializedName: "healthState",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      registrationId: {
        serializedName: "registrationId",
        type: {
          name: "String"
        }
      },
      routePrefix: {
        serializedName: "routePrefix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceHealthModel: coreHttp.CompositeMapper = {
  serializedName: "ResourceHealthModel",
  type: {
    name: "Composite",
    className: "ResourceHealthModel",
    modelProperties: {
      ...BaseHealth.type.modelProperties,
      resourceLocation: {
        serializedName: "resourceLocation",
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      resourceDisplayName: {
        serializedName: "resourceDisplayName",
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      resourceURI: {
        serializedName: "resourceURI",
        type: {
          name: "String"
        }
      },
      rpRegistrationId: {
        serializedName: "rpRegistrationId",
        type: {
          name: "String"
        }
      },
      usageMetrics: {
        serializedName: "usageMetrics",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UsageMetrics" } }
        }
      }
    }
  }
};

export const ServiceHealthList: coreHttp.CompositeMapper = {
  serializedName: "ServiceHealthList",
  type: {
    name: "Composite",
    className: "ServiceHealthList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ServiceHealth" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceHealth: coreHttp.CompositeMapper = {
  serializedName: "ServiceHealth",
  type: {
    name: "Composite",
    className: "ServiceHealth",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      alertSummary: {
        serializedName: "alertSummary",
        type: {
          name: "Composite",
          className: "AlertSummary"
        }
      },
      healthState: {
        serializedName: "properties.healthState",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "properties.namespace",
        type: {
          name: "String"
        }
      },
      registrationId: {
        serializedName: "properties.registrationId",
        type: {
          name: "String"
        }
      },
      routePrefix: {
        serializedName: "properties.routePrefix",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      serviceLocation: {
        serializedName: "properties.serviceLocation",
        type: {
          name: "String"
        }
      },
      infraURI: {
        serializedName: "properties.infraURI",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceHealthModel: coreHttp.CompositeMapper = {
  serializedName: "ServiceHealthModel",
  type: {
    name: "Composite",
    className: "ServiceHealthModel",
    modelProperties: {
      ...BaseHealth.type.modelProperties,
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      serviceLocation: {
        serializedName: "serviceLocation",
        type: {
          name: "String"
        }
      },
      infraURI: {
        serializedName: "infraURI",
        type: {
          name: "String"
        }
      }
    }
  }
};
