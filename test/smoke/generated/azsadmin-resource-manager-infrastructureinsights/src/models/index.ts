/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * List of Operations
 */
export interface OperationList {
  /**
   * Array of operations
   */
  value?: Operation[];
  /**
   * URI to the next page of operations.
   */
  nextLink?: string;
}

/**
 * Describes the supported REST operation.
 */
export interface Operation {
  /**
   * The name of the operation performed on the object. The name should match the action name that appears in RBAC or the event service.
   */
  name?: string;
  /**
   * Contains the localized display information for this particular operation or action.
   */
  display?: Display;
}

/**
 * Contains the localized display information for this particular operation / action.
 */
export interface Display {
  /**
   * The localized, friendly version of the resource provider name. The provider name is expected to include the name of the publisher or company responsible. The provider name format should use title case and begin with "Microsoft" for first-party services. For example, the provider name may be"Microsoft Monitoring Insights" or "Microsoft Compute".
   */
  provider?: string;
  /**
   * The localized, friendly version of the resource type related to this action or operation; the resource type should match the public documentation for the resource provider.
   */
  resource?: string;
  /**
   * The localized, friendly name for the operation. Use the name as it will be displayed to the user.
   */
  operation?: string;
  /**
   * The localized, friendly description for the operation. The description will be displayed to the user. It should be thorough and concise for used in both tooltips and detailed views.
   */
  description?: string;
}

/**
 * A pageable list of alerts
 */
export interface AlertList {
  /**
   * List of alerts.
   */
  value?: Alert[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * The core properties of ARM resources
 */
export interface Resource {
  /**
   * Fully qualified resource Id for the resource
   */
  readonly id?: string;
  /**
   * The name of the resource
   */
  readonly name?: string;
  /**
   * The type of the resource.
   */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM tracked top level resource
 */
export type TrackedResource = Resource & {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The Azure Region where the resource lives
   */
  location?: string;
};

/**
 * This object represents an alert resource.
 */
export type Alert = TrackedResource & {
  /**
   * Timestamp when the alert was closed.
   */
  closedTimestamp?: string;
  /**
   * Timestamp when the alert was created.
   */
  createdTimestamp?: string;
  /**
   * Description of the alert.
   */
  description?: { [propertyName: string]: string }[];
  /**
   * Gets or sets the fault ID of the alert.
   */
  faultId?: string;
  /**
   * Gets or sets the ID of the alert.
   */
  alertId?: string;
  /**
   * Gets or sets the fault type ID of the alert.
   */
  faultTypeId?: string;
  /**
   * Timestamp when the alert was last updated.
   */
  lastUpdatedTimestamp?: string;
  /**
   * Properties of the alert.
   */
  alertProperties?: { [propertyName: string]: string };
  /**
   * Gets or sets the admin friendly remediation instructions for the alert.
   */
  remediation?: { [propertyName: string]: string }[];
  /**
   * Gets or sets the registration ID of the resource associated with the alert. If the alert is not associated with a resource, the resource registration ID is null.
   */
  resourceRegistrationId?: string;
  /**
   * Gets or sets the registration ID of the service the alert belongs to.
   */
  resourceProviderRegistrationId?: string;
  /**
   * Severity of the alert.
   */
  severity?: string;
  /**
   * State of the alert.
   */
  state?: string;
  /**
   * Gets or sets the Resource ID for the impacted item.
   */
  title?: string;
  /**
   * Gets or sets the Resource ID for the impacted item.
   */
  impactedResourceId?: string;
  /**
   * Display name for the impacted item.
   */
  impactedResourceDisplayName?: string;
  /**
   * User alias who closed the alert.
   */
  closedByUserAlias?: string;
  /**
   * Indicates if the alert can be remediated.
   */
  hasValidRemediationAction?: boolean;
};

/**
 * Pageable list of region health items.
 */
export interface RegionHealthList {
  /**
   * Array of region health items
   */
  value?: RegionHealth[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * Contains information related to the health of a region.
 */
export type RegionHealth = TrackedResource & {
  /**
   * Summary of alerts.
   */
  alertSummary?: AlertSummary;
  /**
   * List of usage metrics for the region.
   */
  usageMetrics?: UsageMetrics[];
};

/**
 * Summary of the alerts.
 */
export interface AlertSummary {
  /**
   * The number of critical alerts for the service.
   */
  criticalAlertCount?: number;
  /**
   * The number of warning alerts for the service.
   */
  warningAlertCount?: number;
}

/**
 * Metrics of resource usage.
 */
export interface UsageMetrics {
  /**
   * Name of the usage metric.
   */
  name?: string;
  /**
   * List of usage metrics.
   */
  metricsValue?: Metrics[];
}

/**
 * Metrics for a source.
 */
export interface Metrics {
  /**
   * Name of the usage metric.
   */
  name?: string;
  /**
   * Name of the counter.
   */
  maCounterName?: string;
  /**
   * Time counter was observed.
   */
  observedTimestamp?: Date;
  /**
   * Type of the source.
   */
  sourceType?: string;
  /**
   * Name of the source.
   */
  sourceName?: MetricsSourceType;
  /**
   * Unit for the metric.
   */
  unit?: MetricsUnit;
  /**
   * Name of the usage metric.
   */
  value?: number;
}

/**
 * Pageable list of resource health objects.
 */
export interface ResourceHealthList {
  /**
   * List of resource health objects.
   */
  value?: ResourceHealth[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * Health information related to a resource.
 */
export type ResourceHealth = TrackedResource & {
  /**
   * Alert summary.
   */
  alertSummary?: AlertSummary;
  /**
   * Health state.
   */
  healthState?: string;
  /**
   * Namespace of the health resource.
   */
  namespace?: string;
  /**
   * Registration ID.
   */
  registrationId?: string;
  /**
   * Route prefix.
   */
  routePrefix?: string;
  /**
   * Resource location.
   */
  resourceLocation?: string;
  /**
   * Resource name.
   */
  resourceName?: string;
  /**
   * Resource display name.
   */
  resourceDisplayName?: string;
  /**
   * Resource type.
   */
  resourceType?: string;
  /**
   * Gets or sets the resource URI.
   */
  resourceURI?: string;
  /**
   * Gets or sets the resource provider registration ID.
   */
  rpRegistrationId?: string;
  /**
   * Usage metrics.
   */
  usageMetrics?: UsageMetrics[];
};

/**
 * Models the base properties for health resource.
 */
export interface BaseHealth {
  /**
   * Alert summary.
   */
  alertSummary?: AlertSummary;
  /**
   * Health state.
   */
  healthState?: string;
  /**
   * Namespace of the health resource.
   */
  namespace?: string;
  /**
   * Registration ID.
   */
  registrationId?: string;
  /**
   * Route prefix.
   */
  routePrefix?: string;
}

/**
 * Health information related to a resource.
 */
export type ResourceHealthModel = BaseHealth & {
  /**
   * Resource location.
   */
  resourceLocation?: string;
  /**
   * Resource name.
   */
  resourceName?: string;
  /**
   * Resource display name.
   */
  resourceDisplayName?: string;
  /**
   * Resource type.
   */
  resourceType?: string;
  /**
   * Gets or sets the resource URI.
   */
  resourceURI?: string;
  /**
   * Gets or sets the resource provider registration ID.
   */
  rpRegistrationId?: string;
  /**
   * Usage metrics.
   */
  usageMetrics?: UsageMetrics[];
};

/**
 * Pageable list of service health objects.
 */
export interface ServiceHealthList {
  /**
   * List of service health objects.
   */
  value?: ServiceHealth[];
  /**
   * URI of the next page.
   */
  nextLink?: string;
}

/**
 * Holds information about the health of a service.
 */
export type ServiceHealth = TrackedResource & {
  /**
   * Alert summary.
   */
  alertSummary?: AlertSummary;
  /**
   * Health state.
   */
  healthState?: string;
  /**
   * Namespace of the health resource.
   */
  namespace?: string;
  /**
   * Registration ID.
   */
  registrationId?: string;
  /**
   * Route prefix.
   */
  routePrefix?: string;
  /**
   * Name of the service.
   */
  displayName?: string;
  /**
   * Location of the service.
   */
  serviceLocation?: string;
  /**
   * The route prefix to the service.
   */
  infraURI?: string;
};

/**
 * Holds information about the health of a service.
 */
export type ServiceHealthModel = BaseHealth & {
  /**
   * Name of the service.
   */
  displayName?: string;
  /**
   * Location of the service.
   */
  serviceLocation?: string;
  /**
   * The route prefix to the service.
   */
  infraURI?: string;
};
/**
 * Defines values for MetricsSourceType.
 */
export type MetricsSourceType =
  | "PhysicalNode"
  | "VirtualMachine"
  | "ResourceProvider";
/**
 * Defines values for MetricsUnit.
 */
export type MetricsUnit =
  | "One"
  | "Percentage"
  | "B"
  | "KB"
  | "MB"
  | "GB"
  | "TB";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Optional parameters.
 */
export interface AlertsListOptionalParams extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type AlertsListResponse = AlertList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AlertList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AlertsGetResponse = Alert & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Alert;
  };
};

/**
 * Contains response data for the close operation.
 */
export type AlertsCloseResponse = Alert & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Alert;
  };
};

/**
 * Optional parameters.
 */
export interface AlertsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type AlertsListNextResponse = AlertList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AlertList;
  };
};

/**
 * Optional parameters.
 */
export interface RegionHealthsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type RegionHealthsListResponse = RegionHealthList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegionHealthList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type RegionHealthsGetResponse = RegionHealth & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegionHealth;
  };
};

/**
 * Optional parameters.
 */
export interface RegionHealthsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type RegionHealthsListNextResponse = RegionHealthList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegionHealthList;
  };
};

/**
 * Optional parameters.
 */
export interface ResourceHealthsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ResourceHealthsListResponse = ResourceHealthList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceHealthList;
  };
};

/**
 * Optional parameters.
 */
export interface ResourceHealthsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the get operation.
 */
export type ResourceHealthsGetResponse = ResourceHealth & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceHealth;
  };
};

/**
 * Optional parameters.
 */
export interface ResourceHealthsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ResourceHealthsListNextResponse = ResourceHealthList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceHealthList;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceHealthsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ServiceHealthsListResponse = ServiceHealthList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceHealthList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceHealthsGetResponse = ServiceHealth & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceHealth;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceHealthsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ServiceHealthsListNextResponse = ServiceHealthList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceHealthList;
  };
};

/**
 * Optional parameters.
 */
export interface InfrastructureInsightsAdminClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
