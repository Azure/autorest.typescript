/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventHubManagementClient } from "../eventHubManagementClient";
import {
  ConsumerGroup,
  ConsumerGroupsCreateOrUpdateResponse,
  ConsumerGroupsGetResponse,
  ConsumerGroupsListByEventHubOptionalParams,
  ConsumerGroupsListByEventHubResponse,
  ConsumerGroupsListByEventHubNextOptionalParams,
  ConsumerGroupsListByEventHubNextResponse
} from "../models";

/**
 * Class representing a ConsumerGroups.
 */
export class ConsumerGroups {
  private readonly client: EventHubManagementClient;

  /**
   * Initialize a new instance of the class ConsumerGroups class.
   * @param client Reference to the service client
   */
  constructor(client: EventHubManagementClient) {
    this.client = client;
  }

  /**
   * Creates or updates an Event Hubs consumer group as a nested resource within a Namespace.
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param namespaceName The Namespace name
   * @param eventHubName The Event Hub name
   * @param parameters Parameters supplied to create or update a consumer group resource.
   * @param consumerGroupName The consumer group name
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    namespaceName: string,
    eventHubName: string,
    parameters: ConsumerGroup,
    consumerGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ConsumerGroupsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        eventHubName,
        parameters,
        consumerGroupName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<ConsumerGroupsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a consumer group from the specified Event Hub and resource group.
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param namespaceName The Namespace name
   * @param eventHubName The Event Hub name
   * @param consumerGroupName The consumer group name
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    namespaceName: string,
    eventHubName: string,
    consumerGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        eventHubName,
        consumerGroupName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets a description for the specified consumer group.
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param namespaceName The Namespace name
   * @param eventHubName The Event Hub name
   * @param consumerGroupName The consumer group name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    namespaceName: string,
    eventHubName: string,
    consumerGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ConsumerGroupsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        eventHubName,
        consumerGroupName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ConsumerGroupsGetResponse>;
  }

  /**
   * Gets all the consumer groups in a Namespace. An empty feed is returned if no consumer group exists
   * in the Namespace.
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param namespaceName The Namespace name
   * @param eventHubName The Event Hub name
   * @param options The options parameters.
   */
  listByEventHub(
    resourceGroupName: string,
    namespaceName: string,
    eventHubName: string,
    options?: ConsumerGroupsListByEventHubOptionalParams
  ): Promise<ConsumerGroupsListByEventHubResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        eventHubName,
        options: operationOptions
      },
      listByEventHubOperationSpec
    ) as Promise<ConsumerGroupsListByEventHubResponse>;
  }

  /**
   * ListByEventHubNext
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param namespaceName The Namespace name
   * @param eventHubName The Event Hub name
   * @param nextLink The nextLink from the previous successful call to the ListByEventHub method.
   * @param options The options parameters.
   */
  listByEventHubNext(
    resourceGroupName: string,
    namespaceName: string,
    eventHubName: string,
    nextLink: string,
    options?: ConsumerGroupsListByEventHubNextOptionalParams
  ): Promise<ConsumerGroupsListByEventHubNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        eventHubName,
        nextLink,
        options: operationOptions
      },
      listByEventHubNextOperationSpec
    ) as Promise<ConsumerGroupsListByEventHubNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConsumerGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.eventHubName,
    Parameters.consumerGroupName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.eventHubName,
    Parameters.consumerGroupName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConsumerGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.eventHubName,
    Parameters.consumerGroupName
  ],
  serializer
};
const listByEventHubOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConsumerGroupListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.eventHubName
  ],
  serializer
};
const listByEventHubNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConsumerGroupListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.eventHubName,
    Parameters.nextLink5
  ],
  serializer
};
