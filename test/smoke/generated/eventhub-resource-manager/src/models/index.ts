/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Result of the request to list Event Hub operations. It contains a list of operations and a URL link to get the next set of results.
 */
export interface OperationListResult {
  /**
   * List of Event Hub operations supported by the Microsoft.EventHub resource provider.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  readonly nextLink?: string;
}

/**
 * A Event Hub REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.EventHub
   */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed: Invoice, etc.
   */
  readonly resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  readonly operation?: string;
}

/**
 * Error response indicates EventHub service is not able to process the incoming request. The reason is provided in the error message.
 */
export interface ErrorResponse {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * Parameter supplied to check Namespace name availability operation
 */
export interface CheckNameAvailabilityParameter {
  /**
   * Name to check the namespace name availability
   */
  name: string;
}

/**
 * The Result of the CheckNameAvailability operation
 */
export interface CheckNameAvailabilityResult {
  /**
   * The detailed info regarding the reason associated with the Namespace.
   */
  readonly message?: string;
  /**
   * Value indicating Namespace is availability, true if the Namespace is available; otherwise, false.
   */
  nameAvailable?: boolean;
  /**
   * The reason for unavailability of a Namespace.
   */
  reason?: UnavailableReason;
}

/**
 * The response of the List Namespace operation
 */
export interface EHNamespaceListResult {
  /**
   * Result of the List Namespace operation
   */
  value?: EHNamespace[];
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of namespaces.
   */
  nextLink?: string;
}

/**
 * The Resource definition
 */
export interface Resource {
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
}

/**
 * Definition of Resource
 */
export type TrackedResource = Resource & {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
};

/**
 * Single Namespace item in List or Get Operation
 */
export type EHNamespace = TrackedResource & {
  /**
   * Properties of sku resource
   */
  sku?: Sku;
  /**
   * Provisioning state of the Namespace.
   */
  readonly provisioningState?: string;
  /**
   * The time the Namespace was created.
   */
  readonly createdAt?: Date;
  /**
   * The time the Namespace was updated.
   */
  readonly updatedAt?: Date;
  /**
   * Endpoint you can use to perform Service Bus operations.
   */
  readonly serviceBusEndpoint?: string;
  /**
   * Identifier for Azure Insights metrics.
   */
  readonly metricId?: string;
  /**
   * Value that indicates whether AutoInflate is enabled for eventhub namespace.
   */
  isAutoInflateEnabled?: boolean;
  /**
   * Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20 throughput units. ( '0' if AutoInflateEnabled = true)
   */
  maximumThroughputUnits?: number;
  /**
   * Value that indicates whether Kafka is enabled for eventhub namespace.
   */
  kafkaEnabled?: boolean;
};

/**
 * SKU parameters supplied to the create namespace operation
 */
export interface Sku {
  /**
   * Name of this SKU.
   */
  name: SkuName;
  /**
   * The billing tier of this particular SKU.
   */
  tier?: SkuTier;
  /**
   * The Event Hubs throughput units, value should be 0 to 20 throughput units.
   */
  capacity?: number;
}

/**
 * Messaging Plan for the namespace
 */
export type MessagingPlan = TrackedResource & {
  /**
   * Sku type
   */
  readonly sku?: number;
  /**
   * Selected event hub unit
   */
  readonly selectedEventHubUnit?: number;
  /**
   * The exact time the messaging plan was updated.
   */
  readonly updatedAt?: Date;
  /**
   * revision number
   */
  readonly revision?: number;
};

/**
 * The response from the List namespace operation.
 */
export interface AuthorizationRuleListResult {
  /**
   * Result of the List Authorization Rules operation.
   */
  value?: AuthorizationRule[];
  /**
   * Link to the next set of results. Not empty if Value contains an incomplete list of Authorization Rules
   */
  nextLink?: string;
}

/**
 * Single item in a List or Get AuthorizationRule operation
 */
export type AuthorizationRule = Resource & {
  /**
   * The rights associated with the rule.
   */
  rights?: AccessRights[];
};

/**
 * Namespace/EventHub Connection String
 */
export interface AccessKeys {
  /**
   * Primary connection string of the created namespace AuthorizationRule.
   */
  readonly primaryConnectionString?: string;
  /**
   * Secondary connection string of the created namespace AuthorizationRule.
   */
  readonly secondaryConnectionString?: string;
  /**
   * Primary connection string of the alias if GEO DR is enabled
   */
  readonly aliasPrimaryConnectionString?: string;
  /**
   * Secondary  connection string of the alias if GEO DR is enabled
   */
  readonly aliasSecondaryConnectionString?: string;
  /**
   * A base64-encoded 256-bit primary key for signing and validating the SAS token.
   */
  readonly primaryKey?: string;
  /**
   * A base64-encoded 256-bit primary key for signing and validating the SAS token.
   */
  readonly secondaryKey?: string;
  /**
   * A string that describes the AuthorizationRule.
   */
  readonly keyName?: string;
}

/**
 * Parameters supplied to the Regenerate Authorization Rule operation, specifies which key needs to be reset.
 */
export interface RegenerateAccessKeyParameters {
  /**
   * The access key to regenerate.
   */
  keyType: KeyType;
  /**
   * Optional, if the key value provided, is set for KeyType or autogenerated Key value set for keyType
   */
  key?: string;
}

/**
 * The result of the List Alias(Disaster Recovery configuration) operation.
 */
export interface ArmDisasterRecoveryListResult {
  /**
   * List of Alias(Disaster Recovery configurations)
   */
  value?: ArmDisasterRecovery[];
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of Alias(Disaster Recovery configuration)
   */
  readonly nextLink?: string;
}

/**
 * Single item in List or Get Alias(Disaster Recovery configuration) operation
 */
export type ArmDisasterRecovery = Resource & {
  /**
   * Provisioning state of the Alias(Disaster Recovery configuration) - possible values 'Accepted' or 'Succeeded' or 'Failed'
   */
  readonly provisioningState?: ProvisioningStateDR;
  /**
   * ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
   */
  partnerNamespace?: string;
  /**
   * Alternate name specified when alias and namespace names are same.
   */
  alternateName?: string;
  /**
   * role of namespace in GEO DR - possible values 'Primary' or 'PrimaryNotReplicating' or 'Secondary'
   */
  readonly role?: RoleDisasterRecovery;
  /**
   * Number of entities pending to be replicated.
   */
  readonly pendingReplicationOperationsCount?: number;
};

/**
 * The result of the List EventHubs operation.
 */
export interface EventHubListResult {
  /**
   * Result of the List EventHubs operation.
   */
  value?: Eventhub[];
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of EventHubs.
   */
  nextLink?: string;
}

/**
 * Single item in List or Get Event Hub operation
 */
export type Eventhub = Resource & {
  /**
   * Current number of shards on the Event Hub.
   */
  readonly partitionIds?: string[];
  /**
   * Exact time the Event Hub was created.
   */
  readonly createdAt?: Date;
  /**
   * The exact time the message was updated.
   */
  readonly updatedAt?: Date;
  /**
   * Number of days to retain the events for this Event Hub, value should be 1 to 7 days
   */
  messageRetentionInDays?: number;
  /**
   * Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions.
   */
  partitionCount?: number;
  /**
   * Enumerates the possible values for the status of the Event Hub.
   */
  status?: EntityStatus;
  /**
   * Properties of capture description
   */
  captureDescription?: CaptureDescription;
};

/**
 * Properties to configure capture description for eventhub
 */
export interface CaptureDescription {
  /**
   * A value that indicates whether capture description is enabled.
   */
  enabled?: boolean;
  /**
   * Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated in New API Version
   */
  encoding?: EncodingCaptureDescription;
  /**
   * The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds
   */
  intervalInSeconds?: number;
  /**
   * The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes
   */
  sizeLimitInBytes?: number;
  /**
   * Properties of Destination where capture will be stored. (Storage Account, Blob Names)
   */
  destination?: Destination;
  /**
   * A value that indicates whether to Skip Empty Archives
   */
  skipEmptyArchives?: boolean;
}

/**
 * Capture storage details for capture description
 */
export interface Destination {
  /**
   * Name for capture destination
   */
  name?: string;
  /**
   * Resource id of the storage account to be used to create the blobs
   */
  storageAccountResourceId?: string;
  /**
   * Blob container Name
   */
  blobContainer?: string;
  /**
   * Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
   */
  archiveNameFormat?: string;
}

/**
 * Single item in List or Get Consumer group operation
 */
export type ConsumerGroup = Resource & {
  /**
   * Exact time the message was created.
   */
  readonly createdAt?: Date;
  /**
   * The exact time the message was updated.
   */
  readonly updatedAt?: Date;
  /**
   * User Metadata is a placeholder to store user-defined string data with maximum length 1024. e.g. it can be used to store descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
   */
  userMetadata?: string;
};

/**
 * The result to the List Consumer Group operation.
 */
export interface ConsumerGroupListResult {
  /**
   * Result of the List Consumer Group operation.
   */
  value?: ConsumerGroup[];
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of Consumer Group
   */
  nextLink?: string;
}

/**
 * The response of the List MessagingRegions operation.
 */
export interface MessagingRegionsListResult {
  /**
   * Result of the List MessagingRegions type.
   */
  value?: MessagingRegions[];
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of MessagingRegions.
   */
  readonly nextLink?: string;
}

/**
 * Messaging Region
 */
export type MessagingRegions = TrackedResource & {
  properties?: MessagingRegionsProperties;
};

export interface MessagingRegionsProperties {
  /**
   * Region code
   */
  readonly code?: string;
  /**
   * Full name of the region
   */
  readonly fullName?: string;
}

/**
 * Description of NetworkRuleSet resource.
 */
export type NetworkRuleSet = Resource & {
  /**
   * Default Action for Network Rule Set
   */
  defaultAction?: DefaultAction;
  /**
   * List VirtualNetwork Rules
   */
  virtualNetworkRules?: NWRuleSetVirtualNetworkRules[];
  /**
   * List of IpRules
   */
  ipRules?: NWRuleSetIpRules[];
};

/**
 * Description of VirtualNetworkRules - NetworkRules resource.
 */
export interface NWRuleSetVirtualNetworkRules {
  /**
   * Subnet properties
   */
  subnet?: Subnet;
  /**
   * Value that indicates whether to ignore missing VNet Service Endpoint
   */
  ignoreMissingVnetServiceEndpoint?: boolean;
}

/**
 * Properties supplied for Subnet
 */
export interface Subnet {
  /**
   * Resource ID of Virtual Network Subnet
   */
  id: string;
}

/**
 * Description of NetWorkRuleSet - IpRules resource.
 */
export interface NWRuleSetIpRules {
  /**
   * IP Mask
   */
  ipMask?: string;
  /**
   * The IP Filter Action
   */
  action?: "Allow";
}

/**
 * The response of the List NetworkRuleSet operation
 */
export interface NetworkRuleSetListResult {
  /**
   * Result of the List NetworkRuleSet operation.
   */
  value?: NetworkRuleSet[];
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of NetworkRuleSet.
   */
  nextLink?: string;
}

/**
 * Defines values for SkuName.
 */
export type SkuName = "Basic" | "Standard";
/**
 * Defines values for SkuTier.
 */
export type SkuTier = "Basic" | "Standard";
/**
 * Defines values for AccessRights.
 */
export type AccessRights = "Manage" | "Send" | "Listen";
/**
 * Defines values for DefaultAction.
 */
export type DefaultAction = "Allow" | "Deny";
/**
 * Defines values for UnavailableReason.
 */
export type UnavailableReason =
  | "None"
  | "InvalidName"
  | "SubscriptionIsDisabled"
  | "NameInUse"
  | "NameInLockdown"
  | "TooManyNamespaceInCurrentSubscription";
/**
 * Defines values for KeyType.
 */
export type KeyType = "PrimaryKey" | "SecondaryKey";
/**
 * Defines values for ProvisioningStateDR.
 */
export type ProvisioningStateDR = "Accepted" | "Succeeded" | "Failed";
/**
 * Defines values for RoleDisasterRecovery.
 */
export type RoleDisasterRecovery =
  | "Primary"
  | "PrimaryNotReplicating"
  | "Secondary";
/**
 * Defines values for EntityStatus.
 */
export type EntityStatus =
  | "Active"
  | "Disabled"
  | "Restoring"
  | "SendDisabled"
  | "ReceiveDisabled"
  | "Creating"
  | "Deleting"
  | "Renaming"
  | "Unknown";
/**
 * Defines values for EncodingCaptureDescription.
 */
export type EncodingCaptureDescription = "Avro" | "AvroDeflate";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type NamespacesCheckNameAvailabilityResponse = CheckNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameAvailabilityResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type NamespacesListResponse = EHNamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EHNamespaceListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type NamespacesListByResourceGroupResponse = EHNamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EHNamespaceListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NamespacesCreateOrUpdateResponse = EHNamespace & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EHNamespace;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NamespacesGetResponse = EHNamespace & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EHNamespace;
  };
};

/**
 * Contains response data for the update operation.
 */
export type NamespacesUpdateResponse = EHNamespace & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EHNamespace;
  };
};

/**
 * Contains response data for the getMessagingPlan operation.
 */
export type NamespacesGetMessagingPlanResponse = MessagingPlan & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MessagingPlan;
  };
};

/**
 * Contains response data for the listAuthorizationRules operation.
 */
export type NamespacesListAuthorizationRulesResponse = AuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the createOrUpdateAuthorizationRule operation.
 */
export type NamespacesCreateOrUpdateAuthorizationRuleResponse = AuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRule;
  };
};

/**
 * Contains response data for the getAuthorizationRule operation.
 */
export type NamespacesGetAuthorizationRuleResponse = AuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRule;
  };
};

/**
 * Contains response data for the listKeys operation.
 */
export type NamespacesListKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccessKeys;
  };
};

/**
 * Contains response data for the regenerateKeys operation.
 */
export type NamespacesRegenerateKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccessKeys;
  };
};

/**
 * Contains response data for the createOrUpdateNetworkRuleSet operation.
 */
export type NamespacesCreateOrUpdateNetworkRuleSetResponse = NetworkRuleSet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkRuleSet;
  };
};

/**
 * Contains response data for the getNetworkRuleSet operation.
 */
export type NamespacesGetNetworkRuleSetResponse = NetworkRuleSet & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkRuleSet;
  };
};

/**
 * Contains response data for the listNetworkRuleSets operation.
 */
export type NamespacesListNetworkRuleSetsResponse = NetworkRuleSetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkRuleSetListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type NamespacesListNextResponse = EHNamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EHNamespaceListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type NamespacesListByResourceGroupNextResponse = EHNamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EHNamespaceListResult;
  };
};

/**
 * Contains response data for the listAuthorizationRulesNext operation.
 */
export type NamespacesListAuthorizationRulesNextResponse = AuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the listNetworkRuleSetsNext operation.
 */
export type NamespacesListNetworkRuleSetsNextResponse = NetworkRuleSetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkRuleSetListResult;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type DisasterRecoveryConfigsCheckNameAvailabilityResponse = CheckNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameAvailabilityResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type DisasterRecoveryConfigsListResponse = ArmDisasterRecoveryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ArmDisasterRecoveryListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DisasterRecoveryConfigsCreateOrUpdateResponse = ArmDisasterRecovery & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ArmDisasterRecovery;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DisasterRecoveryConfigsGetResponse = ArmDisasterRecovery & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ArmDisasterRecovery;
  };
};

/**
 * Contains response data for the listAuthorizationRules operation.
 */
export type DisasterRecoveryConfigsListAuthorizationRulesResponse = AuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the getAuthorizationRule operation.
 */
export type DisasterRecoveryConfigsGetAuthorizationRuleResponse = AuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRule;
  };
};

/**
 * Contains response data for the listKeys operation.
 */
export type DisasterRecoveryConfigsListKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccessKeys;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type DisasterRecoveryConfigsListNextResponse = ArmDisasterRecoveryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ArmDisasterRecoveryListResult;
  };
};

/**
 * Contains response data for the listAuthorizationRulesNext operation.
 */
export type DisasterRecoveryConfigsListAuthorizationRulesNextResponse = AuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRuleListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventHubsListByNamespaceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
   */
  skip?: number;
  /**
   * May be used to limit the number of results to the most recent N usageDetails.
   */
  top?: number;
}

/**
 * Contains response data for the listByNamespace operation.
 */
export type EventHubsListByNamespaceResponse = EventHubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventHubListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type EventHubsCreateOrUpdateResponse = Eventhub & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Eventhub;
  };
};

/**
 * Contains response data for the get operation.
 */
export type EventHubsGetResponse = Eventhub & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Eventhub;
  };
};

/**
 * Contains response data for the listAuthorizationRules operation.
 */
export type EventHubsListAuthorizationRulesResponse = AuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the createOrUpdateAuthorizationRule operation.
 */
export type EventHubsCreateOrUpdateAuthorizationRuleResponse = AuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRule;
  };
};

/**
 * Contains response data for the getAuthorizationRule operation.
 */
export type EventHubsGetAuthorizationRuleResponse = AuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRule;
  };
};

/**
 * Contains response data for the listKeys operation.
 */
export type EventHubsListKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccessKeys;
  };
};

/**
 * Contains response data for the regenerateKeys operation.
 */
export type EventHubsRegenerateKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccessKeys;
  };
};

/**
 * Optional parameters.
 */
export interface EventHubsListByNamespaceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
   */
  skip?: number;
  /**
   * May be used to limit the number of results to the most recent N usageDetails.
   */
  top?: number;
}

/**
 * Contains response data for the listByNamespaceNext operation.
 */
export type EventHubsListByNamespaceNextResponse = EventHubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventHubListResult;
  };
};

/**
 * Contains response data for the listAuthorizationRulesNext operation.
 */
export type EventHubsListAuthorizationRulesNextResponse = AuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ConsumerGroupsCreateOrUpdateResponse = ConsumerGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConsumerGroup;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ConsumerGroupsGetResponse = ConsumerGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConsumerGroup;
  };
};

/**
 * Optional parameters.
 */
export interface ConsumerGroupsListByEventHubOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
   */
  skip?: number;
  /**
   * May be used to limit the number of results to the most recent N usageDetails.
   */
  top?: number;
}

/**
 * Contains response data for the listByEventHub operation.
 */
export type ConsumerGroupsListByEventHubResponse = ConsumerGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConsumerGroupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ConsumerGroupsListByEventHubNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
   */
  skip?: number;
  /**
   * May be used to limit the number of results to the most recent N usageDetails.
   */
  top?: number;
}

/**
 * Contains response data for the listByEventHubNext operation.
 */
export type ConsumerGroupsListByEventHubNextResponse = ConsumerGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConsumerGroupListResult;
  };
};

/**
 * Contains response data for the listBySku operation.
 */
export type RegionsListBySkuResponse = MessagingRegionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MessagingRegionsListResult;
  };
};

/**
 * Contains response data for the listBySkuNext operation.
 */
export type RegionsListBySkuNextResponse = MessagingRegionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MessagingRegionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EventHubManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
