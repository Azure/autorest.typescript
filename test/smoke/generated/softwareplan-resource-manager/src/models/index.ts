/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Error object returned by the RP
 */
export interface ErrorModel {
  /**
   * Error code
   */
  code?: ErrorCode;
  /**
   * A user readable error message. Localized based on x-ms-effective-locale header in the request
   */
  message?: string;
}

/**
 * List of hybrid use benefits
 */
export interface HybridUseBenefitListResult {
  /**
   * List of hybrid use benefits
   */
  value?: HybridUseBenefitModel[];
  /**
   * Url to get the next page of items.
   */
  nextLink?: string;
}

export interface Resource {
  /**
   * Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   */
  readonly id?: string;
  /**
   * The name of the resource
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   */
  readonly type?: string;
}

/**
 * Response on GET of a hybrid use benefit
 */
export type HybridUseBenefitModel = Resource & {
  /**
   * Hybrid use benefit SKU
   */
  sku: Sku;
  /**
   * Indicates the revision of the hybrid use benefit
   */
  readonly etag?: number;
  /**
   * Provisioning state
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Created date
   */
  readonly createdDate?: Date;
  /**
   * Last updated date
   */
  readonly lastUpdatedDate?: Date;
};

/**
 * The SKU to be applied for this resource
 */
export interface Sku {
  /**
   * Name of the SKU to be applied
   */
  name?: string;
}

/**
 * List all the operations.
 */
export interface OperationList {
  /**
   * List of all operations
   */
  value?: OperationResponse[];
  /**
   * Url to get the next page of items.
   */
  nextLink?: string;
}

/**
 * Operation response.
 */
export interface OperationResponse {
  /**
   * Name of the operation
   */
  name?: string;
  /**
   * Display properties for the operation
   */
  display?: OperationDisplay;
  /**
   * Origin of the response
   */
  origin?: string;
}

/**
 * Display fields for an operation.
 */
export interface OperationDisplay {
  /**
   * Resource Provider name
   */
  provider?: string;
  /**
   * Resource that is acted upon
   */
  resource?: string;
  /**
   * Operation to be performed
   */
  operation?: string;
  /**
   * Description of the operation
   */
  description?: string;
}

/**
 * Defines values for ErrorCode.
 */
export type ErrorCode = "InvalidRequestParameter" | "MissingRequestParameter";
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState = "Succeeded" | "Cancelled" | "Failed";

/**
 * Optional parameters.
 */
export interface HybridUseBenefitListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Supports applying filter on the type of SKU
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type HybridUseBenefitListResponse = HybridUseBenefitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridUseBenefitListResult;
  };
};

/**
 * Contains response data for the create operation.
 */
export type HybridUseBenefitCreateResponse = HybridUseBenefitModel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridUseBenefitModel;
  };
};

/**
 * Contains response data for the update operation.
 */
export type HybridUseBenefitUpdateResponse = HybridUseBenefitModel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridUseBenefitModel;
  };
};

/**
 * Contains response data for the get operation.
 */
export type HybridUseBenefitGetResponse = HybridUseBenefitModel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridUseBenefitModel;
  };
};

/**
 * Optional parameters.
 */
export interface HybridUseBenefitListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Supports applying filter on the type of SKU
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type HybridUseBenefitListNextResponse = HybridUseBenefitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridUseBenefitListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type HybridUseBenefitRevisionListResponse = HybridUseBenefitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridUseBenefitListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type HybridUseBenefitRevisionListNextResponse = HybridUseBenefitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridUseBenefitListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Optional parameters.
 */
export interface SoftwarePlanRpOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
