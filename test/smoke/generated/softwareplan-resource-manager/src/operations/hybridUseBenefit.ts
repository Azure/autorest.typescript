/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SoftwarePlanRp } from "../softwarePlanRp";
import {
  HybridUseBenefitListOptionalParams,
  HybridUseBenefitListResponse,
  HybridUseBenefitModel,
  HybridUseBenefitCreateResponse,
  HybridUseBenefitUpdateResponse,
  HybridUseBenefitGetResponse,
  HybridUseBenefitListNextOptionalParams,
  HybridUseBenefitListNextResponse
} from "../models";

/**
 * Class representing a HybridUseBenefit.
 */
export class HybridUseBenefit {
  private readonly client: SoftwarePlanRp;

  /**
   * Initialize a new instance of the class HybridUseBenefit class.
   * @param client Reference to the service client
   */
  constructor(client: SoftwarePlanRp) {
    this.client = client;
  }

  /**
   * Get all hybrid use benefits associated with an ARM resource.
   * @param scope The scope at which the operation is performed. This is limited to
   *              Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param options The options parameters.
   */
  list(
    scope: string,
    options?: HybridUseBenefitListOptionalParams
  ): Promise<HybridUseBenefitListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, options: operationOptions },
      listOperationSpec
    ) as Promise<HybridUseBenefitListResponse>;
  }

  /**
   * Create a new hybrid use benefit under a given scope
   * @param scope The scope at which the operation is performed. This is limited to
   *              Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param body Request body for creating a hybrid use benefit
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param options The options parameters.
   */
  create(
    scope: string,
    body: HybridUseBenefitModel,
    planId: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridUseBenefitCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, body, planId, options: operationOptions },
      createOperationSpec
    ) as Promise<HybridUseBenefitCreateResponse>;
  }

  /**
   * Updates an existing hybrid use benefit
   * @param scope The scope at which the operation is performed. This is limited to
   *              Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param body Request body for creating a hybrid use benefit
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param options The options parameters.
   */
  update(
    scope: string,
    body: HybridUseBenefitModel,
    planId: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridUseBenefitUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, body, planId, options: operationOptions },
      updateOperationSpec
    ) as Promise<HybridUseBenefitUpdateResponse>;
  }

  /**
   * Gets a given plan ID
   * @param scope The scope at which the operation is performed. This is limited to
   *              Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param options The options parameters.
   */
  get(
    scope: string,
    planId: string,
    options?: coreHttp.OperationOptions
  ): Promise<HybridUseBenefitGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, planId, options: operationOptions },
      getOperationSpec
    ) as Promise<HybridUseBenefitGetResponse>;
  }

  /**
   * Deletes a given plan ID
   * @param scope The scope at which the operation is performed. This is limited to
   *              Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param options The options parameters.
   */
  delete(
    scope: string,
    planId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, planId, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListNext
   * @param scope The scope at which the operation is performed. This is limited to
   *              Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    scope: string,
    nextLink: string,
    options?: HybridUseBenefitListNextOptionalParams
  ): Promise<HybridUseBenefitListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<HybridUseBenefitListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridUseBenefitListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.scope],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HybridUseBenefitModel
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.planId],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.HybridUseBenefitModel
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.planId],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridUseBenefitModel
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.planId],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.planId],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridUseBenefitListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.nextLink],
  serializer
};
