/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  BillingSubscriptionsListByCustomerResponse,
  BillingSubscriptionsGetByCustomerResponse,
  BillingSubscriptionsListByBillingAccountResponse,
  BillingSubscriptionsListByBillingProfileResponse,
  BillingSubscriptionsListByInvoiceSectionResponse,
  BillingSubscriptionsGetResponse,
  TransferBillingSubscriptionRequestProperties,
  BillingSubscriptionsTransferResponse,
  BillingSubscriptionsValidateTransferResponse,
  BillingSubscriptionsListByCustomerNextResponse,
  BillingSubscriptionsListByBillingAccountNextResponse
} from "../models";

/**
 * Class representing a BillingSubscriptions.
 */
export class BillingSubscriptions {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class BillingSubscriptions class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the subscriptions for a customer. The operation is supported only for billing accounts with
   * agreement type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param options The options parameters.
   */
  listByCustomer(
    billingAccountName: string,
    customerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingSubscriptionsListByCustomerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, customerName, options: operationOptions },
      listByCustomerOperationSpec
    ) as Promise<BillingSubscriptionsListByCustomerResponse>;
  }

  /**
   * Gets a subscription by its ID. The operation is supported only for billing accounts with agreement
   * type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param options The options parameters.
   */
  getByCustomer(
    billingAccountName: string,
    customerName: string,
    billingSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingSubscriptionsGetByCustomerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        customerName,
        billingSubscriptionName,
        options: operationOptions
      },
      getByCustomerOperationSpec
    ) as Promise<BillingSubscriptionsGetByCustomerResponse>;
  }

  /**
   * Lists the subscriptions for a billing account. The operation is supported for billing accounts with
   * agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  listByBillingAccount(
    billingAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingSubscriptionsListByBillingAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, options: operationOptions },
      listByBillingAccountOperationSpec
    ) as Promise<BillingSubscriptionsListByBillingAccountResponse>;
  }

  /**
   * Lists the subscriptions that are billed to a billing profile. The operation is supported for billing
   * accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingSubscriptionsListByBillingProfileResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, options: operationOptions },
      listByBillingProfileOperationSpec
    ) as Promise<BillingSubscriptionsListByBillingProfileResponse>;
  }

  /**
   * Lists the subscriptions that are billed to an invoice section. The operation is supported only for
   * billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param options The options parameters.
   */
  listByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingSubscriptionsListByInvoiceSectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        options: operationOptions
      },
      listByInvoiceSectionOperationSpec
    ) as Promise<BillingSubscriptionsListByInvoiceSectionResponse>;
  }

  /**
   * Gets a subscription by its ID. The operation is supported only for billing accounts with agreement
   * type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    billingSubscriptionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingSubscriptionsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        billingSubscriptionName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<BillingSubscriptionsGetResponse>;
  }

  /**
   * Moves a subscription's charges to a new invoice section. The new invoice section must belong to the
   * same billing profile as the existing invoice section. This operation is supported only for products
   * that are purchased with a recurring charge and for billing accounts with agreement type Microsoft
   * Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param parameters Request parameters that are provided to the transfer product operation.
   * @param options The options parameters.
   */
  async transfer(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    billingSubscriptionName: string,
    parameters: TransferBillingSubscriptionRequestProperties,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<BillingSubscriptionsTransferResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      billingAccountName,
      billingProfileName,
      invoiceSectionName,
      billingSubscriptionName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        BillingSubscriptionsTransferResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      transferOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: transferOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Validates if a subscription's charges can be moved to a new invoice section. This operation is
   * supported only for products that are purchased with a recurring charge and for billing accounts with
   * agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param parameters Request parameters that are provided to the validate transfer eligibility
   *                   operation.
   * @param options The options parameters.
   */
  validateTransfer(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    billingSubscriptionName: string,
    parameters: TransferBillingSubscriptionRequestProperties,
    options?: coreHttp.OperationOptions
  ): Promise<BillingSubscriptionsValidateTransferResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        billingSubscriptionName,
        parameters,
        options: operationOptions
      },
      validateTransferOperationSpec
    ) as Promise<BillingSubscriptionsValidateTransferResponse>;
  }

  /**
   * ListByCustomerNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param nextLink The nextLink from the previous successful call to the ListByCustomer method.
   * @param options The options parameters.
   */
  listByCustomerNext(
    billingAccountName: string,
    customerName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingSubscriptionsListByCustomerNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, customerName, nextLink, options: operationOptions },
      listByCustomerNextOperationSpec
    ) as Promise<BillingSubscriptionsListByCustomerNextResponse>;
  }

  /**
   * ListByBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
   * @param options The options parameters.
   */
  listByBillingAccountNext(
    billingAccountName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingSubscriptionsListByBillingAccountNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, nextLink, options: operationOptions },
      listByBillingAccountNextOperationSpec
    ) as Promise<BillingSubscriptionsListByBillingAccountNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByCustomerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.customerName
  ],
  serializer
};
const getByCustomerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingSubscriptions/{billingSubscriptionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.customerName,
    Parameters.billingSubscriptionName
  ],
  serializer
};
const listByBillingAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  serializer
};
const listByBillingProfileOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  serializer
};
const listByInvoiceSectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName,
    Parameters.billingSubscriptionName
  ],
  serializer
};
const transferOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}/transfer",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TransferBillingSubscriptionResult
    },
    201: {
      bodyMapper: Mappers.TransferBillingSubscriptionResult
    },
    202: {
      bodyMapper: Mappers.TransferBillingSubscriptionResult
    },
    204: {
      bodyMapper: Mappers.TransferBillingSubscriptionResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters6,
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName,
    Parameters.billingSubscriptionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const validateTransferOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}/validateTransferEligibility",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ValidateSubscriptionTransferEligibilityResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters7,
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName,
    Parameters.billingSubscriptionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByCustomerNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.customerName,
    Parameters.nextLink3
  ],
  serializer
};
const listByBillingAccountNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink1
  ],
  serializer
};
