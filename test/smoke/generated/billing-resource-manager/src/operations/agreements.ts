/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  AgreementsListByBillingAccountOptionalParams,
  AgreementsListByBillingAccountResponse,
  AgreementsGetOptionalParams,
  AgreementsGetResponse
} from "../models";

/**
 * Class representing a Agreements.
 */
export class Agreements {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class Agreements class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the agreements for a billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  listByBillingAccount(
    billingAccountName: string,
    options?: AgreementsListByBillingAccountOptionalParams
  ): Promise<AgreementsListByBillingAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, options: operationOptions },
      listByBillingAccountOperationSpec
    ) as Promise<AgreementsListByBillingAccountResponse>;
  }

  /**
   * Gets an agreement by ID.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param agreementName The ID that uniquely identifies an agreement.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    agreementName: string,
    options?: AgreementsGetOptionalParams
  ): Promise<AgreementsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, agreementName, options: operationOptions },
      getOperationSpec
    ) as Promise<AgreementsGetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByBillingAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/agreements",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AgreementListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand5],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/agreements/{agreementName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Agreement
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand5],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.agreementName
  ],
  serializer
};
