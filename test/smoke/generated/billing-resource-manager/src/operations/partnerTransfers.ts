/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  InitiateTransferRequest,
  PartnerTransfersInitiateResponse,
  PartnerTransfersGetResponse,
  PartnerTransfersCancelResponse,
  PartnerTransfersListResponse,
  PartnerTransfersListNextResponse
} from "../models";

/**
 * Class representing a PartnerTransfers.
 */
export class PartnerTransfers {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class PartnerTransfers class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Sends a request to a user in a customer's billing account to transfer billing ownership of their
   * subscriptions. The operation is supported only for billing accounts with agreement type Microsoft
   * Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param customerName The ID that uniquely identifies a customer.
   * @param parameters Request parameters that are provided to the initiate transfer operation.
   * @param options The options parameters.
   */
  initiate(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    parameters: InitiateTransferRequest,
    options?: coreHttp.OperationOptions
  ): Promise<PartnerTransfersInitiateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        customerName,
        parameters,
        options: operationOptions
      },
      initiateOperationSpec
    ) as Promise<PartnerTransfersInitiateResponse>;
  }

  /**
   * Gets a transfer request by ID. The operation is supported only for billing accounts with agreement
   * type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param customerName The ID that uniquely identifies a customer.
   * @param transferName The ID that uniquely identifies a transfer request.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    transferName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PartnerTransfersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        customerName,
        transferName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<PartnerTransfersGetResponse>;
  }

  /**
   * Cancels a transfer request. The operation is supported only for billing accounts with agreement type
   * Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param customerName The ID that uniquely identifies a customer.
   * @param transferName The ID that uniquely identifies a transfer request.
   * @param options The options parameters.
   */
  cancel(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    transferName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PartnerTransfersCancelResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        customerName,
        transferName,
        options: operationOptions
      },
      cancelOperationSpec
    ) as Promise<PartnerTransfersCancelResponse>;
  }

  /**
   * Lists the transfer requests sent to a customer. The operation is supported only for billing accounts
   * with agreement type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param customerName The ID that uniquely identifies a customer.
   * @param options The options parameters.
   */
  list(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PartnerTransfersListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        customerName,
        options: operationOptions
      },
      listOperationSpec
    ) as Promise<PartnerTransfersListResponse>;
  }

  /**
   * ListNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param customerName The ID that uniquely identifies a customer.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<PartnerTransfersListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        customerName,
        nextLink,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<PartnerTransfersListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const initiateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/initiateTransfer",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TransferDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters12,
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.customerName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers/{transferName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransferDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.customerName,
    Parameters.transferName
  ],
  serializer
};
const cancelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers/{transferName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.TransferDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.customerName,
    Parameters.transferName
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransferDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.customerName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransferDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.customerName,
    Parameters.nextLink6
  ],
  serializer
};
