/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  InvoicesListByBillingAccountResponse,
  InvoicesListByBillingProfileResponse,
  InvoicesGetResponse,
  InvoicesListByBillingSubscriptionResponse,
  InvoicesGetByIdResponse,
  InvoicesListByBillingSubscriptionNextResponse
} from "../models";

/**
 * Class representing a Invoices.
 */
export class Invoices {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class Invoices class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the invoices for a billing account for a given start date and end date. The operation is
   * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
   * Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param periodStartDate The start date to fetch the invoices. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
   *                      format.
   * @param options The options parameters.
   */
  listByBillingAccount(
    billingAccountName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: coreHttp.OperationOptions
  ): Promise<InvoicesListByBillingAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        periodStartDate,
        periodEndDate,
        options: operationOptions
      },
      listByBillingAccountOperationSpec
    ) as Promise<InvoicesListByBillingAccountResponse>;
  }

  /**
   * Lists the invoices for a billing profile for a given start date and end date. The operation is
   * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
   * Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param periodStartDate The start date to fetch the invoices. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
   *                      format.
   * @param options The options parameters.
   */
  listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: coreHttp.OperationOptions
  ): Promise<InvoicesListByBillingProfileResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        periodStartDate,
        periodEndDate,
        options: operationOptions
      },
      listByBillingProfileOperationSpec
    ) as Promise<InvoicesListByBillingProfileResponse>;
  }

  /**
   * Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft
   * Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    billingProfileName: string,
    invoiceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<InvoicesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<InvoicesGetResponse>;
  }

  /**
   * Lists the invoices for a subscription.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param periodStartDate Invoice period start date.
   * @param periodEndDate Invoice period end date.
   * @param options The options parameters.
   */
  listByBillingSubscription(
    billingAccountName: string,
    billingSubscriptionName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: coreHttp.OperationOptions
  ): Promise<InvoicesListByBillingSubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingSubscriptionName,
        periodStartDate,
        periodEndDate,
        options: operationOptions
      },
      listByBillingSubscriptionOperationSpec
    ) as Promise<InvoicesListByBillingSubscriptionResponse>;
  }

  /**
   * Gets an invoice by ID.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param options The options parameters.
   */
  getById(
    billingAccountName: string,
    billingSubscriptionName: string,
    invoiceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<InvoicesGetByIdResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingSubscriptionName,
        invoiceName,
        options: operationOptions
      },
      getByIdOperationSpec
    ) as Promise<InvoicesGetByIdResponse>;
  }

  /**
   * ListByBillingSubscriptionNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param periodStartDate Invoice period start date.
   * @param periodEndDate Invoice period end date.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingSubscription
   *                 method.
   * @param options The options parameters.
   */
  listByBillingSubscriptionNext(
    billingAccountName: string,
    billingSubscriptionName: string,
    periodStartDate: string,
    periodEndDate: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<InvoicesListByBillingSubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingSubscriptionName,
        periodStartDate,
        periodEndDate,
        nextLink,
        options: operationOptions
      },
      listByBillingSubscriptionNextOperationSpec
    ) as Promise<InvoicesListByBillingSubscriptionNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByBillingAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InvoiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate2,
    Parameters.periodEndDate2
  ],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  serializer
};
const listByBillingProfileOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InvoiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate2,
    Parameters.periodEndDate2
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices/{invoiceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Invoice
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceName
  ],
  serializer
};
const listByBillingSubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/invoices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InvoiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate3,
    Parameters.periodEndDate3
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingSubscriptionName
  ],
  serializer
};
const getByIdOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/invoices/{invoiceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Invoice
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingSubscriptionName,
    Parameters.invoiceName
  ],
  serializer
};
const listByBillingSubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InvoiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate3,
    Parameters.periodEndDate3
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingSubscriptionName,
    Parameters.nextLink5
  ],
  serializer
};
