/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  ProductsListByCustomerOptionalParams,
  ProductsListByCustomerResponse,
  ProductsGetByCustomerResponse,
  ProductsListByBillingAccountOptionalParams,
  ProductsListByBillingAccountResponse,
  ProductsListByInvoiceSectionOptionalParams,
  ProductsListByInvoiceSectionResponse,
  ProductsGetResponse,
  TransferProductRequestProperties,
  ProductsTransferResponse,
  ProductsValidateTransferResponse,
  UpdateAutoRenewRequest,
  ProductsUpdateAutoRenewByInvoiceSectionResponse,
  ProductsListByBillingAccountNextOptionalParams,
  ProductsListByBillingAccountNextResponse
} from "../models";

/**
 * Class representing a Products.
 */
export class Products {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class Products class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the products for a customer. These don't include products billed based on usage.The operation
   * is supported only for billing accounts with agreement type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param options The options parameters.
   */
  listByCustomer(
    billingAccountName: string,
    customerName: string,
    options?: ProductsListByCustomerOptionalParams
  ): Promise<ProductsListByCustomerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, customerName, options: operationOptions },
      listByCustomerOperationSpec
    ) as Promise<ProductsListByCustomerResponse>;
  }

  /**
   * Gets a product by ID. The operation is supported only for billing accounts with agreement type
   * Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param productName The ID that uniquely identifies a product.
   * @param options The options parameters.
   */
  getByCustomer(
    billingAccountName: string,
    customerName: string,
    productName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProductsGetByCustomerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        customerName,
        productName,
        options: operationOptions
      },
      getByCustomerOperationSpec
    ) as Promise<ProductsGetByCustomerResponse>;
  }

  /**
   * Lists the products for a billing account. These don't include products billed based on usage. The
   * operation is supported for billing accounts with agreement type Microsoft Customer Agreement or
   * Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  listByBillingAccount(
    billingAccountName: string,
    options?: ProductsListByBillingAccountOptionalParams
  ): Promise<ProductsListByBillingAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, options: operationOptions },
      listByBillingAccountOperationSpec
    ) as Promise<ProductsListByBillingAccountResponse>;
  }

  /**
   * Lists the products for an invoice section. These don't include products billed based on usage. The
   * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param options The options parameters.
   */
  listByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: ProductsListByInvoiceSectionOptionalParams
  ): Promise<ProductsListByInvoiceSectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        options: operationOptions
      },
      listByInvoiceSectionOperationSpec
    ) as Promise<ProductsListByInvoiceSectionResponse>;
  }

  /**
   * Gets a product by ID. The operation is supported only for billing accounts with agreement type
   * Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param productName The ID that uniquely identifies a product.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    productName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProductsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        productName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ProductsGetResponse>;
  }

  /**
   * Moves a product's charges to a new invoice section. The new invoice section must belong to the same
   * billing profile as the existing invoice section. This operation is supported only for products that
   * are purchased with a recurring charge and for billing accounts with agreement type Microsoft
   * Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param productName The ID that uniquely identifies a product.
   * @param parameters Request parameters that are provided to the transfer product operation.
   * @param options The options parameters.
   */
  transfer(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    productName: string,
    parameters: TransferProductRequestProperties,
    options?: coreHttp.OperationOptions
  ): Promise<ProductsTransferResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        productName,
        parameters,
        options: operationOptions
      },
      transferOperationSpec
    ) as Promise<ProductsTransferResponse>;
  }

  /**
   * Validates if a product's charges can be moved to a new invoice section. This operation is supported
   * only for products that are purchased with a recurring charge and for billing accounts with agreement
   * type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param productName The ID that uniquely identifies a product.
   * @param parameters Request parameters that are provided to the validate transfer eligibility
   *                   operation.
   * @param options The options parameters.
   */
  validateTransfer(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    productName: string,
    parameters: TransferProductRequestProperties,
    options?: coreHttp.OperationOptions
  ): Promise<ProductsValidateTransferResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        productName,
        parameters,
        options: operationOptions
      },
      validateTransferOperationSpec
    ) as Promise<ProductsValidateTransferResponse>;
  }

  /**
   * Cancel auto renew for product by product id and invoice section name
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param productName The ID that uniquely identifies a product.
   * @param body Request parameters that are provided to the update auto renew operation.
   * @param options The options parameters.
   */
  updateAutoRenewByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    productName: string,
    body: UpdateAutoRenewRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ProductsUpdateAutoRenewByInvoiceSectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        productName,
        body,
        options: operationOptions
      },
      updateAutoRenewByInvoiceSectionOperationSpec
    ) as Promise<ProductsUpdateAutoRenewByInvoiceSectionResponse>;
  }

  /**
   * ListByBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
   * @param options The options parameters.
   */
  listByBillingAccountNext(
    billingAccountName: string,
    nextLink: string,
    options?: ProductsListByBillingAccountNextOptionalParams
  ): Promise<ProductsListByBillingAccountNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, nextLink, options: operationOptions },
      listByBillingAccountNextOperationSpec
    ) as Promise<ProductsListByBillingAccountNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByCustomerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/products",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.customerName
  ],
  serializer
};
const getByCustomerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/products/{productName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.customerName,
    Parameters.productName
  ],
  serializer
};
const listByBillingAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  serializer
};
const listByInvoiceSectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/products",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/products/{productName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName,
    Parameters.productName
  ],
  serializer
};
const transferOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/products/{productName}/transfer",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName,
    Parameters.productName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const validateTransferOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/products/{productName}/validateTransferEligibility",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ValidateProductTransferEligibilityResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters9,
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName,
    Parameters.productName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateAutoRenewByInvoiceSectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/products/{productName}/updateAutoRenew",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateAutoRenewOperation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName,
    Parameters.productName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByBillingAccountNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink1
  ],
  serializer
};
