/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  EnrollmentAccountsListByBillingAccountNameOptionalParams,
  EnrollmentAccountsListByBillingAccountNameResponse,
  EnrollmentAccountsGetByEnrollmentAccountIdOptionalParams,
  EnrollmentAccountsGetByEnrollmentAccountIdResponse
} from "../models";

/**
 * Class representing a EnrollmentAccounts.
 */
export class EnrollmentAccounts {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class EnrollmentAccounts class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the enrollment accounts for a billing account. The operation is supported only for billing
   * accounts with agreement type Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  listByBillingAccountName(
    billingAccountName: string,
    options?: EnrollmentAccountsListByBillingAccountNameOptionalParams
  ): Promise<EnrollmentAccountsListByBillingAccountNameResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, options: operationOptions },
      listByBillingAccountNameOperationSpec
    ) as Promise<EnrollmentAccountsListByBillingAccountNameResponse>;
  }

  /**
   * Gets an enrollment account by ID. The operation is supported only for billing accounts with
   * agreement type Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param enrollmentAccountName The ID that uniquely identifies an enrollment account.
   * @param options The options parameters.
   */
  getByEnrollmentAccountId(
    billingAccountName: string,
    enrollmentAccountName: string,
    options?: EnrollmentAccountsGetByEnrollmentAccountIdOptionalParams
  ): Promise<EnrollmentAccountsGetByEnrollmentAccountIdResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, enrollmentAccountName, options: operationOptions },
      getByEnrollmentAccountIdOperationSpec
    ) as Promise<EnrollmentAccountsGetByEnrollmentAccountIdResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByBillingAccountNameOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/enrollmentAccounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EnrollmentAccountListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand4,
    Parameters.filter5
  ],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  serializer
};
const getByEnrollmentAccountIdOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/enrollmentAccounts/{enrollmentAccountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EnrollmentAccount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand4,
    Parameters.filter5
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.enrollmentAccountName
  ],
  serializer
};
