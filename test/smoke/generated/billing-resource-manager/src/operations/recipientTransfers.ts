/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  AcceptTransferRequest,
  RecipientTransfersAcceptResponse,
  RecipientTransfersValidateResponse,
  RecipientTransfersDeclineResponse,
  RecipientTransfersGetResponse,
  RecipientTransfersListResponse,
  RecipientTransfersListNextResponse
} from "../models";

/**
 * Class representing a RecipientTransfers.
 */
export class RecipientTransfers {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class RecipientTransfers class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Accepts a transfer request.
   * @param transferName The ID that uniquely identifies a transfer request.
   * @param parameters Request parameters that are provided to the accept transfer operation.
   * @param options The options parameters.
   */
  accept(
    transferName: string,
    parameters: AcceptTransferRequest,
    options?: coreHttp.OperationOptions
  ): Promise<RecipientTransfersAcceptResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { transferName, parameters, options: operationOptions },
      acceptOperationSpec
    ) as Promise<RecipientTransfersAcceptResponse>;
  }

  /**
   * Validates if a subscription or a reservation can be transferred. Use this operation to validate your
   * subscriptions or reservation before using the accept transfer operation.
   * @param transferName The ID that uniquely identifies a transfer request.
   * @param parameters Request parameters that are provided to the validate transfer operation.
   * @param options The options parameters.
   */
  validate(
    transferName: string,
    parameters: AcceptTransferRequest,
    options?: coreHttp.OperationOptions
  ): Promise<RecipientTransfersValidateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { transferName, parameters, options: operationOptions },
      validateOperationSpec
    ) as Promise<RecipientTransfersValidateResponse>;
  }

  /**
   * Declines a transfer request.
   * @param transferName The ID that uniquely identifies a transfer request.
   * @param options The options parameters.
   */
  decline(
    transferName: string,
    options?: coreHttp.OperationOptions
  ): Promise<RecipientTransfersDeclineResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { transferName, options: operationOptions },
      declineOperationSpec
    ) as Promise<RecipientTransfersDeclineResponse>;
  }

  /**
   * Gets a transfer request by ID. The caller must be the recipient of the transfer request.
   * @param transferName The ID that uniquely identifies a transfer request.
   * @param options The options parameters.
   */
  get(
    transferName: string,
    options?: coreHttp.OperationOptions
  ): Promise<RecipientTransfersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { transferName, options: operationOptions },
      getOperationSpec
    ) as Promise<RecipientTransfersGetResponse>;
  }

  /**
   * Lists the transfer requests received by the caller.
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<RecipientTransfersListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<RecipientTransfersListResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<RecipientTransfersListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<RecipientTransfersListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const acceptOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Billing/transfers/{transferName}/acceptTransfer",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters13,
  urlParameters: [Parameters.$host, Parameters.transferName],
  headerParameters: [Parameters.contentType],
  serializer
};
const validateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/transfers/{transferName}/validateTransfer",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ValidateTransferListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters14,
  urlParameters: [Parameters.$host, Parameters.transferName],
  headerParameters: [Parameters.contentType],
  serializer
};
const declineOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Billing/transfers/{transferName}/declineTransfer",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.transferName],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Billing/transfers/{transferName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.transferName],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Billing/transfers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink6],
  serializer
};
