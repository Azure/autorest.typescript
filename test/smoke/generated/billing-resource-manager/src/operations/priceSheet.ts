/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  PriceSheetDownloadResponse,
  PriceSheetDownloadByBillingProfileResponse
} from "../models";

/**
 * Class representing a PriceSheet.
 */
export class PriceSheet {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class PriceSheet class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Gets a URL to download the pricesheet for an invoice. The operation is supported for billing
   * accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param options The options parameters.
   */
  async download(
    billingAccountName: string,
    billingProfileName: string,
    invoiceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<PriceSheetDownloadResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "location"
    );

    const args: coreHttp.OperationArguments = {
      billingAccountName,
      billingProfileName,
      invoiceName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        PriceSheetDownloadResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      downloadOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: downloadOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  /**
   * Gets a URL to download the current month's pricesheet for a billing profile. The operation is
   * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
   * Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  async downloadByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<PriceSheetDownloadByBillingProfileResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "location"
    );

    const args: coreHttp.OperationArguments = {
      billingAccountName,
      billingProfileName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        PriceSheetDownloadByBillingProfileResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      downloadByBillingProfileOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: downloadByBillingProfileOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "location"
    });
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const downloadOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices/{invoiceName}/pricesheet/default/download",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadUrl
    },
    201: {
      bodyMapper: Mappers.DownloadUrl
    },
    202: {
      bodyMapper: Mappers.DownloadUrl
    },
    204: {
      bodyMapper: Mappers.DownloadUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceName
  ],
  serializer
};
const downloadByBillingProfileOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/pricesheet/default/download",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadUrl
    },
    201: {
      bodyMapper: Mappers.DownloadUrl
    },
    202: {
      bodyMapper: Mappers.DownloadUrl
    },
    204: {
      bodyMapper: Mappers.DownloadUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  serializer
};
