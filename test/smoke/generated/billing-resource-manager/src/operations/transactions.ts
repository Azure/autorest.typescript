/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  TransactionsListByCustomerOptionalParams,
  TransactionsListByCustomerResponse,
  TransactionsListByBillingAccountOptionalParams,
  TransactionsListByBillingAccountResponse,
  TransactionsListByBillingProfileOptionalParams,
  TransactionsListByBillingProfileResponse,
  TransactionsListByInvoiceSectionOptionalParams,
  TransactionsListByInvoiceSectionResponse,
  TransactionsListByInvoiceResponse,
  TransactionsGetResponse,
  TransactionsListByCustomerNextOptionalParams,
  TransactionsListByCustomerNextResponse,
  TransactionsListByBillingAccountNextOptionalParams,
  TransactionsListByBillingAccountNextResponse,
  TransactionsListByInvoiceNextResponse
} from "../models";

/**
 * Class representing a Transactions.
 */
export class Transactions {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class Transactions class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the billed and unbilled transactions by customer id for given start date and end date.
   * Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed
   * under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is
   * generated.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param periodStartDate The start date to fetch the transactions. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the transactions. The date should be specified in
   *                      MM-DD-YYYY format.
   * @param options The options parameters.
   */
  listByCustomer(
    billingAccountName: string,
    customerName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: TransactionsListByCustomerOptionalParams
  ): Promise<TransactionsListByCustomerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        customerName,
        periodStartDate,
        periodEndDate,
        options: operationOptions
      },
      listByCustomerOperationSpec
    ) as Promise<TransactionsListByCustomerResponse>;
  }

  /**
   * Lists the billed and unbilled transactions by billing account name for given start and end date.
   * Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed
   * under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is
   * generated.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param periodStartDate The start date to fetch the transactions. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the transactions. The date should be specified in
   *                      MM-DD-YYYY format.
   * @param options The options parameters.
   */
  listByBillingAccount(
    billingAccountName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: TransactionsListByBillingAccountOptionalParams
  ): Promise<TransactionsListByBillingAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        periodStartDate,
        periodEndDate,
        options: operationOptions
      },
      listByBillingAccountOperationSpec
    ) as Promise<TransactionsListByBillingAccountResponse>;
  }

  /**
   * Lists the billed and unbilled transactions by billing profile name for given start date and end
   * date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are
   * listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice
   * is generated.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param periodStartDate The start date to fetch the transactions. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the transactions. The date should be specified in
   *                      MM-DD-YYYY format.
   * @param options The options parameters.
   */
  listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: TransactionsListByBillingProfileOptionalParams
  ): Promise<TransactionsListByBillingProfileResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        periodStartDate,
        periodEndDate,
        options: operationOptions
      },
      listByBillingProfileOperationSpec
    ) as Promise<TransactionsListByBillingProfileResponse>;
  }

  /**
   * Lists the billed and unbilled transactions by invoice section name for given start date and end
   * date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are
   * listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice
   * is generated.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param periodStartDate The start date to fetch the transactions. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the transactions. The date should be specified in
   *                      MM-DD-YYYY format.
   * @param options The options parameters.
   */
  listByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: TransactionsListByInvoiceSectionOptionalParams
  ): Promise<TransactionsListByInvoiceSectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        periodStartDate,
        periodEndDate,
        options: operationOptions
      },
      listByInvoiceSectionOperationSpec
    ) as Promise<TransactionsListByInvoiceSectionResponse>;
  }

  /**
   * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage
   * charges.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param options The options parameters.
   */
  listByInvoice(
    billingAccountName: string,
    billingProfileName: string,
    invoiceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<TransactionsListByInvoiceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceName,
        options: operationOptions
      },
      listByInvoiceOperationSpec
    ) as Promise<TransactionsListByInvoiceResponse>;
  }

  /**
   * Gets a transaction by ID. The operation is supported for billing accounts with agreement type
   * Microsoft Customer Agreement or Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param periodStartDate The start date to fetch the transactions. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the transactions. The date should be specified in
   *                      MM-DD-YYYY format.
   * @param transactionName The ID that uniquely identifies a transaction.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    billingProfileName: string,
    periodStartDate: string,
    periodEndDate: string,
    transactionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<TransactionsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        periodStartDate,
        periodEndDate,
        transactionName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<TransactionsGetResponse>;
  }

  /**
   * ListByCustomerNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param nextLink The nextLink from the previous successful call to the ListByCustomer method.
   * @param periodStartDate The start date to fetch the transactions. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the transactions. The date should be specified in
   *                      MM-DD-YYYY format.
   * @param options The options parameters.
   */
  listByCustomerNext(
    billingAccountName: string,
    customerName: string,
    nextLink: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: TransactionsListByCustomerNextOptionalParams
  ): Promise<TransactionsListByCustomerNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        customerName,
        nextLink,
        periodStartDate,
        periodEndDate,
        options: operationOptions
      },
      listByCustomerNextOperationSpec
    ) as Promise<TransactionsListByCustomerNextResponse>;
  }

  /**
   * ListByBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
   * @param periodStartDate The start date to fetch the transactions. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the transactions. The date should be specified in
   *                      MM-DD-YYYY format.
   * @param options The options parameters.
   */
  listByBillingAccountNext(
    billingAccountName: string,
    nextLink: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: TransactionsListByBillingAccountNextOptionalParams
  ): Promise<TransactionsListByBillingAccountNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        nextLink,
        periodStartDate,
        periodEndDate,
        options: operationOptions
      },
      listByBillingAccountNextOperationSpec
    ) as Promise<TransactionsListByBillingAccountNextResponse>;
  }

  /**
   * ListByInvoiceNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param nextLink The nextLink from the previous successful call to the ListByInvoice method.
   * @param options The options parameters.
   */
  listByInvoiceNext(
    billingAccountName: string,
    billingProfileName: string,
    invoiceName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<TransactionsListByInvoiceNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceName,
        nextLink,
        options: operationOptions
      },
      listByInvoiceNextOperationSpec
    ) as Promise<TransactionsListByInvoiceNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByCustomerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/transactions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate,
    Parameters.periodEndDate,
    Parameters.filter2
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.customerName
  ],
  serializer
};
const listByBillingAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/transactions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate1,
    Parameters.periodEndDate1,
    Parameters.filter3
  ],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  serializer
};
const listByBillingProfileOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate1,
    Parameters.periodEndDate1,
    Parameters.filter3
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  serializer
};
const listByInvoiceSectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transactions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate1,
    Parameters.periodEndDate1,
    Parameters.filter3
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName
  ],
  serializer
};
const listByInvoiceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices/{invoiceName}/transactions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions/{transactionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Transaction
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate1,
    Parameters.periodEndDate1
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.transactionName
  ],
  serializer
};
const listByCustomerNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate,
    Parameters.periodEndDate,
    Parameters.filter2
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.customerName,
    Parameters.nextLink3
  ],
  serializer
};
const listByBillingAccountNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate1,
    Parameters.periodEndDate1,
    Parameters.filter3
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink1
  ],
  serializer
};
const listByInvoiceNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceName,
    Parameters.nextLink4
  ],
  serializer
};
