/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  BillingAccountsListOptionalParams,
  BillingAccountsListResponse,
  BillingAccountsGetOptionalParams,
  BillingAccountsGetResponse,
  BillingAccountUpdateRequest,
  BillingAccountsUpdateResponse,
  BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse,
  BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionNextResponse
} from "../models";

/**
 * Class representing a BillingAccounts.
 */
export class BillingAccounts {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class BillingAccounts class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the billing accounts that a user has access to.
   * @param options The options parameters.
   */
  list(
    options?: BillingAccountsListOptionalParams
  ): Promise<BillingAccountsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<BillingAccountsListResponse>;
  }

  /**
   * Gets a billing account by its ID.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    options?: BillingAccountsGetOptionalParams
  ): Promise<BillingAccountsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, options: operationOptions },
      getOperationSpec
    ) as Promise<BillingAccountsGetResponse>;
  }

  /**
   * Updates the properties of a billing account. Currently, displayName and address can be updated. The
   * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param parameters Request parameters that are provided to the update billing account operation.
   * @param options The options parameters.
   */
  async update(
    billingAccountName: string,
    parameters: BillingAccountUpdateRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<BillingAccountsUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      billingAccountName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        BillingAccountsUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * Lists the invoice sections for which the user has permission to create Azure subscriptions. The
   * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  listInvoiceSectionsByCreateSubscriptionPermission(
    billingAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, options: operationOptions },
      listInvoiceSectionsByCreateSubscriptionPermissionOperationSpec
    ) as Promise<
      BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse
    >;
  }

  /**
   * ListInvoiceSectionsByCreateSubscriptionPermissionNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListInvoiceSectionsByCreateSubscriptionPermission method.
   * @param options The options parameters.
   */
  listInvoiceSectionsByCreateSubscriptionPermissionNext(
    billingAccountName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionNextResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, nextLink, options: operationOptions },
      listInvoiceSectionsByCreateSubscriptionPermissionNextOperationSpec
    ) as Promise<
      BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionNextResponse
    >;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingAccountListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [Parameters.$host],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingAccount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.BillingAccount
    },
    201: {
      bodyMapper: Mappers.BillingAccount
    },
    202: {
      bodyMapper: Mappers.BillingAccount
    },
    204: {
      bodyMapper: Mappers.BillingAccount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.contentType],
  serializer
};
const listInvoiceSectionsByCreateSubscriptionPermissionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/listInvoiceSectionsWithCreateSubscriptionPermission",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.InvoiceSectionListWithCreateSubPermissionResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  serializer
};
const listInvoiceSectionsByCreateSubscriptionPermissionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.InvoiceSectionListWithCreateSubPermissionResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink
  ],
  serializer
};
