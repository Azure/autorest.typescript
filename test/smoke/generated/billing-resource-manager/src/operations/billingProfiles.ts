/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  BillingProfilesListByBillingAccountOptionalParams,
  BillingProfilesListByBillingAccountResponse,
  BillingProfilesGetOptionalParams,
  BillingProfilesGetResponse,
  BillingProfileCreationRequest,
  BillingProfilesCreateResponse,
  BillingProfile,
  BillingProfilesUpdateResponse
} from "../models";

/**
 * Class representing a BillingProfiles.
 */
export class BillingProfiles {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class BillingProfiles class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the billing profiles that a user has access to. The operation is supported for billing
   * accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  listByBillingAccount(
    billingAccountName: string,
    options?: BillingProfilesListByBillingAccountOptionalParams
  ): Promise<BillingProfilesListByBillingAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, options: operationOptions },
      listByBillingAccountOperationSpec
    ) as Promise<BillingProfilesListByBillingAccountResponse>;
  }

  /**
   * Gets a billing profile by its ID. The operation is supported for billing accounts with agreement
   * type Microsoft Customer Agreement or Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    billingProfileName: string,
    options?: BillingProfilesGetOptionalParams
  ): Promise<BillingProfilesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, options: operationOptions },
      getOperationSpec
    ) as Promise<BillingProfilesGetResponse>;
  }

  /**
   * Creates a billing profile. The operation is supported for billing accounts with agreement type
   * Microsoft Customer Agreement or Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param parameters Request parameters that are provided to the create billing profile operation.
   * @param options The options parameters.
   */
  async create(
    billingAccountName: string,
    billingProfileName: string,
    parameters: BillingProfileCreationRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<BillingProfilesCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      billingAccountName,
      billingProfileName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        BillingProfilesCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Updates the properties of a billing profile. Currently, displayName, poNumber, bill-to address and
   * invoiceEmailOptIn can be updated. The operation is supported for billing accounts with agreement
   * type Microsoft Customer Agreement or Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param parameters Request parameters supplied to the update billing profile operation.
   * @param options The options parameters.
   */
  async update(
    billingAccountName: string,
    billingProfileName: string,
    parameters: BillingProfile,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<BillingProfilesUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      billingAccountName,
      billingProfileName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        BillingProfilesUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByBillingAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingProfileListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand1],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand1],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.BillingProfile
    },
    201: {
      bodyMapper: Mappers.BillingProfile
    },
    202: {
      bodyMapper: Mappers.BillingProfile
    },
    204: {
      bodyMapper: Mappers.BillingProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.BillingProfile
    },
    201: {
      bodyMapper: Mappers.BillingProfile
    },
    202: {
      bodyMapper: Mappers.BillingProfile
    },
    204: {
      bodyMapper: Mappers.BillingProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
