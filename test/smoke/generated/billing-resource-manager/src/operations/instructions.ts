/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  InstructionsListByBillingProfileResponse,
  InstructionsGetResponse,
  Instruction,
  InstructionsPutResponse,
  InstructionsListByBillingProfileNextResponse
} from "../models";

/**
 * Class representing a Instructions.
 */
export class Instructions {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class Instructions class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the instructions by billing profile id.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: coreHttp.OperationOptions
  ): Promise<InstructionsListByBillingProfileResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, options: operationOptions },
      listByBillingProfileOperationSpec
    ) as Promise<InstructionsListByBillingProfileResponse>;
  }

  /**
   * Get the instruction by name. These are custom billing instructions and are only applicable for
   * certain customers.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param instructionName Instruction Name.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    billingProfileName: string,
    instructionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<InstructionsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        instructionName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<InstructionsGetResponse>;
  }

  /**
   * Creates or updates an instruction. These are custom billing instructions and are only applicable for
   * certain customers.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param instructionName Instruction Name.
   * @param parameters The new instruction.
   * @param options The options parameters.
   */
  put(
    billingAccountName: string,
    billingProfileName: string,
    instructionName: string,
    parameters: Instruction,
    options?: coreHttp.OperationOptions
  ): Promise<InstructionsPutResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        instructionName,
        parameters,
        options: operationOptions
      },
      putOperationSpec
    ) as Promise<InstructionsPutResponse>;
  }

  /**
   * ListByBillingProfileNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
   * @param options The options parameters.
   */
  listByBillingProfileNext(
    billingAccountName: string,
    billingProfileName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<InstructionsListByBillingProfileNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        nextLink,
        options: operationOptions
      },
      listByBillingProfileNextOperationSpec
    ) as Promise<InstructionsListByBillingProfileNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByBillingProfileOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InstructionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions/{instructionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Instruction
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.instructionName
  ],
  serializer
};
const putOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions/{instructionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Instruction
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.instructionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByBillingProfileNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InstructionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.nextLink2
  ],
  serializer
};
