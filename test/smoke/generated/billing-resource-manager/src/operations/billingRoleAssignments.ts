/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  BillingRoleAssignmentsGetByBillingAccountResponse,
  BillingRoleAssignmentsDeleteByBillingAccountResponse,
  BillingRoleAssignmentsGetByInvoiceSectionResponse,
  BillingRoleAssignmentsDeleteByInvoiceSectionResponse,
  BillingRoleAssignmentsGetByBillingProfileResponse,
  BillingRoleAssignmentsDeleteByBillingProfileResponse,
  BillingRoleAssignmentsListByBillingAccountResponse,
  BillingRoleAssignmentPayload,
  BillingRoleAssignmentsAddByBillingAccountResponse,
  BillingRoleAssignmentsListByInvoiceSectionResponse,
  BillingRoleAssignmentsAddByInvoiceSectionResponse,
  BillingRoleAssignmentsListByBillingProfileResponse,
  BillingRoleAssignmentsAddByBillingProfileResponse
} from "../models";

/**
 * Class representing a BillingRoleAssignments.
 */
export class BillingRoleAssignments {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class BillingRoleAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Gets a role assignment for the caller on a billing account. The operation is supported for billing
   * accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
   * @param options The options parameters.
   */
  getByBillingAccount(
    billingAccountName: string,
    billingRoleAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingRoleAssignmentsGetByBillingAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingRoleAssignmentName,
        options: operationOptions
      },
      getByBillingAccountOperationSpec
    ) as Promise<BillingRoleAssignmentsGetByBillingAccountResponse>;
  }

  /**
   * Deletes a role assignment for the caller on a billing account. The operation is supported for
   * billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
   * @param options The options parameters.
   */
  deleteByBillingAccount(
    billingAccountName: string,
    billingRoleAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingRoleAssignmentsDeleteByBillingAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingRoleAssignmentName,
        options: operationOptions
      },
      deleteByBillingAccountOperationSpec
    ) as Promise<BillingRoleAssignmentsDeleteByBillingAccountResponse>;
  }

  /**
   * Gets a role assignment for the caller on an invoice section. The operation is supported for billing
   * accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
   * @param options The options parameters.
   */
  getByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    billingRoleAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingRoleAssignmentsGetByInvoiceSectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        billingRoleAssignmentName,
        options: operationOptions
      },
      getByInvoiceSectionOperationSpec
    ) as Promise<BillingRoleAssignmentsGetByInvoiceSectionResponse>;
  }

  /**
   * Deletes a role assignment for the caller on an invoice section. The operation is supported for
   * billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
   * @param options The options parameters.
   */
  deleteByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    billingRoleAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingRoleAssignmentsDeleteByInvoiceSectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        billingRoleAssignmentName,
        options: operationOptions
      },
      deleteByInvoiceSectionOperationSpec
    ) as Promise<BillingRoleAssignmentsDeleteByInvoiceSectionResponse>;
  }

  /**
   * Gets a role assignment for the caller on a billing profile. The operation is supported for billing
   * accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
   * @param options The options parameters.
   */
  getByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    billingRoleAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingRoleAssignmentsGetByBillingProfileResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        billingRoleAssignmentName,
        options: operationOptions
      },
      getByBillingProfileOperationSpec
    ) as Promise<BillingRoleAssignmentsGetByBillingProfileResponse>;
  }

  /**
   * Deletes a role assignment for the caller on a billing profile. The operation is supported for
   * billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
   * @param options The options parameters.
   */
  deleteByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    billingRoleAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingRoleAssignmentsDeleteByBillingProfileResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        billingRoleAssignmentName,
        options: operationOptions
      },
      deleteByBillingProfileOperationSpec
    ) as Promise<BillingRoleAssignmentsDeleteByBillingProfileResponse>;
  }

  /**
   * Lists the role assignments for the caller on a billing account. The operation is supported for
   * billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  listByBillingAccount(
    billingAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingRoleAssignmentsListByBillingAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, options: operationOptions },
      listByBillingAccountOperationSpec
    ) as Promise<BillingRoleAssignmentsListByBillingAccountResponse>;
  }

  /**
   * Adds a role assignment on a billing account. The operation is supported for billing accounts with
   * agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param parameters Request parameters that are provided to the create billing role assignment
   *                   operation.
   * @param options The options parameters.
   */
  addByBillingAccount(
    billingAccountName: string,
    parameters: BillingRoleAssignmentPayload,
    options?: coreHttp.OperationOptions
  ): Promise<BillingRoleAssignmentsAddByBillingAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, parameters, options: operationOptions },
      addByBillingAccountOperationSpec
    ) as Promise<BillingRoleAssignmentsAddByBillingAccountResponse>;
  }

  /**
   * Lists the role assignments for the caller on an invoice section. The operation is supported for
   * billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param options The options parameters.
   */
  listByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingRoleAssignmentsListByInvoiceSectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        options: operationOptions
      },
      listByInvoiceSectionOperationSpec
    ) as Promise<BillingRoleAssignmentsListByInvoiceSectionResponse>;
  }

  /**
   * Adds a role assignment on an invoice section. The operation is supported for billing accounts with
   * agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param parameters Request parameters that are provided to the create billing role assignment
   *                   operation.
   * @param options The options parameters.
   */
  addByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    parameters: BillingRoleAssignmentPayload,
    options?: coreHttp.OperationOptions
  ): Promise<BillingRoleAssignmentsAddByInvoiceSectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        parameters,
        options: operationOptions
      },
      addByInvoiceSectionOperationSpec
    ) as Promise<BillingRoleAssignmentsAddByInvoiceSectionResponse>;
  }

  /**
   * Lists the role assignments for the caller on a billing profile. The operation is supported for
   * billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BillingRoleAssignmentsListByBillingProfileResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, options: operationOptions },
      listByBillingProfileOperationSpec
    ) as Promise<BillingRoleAssignmentsListByBillingProfileResponse>;
  }

  /**
   * Adds a role assignment on a billing profile. The operation is supported for billing accounts with
   * agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param parameters Request parameters that are provided to the create billing role assignment
   *                   operation.
   * @param options The options parameters.
   */
  addByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    parameters: BillingRoleAssignmentPayload,
    options?: coreHttp.OperationOptions
  ): Promise<BillingRoleAssignmentsAddByBillingProfileResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        parameters,
        options: operationOptions
      },
      addByBillingProfileOperationSpec
    ) as Promise<BillingRoleAssignmentsAddByBillingProfileResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getByBillingAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/{billingRoleAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingRoleAssignmentName
  ],
  serializer
};
const deleteByBillingAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/{billingRoleAssignmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingRoleAssignmentName
  ],
  serializer
};
const getByInvoiceSectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleAssignments/{billingRoleAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName,
    Parameters.billingRoleAssignmentName
  ],
  serializer
};
const deleteByInvoiceSectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleAssignments/{billingRoleAssignmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName,
    Parameters.billingRoleAssignmentName
  ],
  serializer
};
const getByBillingProfileOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleAssignments/{billingRoleAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.billingRoleAssignmentName
  ],
  serializer
};
const deleteByBillingProfileOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleAssignments/{billingRoleAssignmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.billingRoleAssignmentName
  ],
  serializer
};
const listByBillingAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  serializer
};
const addByBillingAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/createBillingRoleAssignment",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.BillingRoleAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters15,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByInvoiceSectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName
  ],
  serializer
};
const addByInvoiceSectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/createBillingRoleAssignment",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.BillingRoleAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters15,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByBillingProfileOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  serializer
};
const addByBillingProfileOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/createBillingRoleAssignment",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.BillingRoleAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters15,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
