/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  CustomersListByBillingProfileOptionalParams,
  CustomersListByBillingProfileResponse,
  CustomersListByBillingAccountOptionalParams,
  CustomersListByBillingAccountResponse,
  CustomersGetOptionalParams,
  CustomersGetResponse,
  CustomersListByBillingProfileNextOptionalParams,
  CustomersListByBillingProfileNextResponse,
  CustomersListByBillingAccountNextOptionalParams,
  CustomersListByBillingAccountNextResponse
} from "../models";

/**
 * Class representing a Customers.
 */
export class Customers {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class Customers class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the customers that are billed to a billing profile. The operation is supported only for
   * billing accounts with agreement type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: CustomersListByBillingProfileOptionalParams
  ): Promise<CustomersListByBillingProfileResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, options: operationOptions },
      listByBillingProfileOperationSpec
    ) as Promise<CustomersListByBillingProfileResponse>;
  }

  /**
   * Lists the customers that are billed to a billing account. The operation is supported only for
   * billing accounts with agreement type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  listByBillingAccount(
    billingAccountName: string,
    options?: CustomersListByBillingAccountOptionalParams
  ): Promise<CustomersListByBillingAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, options: operationOptions },
      listByBillingAccountOperationSpec
    ) as Promise<CustomersListByBillingAccountResponse>;
  }

  /**
   * Gets a customer by its ID. The operation is supported only for billing accounts with agreement type
   * Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    customerName: string,
    options?: CustomersGetOptionalParams
  ): Promise<CustomersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, customerName, options: operationOptions },
      getOperationSpec
    ) as Promise<CustomersGetResponse>;
  }

  /**
   * ListByBillingProfileNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
   * @param options The options parameters.
   */
  listByBillingProfileNext(
    billingAccountName: string,
    billingProfileName: string,
    nextLink: string,
    options?: CustomersListByBillingProfileNextOptionalParams
  ): Promise<CustomersListByBillingProfileNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        nextLink,
        options: operationOptions
      },
      listByBillingProfileNextOperationSpec
    ) as Promise<CustomersListByBillingProfileNextResponse>;
  }

  /**
   * ListByBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
   * @param options The options parameters.
   */
  listByBillingAccountNext(
    billingAccountName: string,
    nextLink: string,
    options?: CustomersListByBillingAccountNextOptionalParams
  ): Promise<CustomersListByBillingAccountNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountName, nextLink, options: operationOptions },
      listByBillingAccountNextOperationSpec
    ) as Promise<CustomersListByBillingAccountNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByBillingProfileOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skiptoken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  serializer
};
const listByBillingAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skiptoken
  ],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Customer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand2],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.customerName
  ],
  serializer
};
const listByBillingProfileNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skiptoken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.nextLink2
  ],
  serializer
};
const listByBillingAccountNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skiptoken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink1
  ],
  serializer
};
