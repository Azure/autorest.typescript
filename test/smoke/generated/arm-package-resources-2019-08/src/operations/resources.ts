/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Resources } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ResourceManagementClient } from "../resourceManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  GenericResourceExpanded,
  ResourcesListByResourceGroupResponse,
  ResourcesListResponse,
  ResourcesCreateOrUpdateResponse,
  ResourcesUpdateResponse,
  ResourcesGetResponse,
  ResourcesCreateOrUpdateByIdResponse,
  ResourcesUpdateByIdResponse,
  ResourcesGetByIdResponse,
  ResourcesListByResourceGroupNextResponse,
  ResourcesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Resources operations. */
export class ResourcesImpl implements Resources {
  private readonly client: ResourceManagementClient;

  /**
   * Initialize a new instance of the class Resources class.
   * @param client Reference to the service client
   */
  constructor(client: ResourceManagementClient) {
    this.client = client;
  }

  /**
   * Get all the resources for a resource group.
   *
   */
  public listByResourceGroup(): PagedAsyncIterableIterator<
    GenericResourceExpanded
  > {
    const iter = this.listByResourceGroupPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage();
      }
    };
  }

  private async *listByResourceGroupPagingPage(): AsyncIterableIterator<
    GenericResourceExpanded[]
  > {
    let result = await this._listByResourceGroup();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(): AsyncIterableIterator<
    GenericResourceExpanded
  > {
    for await (const page of this.listByResourceGroupPagingPage()) {
      yield* page;
    }
  }

  /**
   * Get all the resources in a subscription.
   *
   */
  public list(): PagedAsyncIterableIterator<GenericResourceExpanded> {
    const iter = this.listPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage();
      }
    };
  }

  private async *listPagingPage(): AsyncIterableIterator<
    GenericResourceExpanded[]
  > {
    let result = await this._list();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(): AsyncIterableIterator<
    GenericResourceExpanded
  > {
    for await (const page of this.listPagingPage()) {
      yield* page;
    }
  }

  /**
   * Get all the resources for a resource group.
   *
   */
  private _listByResourceGroup(): Promise<
    ResourcesListByResourceGroupResponse
  > {}

  /**
   * The resources to move must be in the same source resource group. The target resource group may be in
   * a different subscription. When moving resources, both the source group and the target group are
   * locked for the duration of the operation. Write and delete operations are blocked on the groups
   * until the move completes.
   *
   */
  async beginMoveResources(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { sourceResourceGroupName, options },
      moveResourcesOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * The resources to move must be in the same source resource group. The target resource group may be in
   * a different subscription. When moving resources, both the source group and the target group are
   * locked for the duration of the operation. Write and delete operations are blocked on the groups
   * until the move completes.
   *
   */
  async beginMoveResourcesAndWait(): Promise<void> {
    const poller = await this.beginMoveResources();
    return poller.pollUntilDone();
  }

  /**
   * This operation checks whether the specified resources can be moved to the target. The resources to
   * move must be in the same source resource group. The target resource group may be in a different
   * subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation
   * fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the
   * Location header value to check the result of the long-running operation.
   *
   */
  async beginValidateMoveResources(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { sourceResourceGroupName, options },
      validateMoveResourcesOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * This operation checks whether the specified resources can be moved to the target. The resources to
   * move must be in the same source resource group. The target resource group may be in a different
   * subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation
   * fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the
   * Location header value to check the result of the long-running operation.
   *
   */
  async beginValidateMoveResourcesAndWait(): Promise<void> {
    const poller = await this.beginValidateMoveResources();
    return poller.pollUntilDone();
  }

  /**
   * Get all the resources in a subscription.
   *
   */
  private _list(): Promise<ResourcesListResponse> {}

  /**
   * Checks whether a resource exists.
   *
   */
  checkExistence(): Promise<void> {}

  /**
   * Deletes a resource.
   *
   */
  async beginDelete(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * Deletes a resource.
   *
   */
  async beginDeleteAndWait(): Promise<void> {
    const poller = await this.beginDelete();
    return poller.pollUntilDone();
  }

  /**
   * Creates a resource.
   *
   */
  async beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<ResourcesCreateOrUpdateResponse>,
      ResourcesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ResourcesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        apiVersion,
        options
      },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a resource.
   *
   */
  async beginCreateOrUpdateAndWait(): Promise<ResourcesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate();
    return poller.pollUntilDone();
  }

  /**
   * Updates a resource.
   *
   */
  async beginUpdate(): Promise<
    PollerLike<
      PollOperationState<ResourcesUpdateResponse>,
      ResourcesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ResourcesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        apiVersion,
        options
      },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates a resource.
   *
   */
  async beginUpdateAndWait(): Promise<ResourcesUpdateResponse> {
    const poller = await this.beginUpdate();
    return poller.pollUntilDone();
  }

  /**
   * Gets a resource.
   *
   */
  get(): Promise<ResourcesGetResponse> {}

  /**
   * Checks by ID whether a resource exists.
   *
   */
  checkExistenceById(): Promise<void> {}

  /**
   * Deletes a resource by ID.
   *
   */
  async beginDeleteById(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * Deletes a resource by ID.
   *
   */
  async beginDeleteByIdAndWait(): Promise<void> {
    const poller = await this.beginDeleteById();
    return poller.pollUntilDone();
  }

  /**
   * Create a resource by ID.
   *
   */
  async beginCreateOrUpdateById(): Promise<
    PollerLike<
      PollOperationState<ResourcesCreateOrUpdateByIdResponse>,
      ResourcesCreateOrUpdateByIdResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ResourcesCreateOrUpdateByIdResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceId, apiVersion, options },
      createOrUpdateByIdOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a resource by ID.
   *
   */
  async beginCreateOrUpdateByIdAndWait(): Promise<
    ResourcesCreateOrUpdateByIdResponse
  > {
    const poller = await this.beginCreateOrUpdateById();
    return poller.pollUntilDone();
  }

  /**
   * Updates a resource by ID.
   *
   */
  async beginUpdateById(): Promise<
    PollerLike<
      PollOperationState<ResourcesUpdateByIdResponse>,
      ResourcesUpdateByIdResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ResourcesUpdateByIdResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceId, apiVersion, options },
      updateByIdOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates a resource by ID.
   *
   */
  async beginUpdateByIdAndWait(): Promise<ResourcesUpdateByIdResponse> {
    const poller = await this.beginUpdateById();
    return poller.pollUntilDone();
  }

  /**
   * Gets a resource by ID.
   *
   */
  getById(): Promise<ResourcesGetByIdResponse> {}

  /**
   * ListByResourceGroupNext
   *
   */
  private _listByResourceGroupNext(): Promise<
    ResourcesListByResourceGroupNextResponse
  > {}

  /**
   * ListNext
   *
   */
  private _listNext(): Promise<ResourcesListNextResponse> {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const moveResourcesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.sourceResourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateMoveResourcesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.sourceResourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GenericResource
    },
    201: {
      bodyMapper: Mappers.GenericResource
    },
    202: {
      bodyMapper: Mappers.GenericResource
    },
    204: {
      bodyMapper: Mappers.GenericResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.GenericResource
    },
    201: {
      bodyMapper: Mappers.GenericResource
    },
    202: {
      bodyMapper: Mappers.GenericResource
    },
    204: {
      bodyMapper: Mappers.GenericResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOrUpdateByIdOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GenericResource
    },
    201: {
      bodyMapper: Mappers.GenericResource
    },
    202: {
      bodyMapper: Mappers.GenericResource
    },
    204: {
      bodyMapper: Mappers.GenericResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.resourceId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateByIdOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.GenericResource
    },
    201: {
      bodyMapper: Mappers.GenericResource
    },
    202: {
      bodyMapper: Mappers.GenericResource
    },
    204: {
      bodyMapper: Mappers.GenericResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.resourceId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
