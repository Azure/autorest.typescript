/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ResourceManagementClient } from "../resourceManagementClient";
import {
  TagsCreateOrUpdateValueResponse,
  TagsCreateOrUpdateResponse,
  TagsListResponse,
  TagsListNextResponse
} from "../models";

/**
 * Class representing a Tags.
 */
export class Tags {
  private readonly client: ResourceManagementClient;

  /**
   * Initialize a new instance of the class Tags class.
   * @param client Reference to the service client
   */
  constructor(client: ResourceManagementClient) {
    this.client = client;
  }

  /**
   * Deletes a tag value.
   * @param tagName The name of the tag.
   * @param tagValue The value of the tag to delete.
   * @param options The options parameters.
   */
  deleteValue(
    tagName: string,
    tagValue: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { tagName, tagValue, options: operationOptions },
      deleteValueOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Creates a tag value. The name of the tag must already exist.
   * @param tagName The name of the tag.
   * @param tagValue The value of the tag to create.
   * @param options The options parameters.
   */
  createOrUpdateValue(
    tagName: string,
    tagValue: string,
    options?: coreHttp.OperationOptions
  ): Promise<TagsCreateOrUpdateValueResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { tagName, tagValue, options: operationOptions },
      createOrUpdateValueOperationSpec
    ) as Promise<TagsCreateOrUpdateValueResponse>;
  }

  /**
   * The tag name can have a maximum of 512 characters and is case insensitive. Tag names created by
   * Azure have prefixes of microsoft, azure, or windows. You cannot create tags with one of these
   * prefixes.
   * @param tagName The name of the tag to create.
   * @param options The options parameters.
   */
  createOrUpdate(
    tagName: string,
    options?: coreHttp.OperationOptions
  ): Promise<TagsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { tagName, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<TagsCreateOrUpdateResponse>;
  }

  /**
   * You must remove all values from a resource tag before you can delete it.
   * @param tagName The name of the tag.
   * @param options The options parameters.
   */
  delete(
    tagName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { tagName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets the names and values of all resource tags that are defined in a subscription.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<TagsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<TagsListResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<TagsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<TagsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const deleteValueOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.tagName,
    Parameters.tagValue
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateValueOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.TagValue
    },
    201: {
      bodyMapper: Mappers.TagValue
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.tagName,
    Parameters.tagValue
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/tagNames/{tagName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.TagDetails
    },
    201: {
      bodyMapper: Mappers.TagDetails
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.tagName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/tagNames/{tagName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.tagName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/tagNames",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TagsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TagsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
