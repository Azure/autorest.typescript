/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Providers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import { ResourceManagementClient } from "../resourceManagementClient";
import {
  Provider,
  ProvidersUnregisterResponse,
  ProvidersRegisterResponse,
  ProvidersListResponse,
  ProvidersListAtTenantScopeResponse,
  ProvidersGetResponse,
  ProvidersGetAtTenantScopeResponse,
  ProvidersListNextResponse,
  ProvidersListAtTenantScopeNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Providers operations. */
export class ProvidersImpl implements Providers {
  /**
   * Initialize a new instance of the class Providers class.
   * @param client Reference to the service client
   */
  constructor(client: ResourceManagementClient) {}

  /**
   * Gets all resource providers for a subscription.
   *
   */
  public list(): PagedAsyncIterableIterator<Provider> {
    const iter = this.listPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage();
      }
    };
  }

  private async *listPagingPage(): AsyncIterableIterator<Provider[]> {
    let result = await this._list();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(): AsyncIterableIterator<Provider> {
    for await (const page of this.listPagingPage()) {
      yield* page;
    }
  }

  /**
   * Gets all resource providers for the tenant.
   *
   */
  public listAtTenantScope(): PagedAsyncIterableIterator<Provider> {
    const iter = this.listAtTenantScopePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtTenantScopePagingPage();
      }
    };
  }

  private async *listAtTenantScopePagingPage(): AsyncIterableIterator<
    Provider[]
  > {
    let result = await this._listAtTenantScope();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtTenantScopeNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtTenantScopePagingAll(): AsyncIterableIterator<Provider> {
    for await (const page of this.listAtTenantScopePagingPage()) {
      yield* page;
    }
  }

  /**
   * Unregisters a subscription from a resource provider.
   *
   */
  unregister(): Promise<ProvidersUnregisterResponse> {}

  /**
   * Registers a subscription with a resource provider.
   *
   */
  register(): Promise<ProvidersRegisterResponse> {}

  /**
   * Gets all resource providers for a subscription.
   *
   */
  private _list(): Promise<ProvidersListResponse> {}

  /**
   * Gets all resource providers for the tenant.
   *
   */
  private _listAtTenantScope(): Promise<ProvidersListAtTenantScopeResponse> {}

  /**
   * Gets the specified resource provider.
   *
   */
  get(): Promise<ProvidersGetResponse> {}

  /**
   * Gets the specified resource provider at the tenant level.
   *
   */
  getAtTenantScope(): Promise<ProvidersGetAtTenantScopeResponse> {}

  /**
   * ListNext
   *
   */
  private _listNext(): Promise<ProvidersListNextResponse> {}

  /**
   * ListAtTenantScopeNext
   *
   */
  private _listAtTenantScopeNext(): Promise<
    ProvidersListAtTenantScopeNextResponse
  > {}
}
// Operation Specifications
