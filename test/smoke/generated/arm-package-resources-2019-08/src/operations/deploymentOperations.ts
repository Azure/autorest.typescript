/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ResourceManagementClient } from "../resourceManagementClient";
import {
  DeploymentOperationsGetAtScopeResponse,
  DeploymentOperationsListAtScopeOptionalParams,
  DeploymentOperationsListAtScopeResponse,
  DeploymentOperationsGetAtTenantScopeResponse,
  DeploymentOperationsListAtTenantScopeOptionalParams,
  DeploymentOperationsListAtTenantScopeResponse,
  DeploymentOperationsGetAtManagementGroupScopeResponse,
  DeploymentOperationsListAtManagementGroupScopeOptionalParams,
  DeploymentOperationsListAtManagementGroupScopeResponse,
  DeploymentOperationsGetAtSubscriptionScopeResponse,
  DeploymentOperationsListAtSubscriptionScopeOptionalParams,
  DeploymentOperationsListAtSubscriptionScopeResponse,
  DeploymentOperationsGetResponse,
  DeploymentOperationsListOptionalParams,
  DeploymentOperationsListResponse,
  DeploymentOperationsListAtScopeNextOptionalParams,
  DeploymentOperationsListAtScopeNextResponse,
  DeploymentOperationsListAtTenantScopeNextOptionalParams,
  DeploymentOperationsListAtTenantScopeNextResponse,
  DeploymentOperationsListAtManagementGroupScopeNextOptionalParams,
  DeploymentOperationsListAtManagementGroupScopeNextResponse,
  DeploymentOperationsListAtSubscriptionScopeNextOptionalParams,
  DeploymentOperationsListAtSubscriptionScopeNextResponse,
  DeploymentOperationsListNextOptionalParams,
  DeploymentOperationsListNextResponse
} from "../models";

/**
 * Class representing a DeploymentOperations.
 */
export class DeploymentOperations {
  private readonly client: ResourceManagementClient;

  /**
   * Initialize a new instance of the class DeploymentOperations class.
   * @param client Reference to the service client
   */
  constructor(client: ResourceManagementClient) {
    this.client = client;
  }

  /**
   * Gets a deployments operation.
   * @param scope The scope of a deployment.
   * @param deploymentName The name of the deployment.
   * @param operationId The ID of the operation to get.
   * @param options The options parameters.
   */
  getAtScope(
    scope: string,
    deploymentName: string,
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DeploymentOperationsGetAtScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      scope,
      deploymentName,
      operationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getAtScopeOperationSpec
    ) as Promise<DeploymentOperationsGetAtScopeResponse>;
  }

  /**
   * Gets all deployments operations for a deployment.
   * @param scope The scope of a deployment.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  listAtScope(
    scope: string,
    deploymentName: string,
    options?: DeploymentOperationsListAtScopeOptionalParams
  ): Promise<DeploymentOperationsListAtScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      scope,
      deploymentName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAtScopeOperationSpec
    ) as Promise<DeploymentOperationsListAtScopeResponse>;
  }

  /**
   * Gets a deployments operation.
   * @param deploymentName The name of the deployment.
   * @param operationId The ID of the operation to get.
   * @param options The options parameters.
   */
  getAtTenantScope(
    deploymentName: string,
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DeploymentOperationsGetAtTenantScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      deploymentName,
      operationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getAtTenantScopeOperationSpec
    ) as Promise<DeploymentOperationsGetAtTenantScopeResponse>;
  }

  /**
   * Gets all deployments operations for a deployment.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  listAtTenantScope(
    deploymentName: string,
    options?: DeploymentOperationsListAtTenantScopeOptionalParams
  ): Promise<DeploymentOperationsListAtTenantScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      deploymentName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAtTenantScopeOperationSpec
    ) as Promise<DeploymentOperationsListAtTenantScopeResponse>;
  }

  /**
   * Gets a deployments operation.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param operationId The ID of the operation to get.
   * @param options The options parameters.
   */
  getAtManagementGroupScope(
    groupId: string,
    deploymentName: string,
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DeploymentOperationsGetAtManagementGroupScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      groupId,
      deploymentName,
      operationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getAtManagementGroupScopeOperationSpec
    ) as Promise<DeploymentOperationsGetAtManagementGroupScopeResponse>;
  }

  /**
   * Gets all deployments operations for a deployment.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  listAtManagementGroupScope(
    groupId: string,
    deploymentName: string,
    options?: DeploymentOperationsListAtManagementGroupScopeOptionalParams
  ): Promise<DeploymentOperationsListAtManagementGroupScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      groupId,
      deploymentName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAtManagementGroupScopeOperationSpec
    ) as Promise<DeploymentOperationsListAtManagementGroupScopeResponse>;
  }

  /**
   * Gets a deployments operation.
   * @param deploymentName The name of the deployment.
   * @param operationId The ID of the operation to get.
   * @param options The options parameters.
   */
  getAtSubscriptionScope(
    deploymentName: string,
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DeploymentOperationsGetAtSubscriptionScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      deploymentName,
      operationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getAtSubscriptionScopeOperationSpec
    ) as Promise<DeploymentOperationsGetAtSubscriptionScopeResponse>;
  }

  /**
   * Gets all deployments operations for a deployment.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  listAtSubscriptionScope(
    deploymentName: string,
    options?: DeploymentOperationsListAtSubscriptionScopeOptionalParams
  ): Promise<DeploymentOperationsListAtSubscriptionScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      deploymentName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAtSubscriptionScopeOperationSpec
    ) as Promise<DeploymentOperationsListAtSubscriptionScopeResponse>;
  }

  /**
   * Gets a deployments operation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param operationId The ID of the operation to get.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    deploymentName: string,
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DeploymentOperationsGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      deploymentName,
      operationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<DeploymentOperationsGetResponse>;
  }

  /**
   * Gets all deployments operations for a deployment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    deploymentName: string,
    options?: DeploymentOperationsListOptionalParams
  ): Promise<DeploymentOperationsListResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      deploymentName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOperationSpec
    ) as Promise<DeploymentOperationsListResponse>;
  }

  /**
   * ListAtScopeNext
   * @param scope The scope of a deployment.
   * @param deploymentName The name of the deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtScope method.
   * @param options The options parameters.
   */
  listAtScopeNext(
    scope: string,
    deploymentName: string,
    nextLink: string,
    options?: DeploymentOperationsListAtScopeNextOptionalParams
  ): Promise<DeploymentOperationsListAtScopeNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      scope,
      deploymentName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAtScopeNextOperationSpec
    ) as Promise<DeploymentOperationsListAtScopeNextResponse>;
  }

  /**
   * ListAtTenantScopeNext
   * @param deploymentName The name of the deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtTenantScope method.
   * @param options The options parameters.
   */
  listAtTenantScopeNext(
    deploymentName: string,
    nextLink: string,
    options?: DeploymentOperationsListAtTenantScopeNextOptionalParams
  ): Promise<DeploymentOperationsListAtTenantScopeNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      deploymentName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAtTenantScopeNextOperationSpec
    ) as Promise<DeploymentOperationsListAtTenantScopeNextResponse>;
  }

  /**
   * ListAtManagementGroupScopeNext
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtManagementGroupScope
   *                 method.
   * @param options The options parameters.
   */
  listAtManagementGroupScopeNext(
    groupId: string,
    deploymentName: string,
    nextLink: string,
    options?: DeploymentOperationsListAtManagementGroupScopeNextOptionalParams
  ): Promise<DeploymentOperationsListAtManagementGroupScopeNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      groupId,
      deploymentName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAtManagementGroupScopeNextOperationSpec
    ) as Promise<DeploymentOperationsListAtManagementGroupScopeNextResponse>;
  }

  /**
   * ListAtSubscriptionScopeNext
   * @param deploymentName The name of the deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionScope
   *                 method.
   * @param options The options parameters.
   */
  listAtSubscriptionScopeNext(
    deploymentName: string,
    nextLink: string,
    options?: DeploymentOperationsListAtSubscriptionScopeNextOptionalParams
  ): Promise<DeploymentOperationsListAtSubscriptionScopeNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      deploymentName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAtSubscriptionScopeNextOperationSpec
    ) as Promise<DeploymentOperationsListAtSubscriptionScopeNextResponse>;
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    resourceGroupName: string,
    deploymentName: string,
    nextLink: string,
    options?: DeploymentOperationsListNextOptionalParams
  ): Promise<DeploymentOperationsListNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      deploymentName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listNextOperationSpec
    ) as Promise<DeploymentOperationsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getAtScopeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.deploymentName,
    Parameters.operationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtScopeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.deploymentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAtTenantScopeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.operationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtTenantScopeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.deploymentName],
  headerParameters: [Parameters.accept],
  serializer
};
const getAtManagementGroupScopeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.groupId,
    Parameters.operationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtManagementGroupScopeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAtSubscriptionScopeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.operationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionScopeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtScopeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.scope,
    Parameters.deploymentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtTenantScopeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.deploymentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtManagementGroupScopeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.deploymentName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionScopeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentOperationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
