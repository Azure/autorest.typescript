/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Deployments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ResourceManagementClient } from "../resourceManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  DeploymentExtended,
  DeploymentsCreateOrUpdateAtScopeResponse,
  DeploymentsGetAtScopeResponse,
  DeploymentsValidateAtScopeResponse,
  DeploymentsExportTemplateAtScopeResponse,
  DeploymentsListAtScopeResponse,
  DeploymentsCreateOrUpdateAtTenantScopeResponse,
  DeploymentsGetAtTenantScopeResponse,
  DeploymentsValidateAtTenantScopeResponse,
  DeploymentsExportTemplateAtTenantScopeResponse,
  DeploymentsListAtTenantScopeResponse,
  DeploymentsCreateOrUpdateAtManagementGroupScopeResponse,
  DeploymentsGetAtManagementGroupScopeResponse,
  DeploymentsValidateAtManagementGroupScopeResponse,
  DeploymentsExportTemplateAtManagementGroupScopeResponse,
  DeploymentsListAtManagementGroupScopeResponse,
  DeploymentsCreateOrUpdateAtSubscriptionScopeResponse,
  DeploymentsGetAtSubscriptionScopeResponse,
  DeploymentsValidateAtSubscriptionScopeResponse,
  DeploymentsWhatIfAtSubscriptionScopeResponse,
  DeploymentsExportTemplateAtSubscriptionScopeResponse,
  DeploymentsListAtSubscriptionScopeResponse,
  DeploymentsCreateOrUpdateResponse,
  DeploymentsGetResponse,
  DeploymentsValidateResponse,
  DeploymentsWhatIfResponse,
  DeploymentsExportTemplateResponse,
  DeploymentsListByResourceGroupResponse,
  DeploymentsCalculateTemplateHashResponse,
  DeploymentsListAtScopeNextResponse,
  DeploymentsListAtTenantScopeNextResponse,
  DeploymentsListAtManagementGroupScopeNextResponse,
  DeploymentsListAtSubscriptionScopeNextResponse,
  DeploymentsListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Deployments operations. */
export class DeploymentsImpl implements Deployments {
  private readonly client: ResourceManagementClient;

  /**
   * Initialize a new instance of the class Deployments class.
   * @param client Reference to the service client
   */
  constructor(client: ResourceManagementClient) {
    this.client = client;
  }

  /**
   * Get all the deployments at the given scope.
   *
   */
  public listAtScope(): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtScopePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtScopePagingPage();
      }
    };
  }

  private async *listAtScopePagingPage(): AsyncIterableIterator<
    DeploymentExtended[]
  > {
    let result = await this._listAtScope();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtScopeNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtScopePagingAll(): AsyncIterableIterator<
    DeploymentExtended
  > {
    for await (const page of this.listAtScopePagingPage()) {
      yield* page;
    }
  }

  /**
   * Get all the deployments at the tenant scope.
   *
   */
  public listAtTenantScope(): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtTenantScopePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtTenantScopePagingPage();
      }
    };
  }

  private async *listAtTenantScopePagingPage(): AsyncIterableIterator<
    DeploymentExtended[]
  > {
    let result = await this._listAtTenantScope();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtTenantScopeNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtTenantScopePagingAll(): AsyncIterableIterator<
    DeploymentExtended
  > {
    for await (const page of this.listAtTenantScopePagingPage()) {
      yield* page;
    }
  }

  /**
   * Get all the deployments for a management group.
   *
   */
  public listAtManagementGroupScope(): PagedAsyncIterableIterator<
    DeploymentExtended
  > {
    const iter = this.listAtManagementGroupScopePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtManagementGroupScopePagingPage();
      }
    };
  }

  private async *listAtManagementGroupScopePagingPage(): AsyncIterableIterator<
    DeploymentExtended[]
  > {
    let result = await this._listAtManagementGroupScope();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtManagementGroupScopeNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtManagementGroupScopePagingAll(): AsyncIterableIterator<
    DeploymentExtended
  > {
    for await (const page of this.listAtManagementGroupScopePagingPage()) {
      yield* page;
    }
  }

  /**
   * Get all the deployments for a subscription.
   *
   */
  public listAtSubscriptionScope(): PagedAsyncIterableIterator<
    DeploymentExtended
  > {
    const iter = this.listAtSubscriptionScopePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionScopePagingPage();
      }
    };
  }

  private async *listAtSubscriptionScopePagingPage(): AsyncIterableIterator<
    DeploymentExtended[]
  > {
    let result = await this._listAtSubscriptionScope();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionScopeNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionScopePagingAll(): AsyncIterableIterator<
    DeploymentExtended
  > {
    for await (const page of this.listAtSubscriptionScopePagingPage()) {
      yield* page;
    }
  }

  /**
   * Get all the deployments for a resource group.
   *
   */
  public listByResourceGroup(): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listByResourceGroupPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage();
      }
    };
  }

  private async *listByResourceGroupPagingPage(): AsyncIterableIterator<
    DeploymentExtended[]
  > {
    let result = await this._listByResourceGroup();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(): AsyncIterableIterator<
    DeploymentExtended
  > {
    for await (const page of this.listByResourceGroupPagingPage()) {
      yield* page;
    }
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   *
   */
  async beginDeleteAtScope(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   *
   */
  async beginDeleteAtScopeAndWait(): Promise<void> {
    const poller = await this.beginDeleteAtScope();
    return poller.pollUntilDone();
  }

  /**
   * Checks whether the deployment exists.
   *
   */
  checkExistenceAtScope(): Promise<void> {}

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   *
   */
  async beginCreateOrUpdateAtScope(): Promise<
    PollerLike<
      PollOperationState<DeploymentsCreateOrUpdateAtScopeResponse>,
      DeploymentsCreateOrUpdateAtScopeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsCreateOrUpdateAtScopeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { scope, deploymentName, options },
      createOrUpdateAtScopeOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   *
   */
  async beginCreateOrUpdateAtScopeAndWait(): Promise<
    DeploymentsCreateOrUpdateAtScopeResponse
  > {
    const poller = await this.beginCreateOrUpdateAtScope();
    return poller.pollUntilDone();
  }

  /**
   * Gets a deployment.
   *
   */
  getAtScope(): Promise<DeploymentsGetAtScopeResponse> {}

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
   * stops the currently running template deployment and leaves the resources partially deployed.
   *
   */
  cancelAtScope(): Promise<void> {}

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   *
   */
  validateAtScope(): Promise<DeploymentsValidateAtScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, deploymentName, options },
      validateAtScopeOperationSpec
    );
  }

  /**
   * Exports the template used for specified deployment.
   *
   */
  exportTemplateAtScope(): Promise<DeploymentsExportTemplateAtScopeResponse> {}

  /**
   * Get all the deployments at the given scope.
   *
   */
  private _listAtScope(): Promise<DeploymentsListAtScopeResponse> {}

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   *
   */
  async beginDeleteAtTenantScope(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   *
   */
  async beginDeleteAtTenantScopeAndWait(): Promise<void> {
    const poller = await this.beginDeleteAtTenantScope();
    return poller.pollUntilDone();
  }

  /**
   * Checks whether the deployment exists.
   *
   */
  checkExistenceAtTenantScope(): Promise<void> {}

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   *
   */
  async beginCreateOrUpdateAtTenantScope(): Promise<
    PollerLike<
      PollOperationState<DeploymentsCreateOrUpdateAtTenantScopeResponse>,
      DeploymentsCreateOrUpdateAtTenantScopeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsCreateOrUpdateAtTenantScopeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deploymentName, options },
      createOrUpdateAtTenantScopeOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   *
   */
  async beginCreateOrUpdateAtTenantScopeAndWait(): Promise<
    DeploymentsCreateOrUpdateAtTenantScopeResponse
  > {
    const poller = await this.beginCreateOrUpdateAtTenantScope();
    return poller.pollUntilDone();
  }

  /**
   * Gets a deployment.
   *
   */
  getAtTenantScope(): Promise<DeploymentsGetAtTenantScopeResponse> {}

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
   * stops the currently running template deployment and leaves the resources partially deployed.
   *
   */
  cancelAtTenantScope(): Promise<void> {}

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   *
   */
  validateAtTenantScope(): Promise<DeploymentsValidateAtTenantScopeResponse> {
    return this.client.sendOperationRequest(
      { deploymentName, options },
      validateAtTenantScopeOperationSpec
    );
  }

  /**
   * Exports the template used for specified deployment.
   *
   */
  exportTemplateAtTenantScope(): Promise<
    DeploymentsExportTemplateAtTenantScopeResponse
  > {}

  /**
   * Get all the deployments at the tenant scope.
   *
   */
  private _listAtTenantScope(): Promise<DeploymentsListAtTenantScopeResponse> {}

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   *
   */
  async beginDeleteAtManagementGroupScope(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   *
   */
  async beginDeleteAtManagementGroupScopeAndWait(): Promise<void> {
    const poller = await this.beginDeleteAtManagementGroupScope();
    return poller.pollUntilDone();
  }

  /**
   * Checks whether the deployment exists.
   *
   */
  checkExistenceAtManagementGroupScope(): Promise<void> {}

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   *
   */
  async beginCreateOrUpdateAtManagementGroupScope(): Promise<
    PollerLike<
      PollOperationState<
        DeploymentsCreateOrUpdateAtManagementGroupScopeResponse
      >,
      DeploymentsCreateOrUpdateAtManagementGroupScopeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsCreateOrUpdateAtManagementGroupScopeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { groupId, deploymentName, options },
      createOrUpdateAtManagementGroupScopeOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   *
   */
  async beginCreateOrUpdateAtManagementGroupScopeAndWait(): Promise<
    DeploymentsCreateOrUpdateAtManagementGroupScopeResponse
  > {
    const poller = await this.beginCreateOrUpdateAtManagementGroupScope();
    return poller.pollUntilDone();
  }

  /**
   * Gets a deployment.
   *
   */
  getAtManagementGroupScope(): Promise<
    DeploymentsGetAtManagementGroupScopeResponse
  > {}

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
   * stops the currently running template deployment and leaves the resources partially deployed.
   *
   */
  cancelAtManagementGroupScope(): Promise<void> {}

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   *
   */
  validateAtManagementGroupScope(): Promise<
    DeploymentsValidateAtManagementGroupScopeResponse
  > {
    return this.client.sendOperationRequest(
      { groupId, deploymentName, options },
      validateAtManagementGroupScopeOperationSpec
    );
  }

  /**
   * Exports the template used for specified deployment.
   *
   */
  exportTemplateAtManagementGroupScope(): Promise<
    DeploymentsExportTemplateAtManagementGroupScopeResponse
  > {}

  /**
   * Get all the deployments for a management group.
   *
   */
  private _listAtManagementGroupScope(): Promise<
    DeploymentsListAtManagementGroupScopeResponse
  > {}

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   *
   */
  async beginDeleteAtSubscriptionScope(): Promise<
    PollerLike<PollOperationState<void>, void>
  > {}

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   *
   */
  async beginDeleteAtSubscriptionScopeAndWait(): Promise<void> {
    const poller = await this.beginDeleteAtSubscriptionScope();
    return poller.pollUntilDone();
  }

  /**
   * Checks whether the deployment exists.
   *
   */
  checkExistenceAtSubscriptionScope(): Promise<void> {}

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   *
   */
  async beginCreateOrUpdateAtSubscriptionScope(): Promise<
    PollerLike<
      PollOperationState<DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>,
      DeploymentsCreateOrUpdateAtSubscriptionScopeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsCreateOrUpdateAtSubscriptionScopeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deploymentName, options },
      createOrUpdateAtSubscriptionScopeOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   *
   */
  async beginCreateOrUpdateAtSubscriptionScopeAndWait(): Promise<
    DeploymentsCreateOrUpdateAtSubscriptionScopeResponse
  > {
    const poller = await this.beginCreateOrUpdateAtSubscriptionScope();
    return poller.pollUntilDone();
  }

  /**
   * Gets a deployment.
   *
   */
  getAtSubscriptionScope(): Promise<
    DeploymentsGetAtSubscriptionScopeResponse
  > {}

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
   * stops the currently running template deployment and leaves the resources partially deployed.
   *
   */
  cancelAtSubscriptionScope(): Promise<void> {}

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   *
   */
  validateAtSubscriptionScope(): Promise<
    DeploymentsValidateAtSubscriptionScopeResponse
  > {
    return this.client.sendOperationRequest(
      { deploymentName, options },
      validateAtSubscriptionScopeOperationSpec
    );
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the subscription.
   *
   */
  async beginWhatIfAtSubscriptionScope(): Promise<
    PollerLike<
      PollOperationState<DeploymentsWhatIfAtSubscriptionScopeResponse>,
      DeploymentsWhatIfAtSubscriptionScopeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsWhatIfAtSubscriptionScopeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deploymentName, options },
      whatIfAtSubscriptionScopeOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the subscription.
   *
   */
  async beginWhatIfAtSubscriptionScopeAndWait(): Promise<
    DeploymentsWhatIfAtSubscriptionScopeResponse
  > {
    const poller = await this.beginWhatIfAtSubscriptionScope();
    return poller.pollUntilDone();
  }

  /**
   * Exports the template used for specified deployment.
   *
   */
  exportTemplateAtSubscriptionScope(): Promise<
    DeploymentsExportTemplateAtSubscriptionScopeResponse
  > {}

  /**
   * Get all the deployments for a subscription.
   *
   */
  private _listAtSubscriptionScope(): Promise<
    DeploymentsListAtSubscriptionScopeResponse
  > {}

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. Deleting a template deployment does not affect the
   * state of the resource group. This is an asynchronous operation that returns a status of 202 until
   * the template deployment is successfully deleted. The Location response header contains the URI that
   * is used to obtain the status of the process. While the process is running, a call to the URI in the
   * Location header returns a status of 202. When the process finishes, the URI in the Location header
   * returns a status of 204 on success. If the asynchronous request failed, the URI in the Location
   * header returns an error-level status code.
   *
   */
  async beginDelete(): Promise<PollerLike<PollOperationState<void>, void>> {}

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. Deleting a template deployment does not affect the
   * state of the resource group. This is an asynchronous operation that returns a status of 202 until
   * the template deployment is successfully deleted. The Location response header contains the URI that
   * is used to obtain the status of the process. While the process is running, a call to the URI in the
   * Location header returns a status of 202. When the process finishes, the URI in the Location header
   * returns a status of 204 on success. If the asynchronous request failed, the URI in the Location
   * header returns an error-level status code.
   *
   */
  async beginDeleteAndWait(): Promise<void> {
    const poller = await this.beginDelete();
    return poller.pollUntilDone();
  }

  /**
   * Checks whether the deployment exists.
   *
   */
  checkExistence(): Promise<void> {}

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   *
   */
  async beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<DeploymentsCreateOrUpdateResponse>,
      DeploymentsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, deploymentName, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   *
   */
  async beginCreateOrUpdateAndWait(): Promise<
    DeploymentsCreateOrUpdateResponse
  > {
    const poller = await this.beginCreateOrUpdate();
    return poller.pollUntilDone();
  }

  /**
   * Gets a deployment.
   *
   */
  get(): Promise<DeploymentsGetResponse> {}

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
   * stops the currently running template deployment and leaves the resource group partially deployed.
   *
   */
  cancel(): Promise<void> {}

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   *
   */
  validate(): Promise<DeploymentsValidateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, deploymentName, options },
      validateOperationSpec
    );
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the resource group.
   *
   */
  async beginWhatIf(): Promise<
    PollerLike<
      PollOperationState<DeploymentsWhatIfResponse>,
      DeploymentsWhatIfResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsWhatIfResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, deploymentName, options },
      whatIfOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the resource group.
   *
   */
  async beginWhatIfAndWait(): Promise<DeploymentsWhatIfResponse> {
    const poller = await this.beginWhatIf();
    return poller.pollUntilDone();
  }

  /**
   * Exports the template used for specified deployment.
   *
   */
  exportTemplate(): Promise<DeploymentsExportTemplateResponse> {}

  /**
   * Get all the deployments for a resource group.
   *
   */
  private _listByResourceGroup(): Promise<
    DeploymentsListByResourceGroupResponse
  > {}

  /**
   * Calculate the hash of the given template.
   *
   */
  calculateTemplateHash(): Promise<DeploymentsCalculateTemplateHashResponse> {
    return this.client.sendOperationRequest(
      { options },
      calculateTemplateHashOperationSpec
    );
  }

  /**
   * ListAtScopeNext
   *
   */
  private _listAtScopeNext(): Promise<DeploymentsListAtScopeNextResponse> {}

  /**
   * ListAtTenantScopeNext
   *
   */
  private _listAtTenantScopeNext(): Promise<
    DeploymentsListAtTenantScopeNextResponse
  > {}

  /**
   * ListAtManagementGroupScopeNext
   *
   */
  private _listAtManagementGroupScopeNext(): Promise<
    DeploymentsListAtManagementGroupScopeNextResponse
  > {}

  /**
   * ListAtSubscriptionScopeNext
   *
   */
  private _listAtSubscriptionScopeNext(): Promise<
    DeploymentsListAtSubscriptionScopeNextResponse
  > {}

  /**
   * ListByResourceGroupNext
   *
   */
  private _listByResourceGroupNext(): Promise<
    DeploymentsListByResourceGroupNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateAtScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    202: {
      bodyMapper: Mappers.DeploymentExtended
    },
    204: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.deploymentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateAtScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.deploymentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOrUpdateAtTenantScopeOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    202: {
      bodyMapper: Mappers.DeploymentExtended
    },
    204: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.deploymentName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateAtTenantScopeOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.deploymentName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOrUpdateAtManagementGroupScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    202: {
      bodyMapper: Mappers.DeploymentExtended
    },
    204: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateAtManagementGroupScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOrUpdateAtSubscriptionScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    202: {
      bodyMapper: Mappers.DeploymentExtended
    },
    204: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateAtSubscriptionScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const whatIfAtSubscriptionScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    201: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    202: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    204: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    202: {
      bodyMapper: Mappers.DeploymentExtended
    },
    204: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const whatIfOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    201: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    202: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    204: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const calculateTemplateHashOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Resources/calculateTemplateHash",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TemplateHashResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.template,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
