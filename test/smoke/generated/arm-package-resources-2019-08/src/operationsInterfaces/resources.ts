/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  GenericResourceExpanded,
  ResourcesCreateOrUpdateResponse,
  ResourcesUpdateResponse,
  ResourcesGetResponse,
  ResourcesCreateOrUpdateByIdResponse,
  ResourcesUpdateByIdResponse,
  ResourcesGetByIdResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Resources. */
export interface Resources {
  /**
   * Get all the resources for a resource group.
   *
   */
  listByResourceGroup(): PagedAsyncIterableIterator<GenericResourceExpanded>;
  /**
   * Get all the resources in a subscription.
   *
   */
  list(): PagedAsyncIterableIterator<GenericResourceExpanded>;
  /**
   * The resources to move must be in the same source resource group. The target resource group may be in
   * a different subscription. When moving resources, both the source group and the target group are
   * locked for the duration of the operation. Write and delete operations are blocked on the groups
   * until the move completes.
   *
   */
  beginMoveResources(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * The resources to move must be in the same source resource group. The target resource group may be in
   * a different subscription. When moving resources, both the source group and the target group are
   * locked for the duration of the operation. Write and delete operations are blocked on the groups
   * until the move completes.
   *
   */
  beginMoveResourcesAndWait(): Promise<void>;
  /**
   * This operation checks whether the specified resources can be moved to the target. The resources to
   * move must be in the same source resource group. The target resource group may be in a different
   * subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation
   * fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the
   * Location header value to check the result of the long-running operation.
   *
   */
  beginValidateMoveResources(): Promise<
    PollerLike<PollOperationState<void>, void>
  >;
  /**
   * This operation checks whether the specified resources can be moved to the target. The resources to
   * move must be in the same source resource group. The target resource group may be in a different
   * subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation
   * fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the
   * Location header value to check the result of the long-running operation.
   *
   */
  beginValidateMoveResourcesAndWait(): Promise<void>;
  /**
   * Checks whether a resource exists.
   *
   */
  checkExistence(): Promise<void>;
  /**
   * Deletes a resource.
   *
   */
  beginDelete(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a resource.
   *
   */
  beginDeleteAndWait(): Promise<void>;
  /**
   * Creates a resource.
   *
   */
  beginCreateOrUpdate(): Promise<
    PollerLike<
      PollOperationState<ResourcesCreateOrUpdateResponse>,
      ResourcesCreateOrUpdateResponse
    >
  >;
  /**
   * Creates a resource.
   *
   */
  beginCreateOrUpdateAndWait(): Promise<ResourcesCreateOrUpdateResponse>;
  /**
   * Updates a resource.
   *
   */
  beginUpdate(): Promise<
    PollerLike<
      PollOperationState<ResourcesUpdateResponse>,
      ResourcesUpdateResponse
    >
  >;
  /**
   * Updates a resource.
   *
   */
  beginUpdateAndWait(): Promise<ResourcesUpdateResponse>;
  /**
   * Gets a resource.
   *
   */
  get(): Promise<ResourcesGetResponse>;
  /**
   * Checks by ID whether a resource exists.
   *
   */
  checkExistenceById(): Promise<void>;
  /**
   * Deletes a resource by ID.
   *
   */
  beginDeleteById(): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a resource by ID.
   *
   */
  beginDeleteByIdAndWait(): Promise<void>;
  /**
   * Create a resource by ID.
   *
   */
  beginCreateOrUpdateById(): Promise<
    PollerLike<
      PollOperationState<ResourcesCreateOrUpdateByIdResponse>,
      ResourcesCreateOrUpdateByIdResponse
    >
  >;
  /**
   * Create a resource by ID.
   *
   */
  beginCreateOrUpdateByIdAndWait(): Promise<
    ResourcesCreateOrUpdateByIdResponse
  >;
  /**
   * Updates a resource by ID.
   *
   */
  beginUpdateById(): Promise<
    PollerLike<
      PollOperationState<ResourcesUpdateByIdResponse>,
      ResourcesUpdateByIdResponse
    >
  >;
  /**
   * Updates a resource by ID.
   *
   */
  beginUpdateByIdAndWait(): Promise<ResourcesUpdateByIdResponse>;
  /**
   * Gets a resource by ID.
   *
   */
  getById(): Promise<ResourcesGetByIdResponse>;
}
