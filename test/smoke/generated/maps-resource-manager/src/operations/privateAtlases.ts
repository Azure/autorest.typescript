/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMapsResourceProvider } from "../azureMapsResourceProvider";
import {
  PrivateAtlasCreateParameters,
  PrivateAtlasesCreateOrUpdateResponse,
  PrivateAtlasUpdateParameters,
  PrivateAtlasesUpdateResponse,
  PrivateAtlasesGetResponse,
  PrivateAtlasesListByAccountResponse
} from "../models";

/**
 * Class representing a PrivateAtlases.
 */
export class PrivateAtlases {
  private readonly client: AzureMapsResourceProvider;

  /**
   * Initialize a new instance of the class PrivateAtlases class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMapsResourceProvider) {
    this.client = client;
  }

  /**
   * Create or update a Private Atlas resource. Private Atlas resource will enable the usage of Azure
   * resources to build a custom set of mapping data. It requires an account to exist before it can be
   * created.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param privateAtlasCreateParameters The new or updated parameters for the Private Atlas resource.
   * @param privateAtlasName The name of the Private Atlas instance.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    privateAtlasCreateParameters: PrivateAtlasCreateParameters,
    privateAtlasName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PrivateAtlasesCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        privateAtlasCreateParameters,
        privateAtlasName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<PrivateAtlasesCreateOrUpdateResponse>;
  }

  /**
   * Updates the Private Atlas resource. Only a subset of the parameters may be updated after creation,
   * such as Tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param privateAtlasName The name of the Private Atlas instance.
   * @param privateAtlasUpdateParameters The updated parameters for the Private Atlas.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    privateAtlasName: string,
    privateAtlasUpdateParameters: PrivateAtlasUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<PrivateAtlasesUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        privateAtlasName,
        privateAtlasUpdateParameters,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<PrivateAtlasesUpdateResponse>;
  }

  /**
   * Delete a Private Atlas resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param privateAtlasName The name of the Private Atlas instance.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    privateAtlasName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        privateAtlasName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a Private Atlas resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param privateAtlasName The name of the Private Atlas instance.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    privateAtlasName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PrivateAtlasesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        privateAtlasName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<PrivateAtlasesGetResponse>;
  }

  /**
   * Get all Private Atlas instances for an Azure Map Account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Maps Account.
   * @param options The options parameters.
   */
  listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PrivateAtlasesListByAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options: operationOptions },
      listByAccountOperationSpec
    ) as Promise<PrivateAtlasesListByAccountResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAtlas
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.privateAtlasCreateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.privateAtlasName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAtlas
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.privateAtlasUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.privateAtlasName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.privateAtlasName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAtlas
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.privateAtlasName
  ],
  serializer
};
const listByAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAtlasList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  serializer
};
