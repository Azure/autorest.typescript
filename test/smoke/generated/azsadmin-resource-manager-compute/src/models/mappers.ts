/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationList: coreHttp.CompositeMapper = {
  serializedName: "OperationList",
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "Display"
        }
      }
    }
  }
};

export const Display: coreHttp.CompositeMapper = {
  serializedName: "Display",
  type: {
    name: "Composite",
    className: "Display",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PlatformImage: coreHttp.CompositeMapper = {
  serializedName: "PlatformImage",
  type: {
    name: "Composite",
    className: "PlatformImage",
    modelProperties: {
      ...Resource.type.modelProperties,
      osDisk: {
        serializedName: "osDisk",
        type: {
          name: "Composite",
          className: "OsDisk"
        }
      },
      dataDisks: {
        serializedName: "properties.dataDisks",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DataDisk" } }
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Composite",
          className: "ImageDetails"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: ["Creating", "Failed", "Succeeded", "Canceled"]
        }
      }
    }
  }
};

export const OsDisk: coreHttp.CompositeMapper = {
  serializedName: "OsDisk",
  type: {
    name: "Composite",
    className: "OsDisk",
    modelProperties: {
      osType: {
        serializedName: "osType",
        type: {
          name: "Enum",
          allowedValues: ["Unknown", "Windows", "Linux"]
        }
      },
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataDisk: coreHttp.CompositeMapper = {
  serializedName: "DataDisk",
  type: {
    name: "Composite",
    className: "DataDisk",
    modelProperties: {
      lun: {
        serializedName: "lun",
        type: {
          name: "Number"
        }
      },
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageDetails: coreHttp.CompositeMapper = {
  serializedName: "ImageDetails",
  type: {
    name: "Composite",
    className: "ImageDetails",
    modelProperties: {
      billingPartNumber: {
        serializedName: "billingPartNumber",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PlatformImageParameters: coreHttp.CompositeMapper = {
  serializedName: "PlatformImageParameters",
  type: {
    name: "Composite",
    className: "PlatformImageParameters",
    modelProperties: {
      osDisk: {
        serializedName: "osDisk",
        type: {
          name: "Composite",
          className: "OsDisk"
        }
      },
      dataDisks: {
        serializedName: "properties.dataDisks",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DataDisk" } }
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Composite",
          className: "ImageDetails"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: ["Creating", "Failed", "Succeeded", "Canceled"]
        }
      }
    }
  }
};

export const Quota: coreHttp.CompositeMapper = {
  serializedName: "Quota",
  type: {
    name: "Composite",
    className: "Quota",
    modelProperties: {
      ...Resource.type.modelProperties,
      availabilitySetCount: {
        constraints: {},
        serializedName: "properties.availabilitySetCount",
        type: {
          name: "Number"
        }
      },
      coresLimit: {
        constraints: {},
        serializedName: "properties.coresLimit",
        type: {
          name: "Number"
        }
      },
      virtualMachineCount: {
        constraints: {},
        serializedName: "properties.virtualMachineCount",
        type: {
          name: "Number"
        }
      },
      vmScaleSetCount: {
        constraints: {},
        serializedName: "properties.vmScaleSetCount",
        type: {
          name: "Number"
        }
      },
      maxAllocationStandardManagedDisksAndSnapshots: {
        constraints: {},
        serializedName:
          "properties.maxAllocationStandardManagedDisksAndSnapshots",
        type: {
          name: "Number"
        }
      },
      maxAllocationPremiumManagedDisksAndSnapshots: {
        constraints: {},
        serializedName:
          "properties.maxAllocationPremiumManagedDisksAndSnapshots",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const QuotaList: coreHttp.CompositeMapper = {
  serializedName: "QuotaList",
  type: {
    name: "Composite",
    className: "QuotaList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Quota" } }
        }
      }
    }
  }
};

export const VMExtension: coreHttp.CompositeMapper = {
  serializedName: "VMExtension",
  type: {
    name: "Composite",
    className: "VMExtension",
    modelProperties: {
      ...Resource.type.modelProperties,
      vmOsType: {
        serializedName: "properties.vmOsType",
        type: {
          name: "Enum",
          allowedValues: ["Unknown", "Windows", "Linux"]
        }
      },
      computeRole: {
        serializedName: "properties.computeRole",
        type: {
          name: "String"
        }
      },
      vmScaleSetEnabled: {
        serializedName: "properties.vmScaleSetEnabled",
        type: {
          name: "Boolean"
        }
      },
      supportMultipleExtensions: {
        serializedName: "properties.supportMultipleExtensions",
        type: {
          name: "Boolean"
        }
      },
      isSystemExtension: {
        serializedName: "properties.isSystemExtension",
        type: {
          name: "Boolean"
        }
      },
      sourceBlob: {
        serializedName: "sourceBlob",
        type: {
          name: "Composite",
          className: "AzureBlob"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: ["Creating", "Failed", "Succeeded", "Canceled"]
        }
      }
    }
  }
};

export const AzureBlob: coreHttp.CompositeMapper = {
  serializedName: "AzureBlob",
  type: {
    name: "Composite",
    className: "AzureBlob",
    modelProperties: {
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMExtensionParameters: coreHttp.CompositeMapper = {
  serializedName: "VMExtensionParameters",
  type: {
    name: "Composite",
    className: "VMExtensionParameters",
    modelProperties: {
      vmOsType: {
        serializedName: "properties.vmOsType",
        type: {
          name: "Enum",
          allowedValues: ["Unknown", "Windows", "Linux"]
        }
      },
      computeRole: {
        serializedName: "properties.computeRole",
        type: {
          name: "String"
        }
      },
      vmScaleSetEnabled: {
        serializedName: "properties.vmScaleSetEnabled",
        type: {
          name: "Boolean"
        }
      },
      supportMultipleExtensions: {
        serializedName: "properties.supportMultipleExtensions",
        type: {
          name: "Boolean"
        }
      },
      isSystemExtension: {
        serializedName: "properties.isSystemExtension",
        type: {
          name: "Boolean"
        }
      },
      sourceBlob: {
        serializedName: "sourceBlob",
        type: {
          name: "Composite",
          className: "AzureBlob"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: ["Creating", "Failed", "Succeeded", "Canceled"]
        }
      }
    }
  }
};

export const DiskList: coreHttp.CompositeMapper = {
  serializedName: "DiskList",
  type: {
    name: "Composite",
    className: "DiskList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Disk" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Disk: coreHttp.CompositeMapper = {
  serializedName: "Disk",
  type: {
    name: "Composite",
    className: "Disk",
    modelProperties: {
      ...Resource.type.modelProperties,
      diskId: {
        serializedName: "properties.diskId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      sharePath: {
        serializedName: "properties.sharePath",
        type: {
          name: "String"
        }
      },
      actualSizeGB: {
        serializedName: "properties.actualSizeGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      provisionSizeGB: {
        serializedName: "properties.provisionSizeGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      managedBy: {
        serializedName: "properties.managedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userResourceId: {
        serializedName: "properties.userResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "properties.diskType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskSku: {
        serializedName: "properties.diskSku",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskMigrationJobList: coreHttp.CompositeMapper = {
  serializedName: "DiskMigrationJobList",
  type: {
    name: "Composite",
    className: "DiskMigrationJobList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DiskMigrationJob" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskMigrationJob: coreHttp.CompositeMapper = {
  serializedName: "DiskMigrationJob",
  type: {
    name: "Composite",
    className: "DiskMigrationJob",
    modelProperties: {
      ...Resource.type.modelProperties,
      migrationId: {
        serializedName: "properties.migrationId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subtasks: {
        serializedName: "properties.subtasks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MigrationSubTask" }
          }
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      targetShare: {
        serializedName: "properties.targetShare",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationSubTask: coreHttp.CompositeMapper = {
  serializedName: "MigrationSubTask",
  type: {
    name: "Composite",
    className: "MigrationSubTask",
    modelProperties: {
      migrationSubTaskId: {
        serializedName: "migrationSubTaskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      migrationSubtaskStatus: {
        serializedName: "properties.migrationSubtaskStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "properties.reason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      targetShare: {
        serializedName: "properties.targetShare",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceShare: {
        serializedName: "properties.sourceShare",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetDiskStateForMigration: {
        serializedName: "properties.targetDiskStateForMigration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskId: {
        serializedName: "properties.diskId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
