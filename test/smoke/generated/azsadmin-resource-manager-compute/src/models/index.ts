/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * List of Operations
 */
export interface OperationList {
  /**
   * Array of operations
   */
  value?: Operation[];
  /**
   * URI to the next page of operations.
   */
  nextLink?: string;
}

/**
 * Describes the supported REST operation.
 */
export interface Operation {
  /**
   * The name of the operation being performed on this particular object. This name should match the name that appears in RBAC or the event service.
   */
  name?: string;
  /**
   * Gets or sets a value indicating whether the operation is a data action or not.
   */
  isDataAction?: boolean;
  /**
   * Contains the localized display information for this particular operation or action.
   */
  display?: Display;
}

/**
 * Contains the localized display information for this particular operation or action.
 */
export interface Display {
  /**
   * The localized, friendly version of the resource provider name. The provider name is expected to include the name of the publisher or company responsible. The provider name format should use title case and begin with "Microsoft" for first-party services. For example, the provider name may be"Microsoft Monitoring Insights" or "Microsoft Compute."
   */
  provider?: string;
  /**
   * The localized, friendly version of the resource type related to this action or operation; the resource type should match the public documentation for the resource provider.
   */
  resource?: string;
  /**
   * The localized, friendly name for the operation. Use the name as it will displayed to the user.
   */
  operation?: string;
  /**
   * The localized, friendly description for the operation. The description will be displayed to the user. It should be thorough and concise for used in both tooltips and detailed views.
   */
  description?: string;
}

/**
 * Base resource object.
 */
export interface Resource {
  /**
   * ID of the resource.
   */
  readonly id?: string;
  /**
   * Name of the resource.
   */
  readonly name?: string;
  /**
   * Type of Resource.
   */
  readonly type?: string;
  /**
   * Location of the resource.
   */
  location?: string;
}

/**
 * Platform image represents a virtual machine.
 */
export type PlatformImage = Resource & {
  /**
   * Operating system used for this platform image.
   */
  osDisk?: OsDisk;
  /**
   * Data disks used by the platform image.
   */
  dataDisks?: DataDisk[];
  /**
   * Information about the image.
   */
  details?: ImageDetails;
  /**
   * Provisioning status of the platform image.
   */
  provisioningState?: ProvisioningState;
};

/**
 * Operating system disk.
 */
export interface OsDisk {
  /**
   * Operating system type.
   */
  osType?: OsType;
  /**
   * Location of the disk.
   */
  uri?: string;
}

/**
 * Information about datadisk.
 */
export interface DataDisk {
  /**
   * Logical unit number.
   */
  lun?: number;
  /**
   * Location of the disk template.
   */
  uri?: string;
}

/**
 * Information about the disk image.
 */
export interface ImageDetails {
  /**
   * The part number is used to bill for software costs.
   */
  billingPartNumber?: string;
}

/**
 * Parameters used to create a new platform image.
 */
export interface PlatformImageParameters {
  /**
   * Operating system used for this platform image.
   */
  osDisk?: OsDisk;
  /**
   * Data disks used by the platform image.
   */
  dataDisks?: DataDisk[];
  /**
   * Information about the image.
   */
  details?: ImageDetails;
  /**
   * Provisioning status of the platform image.
   */
  provisioningState?: ProvisioningState;
}

/**
 * Holds Compute quota information used to control resource allocation.
 */
export type Quota = Resource & {
  /**
   * Maximum number of availability sets allowed.
   */
  availabilitySetCount?: number;
  /**
   * Maximum number of cores allowed.
   */
  coresLimit?: number;
  /**
   * Maximum number of virtual machines allowed.
   */
  virtualMachineCount?: number;
  /**
   * Maximum number of scale sets allowed.
   */
  vmScaleSetCount?: number;
  /**
   * Maximum number of managed disks and snapshots of type standard allowed.
   */
  maxAllocationStandardManagedDisksAndSnapshots?: number;
  /**
   * Maximum number of managed disks and snapshots of type premium allowed.
   */
  maxAllocationPremiumManagedDisksAndSnapshots?: number;
};

/**
 * List of Compute quotas
 */
export interface QuotaList {
  /**
   * URI to the next page.
   */
  nextLink?: string;
  /**
   * List of Compute quotas
   */
  value?: Quota[];
}

/**
 * Virtual Machine Extension Image.
 */
export type VMExtension = Resource & {
  /**
   * Target virtual machine operating system type necessary for deploying the extension handler.
   */
  vmOsType?: OsType;
  /**
   * Compute role
   */
  computeRole?: string;
  /**
   * Value indicating whether the extension is enabled for virtual machine scale set support.
   */
  vmScaleSetEnabled?: boolean;
  /**
   * True if supports multiple extensions.
   */
  supportMultipleExtensions?: boolean;
  /**
   * Indicates if the extension is for the system.
   */
  isSystemExtension?: boolean;
  /**
   * URI to Azure or AzureStack blob.
   */
  sourceBlob?: AzureBlob;
  /**
   * Provisioning state of extension.
   */
  provisioningState?: ProvisioningState;
};

/**
 * Azure or AzureStack blob information.
 */
export interface AzureBlob {
  /**
   * URI to Azure or AzureStack blob.
   */
  uri?: string;
}

/**
 * Parameters used to create a new Virtual Machine Extension Image.
 */
export interface VMExtensionParameters {
  /**
   * Target virtual machine operating system type necessary for deploying the extension handler.
   */
  vmOsType?: OsType;
  /**
   * Compute role
   */
  computeRole?: string;
  /**
   * Value indicating whether the extension is enabled for virtual machine scale set support.
   */
  vmScaleSetEnabled?: boolean;
  /**
   * True if supports multiple extensions.
   */
  supportMultipleExtensions?: boolean;
  /**
   * Indicates if the extension is for the system.
   */
  isSystemExtension?: boolean;
  /**
   * URI to Azure or AzureStack blob.
   */
  sourceBlob?: AzureBlob;
  /**
   * Provisioning state of extension.
   */
  provisioningState?: ProvisioningState;
}

/**
 * List of disks.
 */
export interface DiskList {
  /**
   * List of disks.
   */
  value?: Disk[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Managed Disk.
 */
export type Disk = Resource & {
  /**
   * The disk id.
   */
  diskId?: string;
  /**
   * The disk status.
   */
  status?: DiskState;
  /**
   * The disk share path.
   */
  sharePath?: string;
  /**
   * The actual size of disk in GB.
   */
  readonly actualSizeGB?: number;
  /**
   * The provision size of disk in GB.
   */
  readonly provisionSizeGB?: number;
  /**
   * Compute resource Uri which owns this disk.
   */
  readonly managedBy?: string;
  /**
   * The disk resource Uri from user view.
   */
  readonly userResourceId?: string;
  /**
   * The type of the disk resource.
   */
  readonly diskType?: DiskResourceType;
  /**
   * the disk sku.
   */
  readonly diskSku?: AccountType;
};

/**
 * List of disk migration jobs.
 */
export interface DiskMigrationJobList {
  /**
   * List of disk migration jobs.
   */
  value?: DiskMigrationJob[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Disk migration job.
 */
export type DiskMigrationJob = Resource & {
  /**
   * The disk migration id.
   */
  migrationId?: string;
  /**
   * The current status of disk migration job.
   */
  readonly status?: MigrationJobStatus;
  /**
   * The list of child migration tasks.
   */
  readonly subtasks?: MigrationSubTask[];
  /**
   * The job creation time.
   */
  readonly creationTime?: Date;
  /**
   * The job start time.
   */
  readonly startTime?: Date;
  /**
   * The job end time.
   */
  readonly endTime?: Date;
  /**
   * The target share of migration job.
   */
  readonly targetShare?: string;
};

/**
 * Disk migration child task.
 */
export interface MigrationSubTask {
  /**
   * The id of migration child task.
   */
  readonly migrationSubTaskId?: string;
  /**
   * The disk migration child task status.
   */
  readonly migrationSubtaskStatus?: MigrationSubTaskStatus;
  /**
   * The reason of task failure.
   */
  readonly reason?: string;
  /**
   * The task start time.
   */
  readonly startTime?: Date;
  /**
   * The task end time.
   */
  readonly endTime?: Date;
  /**
   * The target share of migration task.
   */
  readonly targetShare?: string;
  /**
   * The source share of migration task.
   */
  readonly sourceShare?: string;
  /**
   * The disk status.
   */
  readonly targetDiskStateForMigration?: DiskState;
  /**
   * The id of disk.
   */
  readonly diskId?: string;
}

/**
 * Defines values for DiskState.
 */
export type DiskState =
  | "Undefined"
  | "Unattached"
  | "Attached"
  | "Reserved"
  | "ActiveSAS"
  | "Unknown"
  | "All"
  | "Recommended"
  | "OfflineMigration"
  | "OnlineMigration";
/**
 * Defines values for DiskResourceType.
 */
export type DiskResourceType =
  | "Undefined"
  | "Disk"
  | "Snapshot"
  | "RestorePoint"
  | "ManagedBlob";
/**
 * Defines values for AccountType.
 */
export type AccountType =
  | "Standard_LRS"
  | "Standard_ZRS"
  | "Standard_GRS"
  | "Standard_RAGRS"
  | "Premium_LRS"
  | "StandardSSD_LRS"
  | "UltraSSD_LRS";
/**
 * Defines values for MigrationJobStatus.
 */
export type MigrationJobStatus =
  | "Undefined"
  | "Running"
  | "Succeeded"
  | "Failed"
  | "Canceled"
  | "Pending";
/**
 * Defines values for MigrationSubTaskStatus.
 */
export type MigrationSubTaskStatus =
  | "Undefined"
  | "Running"
  | "Succeeded"
  | "Failed"
  | "Canceled"
  | "Pending"
  | "Skipped";
/**
 * Defines values for OsType.
 */
export type OsType = "Unknown" | "Windows" | "Linux";
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState =
  | "Creating"
  | "Failed"
  | "Succeeded"
  | "Canceled";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PlatformImagesListResponse = PlatformImage[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PlatformImage[];
  };
};

/**
 * Contains response data for the get operation.
 */
export type PlatformImagesGetResponse = PlatformImage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PlatformImage;
  };
};

/**
 * Contains response data for the create operation.
 */
export type PlatformImagesCreateResponse = PlatformImage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PlatformImage;
  };
};

/**
 * Contains response data for the get operation.
 */
export type QuotasGetResponse = Quota & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Quota;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type QuotasCreateOrUpdateResponse = Quota & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Quota;
  };
};

/**
 * Contains response data for the list operation.
 */
export type QuotasListResponse = QuotaList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QuotaList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VMExtensionsGetResponse = VMExtension & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VMExtension;
  };
};

/**
 * Contains response data for the create operation.
 */
export type VMExtensionsCreateResponse = VMExtension & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VMExtension;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VMExtensionsListResponse = VMExtension[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VMExtension[];
  };
};

/**
 * Optional parameters.
 */
export interface DisksListOptionalParams extends coreHttp.OperationOptions {
  /**
   * User Subscription Id which the resource belongs to.
   */
  userSubscriptionId?: string;
  /**
   * The parameters of disk state.
   */
  status?: string;
  /**
   * The share which the resource belongs to.
   */
  sharePath?: string;
  /**
   * The scale unit which the resource belongs to.
   */
  scaleUnit?: string;
  /**
   * The volume label of the volume which the resource belongs to.
   */
  volumeLabel?: string;
  /**
   * The maximum number of disks to return.
   */
  count?: number;
  /**
   * The start index of disks in query.
   */
  start?: number;
}

/**
 * Contains response data for the list operation.
 */
export type DisksListResponse = DiskList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DisksGetResponse = Disk & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Disk;
  };
};

/**
 * Optional parameters.
 */
export interface DiskMigrationJobsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The parameters of disk migration job status.
   */
  status?: string;
}

/**
 * Contains response data for the list operation.
 */
export type DiskMigrationJobsListResponse = DiskMigrationJobList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskMigrationJobList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DiskMigrationJobsGetResponse = DiskMigrationJob & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskMigrationJob;
  };
};

/**
 * Optional parameters.
 */
export interface DiskMigrationJobsCreateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The target share name.
   */
  targetShare?: string;
  /**
   * The target scale unit name.
   */
  targetScaleUnit?: string;
  /**
   * The target volume label.
   */
  targetVolumeLabel?: string;
}

/**
 * Contains response data for the create operation.
 */
export type DiskMigrationJobsCreateResponse = DiskMigrationJob & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskMigrationJob;
  };
};

/**
 * Contains response data for the cancel operation.
 */
export type DiskMigrationJobsCancelResponse = DiskMigrationJob & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiskMigrationJob;
  };
};

/**
 * Optional parameters.
 */
export interface ComputeAdminClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
