/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeAdminClient } from "../computeAdminClient";
import {
  DiskMigrationJobsListOptionalParams,
  DiskMigrationJobsListResponse,
  DiskMigrationJobsGetResponse,
  Disk,
  DiskMigrationJobsCreateOptionalParams,
  DiskMigrationJobsCreateResponse,
  DiskMigrationJobsCancelResponse
} from "../models";

/**
 * Class representing a DiskMigrationJobs.
 */
export class DiskMigrationJobs {
  private readonly client: ComputeAdminClient;

  /**
   * Initialize a new instance of the class DiskMigrationJobs class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeAdminClient) {
    this.client = client;
  }

  /**
   * Returns a list of disk migration jobs.
   * @param location Location of the resource.
   * @param options The options parameters.
   */
  list(
    location: string,
    options?: DiskMigrationJobsListOptionalParams
  ): Promise<DiskMigrationJobsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, options: operationOptions },
      listOperationSpec
    ) as Promise<DiskMigrationJobsListResponse>;
  }

  /**
   * Returns the requested disk migration job.
   * @param location Location of the resource.
   * @param migrationId The migration job guid name.
   * @param options The options parameters.
   */
  get(
    location: string,
    migrationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiskMigrationJobsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, migrationId, options: operationOptions },
      getOperationSpec
    ) as Promise<DiskMigrationJobsGetResponse>;
  }

  /**
   * Create a disk migration job.
   * @param location Location of the resource.
   * @param migrationId The migration job guid name.
   * @param disks The parameters of disk list.
   * @param options The options parameters.
   */
  create(
    location: string,
    migrationId: string,
    disks: Disk[],
    options?: DiskMigrationJobsCreateOptionalParams
  ): Promise<DiskMigrationJobsCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, migrationId, disks, options: operationOptions },
      createOperationSpec
    ) as Promise<DiskMigrationJobsCreateResponse>;
  }

  /**
   * Cancel a disk migration job.
   * @param location Location of the resource.
   * @param migrationId The migration job guid name.
   * @param options The options parameters.
   */
  cancel(
    location: string,
    migrationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiskMigrationJobsCancelResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, migrationId, options: operationOptions },
      cancelOperationSpec
    ) as Promise<DiskMigrationJobsCancelResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/diskmigrationjobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiskMigrationJobList
    }
  },
  queryParameters: [Parameters.apiVersion2, Parameters.status1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/diskmigrationjobs/{migrationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiskMigrationJob
    }
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.migrationId
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/diskmigrationjobs/{migrationId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DiskMigrationJob
    }
  },
  requestBody: Parameters.disks,
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.targetShare,
    Parameters.targetScaleUnit,
    Parameters.targetVolumeLabel
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.migrationId
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const cancelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/diskmigrationjobs/{migrationId}/Cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DiskMigrationJob
    }
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.migrationId
  ],
  serializer
};
