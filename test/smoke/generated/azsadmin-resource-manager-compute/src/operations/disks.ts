/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeAdminClient } from "../computeAdminClient";
import {
  DisksListOptionalParams,
  DisksListResponse,
  DisksGetResponse
} from "../models";

/**
 * Class representing a Disks.
 */
export class Disks {
  private readonly client: ComputeAdminClient;

  /**
   * Initialize a new instance of the class Disks class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeAdminClient) {
    this.client = client;
  }

  /**
   * Returns a list of disks.
   * @param location Location of the resource.
   * @param options The options parameters.
   */
  list(
    location: string,
    options?: DisksListOptionalParams
  ): Promise<DisksListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, options: operationOptions },
      listOperationSpec
    ) as Promise<DisksListResponse>;
  }

  /**
   * Returns the disk.
   * @param location Location of the resource.
   * @param diskId The disk guid as identity.
   * @param options The options parameters.
   */
  get(
    location: string,
    diskId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DisksGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, diskId, options: operationOptions },
      getOperationSpec
    ) as Promise<DisksGetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/disks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiskList
    }
  },
  queryParameters: [
    Parameters.userSubscriptionId,
    Parameters.status,
    Parameters.sharePath,
    Parameters.scaleUnit,
    Parameters.volumeLabel,
    Parameters.count,
    Parameters.start,
    Parameters.apiVersion2
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/disks/{DiskId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Disk
    }
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.diskId
  ],
  serializer
};
