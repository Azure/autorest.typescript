/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeAdminClient } from "../computeAdminClient";
import {
  VMExtensionsGetResponse,
  VMExtensionParameters,
  VMExtensionsCreateResponse,
  VMExtensionsListResponse
} from "../models";

/**
 * Class representing a VMExtensions.
 */
export class VMExtensions {
  private readonly client: ComputeAdminClient;

  /**
   * Initialize a new instance of the class VMExtensions class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeAdminClient) {
    this.client = client;
  }

  /**
   * Returns requested Virtual Machine Extension Image matching publisher, type, version.
   * @param location Location of the resource.
   * @param publisher Name of the publisher.
   * @param version The version of the resource.
   * @param type Type of extension.
   * @param options The options parameters.
   */
  get(
    location: string,
    publisher: string,
    version: string,
    type: string,
    options?: coreHttp.OperationOptions
  ): Promise<VMExtensionsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, publisher, version, type, options: operationOptions },
      getOperationSpec
    ) as Promise<VMExtensionsGetResponse>;
  }

  /**
   * Create a Virtual Machine Extension Image with publisher, version.
   * @param location Location of the resource.
   * @param publisher Name of the publisher.
   * @param version The version of the resource.
   * @param type Type of extension.
   * @param extension Virtual Machine Extension Image creation properties.
   * @param options The options parameters.
   */
  create(
    location: string,
    publisher: string,
    version: string,
    type: string,
    extension: VMExtensionParameters,
    options?: coreHttp.OperationOptions
  ): Promise<VMExtensionsCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        location,
        publisher,
        version,
        type,
        extension,
        options: operationOptions
      },
      createOperationSpec
    ) as Promise<VMExtensionsCreateResponse>;
  }

  /**
   * Deletes specified Virtual Machine Extension Image.
   * @param location Location of the resource.
   * @param publisher Name of the publisher.
   * @param version The version of the resource.
   * @param type Type of extension.
   * @param options The options parameters.
   */
  delete(
    location: string,
    publisher: string,
    version: string,
    type: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, publisher, version, type, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * List of all Virtual Machine Extension Images for the current location are returned.
   * @param location Location of the resource.
   * @param options The options parameters.
   */
  list(
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<VMExtensionsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, options: operationOptions },
      listOperationSpec
    ) as Promise<VMExtensionsListResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/VMExtension/publishers/{publisher}/types/{type}/versions/{version}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VMExtension
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.publisher,
    Parameters.version,
    Parameters.type
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/VMExtension/publishers/{publisher}/types/{type}/versions/{version}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VMExtension
    }
  },
  requestBody: Parameters.extension,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.publisher,
    Parameters.version,
    Parameters.type
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/VMExtension/publishers/{publisher}/types/{type}/versions/{version}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.publisher,
    Parameters.version,
    Parameters.type
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/VMExtension",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VMExtension" } }
        },
        serializedName: "VMExtensionList"
      }
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  serializer
};
