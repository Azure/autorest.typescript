/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeAdminClient } from "../computeAdminClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  PlatformImagesListResponse,
  PlatformImagesGetResponse,
  PlatformImageParameters,
  PlatformImagesCreateResponse
} from "../models";

/**
 * Class representing a PlatformImages.
 */
export class PlatformImages {
  private readonly client: ComputeAdminClient;

  /**
   * Initialize a new instance of the class PlatformImages class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeAdminClient) {
    this.client = client;
  }

  /**
   * Returns a list of all platform images.
   * @param location Location of the resource.
   * @param options The options parameters.
   */
  list(
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<PlatformImagesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, options: operationOptions },
      listOperationSpec
    ) as Promise<PlatformImagesListResponse>;
  }

  /**
   * Returns the specific platform image matching publisher, offer, skus and version.
   * @param location Location of the resource.
   * @param publisher Name of the publisher.
   * @param offer Name of the offer.
   * @param sku Name of the SKU.
   * @param version The version of the resource.
   * @param options The options parameters.
   */
  get(
    location: string,
    publisher: string,
    offer: string,
    sku: string,
    version: string,
    options?: coreHttp.OperationOptions
  ): Promise<PlatformImagesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, publisher, offer, sku, version, options: operationOptions },
      getOperationSpec
    ) as Promise<PlatformImagesGetResponse>;
  }

  /**
   * Creates a new platform image with given publisher, offer, skus and version.
   * @param location Location of the resource.
   * @param publisher Name of the publisher.
   * @param offer Name of the offer.
   * @param sku Name of the SKU.
   * @param version The version of the resource.
   * @param newImage New platform image.
   * @param options The options parameters.
   */
  async create(
    location: string,
    publisher: string,
    offer: string,
    sku: string,
    version: string,
    newImage: PlatformImageParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<PlatformImagesCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      location,
      publisher,
      offer,
      sku,
      version,
      newImage,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        PlatformImagesCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Delete a platform image
   * @param location Location of the resource.
   * @param publisher Name of the publisher.
   * @param offer Name of the offer.
   * @param sku Name of the SKU.
   * @param version The version of the resource.
   * @param options The options parameters.
   */
  delete(
    location: string,
    publisher: string,
    offer: string,
    sku: string,
    version: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, publisher, offer, sku, version, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/platformImage",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PlatformImage" } }
        },
        serializedName: "PlatformImageList"
      }
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/platformImage/publishers/{publisher}/offers/{offer}/skus/{sku}/versions/{version}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PlatformImage
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.publisher,
    Parameters.offer,
    Parameters.sku,
    Parameters.version
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/platformImage/publishers/{publisher}/offers/{offer}/skus/{sku}/versions/{version}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PlatformImage
    },
    201: {
      bodyMapper: Mappers.PlatformImage
    },
    202: {
      bodyMapper: Mappers.PlatformImage
    },
    204: {
      bodyMapper: Mappers.PlatformImage
    }
  },
  requestBody: Parameters.newImage,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.publisher,
    Parameters.offer,
    Parameters.sku,
    Parameters.version
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/platformImage/publishers/{publisher}/offers/{offer}/skus/{sku}/versions/{version}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.publisher,
    Parameters.offer,
    Parameters.sku,
    Parameters.version
  ],
  serializer
};
