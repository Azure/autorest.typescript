/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeAdminClient } from "../computeAdminClient";
import {
  QuotasGetResponse,
  Quota,
  QuotasCreateOrUpdateResponse,
  QuotasListResponse
} from "../models";

/**
 * Class representing a Quotas.
 */
export class Quotas {
  private readonly client: ComputeAdminClient;

  /**
   * Initialize a new instance of the class Quotas class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeAdminClient) {
    this.client = client;
  }

  /**
   * Get an existing Compute Quota.
   * @param location Location of the resource.
   * @param quotaName Name of the quota.
   * @param options The options parameters.
   */
  get(
    location: string,
    quotaName: string,
    options?: coreHttp.OperationOptions
  ): Promise<QuotasGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, quotaName, options: operationOptions },
      getOperationSpec
    ) as Promise<QuotasGetResponse>;
  }

  /**
   * Creates or Updates a Compute Quota with the provided quota parameters.
   * @param location Location of the resource.
   * @param quotaName Name of the quota.
   * @param newQuota New quota to create.
   * @param options The options parameters.
   */
  createOrUpdate(
    location: string,
    quotaName: string,
    newQuota: Quota,
    options?: coreHttp.OperationOptions
  ): Promise<QuotasCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, quotaName, newQuota, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<QuotasCreateOrUpdateResponse>;
  }

  /**
   * Delete an existing Compute quota.
   * @param location Location of the resource.
   * @param quotaName Name of the quota.
   * @param options The options parameters.
   */
  delete(
    location: string,
    quotaName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, quotaName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a list of existing Compute quotas.
   * @param location Location of the resource.
   * @param options The options parameters.
   */
  list(
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<QuotasListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, options: operationOptions },
      listOperationSpec
    ) as Promise<QuotasListResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/quotas/{quotaName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Quota
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.quotaName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/quotas/{quotaName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Quota
    }
  },
  requestBody: Parameters.newQuota,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.quotaName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/quotas/{quotaName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.quotaName
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/quotas",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.QuotaList
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  serializer
};
