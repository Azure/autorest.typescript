/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const ResourceProviderOperationList: coreHttp.CompositeMapper = {
  serializedName: "ResourceProviderOperationList",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ResourceProviderOperation" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperation: coreHttp.CompositeMapper = {
  serializedName: "ResourceProviderOperation",
  type: {
    name: "Composite",
    className: "ResourceProviderOperation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ResourceProviderOperationDisplay"
        }
      }
    }
  }
};

export const ResourceProviderOperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "ResourceProviderOperationDisplay",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDefinition"
        }
      }
    }
  }
};

export const ErrorDefinition: coreHttp.CompositeMapper = {
  serializedName: "ErrorDefinition",
  type: {
    name: "Composite",
    className: "ErrorDefinition",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ErrorDefinition" } }
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const CustomRPManifest: coreHttp.CompositeMapper = {
  serializedName: "CustomRPManifest",
  type: {
    name: "Composite",
    className: "CustomRPManifest",
    modelProperties: {
      ...Resource.type.modelProperties,
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomRPActionRouteDefinition"
            }
          }
        }
      },
      resourceTypes: {
        serializedName: "properties.resourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomRPResourceTypeRouteDefinition"
            }
          }
        }
      },
      validations: {
        serializedName: "properties.validations",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CustomRPValidations" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomRPRouteDefinition: coreHttp.CompositeMapper = {
  serializedName: "CustomRPRouteDefinition",
  type: {
    name: "Composite",
    className: "CustomRPRouteDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      endpoint: {
        constraints: {
          Pattern: new RegExp("^https://.+")
        },
        serializedName: "endpoint",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomRPActionRouteDefinition: coreHttp.CompositeMapper = {
  serializedName: "CustomRPActionRouteDefinition",
  type: {
    name: "Composite",
    className: "CustomRPActionRouteDefinition",
    modelProperties: {
      ...CustomRPRouteDefinition.type.modelProperties,
      routingType: {
        defaultValue: "Proxy",
        serializedName: "routingType",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomRPResourceTypeRouteDefinition: coreHttp.CompositeMapper = {
  serializedName: "CustomRPResourceTypeRouteDefinition",
  type: {
    name: "Composite",
    className: "CustomRPResourceTypeRouteDefinition",
    modelProperties: {
      ...CustomRPRouteDefinition.type.modelProperties,
      routingType: {
        serializedName: "routingType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomRPValidations: coreHttp.CompositeMapper = {
  serializedName: "CustomRPValidations",
  type: {
    name: "Composite",
    className: "CustomRPValidations",
    modelProperties: {
      validationType: {
        defaultValue: "Swagger",
        serializedName: "validationType",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      specification: {
        constraints: {
          Pattern: new RegExp("^https://raw.githubusercontent.com/.+")
        },
        serializedName: "specification",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProvidersUpdate: coreHttp.CompositeMapper = {
  serializedName: "ResourceProvidersUpdate",
  type: {
    name: "Composite",
    className: "ResourceProvidersUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ListByCustomRPManifest: coreHttp.CompositeMapper = {
  serializedName: "ListByCustomRPManifest",
  type: {
    name: "Composite",
    className: "ListByCustomRPManifest",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CustomRPManifest" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Association: coreHttp.CompositeMapper = {
  serializedName: "Association",
  type: {
    name: "Composite",
    className: "Association",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetResourceId: {
        serializedName: "properties.targetResourceId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssociationsList: coreHttp.CompositeMapper = {
  serializedName: "AssociationsList",
  type: {
    name: "Composite",
    className: "AssociationsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Association" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
