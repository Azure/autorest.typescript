/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { Customproviders } from "../customproviders";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  Association,
  AssociationsCreateOrUpdateResponse,
  AssociationsGetResponse,
  AssociationsListAllResponse,
  AssociationsListAllNextResponse
} from "../models";

/**
 * Class representing a Associations.
 */
export class Associations {
  private readonly client: Customproviders;

  /**
   * Initialize a new instance of the class Associations class.
   * @param client Reference to the service client
   */
  constructor(client: Customproviders) {
    this.client = client;
  }

  /**
   * Create or update an association.
   * @param association The parameters required to create or update an association.
   * @param scope The scope of the association. The scope can be any valid REST resource instance. For
   *              example, use
   *              '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
   *              for a virtual machine resource.
   * @param associationName The name of the association.
   * @param options The options parameters.
   */
  async createOrUpdate(
    association: Association,
    scope: string,
    associationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<AssociationsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      association,
      scope,
      associationName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        AssociationsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Delete an association.
   * @param associationName The name of the association.
   * @param scope The scope of the association.
   * @param options The options parameters.
   */
  async delete(
    associationName: string,
    scope: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      associationName,
      scope,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Get an association.
   * @param associationName The name of the association.
   * @param scope The scope of the association.
   * @param options The options parameters.
   */
  get(
    associationName: string,
    scope: string,
    options?: coreHttp.OperationOptions
  ): Promise<AssociationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { associationName, scope, options: operationOptions },
      getOperationSpec
    ) as Promise<AssociationsGetResponse>;
  }

  /**
   * Gets all association for the given scope.
   * @param scope The scope of the association.
   * @param options The options parameters.
   */
  listAll(
    scope: string,
    options?: coreHttp.OperationOptions
  ): Promise<AssociationsListAllResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, options: operationOptions },
      listAllOperationSpec
    ) as Promise<AssociationsListAllResponse>;
  }

  /**
   * ListAllNext
   * @param scope The scope of the association.
   * @param nextLink The nextLink from the previous successful call to the ListAll method.
   * @param options The options parameters.
   */
  listAllNext(
    scope: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AssociationsListAllNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, nextLink, options: operationOptions },
      listAllNextOperationSpec
    ) as Promise<AssociationsListAllNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.CustomProviders/associations/{associationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Association
    },
    201: {
      bodyMapper: Mappers.Association
    },
    202: {
      bodyMapper: Mappers.Association
    },
    204: {
      bodyMapper: Mappers.Association
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.association,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.associationName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.CustomProviders/associations/{associationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.associationName,
    Parameters.scope1
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.CustomProviders/associations/{associationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Association
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.associationName,
    Parameters.scope1
  ],
  serializer
};
const listAllOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CustomProviders/associations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssociationsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope1],
  serializer
};
const listAllNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssociationsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.nextLink3],
  serializer
};
