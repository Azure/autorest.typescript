/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EngagementFabric } from "../engagementFabric";
import {
  ChannelsGetResponse,
  Channel,
  ChannelsCreateOrUpdateResponse,
  ChannelsListByAccountResponse
} from "../models";

/**
 * Class representing a Channels.
 */
export class Channels {
  private readonly client: EngagementFabric;

  /**
   * Initialize a new instance of the class Channels class.
   * @param client Reference to the service client
   */
  constructor(client: EngagementFabric) {
    this.client = client;
  }

  /**
   * Get the EngagementFabric channel
   * @param resourceGroupName Resource Group Name
   * @param accountName Account Name
   * @param channelName Channel Name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    channelName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ChannelsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        channelName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ChannelsGetResponse>;
  }

  /**
   * Create or Update the EngagementFabric channel
   * @param resourceGroupName Resource Group Name
   * @param accountName Account Name
   * @param channelName Channel Name
   * @param channel The EngagementFabric channel description
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    channelName: string,
    channel: Channel,
    options?: coreHttp.OperationOptions
  ): Promise<ChannelsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        channelName,
        channel,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<ChannelsCreateOrUpdateResponse>;
  }

  /**
   * Delete the EngagementFabric channel
   * @param resourceGroupName Resource Group Name
   * @param accountName Account Name
   * @param channelName The EngagementFabric channel name
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    channelName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        channelName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * List the EngagementFabric channels
   * @param resourceGroupName Resource Group Name
   * @param accountName Account Name
   * @param options The options parameters.
   */
  listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ChannelsListByAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options: operationOptions },
      listByAccountOperationSpec
    ) as Promise<ChannelsListByAccountResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/Channels/{channelName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Channel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.channelName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/Channels/{channelName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Channel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.channel,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.channelName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/Channels/{channelName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.channelName1
  ],
  serializer
};
const listByAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/Channels",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChannelList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  serializer
};
