/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { EngagementFabricContext } from "./engagementFabricContext";
import {
  CheckNameAvailabilityParameter,
  EngagementFabricCheckNameAvailabilityResponse
} from "./models";

class EngagementFabric extends EngagementFabricContext {
  /**
   * Initializes a new instance of the EngagementFabric class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Subscription ID
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    subscriptionId: string,
    options?: Models.EngagementFabricOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.accounts = new operations.Accounts(this);
    this.channels = new operations.Channels(this);
    this.operations = new operations.Operations(this);
    this.sKUs = new operations.SKUs(this);
  }

  /**
   * Check availability of EngagementFabric resource
   * @param resourceGroupName Resource Group Name
   * @param parameters Parameter describing the name to be checked
   * @param options The options parameters.
   */
  checkNameAvailability(
    resourceGroupName: string,
    parameters: CheckNameAvailabilityParameter,
    options?: coreHttp.OperationOptions
  ): Promise<EngagementFabricCheckNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { resourceGroupName, parameters, options: operationOptions },
      checkNameAvailabilityOperationSpec
    ) as Promise<EngagementFabricCheckNameAvailabilityResponse>;
  }

  accounts: operations.Accounts;
  channels: operations.Channels;
  operations: operations.Operations;
  sKUs: operations.SKUs;
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};

// Operation Specifications

export {
  EngagementFabric,
  EngagementFabricContext,
  Models as EngagementFabricModels,
  Mappers as EngagementFabricMappers
};
export * from "./operations";
