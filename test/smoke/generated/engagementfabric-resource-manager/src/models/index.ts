/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The base model for Azure resource
 */
export interface Resource {
  /**
   * The ID of the resource
   */
  readonly id?: string;
  /**
   * The name of the resource
   */
  readonly name?: string;
  /**
   * The fully qualified type of the resource
   */
  readonly type?: string;
}

/**
 * The base model for the tracked Azure resource
 */
export type TrackedResource = Resource & {
  /**
   * The location of the resource
   */
  location: string;
  /**
   * The tags of the resource
   */
  tags?: { [propertyName: string]: string };
  /**
   * The SKU of the resource
   */
  sku: Sku;
};

/**
 * The EngagementFabric SKU
 */
export interface Sku {
  /**
   * The name of the SKU
   */
  name: string;
  /**
   * The price tier of the SKU
   */
  tier?: string;
}

/**
 * The EngagementFabric account
 */
export type Account = TrackedResource & {};

/**
 * The default error response
 */
export interface CloudError {
  /**
   * Content of the error
   */
  error?: CloudErrorBody;
}

/**
 * Content of the default error response
 */
export interface CloudErrorBody {
  /**
   * The error code
   */
  code?: string;
  /**
   * The error message
   */
  message?: string;
  /**
   * The target of the particular error
   */
  target?: string;
  /**
   * The list of additional details
   */
  details?: CloudErrorBody[];
}

/**
 * The patch of EngagementFabric account
 */
export interface AccountPatch {
  /**
   * The tags of the resource
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The list of the EngagementFabric accounts
 */
export interface AccountList {
  /**
   * EngagementFabric accounts
   */
  value?: Account[];
}

/**
 * The list of the EngagementFabric account keys
 */
export interface KeyDescriptionList {
  /**
   * Account keys
   */
  readonly value?: KeyDescription[];
}

/**
 * The description of the EngagementFabric account key
 */
export interface KeyDescription {
  /**
   * The name of the key
   */
  readonly name?: string;
  /**
   * The rank of the key
   */
  readonly rank?: KeyRank;
  /**
   * The value of the key
   */
  readonly value?: string;
}

/**
 * The parameter to regenerate single EngagementFabric account key
 */
export interface RegenerateKeyParameter {
  /**
   * The name of key to be regenerated
   */
  name: string;
  /**
   * The rank of the key to be regenerated
   */
  rank: KeyRank;
}

/**
 * List of the EngagementFabric channel descriptions
 */
export interface ChannelTypeDescriptionList {
  /**
   * Channel descriptions
   */
  value?: ChannelTypeDescription[];
}

/**
 * EngagementFabric channel description
 */
export interface ChannelTypeDescription {
  /**
   * Channel type
   */
  channelType?: string;
  /**
   * Text description for the channel
   */
  channelDescription?: string;
  /**
   * All the available functions for the channel
   */
  channelFunctions?: string[];
}

/**
 * The base model for the proxy-only Azure resource
 */
export type ProxyOnlyResource = Resource & {};

/**
 * The EngagementFabric channel
 */
export type Channel = ProxyOnlyResource & {
  /**
   * The channel type
   */
  channelType?: string;
  /**
   * The functions to be enabled for the channel
   */
  channelFunctions?: string[];
  /**
   * The channel credentials
   */
  credentials?: { [propertyName: string]: string };
};

/**
 * The list of the EngagementFabric channels
 */
export interface ChannelList {
  /**
   * EngagementFabric channels
   */
  value?: Channel[];
}

/**
 * The parameter for name availability check
 */
export interface CheckNameAvailabilityParameter {
  /**
   * The name to be checked
   */
  name: string;
  /**
   * The fully qualified resource type for the name to be checked
   */
  type: string;
}

/**
 * The result of name availability check
 */
export interface CheckNameAvailabilityResult {
  /**
   * The name to be checked
   */
  readonly nameAvailable?: boolean;
  /**
   * The reason if name is unavailable
   */
  readonly reason?: CheckNameUnavailableReason;
  /**
   * The message if name is unavailable
   */
  readonly message?: string;
}

/**
 * The list of the EngagementFabric operations
 */
export interface OperationList {
  /**
   * The EngagementFabric operations
   */
  readonly value?: Operation[];
}

/**
 * The EngagementFabric operation
 */
export interface Operation {
  /**
   * The name of the EngagementFabric operation
   */
  readonly name?: string;
  /**
   * The display content of the EngagementFabric operation
   */
  readonly display?: OperationDisplay;
}

/**
 * The display information of the EngagementFabric operation
 */
export interface OperationDisplay {
  /**
   * The resource provider namespace of the EngagementFabric operation
   */
  readonly provider?: string;
  /**
   * The resource type of the EngagementFabric operation
   */
  readonly resource?: string;
  /**
   * The name of the EngagementFabric operation
   */
  readonly operation?: string;
  /**
   * The description of the EngagementFabric operation
   */
  readonly description?: string;
}

/**
 * The list of the EngagementFabric SKU descriptions
 */
export interface SkuDescriptionList {
  /**
   * SKU descriptions
   */
  readonly value?: SkuDescription[];
}

/**
 * The EngagementFabric SKU description of given resource type
 */
export interface SkuDescription {
  /**
   * The fully qualified resource type
   */
  readonly resourceType?: string;
  /**
   * The name of the SKU
   */
  readonly name?: string;
  /**
   * The price tier of the SKU
   */
  readonly tier?: string;
  /**
   * The set of locations that the SKU is available
   */
  readonly locations?: string[];
  /**
   * Locations and zones
   */
  readonly locationInfo?: SkuLocationInfoItem[];
  /**
   * The restrictions because of which SKU cannot be used
   */
  readonly restrictions?: any[];
}

/**
 * The Locations and zones info for SKU
 */
export interface SkuLocationInfoItem {
  /**
   * The available location of the SKU
   */
  location?: string;
  /**
   * The available zone of the SKU
   */
  zones?: string[];
}

/**
 * Defines values for KeyRank.
 */
export type KeyRank = "PrimaryKey" | "SecondaryKey";
/**
 * Defines values for CheckNameUnavailableReason.
 */
export type CheckNameUnavailableReason = "Invalid" | "AlreadyExists";

/**
 * Contains response data for the get operation.
 */
export type AccountsGetResponse = Account & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Account;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AccountsCreateOrUpdateResponse = Account & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Account;
  };
};

/**
 * Contains response data for the update operation.
 */
export type AccountsUpdateResponse = Account & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Account;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AccountsListResponse = AccountList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccountList;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type AccountsListByResourceGroupResponse = AccountList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AccountList;
  };
};

/**
 * Contains response data for the listKeys operation.
 */
export type AccountsListKeysResponse = KeyDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyDescriptionList;
  };
};

/**
 * Contains response data for the regenerateKey operation.
 */
export type AccountsRegenerateKeyResponse = KeyDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyDescription;
  };
};

/**
 * Contains response data for the listChannelTypes operation.
 */
export type AccountsListChannelTypesResponse = ChannelTypeDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChannelTypeDescriptionList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ChannelsGetResponse = Channel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Channel;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ChannelsCreateOrUpdateResponse = Channel & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Channel;
  };
};

/**
 * Contains response data for the listByAccount operation.
 */
export type ChannelsListByAccountResponse = ChannelList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChannelList;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type EngagementFabricCheckNameAvailabilityResponse = CheckNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameAvailabilityResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type SKUsListResponse = SkuDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SkuDescriptionList;
  };
};

/**
 * Optional parameters.
 */
export interface EngagementFabricOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
