/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MachineLearningComputeManagementClient } from "../machineLearningComputeManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  OperationalizationCluster,
  OperationalizationClustersCreateOrUpdateResponse,
  OperationalizationClustersGetResponse,
  OperationalizationClusterUpdateParameters,
  OperationalizationClustersUpdateResponse,
  OperationalizationClustersDeleteOptionalParams,
  OperationalizationClustersDeleteResponse,
  OperationalizationClustersListKeysResponse,
  OperationalizationClustersCheckSystemServicesUpdatesAvailableResponse,
  OperationalizationClustersUpdateSystemServicesResponse,
  OperationalizationClustersListByResourceGroupOptionalParams,
  OperationalizationClustersListByResourceGroupResponse,
  OperationalizationClustersListBySubscriptionIdOptionalParams,
  OperationalizationClustersListBySubscriptionIdResponse,
  OperationalizationClustersListByResourceGroupNextOptionalParams,
  OperationalizationClustersListByResourceGroupNextResponse,
  OperationalizationClustersListBySubscriptionIdNextOptionalParams,
  OperationalizationClustersListBySubscriptionIdNextResponse
} from "../models";

/**
 * Class representing a OperationalizationClusters.
 */
export class OperationalizationClusters {
  private readonly client: MachineLearningComputeManagementClient;

  /**
   * Initialize a new instance of the class OperationalizationClusters class.
   * @param client Reference to the service client
   */
  constructor(client: MachineLearningComputeManagementClient) {
    this.client = client;
  }

  /**
   * Create or update an operationalization cluster.
   * @param parameters Parameters supplied to create or update an Operationalization cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  async createOrUpdate(
    parameters: OperationalizationCluster,
    resourceGroupName: string,
    clusterName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<OperationalizationClustersCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      parameters,
      resourceGroupName,
      clusterName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        OperationalizationClustersCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets the operationalization cluster resource view. Note that the credentials are not returned by
   * this call. Call ListKeys to get them.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    options?: coreHttp.OperationOptions
  ): Promise<OperationalizationClustersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterName, options: operationOptions },
      getOperationSpec
    ) as Promise<OperationalizationClustersGetResponse>;
  }

  /**
   * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update
   * other properties.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param parameters The parameters supplied to patch the cluster.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    clusterName: string,
    parameters: OperationalizationClusterUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<OperationalizationClustersUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterName, parameters, options: operationOptions },
      updateOperationSpec
    ) as Promise<OperationalizationClustersUpdateResponse>;
  }

  /**
   * Deletes the specified cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersDeleteOptionalParams
  ): Promise<LROPoller<OperationalizationClustersDeleteResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      clusterName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        OperationalizationClustersDeleteResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a
   * long running operation because it fetches keys from dependencies.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    clusterName: string,
    options?: coreHttp.OperationOptions
  ): Promise<OperationalizationClustersListKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterName, options: operationOptions },
      listKeysOperationSpec
    ) as Promise<OperationalizationClustersListKeysResponse>;
  }

  /**
   * Checks if updates are available for system services in the cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  checkSystemServicesUpdatesAvailable(
    resourceGroupName: string,
    clusterName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    OperationalizationClustersCheckSystemServicesUpdatesAvailableResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterName, options: operationOptions },
      checkSystemServicesUpdatesAvailableOperationSpec
    ) as Promise<
      OperationalizationClustersCheckSystemServicesUpdatesAvailableResponse
    >;
  }

  /**
   * Updates system services in a cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  async updateSystemServices(
    resourceGroupName: string,
    clusterName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<OperationalizationClustersUpdateSystemServicesResponse>
  > {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      clusterName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        OperationalizationClustersUpdateSystemServicesResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateSystemServicesOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateSystemServicesOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets the clusters in the specified resource group.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: OperationalizationClustersListByResourceGroupOptionalParams
  ): Promise<OperationalizationClustersListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<OperationalizationClustersListByResourceGroupResponse>;
  }

  /**
   * Gets the operationalization clusters in the specified subscription.
   * @param options The options parameters.
   */
  listBySubscriptionId(
    options?: OperationalizationClustersListBySubscriptionIdOptionalParams
  ): Promise<OperationalizationClustersListBySubscriptionIdResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listBySubscriptionIdOperationSpec
    ) as Promise<OperationalizationClustersListBySubscriptionIdResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: OperationalizationClustersListByResourceGroupNextOptionalParams
  ): Promise<OperationalizationClustersListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<OperationalizationClustersListByResourceGroupNextResponse>;
  }

  /**
   * ListBySubscriptionIdNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionId method.
   * @param options The options parameters.
   */
  listBySubscriptionIdNext(
    nextLink: string,
    options?: OperationalizationClustersListBySubscriptionIdNextOptionalParams
  ): Promise<OperationalizationClustersListBySubscriptionIdNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listBySubscriptionIdNextOperationSpec
    ) as Promise<OperationalizationClustersListBySubscriptionIdNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.OperationalizationCluster
    },
    201: {
      bodyMapper: Mappers.OperationalizationCluster
    },
    202: {
      bodyMapper: Mappers.OperationalizationCluster
    },
    204: {
      bodyMapper: Mappers.OperationalizationCluster
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWrapper
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationalizationCluster
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWrapper
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.OperationalizationCluster
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWrapper
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.OperationalizationClustersDeleteHeaders
    },
    201: {
      headersMapper: Mappers.OperationalizationClustersDeleteHeaders
    },
    202: {
      headersMapper: Mappers.OperationalizationClustersDeleteHeaders
    },
    204: {
      headersMapper: Mappers.OperationalizationClustersDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWrapper
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.deleteAll],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  serializer
};
const listKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/listKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationalizationClusterCredentials
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  serializer
};
const checkSystemServicesUpdatesAvailableOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/checkSystemServicesUpdatesAvailable",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckSystemServicesUpdatesAvailableResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  serializer
};
const updateSystemServicesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/updateSystemServices",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateSystemServicesResponse
    },
    201: {
      bodyMapper: Mappers.UpdateSystemServicesResponse
    },
    202: {
      bodyMapper: Mappers.UpdateSystemServicesResponse
    },
    204: {
      bodyMapper: Mappers.UpdateSystemServicesResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedOperationalizationClustersList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const listBySubscriptionIdOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningCompute/operationalizationClusters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedOperationalizationClustersList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedOperationalizationClustersList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  serializer
};
const listBySubscriptionIdNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedOperationalizationClustersList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink1
  ],
  serializer
};
